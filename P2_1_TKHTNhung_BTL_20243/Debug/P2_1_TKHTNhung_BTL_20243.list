
P2_1_TKHTNhung_BTL_20243.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800db18  0800db18  0000eb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e160  0800e160  000101e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e160  0800e160  0000f160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e168  0800e168  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e168  0800e168  0000f168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e16c  0800e16c  0000f16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800e170  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d80  200001e0  0800e350  000101e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f60  0800e350  00010f60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c67d  00000000  00000000  00010209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f27  00000000  00000000  0002c886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  000307b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001335  00000000  00000000  00032048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000067ce  00000000  00000000  0003337d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c03  00000000  00000000  00039b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099dd4  00000000  00000000  0005c74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dd4  00000000  00000000  000f6568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000fe33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db00 	.word	0x0800db00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800db00 	.word	0x0800db00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char * ptr, int len) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <_write+0x28>)
 80010a8:	f003 fd42 	bl	8004b30 <HAL_UART_Transmit>
  return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002e0 	.word	0x200002e0

080010bc <HAL_UART_RxCpltCallback>:
uint8_t data_rx;
char uart_buff[100];
uint8_t uart_index = 0;
uint8_t uart_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	if (data_rx == '\n'){
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d109      	bne.n	80010e0 <HAL_UART_RxCpltCallback+0x24>
		uart_buff[uart_index] = '\0';
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_RxCpltCallback+0x74>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	5499      	strb	r1, [r3, r2]
		uart_flag = 1;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e00a      	b.n	80010f6 <HAL_UART_RxCpltCallback+0x3a>
	}else{
		uart_buff[uart_index++] = data_rx;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	b2d1      	uxtb	r1, r2
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010ea:	7011      	strb	r1, [r2, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 80010f0:	7819      	ldrb	r1, [r3, #0]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_UART_RxCpltCallback+0x74>)
 80010f4:	5499      	strb	r1, [r3, r2]
	}

	if (uart_flag == 1){
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10a      	bne.n	8001114 <HAL_UART_RxCpltCallback+0x58>
	  uart_flag = 0;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
	  uart_index = 0;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	  osSemaphoreRelease(Sem1_CMDHandle);
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_UART_RxCpltCallback+0x7c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f004 ff26 	bl	8005f60 <osSemaphoreRelease>
	}
	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4904      	ldr	r1, [pc, #16]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 8001118:	4808      	ldr	r0, [pc, #32]	@ (800113c <HAL_UART_RxCpltCallback+0x80>)
 800111a:	f003 fd94 	bl	8004c46 <HAL_UART_Receive_IT>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000033c 	.word	0x2000033c
 800112c:	200003a4 	.word	0x200003a4
 8001130:	20000340 	.word	0x20000340
 8001134:	200003a5 	.word	0x200003a5
 8001138:	20000334 	.word	0x20000334
 800113c:	200002e0 	.word	0x200002e0

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 fe7c 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f862 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f000 f9c4 	bl	80014d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001150:	f000 f998 	bl	8001484 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001154:	f000 f8a2 	bl	800129c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001158:	f000 f8ce 	bl	80012f8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800115c:	f000 f91c 	bl	8001398 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8001160:	2201      	movs	r2, #1
 8001162:	491b      	ldr	r1, [pc, #108]	@ (80011d0 <main+0x90>)
 8001164:	481b      	ldr	r0, [pc, #108]	@ (80011d4 <main+0x94>)
 8001166:	f003 fd6e 	bl	8004c46 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800116a:	210c      	movs	r1, #12
 800116c:	481a      	ldr	r0, [pc, #104]	@ (80011d8 <main+0x98>)
 800116e:	f002 fe2f 	bl	8003dd0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001172:	f004 fcfd 	bl	8005b70 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem1_CMD */
  Sem1_CMDHandle = osSemaphoreNew(1, 0, &Sem1_CMD_attributes);
 8001176:	4a19      	ldr	r2, [pc, #100]	@ (80011dc <main+0x9c>)
 8001178:	2100      	movs	r1, #0
 800117a:	2001      	movs	r0, #1
 800117c:	f004 fe14 	bl	8005da8 <osSemaphoreNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <main+0xa0>)
 8001184:	6013      	str	r3, [r2, #0]

  /* creation of Sem2_UART */
  Sem2_UARTHandle = osSemaphoreNew(1, 1, &Sem2_UART_attributes);
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <main+0xa4>)
 8001188:	2101      	movs	r1, #1
 800118a:	2001      	movs	r0, #1
 800118c:	f004 fe0c 	bl	8005da8 <osSemaphoreNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a15      	ldr	r2, [pc, #84]	@ (80011e8 <main+0xa8>)
 8001194:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_MPU9250 */
  Task1_MPU9250Handle = osThreadNew(S_Task1_MPU9250, NULL, &Task1_MPU9250_attributes);
 8001196:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <main+0xac>)
 8001198:	2100      	movs	r1, #0
 800119a:	4815      	ldr	r0, [pc, #84]	@ (80011f0 <main+0xb0>)
 800119c:	f004 fd45 	bl	8005c2a <osThreadNew>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <main+0xb4>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* creation of Task2_HCSR04 */
  Task2_HCSR04Handle = osThreadNew(S_Task2_HCSR04, NULL, &Task2_HCSR04_attributes);
 80011a6:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <main+0xb8>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	4814      	ldr	r0, [pc, #80]	@ (80011fc <main+0xbc>)
 80011ac:	f004 fd3d 	bl	8005c2a <osThreadNew>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <main+0xc0>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* creation of Task3_UARTCMD */
  Task3_UARTCMDHandle = osThreadNew(S_Task3_UARTCMD, NULL, &Task3_UARTCMD_attributes);
 80011b6:	4a13      	ldr	r2, [pc, #76]	@ (8001204 <main+0xc4>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	4813      	ldr	r0, [pc, #76]	@ (8001208 <main+0xc8>)
 80011bc:	f004 fd35 	bl	8005c2a <osThreadNew>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a12      	ldr	r2, [pc, #72]	@ (800120c <main+0xcc>)
 80011c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011c6:	f004 fcf5 	bl	8005bb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ca:	bf00      	nop
 80011cc:	e7fd      	b.n	80011ca <main+0x8a>
 80011ce:	bf00      	nop
 80011d0:	2000033c 	.word	0x2000033c
 80011d4:	200002e0 	.word	0x200002e0
 80011d8:	20000298 	.word	0x20000298
 80011dc:	0800dce8 	.word	0x0800dce8
 80011e0:	20000334 	.word	0x20000334
 80011e4:	0800dcf8 	.word	0x0800dcf8
 80011e8:	20000338 	.word	0x20000338
 80011ec:	0800dc7c 	.word	0x0800dc7c
 80011f0:	080015a1 	.word	0x080015a1
 80011f4:	20000328 	.word	0x20000328
 80011f8:	0800dca0 	.word	0x0800dca0
 80011fc:	080016ad 	.word	0x080016ad
 8001200:	2000032c 	.word	0x2000032c
 8001204:	0800dcc4 	.word	0x0800dcc4
 8001208:	08001705 	.word	0x08001705
 800120c:	20000330 	.word	0x20000330

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	@ 0x40
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2228      	movs	r2, #40	@ 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f009 f95c 	bl	800a4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001232:	2301      	movs	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800124c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800124e:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f002 f80f 	bl	800327c <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001264:	f000 fb1f 	bl	80018a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	230f      	movs	r3, #15
 800126a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2102      	movs	r1, #2
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fa7c 	bl	8003780 <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800128e:	f000 fb0a 	bl	80018a6 <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3740      	adds	r7, #64	@ 0x40
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f001 f941 	bl	8002560 <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 fadf 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001fc 	.word	0x200001fc
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <MX_TIM1_Init+0x98>)
 8001316:	4a1f      	ldr	r2, [pc, #124]	@ (8001394 <MX_TIM1_Init+0x9c>)
 8001318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <MX_TIM1_Init+0x98>)
 800131c:	223f      	movs	r2, #63	@ 0x3f
 800131e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <MX_TIM1_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <MX_TIM1_Init+0x98>)
 8001328:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800132c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <MX_TIM1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MX_TIM1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <MX_TIM1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001340:	4813      	ldr	r0, [pc, #76]	@ (8001390 <MX_TIM1_Init+0x98>)
 8001342:	f002 fbdb 	bl	8003afc <HAL_TIM_Base_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 faab 	bl	80018a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <MX_TIM1_Init+0x98>)
 800135e:	f002 ff8b 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001368:	f000 fa9d 	bl	80018a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_TIM1_Init+0x98>)
 800137a:	f003 fb19 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001384:	f000 fa8f 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000250 	.word	0x20000250
 8001394:	40012c00 	.word	0x40012c00

08001398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	@ 0x38
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <MX_TIM4_Init+0xe4>)
 80013ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001480 <MX_TIM4_Init+0xe8>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <MX_TIM4_Init+0xe4>)
 80013d0:	223f      	movs	r2, #63	@ 0x3f
 80013d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <MX_TIM4_Init+0xe4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80013da:	4b28      	ldr	r3, [pc, #160]	@ (800147c <MX_TIM4_Init+0xe4>)
 80013dc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <MX_TIM4_Init+0xe4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <MX_TIM4_Init+0xe4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013ee:	4823      	ldr	r0, [pc, #140]	@ (800147c <MX_TIM4_Init+0xe4>)
 80013f0:	f002 fb84 	bl	8003afc <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80013fa:	f000 fa54 	bl	80018a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001402:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001404:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001408:	4619      	mov	r1, r3
 800140a:	481c      	ldr	r0, [pc, #112]	@ (800147c <MX_TIM4_Init+0xe4>)
 800140c:	f002 ff34 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001416:	f000 fa46 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800141a:	4818      	ldr	r0, [pc, #96]	@ (800147c <MX_TIM4_Init+0xe4>)
 800141c:	f002 fc80 	bl	8003d20 <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001426:	f000 fa3e 	bl	80018a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	4619      	mov	r1, r3
 8001438:	4810      	ldr	r0, [pc, #64]	@ (800147c <MX_TIM4_Init+0xe4>)
 800143a:	f003 fab9 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001444:	f000 fa2f 	bl	80018a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	@ 0x60
 800144a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	220c      	movs	r2, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4807      	ldr	r0, [pc, #28]	@ (800147c <MX_TIM4_Init+0xe4>)
 8001460:	f002 fe48 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800146a:	f000 fa1c 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800146e:	4803      	ldr	r0, [pc, #12]	@ (800147c <MX_TIM4_Init+0xe4>)
 8001470:	f000 fad0 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 8001474:	bf00      	nop
 8001476:	3738      	adds	r7, #56	@ 0x38
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000298 	.word	0x20000298
 8001480:	40000800 	.word	0x40000800

08001484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <MX_USART1_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014bc:	f003 fae8 	bl	8004a90 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014c6:	f000 f9ee 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002e0 	.word	0x200002e0
 80014d4:	40013800 	.word	0x40013800

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <MX_GPIO_Init+0xb8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a27      	ldr	r2, [pc, #156]	@ (8001590 <MX_GPIO_Init+0xb8>)
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <MX_GPIO_Init+0xb8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <MX_GPIO_Init+0xb8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <MX_GPIO_Init+0xb8>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <MX_GPIO_Init+0xb8>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <MX_GPIO_Init+0xb8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <MX_GPIO_Init+0xb8>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_GPIO_Init+0xb8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800153a:	4816      	ldr	r0, [pc, #88]	@ (8001594 <MX_GPIO_Init+0xbc>)
 800153c:	f000 ffdf 	bl	80024fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_GPIO_Init+0xc0>)
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	4811      	ldr	r0, [pc, #68]	@ (800159c <MX_GPIO_Init+0xc4>)
 8001556:	f000 fe37 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800155e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2302      	movs	r3, #2
 800156a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	4808      	ldr	r0, [pc, #32]	@ (8001594 <MX_GPIO_Init+0xbc>)
 8001574:	f000 fe28 	bl	80021c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2105      	movs	r1, #5
 800157c:	2028      	movs	r0, #40	@ 0x28
 800157e:	f000 fd46 	bl	800200e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001582:	2028      	movs	r0, #40	@ 0x28
 8001584:	f000 fd5f 	bl	8002046 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	40010800 	.word	0x40010800
 8001598:	10310000 	.word	0x10310000
 800159c:	40010c00 	.word	0x40010c00

080015a0 <S_Task1_MPU9250>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task1_MPU9250 */
void S_Task1_MPU9250(void *argument)
{
 80015a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015a4:	b088      	sub	sp, #32
 80015a6:	af04      	add	r7, sp, #16
 80015a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t next_wake_time = osKernelGetTickCount();
 80015aa:	f004 fb29 	bl	8005c00 <osKernelGetTickCount>
 80015ae:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80015b0:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <S_Task1_MPU9250+0xe0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fc7f 	bl	8005ebc <osSemaphoreAcquire>

	printf("\nTask 1 in: %lu\n", HAL_GetTick());
 80015be:	f000 fc67 	bl	8001e90 <HAL_GetTick>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4619      	mov	r1, r3
 80015c6:	482f      	ldr	r0, [pc, #188]	@ (8001684 <S_Task1_MPU9250+0xe4>)
 80015c8:	f008 fe20 	bl	800a20c <iprintf>

	osSemaphoreRelease(Sem2_UARTHandle);
 80015cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <S_Task1_MPU9250+0xe0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fcc5 	bl	8005f60 <osSemaphoreRelease>

	MPU9250_Getdata();
 80015d6:	f004 fa77 	bl	8005ac8 <MPU9250_Getdata>

	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80015da:	4b29      	ldr	r3, [pc, #164]	@ (8001680 <S_Task1_MPU9250+0xe0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 31ff 	mov.w	r1, #4294967295
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fc6a 	bl	8005ebc <osSemaphoreAcquire>

	printf("Data MPU: ax: %.2f  ay: %.2f  az: %.2f\n", ax, ay, az);
 80015e8:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <S_Task1_MPU9250+0xe8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff1b 	bl	8000428 <__aeabi_f2d>
 80015f2:	4680      	mov	r8, r0
 80015f4:	4689      	mov	r9, r1
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <S_Task1_MPU9250+0xec>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff14 	bl	8000428 <__aeabi_f2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <S_Task1_MPU9250+0xf0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff0d 	bl	8000428 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001616:	e9cd 4500 	strd	r4, r5, [sp]
 800161a:	4642      	mov	r2, r8
 800161c:	464b      	mov	r3, r9
 800161e:	481d      	ldr	r0, [pc, #116]	@ (8001694 <S_Task1_MPU9250+0xf4>)
 8001620:	f008 fdf4 	bl	800a20c <iprintf>
	printf("gx: %.2f  gy: %.2f  gz: %.2f\n", gx, gy, gz);
 8001624:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <S_Task1_MPU9250+0xf8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fefd 	bl	8000428 <__aeabi_f2d>
 800162e:	4680      	mov	r8, r0
 8001630:	4689      	mov	r9, r1
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <S_Task1_MPU9250+0xfc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fef6 	bl	8000428 <__aeabi_f2d>
 800163c:	4604      	mov	r4, r0
 800163e:	460d      	mov	r5, r1
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <S_Task1_MPU9250+0x100>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe feef 	bl	8000428 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001652:	e9cd 4500 	strd	r4, r5, [sp]
 8001656:	4642      	mov	r2, r8
 8001658:	464b      	mov	r3, r9
 800165a:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <S_Task1_MPU9250+0x104>)
 800165c:	f008 fdd6 	bl	800a20c <iprintf>

	osSemaphoreRelease(Sem2_UARTHandle);
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <S_Task1_MPU9250+0xe0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f004 fc7b 	bl	8005f60 <osSemaphoreRelease>

	next_wake_time += timeCycle1;
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <S_Task1_MPU9250+0x108>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f004 fb6a 	bl	8005d4e <osDelayUntil>
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 800167a:	bf00      	nop
 800167c:	e798      	b.n	80015b0 <S_Task1_MPU9250+0x10>
 800167e:	bf00      	nop
 8001680:	20000338 	.word	0x20000338
 8001684:	0800db60 	.word	0x0800db60
 8001688:	20000404 	.word	0x20000404
 800168c:	20000408 	.word	0x20000408
 8001690:	2000040c 	.word	0x2000040c
 8001694:	0800db74 	.word	0x0800db74
 8001698:	20000410 	.word	0x20000410
 800169c:	20000414 	.word	0x20000414
 80016a0:	20000418 	.word	0x20000418
 80016a4:	0800db9c 	.word	0x0800db9c
 80016a8:	20000000 	.word	0x20000000

080016ac <S_Task2_HCSR04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task2_HCSR04 */
void S_Task2_HCSR04(void *argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task2_HCSR04 */
	uint32_t next_wake_time = osKernelGetTickCount();
 80016b4:	f004 faa4 	bl	8005c00 <osKernelGetTickCount>
 80016b8:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <S_Task2_HCSR04+0x4c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f04f 31ff 	mov.w	r1, #4294967295
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fbfa 	bl	8005ebc <osSemaphoreAcquire>

	printf("\nTask 2 in: %lu\n", HAL_GetTick());
 80016c8:	f000 fbe2 	bl	8001e90 <HAL_GetTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	480a      	ldr	r0, [pc, #40]	@ (80016fc <S_Task2_HCSR04+0x50>)
 80016d2:	f008 fd9b 	bl	800a20c <iprintf>

	osSemaphoreRelease(Sem2_UARTHandle);
 80016d6:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <S_Task2_HCSR04+0x4c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fc40 	bl	8005f60 <osSemaphoreRelease>

    HCSR04_Start();
 80016e0:	f004 f876 	bl	80057d0 <HCSR04_Start>



	next_wake_time += timeCycle2;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <S_Task2_HCSR04+0x54>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f004 fb2d 	bl	8005d4e <osDelayUntil>
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80016f4:	bf00      	nop
 80016f6:	e7e0      	b.n	80016ba <S_Task2_HCSR04+0xe>
 80016f8:	20000338 	.word	0x20000338
 80016fc:	0800dbbc 	.word	0x0800dbbc
 8001700:	20000004 	.word	0x20000004

08001704 <S_Task3_UARTCMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task3_UARTCMD */
void S_Task3_UARTCMD(void *argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task3_UARTCMD */
    int servo_angle = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Sem1_CMDHandle, osWaitForever);
 8001710:	4b4e      	ldr	r3, [pc, #312]	@ (800184c <S_Task3_UARTCMD+0x148>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fbcf 	bl	8005ebc <osSemaphoreAcquire>

	  if (strncmp(uart_buff, ">Servo", 6) == 0) {
 800171e:	2206      	movs	r2, #6
 8001720:	494b      	ldr	r1, [pc, #300]	@ (8001850 <S_Task3_UARTCMD+0x14c>)
 8001722:	484c      	ldr	r0, [pc, #304]	@ (8001854 <S_Task3_UARTCMD+0x150>)
 8001724:	f008 fee2 	bl	800a4ec <strncmp>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d125      	bne.n	800177a <S_Task3_UARTCMD+0x76>
	         char *ptr = uart_buff + 6;
 800172e:	4b4a      	ldr	r3, [pc, #296]	@ (8001858 <S_Task3_UARTCMD+0x154>)
 8001730:	617b      	str	r3, [r7, #20]
	         while (*ptr == ' ') ptr++;
 8001732:	e002      	b.n	800173a <S_Task3_UARTCMD+0x36>
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b20      	cmp	r3, #32
 8001740:	d0f8      	beq.n	8001734 <S_Task3_UARTCMD+0x30>
	         servo_angle = atoi(ptr);
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f007 fdaa 	bl	800929c <atoi>
 8001748:	60b8      	str	r0, [r7, #8]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 800174a:	4b44      	ldr	r3, [pc, #272]	@ (800185c <S_Task3_UARTCMD+0x158>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f04f 31ff 	mov.w	r1, #4294967295
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fbb2 	bl	8005ebc <osSemaphoreAcquire>
	         printf("Control Servo angel: %d\n", servo_angle);
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	4841      	ldr	r0, [pc, #260]	@ (8001860 <S_Task3_UARTCMD+0x15c>)
 800175c:	f008 fd56 	bl	800a20c <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 8001760:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <S_Task3_UARTCMD+0x158>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fbfb 	bl	8005f60 <osSemaphoreRelease>
	         Servo_Write(&htim4, TIM_CHANNEL_4, servo_angle);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	210c      	movs	r1, #12
 8001772:	483c      	ldr	r0, [pc, #240]	@ (8001864 <S_Task3_UARTCMD+0x160>)
 8001774:	f007 fd44 	bl	8009200 <Servo_Write>
 8001778:	e7ca      	b.n	8001710 <S_Task3_UARTCMD+0xc>
	     } else if(strncmp(uart_buff, ">T1", 3) == 0){
 800177a:	2203      	movs	r2, #3
 800177c:	493a      	ldr	r1, [pc, #232]	@ (8001868 <S_Task3_UARTCMD+0x164>)
 800177e:	4835      	ldr	r0, [pc, #212]	@ (8001854 <S_Task3_UARTCMD+0x150>)
 8001780:	f008 feb4 	bl	800a4ec <strncmp>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d123      	bne.n	80017d2 <S_Task3_UARTCMD+0xce>
	         char *ptr = uart_buff + 3;
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <S_Task3_UARTCMD+0x168>)
 800178c:	613b      	str	r3, [r7, #16]
	         while (*ptr == ' ') ptr++;
 800178e:	e002      	b.n	8001796 <S_Task3_UARTCMD+0x92>
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	3301      	adds	r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b20      	cmp	r3, #32
 800179c:	d0f8      	beq.n	8001790 <S_Task3_UARTCMD+0x8c>
	         timeCycle1 = atoi(ptr);
 800179e:	6938      	ldr	r0, [r7, #16]
 80017a0:	f007 fd7c 	bl	800929c <atoi>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <S_Task3_UARTCMD+0x16c>)
 80017aa:	601a      	str	r2, [r3, #0]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <S_Task3_UARTCMD+0x158>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fb81 	bl	8005ebc <osSemaphoreAcquire>
	         printf("Change time cycle Task 1 to: %lu\n", timeCycle1);
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <S_Task3_UARTCMD+0x16c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	482c      	ldr	r0, [pc, #176]	@ (8001874 <S_Task3_UARTCMD+0x170>)
 80017c2:	f008 fd23 	bl	800a20c <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <S_Task3_UARTCMD+0x158>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f004 fbc8 	bl	8005f60 <osSemaphoreRelease>
 80017d0:	e79e      	b.n	8001710 <S_Task3_UARTCMD+0xc>
	     }else if(strncmp(uart_buff, ">T2", 3) == 0){
 80017d2:	2203      	movs	r2, #3
 80017d4:	4928      	ldr	r1, [pc, #160]	@ (8001878 <S_Task3_UARTCMD+0x174>)
 80017d6:	481f      	ldr	r0, [pc, #124]	@ (8001854 <S_Task3_UARTCMD+0x150>)
 80017d8:	f008 fe88 	bl	800a4ec <strncmp>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d123      	bne.n	800182a <S_Task3_UARTCMD+0x126>
	         char *ptr = uart_buff + 3;
 80017e2:	4b22      	ldr	r3, [pc, #136]	@ (800186c <S_Task3_UARTCMD+0x168>)
 80017e4:	60fb      	str	r3, [r7, #12]
	         while (*ptr == ' ') ptr++;
 80017e6:	e002      	b.n	80017ee <S_Task3_UARTCMD+0xea>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d0f8      	beq.n	80017e8 <S_Task3_UARTCMD+0xe4>
	         timeCycle2 = atoi(ptr);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f007 fd50 	bl	800929c <atoi>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <S_Task3_UARTCMD+0x178>)
 8001802:	601a      	str	r2, [r3, #0]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001804:	4b15      	ldr	r3, [pc, #84]	@ (800185c <S_Task3_UARTCMD+0x158>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fb55 	bl	8005ebc <osSemaphoreAcquire>
	         printf("Change time cycle Task 2 to: %lu\n", timeCycle2);
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <S_Task3_UARTCMD+0x178>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4819      	ldr	r0, [pc, #100]	@ (8001880 <S_Task3_UARTCMD+0x17c>)
 800181a:	f008 fcf7 	bl	800a20c <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <S_Task3_UARTCMD+0x158>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fb9c 	bl	8005f60 <osSemaphoreRelease>
 8001828:	e772      	b.n	8001710 <S_Task3_UARTCMD+0xc>
	     }else {
	    	 osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <S_Task3_UARTCMD+0x158>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fb42 	bl	8005ebc <osSemaphoreAcquire>
	         printf("Wrong message!\n");
 8001838:	4812      	ldr	r0, [pc, #72]	@ (8001884 <S_Task3_UARTCMD+0x180>)
 800183a:	f008 fd4f 	bl	800a2dc <puts>
	         osSemaphoreRelease(Sem2_UARTHandle);
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <S_Task3_UARTCMD+0x158>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f004 fb8c 	bl	8005f60 <osSemaphoreRelease>
	  osSemaphoreAcquire(Sem1_CMDHandle, osWaitForever);
 8001848:	e762      	b.n	8001710 <S_Task3_UARTCMD+0xc>
 800184a:	bf00      	nop
 800184c:	20000334 	.word	0x20000334
 8001850:	0800dbd0 	.word	0x0800dbd0
 8001854:	20000340 	.word	0x20000340
 8001858:	20000346 	.word	0x20000346
 800185c:	20000338 	.word	0x20000338
 8001860:	0800dbd8 	.word	0x0800dbd8
 8001864:	20000298 	.word	0x20000298
 8001868:	0800dbf4 	.word	0x0800dbf4
 800186c:	20000343 	.word	0x20000343
 8001870:	20000000 	.word	0x20000000
 8001874:	0800dbf8 	.word	0x0800dbf8
 8001878:	0800dc1c 	.word	0x0800dc1c
 800187c:	20000004 	.word	0x20000004
 8001880:	0800dc20 	.word	0x0800dc20
 8001884:	0800dc44 	.word	0x0800dc44

08001888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001898:	d101      	bne.n	800189e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800189a:	f000 fae7 	bl	8001e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018aa:	b672      	cpsid	i
}
 80018ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ae:	bf00      	nop
 80018b0:	e7fd      	b.n	80018ae <Error_Handler+0x8>
	...

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <HAL_MspInit+0x68>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <HAL_MspInit+0x68>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_MspInit+0x68>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_MspInit+0x68>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a11      	ldr	r2, [pc, #68]	@ (800191c <HAL_MspInit+0x68>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <HAL_MspInit+0x68>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	210f      	movs	r1, #15
 80018ee:	f06f 0001 	mvn.w	r0, #1
 80018f2:	f000 fb8c 	bl	800200e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_MspInit+0x6c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_MspInit+0x6c>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000

08001924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a15      	ldr	r2, [pc, #84]	@ (8001994 <HAL_I2C_MspInit+0x70>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d123      	bne.n	800198c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a13      	ldr	r2, [pc, #76]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195c:	23c0      	movs	r3, #192	@ 0xc0
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4619      	mov	r1, r3
 800196e:	480b      	ldr	r0, [pc, #44]	@ (800199c <HAL_I2C_MspInit+0x78>)
 8001970:	f000 fc2a 	bl	80021c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 800197a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800197e:	61d3      	str	r3, [r2, #28]
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40005400 	.word	0x40005400
 8001998:	40021000 	.word	0x40021000
 800199c:	40010c00 	.word	0x40010c00

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <HAL_TIM_Base_MspInit+0x68>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d114      	bne.n	80019dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_TIM_Base_MspInit+0x6c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a15      	ldr	r2, [pc, #84]	@ (8001a0c <HAL_TIM_Base_MspInit+0x6c>)
 80019b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <HAL_TIM_Base_MspInit+0x6c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	2019      	movs	r0, #25
 80019d0:	f000 fb1d 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019d4:	2019      	movs	r0, #25
 80019d6:	f000 fb36 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019da:	e010      	b.n	80019fe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a10 <HAL_TIM_Base_MspInit+0x70>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10b      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_TIM_Base_MspInit+0x6c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a08      	ldr	r2, [pc, #32]	@ (8001a0c <HAL_TIM_Base_MspInit+0x6c>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_TIM_Base_MspInit+0x6c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40000800 	.word	0x40000800

08001a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <HAL_TIM_MspPostInit+0x5c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d118      	bne.n	8001a66 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <HAL_TIM_MspPostInit+0x60>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	@ (8001a74 <HAL_TIM_MspPostInit+0x60>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <HAL_TIM_MspPostInit+0x60>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <HAL_TIM_MspPostInit+0x64>)
 8001a62:	f000 fbb1 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40000800 	.word	0x40000800
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010c00 	.word	0x40010c00

08001a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a20      	ldr	r2, [pc, #128]	@ (8001b18 <HAL_UART_MspInit+0x9c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d139      	bne.n	8001b10 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <HAL_UART_MspInit+0xa0>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <HAL_UART_MspInit+0xa0>)
 8001aa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <HAL_UART_MspInit+0xa0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_UART_MspInit+0xa0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <HAL_UART_MspInit+0xa0>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <HAL_UART_MspInit+0xa0>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480f      	ldr	r0, [pc, #60]	@ (8001b20 <HAL_UART_MspInit+0xa4>)
 8001ae2:	f000 fb71 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	4809      	ldr	r0, [pc, #36]	@ (8001b20 <HAL_UART_MspInit+0xa4>)
 8001afc:	f000 fb64 	bl	80021c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2106      	movs	r1, #6
 8001b04:	2025      	movs	r0, #37	@ 0x25
 8001b06:	f000 fa82 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b0a:	2025      	movs	r0, #37	@ 0x25
 8001b0c:	f000 fa9b 	bl	8002046 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800

08001b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08e      	sub	sp, #56	@ 0x38
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3a:	4b34      	ldr	r3, [pc, #208]	@ (8001c0c <HAL_InitTick+0xe8>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a33      	ldr	r2, [pc, #204]	@ (8001c0c <HAL_InitTick+0xe8>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b31      	ldr	r3, [pc, #196]	@ (8001c0c <HAL_InitTick+0xe8>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b52:	f107 0210 	add.w	r2, r7, #16
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 ff7f 	bl	8003a60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b6c:	f001 ff50 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8001b70:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b72:	e004      	b.n	8001b7e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b74:	f001 ff4c 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <HAL_InitTick+0xec>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9b      	lsrs	r3, r3, #18
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001b8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001b96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001bb4:	4817      	ldr	r0, [pc, #92]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001bb6:	f001 ffa1 	bl	8003afc <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d11b      	bne.n	8001c00 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001bc8:	4812      	ldr	r0, [pc, #72]	@ (8001c14 <HAL_InitTick+0xf0>)
 8001bca:	f002 f857 	bl	8003c7c <HAL_TIM_Base_Start_IT>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d111      	bne.n	8001c00 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bdc:	201c      	movs	r0, #28
 8001bde:	f000 fa32 	bl	8002046 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d808      	bhi.n	8001bfa <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	201c      	movs	r0, #28
 8001bee:	f000 fa0e 	bl	800200e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf2:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_InitTick+0xf4>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e002      	b.n	8001c00 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3738      	adds	r7, #56	@ 0x38
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	431bde83 	.word	0x431bde83
 8001c14:	200003a8 	.word	0x200003a8
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM1_UP_IRQHandler+0x10>)
 8001c56:	f002 f95d 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000250 	.word	0x20000250

08001c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <TIM2_IRQHandler+0x10>)
 8001c6a:	f002 f953 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200003a8 	.word	0x200003a8

08001c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <USART1_IRQHandler+0x10>)
 8001c7e:	f003 f807 	bl	8004c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200002e0 	.word	0x200002e0

08001c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001c90:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001c94:	f000 fc4c 	bl	8002530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <_kill>:

int _kill(int pid, int sig)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb4:	f008 fccc 	bl	800a650 <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2216      	movs	r2, #22
 8001cbc:	601a      	str	r2, [r3, #0]
  return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_exit>:

void _exit (int status)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffe7 	bl	8001caa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <_exit+0x12>

08001ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e00a      	b.n	8001d08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf2:	f3af 8000 	nop.w
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf0      	blt.n	8001cf2 <_read+0x12>
  }

  return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d40:	605a      	str	r2, [r3, #4]
  return 0;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <_isatty>:

int _isatty(int file)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
	...

08001d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <_sbrk+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <_sbrk+0x60>)
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <_sbrk+0x64>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <_sbrk+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d207      	bcs.n	8001dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dac:	f008 fc50 	bl	800a650 <__errno>
 8001db0:	4603      	mov	r3, r0
 8001db2:	220c      	movs	r2, #12
 8001db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	e009      	b.n	8001dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <_sbrk+0x64>)
 8001dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20005000 	.word	0x20005000
 8001ddc:	00000400 	.word	0x00000400
 8001de0:	200003f0 	.word	0x200003f0
 8001de4:	20001f60 	.word	0x20001f60

08001de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df4:	f7ff fff8 	bl	8001de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df8:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dfa:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e10:	4c09      	ldr	r4, [pc, #36]	@ (8001e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f008 fc1d 	bl	800a65c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e22:	f7ff f98d 	bl	8001140 <main>
  bx lr
 8001e26:	4770      	bx	lr
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e30:	0800e170 	.word	0x0800e170
  ldr r2, =_sbss
 8001e34:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e38:	20001f60 	.word	0x20001f60

08001e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC1_2_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_Init+0x28>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_Init+0x28>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f8d1 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f7ff fe64 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fd2a 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000

08001e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_IncTick+0x1c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a03      	ldr	r2, [pc, #12]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	200003f4 	.word	0x200003f4

08001e90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b02      	ldr	r3, [pc, #8]	@ (8001ea0 <HAL_GetTick+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	200003f4 	.word	0x200003f4

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	@ (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4906      	ldr	r1, [pc, #24]	@ (8001f3c <__NVIC_EnableIRQ+0x34>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff4f 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff64 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ffb2 	bl	8001f94 <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff81 	bl	8001f40 <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff57 	bl	8001f08 <__NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d008      	beq.n	800208c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2204      	movs	r2, #4
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e020      	b.n	80020ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 020e 	bic.w	r2, r2, #14
 800209a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d005      	beq.n	80020fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e051      	b.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 020e 	bic.w	r2, r2, #14
 800210a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_DMA_Abort_IT+0xd4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d029      	beq.n	800217a <HAL_DMA_Abort_IT+0xa2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <HAL_DMA_Abort_IT+0xd8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Abort_IT+0x9e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1f      	ldr	r2, [pc, #124]	@ (80021b4 <HAL_DMA_Abort_IT+0xdc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01a      	beq.n	8002170 <HAL_DMA_Abort_IT+0x98>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1e      	ldr	r2, [pc, #120]	@ (80021b8 <HAL_DMA_Abort_IT+0xe0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d012      	beq.n	800216a <HAL_DMA_Abort_IT+0x92>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <HAL_DMA_Abort_IT+0xe4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00a      	beq.n	8002164 <HAL_DMA_Abort_IT+0x8c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1b      	ldr	r2, [pc, #108]	@ (80021c0 <HAL_DMA_Abort_IT+0xe8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d102      	bne.n	800215e <HAL_DMA_Abort_IT+0x86>
 8002158:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800215c:	e00e      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 800215e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002162:	e00b      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 8002164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002168:	e008      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 800216a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216e:	e005      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 8002170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002174:	e002      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 8002176:	2310      	movs	r3, #16
 8002178:	e000      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 800217a:	2301      	movs	r3, #1
 800217c:	4a11      	ldr	r2, [pc, #68]	@ (80021c4 <HAL_DMA_Abort_IT+0xec>)
 800217e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
    } 
  }
  return status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40020008 	.word	0x40020008
 80021b0:	4002001c 	.word	0x4002001c
 80021b4:	40020030 	.word	0x40020030
 80021b8:	40020044 	.word	0x40020044
 80021bc:	40020058 	.word	0x40020058
 80021c0:	4002006c 	.word	0x4002006c
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b08b      	sub	sp, #44	@ 0x2c
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e169      	b.n	80024b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021dc:	2201      	movs	r2, #1
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8158 	bne.w	80024aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a9a      	ldr	r2, [pc, #616]	@ (8002468 <HAL_GPIO_Init+0x2a0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d05e      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002204:	4a98      	ldr	r2, [pc, #608]	@ (8002468 <HAL_GPIO_Init+0x2a0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d875      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800220a:	4a98      	ldr	r2, [pc, #608]	@ (800246c <HAL_GPIO_Init+0x2a4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d058      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002210:	4a96      	ldr	r2, [pc, #600]	@ (800246c <HAL_GPIO_Init+0x2a4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d86f      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002216:	4a96      	ldr	r2, [pc, #600]	@ (8002470 <HAL_GPIO_Init+0x2a8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d052      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 800221c:	4a94      	ldr	r2, [pc, #592]	@ (8002470 <HAL_GPIO_Init+0x2a8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d869      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002222:	4a94      	ldr	r2, [pc, #592]	@ (8002474 <HAL_GPIO_Init+0x2ac>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d04c      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002228:	4a92      	ldr	r2, [pc, #584]	@ (8002474 <HAL_GPIO_Init+0x2ac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d863      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800222e:	4a92      	ldr	r2, [pc, #584]	@ (8002478 <HAL_GPIO_Init+0x2b0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d046      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002234:	4a90      	ldr	r2, [pc, #576]	@ (8002478 <HAL_GPIO_Init+0x2b0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d85d      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800223a:	2b12      	cmp	r3, #18
 800223c:	d82a      	bhi.n	8002294 <HAL_GPIO_Init+0xcc>
 800223e:	2b12      	cmp	r3, #18
 8002240:	d859      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002242:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_GPIO_Init+0x80>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	080022c3 	.word	0x080022c3
 800224c:	0800229d 	.word	0x0800229d
 8002250:	080022af 	.word	0x080022af
 8002254:	080022f1 	.word	0x080022f1
 8002258:	080022f7 	.word	0x080022f7
 800225c:	080022f7 	.word	0x080022f7
 8002260:	080022f7 	.word	0x080022f7
 8002264:	080022f7 	.word	0x080022f7
 8002268:	080022f7 	.word	0x080022f7
 800226c:	080022f7 	.word	0x080022f7
 8002270:	080022f7 	.word	0x080022f7
 8002274:	080022f7 	.word	0x080022f7
 8002278:	080022f7 	.word	0x080022f7
 800227c:	080022f7 	.word	0x080022f7
 8002280:	080022f7 	.word	0x080022f7
 8002284:	080022f7 	.word	0x080022f7
 8002288:	080022f7 	.word	0x080022f7
 800228c:	080022a5 	.word	0x080022a5
 8002290:	080022b9 	.word	0x080022b9
 8002294:	4a79      	ldr	r2, [pc, #484]	@ (800247c <HAL_GPIO_Init+0x2b4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800229a:	e02c      	b.n	80022f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e029      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	3304      	adds	r3, #4
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e024      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	3308      	adds	r3, #8
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e01f      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	330c      	adds	r3, #12
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e01a      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ca:	2304      	movs	r3, #4
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e013      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d8:	2308      	movs	r3, #8
 80022da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	611a      	str	r2, [r3, #16]
          break;
 80022e2:	e009      	b.n	80022f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	615a      	str	r2, [r3, #20]
          break;
 80022ee:	e003      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          break;
 80022f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2bff      	cmp	r3, #255	@ 0xff
 80022fc:	d801      	bhi.n	8002302 <HAL_GPIO_Init+0x13a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	e001      	b.n	8002306 <HAL_GPIO_Init+0x13e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2bff      	cmp	r3, #255	@ 0xff
 800230c:	d802      	bhi.n	8002314 <HAL_GPIO_Init+0x14c>
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x152>
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	3b08      	subs	r3, #8
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	210f      	movs	r1, #15
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	431a      	orrs	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80b1 	beq.w	80024aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002348:	4b4d      	ldr	r3, [pc, #308]	@ (8002480 <HAL_GPIO_Init+0x2b8>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a4c      	ldr	r2, [pc, #304]	@ (8002480 <HAL_GPIO_Init+0x2b8>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <HAL_GPIO_Init+0x2b8>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002360:	4a48      	ldr	r2, [pc, #288]	@ (8002484 <HAL_GPIO_Init+0x2bc>)
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a40      	ldr	r2, [pc, #256]	@ (8002488 <HAL_GPIO_Init+0x2c0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_GPIO_Init+0x1ec>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3f      	ldr	r2, [pc, #252]	@ (800248c <HAL_GPIO_Init+0x2c4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00d      	beq.n	80023b0 <HAL_GPIO_Init+0x1e8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a3e      	ldr	r2, [pc, #248]	@ (8002490 <HAL_GPIO_Init+0x2c8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_Init+0x1e4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a3d      	ldr	r2, [pc, #244]	@ (8002494 <HAL_GPIO_Init+0x2cc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_GPIO_Init+0x1e0>
 80023a4:	2303      	movs	r3, #3
 80023a6:	e006      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e004      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e002      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023b4:	2300      	movs	r3, #0
 80023b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b8:	f002 0203 	and.w	r2, r2, #3
 80023bc:	0092      	lsls	r2, r2, #2
 80023be:	4093      	lsls	r3, r2
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023c6:	492f      	ldr	r1, [pc, #188]	@ (8002484 <HAL_GPIO_Init+0x2bc>)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	492c      	ldr	r1, [pc, #176]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4928      	ldr	r1, [pc, #160]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	4922      	ldr	r1, [pc, #136]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	491e      	ldr	r1, [pc, #120]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4918      	ldr	r1, [pc, #96]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800243e:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	4914      	ldr	r1, [pc, #80]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002448:	4013      	ands	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d021      	beq.n	800249c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002458:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	490e      	ldr	r1, [pc, #56]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e021      	b.n	80024aa <HAL_GPIO_Init+0x2e2>
 8002466:	bf00      	nop
 8002468:	10320000 	.word	0x10320000
 800246c:	10310000 	.word	0x10310000
 8002470:	10220000 	.word	0x10220000
 8002474:	10210000 	.word	0x10210000
 8002478:	10120000 	.word	0x10120000
 800247c:	10110000 	.word	0x10110000
 8002480:	40021000 	.word	0x40021000
 8002484:	40010000 	.word	0x40010000
 8002488:	40010800 	.word	0x40010800
 800248c:	40010c00 	.word	0x40010c00
 8002490:	40011000 	.word	0x40011000
 8002494:	40011400 	.word	0x40011400
 8002498:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_GPIO_Init+0x304>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	4909      	ldr	r1, [pc, #36]	@ (80024cc <HAL_GPIO_Init+0x304>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	3301      	adds	r3, #1
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f ae8e 	bne.w	80021dc <HAL_GPIO_Init+0x14>
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	372c      	adds	r7, #44	@ 0x2c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e001      	b.n	80024f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	807b      	strh	r3, [r7, #2]
 800250a:	4613      	mov	r3, r2
 800250c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800250e:	787b      	ldrb	r3, [r7, #1]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002514:	887a      	ldrh	r2, [r7, #2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800251a:	e003      	b.n	8002524 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	041a      	lsls	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	611a      	str	r2, [r3, #16]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002546:	4a05      	ldr	r2, [pc, #20]	@ (800255c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 f952 	bl	80057f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e12b      	b.n	80027ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff f9cc 	bl	8001924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c4:	f001 fa24 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a81      	ldr	r2, [pc, #516]	@ (80027d4 <HAL_I2C_Init+0x274>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d807      	bhi.n	80025e4 <HAL_I2C_Init+0x84>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a80      	ldr	r2, [pc, #512]	@ (80027d8 <HAL_I2C_Init+0x278>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	bf94      	ite	ls
 80025dc:	2301      	movls	r3, #1
 80025de:	2300      	movhi	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e006      	b.n	80025f2 <HAL_I2C_Init+0x92>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	@ (80027dc <HAL_I2C_Init+0x27c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0e7      	b.n	80027ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a78      	ldr	r2, [pc, #480]	@ (80027e0 <HAL_I2C_Init+0x280>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0c9b      	lsrs	r3, r3, #18
 8002604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a6a      	ldr	r2, [pc, #424]	@ (80027d4 <HAL_I2C_Init+0x274>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d802      	bhi.n	8002634 <HAL_I2C_Init+0xd4>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3301      	adds	r3, #1
 8002632:	e009      	b.n	8002648 <HAL_I2C_Init+0xe8>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	4a69      	ldr	r2, [pc, #420]	@ (80027e4 <HAL_I2C_Init+0x284>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800265a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	495c      	ldr	r1, [pc, #368]	@ (80027d4 <HAL_I2C_Init+0x274>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d819      	bhi.n	800269c <HAL_I2C_Init+0x13c>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e59      	subs	r1, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fbb1 f3f3 	udiv	r3, r1, r3
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800267c:	400b      	ands	r3, r1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_I2C_Init+0x138>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e59      	subs	r1, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002696:	e051      	b.n	800273c <HAL_I2C_Init+0x1dc>
 8002698:	2304      	movs	r3, #4
 800269a:	e04f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_I2C_Init+0x168>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e012      	b.n	80026ee <HAL_I2C_Init+0x18e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	0099      	lsls	r1, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Init+0x196>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e022      	b.n	800273c <HAL_I2C_Init+0x1dc>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10e      	bne.n	800271c <HAL_I2C_Init+0x1bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e58      	subs	r0, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800271a:	e00f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800276a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6911      	ldr	r1, [r2, #16]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	000186a0 	.word	0x000186a0
 80027d8:	001e847f 	.word	0x001e847f
 80027dc:	003d08ff 	.word	0x003d08ff
 80027e0:	431bde83 	.word	0x431bde83
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	@ 0x30
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002806:	f7ff fb43 	bl	8001e90 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b20      	cmp	r3, #32
 8002816:	f040 8250 	bne.w	8002cba <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2319      	movs	r3, #25
 8002820:	2201      	movs	r2, #1
 8002822:	4982      	ldr	r1, [pc, #520]	@ (8002a2c <HAL_I2C_Mem_Read+0x244>)
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fb3b 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002830:	2302      	movs	r3, #2
 8002832:	e243      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Mem_Read+0x5a>
 800283e:	2302      	movs	r3, #2
 8002840:	e23c      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d007      	beq.n	8002868 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2222      	movs	r2, #34	@ 0x22
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2240      	movs	r2, #64	@ 0x40
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002898:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a62      	ldr	r2, [pc, #392]	@ (8002a30 <HAL_I2C_Mem_Read+0x248>)
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028aa:	88f8      	ldrh	r0, [r7, #6]
 80028ac:	893a      	ldrh	r2, [r7, #8]
 80028ae:	8979      	ldrh	r1, [r7, #10]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	4603      	mov	r3, r0
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fa08 	bl	8002cd0 <I2C_RequestMemoryRead>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e1f8      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d113      	bne.n	80028fa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e1cc      	b.n	8002c94 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d11e      	bne.n	8002940 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002910:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002912:	b672      	cpsid	i
}
 8002914:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800293c:	b662      	cpsie	i
}
 800293e:	e035      	b.n	80029ac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	2b02      	cmp	r3, #2
 8002946:	d11e      	bne.n	8002986 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002956:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002980:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002982:	b662      	cpsie	i
}
 8002984:	e012      	b.n	80029ac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002994:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029ac:	e172      	b.n	8002c94 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	f200 811f 	bhi.w	8002bf6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d123      	bne.n	8002a08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fbcd 	bl	8003164 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e173      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a06:	e145      	b.n	8002c94 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d152      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a16:	2200      	movs	r2, #0
 8002a18:	4906      	ldr	r1, [pc, #24]	@ (8002a34 <HAL_I2C_Mem_Read+0x24c>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fa40 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e148      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000
 8002a34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a38:	b672      	cpsid	i
}
 8002a3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a7e:	b662      	cpsie	i
}
 8002a80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ab4:	e0ee      	b.n	8002c94 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	2200      	movs	r2, #0
 8002abe:	4981      	ldr	r1, [pc, #516]	@ (8002cc4 <HAL_I2C_Mem_Read+0x4dc>)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f9ed 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0f5      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ade:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b16:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_I2C_Mem_Read+0x4e0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	08db      	lsrs	r3, r3, #3
 8002b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ccc <HAL_I2C_Mem_Read+0x4e4>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0a1a      	lsrs	r2, r3, #8
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00da      	lsls	r2, r3, #3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d118      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b5e:	b662      	cpsie	i
}
 8002b60:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0a6      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d1d9      	bne.n	8002b30 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bbe:	b662      	cpsie	i
}
 8002bc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bf4:	e04e      	b.n	8002c94 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fab2 	bl	8003164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e058      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d124      	bne.n	8002c94 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f ae88 	bne.w	80029ae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3728      	adds	r7, #40	@ 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010004 	.word	0x00010004
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	14f8b589 	.word	0x14f8b589

08002cd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8c2 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d30:	d103      	bne.n	8002d3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0aa      	b.n	8002e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	4952      	ldr	r1, [pc, #328]	@ (8002e9c <I2C_RequestMemoryRead+0x1cc>)
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f91d 	bl	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e097      	b.n	8002e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	6a39      	ldr	r1, [r7, #32]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f9a8 	bl	80030d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d107      	bne.n	8002da2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e076      	b.n	8002e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d105      	bne.n	8002db8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dac:	893b      	ldrh	r3, [r7, #8]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	611a      	str	r2, [r3, #16]
 8002db6:	e021      	b.n	8002dfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002db8:	893b      	ldrh	r3, [r7, #8]
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f982 	bl	80030d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d107      	bne.n	8002dee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e050      	b.n	8002e94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df2:	893b      	ldrh	r3, [r7, #8]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f967 	bl	80030d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e035      	b.n	8002e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f82b 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e5e:	d103      	bne.n	8002e68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e013      	b.n	8002e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	6a3a      	ldr	r2, [r7, #32]
 8002e80:	4906      	ldr	r1, [pc, #24]	@ (8002e9c <I2C_RequestMemoryRead+0x1cc>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f886 	bl	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	00010002 	.word	0x00010002

08002ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb0:	e048      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d044      	beq.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe ffe9 	bl	8001e90 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d139      	bne.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10d      	bne.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	e00c      	b.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d116      	bne.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e023      	b.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10d      	bne.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	e00c      	b.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d093      	beq.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa2:	e071      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb2:	d123      	bne.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e067      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d041      	beq.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003004:	f7fe ff44 	bl	8001e90 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	d302      	bcc.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d136      	bne.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10c      	bne.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	e00b      	b.n	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	43da      	mvns	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e021      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10c      	bne.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	43da      	mvns	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e00b      	b.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4013      	ands	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f af6d 	bne.w	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e0:	e034      	b.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f89b 	bl	800321e <I2C_IsAcknowledgeFailed>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e034      	b.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d028      	beq.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7fe fec9 	bl	8001e90 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11d      	bne.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	2b80      	cmp	r3, #128	@ 0x80
 800311c:	d016      	beq.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003156:	2b80      	cmp	r3, #128	@ 0x80
 8003158:	d1c3      	bne.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003170:	e049      	b.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b10      	cmp	r3, #16
 800317e:	d119      	bne.n	80031b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0210 	mvn.w	r2, #16
 8003188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e030      	b.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b4:	f7fe fe6c 	bl	8001e90 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d302      	bcc.n	80031ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11d      	bne.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d4:	2b40      	cmp	r3, #64	@ 0x40
 80031d6:	d016      	beq.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f043 0220 	orr.w	r2, r3, #32
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e007      	b.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003210:	2b40      	cmp	r3, #64	@ 0x40
 8003212:	d1ae      	bne.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003234:	d11b      	bne.n	800326e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800323e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f043 0204 	orr.w	r2, r3, #4
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
	...

0800327c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e272      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8087 	beq.w	80033aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b92      	ldr	r3, [pc, #584]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d00c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a8:	4b8f      	ldr	r3, [pc, #572]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d112      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
 80032b4:	4b8c      	ldr	r3, [pc, #560]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4b89      	ldr	r3, [pc, #548]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d06c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x12c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d168      	bne.n	80033a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e24c      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x76>
 80032e4:	4b80      	ldr	r3, [pc, #512]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7f      	ldr	r2, [pc, #508]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e02e      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x98>
 80032fa:	4b7b      	ldr	r3, [pc, #492]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7a      	ldr	r2, [pc, #488]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b78      	ldr	r3, [pc, #480]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a77      	ldr	r2, [pc, #476]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0xbc>
 800331e:	4b72      	ldr	r3, [pc, #456]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a71      	ldr	r2, [pc, #452]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6f      	ldr	r3, [pc, #444]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6e      	ldr	r2, [pc, #440]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003338:	4b6b      	ldr	r3, [pc, #428]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6a      	ldr	r2, [pc, #424]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b68      	ldr	r3, [pc, #416]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a67      	ldr	r2, [pc, #412]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe fd9a 	bl	8001e90 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fd96 	bl	8001e90 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e200      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b5d      	ldr	r3, [pc, #372]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xe4>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fd86 	bl	8001e90 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe fd82 	bl	8001e90 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	@ 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1ec      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b53      	ldr	r3, [pc, #332]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x10c>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b6:	4b4c      	ldr	r3, [pc, #304]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033c2:	4b49      	ldr	r3, [pc, #292]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
 80033ce:	4b46      	ldr	r3, [pc, #280]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b43      	ldr	r3, [pc, #268]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1c0      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4939      	ldr	r1, [pc, #228]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b36      	ldr	r3, [pc, #216]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fd3b 	bl	8001e90 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe fd37 	bl	8001e90 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1a1      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b2a      	ldr	r3, [pc, #168]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4927      	ldr	r1, [pc, #156]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fd1a 	bl	8001e90 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003460:	f7fe fd16 	bl	8001e90 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e180      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03a      	beq.n	8003500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d019      	beq.n	80034c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <HAL_RCC_OscConfig+0x274>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fe fcfa 	bl	8001e90 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fe fcf6 	bl	8001e90 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e160      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034be:	2001      	movs	r0, #1
 80034c0:	f000 fafe 	bl	8003ac0 <RCC_Delay>
 80034c4:	e01c      	b.n	8003500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <HAL_RCC_OscConfig+0x274>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fe fce0 	bl	8001e90 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d2:	e00f      	b.n	80034f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fe fcdc 	bl	8001e90 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e146      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	42420000 	.word	0x42420000
 80034f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b92      	ldr	r3, [pc, #584]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e9      	bne.n	80034d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a6 	beq.w	800365a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b8b      	ldr	r3, [pc, #556]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b88      	ldr	r3, [pc, #544]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4a87      	ldr	r2, [pc, #540]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003528:	61d3      	str	r3, [r2, #28]
 800352a:	4b85      	ldr	r3, [pc, #532]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b82      	ldr	r3, [pc, #520]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003546:	4b7f      	ldr	r3, [pc, #508]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7e      	ldr	r2, [pc, #504]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fe fc9d 	bl	8001e90 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe fc99 	bl	8001e90 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	@ 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e103      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b75      	ldr	r3, [pc, #468]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x312>
 8003580:	4b6f      	ldr	r3, [pc, #444]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a6e      	ldr	r2, [pc, #440]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6213      	str	r3, [r2, #32]
 800358c:	e02d      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x334>
 8003596:	4b6a      	ldr	r3, [pc, #424]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a69      	ldr	r2, [pc, #420]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	4b67      	ldr	r3, [pc, #412]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a66      	ldr	r2, [pc, #408]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6213      	str	r3, [r2, #32]
 80035ae:	e01c      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x356>
 80035b8:	4b61      	ldr	r3, [pc, #388]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a60      	ldr	r2, [pc, #384]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6213      	str	r3, [r2, #32]
 80035d0:	e00b      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6213      	str	r3, [r2, #32]
 80035de:	4b58      	ldr	r3, [pc, #352]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a57      	ldr	r2, [pc, #348]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fc4d 	bl	8001e90 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fc49 	bl	8001e90 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0b1      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	4b4b      	ldr	r3, [pc, #300]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ee      	beq.n	80035fa <HAL_RCC_OscConfig+0x37e>
 800361c:	e014      	b.n	8003648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fc37 	bl	8001e90 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fc33 	bl	8001e90 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e09b      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	4b40      	ldr	r3, [pc, #256]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ee      	bne.n	8003626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b3c      	ldr	r3, [pc, #240]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a3b      	ldr	r2, [pc, #236]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8087 	beq.w	8003772 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d061      	beq.n	8003734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d146      	bne.n	8003706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe fc07 	bl	8001e90 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe fc03 	bl	8001e90 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e06d      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003698:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ac:	d108      	bne.n	80036c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ae:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4921      	ldr	r1, [pc, #132]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a19      	ldr	r1, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	430b      	orrs	r3, r1
 80036d2:	491b      	ldr	r1, [pc, #108]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe fbd7 	bl	8001e90 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe fbd3 	bl	8001e90 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e03d      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x46a>
 8003704:	e035      	b.n	8003772 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <HAL_RCC_OscConfig+0x4cc>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fbc0 	bl	8001e90 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fbbc 	bl	8001e90 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e026      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x498>
 8003732:	e01e      	b.n	8003772 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e019      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
 8003748:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <HAL_RCC_OscConfig+0x500>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	429a      	cmp	r2, r3
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0d0      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d910      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b67      	ldr	r3, [pc, #412]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	4965      	ldr	r1, [pc, #404]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0b8      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037dc:	4b59      	ldr	r3, [pc, #356]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a58      	ldr	r2, [pc, #352]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f4:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a52      	ldr	r2, [pc, #328]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b50      	ldr	r3, [pc, #320]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	494d      	ldr	r1, [pc, #308]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d040      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d115      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e073      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b3d      	ldr	r3, [pc, #244]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06b      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4936      	ldr	r1, [pc, #216]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003870:	f7fe fb0e 	bl	8001e90 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fe fb0a 	bl	8001e90 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e053      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b27      	ldr	r3, [pc, #156]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d210      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 0207 	bic.w	r2, r3, #7
 80038b6:	4922      	ldr	r1, [pc, #136]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e032      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038dc:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4916      	ldr	r1, [pc, #88]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038fa:	4b12      	ldr	r3, [pc, #72]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	490e      	ldr	r1, [pc, #56]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800390e:	f000 f821 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	490a      	ldr	r1, [pc, #40]	@ (8003948 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	5ccb      	ldrb	r3, [r1, r3]
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a09      	ldr	r2, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1cc>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800392a:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1d0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f8f8 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40022000 	.word	0x40022000
 8003944:	40021000 	.word	0x40021000
 8003948:	0800dd08 	.word	0x0800dd08
 800394c:	20000008 	.word	0x20000008
 8003950:	2000000c 	.word	0x2000000c

08003954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x30>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x36>
 8003982:	e027      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003984:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003986:	613b      	str	r3, [r7, #16]
      break;
 8003988:	e027      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0c9b      	lsrs	r3, r3, #18
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003994:	5cd3      	ldrb	r3, [r2, r3]
 8003996:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d010      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a2:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0c5b      	lsrs	r3, r3, #17
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	4a11      	ldr	r2, [pc, #68]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a0d      	ldr	r2, [pc, #52]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x98>)
 80039b6:	fb03 f202 	mul.w	r2, r3, r2
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e004      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0c      	ldr	r2, [pc, #48]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	613b      	str	r3, [r7, #16]
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x98>)
 80039d6:	613b      	str	r3, [r7, #16]
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	693b      	ldr	r3, [r7, #16]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	007a1200 	.word	0x007a1200
 80039f0:	0800dd20 	.word	0x0800dd20
 80039f4:	0800dd30 	.word	0x0800dd30
 80039f8:	003d0900 	.word	0x003d0900

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b02      	ldr	r3, [pc, #8]	@ (8003a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	20000008 	.word	0x20000008

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a14:	f7ff fff2 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4903      	ldr	r1, [pc, #12]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	0800dd18 	.word	0x0800dd18

08003a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a3c:	f7ff ffde 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	0adb      	lsrs	r3, r3, #11
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	0800dd18 	.word	0x0800dd18

08003a60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a70:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <HAL_RCC_GetClockConfig+0x58>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab8 <HAL_RCC_GetClockConfig+0x58>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_GetClockConfig+0x58>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a94:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <HAL_RCC_GetClockConfig+0x58>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0207 	and.w	r2, r3, #7
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40022000 	.word	0x40022000

08003ac0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <RCC_Delay+0x34>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <RCC_Delay+0x38>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a5b      	lsrs	r3, r3, #9
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003adc:	bf00      	nop
  }
  while (Delay --);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	60fa      	str	r2, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f9      	bne.n	8003adc <RCC_Delay+0x1c>
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	20000008 	.word	0x20000008
 8003af8:	10624dd3 	.word	0x10624dd3

08003afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e041      	b.n	8003b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd ff3c 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f000 fc88 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d001      	beq.n	8003bb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a18      	ldr	r2, [pc, #96]	@ (8003c24 <HAL_TIM_Base_Start+0x88>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_TIM_Base_Start+0x48>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bce:	d009      	beq.n	8003be4 <HAL_TIM_Base_Start+0x48>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <HAL_TIM_Base_Start+0x8c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIM_Base_Start+0x48>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a13      	ldr	r2, [pc, #76]	@ (8003c2c <HAL_TIM_Base_Start+0x90>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d010      	beq.n	8003c18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	e007      	b.n	8003c18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800

08003c30 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a1a      	ldr	r2, [r3, #32]
 8003c3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10f      	bne.n	8003c68 <HAL_TIM_Base_Stop+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_Base_Stop+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e03a      	b.n	8003d0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_TIM_Base_Start_IT+0x98>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbe:	d009      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a13      	ldr	r2, [pc, #76]	@ (8003d1c <HAL_TIM_Base_Start_IT+0xa0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d111      	bne.n	8003cf8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d010      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	e007      	b.n	8003d08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800

08003d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e041      	b.n	8003db6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f839 	bl	8003dbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 fb76 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x24>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e022      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x3e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e015      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x58>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e05e      	b.n	8003f00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x82>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fd70 	bl	8004968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003f08 <HAL_TIM_PWM_Start+0x138>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	@ (8003f08 <HAL_TIM_PWM_Start+0x138>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIM_PWM_Start+0xfa>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d009      	beq.n	8003eca <HAL_TIM_PWM_Start+0xfa>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a14      	ldr	r2, [pc, #80]	@ (8003f0c <HAL_TIM_PWM_Start+0x13c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIM_PWM_Start+0xfa>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a12      	ldr	r2, [pc, #72]	@ (8003f10 <HAL_TIM_PWM_Start+0x140>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d010      	beq.n	8003efe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	e007      	b.n	8003efe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800

08003f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0202 	mvn.w	r2, #2
 8003f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa5a 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa4d 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa5c 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0204 	mvn.w	r2, #4
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa34 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa27 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa36 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0208 	mvn.w	r2, #8
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa0e 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa01 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa10 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2208      	movs	r2, #8
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9e8 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9db 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9ea 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0201 	mvn.w	r2, #1
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd fc04 	bl	8001888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fced 	bl	8004a7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9ba 	bl	800443c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0220 	mvn.w	r2, #32
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fcc0 	bl	8004a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800410e:	2302      	movs	r3, #2
 8004110:	e0ae      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	f200 809f 	bhi.w	8004260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004122:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800415d 	.word	0x0800415d
 800412c:	08004261 	.word	0x08004261
 8004130:	08004261 	.word	0x08004261
 8004134:	08004261 	.word	0x08004261
 8004138:	0800419d 	.word	0x0800419d
 800413c:	08004261 	.word	0x08004261
 8004140:	08004261 	.word	0x08004261
 8004144:	08004261 	.word	0x08004261
 8004148:	080041df 	.word	0x080041df
 800414c:	08004261 	.word	0x08004261
 8004150:	08004261 	.word	0x08004261
 8004154:	08004261 	.word	0x08004261
 8004158:	0800421f 	.word	0x0800421f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f9e2 	bl	800452c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0208 	orr.w	r2, r2, #8
 8004176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0204 	bic.w	r2, r2, #4
 8004186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6999      	ldr	r1, [r3, #24]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	619a      	str	r2, [r3, #24]
      break;
 800419a:	e064      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fa28 	bl	80045f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6999      	ldr	r1, [r3, #24]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	021a      	lsls	r2, r3, #8
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	619a      	str	r2, [r3, #24]
      break;
 80041dc:	e043      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fa71 	bl	80046cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0208 	orr.w	r2, r2, #8
 80041f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0204 	bic.w	r2, r2, #4
 8004208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69d9      	ldr	r1, [r3, #28]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	61da      	str	r2, [r3, #28]
      break;
 800421c:	e023      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fabb 	bl	80047a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69d9      	ldr	r1, [r3, #28]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	021a      	lsls	r2, r3, #8
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	61da      	str	r2, [r3, #28]
      break;
 800425e:	e002      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
      break;
 8004264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x1c>
 8004290:	2302      	movs	r3, #2
 8004292:	e0b4      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x186>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd4>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	f000 8086 	beq.w	80043ea <HAL_TIM_ConfigClockSource+0x172>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b70      	cmp	r3, #112	@ 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xa6>
 80042e8:	2b70      	cmp	r3, #112	@ 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b60      	cmp	r3, #96	@ 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x11a>
 80042f0:	2b60      	cmp	r3, #96	@ 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b50      	cmp	r3, #80	@ 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xfa>
 80042f8:	2b50      	cmp	r3, #80	@ 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b40      	cmp	r3, #64	@ 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800432e:	f000 fafc 	bl	800492a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04f      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	f000 fae5 	bl	800492a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fa5c 	bl	800483c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	@ 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fab3 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 8004390:	e02c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fa7a 	bl	8004898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	@ 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 faa3 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fa3c 	bl	800483c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	@ 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa93 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 fa8a 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80043e2:	e003      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e000      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
	...

08004450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a2f      	ldr	r2, [pc, #188]	@ (8004520 <TIM_Base_SetConfig+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0x30>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0x30>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a2c      	ldr	r2, [pc, #176]	@ (8004524 <TIM_Base_SetConfig+0xd4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0x30>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a2b      	ldr	r2, [pc, #172]	@ (8004528 <TIM_Base_SetConfig+0xd8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d108      	bne.n	8004492 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a22      	ldr	r2, [pc, #136]	@ (8004520 <TIM_Base_SetConfig+0xd0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_Base_SetConfig+0x62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a0:	d007      	beq.n	80044b2 <TIM_Base_SetConfig+0x62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004524 <TIM_Base_SetConfig+0xd4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_Base_SetConfig+0x62>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004528 <TIM_Base_SetConfig+0xd8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d108      	bne.n	80044c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004520 <TIM_Base_SetConfig+0xd0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	611a      	str	r2, [r3, #16]
  }
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800

0800452c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f023 0201 	bic.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0302 	bic.w	r3, r3, #2
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <TIM_OC1_SetConfig+0xc8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10c      	bne.n	80045a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0308 	bic.w	r3, r3, #8
 800458e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a13      	ldr	r2, [pc, #76]	@ (80045f4 <TIM_OC1_SetConfig+0xc8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d111      	bne.n	80045ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00

080045f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0210 	bic.w	r2, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0320 	bic.w	r3, r3, #32
 8004642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1d      	ldr	r2, [pc, #116]	@ (80046c8 <TIM_OC2_SetConfig+0xd0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a14      	ldr	r2, [pc, #80]	@ (80046c8 <TIM_OC2_SetConfig+0xd0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d113      	bne.n	80046a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800468a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00

080046cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1d      	ldr	r2, [pc, #116]	@ (800479c <TIM_OC3_SetConfig+0xd0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10d      	bne.n	8004746 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a14      	ldr	r2, [pc, #80]	@ (800479c <TIM_OC3_SetConfig+0xd0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d113      	bne.n	8004776 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800475c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00

080047a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004838 <TIM_OC4_SetConfig+0x98>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d109      	bne.n	8004814 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00

0800483c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 030a 	bic.w	r3, r3, #10
 8004878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0210 	bic.w	r2, r3, #16
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	031b      	lsls	r3, r3, #12
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	f043 0307 	orr.w	r3, r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	021a      	lsls	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	431a      	orrs	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	609a      	str	r2, [r3, #8]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2201      	movs	r2, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1a      	ldr	r2, [r3, #32]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e046      	b.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a16      	ldr	r2, [pc, #88]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a14:	d009      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a10      	ldr	r2, [pc, #64]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d10c      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800

08004a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e042      	b.n	8004b28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc ffe0 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	@ 0x24
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fdb7 	bl	8005648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	@ 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d175      	bne.n	8004c3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Transmit+0x2c>
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e06e      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2221      	movs	r2, #33	@ 0x21
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6e:	f7fd f98f 	bl	8001e90 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b88:	d108      	bne.n	8004b9c <HAL_UART_Transmit+0x6c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba4:	e02e      	b.n	8004c04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2180      	movs	r1, #128	@ 0x80
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fb1c 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e03a      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3302      	adds	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e007      	b.n	8004bf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1cb      	bne.n	8004ba6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2140      	movs	r1, #64	@ 0x40
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fae8 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e006      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d112      	bne.n	8004c86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_UART_Receive_IT+0x26>
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e00b      	b.n	8004c88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fb0f 	bl	80052a0 <UART_Start_Receive_IT>
 8004c82:	4603      	mov	r3, r0
 8004c84:	e000      	b.n	8004c88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b0ba      	sub	sp, #232	@ 0xe8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x66>
 8004ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fbec 	bl	80054cc <UART_Receive_IT>
      return;
 8004cf4:	e25b      	b.n	80051ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80de 	beq.w	8004ebc <HAL_UART_IRQHandler+0x22c>
 8004d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80d1 	beq.w	8004ebc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_UART_IRQHandler+0xae>
 8004d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_UART_IRQHandler+0xd2>
 8004d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f043 0202 	orr.w	r2, r3, #2
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <HAL_UART_IRQHandler+0xf6>
 8004d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7e:	f043 0204 	orr.w	r2, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d011      	beq.n	8004db6 <HAL_UART_IRQHandler+0x126>
 8004d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d105      	bne.n	8004daa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 81f2 	beq.w	80051a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_UART_IRQHandler+0x14e>
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fb77 	bl	80054cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <HAL_UART_IRQHandler+0x17a>
 8004e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04f      	beq.n	8004eaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa81 	bl	8005312 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d041      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1d9      	bne.n	8004e1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d013      	beq.n	8004e9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e76:	4a7e      	ldr	r2, [pc, #504]	@ (8005070 <HAL_UART_IRQHandler+0x3e0>)
 8004e78:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fd f92a 	bl	80020d8 <HAL_DMA_Abort_IT>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d016      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e94:	4610      	mov	r0, r2
 8004e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e00e      	b.n	8004eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f993 	bl	80051c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00a      	b.n	8004eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f98f 	bl	80051c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e006      	b.n	8004eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f98b 	bl	80051c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004eb6:	e175      	b.n	80051a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	bf00      	nop
    return;
 8004eba:	e173      	b.n	80051a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 814f 	bne.w	8005164 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8148 	beq.w	8005164 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8141 	beq.w	8005164 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80b6 	beq.w	8005074 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8145 	beq.w	80051a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f080 813e 	bcs.w	80051a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f000 8088 	beq.w	8005050 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1d9      	bne.n	8004f40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fb0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e1      	bne.n	8004f8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ff2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ffa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e3      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	330c      	adds	r3, #12
 8005014:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800501e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005020:	f023 0310 	bic.w	r3, r3, #16
 8005024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005032:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005034:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005038:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e3      	bne.n	800500e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd f809 	bl	8002062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800505e:	b29b      	uxth	r3, r3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	b29b      	uxth	r3, r3
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8b6 	bl	80051d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800506c:	e09c      	b.n	80051a8 <HAL_UART_IRQHandler+0x518>
 800506e:	bf00      	nop
 8005070:	080053d7 	.word	0x080053d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800507c:	b29b      	uxth	r3, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 808e 	beq.w	80051ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8089 	beq.w	80051ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	330c      	adds	r3, #12
 80050a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050be:	647a      	str	r2, [r7, #68]	@ 0x44
 80050c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e3      	bne.n	800509a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	623b      	str	r3, [r7, #32]
   return(result);
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3314      	adds	r3, #20
 80050f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e3      	bne.n	80050d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	60fb      	str	r3, [r7, #12]
   return(result);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0310 	bic.w	r3, r3, #16
 800512e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	330c      	adds	r3, #12
 8005138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800513c:	61fa      	str	r2, [r7, #28]
 800513e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	69b9      	ldr	r1, [r7, #24]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	617b      	str	r3, [r7, #20]
   return(result);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e3      	bne.n	8005118 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f83b 	bl	80051d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005162:	e023      	b.n	80051ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <HAL_UART_IRQHandler+0x4f4>
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f93e 	bl	80053fe <UART_Transmit_IT>
    return;
 8005182:	e014      	b.n	80051ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00e      	beq.n	80051ae <HAL_UART_IRQHandler+0x51e>
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f97d 	bl	800549c <UART_EndTransmit_IT>
    return;
 80051a2:	e004      	b.n	80051ae <HAL_UART_IRQHandler+0x51e>
    return;
 80051a4:	bf00      	nop
 80051a6:	e002      	b.n	80051ae <HAL_UART_IRQHandler+0x51e>
      return;
 80051a8:	bf00      	nop
 80051aa:	e000      	b.n	80051ae <HAL_UART_IRQHandler+0x51e>
      return;
 80051ac:	bf00      	nop
  }
}
 80051ae:	37e8      	adds	r7, #232	@ 0xe8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr

080051c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	e03b      	b.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d037      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005208:	f7fc fe42 	bl	8001e90 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <UART_WaitOnFlagUntilTimeout+0x30>
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e03a      	b.n	8005298 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d023      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b80      	cmp	r3, #128	@ 0x80
 8005234:	d020      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d01d      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b08      	cmp	r3, #8
 8005248:	d116      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f856 	bl	8005312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2208      	movs	r2, #8
 800526a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e00f      	b.n	8005298 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4013      	ands	r3, r2
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	429a      	cmp	r2, r3
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	429a      	cmp	r2, r3
 8005294:	d0b4      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2222      	movs	r2, #34	@ 0x22
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0220 	orr.w	r2, r2, #32
 8005304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005312:	b480      	push	{r7}
 8005314:	b095      	sub	sp, #84	@ 0x54
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800533a:	643a      	str	r2, [r7, #64]	@ 0x40
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005340:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e5      	bne.n	800531a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	61fb      	str	r3, [r7, #28]
   return(result);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800536e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005370:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e5      	bne.n	800534e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	2b01      	cmp	r3, #1
 8005388:	d119      	bne.n	80053be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	60bb      	str	r3, [r7, #8]
   return(result);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f023 0310 	bic.w	r3, r3, #16
 80053a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053aa:	61ba      	str	r2, [r7, #24]
 80053ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6979      	ldr	r1, [r7, #20]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	613b      	str	r3, [r7, #16]
   return(result);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053cc:	bf00      	nop
 80053ce:	3754      	adds	r7, #84	@ 0x54
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff fee8 	bl	80051c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b21      	cmp	r3, #33	@ 0x21
 8005410:	d13e      	bne.n	8005490 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541a:	d114      	bne.n	8005446 <UART_Transmit_IT+0x48>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d110      	bne.n	8005446 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005438:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	1c9a      	adds	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	621a      	str	r2, [r3, #32]
 8005444:	e008      	b.n	8005458 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	1c59      	adds	r1, r3, #1
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6211      	str	r1, [r2, #32]
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29b      	uxth	r3, r3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4619      	mov	r1, r3
 8005466:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800547a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800548a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e000      	b.n	8005492 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fe79 	bl	80051b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	@ 0x30
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b22      	cmp	r3, #34	@ 0x22
 80054de:	f040 80ae 	bne.w	800563e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	d117      	bne.n	800551c <UART_Receive_IT+0x50>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d113      	bne.n	800551c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	b29a      	uxth	r2, r3
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
 800551a:	e026      	b.n	800556a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552e:	d007      	beq.n	8005540 <UART_Receive_IT+0x74>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <UART_Receive_IT+0x82>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e008      	b.n	8005560 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800555a:	b2da      	uxtb	r2, r3
 800555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29b      	uxth	r3, r3
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4619      	mov	r1, r3
 8005578:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800557a:	2b00      	cmp	r3, #0
 800557c:	d15d      	bne.n	800563a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0220 	bic.w	r2, r2, #32
 800558c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800559c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d135      	bne.n	8005630 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	613b      	str	r3, [r7, #16]
   return(result);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f023 0310 	bic.w	r3, r3, #16
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ea:	623a      	str	r2, [r7, #32]
 80055ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	69f9      	ldr	r1, [r7, #28]
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b10      	cmp	r3, #16
 800560a:	d10a      	bne.n	8005622 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fdd5 	bl	80051d8 <HAL_UARTEx_RxEventCallback>
 800562e:	e002      	b.n	8005636 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fb fd43 	bl	80010bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e002      	b.n	8005640 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3730      	adds	r7, #48	@ 0x30
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005682:	f023 030c 	bic.w	r3, r3, #12
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	430b      	orrs	r3, r1
 800568e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2c      	ldr	r2, [pc, #176]	@ (800575c <UART_SetConfig+0x114>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d103      	bne.n	80056b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056b0:	f7fe f9c2 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	e002      	b.n	80056be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fe f9aa 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 80056bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	4a22      	ldr	r2, [pc, #136]	@ (8005760 <UART_SetConfig+0x118>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	0119      	lsls	r1, r3, #4
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009a      	lsls	r2, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <UART_SetConfig+0x118>)
 80056f6:	fba3 0302 	umull	r0, r3, r3, r2
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	2064      	movs	r0, #100	@ 0x64
 80056fe:	fb00 f303 	mul.w	r3, r0, r3
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	3332      	adds	r3, #50	@ 0x32
 8005708:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <UART_SetConfig+0x118>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005714:	4419      	add	r1, r3
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009a      	lsls	r2, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fbb2 f2f3 	udiv	r2, r2, r3
 800572c:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <UART_SetConfig+0x118>)
 800572e:	fba3 0302 	umull	r0, r3, r3, r2
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	2064      	movs	r0, #100	@ 0x64
 8005736:	fb00 f303 	mul.w	r3, r0, r3
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	3332      	adds	r3, #50	@ 0x32
 8005740:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <UART_SetConfig+0x118>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	440a      	add	r2, r1
 8005752:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40013800 	.word	0x40013800
 8005760:	51eb851f 	.word	0x51eb851f

08005764 <Delay_us>:

HCSR04_State hc04_state = HCSR04_IDLE_STATE;

float Distance;

void Delay_us(uint16_t us){
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	80fb      	strh	r3, [r7, #6]
	htim1.Instance -> CNT = 0;
 800576e:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <Delay_us+0x34>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	625a      	str	r2, [r3, #36]	@ 0x24
	//TIM2 -> CNT = 0; (Cach 2)
	HAL_TIM_Base_Start(&htim1);
 8005776:	4808      	ldr	r0, [pc, #32]	@ (8005798 <Delay_us+0x34>)
 8005778:	f7fe fa10 	bl	8003b9c <HAL_TIM_Base_Start>
	while (htim1.Instance -> CNT < us);
 800577c:	bf00      	nop
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <Delay_us+0x34>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	429a      	cmp	r2, r3
 8005788:	d3f9      	bcc.n	800577e <Delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim1);
 800578a:	4803      	ldr	r0, [pc, #12]	@ (8005798 <Delay_us+0x34>)
 800578c:	f7fe fa50 	bl	8003c30 <HAL_TIM_Base_Stop>
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000250 	.word	0x20000250

0800579c <pulseGPIO>:
	for (int i = 0;i<ms;i++){
		Delay_us(1000);
	}
}

void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 80057a8:	887b      	ldrh	r3, [r7, #2]
 80057aa:	2201      	movs	r2, #1
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fc fea5 	bl	80024fe <HAL_GPIO_WritePin>
	Delay_us(20);
 80057b4:	2014      	movs	r0, #20
 80057b6:	f7ff ffd5 	bl	8005764 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 80057ba:	887b      	ldrh	r3, [r7, #2]
 80057bc:	2200      	movs	r2, #0
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7fc fe9c 	bl	80024fe <HAL_GPIO_WritePin>
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <HCSR04_Start>:

void HCSR04_Start(){
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
	if (hc04_state == HCSR04_IDLE_STATE){
 80057d4:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HCSR04_Start+0x20>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d107      	bne.n	80057ec <HCSR04_Start+0x1c>
	pulseGPIO(GPIOA, GPIO_PIN_8);
 80057dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057e0:	4804      	ldr	r0, [pc, #16]	@ (80057f4 <HCSR04_Start+0x24>)
 80057e2:	f7ff ffdb 	bl	800579c <pulseGPIO>
	hc04_state = HCSR04_WAIT_RISING_STATE;
 80057e6:	4b02      	ldr	r3, [pc, #8]	@ (80057f0 <HCSR04_Start+0x20>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
	}
}
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	200003fc 	.word	0x200003fc
 80057f4:	40010800 	.word	0x40010800

080057f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	80fb      	strh	r3, [r7, #6]
	switch (hc04_state) {
 8005802:	4b1e      	ldr	r3, [pc, #120]	@ (800587c <HAL_GPIO_EXTI_Callback+0x84>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d002      	beq.n	8005810 <HAL_GPIO_EXTI_Callback+0x18>
 800580a:	2b02      	cmp	r3, #2
 800580c:	d017      	beq.n	800583e <HAL_GPIO_EXTI_Callback+0x46>
			}else {
				hc04_state = HCSR04_IDLE_STATE;
			}
			break;
		default:
			break;
 800580e:	e02b      	b.n	8005868 <HAL_GPIO_EXTI_Callback+0x70>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 8005810:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005814:	481a      	ldr	r0, [pc, #104]	@ (8005880 <HAL_GPIO_EXTI_Callback+0x88>)
 8005816:	f7fc fe5b 	bl	80024d0 <HAL_GPIO_ReadPin>
 800581a:	4603      	mov	r3, r0
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10a      	bne.n	8005836 <HAL_GPIO_EXTI_Callback+0x3e>
			htim1.Instance -> CNT = 0;
 8005820:	4b18      	ldr	r3, [pc, #96]	@ (8005884 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	625a      	str	r2, [r3, #36]	@ 0x24
			hc04_state = HCSRO4_WAIT_FALLING_STATE;
 8005828:	4b14      	ldr	r3, [pc, #80]	@ (800587c <HAL_GPIO_EXTI_Callback+0x84>)
 800582a:	2202      	movs	r2, #2
 800582c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim1);
 800582e:	4815      	ldr	r0, [pc, #84]	@ (8005884 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005830:	f7fe f9b4 	bl	8003b9c <HAL_TIM_Base_Start>
			break;
 8005834:	e018      	b.n	8005868 <HAL_GPIO_EXTI_Callback+0x70>
				hc04_state = HCSR04_IDLE_STATE;
 8005836:	4b11      	ldr	r3, [pc, #68]	@ (800587c <HAL_GPIO_EXTI_Callback+0x84>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
			break;
 800583c:	e014      	b.n	8005868 <HAL_GPIO_EXTI_Callback+0x70>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){
 800583e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005842:	480f      	ldr	r0, [pc, #60]	@ (8005880 <HAL_GPIO_EXTI_Callback+0x88>)
 8005844:	f7fc fe44 	bl	80024d0 <HAL_GPIO_ReadPin>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d108      	bne.n	8005860 <HAL_GPIO_EXTI_Callback+0x68>
			HAL_TIM_Base_Stop(&htim1);
 800584e:	480d      	ldr	r0, [pc, #52]	@ (8005884 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005850:	f7fe f9ee 	bl	8003c30 <HAL_TIM_Base_Stop>
			hc04_state = HCSR04_COMPLETE_STATE;
 8005854:	4b09      	ldr	r3, [pc, #36]	@ (800587c <HAL_GPIO_EXTI_Callback+0x84>)
 8005856:	2203      	movs	r2, #3
 8005858:	701a      	strb	r2, [r3, #0]
			HC04_Handle();
 800585a:	f000 f83d 	bl	80058d8 <HC04_Handle>
			break;
 800585e:	e002      	b.n	8005866 <HAL_GPIO_EXTI_Callback+0x6e>
				hc04_state = HCSR04_IDLE_STATE;
 8005860:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_GPIO_EXTI_Callback+0x84>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
			break;
 8005866:	bf00      	nop
	}
		count1 ++;
 8005868:	4b07      	ldr	r3, [pc, #28]	@ (8005888 <HAL_GPIO_EXTI_Callback+0x90>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	4a06      	ldr	r2, [pc, #24]	@ (8005888 <HAL_GPIO_EXTI_Callback+0x90>)
 8005870:	6013      	str	r3, [r2, #0]
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200003fc 	.word	0x200003fc
 8005880:	40010c00 	.word	0x40010c00
 8005884:	20000250 	.word	0x20000250
 8005888:	200003f8 	.word	0x200003f8

0800588c <HC04_Complete_Callback>:

void HC04_Complete_Callback(float Distance){
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	//Dieu khien dong co.
	//Hien thi len LCD.
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8005894:	4b0d      	ldr	r3, [pc, #52]	@ (80058cc <HC04_Complete_Callback+0x40>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f04f 31ff 	mov.w	r1, #4294967295
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fb0d 	bl	8005ebc <osSemaphoreAcquire>
	printf("Distance: %f\n", Distance);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fa fdc0 	bl	8000428 <__aeabi_f2d>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4808      	ldr	r0, [pc, #32]	@ (80058d0 <HC04_Complete_Callback+0x44>)
 80058ae:	f004 fcad 	bl	800a20c <iprintf>
	osSemaphoreRelease(Sem2_UARTHandle);
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HC04_Complete_Callback+0x40>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fb52 	bl	8005f60 <osSemaphoreRelease>
	hc04_state = HCSR04_IDLE_STATE;
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HC04_Complete_Callback+0x48>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000338 	.word	0x20000338
 80058d0:	0800dc54 	.word	0x0800dc54
 80058d4:	200003fc 	.word	0x200003fc

080058d8 <HC04_Handle>:

void HC04_Handle(){
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
	if (hc04_state == HCSR04_COMPLETE_STATE){
 80058dc:	4b12      	ldr	r3, [pc, #72]	@ (8005928 <HC04_Handle+0x50>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d118      	bne.n	8005916 <HC04_Handle+0x3e>
		//Tinh toan khoang cach
		Distance = 0.017 * htim1.Instance->CNT;
 80058e4:	4b11      	ldr	r3, [pc, #68]	@ (800592c <HC04_Handle+0x54>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fd7a 	bl	80003e4 <__aeabi_ui2d>
 80058f0:	a30b      	add	r3, pc, #44	@ (adr r3, 8005920 <HC04_Handle+0x48>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f7fa fdef 	bl	80004d8 <__aeabi_dmul>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	f7fb f8e1 	bl	8000ac8 <__aeabi_d2f>
 8005906:	4603      	mov	r3, r0
 8005908:	4a09      	ldr	r2, [pc, #36]	@ (8005930 <HC04_Handle+0x58>)
 800590a:	6013      	str	r3, [r2, #0]
		HC04_Complete_Callback(Distance);
 800590c:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <HC04_Handle+0x58>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ffbb 	bl	800588c <HC04_Complete_Callback>
	}
}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w
 8005920:	b020c49c 	.word	0xb020c49c
 8005924:	3f916872 	.word	0x3f916872
 8005928:	200003fc 	.word	0x200003fc
 800592c:	20000250 	.word	0x20000250
 8005930:	20000400 	.word	0x20000400

08005934 <MPU9250_Read_Accel_Gyro>:
	MPU_Write_Register(ACCEL_CONFIG, 0x00);
	MPU_Write_Register(GYRO_CONFIG,  0x00);
}

//Đọc dữ liệu
void MPU9250_Read_Accel_Gyro(int16_t *accel, int16_t *gyro) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	@ 0x28
 8005938:	af04      	add	r7, sp, #16
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H, 1, data, 14, 100);
 800593e:	2364      	movs	r3, #100	@ 0x64
 8005940:	9302      	str	r3, [sp, #8]
 8005942:	230e      	movs	r3, #14
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2301      	movs	r3, #1
 800594e:	223b      	movs	r2, #59	@ 0x3b
 8005950:	21d0      	movs	r1, #208	@ 0xd0
 8005952:	4820      	ldr	r0, [pc, #128]	@ (80059d4 <MPU9250_Read_Accel_Gyro+0xa0>)
 8005954:	f7fc ff48 	bl	80027e8 <HAL_I2C_Mem_Read>

	// Gia tốc
	accel[0] = (int16_t) (data[0] << 8 | data[1]);
 8005958:	7a3b      	ldrb	r3, [r7, #8]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	b21a      	sxth	r2, r3
 800595e:	7a7b      	ldrb	r3, [r7, #9]
 8005960:	b21b      	sxth	r3, r3
 8005962:	4313      	orrs	r3, r2
 8005964:	b21a      	sxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	801a      	strh	r2, [r3, #0]
	accel[1] = (int16_t) (data[2] << 8 | data[3]);
 800596a:	7abb      	ldrb	r3, [r7, #10]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	b219      	sxth	r1, r3
 8005970:	7afb      	ldrb	r3, [r7, #11]
 8005972:	b21a      	sxth	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3302      	adds	r3, #2
 8005978:	430a      	orrs	r2, r1
 800597a:	b212      	sxth	r2, r2
 800597c:	801a      	strh	r2, [r3, #0]
	accel[2] = (int16_t) (data[4] << 8 | data[5]);
 800597e:	7b3b      	ldrb	r3, [r7, #12]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	b219      	sxth	r1, r3
 8005984:	7b7b      	ldrb	r3, [r7, #13]
 8005986:	b21a      	sxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	430a      	orrs	r2, r1
 800598e:	b212      	sxth	r2, r2
 8005990:	801a      	strh	r2, [r3, #0]

	// Con quay
	gyro[0] = (int16_t) (data[8] << 8 | data[9]);
 8005992:	7c3b      	ldrb	r3, [r7, #16]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	b21a      	sxth	r2, r3
 8005998:	7c7b      	ldrb	r3, [r7, #17]
 800599a:	b21b      	sxth	r3, r3
 800599c:	4313      	orrs	r3, r2
 800599e:	b21a      	sxth	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t) (data[10] << 8 | data[11]);
 80059a4:	7cbb      	ldrb	r3, [r7, #18]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	b219      	sxth	r1, r3
 80059aa:	7cfb      	ldrb	r3, [r7, #19]
 80059ac:	b21a      	sxth	r2, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	3302      	adds	r3, #2
 80059b2:	430a      	orrs	r2, r1
 80059b4:	b212      	sxth	r2, r2
 80059b6:	801a      	strh	r2, [r3, #0]
	gyro[2] = (int16_t) (data[12] << 8 | data[13]);
 80059b8:	7d3b      	ldrb	r3, [r7, #20]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	b219      	sxth	r1, r3
 80059be:	7d7b      	ldrb	r3, [r7, #21]
 80059c0:	b21a      	sxth	r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	3304      	adds	r3, #4
 80059c6:	430a      	orrs	r2, r1
 80059c8:	b212      	sxth	r2, r2
 80059ca:	801a      	strh	r2, [r3, #0]
}
 80059cc:	bf00      	nop
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	200001fc 	.word	0x200001fc

080059d8 <Send_Sensor_Data>:

void Send_Sensor_Data(int16_t *accel, int16_t *gyro) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	    // Chuyển về đơn vị vật lý
	    ax = accel[0] / 16384.0f;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fb f977 	bl	8000cdc <__aeabi_i2f>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fb fa79 	bl	8000eec <__aeabi_fdiv>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b2b      	ldr	r3, [pc, #172]	@ (8005aac <Send_Sensor_Data+0xd4>)
 8005a00:	601a      	str	r2, [r3, #0]
	    ay = accel[1] / 16384.0f;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3302      	adds	r3, #2
 8005a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb f966 	bl	8000cdc <__aeabi_i2f>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fb fa68 	bl	8000eec <__aeabi_fdiv>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4b23      	ldr	r3, [pc, #140]	@ (8005ab0 <Send_Sensor_Data+0xd8>)
 8005a22:	601a      	str	r2, [r3, #0]
	    az = accel[2] / 16384.0f;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fb f955 	bl	8000cdc <__aeabi_i2f>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fb fa57 	bl	8000eec <__aeabi_fdiv>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab4 <Send_Sensor_Data+0xdc>)
 8005a44:	601a      	str	r2, [r3, #0]

	    gx = gyro[0] / 131.0f;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fb f945 	bl	8000cdc <__aeabi_i2f>
 8005a52:	4603      	mov	r3, r0
 8005a54:	4918      	ldr	r1, [pc, #96]	@ (8005ab8 <Send_Sensor_Data+0xe0>)
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fb fa48 	bl	8000eec <__aeabi_fdiv>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <Send_Sensor_Data+0xe4>)
 8005a62:	601a      	str	r2, [r3, #0]
	    gy = gyro[1] / 131.0f;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3302      	adds	r3, #2
 8005a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fb f935 	bl	8000cdc <__aeabi_i2f>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4910      	ldr	r1, [pc, #64]	@ (8005ab8 <Send_Sensor_Data+0xe0>)
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fb fa38 	bl	8000eec <__aeabi_fdiv>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <Send_Sensor_Data+0xe8>)
 8005a82:	601a      	str	r2, [r3, #0]
	    gz = gyro[2] / 131.0f;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	3304      	adds	r3, #4
 8005a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fb f925 	bl	8000cdc <__aeabi_i2f>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4908      	ldr	r1, [pc, #32]	@ (8005ab8 <Send_Sensor_Data+0xe0>)
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fb fa28 	bl	8000eec <__aeabi_fdiv>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <Send_Sensor_Data+0xec>)
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000404 	.word	0x20000404
 8005ab0:	20000408 	.word	0x20000408
 8005ab4:	2000040c 	.word	0x2000040c
 8005ab8:	43030000 	.word	0x43030000
 8005abc:	20000410 	.word	0x20000410
 8005ac0:	20000414 	.word	0x20000414
 8005ac4:	20000418 	.word	0x20000418

08005ac8 <MPU9250_Getdata>:

void MPU9250_Getdata(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
	MPU9250_Read_Accel_Gyro(accel, gyro);
 8005acc:	4904      	ldr	r1, [pc, #16]	@ (8005ae0 <MPU9250_Getdata+0x18>)
 8005ace:	4805      	ldr	r0, [pc, #20]	@ (8005ae4 <MPU9250_Getdata+0x1c>)
 8005ad0:	f7ff ff30 	bl	8005934 <MPU9250_Read_Accel_Gyro>
	Send_Sensor_Data(accel, gyro);
 8005ad4:	4902      	ldr	r1, [pc, #8]	@ (8005ae0 <MPU9250_Getdata+0x18>)
 8005ad6:	4803      	ldr	r0, [pc, #12]	@ (8005ae4 <MPU9250_Getdata+0x1c>)
 8005ad8:	f7ff ff7e 	bl	80059d8 <Send_Sensor_Data>
}
 8005adc:	bf00      	nop
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000424 	.word	0x20000424
 8005ae4:	2000041c 	.word	0x2000041c

08005ae8 <__NVIC_SetPriority>:
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db0a      	blt.n	8005b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	490c      	ldr	r1, [pc, #48]	@ (8005b34 <__NVIC_SetPriority+0x4c>)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	0112      	lsls	r2, r2, #4
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b10:	e00a      	b.n	8005b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4908      	ldr	r1, [pc, #32]	@ (8005b38 <__NVIC_SetPriority+0x50>)
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	3b04      	subs	r3, #4
 8005b20:	0112      	lsls	r2, r2, #4
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	440b      	add	r3, r1
 8005b26:	761a      	strb	r2, [r3, #24]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	e000e100 	.word	0xe000e100
 8005b38:	e000ed00 	.word	0xe000ed00

08005b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b40:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <SysTick_Handler+0x1c>)
 8005b42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b44:	f002 fa0c 	bl	8007f60 <xTaskGetSchedulerState>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d001      	beq.n	8005b52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b4e:	f003 f8cb 	bl	8008ce8 <xPortSysTickHandler>
  }
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000e010 	.word	0xe000e010

08005b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b60:	2100      	movs	r1, #0
 8005b62:	f06f 0004 	mvn.w	r0, #4
 8005b66:	f7ff ffbf 	bl	8005ae8 <__NVIC_SetPriority>
#endif
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b76:	f3ef 8305 	mrs	r3, IPSR
 8005b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b82:	f06f 0305 	mvn.w	r3, #5
 8005b86:	607b      	str	r3, [r7, #4]
 8005b88:	e00c      	b.n	8005ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b8a:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <osKernelInitialize+0x40>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b92:	4b07      	ldr	r3, [pc, #28]	@ (8005bb0 <osKernelInitialize+0x40>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	e002      	b.n	8005ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ba4:	687b      	ldr	r3, [r7, #4]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr
 8005bb0:	2000042c 	.word	0x2000042c

08005bb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bba:	f3ef 8305 	mrs	r3, IPSR
 8005bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8005bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bc6:	f06f 0305 	mvn.w	r3, #5
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	e010      	b.n	8005bf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bce:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <osKernelStart+0x48>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d109      	bne.n	8005bea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005bd6:	f7ff ffc1 	bl	8005b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005bda:	4b08      	ldr	r3, [pc, #32]	@ (8005bfc <osKernelStart+0x48>)
 8005bdc:	2202      	movs	r2, #2
 8005bde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005be0:	f001 fd4c 	bl	800767c <vTaskStartScheduler>
      stat = osOK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e002      	b.n	8005bf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bf0:	687b      	ldr	r3, [r7, #4]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2000042c 	.word	0x2000042c

08005c00 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c06:	f3ef 8305 	mrs	r3, IPSR
 8005c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c0c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005c12:	f001 fe5d 	bl	80078d0 <xTaskGetTickCountFromISR>
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	e002      	b.n	8005c20 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005c1a:	f001 fe4b 	bl	80078b4 <xTaskGetTickCount>
 8005c1e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005c20:	687b      	ldr	r3, [r7, #4]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b08e      	sub	sp, #56	@ 0x38
 8005c2e:	af04      	add	r7, sp, #16
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3a:	f3ef 8305 	mrs	r3, IPSR
 8005c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8005c40:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d17e      	bne.n	8005d44 <osThreadNew+0x11a>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d07b      	beq.n	8005d44 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c4c:	2380      	movs	r3, #128	@ 0x80
 8005c4e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c50:	2318      	movs	r3, #24
 8005c52:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005c58:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d045      	beq.n	8005cf0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <osThreadNew+0x48>
        name = attr->name;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <osThreadNew+0x6e>
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	2b38      	cmp	r3, #56	@ 0x38
 8005c8a:	d805      	bhi.n	8005c98 <osThreadNew+0x6e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <osThreadNew+0x72>
        return (NULL);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e054      	b.n	8005d46 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <osThreadNew+0xa8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2ba7      	cmp	r3, #167	@ 0xa7
 8005cba:	d90a      	bls.n	8005cd2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <osThreadNew+0xa8>
        mem = 1;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e010      	b.n	8005cf4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10c      	bne.n	8005cf4 <osThreadNew+0xca>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d108      	bne.n	8005cf4 <osThreadNew+0xca>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <osThreadNew+0xca>
          mem = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	e001      	b.n	8005cf4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d110      	bne.n	8005d1c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d02:	9202      	str	r2, [sp, #8]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6a3a      	ldr	r2, [r7, #32]
 8005d0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 fa75 	bl	8007200 <xTaskCreateStatic>
 8005d16:	4603      	mov	r3, r0
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	e013      	b.n	8005d44 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d110      	bne.n	8005d44 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f107 0310 	add.w	r3, r7, #16
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f001 fac3 	bl	80072c0 <xTaskCreate>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d001      	beq.n	8005d44 <osThreadNew+0x11a>
            hTask = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d44:	693b      	ldr	r3, [r7, #16]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3728      	adds	r7, #40	@ 0x28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d56:	f3ef 8305 	mrs	r3, IPSR
 8005d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8005d62:	f06f 0305 	mvn.w	r3, #5
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e019      	b.n	8005d9e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8005d6e:	f001 fda1 	bl	80078b4 <xTaskGetTickCount>
 8005d72:	4603      	mov	r3, r0
 8005d74:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <osDelayUntil+0x4a>
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	db06      	blt.n	8005d98 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8005d8a:	f107 0308 	add.w	r3, r7, #8
 8005d8e:	6939      	ldr	r1, [r7, #16]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fbf3 	bl	800757c <vTaskDelayUntil>
 8005d96:	e002      	b.n	8005d9e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005d98:	f06f 0303 	mvn.w	r3, #3
 8005d9c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d9e:	697b      	ldr	r3, [r7, #20]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	@ 0x28
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db8:	f3ef 8305 	mrs	r3, IPSR
 8005dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d175      	bne.n	8005eb0 <osSemaphoreNew+0x108>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d072      	beq.n	8005eb0 <osSemaphoreNew+0x108>
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d86e      	bhi.n	8005eb0 <osSemaphoreNew+0x108>
    mem = -1;
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <osSemaphoreNew+0x4c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	2b4f      	cmp	r3, #79	@ 0x4f
 8005dec:	d902      	bls.n	8005df4 <osSemaphoreNew+0x4c>
        mem = 1;
 8005dee:	2301      	movs	r3, #1
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e00c      	b.n	8005e0e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d108      	bne.n	8005e0e <osSemaphoreNew+0x66>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <osSemaphoreNew+0x66>
          mem = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	e001      	b.n	8005e0e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d04c      	beq.n	8005eb0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d128      	bne.n	8005e6e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10a      	bne.n	8005e38 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2203      	movs	r2, #3
 8005e28:	9200      	str	r2, [sp, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f000 fa26 	bl	8006280 <xQueueGenericCreateStatic>
 8005e34:	61f8      	str	r0, [r7, #28]
 8005e36:	e005      	b.n	8005e44 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e38:	2203      	movs	r2, #3
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f000 fa9c 	bl	800637a <xQueueGenericCreate>
 8005e42:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d022      	beq.n	8005e90 <osSemaphoreNew+0xe8>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01f      	beq.n	8005e90 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e50:	2300      	movs	r3, #0
 8005e52:	2200      	movs	r2, #0
 8005e54:	2100      	movs	r1, #0
 8005e56:	69f8      	ldr	r0, [r7, #28]
 8005e58:	f000 fb5c 	bl	8006514 <xQueueGenericSend>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d016      	beq.n	8005e90 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e62:	69f8      	ldr	r0, [r7, #28]
 8005e64:	f000 fffa 	bl	8006e5c <vQueueDelete>
            hSemaphore = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e010      	b.n	8005e90 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d108      	bne.n	8005e86 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fada 	bl	8006436 <xQueueCreateCountingSemaphoreStatic>
 8005e82:	61f8      	str	r0, [r7, #28]
 8005e84:	e004      	b.n	8005e90 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fb0d 	bl	80064a8 <xQueueCreateCountingSemaphore>
 8005e8e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00c      	beq.n	8005eb0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e001      	b.n	8005ea8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005ea8:	6979      	ldr	r1, [r7, #20]
 8005eaa:	69f8      	ldr	r0, [r7, #28]
 8005eac:	f001 f922 	bl	80070f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005ed4:	f06f 0303 	mvn.w	r3, #3
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e039      	b.n	8005f50 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005edc:	f3ef 8305 	mrs	r3, IPSR
 8005ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d022      	beq.n	8005f2e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005eee:	f06f 0303 	mvn.w	r3, #3
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e02c      	b.n	8005f50 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	461a      	mov	r2, r3
 8005f00:	2100      	movs	r1, #0
 8005f02:	6938      	ldr	r0, [r7, #16]
 8005f04:	f000 ff28 	bl	8006d58 <xQueueReceiveFromISR>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d003      	beq.n	8005f16 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005f0e:	f06f 0302 	mvn.w	r3, #2
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e01c      	b.n	8005f50 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d019      	beq.n	8005f50 <osSemaphoreAcquire+0x94>
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <osSemaphoreAcquire+0xa0>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	e010      	b.n	8005f50 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6938      	ldr	r0, [r7, #16]
 8005f32:	f000 fe01 	bl	8006b38 <xQueueSemaphoreTake>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d009      	beq.n	8005f50 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f42:	f06f 0301 	mvn.w	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e002      	b.n	8005f50 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005f4a:	f06f 0302 	mvn.w	r3, #2
 8005f4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f50:	697b      	ldr	r3, [r7, #20]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005f76:	f06f 0303 	mvn.w	r3, #3
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e02c      	b.n	8005fd8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f7e:	f3ef 8305 	mrs	r3, IPSR
 8005f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f84:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01a      	beq.n	8005fc0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005f8e:	f107 0308 	add.w	r3, r7, #8
 8005f92:	4619      	mov	r1, r3
 8005f94:	6938      	ldr	r0, [r7, #16]
 8005f96:	f000 fc5d 	bl	8006854 <xQueueGiveFromISR>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d003      	beq.n	8005fa8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005fa0:	f06f 0302 	mvn.w	r3, #2
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e017      	b.n	8005fd8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d014      	beq.n	8005fd8 <osSemaphoreRelease+0x78>
 8005fae:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe4 <osSemaphoreRelease+0x84>)
 8005fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	e00b      	b.n	8005fd8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	6938      	ldr	r0, [r7, #16]
 8005fc8:	f000 faa4 	bl	8006514 <xQueueGenericSend>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d002      	beq.n	8005fd8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005fd2:	f06f 0302 	mvn.w	r3, #2
 8005fd6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005fd8:	697b      	ldr	r3, [r7, #20]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	e000ed04 	.word	0xe000ed04

08005fe8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a06      	ldr	r2, [pc, #24]	@ (8006010 <vApplicationGetIdleTaskMemory+0x28>)
 8005ff8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a05      	ldr	r2, [pc, #20]	@ (8006014 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ffe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2280      	movs	r2, #128	@ 0x80
 8006004:	601a      	str	r2, [r3, #0]
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr
 8006010:	20000430 	.word	0x20000430
 8006014:	200004d8 	.word	0x200004d8

08006018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4a07      	ldr	r2, [pc, #28]	@ (8006044 <vApplicationGetTimerTaskMemory+0x2c>)
 8006028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a06      	ldr	r2, [pc, #24]	@ (8006048 <vApplicationGetTimerTaskMemory+0x30>)
 800602e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006036:	601a      	str	r2, [r3, #0]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	200006d8 	.word	0x200006d8
 8006048:	20000780 	.word	0x20000780

0800604c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f103 0208 	add.w	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f04f 32ff 	mov.w	r2, #4294967295
 8006064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f103 0208 	add.w	r2, r3, #8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f103 0208 	add.w	r2, r3, #8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr

080060a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d103      	bne.n	8006108 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e00c      	b.n	8006122 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3308      	adds	r3, #8
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e002      	b.n	8006116 <vListInsert+0x2e>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	429a      	cmp	r2, r3
 8006120:	d2f6      	bcs.n	8006110 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6892      	ldr	r2, [r2, #8]
 800616e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6852      	ldr	r2, [r2, #4]
 8006178:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d103      	bne.n	800618c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	1e5a      	subs	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
	...

080061ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061d8:	f002 fd02 	bl	8008be0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e4:	68f9      	ldr	r1, [r7, #12]
 80061e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	441a      	add	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006208:	3b01      	subs	r3, #1
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	441a      	add	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	22ff      	movs	r2, #255	@ 0xff
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	22ff      	movs	r2, #255	@ 0xff
 8006224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d114      	bne.n	8006258 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01a      	beq.n	800626c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3310      	adds	r3, #16
 800623a:	4618      	mov	r0, r3
 800623c:	f001 fcca 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006246:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <xQueueGenericReset+0xd0>)
 8006248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	e009      	b.n	800626c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3310      	adds	r3, #16
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fef5 	bl	800604c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3324      	adds	r3, #36	@ 0x24
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fef0 	bl	800604c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800626c:	f002 fce8 	bl	8008c40 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006270:	2301      	movs	r3, #1
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08e      	sub	sp, #56	@ 0x38
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	e7fd      	b.n	80062c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <xQueueGenericCreateStatic+0x56>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <xQueueGenericCreateStatic+0x5a>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <xQueueGenericCreateStatic+0x5c>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	623b      	str	r3, [r7, #32]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <xQueueGenericCreateStatic+0x84>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <xQueueGenericCreateStatic+0x88>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <xQueueGenericCreateStatic+0x8a>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	61fb      	str	r3, [r7, #28]
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	e7fd      	b.n	8006322 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006326:	2350      	movs	r3, #80	@ 0x50
 8006328:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b50      	cmp	r3, #80	@ 0x50
 800632e:	d00b      	beq.n	8006348 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	61bb      	str	r3, [r7, #24]
}
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	e7fd      	b.n	8006344 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006348:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800634e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800635c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f840 	bl	80063f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006372:	4618      	mov	r0, r3
 8006374:	3730      	adds	r7, #48	@ 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800637a:	b580      	push	{r7, lr}
 800637c:	b08a      	sub	sp, #40	@ 0x28
 800637e:	af02      	add	r7, sp, #8
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	613b      	str	r3, [r7, #16]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	3350      	adds	r3, #80	@ 0x50
 80063b4:	4618      	mov	r0, r3
 80063b6:	f002 fd1b 	bl	8008df0 <pvPortMalloc>
 80063ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d011      	beq.n	80063e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	3350      	adds	r3, #80	@ 0x50
 80063ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063d4:	79fa      	ldrb	r2, [r7, #7]
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f805 	bl	80063f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063e6:	69bb      	ldr	r3, [r7, #24]
	}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3720      	adds	r7, #32
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e002      	b.n	8006412 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800641e:	2101      	movs	r1, #1
 8006420:	69b8      	ldr	r0, [r7, #24]
 8006422:	f7ff fec3 	bl	80061ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	78fa      	ldrb	r2, [r7, #3]
 800642a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	@ 0x28
 800643a:	af02      	add	r7, sp, #8
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10b      	bne.n	8006460 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61bb      	str	r3, [r7, #24]
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	e7fd      	b.n	800645c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d90b      	bls.n	8006480 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	617b      	str	r3, [r7, #20]
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	e7fd      	b.n	800647c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006480:	2302      	movs	r3, #2
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	2100      	movs	r1, #0
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fef8 	bl	8006280 <xQueueGenericCreateStatic>
 8006490:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800649e:	69fb      	ldr	r3, [r7, #28]
	}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	613b      	str	r3, [r7, #16]
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	e7fd      	b.n	80064cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d90b      	bls.n	80064f0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	60fb      	str	r3, [r7, #12]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064f0:	2202      	movs	r2, #2
 80064f2:	2100      	movs	r1, #0
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ff40 	bl	800637a <xQueueGenericCreate>
 80064fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006508:	697b      	ldr	r3, [r7, #20]
	}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	@ 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006522:	2300      	movs	r3, #0
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <xQueueGenericSend+0x34>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <xQueueGenericSend+0x42>
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <xQueueGenericSend+0x46>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <xQueueGenericSend+0x48>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <xQueueGenericSend+0x64>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	e7fd      	b.n	8006574 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d103      	bne.n	8006586 <xQueueGenericSend+0x72>
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <xQueueGenericSend+0x76>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <xQueueGenericSend+0x78>
 800658a:	2300      	movs	r3, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <xQueueGenericSend+0x94>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	623b      	str	r3, [r7, #32]
}
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	e7fd      	b.n	80065a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a8:	f001 fcda 	bl	8007f60 <xTaskGetSchedulerState>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <xQueueGenericSend+0xa4>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <xQueueGenericSend+0xa8>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <xQueueGenericSend+0xaa>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <xQueueGenericSend+0xc6>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	61fb      	str	r3, [r7, #28]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065da:	f002 fb01 	bl	8008be0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <xQueueGenericSend+0xdc>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d129      	bne.n	8006644 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065f6:	f000 fc6c 	bl	8006ed2 <prvCopyDataToQueue>
 80065fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	3324      	adds	r3, #36	@ 0x24
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fae3 	bl	8007bd4 <xTaskRemoveFromEventList>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d013      	beq.n	800663c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006614:	4b3f      	ldr	r3, [pc, #252]	@ (8006714 <xQueueGenericSend+0x200>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	e00a      	b.n	800663c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800662c:	4b39      	ldr	r3, [pc, #228]	@ (8006714 <xQueueGenericSend+0x200>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800663c:	f002 fb00 	bl	8008c40 <vPortExitCritical>
				return pdPASS;
 8006640:	2301      	movs	r3, #1
 8006642:	e063      	b.n	800670c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800664a:	f002 faf9 	bl	8008c40 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800664e:	2300      	movs	r3, #0
 8006650:	e05c      	b.n	800670c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006658:	f107 0314 	add.w	r3, r7, #20
 800665c:	4618      	mov	r0, r3
 800665e:	f001 fb1d 	bl	8007c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006662:	2301      	movs	r3, #1
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006666:	f002 faeb 	bl	8008c40 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800666a:	f001 f877 	bl	800775c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800666e:	f002 fab7 	bl	8008be0 <vPortEnterCritical>
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006678:	b25b      	sxtb	r3, r3
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d103      	bne.n	8006688 <xQueueGenericSend+0x174>
 8006680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800668e:	b25b      	sxtb	r3, r3
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d103      	bne.n	800669e <xQueueGenericSend+0x18a>
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800669e:	f002 facf 	bl	8008c40 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066a2:	1d3a      	adds	r2, r7, #4
 80066a4:	f107 0314 	add.w	r3, r7, #20
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fb0c 	bl	8007cc8 <xTaskCheckForTimeOut>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d124      	bne.n	8006700 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066b8:	f000 fd03 	bl	80070c2 <prvIsQueueFull>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d018      	beq.n	80066f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	3310      	adds	r3, #16
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	4611      	mov	r1, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fa30 	bl	8007b30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066d2:	f000 fc8e 	bl	8006ff2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066d6:	f001 f84f 	bl	8007778 <xTaskResumeAll>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f47f af7c 	bne.w	80065da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <xQueueGenericSend+0x200>)
 80066e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	e772      	b.n	80065da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f6:	f000 fc7c 	bl	8006ff2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066fa:	f001 f83d 	bl	8007778 <xTaskResumeAll>
 80066fe:	e76c      	b.n	80065da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006702:	f000 fc76 	bl	8006ff2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006706:	f001 f837 	bl	8007778 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800670a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800670c:	4618      	mov	r0, r3
 800670e:	3738      	adds	r7, #56	@ 0x38
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b090      	sub	sp, #64	@ 0x40
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d103      	bne.n	8006756 <xQueueGenericSendFromISR+0x3e>
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <xQueueGenericSendFromISR+0x42>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <xQueueGenericSendFromISR+0x44>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d103      	bne.n	8006786 <xQueueGenericSendFromISR+0x6e>
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <xQueueGenericSendFromISR+0x72>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <xQueueGenericSendFromISR+0x74>
 800678a:	2300      	movs	r3, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	623b      	str	r3, [r7, #32]
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	e7fd      	b.n	80067a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067a8:	f002 fae2 	bl	8008d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067ac:	f3ef 8211 	mrs	r2, BASEPRI
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	61fa      	str	r2, [r7, #28]
 80067c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <xQueueGenericSendFromISR+0xc2>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d12f      	bne.n	800683a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067f0:	f000 fb6f 	bl	8006ed2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d112      	bne.n	8006824 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d016      	beq.n	8006834 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006808:	3324      	adds	r3, #36	@ 0x24
 800680a:	4618      	mov	r0, r3
 800680c:	f001 f9e2 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00e      	beq.n	8006834 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e007      	b.n	8006834 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006824:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006828:	3301      	adds	r3, #1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	b25a      	sxtb	r2, r3
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006834:	2301      	movs	r3, #1
 8006836:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006838:	e001      	b.n	800683e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800683a:	2300      	movs	r3, #0
 800683c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800683e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006840:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006848:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800684c:	4618      	mov	r0, r3
 800684e:	3740      	adds	r7, #64	@ 0x40
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08e      	sub	sp, #56	@ 0x38
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	623b      	str	r3, [r7, #32]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	61fb      	str	r3, [r7, #28]
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	e7fd      	b.n	800689c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d103      	bne.n	80068b0 <xQueueGiveFromISR+0x5c>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <xQueueGiveFromISR+0x60>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <xQueueGiveFromISR+0x62>
 80068b4:	2300      	movs	r3, #0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	61bb      	str	r3, [r7, #24]
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	e7fd      	b.n	80068ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068d2:	f002 fa4d 	bl	8008d70 <vPortValidateInterruptPriority>
	__asm volatile
 80068d6:	f3ef 8211 	mrs	r2, BASEPRI
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	617a      	str	r2, [r7, #20]
 80068ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068fe:	429a      	cmp	r2, r3
 8006900:	d22b      	bcs.n	800695a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006914:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d112      	bne.n	8006944 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d016      	beq.n	8006954 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	3324      	adds	r3, #36	@ 0x24
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f952 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00e      	beq.n	8006954 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e007      	b.n	8006954 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006948:	3301      	adds	r3, #1
 800694a:	b2db      	uxtb	r3, r3
 800694c:	b25a      	sxtb	r2, r3
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006954:	2301      	movs	r3, #1
 8006956:	637b      	str	r3, [r7, #52]	@ 0x34
 8006958:	e001      	b.n	800695e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800695a:	2300      	movs	r3, #0
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f383 8811 	msr	BASEPRI, r3
}
 8006968:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800696c:	4618      	mov	r0, r3
 800696e:	3738      	adds	r7, #56	@ 0x38
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08c      	sub	sp, #48	@ 0x30
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006980:	2300      	movs	r3, #0
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <xQueueReceive+0x32>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	623b      	str	r3, [r7, #32]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <xQueueReceive+0x40>
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <xQueueReceive+0x44>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <xQueueReceive+0x46>
 80069b8:	2300      	movs	r3, #0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <xQueueReceive+0x62>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	61fb      	str	r3, [r7, #28]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069d6:	f001 fac3 	bl	8007f60 <xTaskGetSchedulerState>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <xQueueReceive+0x72>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <xQueueReceive+0x76>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <xQueueReceive+0x78>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <xQueueReceive+0x94>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	61bb      	str	r3, [r7, #24]
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a08:	f002 f8ea 	bl	8008be0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01f      	beq.n	8006a58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a1c:	f000 fac3 	bl	8006fa6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00f      	beq.n	8006a50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	3310      	adds	r3, #16
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 f8cd 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a40:	4b3c      	ldr	r3, [pc, #240]	@ (8006b34 <xQueueReceive+0x1c0>)
 8006a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a50:	f002 f8f6 	bl	8008c40 <vPortExitCritical>
				return pdPASS;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e069      	b.n	8006b2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d103      	bne.n	8006a66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a5e:	f002 f8ef 	bl	8008c40 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e062      	b.n	8006b2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a6c:	f107 0310 	add.w	r3, r7, #16
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f913 	bl	8007c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a76:	2301      	movs	r3, #1
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a7a:	f002 f8e1 	bl	8008c40 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a7e:	f000 fe6d 	bl	800775c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a82:	f002 f8ad 	bl	8008be0 <vPortEnterCritical>
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d103      	bne.n	8006a9c <xQueueReceive+0x128>
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aa2:	b25b      	sxtb	r3, r3
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d103      	bne.n	8006ab2 <xQueueReceive+0x13e>
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ab2:	f002 f8c5 	bl	8008c40 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ab6:	1d3a      	adds	r2, r7, #4
 8006ab8:	f107 0310 	add.w	r3, r7, #16
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 f902 	bl	8007cc8 <xTaskCheckForTimeOut>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d123      	bne.n	8006b12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006acc:	f000 fae3 	bl	8007096 <prvIsQueueEmpty>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d017      	beq.n	8006b06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad8:	3324      	adds	r3, #36	@ 0x24
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4611      	mov	r1, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f826 	bl	8007b30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae6:	f000 fa84 	bl	8006ff2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aea:	f000 fe45 	bl	8007778 <xTaskResumeAll>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d189      	bne.n	8006a08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006af4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <xQueueReceive+0x1c0>)
 8006af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	e780      	b.n	8006a08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b08:	f000 fa73 	bl	8006ff2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b0c:	f000 fe34 	bl	8007778 <xTaskResumeAll>
 8006b10:	e77a      	b.n	8006a08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b14:	f000 fa6d 	bl	8006ff2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b18:	f000 fe2e 	bl	8007778 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b1e:	f000 faba 	bl	8007096 <prvIsQueueEmpty>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f43f af6f 	beq.w	8006a08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3730      	adds	r7, #48	@ 0x30
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08e      	sub	sp, #56	@ 0x38
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	623b      	str	r3, [r7, #32]
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	e7fd      	b.n	8006b68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	61fb      	str	r3, [r7, #28]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b8c:	f001 f9e8 	bl	8007f60 <xTaskGetSchedulerState>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <xQueueSemaphoreTake+0x64>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <xQueueSemaphoreTake+0x68>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <xQueueSemaphoreTake+0x6a>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10b      	bne.n	8006bbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	61bb      	str	r3, [r7, #24]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bbe:	f002 f80f 	bl	8008be0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d024      	beq.n	8006c18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	1e5a      	subs	r2, r3, #1
 8006bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d104      	bne.n	8006be8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bde:	f001 fb39 	bl	8008254 <pvTaskIncrementMutexHeldCount>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00f      	beq.n	8006c10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf2:	3310      	adds	r3, #16
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 ffed 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d007      	beq.n	8006c10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c00:	4b54      	ldr	r3, [pc, #336]	@ (8006d54 <xQueueSemaphoreTake+0x21c>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c10:	f002 f816 	bl	8008c40 <vPortExitCritical>
				return pdPASS;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e098      	b.n	8006d4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d112      	bne.n	8006c44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	617b      	str	r3, [r7, #20]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c3c:	f002 f800 	bl	8008c40 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e082      	b.n	8006d4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f824 	bl	8007c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c54:	2301      	movs	r3, #1
 8006c56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c58:	f001 fff2 	bl	8008c40 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c5c:	f000 fd7e 	bl	800775c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c60:	f001 ffbe 	bl	8008be0 <vPortEnterCritical>
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d103      	bne.n	8006c7a <xQueueSemaphoreTake+0x142>
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d103      	bne.n	8006c90 <xQueueSemaphoreTake+0x158>
 8006c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c90:	f001 ffd6 	bl	8008c40 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c94:	463a      	mov	r2, r7
 8006c96:	f107 030c 	add.w	r3, r7, #12
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f813 	bl	8007cc8 <xTaskCheckForTimeOut>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d132      	bne.n	8006d0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006caa:	f000 f9f4 	bl	8007096 <prvIsQueueEmpty>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d026      	beq.n	8006d02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006cbc:	f001 ff90 	bl	8008be0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f001 f969 	bl	8007f9c <xTaskPriorityInherit>
 8006cca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006ccc:	f001 ffb8 	bl	8008c40 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd2:	3324      	adds	r3, #36	@ 0x24
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 ff29 	bl	8007b30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ce0:	f000 f987 	bl	8006ff2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ce4:	f000 fd48 	bl	8007778 <xTaskResumeAll>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f47f af67 	bne.w	8006bbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006cf0:	4b18      	ldr	r3, [pc, #96]	@ (8006d54 <xQueueSemaphoreTake+0x21c>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	e75d      	b.n	8006bbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d04:	f000 f975 	bl	8006ff2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d08:	f000 fd36 	bl	8007778 <xTaskResumeAll>
 8006d0c:	e757      	b.n	8006bbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d10:	f000 f96f 	bl	8006ff2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d14:	f000 fd30 	bl	8007778 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d1a:	f000 f9bc 	bl	8007096 <prvIsQueueEmpty>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f43f af4c 	beq.w	8006bbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00d      	beq.n	8006d48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006d2c:	f001 ff58 	bl	8008be0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d32:	f000 f8b7 	bl	8006ea4 <prvGetDisinheritPriorityAfterTimeout>
 8006d36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 fa04 	bl	800814c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d44:	f001 ff7c 	bl	8008c40 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3738      	adds	r7, #56	@ 0x38
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08e      	sub	sp, #56	@ 0x38
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	623b      	str	r3, [r7, #32]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <xQueueReceiveFromISR+0x3c>
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <xQueueReceiveFromISR+0x40>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <xQueueReceiveFromISR+0x42>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	61fb      	str	r3, [r7, #28]
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	e7fd      	b.n	8006db2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006db6:	f001 ffdb 	bl	8008d70 <vPortValidateInterruptPriority>
	__asm volatile
 8006dba:	f3ef 8211 	mrs	r2, BASEPRI
 8006dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	61ba      	str	r2, [r7, #24]
 8006dd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006dd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d02f      	beq.n	8006e42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006df0:	f000 f8d9 	bl	8006fa6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	1e5a      	subs	r2, r3, #1
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d112      	bne.n	8006e2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	3310      	adds	r3, #16
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fede 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00e      	beq.n	8006e3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e007      	b.n	8006e3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e30:	3301      	adds	r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	b25a      	sxtb	r2, r3
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e40:	e001      	b.n	8006e46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f383 8811 	msr	BASEPRI, r3
}
 8006e50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3738      	adds	r7, #56	@ 0x38
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <vQueueDelete+0x2a>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60bb      	str	r3, [r7, #8]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f95c 	bl	8007144 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f002 f878 	bl	8008f8c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e9c:	bf00      	nop
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d006      	beq.n	8006ec2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	e001      	b.n	8006ec6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
	}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10d      	bne.n	8006f0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d14d      	bne.n	8006f94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 f8b5 	bl	800806c <xTaskPriorityDisinherit>
 8006f02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]
 8006f0a:	e043      	b.n	8006f94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d119      	bne.n	8006f46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6858      	ldr	r0, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	f003 fbd2 	bl	800a6c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	441a      	add	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d32b      	bcc.n	8006f94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	e026      	b.n	8006f94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68d8      	ldr	r0, [r3, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	f003 fbb8 	bl	800a6c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	425b      	negs	r3, r3
 8006f60:	441a      	add	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d207      	bcs.n	8006f82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	425b      	negs	r3, r3
 8006f7c:	441a      	add	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d105      	bne.n	8006f94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f9c:	697b      	ldr	r3, [r7, #20]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d018      	beq.n	8006fea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d303      	bcc.n	8006fda <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68d9      	ldr	r1, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6838      	ldr	r0, [r7, #0]
 8006fe6:	f003 fb6e 	bl	800a6c6 <memcpy>
	}
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ffa:	f001 fdf1 	bl	8008be0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007004:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007006:	e011      	b.n	800702c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d012      	beq.n	8007036 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3324      	adds	r3, #36	@ 0x24
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fddd 	bl	8007bd4 <xTaskRemoveFromEventList>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007020:	f000 feb6 	bl	8007d90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	3b01      	subs	r3, #1
 8007028:	b2db      	uxtb	r3, r3
 800702a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800702c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007030:	2b00      	cmp	r3, #0
 8007032:	dce9      	bgt.n	8007008 <prvUnlockQueue+0x16>
 8007034:	e000      	b.n	8007038 <prvUnlockQueue+0x46>
					break;
 8007036:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	22ff      	movs	r2, #255	@ 0xff
 800703c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007040:	f001 fdfe 	bl	8008c40 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007044:	f001 fdcc 	bl	8008be0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800704e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007050:	e011      	b.n	8007076 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d012      	beq.n	8007080 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3310      	adds	r3, #16
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fdb8 	bl	8007bd4 <xTaskRemoveFromEventList>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800706a:	f000 fe91 	bl	8007d90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	3b01      	subs	r3, #1
 8007072:	b2db      	uxtb	r3, r3
 8007074:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	dce9      	bgt.n	8007052 <prvUnlockQueue+0x60>
 800707e:	e000      	b.n	8007082 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007080:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	22ff      	movs	r2, #255	@ 0xff
 8007086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800708a:	f001 fdd9 	bl	8008c40 <vPortExitCritical>
}
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800709e:	f001 fd9f 	bl	8008be0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e001      	b.n	80070b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070b4:	f001 fdc4 	bl	8008c40 <vPortExitCritical>

	return xReturn;
 80070b8:	68fb      	ldr	r3, [r7, #12]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ca:	f001 fd89 	bl	8008be0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d102      	bne.n	80070e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e001      	b.n	80070e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070e4:	f001 fdac 	bl	8008c40 <vPortExitCritical>

	return xReturn;
 80070e8:	68fb      	ldr	r3, [r7, #12]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	e014      	b.n	800712e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007104:	4a0e      	ldr	r2, [pc, #56]	@ (8007140 <vQueueAddToRegistry+0x4c>)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007110:	490b      	ldr	r1, [pc, #44]	@ (8007140 <vQueueAddToRegistry+0x4c>)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800711a:	4a09      	ldr	r2, [pc, #36]	@ (8007140 <vQueueAddToRegistry+0x4c>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4413      	add	r3, r2
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007126:	e006      	b.n	8007136 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b07      	cmp	r3, #7
 8007132:	d9e7      	bls.n	8007104 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	20000b80 	.word	0x20000b80

08007144 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e016      	b.n	8007180 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007152:	4a10      	ldr	r2, [pc, #64]	@ (8007194 <vQueueUnregisterQueue+0x50>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4413      	add	r3, r2
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d10b      	bne.n	800717a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007162:	4a0c      	ldr	r2, [pc, #48]	@ (8007194 <vQueueUnregisterQueue+0x50>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2100      	movs	r1, #0
 8007168:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800716c:	4a09      	ldr	r2, [pc, #36]	@ (8007194 <vQueueUnregisterQueue+0x50>)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4413      	add	r3, r2
 8007174:	2200      	movs	r2, #0
 8007176:	605a      	str	r2, [r3, #4]
				break;
 8007178:	e006      	b.n	8007188 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b07      	cmp	r3, #7
 8007184:	d9e5      	bls.n	8007152 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000b80 	.word	0x20000b80

08007198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071a8:	f001 fd1a 	bl	8008be0 <vPortEnterCritical>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071b2:	b25b      	sxtb	r3, r3
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d103      	bne.n	80071c2 <vQueueWaitForMessageRestricted+0x2a>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071c8:	b25b      	sxtb	r3, r3
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d103      	bne.n	80071d8 <vQueueWaitForMessageRestricted+0x40>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071d8:	f001 fd32 	bl	8008c40 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	3324      	adds	r3, #36	@ 0x24
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fcc5 	bl	8007b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071f2:	6978      	ldr	r0, [r7, #20]
 80071f4:	f7ff fefd 	bl	8006ff2 <prvUnlockQueue>
	}
 80071f8:	bf00      	nop
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08e      	sub	sp, #56	@ 0x38
 8007204:	af04      	add	r7, sp, #16
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800720e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	623b      	str	r3, [r7, #32]
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	e7fd      	b.n	8007228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800722c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10b      	bne.n	800724a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	61fb      	str	r3, [r7, #28]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800724a:	23a8      	movs	r3, #168	@ 0xa8
 800724c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2ba8      	cmp	r3, #168	@ 0xa8
 8007252:	d00b      	beq.n	800726c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	61bb      	str	r3, [r7, #24]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800726c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01e      	beq.n	80072b2 <xTaskCreateStatic+0xb2>
 8007274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01b      	beq.n	80072b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800727a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007282:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	2202      	movs	r2, #2
 8007288:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800728c:	2300      	movs	r3, #0
 800728e:	9303      	str	r3, [sp, #12]
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	9302      	str	r3, [sp, #8]
 8007294:	f107 0314 	add.w	r3, r7, #20
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f851 	bl	800734c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072ac:	f000 f8f6 	bl	800749c <prvAddNewTaskToReadyList>
 80072b0:	e001      	b.n	80072b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072b6:	697b      	ldr	r3, [r7, #20]
	}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3728      	adds	r7, #40	@ 0x28
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08c      	sub	sp, #48	@ 0x30
 80072c4:	af04      	add	r7, sp, #16
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 fd8b 	bl	8008df0 <pvPortMalloc>
 80072da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00e      	beq.n	8007300 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072e2:	20a8      	movs	r0, #168	@ 0xa8
 80072e4:	f001 fd84 	bl	8008df0 <pvPortMalloc>
 80072e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80072f6:	e005      	b.n	8007304 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072f8:	6978      	ldr	r0, [r7, #20]
 80072fa:	f001 fe47 	bl	8008f8c <vPortFree>
 80072fe:	e001      	b.n	8007304 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d017      	beq.n	800733a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	2300      	movs	r3, #0
 8007316:	9303      	str	r3, [sp, #12]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	9302      	str	r3, [sp, #8]
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f80f 	bl	800734c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800732e:	69f8      	ldr	r0, [r7, #28]
 8007330:	f000 f8b4 	bl	800749c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007334:	2301      	movs	r3, #1
 8007336:	61bb      	str	r3, [r7, #24]
 8007338:	e002      	b.n	8007340 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800733a:	f04f 33ff 	mov.w	r3, #4294967295
 800733e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007340:	69bb      	ldr	r3, [r7, #24]
	}
 8007342:	4618      	mov	r0, r3
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	461a      	mov	r2, r3
 8007364:	21a5      	movs	r1, #165	@ 0xa5
 8007366:	f003 f8b9 	bl	800a4dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007374:	3b01      	subs	r3, #1
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f023 0307 	bic.w	r3, r3, #7
 8007382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	617b      	str	r3, [r7, #20]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01f      	beq.n	80073ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	e012      	b.n	80073d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	4413      	add	r3, r2
 80073b8:	7819      	ldrb	r1, [r3, #0]
 80073ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	4413      	add	r3, r2
 80073c0:	3334      	adds	r3, #52	@ 0x34
 80073c2:	460a      	mov	r2, r1
 80073c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d006      	beq.n	80073e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	3301      	adds	r3, #1
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d9e9      	bls.n	80073b2 <prvInitialiseNewTask+0x66>
 80073de:	e000      	b.n	80073e2 <prvInitialiseNewTask+0x96>
			{
				break;
 80073e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073ea:	e003      	b.n	80073f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	2b37      	cmp	r3, #55	@ 0x37
 80073f8:	d901      	bls.n	80073fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073fa:	2337      	movs	r3, #55	@ 0x37
 80073fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007402:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007408:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	2200      	movs	r2, #0
 800740e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	3304      	adds	r3, #4
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fe38 	bl	800608a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	3318      	adds	r3, #24
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fe33 	bl	800608a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007428:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007438:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	2200      	movs	r2, #0
 800743e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	2200      	movs	r2, #0
 8007446:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	3354      	adds	r3, #84	@ 0x54
 800744e:	224c      	movs	r2, #76	@ 0x4c
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f003 f842 	bl	800a4dc <memset>
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	4a0d      	ldr	r2, [pc, #52]	@ (8007490 <prvInitialiseNewTask+0x144>)
 800745c:	659a      	str	r2, [r3, #88]	@ 0x58
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	4a0c      	ldr	r2, [pc, #48]	@ (8007494 <prvInitialiseNewTask+0x148>)
 8007462:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	4a0c      	ldr	r2, [pc, #48]	@ (8007498 <prvInitialiseNewTask+0x14c>)
 8007468:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	68f9      	ldr	r1, [r7, #12]
 800746e:	69b8      	ldr	r0, [r7, #24]
 8007470:	f001 fab0 	bl	80089d4 <pxPortInitialiseStack>
 8007474:	4602      	mov	r2, r0
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007486:	bf00      	nop
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20001e14 	.word	0x20001e14
 8007494:	20001e7c 	.word	0x20001e7c
 8007498:	20001ee4 	.word	0x20001ee4

0800749c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074a4:	f001 fb9c 	bl	8008be0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007560 <prvAddNewTaskToReadyList+0xc4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007560 <prvAddNewTaskToReadyList+0xc4>)
 80074b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007564 <prvAddNewTaskToReadyList+0xc8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007564 <prvAddNewTaskToReadyList+0xc8>)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074c0:	4b27      	ldr	r3, [pc, #156]	@ (8007560 <prvAddNewTaskToReadyList+0xc4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d110      	bne.n	80074ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074c8:	f000 fc86 	bl	8007dd8 <prvInitialiseTaskLists>
 80074cc:	e00d      	b.n	80074ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074ce:	4b26      	ldr	r3, [pc, #152]	@ (8007568 <prvAddNewTaskToReadyList+0xcc>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074d6:	4b23      	ldr	r3, [pc, #140]	@ (8007564 <prvAddNewTaskToReadyList+0xc8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d802      	bhi.n	80074ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007564 <prvAddNewTaskToReadyList+0xc8>)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ea:	4b20      	ldr	r3, [pc, #128]	@ (800756c <prvAddNewTaskToReadyList+0xd0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3301      	adds	r3, #1
 80074f0:	4a1e      	ldr	r2, [pc, #120]	@ (800756c <prvAddNewTaskToReadyList+0xd0>)
 80074f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074f4:	4b1d      	ldr	r3, [pc, #116]	@ (800756c <prvAddNewTaskToReadyList+0xd0>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007500:	4b1b      	ldr	r3, [pc, #108]	@ (8007570 <prvAddNewTaskToReadyList+0xd4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d903      	bls.n	8007510 <prvAddNewTaskToReadyList+0x74>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	4a18      	ldr	r2, [pc, #96]	@ (8007570 <prvAddNewTaskToReadyList+0xd4>)
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4a15      	ldr	r2, [pc, #84]	@ (8007574 <prvAddNewTaskToReadyList+0xd8>)
 800751e:	441a      	add	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7fe fdbb 	bl	80060a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800752c:	f001 fb88 	bl	8008c40 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007530:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <prvAddNewTaskToReadyList+0xcc>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00e      	beq.n	8007556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007538:	4b0a      	ldr	r3, [pc, #40]	@ (8007564 <prvAddNewTaskToReadyList+0xc8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007542:	429a      	cmp	r2, r3
 8007544:	d207      	bcs.n	8007556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007546:	4b0c      	ldr	r3, [pc, #48]	@ (8007578 <prvAddNewTaskToReadyList+0xdc>)
 8007548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20001094 	.word	0x20001094
 8007564:	20000bc0 	.word	0x20000bc0
 8007568:	200010a0 	.word	0x200010a0
 800756c:	200010b0 	.word	0x200010b0
 8007570:	2000109c 	.word	0x2000109c
 8007574:	20000bc4 	.word	0x20000bc4
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	@ 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10b      	bne.n	80075a8 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	617b      	str	r3, [r7, #20]
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	e7fd      	b.n	80075a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	613b      	str	r3, [r7, #16]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80075c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007670 <vTaskDelayUntil+0xf4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <vTaskDelayUntil+0x6a>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	60fb      	str	r3, [r7, #12]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80075e6:	f000 f8b9 	bl	800775c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80075ea:	4b22      	ldr	r3, [pc, #136]	@ (8007674 <vTaskDelayUntil+0xf8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	4413      	add	r3, r2
 80075f8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6a3a      	ldr	r2, [r7, #32]
 8007600:	429a      	cmp	r2, r3
 8007602:	d20b      	bcs.n	800761c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	429a      	cmp	r2, r3
 800760c:	d211      	bcs.n	8007632 <vTaskDelayUntil+0xb6>
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	429a      	cmp	r2, r3
 8007614:	d90d      	bls.n	8007632 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007616:	2301      	movs	r3, #1
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
 800761a:	e00a      	b.n	8007632 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	429a      	cmp	r2, r3
 8007624:	d303      	bcc.n	800762e <vTaskDelayUntil+0xb2>
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	429a      	cmp	r2, r3
 800762c:	d901      	bls.n	8007632 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d006      	beq.n	800764c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fe18 	bl	800827c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800764c:	f000 f894 	bl	8007778 <xTaskResumeAll>
 8007650:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007658:	4b07      	ldr	r3, [pc, #28]	@ (8007678 <vTaskDelayUntil+0xfc>)
 800765a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007668:	bf00      	nop
 800766a:	3728      	adds	r7, #40	@ 0x28
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200010bc 	.word	0x200010bc
 8007674:	20001098 	.word	0x20001098
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	@ 0x28
 8007680:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800768a:	463a      	mov	r2, r7
 800768c:	1d39      	adds	r1, r7, #4
 800768e:	f107 0308 	add.w	r3, r7, #8
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fca8 	bl	8005fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	9202      	str	r2, [sp, #8]
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	2300      	movs	r3, #0
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	2300      	movs	r3, #0
 80076a8:	460a      	mov	r2, r1
 80076aa:	4924      	ldr	r1, [pc, #144]	@ (800773c <vTaskStartScheduler+0xc0>)
 80076ac:	4824      	ldr	r0, [pc, #144]	@ (8007740 <vTaskStartScheduler+0xc4>)
 80076ae:	f7ff fda7 	bl	8007200 <xTaskCreateStatic>
 80076b2:	4603      	mov	r3, r0
 80076b4:	4a23      	ldr	r2, [pc, #140]	@ (8007744 <vTaskStartScheduler+0xc8>)
 80076b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076b8:	4b22      	ldr	r3, [pc, #136]	@ (8007744 <vTaskStartScheduler+0xc8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076c0:	2301      	movs	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e001      	b.n	80076ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d102      	bne.n	80076d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076d0:	f000 fe28 	bl	8008324 <xTimerCreateTimerTask>
 80076d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d11b      	bne.n	8007714 <vTaskStartScheduler+0x98>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	613b      	str	r3, [r7, #16]
}
 80076ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076f0:	4b15      	ldr	r3, [pc, #84]	@ (8007748 <vTaskStartScheduler+0xcc>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3354      	adds	r3, #84	@ 0x54
 80076f6:	4a15      	ldr	r2, [pc, #84]	@ (800774c <vTaskStartScheduler+0xd0>)
 80076f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076fa:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <vTaskStartScheduler+0xd4>)
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007700:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007702:	4b14      	ldr	r3, [pc, #80]	@ (8007754 <vTaskStartScheduler+0xd8>)
 8007704:	2201      	movs	r2, #1
 8007706:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007708:	4b13      	ldr	r3, [pc, #76]	@ (8007758 <vTaskStartScheduler+0xdc>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800770e:	f001 f9e3 	bl	8008ad8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007712:	e00f      	b.n	8007734 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d10b      	bne.n	8007734 <vTaskStartScheduler+0xb8>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <vTaskStartScheduler+0xb4>
}
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	0800dc64 	.word	0x0800dc64
 8007740:	08007da9 	.word	0x08007da9
 8007744:	200010b8 	.word	0x200010b8
 8007748:	20000bc0 	.word	0x20000bc0
 800774c:	20000024 	.word	0x20000024
 8007750:	200010b4 	.word	0x200010b4
 8007754:	200010a0 	.word	0x200010a0
 8007758:	20001098 	.word	0x20001098

0800775c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007760:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <vTaskSuspendAll+0x18>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	4a03      	ldr	r2, [pc, #12]	@ (8007774 <vTaskSuspendAll+0x18>)
 8007768:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800776a:	bf00      	nop
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200010bc 	.word	0x200010bc

08007778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007786:	4b42      	ldr	r3, [pc, #264]	@ (8007890 <xTaskResumeAll+0x118>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	603b      	str	r3, [r7, #0]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077a6:	f001 fa1b 	bl	8008be0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077aa:	4b39      	ldr	r3, [pc, #228]	@ (8007890 <xTaskResumeAll+0x118>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	4a37      	ldr	r2, [pc, #220]	@ (8007890 <xTaskResumeAll+0x118>)
 80077b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077b4:	4b36      	ldr	r3, [pc, #216]	@ (8007890 <xTaskResumeAll+0x118>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d162      	bne.n	8007882 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077bc:	4b35      	ldr	r3, [pc, #212]	@ (8007894 <xTaskResumeAll+0x11c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d05e      	beq.n	8007882 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077c4:	e02f      	b.n	8007826 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c6:	4b34      	ldr	r3, [pc, #208]	@ (8007898 <xTaskResumeAll+0x120>)
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3318      	adds	r3, #24
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fcc0 	bl	8006158 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3304      	adds	r3, #4
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fcbb 	bl	8006158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e6:	4b2d      	ldr	r3, [pc, #180]	@ (800789c <xTaskResumeAll+0x124>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d903      	bls.n	80077f6 <xTaskResumeAll+0x7e>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f2:	4a2a      	ldr	r2, [pc, #168]	@ (800789c <xTaskResumeAll+0x124>)
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4a27      	ldr	r2, [pc, #156]	@ (80078a0 <xTaskResumeAll+0x128>)
 8007804:	441a      	add	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f7fe fc48 	bl	80060a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007816:	4b23      	ldr	r3, [pc, #140]	@ (80078a4 <xTaskResumeAll+0x12c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	429a      	cmp	r2, r3
 800781e:	d302      	bcc.n	8007826 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007820:	4b21      	ldr	r3, [pc, #132]	@ (80078a8 <xTaskResumeAll+0x130>)
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007826:	4b1c      	ldr	r3, [pc, #112]	@ (8007898 <xTaskResumeAll+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1cb      	bne.n	80077c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007834:	f000 fb74 	bl	8007f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007838:	4b1c      	ldr	r3, [pc, #112]	@ (80078ac <xTaskResumeAll+0x134>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d010      	beq.n	8007866 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007844:	f000 f856 	bl	80078f4 <xTaskIncrementTick>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <xTaskResumeAll+0x130>)
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3b01      	subs	r3, #1
 8007858:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f1      	bne.n	8007844 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007860:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <xTaskResumeAll+0x134>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007866:	4b10      	ldr	r3, [pc, #64]	@ (80078a8 <xTaskResumeAll+0x130>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800786e:	2301      	movs	r3, #1
 8007870:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007872:	4b0f      	ldr	r3, [pc, #60]	@ (80078b0 <xTaskResumeAll+0x138>)
 8007874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007882:	f001 f9dd 	bl	8008c40 <vPortExitCritical>

	return xAlreadyYielded;
 8007886:	68bb      	ldr	r3, [r7, #8]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	200010bc 	.word	0x200010bc
 8007894:	20001094 	.word	0x20001094
 8007898:	20001054 	.word	0x20001054
 800789c:	2000109c 	.word	0x2000109c
 80078a0:	20000bc4 	.word	0x20000bc4
 80078a4:	20000bc0 	.word	0x20000bc0
 80078a8:	200010a8 	.word	0x200010a8
 80078ac:	200010a4 	.word	0x200010a4
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078ba:	4b04      	ldr	r3, [pc, #16]	@ (80078cc <xTaskGetTickCount+0x18>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078c0:	687b      	ldr	r3, [r7, #4]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr
 80078cc:	20001098 	.word	0x20001098

080078d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078d6:	f001 fa4b 	bl	8008d70 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80078da:	2300      	movs	r3, #0
 80078dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80078de:	4b04      	ldr	r3, [pc, #16]	@ (80078f0 <xTaskGetTickCountFromISR+0x20>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078e4:	683b      	ldr	r3, [r7, #0]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20001098 	.word	0x20001098

080078f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fe:	4b4f      	ldr	r3, [pc, #316]	@ (8007a3c <xTaskIncrementTick+0x148>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 8090 	bne.w	8007a28 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007908:	4b4d      	ldr	r3, [pc, #308]	@ (8007a40 <xTaskIncrementTick+0x14c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007910:	4a4b      	ldr	r2, [pc, #300]	@ (8007a40 <xTaskIncrementTick+0x14c>)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d121      	bne.n	8007960 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800791c:	4b49      	ldr	r3, [pc, #292]	@ (8007a44 <xTaskIncrementTick+0x150>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	e7fd      	b.n	800793a <xTaskIncrementTick+0x46>
 800793e:	4b41      	ldr	r3, [pc, #260]	@ (8007a44 <xTaskIncrementTick+0x150>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	4b40      	ldr	r3, [pc, #256]	@ (8007a48 <xTaskIncrementTick+0x154>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a3e      	ldr	r2, [pc, #248]	@ (8007a44 <xTaskIncrementTick+0x150>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	4a3e      	ldr	r2, [pc, #248]	@ (8007a48 <xTaskIncrementTick+0x154>)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	4b3e      	ldr	r3, [pc, #248]	@ (8007a4c <xTaskIncrementTick+0x158>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3301      	adds	r3, #1
 8007958:	4a3c      	ldr	r2, [pc, #240]	@ (8007a4c <xTaskIncrementTick+0x158>)
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	f000 fae0 	bl	8007f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007960:	4b3b      	ldr	r3, [pc, #236]	@ (8007a50 <xTaskIncrementTick+0x15c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	429a      	cmp	r2, r3
 8007968:	d349      	bcc.n	80079fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800796a:	4b36      	ldr	r3, [pc, #216]	@ (8007a44 <xTaskIncrementTick+0x150>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007974:	4b36      	ldr	r3, [pc, #216]	@ (8007a50 <xTaskIncrementTick+0x15c>)
 8007976:	f04f 32ff 	mov.w	r2, #4294967295
 800797a:	601a      	str	r2, [r3, #0]
					break;
 800797c:	e03f      	b.n	80079fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797e:	4b31      	ldr	r3, [pc, #196]	@ (8007a44 <xTaskIncrementTick+0x150>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	429a      	cmp	r2, r3
 8007994:	d203      	bcs.n	800799e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007996:	4a2e      	ldr	r2, [pc, #184]	@ (8007a50 <xTaskIncrementTick+0x15c>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800799c:	e02f      	b.n	80079fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fbd8 	bl	8006158 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	3318      	adds	r3, #24
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fbcf 	bl	8006158 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079be:	4b25      	ldr	r3, [pc, #148]	@ (8007a54 <xTaskIncrementTick+0x160>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d903      	bls.n	80079ce <xTaskIncrementTick+0xda>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	4a22      	ldr	r2, [pc, #136]	@ (8007a54 <xTaskIncrementTick+0x160>)
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4a1f      	ldr	r2, [pc, #124]	@ (8007a58 <xTaskIncrementTick+0x164>)
 80079dc:	441a      	add	r2, r3
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	3304      	adds	r3, #4
 80079e2:	4619      	mov	r1, r3
 80079e4:	4610      	mov	r0, r2
 80079e6:	f7fe fb5c 	bl	80060a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ee:	4b1b      	ldr	r3, [pc, #108]	@ (8007a5c <xTaskIncrementTick+0x168>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d3b8      	bcc.n	800796a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079fc:	e7b5      	b.n	800796a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079fe:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <xTaskIncrementTick+0x168>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a04:	4914      	ldr	r1, [pc, #80]	@ (8007a58 <xTaskIncrementTick+0x164>)
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d901      	bls.n	8007a1a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a1a:	4b11      	ldr	r3, [pc, #68]	@ (8007a60 <xTaskIncrementTick+0x16c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e004      	b.n	8007a32 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a28:	4b0e      	ldr	r3, [pc, #56]	@ (8007a64 <xTaskIncrementTick+0x170>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8007a64 <xTaskIncrementTick+0x170>)
 8007a30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a32:	697b      	ldr	r3, [r7, #20]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	200010bc 	.word	0x200010bc
 8007a40:	20001098 	.word	0x20001098
 8007a44:	2000104c 	.word	0x2000104c
 8007a48:	20001050 	.word	0x20001050
 8007a4c:	200010ac 	.word	0x200010ac
 8007a50:	200010b4 	.word	0x200010b4
 8007a54:	2000109c 	.word	0x2000109c
 8007a58:	20000bc4 	.word	0x20000bc4
 8007a5c:	20000bc0 	.word	0x20000bc0
 8007a60:	200010a8 	.word	0x200010a8
 8007a64:	200010a4 	.word	0x200010a4

08007a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b18 <vTaskSwitchContext+0xb0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a76:	4b29      	ldr	r3, [pc, #164]	@ (8007b1c <vTaskSwitchContext+0xb4>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a7c:	e047      	b.n	8007b0e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007a7e:	4b27      	ldr	r3, [pc, #156]	@ (8007b1c <vTaskSwitchContext+0xb4>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a84:	4b26      	ldr	r3, [pc, #152]	@ (8007b20 <vTaskSwitchContext+0xb8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	e011      	b.n	8007ab0 <vTaskSwitchContext+0x48>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <vTaskSwitchContext+0x42>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	607b      	str	r3, [r7, #4]
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	e7fd      	b.n	8007aa6 <vTaskSwitchContext+0x3e>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	491c      	ldr	r1, [pc, #112]	@ (8007b24 <vTaskSwitchContext+0xbc>)
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	440b      	add	r3, r1
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0e3      	beq.n	8007a8c <vTaskSwitchContext+0x24>
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4a15      	ldr	r2, [pc, #84]	@ (8007b24 <vTaskSwitchContext+0xbc>)
 8007ad0:	4413      	add	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d104      	bne.n	8007af4 <vTaskSwitchContext+0x8c>
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	605a      	str	r2, [r3, #4]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	4a0b      	ldr	r2, [pc, #44]	@ (8007b28 <vTaskSwitchContext+0xc0>)
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	4a08      	ldr	r2, [pc, #32]	@ (8007b20 <vTaskSwitchContext+0xb8>)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b04:	4b08      	ldr	r3, [pc, #32]	@ (8007b28 <vTaskSwitchContext+0xc0>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3354      	adds	r3, #84	@ 0x54
 8007b0a:	4a08      	ldr	r2, [pc, #32]	@ (8007b2c <vTaskSwitchContext+0xc4>)
 8007b0c:	6013      	str	r3, [r2, #0]
}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr
 8007b18:	200010bc 	.word	0x200010bc
 8007b1c:	200010a8 	.word	0x200010a8
 8007b20:	2000109c 	.word	0x2000109c
 8007b24:	20000bc4 	.word	0x20000bc4
 8007b28:	20000bc0 	.word	0x20000bc0
 8007b2c:	20000024 	.word	0x20000024

08007b30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10b      	bne.n	8007b58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60fb      	str	r3, [r7, #12]
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	e7fd      	b.n	8007b54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b58:	4b07      	ldr	r3, [pc, #28]	@ (8007b78 <vTaskPlaceOnEventList+0x48>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3318      	adds	r3, #24
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fe fac1 	bl	80060e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b66:	2101      	movs	r1, #1
 8007b68:	6838      	ldr	r0, [r7, #0]
 8007b6a:	f000 fb87 	bl	800827c <prvAddCurrentTaskToDelayedList>
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20000bc0 	.word	0x20000bc0

08007b7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10b      	bne.n	8007ba6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	617b      	str	r3, [r7, #20]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3318      	adds	r3, #24
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7fe fa77 	bl	80060a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007bba:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	68b8      	ldr	r0, [r7, #8]
 8007bc4:	f000 fb5a 	bl	800827c <prvAddCurrentTaskToDelayedList>
	}
 8007bc8:	bf00      	nop
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20000bc0 	.word	0x20000bc0

08007bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10b      	bne.n	8007c02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3318      	adds	r3, #24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe faa6 	bl	8006158 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c84 <xTaskRemoveFromEventList+0xb0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d11d      	bne.n	8007c50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fa9d 	bl	8006158 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c22:	4b19      	ldr	r3, [pc, #100]	@ (8007c88 <xTaskRemoveFromEventList+0xb4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d903      	bls.n	8007c32 <xTaskRemoveFromEventList+0x5e>
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	4a16      	ldr	r2, [pc, #88]	@ (8007c88 <xTaskRemoveFromEventList+0xb4>)
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4a13      	ldr	r2, [pc, #76]	@ (8007c8c <xTaskRemoveFromEventList+0xb8>)
 8007c40:	441a      	add	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f7fe fa2a 	bl	80060a2 <vListInsertEnd>
 8007c4e:	e005      	b.n	8007c5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	3318      	adds	r3, #24
 8007c54:	4619      	mov	r1, r3
 8007c56:	480e      	ldr	r0, [pc, #56]	@ (8007c90 <xTaskRemoveFromEventList+0xbc>)
 8007c58:	f7fe fa23 	bl	80060a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c60:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <xTaskRemoveFromEventList+0xc0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d905      	bls.n	8007c76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <xTaskRemoveFromEventList+0xc4>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e001      	b.n	8007c7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c7a:	697b      	ldr	r3, [r7, #20]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	200010bc 	.word	0x200010bc
 8007c88:	2000109c 	.word	0x2000109c
 8007c8c:	20000bc4 	.word	0x20000bc4
 8007c90:	20001054 	.word	0x20001054
 8007c94:	20000bc0 	.word	0x20000bc0
 8007c98:	200010a8 	.word	0x200010a8

08007c9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ca4:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <vTaskInternalSetTimeOutState+0x24>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cac:	4b05      	ldr	r3, [pc, #20]	@ (8007cc4 <vTaskInternalSetTimeOutState+0x28>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	605a      	str	r2, [r3, #4]
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	200010ac 	.word	0x200010ac
 8007cc4:	20001098 	.word	0x20001098

08007cc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10b      	bne.n	8007cf0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	613b      	str	r3, [r7, #16]
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	e7fd      	b.n	8007cec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d0e:	f000 ff67 	bl	8008be0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d12:	4b1d      	ldr	r3, [pc, #116]	@ (8007d88 <xTaskCheckForTimeOut+0xc0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d102      	bne.n	8007d32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	e023      	b.n	8007d7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4b15      	ldr	r3, [pc, #84]	@ (8007d8c <xTaskCheckForTimeOut+0xc4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d007      	beq.n	8007d4e <xTaskCheckForTimeOut+0x86>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d302      	bcc.n	8007d4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	61fb      	str	r3, [r7, #28]
 8007d4c:	e015      	b.n	8007d7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d20b      	bcs.n	8007d70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff99 	bl	8007c9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61fb      	str	r3, [r7, #28]
 8007d6e:	e004      	b.n	8007d7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d76:	2301      	movs	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d7a:	f000 ff61 	bl	8008c40 <vPortExitCritical>

	return xReturn;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20001098 	.word	0x20001098
 8007d8c:	200010ac 	.word	0x200010ac

08007d90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d94:	4b03      	ldr	r3, [pc, #12]	@ (8007da4 <vTaskMissedYield+0x14>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	601a      	str	r2, [r3, #0]
}
 8007d9a:	bf00      	nop
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	200010a8 	.word	0x200010a8

08007da8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007db0:	f000 f852 	bl	8007e58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007db4:	4b06      	ldr	r3, [pc, #24]	@ (8007dd0 <prvIdleTask+0x28>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d9f9      	bls.n	8007db0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <prvIdleTask+0x2c>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dcc:	e7f0      	b.n	8007db0 <prvIdleTask+0x8>
 8007dce:	bf00      	nop
 8007dd0:	20000bc4 	.word	0x20000bc4
 8007dd4:	e000ed04 	.word	0xe000ed04

08007dd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dde:	2300      	movs	r3, #0
 8007de0:	607b      	str	r3, [r7, #4]
 8007de2:	e00c      	b.n	8007dfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4a12      	ldr	r2, [pc, #72]	@ (8007e38 <prvInitialiseTaskLists+0x60>)
 8007df0:	4413      	add	r3, r2
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe f92a 	bl	800604c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b37      	cmp	r3, #55	@ 0x37
 8007e02:	d9ef      	bls.n	8007de4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e04:	480d      	ldr	r0, [pc, #52]	@ (8007e3c <prvInitialiseTaskLists+0x64>)
 8007e06:	f7fe f921 	bl	800604c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e0a:	480d      	ldr	r0, [pc, #52]	@ (8007e40 <prvInitialiseTaskLists+0x68>)
 8007e0c:	f7fe f91e 	bl	800604c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e10:	480c      	ldr	r0, [pc, #48]	@ (8007e44 <prvInitialiseTaskLists+0x6c>)
 8007e12:	f7fe f91b 	bl	800604c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e16:	480c      	ldr	r0, [pc, #48]	@ (8007e48 <prvInitialiseTaskLists+0x70>)
 8007e18:	f7fe f918 	bl	800604c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e1c:	480b      	ldr	r0, [pc, #44]	@ (8007e4c <prvInitialiseTaskLists+0x74>)
 8007e1e:	f7fe f915 	bl	800604c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e22:	4b0b      	ldr	r3, [pc, #44]	@ (8007e50 <prvInitialiseTaskLists+0x78>)
 8007e24:	4a05      	ldr	r2, [pc, #20]	@ (8007e3c <prvInitialiseTaskLists+0x64>)
 8007e26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e28:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <prvInitialiseTaskLists+0x7c>)
 8007e2a:	4a05      	ldr	r2, [pc, #20]	@ (8007e40 <prvInitialiseTaskLists+0x68>)
 8007e2c:	601a      	str	r2, [r3, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000bc4 	.word	0x20000bc4
 8007e3c:	20001024 	.word	0x20001024
 8007e40:	20001038 	.word	0x20001038
 8007e44:	20001054 	.word	0x20001054
 8007e48:	20001068 	.word	0x20001068
 8007e4c:	20001080 	.word	0x20001080
 8007e50:	2000104c 	.word	0x2000104c
 8007e54:	20001050 	.word	0x20001050

08007e58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e5e:	e019      	b.n	8007e94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e60:	f000 febe 	bl	8008be0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e64:	4b10      	ldr	r3, [pc, #64]	@ (8007ea8 <prvCheckTasksWaitingTermination+0x50>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe f971 	bl	8006158 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e76:	4b0d      	ldr	r3, [pc, #52]	@ (8007eac <prvCheckTasksWaitingTermination+0x54>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007eac <prvCheckTasksWaitingTermination+0x54>)
 8007e7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <prvCheckTasksWaitingTermination+0x58>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	4a0a      	ldr	r2, [pc, #40]	@ (8007eb0 <prvCheckTasksWaitingTermination+0x58>)
 8007e88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e8a:	f000 fed9 	bl	8008c40 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f810 	bl	8007eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e94:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <prvCheckTasksWaitingTermination+0x58>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e1      	bne.n	8007e60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20001068 	.word	0x20001068
 8007eac:	20001094 	.word	0x20001094
 8007eb0:	2000107c 	.word	0x2000107c

08007eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3354      	adds	r3, #84	@ 0x54
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f002 fb39 	bl	800a538 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d108      	bne.n	8007ee2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 f859 	bl	8008f8c <vPortFree>
				vPortFree( pxTCB );
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f001 f856 	bl	8008f8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ee0:	e019      	b.n	8007f16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d103      	bne.n	8007ef4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f84d 	bl	8008f8c <vPortFree>
	}
 8007ef2:	e010      	b.n	8007f16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d00b      	beq.n	8007f16 <prvDeleteTCB+0x62>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	60fb      	str	r3, [r7, #12]
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	e7fd      	b.n	8007f12 <prvDeleteTCB+0x5e>
	}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f26:	4b0c      	ldr	r3, [pc, #48]	@ (8007f58 <prvResetNextTaskUnblockTime+0x38>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d104      	bne.n	8007f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <prvResetNextTaskUnblockTime+0x3c>)
 8007f32:	f04f 32ff 	mov.w	r2, #4294967295
 8007f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f38:	e008      	b.n	8007f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3a:	4b07      	ldr	r3, [pc, #28]	@ (8007f58 <prvResetNextTaskUnblockTime+0x38>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4a04      	ldr	r2, [pc, #16]	@ (8007f5c <prvResetNextTaskUnblockTime+0x3c>)
 8007f4a:	6013      	str	r3, [r2, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	2000104c 	.word	0x2000104c
 8007f5c:	200010b4 	.word	0x200010b4

08007f60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f66:	4b0b      	ldr	r3, [pc, #44]	@ (8007f94 <xTaskGetSchedulerState+0x34>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	607b      	str	r3, [r7, #4]
 8007f72:	e008      	b.n	8007f86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f74:	4b08      	ldr	r3, [pc, #32]	@ (8007f98 <xTaskGetSchedulerState+0x38>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d102      	bne.n	8007f82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	607b      	str	r3, [r7, #4]
 8007f80:	e001      	b.n	8007f86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f82:	2300      	movs	r3, #0
 8007f84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f86:	687b      	ldr	r3, [r7, #4]
	}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	200010a0 	.word	0x200010a0
 8007f98:	200010bc 	.word	0x200010bc

08007f9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d051      	beq.n	8008056 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8008060 <xTaskPriorityInherit+0xc4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d241      	bcs.n	8008044 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	db06      	blt.n	8007fd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fc8:	4b25      	ldr	r3, [pc, #148]	@ (8008060 <xTaskPriorityInherit+0xc4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6959      	ldr	r1, [r3, #20]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8008064 <xTaskPriorityInherit+0xc8>)
 8007fe8:	4413      	add	r3, r2
 8007fea:	4299      	cmp	r1, r3
 8007fec:	d122      	bne.n	8008034 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe f8b0 	bl	8006158 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ff8:	4b19      	ldr	r3, [pc, #100]	@ (8008060 <xTaskPriorityInherit+0xc4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008006:	4b18      	ldr	r3, [pc, #96]	@ (8008068 <xTaskPriorityInherit+0xcc>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d903      	bls.n	8008016 <xTaskPriorityInherit+0x7a>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008012:	4a15      	ldr	r2, [pc, #84]	@ (8008068 <xTaskPriorityInherit+0xcc>)
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4a10      	ldr	r2, [pc, #64]	@ (8008064 <xTaskPriorityInherit+0xc8>)
 8008024:	441a      	add	r2, r3
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	3304      	adds	r3, #4
 800802a:	4619      	mov	r1, r3
 800802c:	4610      	mov	r0, r2
 800802e:	f7fe f838 	bl	80060a2 <vListInsertEnd>
 8008032:	e004      	b.n	800803e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008034:	4b0a      	ldr	r3, [pc, #40]	@ (8008060 <xTaskPriorityInherit+0xc4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800803e:	2301      	movs	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e008      	b.n	8008056 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008048:	4b05      	ldr	r3, [pc, #20]	@ (8008060 <xTaskPriorityInherit+0xc4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804e:	429a      	cmp	r2, r3
 8008050:	d201      	bcs.n	8008056 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008052:	2301      	movs	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008056:	68fb      	ldr	r3, [r7, #12]
	}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20000bc0 	.word	0x20000bc0
 8008064:	20000bc4 	.word	0x20000bc4
 8008068:	2000109c 	.word	0x2000109c

0800806c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d058      	beq.n	8008134 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008082:	4b2f      	ldr	r3, [pc, #188]	@ (8008140 <xTaskPriorityDisinherit+0xd4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	429a      	cmp	r2, r3
 800808a:	d00b      	beq.n	80080a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60fb      	str	r3, [r7, #12]
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	e7fd      	b.n	80080a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	60bb      	str	r3, [r7, #8]
}
 80080be:	bf00      	nop
 80080c0:	bf00      	nop
 80080c2:	e7fd      	b.n	80080c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	1e5a      	subs	r2, r3, #1
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d02c      	beq.n	8008134 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d128      	bne.n	8008134 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe f836 	bl	8006158 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008104:	4b0f      	ldr	r3, [pc, #60]	@ (8008144 <xTaskPriorityDisinherit+0xd8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d903      	bls.n	8008114 <xTaskPriorityDisinherit+0xa8>
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	4a0c      	ldr	r2, [pc, #48]	@ (8008144 <xTaskPriorityDisinherit+0xd8>)
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4a09      	ldr	r2, [pc, #36]	@ (8008148 <xTaskPriorityDisinherit+0xdc>)
 8008122:	441a      	add	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	4610      	mov	r0, r2
 800812c:	f7fd ffb9 	bl	80060a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008134:	697b      	ldr	r3, [r7, #20]
	}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000bc0 	.word	0x20000bc0
 8008144:	2000109c 	.word	0x2000109c
 8008148:	20000bc4 	.word	0x20000bc4

0800814c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800815a:	2301      	movs	r3, #1
 800815c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d06c      	beq.n	800823e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d902      	bls.n	8008194 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	e002      	b.n	800819a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008198:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d04c      	beq.n	800823e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d147      	bne.n	800823e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081ae:	4b26      	ldr	r3, [pc, #152]	@ (8008248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d10b      	bne.n	80081d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	60bb      	str	r3, [r7, #8]
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db04      	blt.n	80081ee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	6959      	ldr	r1, [r3, #20]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a13      	ldr	r2, [pc, #76]	@ (800824c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081fe:	4413      	add	r3, r2
 8008200:	4299      	cmp	r1, r3
 8008202:	d11c      	bne.n	800823e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	3304      	adds	r3, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f7fd ffa5 	bl	8006158 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008212:	4b0f      	ldr	r3, [pc, #60]	@ (8008250 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d903      	bls.n	8008222 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821e:	4a0c      	ldr	r2, [pc, #48]	@ (8008250 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4a07      	ldr	r2, [pc, #28]	@ (800824c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008230:	441a      	add	r2, r3
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	3304      	adds	r3, #4
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f7fd ff32 	bl	80060a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800823e:	bf00      	nop
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000bc0 	.word	0x20000bc0
 800824c:	20000bc4 	.word	0x20000bc4
 8008250:	2000109c 	.word	0x2000109c

08008254 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008258:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <pvTaskIncrementMutexHeldCount+0x24>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008260:	4b05      	ldr	r3, [pc, #20]	@ (8008278 <pvTaskIncrementMutexHeldCount+0x24>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008266:	3201      	adds	r2, #1
 8008268:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800826a:	4b03      	ldr	r3, [pc, #12]	@ (8008278 <pvTaskIncrementMutexHeldCount+0x24>)
 800826c:	681b      	ldr	r3, [r3, #0]
	}
 800826e:	4618      	mov	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20000bc0 	.word	0x20000bc0

0800827c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008286:	4b21      	ldr	r3, [pc, #132]	@ (800830c <prvAddCurrentTaskToDelayedList+0x90>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800828c:	4b20      	ldr	r3, [pc, #128]	@ (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3304      	adds	r3, #4
 8008292:	4618      	mov	r0, r3
 8008294:	f7fd ff60 	bl	8006158 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829e:	d10a      	bne.n	80082b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4819      	ldr	r0, [pc, #100]	@ (8008314 <prvAddCurrentTaskToDelayedList+0x98>)
 80082b0:	f7fd fef7 	bl	80060a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082b4:	e026      	b.n	8008304 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082be:	4b14      	ldr	r3, [pc, #80]	@ (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d209      	bcs.n	80082e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ce:	4b12      	ldr	r3, [pc, #72]	@ (8008318 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f7fd ff04 	bl	80060e8 <vListInsert>
}
 80082e0:	e010      	b.n	8008304 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082e2:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <prvAddCurrentTaskToDelayedList+0xa0>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f7fd fefa 	bl	80060e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008320 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d202      	bcs.n	8008304 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082fe:	4a08      	ldr	r2, [pc, #32]	@ (8008320 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6013      	str	r3, [r2, #0]
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20001098 	.word	0x20001098
 8008310:	20000bc0 	.word	0x20000bc0
 8008314:	20001080 	.word	0x20001080
 8008318:	20001050 	.word	0x20001050
 800831c:	2000104c 	.word	0x2000104c
 8008320:	200010b4 	.word	0x200010b4

08008324 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	@ 0x28
 8008328:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800832e:	f000 fb11 	bl	8008954 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008332:	4b1d      	ldr	r3, [pc, #116]	@ (80083a8 <xTimerCreateTimerTask+0x84>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d021      	beq.n	800837e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008342:	1d3a      	adds	r2, r7, #4
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	f107 030c 	add.w	r3, r7, #12
 800834c:	4618      	mov	r0, r3
 800834e:	f7fd fe63 	bl	8006018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	9202      	str	r2, [sp, #8]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	2302      	movs	r3, #2
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	2300      	movs	r3, #0
 8008362:	460a      	mov	r2, r1
 8008364:	4911      	ldr	r1, [pc, #68]	@ (80083ac <xTimerCreateTimerTask+0x88>)
 8008366:	4812      	ldr	r0, [pc, #72]	@ (80083b0 <xTimerCreateTimerTask+0x8c>)
 8008368:	f7fe ff4a 	bl	8007200 <xTaskCreateStatic>
 800836c:	4603      	mov	r3, r0
 800836e:	4a11      	ldr	r2, [pc, #68]	@ (80083b4 <xTimerCreateTimerTask+0x90>)
 8008370:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008372:	4b10      	ldr	r3, [pc, #64]	@ (80083b4 <xTimerCreateTimerTask+0x90>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800837a:	2301      	movs	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10b      	bne.n	800839c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	613b      	str	r3, [r7, #16]
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800839c:	697b      	ldr	r3, [r7, #20]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200010f0 	.word	0x200010f0
 80083ac:	0800dc6c 	.word	0x0800dc6c
 80083b0:	080084f1 	.word	0x080084f1
 80083b4:	200010f4 	.word	0x200010f4

080083b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	@ 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10b      	bne.n	80083e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	623b      	str	r3, [r7, #32]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083e8:	4b19      	ldr	r3, [pc, #100]	@ (8008450 <xTimerGenericCommand+0x98>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d02a      	beq.n	8008446 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b05      	cmp	r3, #5
 8008400:	dc18      	bgt.n	8008434 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008402:	f7ff fdad 	bl	8007f60 <xTaskGetSchedulerState>
 8008406:	4603      	mov	r3, r0
 8008408:	2b02      	cmp	r3, #2
 800840a:	d109      	bne.n	8008420 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800840c:	4b10      	ldr	r3, [pc, #64]	@ (8008450 <xTimerGenericCommand+0x98>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	f107 0110 	add.w	r1, r7, #16
 8008414:	2300      	movs	r3, #0
 8008416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008418:	f7fe f87c 	bl	8006514 <xQueueGenericSend>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24
 800841e:	e012      	b.n	8008446 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008420:	4b0b      	ldr	r3, [pc, #44]	@ (8008450 <xTimerGenericCommand+0x98>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	f107 0110 	add.w	r1, r7, #16
 8008428:	2300      	movs	r3, #0
 800842a:	2200      	movs	r2, #0
 800842c:	f7fe f872 	bl	8006514 <xQueueGenericSend>
 8008430:	6278      	str	r0, [r7, #36]	@ 0x24
 8008432:	e008      	b.n	8008446 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008434:	4b06      	ldr	r3, [pc, #24]	@ (8008450 <xTimerGenericCommand+0x98>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	f107 0110 	add.w	r1, r7, #16
 800843c:	2300      	movs	r3, #0
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	f7fe f96a 	bl	8006718 <xQueueGenericSendFromISR>
 8008444:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008448:	4618      	mov	r0, r3
 800844a:	3728      	adds	r7, #40	@ 0x28
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200010f0 	.word	0x200010f0

08008454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845e:	4b23      	ldr	r3, [pc, #140]	@ (80084ec <prvProcessExpiredTimer+0x98>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	3304      	adds	r3, #4
 800846c:	4618      	mov	r0, r3
 800846e:	f7fd fe73 	bl	8006158 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d023      	beq.n	80084c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	18d1      	adds	r1, r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	6978      	ldr	r0, [r7, #20]
 800848e:	f000 f8d3 	bl	8008638 <prvInsertTimerInActiveList>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d020      	beq.n	80084da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008498:	2300      	movs	r3, #0
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2300      	movs	r3, #0
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	2100      	movs	r1, #0
 80084a2:	6978      	ldr	r0, [r7, #20]
 80084a4:	f7ff ff88 	bl	80083b8 <xTimerGenericCommand>
 80084a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d114      	bne.n	80084da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60fb      	str	r3, [r7, #12]
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	6978      	ldr	r0, [r7, #20]
 80084e0:	4798      	blx	r3
}
 80084e2:	bf00      	nop
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200010e8 	.word	0x200010e8

080084f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084f8:	f107 0308 	add.w	r3, r7, #8
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 f859 	bl	80085b4 <prvGetNextExpireTime>
 8008502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4619      	mov	r1, r3
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f805 	bl	8008518 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800850e:	f000 f8d5 	bl	80086bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008512:	bf00      	nop
 8008514:	e7f0      	b.n	80084f8 <prvTimerTask+0x8>
	...

08008518 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008522:	f7ff f91b 	bl	800775c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008526:	f107 0308 	add.w	r3, r7, #8
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f864 	bl	80085f8 <prvSampleTimeNow>
 8008530:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d130      	bne.n	800859a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10a      	bne.n	8008554 <prvProcessTimerOrBlockTask+0x3c>
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	429a      	cmp	r2, r3
 8008544:	d806      	bhi.n	8008554 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008546:	f7ff f917 	bl	8007778 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff ff81 	bl	8008454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008552:	e024      	b.n	800859e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d008      	beq.n	800856c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800855a:	4b13      	ldr	r3, [pc, #76]	@ (80085a8 <prvProcessTimerOrBlockTask+0x90>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <prvProcessTimerOrBlockTask+0x50>
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <prvProcessTimerOrBlockTask+0x52>
 8008568:	2300      	movs	r3, #0
 800856a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800856c:	4b0f      	ldr	r3, [pc, #60]	@ (80085ac <prvProcessTimerOrBlockTask+0x94>)
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4619      	mov	r1, r3
 800857a:	f7fe fe0d 	bl	8007198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800857e:	f7ff f8fb 	bl	8007778 <xTaskResumeAll>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008588:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <prvProcessTimerOrBlockTask+0x98>)
 800858a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	f3bf 8f6f 	isb	sy
}
 8008598:	e001      	b.n	800859e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800859a:	f7ff f8ed 	bl	8007778 <xTaskResumeAll>
}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200010ec 	.word	0x200010ec
 80085ac:	200010f0 	.word	0x200010f0
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085bc:	4b0d      	ldr	r3, [pc, #52]	@ (80085f4 <prvGetNextExpireTime+0x40>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <prvGetNextExpireTime+0x16>
 80085c6:	2201      	movs	r2, #1
 80085c8:	e000      	b.n	80085cc <prvGetNextExpireTime+0x18>
 80085ca:	2200      	movs	r2, #0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d105      	bne.n	80085e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085d8:	4b06      	ldr	r3, [pc, #24]	@ (80085f4 <prvGetNextExpireTime+0x40>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	e001      	b.n	80085e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr
 80085f4:	200010e8 	.word	0x200010e8

080085f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008600:	f7ff f958 	bl	80078b4 <xTaskGetTickCount>
 8008604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008606:	4b0b      	ldr	r3, [pc, #44]	@ (8008634 <prvSampleTimeNow+0x3c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	429a      	cmp	r2, r3
 800860e:	d205      	bcs.n	800861c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008610:	f000 f93a 	bl	8008888 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	e002      	b.n	8008622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008622:	4a04      	ldr	r2, [pc, #16]	@ (8008634 <prvSampleTimeNow+0x3c>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008628:	68fb      	ldr	r3, [r7, #12]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	200010f8 	.word	0x200010f8

08008638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	429a      	cmp	r2, r3
 800865c:	d812      	bhi.n	8008684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	1ad2      	subs	r2, r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	e01b      	b.n	80086aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008672:	4b10      	ldr	r3, [pc, #64]	@ (80086b4 <prvInsertTimerInActiveList+0x7c>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7fd fd33 	bl	80060e8 <vListInsert>
 8008682:	e012      	b.n	80086aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d206      	bcs.n	800869a <prvInsertTimerInActiveList+0x62>
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d302      	bcc.n	800869a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e007      	b.n	80086aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800869a:	4b07      	ldr	r3, [pc, #28]	@ (80086b8 <prvInsertTimerInActiveList+0x80>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f7fd fd1f 	bl	80060e8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086aa:	697b      	ldr	r3, [r7, #20]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	200010ec 	.word	0x200010ec
 80086b8:	200010e8 	.word	0x200010e8

080086bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08e      	sub	sp, #56	@ 0x38
 80086c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086c2:	e0ce      	b.n	8008862 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da19      	bge.n	80086fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086ca:	1d3b      	adds	r3, r7, #4
 80086cc:	3304      	adds	r3, #4
 80086ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	61fb      	str	r3, [r7, #28]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086f4:	6850      	ldr	r0, [r2, #4]
 80086f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086f8:	6892      	ldr	r2, [r2, #8]
 80086fa:	4611      	mov	r1, r2
 80086fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f2c0 80ae 	blt.w	8008862 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800870a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008714:	3304      	adds	r3, #4
 8008716:	4618      	mov	r0, r3
 8008718:	f7fd fd1e 	bl	8006158 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800871c:	463b      	mov	r3, r7
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff ff6a 	bl	80085f8 <prvSampleTimeNow>
 8008724:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b09      	cmp	r3, #9
 800872a:	f200 8097 	bhi.w	800885c <prvProcessReceivedCommands+0x1a0>
 800872e:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <prvProcessReceivedCommands+0x78>)
 8008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008734:	0800875d 	.word	0x0800875d
 8008738:	0800875d 	.word	0x0800875d
 800873c:	0800875d 	.word	0x0800875d
 8008740:	080087d3 	.word	0x080087d3
 8008744:	080087e7 	.word	0x080087e7
 8008748:	08008833 	.word	0x08008833
 800874c:	0800875d 	.word	0x0800875d
 8008750:	0800875d 	.word	0x0800875d
 8008754:	080087d3 	.word	0x080087d3
 8008758:	080087e7 	.word	0x080087e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	b2da      	uxtb	r2, r3
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	18d1      	adds	r1, r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800877a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877c:	f7ff ff5c 	bl	8008638 <prvInsertTimerInActiveList>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d06c      	beq.n	8008860 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800878c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d061      	beq.n	8008860 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	441a      	add	r2, r3
 80087a4:	2300      	movs	r3, #0
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	2300      	movs	r3, #0
 80087aa:	2100      	movs	r1, #0
 80087ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ae:	f7ff fe03 	bl	80083b8 <xTimerGenericCommand>
 80087b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d152      	bne.n	8008860 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	61bb      	str	r3, [r7, #24]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087e4:	e03d      	b.n	8008862 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087ec:	f043 0301 	orr.w	r3, r3, #1
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	617b      	str	r3, [r7, #20]
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	e7fd      	b.n	800881a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008824:	18d1      	adds	r1, r2, r3
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800882c:	f7ff ff04 	bl	8008638 <prvInsertTimerInActiveList>
					break;
 8008830:	e017      	b.n	8008862 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008842:	f000 fba3 	bl	8008f8c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008846:	e00c      	b.n	8008862 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	b2da      	uxtb	r2, r3
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800885a:	e002      	b.n	8008862 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800885c:	bf00      	nop
 800885e:	e000      	b.n	8008862 <prvProcessReceivedCommands+0x1a6>
					break;
 8008860:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008862:	4b08      	ldr	r3, [pc, #32]	@ (8008884 <prvProcessReceivedCommands+0x1c8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	1d39      	adds	r1, r7, #4
 8008868:	2200      	movs	r2, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe f882 	bl	8006974 <xQueueReceive>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f47f af26 	bne.w	80086c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop
 800887c:	3730      	adds	r7, #48	@ 0x30
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	200010f0 	.word	0x200010f0

08008888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800888e:	e049      	b.n	8008924 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008890:	4b2e      	ldr	r3, [pc, #184]	@ (800894c <prvSwitchTimerLists+0xc4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889a:	4b2c      	ldr	r3, [pc, #176]	@ (800894c <prvSwitchTimerLists+0xc4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fd fc55 	bl	8006158 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d02f      	beq.n	8008924 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4413      	add	r3, r2
 80088cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d90e      	bls.n	80088f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088e2:	4b1a      	ldr	r3, [pc, #104]	@ (800894c <prvSwitchTimerLists+0xc4>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fd fbfb 	bl	80060e8 <vListInsert>
 80088f2:	e017      	b.n	8008924 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088f4:	2300      	movs	r3, #0
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	2300      	movs	r3, #0
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fd5a 	bl	80083b8 <xTimerGenericCommand>
 8008904:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10b      	bne.n	8008924 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	603b      	str	r3, [r7, #0]
}
 800891e:	bf00      	nop
 8008920:	bf00      	nop
 8008922:	e7fd      	b.n	8008920 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008924:	4b09      	ldr	r3, [pc, #36]	@ (800894c <prvSwitchTimerLists+0xc4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1b0      	bne.n	8008890 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800892e:	4b07      	ldr	r3, [pc, #28]	@ (800894c <prvSwitchTimerLists+0xc4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008934:	4b06      	ldr	r3, [pc, #24]	@ (8008950 <prvSwitchTimerLists+0xc8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a04      	ldr	r2, [pc, #16]	@ (800894c <prvSwitchTimerLists+0xc4>)
 800893a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800893c:	4a04      	ldr	r2, [pc, #16]	@ (8008950 <prvSwitchTimerLists+0xc8>)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	6013      	str	r3, [r2, #0]
}
 8008942:	bf00      	nop
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	200010e8 	.word	0x200010e8
 8008950:	200010ec 	.word	0x200010ec

08008954 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800895a:	f000 f941 	bl	8008be0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800895e:	4b15      	ldr	r3, [pc, #84]	@ (80089b4 <prvCheckForValidListAndQueue+0x60>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d120      	bne.n	80089a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008966:	4814      	ldr	r0, [pc, #80]	@ (80089b8 <prvCheckForValidListAndQueue+0x64>)
 8008968:	f7fd fb70 	bl	800604c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800896c:	4813      	ldr	r0, [pc, #76]	@ (80089bc <prvCheckForValidListAndQueue+0x68>)
 800896e:	f7fd fb6d 	bl	800604c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008972:	4b13      	ldr	r3, [pc, #76]	@ (80089c0 <prvCheckForValidListAndQueue+0x6c>)
 8008974:	4a10      	ldr	r2, [pc, #64]	@ (80089b8 <prvCheckForValidListAndQueue+0x64>)
 8008976:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008978:	4b12      	ldr	r3, [pc, #72]	@ (80089c4 <prvCheckForValidListAndQueue+0x70>)
 800897a:	4a10      	ldr	r2, [pc, #64]	@ (80089bc <prvCheckForValidListAndQueue+0x68>)
 800897c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800897e:	2300      	movs	r3, #0
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	4b11      	ldr	r3, [pc, #68]	@ (80089c8 <prvCheckForValidListAndQueue+0x74>)
 8008984:	4a11      	ldr	r2, [pc, #68]	@ (80089cc <prvCheckForValidListAndQueue+0x78>)
 8008986:	2110      	movs	r1, #16
 8008988:	200a      	movs	r0, #10
 800898a:	f7fd fc79 	bl	8006280 <xQueueGenericCreateStatic>
 800898e:	4603      	mov	r3, r0
 8008990:	4a08      	ldr	r2, [pc, #32]	@ (80089b4 <prvCheckForValidListAndQueue+0x60>)
 8008992:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008994:	4b07      	ldr	r3, [pc, #28]	@ (80089b4 <prvCheckForValidListAndQueue+0x60>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800899c:	4b05      	ldr	r3, [pc, #20]	@ (80089b4 <prvCheckForValidListAndQueue+0x60>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	490b      	ldr	r1, [pc, #44]	@ (80089d0 <prvCheckForValidListAndQueue+0x7c>)
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fba6 	bl	80070f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a8:	f000 f94a 	bl	8008c40 <vPortExitCritical>
}
 80089ac:	bf00      	nop
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200010f0 	.word	0x200010f0
 80089b8:	200010c0 	.word	0x200010c0
 80089bc:	200010d4 	.word	0x200010d4
 80089c0:	200010e8 	.word	0x200010e8
 80089c4:	200010ec 	.word	0x200010ec
 80089c8:	2000119c 	.word	0x2000119c
 80089cc:	200010fc 	.word	0x200010fc
 80089d0:	0800dc74 	.word	0x0800dc74

080089d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3b04      	subs	r3, #4
 80089e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80089ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3b04      	subs	r3, #4
 80089f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3b04      	subs	r3, #4
 8008a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a04:	4a08      	ldr	r2, [pc, #32]	@ (8008a28 <pxPortInitialiseStack+0x54>)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3b14      	subs	r3, #20
 8008a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3b20      	subs	r3, #32
 8008a1a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr
 8008a28:	08008a2d 	.word	0x08008a2d

08008a2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a36:	4b12      	ldr	r3, [pc, #72]	@ (8008a80 <prvTaskExitError+0x54>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d00b      	beq.n	8008a58 <prvTaskExitError+0x2c>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	60fb      	str	r3, [r7, #12]
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <prvTaskExitError+0x28>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	60bb      	str	r3, [r7, #8]
}
 8008a6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a6c:	bf00      	nop
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0fc      	beq.n	8008a6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr
 8008a80:	20000014 	.word	0x20000014
	...

08008a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a90:	4b07      	ldr	r3, [pc, #28]	@ (8008ab0 <pxCurrentTCBConst2>)
 8008a92:	6819      	ldr	r1, [r3, #0]
 8008a94:	6808      	ldr	r0, [r1, #0]
 8008a96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a9a:	f380 8809 	msr	PSP, r0
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f380 8811 	msr	BASEPRI, r0
 8008aaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8008aae:	4770      	bx	lr

08008ab0 <pxCurrentTCBConst2>:
 8008ab0:	20000bc0 	.word	0x20000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop

08008ab8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ab8:	4806      	ldr	r0, [pc, #24]	@ (8008ad4 <prvPortStartFirstTask+0x1c>)
 8008aba:	6800      	ldr	r0, [r0, #0]
 8008abc:	6800      	ldr	r0, [r0, #0]
 8008abe:	f380 8808 	msr	MSP, r0
 8008ac2:	b662      	cpsie	i
 8008ac4:	b661      	cpsie	f
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	df00      	svc	0
 8008ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ad2:	bf00      	nop
 8008ad4:	e000ed08 	.word	0xe000ed08

08008ad8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ade:	4b3b      	ldr	r3, [pc, #236]	@ (8008bcc <xPortStartScheduler+0xf4>)
 8008ae0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	22ff      	movs	r2, #255	@ 0xff
 8008aee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	4b33      	ldr	r3, [pc, #204]	@ (8008bd0 <xPortStartScheduler+0xf8>)
 8008b04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b06:	4b33      	ldr	r3, [pc, #204]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b08:	2207      	movs	r2, #7
 8008b0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0c:	e009      	b.n	8008b22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008b0e:	4b31      	ldr	r3, [pc, #196]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	4a2f      	ldr	r2, [pc, #188]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2a:	2b80      	cmp	r3, #128	@ 0x80
 8008b2c:	d0ef      	beq.n	8008b0e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8008b2e:	4b29      	ldr	r3, [pc, #164]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f1c3 0307 	rsb	r3, r3, #7
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d00b      	beq.n	8008b52 <xPortStartScheduler+0x7a>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	613b      	str	r3, [r7, #16]
}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	e7fd      	b.n	8008b4e <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b52:	4b20      	ldr	r3, [pc, #128]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f1c3 0307 	rsb	r3, r3, #7
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d00b      	beq.n	8008b76 <xPortStartScheduler+0x9e>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	60fb      	str	r3, [r7, #12]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b76:	4b17      	ldr	r3, [pc, #92]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	4a15      	ldr	r2, [pc, #84]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b7e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b80:	4b14      	ldr	r3, [pc, #80]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b88:	4a12      	ldr	r2, [pc, #72]	@ (8008bd4 <xPortStartScheduler+0xfc>)
 8008b8a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b94:	4b10      	ldr	r3, [pc, #64]	@ (8008bd8 <xPortStartScheduler+0x100>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a0f      	ldr	r2, [pc, #60]	@ (8008bd8 <xPortStartScheduler+0x100>)
 8008b9a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b9e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd8 <xPortStartScheduler+0x100>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd8 <xPortStartScheduler+0x100>)
 8008ba6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008baa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bac:	f000 f8be 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bdc <xPortStartScheduler+0x104>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bb6:	f7ff ff7f 	bl	8008ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bba:	f7fe ff55 	bl	8007a68 <vTaskSwitchContext>
	prvTaskExitError();
 8008bbe:	f7ff ff35 	bl	8008a2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	e000e400 	.word	0xe000e400
 8008bd0:	200011ec 	.word	0x200011ec
 8008bd4:	200011f0 	.word	0x200011f0
 8008bd8:	e000ed20 	.word	0xe000ed20
 8008bdc:	20000014 	.word	0x20000014

08008be0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	607b      	str	r3, [r7, #4]
}
 8008bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8008c38 <vPortEnterCritical+0x58>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	4a0d      	ldr	r2, [pc, #52]	@ (8008c38 <vPortEnterCritical+0x58>)
 8008c02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c04:	4b0c      	ldr	r3, [pc, #48]	@ (8008c38 <vPortEnterCritical+0x58>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d110      	bne.n	8008c2e <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c3c <vPortEnterCritical+0x5c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00b      	beq.n	8008c2e <vPortEnterCritical+0x4e>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	603b      	str	r3, [r7, #0]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <vPortEnterCritical+0x4a>
	}
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr
 8008c38:	20000014 	.word	0x20000014
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c46:	4b12      	ldr	r3, [pc, #72]	@ (8008c90 <vPortExitCritical+0x50>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10b      	bne.n	8008c66 <vPortExitCritical+0x26>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	607b      	str	r3, [r7, #4]
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop
 8008c64:	e7fd      	b.n	8008c62 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c66:	4b0a      	ldr	r3, [pc, #40]	@ (8008c90 <vPortExitCritical+0x50>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	4a08      	ldr	r2, [pc, #32]	@ (8008c90 <vPortExitCritical+0x50>)
 8008c6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <vPortExitCritical+0x50>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d105      	bne.n	8008c84 <vPortExitCritical+0x44>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f383 8811 	msr	BASEPRI, r3
}
 8008c82:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	20000014 	.word	0x20000014
	...

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce0 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008cb0:	6010      	str	r0, [r2, #0]
 8008cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008cb6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008cba:	f380 8811 	msr	BASEPRI, r0
 8008cbe:	f7fe fed3 	bl	8007a68 <vTaskSwitchContext>
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8811 	msr	BASEPRI, r0
 8008cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008cce:	6819      	ldr	r1, [r3, #0]
 8008cd0:	6808      	ldr	r0, [r1, #0]
 8008cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008cd6:	f380 8809 	msr	PSP, r0
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	4770      	bx	lr

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	20000bc0 	.word	0x20000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7fe fdf7 	bl	80078f4 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <vPortSetupTimerInterrupt+0x30>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a09      	ldr	r2, [pc, #36]	@ (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a08      	ldr	r2, [pc, #32]	@ (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b03      	ldr	r3, [pc, #12]	@ (8008d5c <vPortSetupTimerInterrupt+0x30>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr
 8008d5c:	e000e010 	.word	0xe000e010
 8008d60:	e000e018 	.word	0xe000e018
 8008d64:	20000008 	.word	0x20000008
 8008d68:	10624dd3 	.word	0x10624dd3
 8008d6c:	e000e014 	.word	0xe000e014

08008d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d76:	f3ef 8305 	mrs	r3, IPSR
 8008d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b0f      	cmp	r3, #15
 8008d80:	d915      	bls.n	8008dae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d82:	4a17      	ldr	r2, [pc, #92]	@ (8008de0 <vPortValidateInterruptPriority+0x70>)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d8c:	4b15      	ldr	r3, [pc, #84]	@ (8008de4 <vPortValidateInterruptPriority+0x74>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	7afa      	ldrb	r2, [r7, #11]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d20b      	bcs.n	8008dae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	607b      	str	r3, [r7, #4]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <vPortValidateInterruptPriority+0x78>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008db6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dec <vPortValidateInterruptPriority+0x7c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d90b      	bls.n	8008dd6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	603b      	str	r3, [r7, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <vPortValidateInterruptPriority+0x62>
	}
 8008dd6:	bf00      	nop
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr
 8008de0:	e000e3f0 	.word	0xe000e3f0
 8008de4:	200011ec 	.word	0x200011ec
 8008de8:	e000ed0c 	.word	0xe000ed0c
 8008dec:	200011f0 	.word	0x200011f0

08008df0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	@ 0x28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dfc:	f7fe fcae 	bl	800775c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e00:	4b5c      	ldr	r3, [pc, #368]	@ (8008f74 <pvPortMalloc+0x184>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e08:	f000 f924 	bl	8009054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8008f78 <pvPortMalloc+0x188>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4013      	ands	r3, r2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f040 8095 	bne.w	8008f44 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01e      	beq.n	8008e5e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e20:	2208      	movs	r2, #8
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4413      	add	r3, r2
 8008e26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d015      	beq.n	8008e5e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f023 0307 	bic.w	r3, r3, #7
 8008e38:	3308      	adds	r3, #8
 8008e3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <pvPortMalloc+0x6e>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	617b      	str	r3, [r7, #20]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d06f      	beq.n	8008f44 <pvPortMalloc+0x154>
 8008e64:	4b45      	ldr	r3, [pc, #276]	@ (8008f7c <pvPortMalloc+0x18c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d86a      	bhi.n	8008f44 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e6e:	4b44      	ldr	r3, [pc, #272]	@ (8008f80 <pvPortMalloc+0x190>)
 8008e70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e72:	4b43      	ldr	r3, [pc, #268]	@ (8008f80 <pvPortMalloc+0x190>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e78:	e004      	b.n	8008e84 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d903      	bls.n	8008e96 <pvPortMalloc+0xa6>
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1f1      	bne.n	8008e7a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e96:	4b37      	ldr	r3, [pc, #220]	@ (8008f74 <pvPortMalloc+0x184>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d051      	beq.n	8008f44 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	4413      	add	r3, r2
 8008ea8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	1ad2      	subs	r2, r2, r3
 8008eba:	2308      	movs	r3, #8
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d920      	bls.n	8008f04 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <pvPortMalloc+0xfc>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	613b      	str	r3, [r7, #16]
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	1ad2      	subs	r2, r2, r3
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008efe:	69b8      	ldr	r0, [r7, #24]
 8008f00:	f000 f90a 	bl	8009118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f04:	4b1d      	ldr	r3, [pc, #116]	@ (8008f7c <pvPortMalloc+0x18c>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008f7c <pvPortMalloc+0x18c>)
 8008f10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f12:	4b1a      	ldr	r3, [pc, #104]	@ (8008f7c <pvPortMalloc+0x18c>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	4b1b      	ldr	r3, [pc, #108]	@ (8008f84 <pvPortMalloc+0x194>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d203      	bcs.n	8008f26 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f1e:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <pvPortMalloc+0x18c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a18      	ldr	r2, [pc, #96]	@ (8008f84 <pvPortMalloc+0x194>)
 8008f24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	4b13      	ldr	r3, [pc, #76]	@ (8008f78 <pvPortMalloc+0x188>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f3a:	4b13      	ldr	r3, [pc, #76]	@ (8008f88 <pvPortMalloc+0x198>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	4a11      	ldr	r2, [pc, #68]	@ (8008f88 <pvPortMalloc+0x198>)
 8008f42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f44:	f7fe fc18 	bl	8007778 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <pvPortMalloc+0x17a>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60fb      	str	r3, [r7, #12]
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <pvPortMalloc+0x176>
	return pvReturn;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3728      	adds	r7, #40	@ 0x28
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20001dfc 	.word	0x20001dfc
 8008f78:	20001e10 	.word	0x20001e10
 8008f7c:	20001e00 	.word	0x20001e00
 8008f80:	20001df4 	.word	0x20001df4
 8008f84:	20001e04 	.word	0x20001e04
 8008f88:	20001e08 	.word	0x20001e08

08008f8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d04f      	beq.n	800903e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f9e:	2308      	movs	r3, #8
 8008fa0:	425b      	negs	r3, r3
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	4b25      	ldr	r3, [pc, #148]	@ (8009048 <vPortFree+0xbc>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10b      	bne.n	8008fd2 <vPortFree+0x46>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	60fb      	str	r3, [r7, #12]
}
 8008fcc:	bf00      	nop
 8008fce:	bf00      	nop
 8008fd0:	e7fd      	b.n	8008fce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <vPortFree+0x66>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	60bb      	str	r3, [r7, #8]
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	e7fd      	b.n	8008fee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <vPortFree+0xbc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01e      	beq.n	800903e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11a      	bne.n	800903e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <vPortFree+0xbc>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	43db      	mvns	r3, r3
 8009012:	401a      	ands	r2, r3
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009018:	f7fe fba0 	bl	800775c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <vPortFree+0xc0>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4413      	add	r3, r2
 8009026:	4a09      	ldr	r2, [pc, #36]	@ (800904c <vPortFree+0xc0>)
 8009028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800902a:	6938      	ldr	r0, [r7, #16]
 800902c:	f000 f874 	bl	8009118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <vPortFree+0xc4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	4a06      	ldr	r2, [pc, #24]	@ (8009050 <vPortFree+0xc4>)
 8009038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800903a:	f7fe fb9d 	bl	8007778 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800903e:	bf00      	nop
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20001e10 	.word	0x20001e10
 800904c:	20001e00 	.word	0x20001e00
 8009050:	20001e0c 	.word	0x20001e0c

08009054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800905a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800905e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009060:	4b27      	ldr	r3, [pc, #156]	@ (8009100 <prvHeapInit+0xac>)
 8009062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00c      	beq.n	8009088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3307      	adds	r3, #7
 8009072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0307 	bic.w	r3, r3, #7
 800907a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	4a1f      	ldr	r2, [pc, #124]	@ (8009100 <prvHeapInit+0xac>)
 8009084:	4413      	add	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800908c:	4a1d      	ldr	r2, [pc, #116]	@ (8009104 <prvHeapInit+0xb0>)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009092:	4b1c      	ldr	r3, [pc, #112]	@ (8009104 <prvHeapInit+0xb0>)
 8009094:	2200      	movs	r2, #0
 8009096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090a0:	2208      	movs	r2, #8
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0307 	bic.w	r3, r3, #7
 80090ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a15      	ldr	r2, [pc, #84]	@ (8009108 <prvHeapInit+0xb4>)
 80090b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090b6:	4b14      	ldr	r3, [pc, #80]	@ (8009108 <prvHeapInit+0xb4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090be:	4b12      	ldr	r3, [pc, #72]	@ (8009108 <prvHeapInit+0xb4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009108 <prvHeapInit+0xb4>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4a0a      	ldr	r2, [pc, #40]	@ (800910c <prvHeapInit+0xb8>)
 80090e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4a09      	ldr	r2, [pc, #36]	@ (8009110 <prvHeapInit+0xbc>)
 80090ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090ec:	4b09      	ldr	r3, [pc, #36]	@ (8009114 <prvHeapInit+0xc0>)
 80090ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090f2:	601a      	str	r2, [r3, #0]
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	200011f4 	.word	0x200011f4
 8009104:	20001df4 	.word	0x20001df4
 8009108:	20001dfc 	.word	0x20001dfc
 800910c:	20001e04 	.word	0x20001e04
 8009110:	20001e00 	.word	0x20001e00
 8009114:	20001e10 	.word	0x20001e10

08009118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009120:	4b27      	ldr	r3, [pc, #156]	@ (80091c0 <prvInsertBlockIntoFreeList+0xa8>)
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	e002      	b.n	800912c <prvInsertBlockIntoFreeList+0x14>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	429a      	cmp	r2, r3
 8009134:	d8f7      	bhi.n	8009126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d108      	bne.n	800915a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	441a      	add	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d118      	bne.n	80091a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b14      	ldr	r3, [pc, #80]	@ (80091c4 <prvInsertBlockIntoFreeList+0xac>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d00d      	beq.n	8009196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	441a      	add	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e008      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009196:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <prvInsertBlockIntoFreeList+0xac>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e003      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d002      	beq.n	80091b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b6:	bf00      	nop
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bc80      	pop	{r7}
 80091be:	4770      	bx	lr
 80091c0:	20001df4 	.word	0x20001df4
 80091c4:	20001dfc 	.word	0x20001dfc

080091c8 <map>:
#include "servo.h"

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	69b9      	ldr	r1, [r7, #24]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	1a8a      	subs	r2, r1, r2
 80091e2:	fb03 f202 	mul.w	r2, r3, r2
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	1acb      	subs	r3, r1, r3
 80091ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	4413      	add	r3, r2
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bc80      	pop	{r7}
 80091fc:	4770      	bx	lr
	...

08009200 <Servo_Write>:

void Servo_Write(TIM_HandleTypeDef *htim, uint16_t channel, uint8_t angle){
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af02      	add	r7, sp, #8
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	807b      	strh	r3, [r7, #2]
 800920c:	4613      	mov	r3, r2
 800920e:	707b      	strb	r3, [r7, #1]
	uint16_t ccr = map(angle, 0, 180, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
 8009210:	7878      	ldrb	r0, [r7, #1]
 8009212:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800921c:	22b4      	movs	r2, #180	@ 0xb4
 800921e:	2100      	movs	r1, #0
 8009220:	f7ff ffd2 	bl	80091c8 <map>
 8009224:	4603      	mov	r3, r0
 8009226:	81fb      	strh	r3, [r7, #14]
	switch (channel) {
 8009228:	887b      	ldrh	r3, [r7, #2]
 800922a:	2b0c      	cmp	r3, #12
 800922c:	d830      	bhi.n	8009290 <Servo_Write+0x90>
 800922e:	a201      	add	r2, pc, #4	@ (adr r2, 8009234 <Servo_Write+0x34>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009269 	.word	0x08009269
 8009238:	08009291 	.word	0x08009291
 800923c:	08009291 	.word	0x08009291
 8009240:	08009291 	.word	0x08009291
 8009244:	08009273 	.word	0x08009273
 8009248:	08009291 	.word	0x08009291
 800924c:	08009291 	.word	0x08009291
 8009250:	08009291 	.word	0x08009291
 8009254:	0800927d 	.word	0x0800927d
 8009258:	08009291 	.word	0x08009291
 800925c:	08009291 	.word	0x08009291
 8009260:	08009291 	.word	0x08009291
 8009264:	08009287 	.word	0x08009287
		case TIM_CHANNEL_1:
			htim -> Instance -> CCR1 = ccr;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	89fa      	ldrh	r2, [r7, #14]
 800926e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8009270:	e00f      	b.n	8009292 <Servo_Write+0x92>
		case TIM_CHANNEL_2:
			htim -> Instance -> CCR2 = ccr;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	89fa      	ldrh	r2, [r7, #14]
 8009278:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800927a:	e00a      	b.n	8009292 <Servo_Write+0x92>
		case TIM_CHANNEL_3:
			htim -> Instance -> CCR3 = ccr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	89fa      	ldrh	r2, [r7, #14]
 8009282:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8009284:	e005      	b.n	8009292 <Servo_Write+0x92>
		case TIM_CHANNEL_4:
			htim -> Instance -> CCR4 = ccr;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	89fa      	ldrh	r2, [r7, #14]
 800928c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800928e:	e000      	b.n	8009292 <Servo_Write+0x92>
		default:
			break;
 8009290:	bf00      	nop
	}
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop

0800929c <atoi>:
 800929c:	220a      	movs	r2, #10
 800929e:	2100      	movs	r1, #0
 80092a0:	f000 b87c 	b.w	800939c <strtol>

080092a4 <_strtol_l.constprop.0>:
 80092a4:	2b24      	cmp	r3, #36	@ 0x24
 80092a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092aa:	4686      	mov	lr, r0
 80092ac:	4690      	mov	r8, r2
 80092ae:	d801      	bhi.n	80092b4 <_strtol_l.constprop.0+0x10>
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d106      	bne.n	80092c2 <_strtol_l.constprop.0+0x1e>
 80092b4:	f001 f9cc 	bl	800a650 <__errno>
 80092b8:	2316      	movs	r3, #22
 80092ba:	6003      	str	r3, [r0, #0]
 80092bc:	2000      	movs	r0, #0
 80092be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c2:	460d      	mov	r5, r1
 80092c4:	4833      	ldr	r0, [pc, #204]	@ (8009394 <_strtol_l.constprop.0+0xf0>)
 80092c6:	462a      	mov	r2, r5
 80092c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092cc:	5d06      	ldrb	r6, [r0, r4]
 80092ce:	f016 0608 	ands.w	r6, r6, #8
 80092d2:	d1f8      	bne.n	80092c6 <_strtol_l.constprop.0+0x22>
 80092d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80092d6:	d12d      	bne.n	8009334 <_strtol_l.constprop.0+0x90>
 80092d8:	2601      	movs	r6, #1
 80092da:	782c      	ldrb	r4, [r5, #0]
 80092dc:	1c95      	adds	r5, r2, #2
 80092de:	f033 0210 	bics.w	r2, r3, #16
 80092e2:	d109      	bne.n	80092f8 <_strtol_l.constprop.0+0x54>
 80092e4:	2c30      	cmp	r4, #48	@ 0x30
 80092e6:	d12a      	bne.n	800933e <_strtol_l.constprop.0+0x9a>
 80092e8:	782a      	ldrb	r2, [r5, #0]
 80092ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80092ee:	2a58      	cmp	r2, #88	@ 0x58
 80092f0:	d125      	bne.n	800933e <_strtol_l.constprop.0+0x9a>
 80092f2:	2310      	movs	r3, #16
 80092f4:	786c      	ldrb	r4, [r5, #1]
 80092f6:	3502      	adds	r5, #2
 80092f8:	2200      	movs	r2, #0
 80092fa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80092fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009302:	fbbc f9f3 	udiv	r9, ip, r3
 8009306:	4610      	mov	r0, r2
 8009308:	fb03 ca19 	mls	sl, r3, r9, ip
 800930c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009310:	2f09      	cmp	r7, #9
 8009312:	d81b      	bhi.n	800934c <_strtol_l.constprop.0+0xa8>
 8009314:	463c      	mov	r4, r7
 8009316:	42a3      	cmp	r3, r4
 8009318:	dd27      	ble.n	800936a <_strtol_l.constprop.0+0xc6>
 800931a:	1c57      	adds	r7, r2, #1
 800931c:	d007      	beq.n	800932e <_strtol_l.constprop.0+0x8a>
 800931e:	4581      	cmp	r9, r0
 8009320:	d320      	bcc.n	8009364 <_strtol_l.constprop.0+0xc0>
 8009322:	d101      	bne.n	8009328 <_strtol_l.constprop.0+0x84>
 8009324:	45a2      	cmp	sl, r4
 8009326:	db1d      	blt.n	8009364 <_strtol_l.constprop.0+0xc0>
 8009328:	2201      	movs	r2, #1
 800932a:	fb00 4003 	mla	r0, r0, r3, r4
 800932e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009332:	e7eb      	b.n	800930c <_strtol_l.constprop.0+0x68>
 8009334:	2c2b      	cmp	r4, #43	@ 0x2b
 8009336:	bf04      	itt	eq
 8009338:	782c      	ldrbeq	r4, [r5, #0]
 800933a:	1c95      	addeq	r5, r2, #2
 800933c:	e7cf      	b.n	80092de <_strtol_l.constprop.0+0x3a>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1da      	bne.n	80092f8 <_strtol_l.constprop.0+0x54>
 8009342:	2c30      	cmp	r4, #48	@ 0x30
 8009344:	bf0c      	ite	eq
 8009346:	2308      	moveq	r3, #8
 8009348:	230a      	movne	r3, #10
 800934a:	e7d5      	b.n	80092f8 <_strtol_l.constprop.0+0x54>
 800934c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009350:	2f19      	cmp	r7, #25
 8009352:	d801      	bhi.n	8009358 <_strtol_l.constprop.0+0xb4>
 8009354:	3c37      	subs	r4, #55	@ 0x37
 8009356:	e7de      	b.n	8009316 <_strtol_l.constprop.0+0x72>
 8009358:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800935c:	2f19      	cmp	r7, #25
 800935e:	d804      	bhi.n	800936a <_strtol_l.constprop.0+0xc6>
 8009360:	3c57      	subs	r4, #87	@ 0x57
 8009362:	e7d8      	b.n	8009316 <_strtol_l.constprop.0+0x72>
 8009364:	f04f 32ff 	mov.w	r2, #4294967295
 8009368:	e7e1      	b.n	800932e <_strtol_l.constprop.0+0x8a>
 800936a:	1c53      	adds	r3, r2, #1
 800936c:	d108      	bne.n	8009380 <_strtol_l.constprop.0+0xdc>
 800936e:	2322      	movs	r3, #34	@ 0x22
 8009370:	4660      	mov	r0, ip
 8009372:	f8ce 3000 	str.w	r3, [lr]
 8009376:	f1b8 0f00 	cmp.w	r8, #0
 800937a:	d0a0      	beq.n	80092be <_strtol_l.constprop.0+0x1a>
 800937c:	1e69      	subs	r1, r5, #1
 800937e:	e006      	b.n	800938e <_strtol_l.constprop.0+0xea>
 8009380:	b106      	cbz	r6, 8009384 <_strtol_l.constprop.0+0xe0>
 8009382:	4240      	negs	r0, r0
 8009384:	f1b8 0f00 	cmp.w	r8, #0
 8009388:	d099      	beq.n	80092be <_strtol_l.constprop.0+0x1a>
 800938a:	2a00      	cmp	r2, #0
 800938c:	d1f6      	bne.n	800937c <_strtol_l.constprop.0+0xd8>
 800938e:	f8c8 1000 	str.w	r1, [r8]
 8009392:	e794      	b.n	80092be <_strtol_l.constprop.0+0x1a>
 8009394:	0800dd33 	.word	0x0800dd33

08009398 <_strtol_r>:
 8009398:	f7ff bf84 	b.w	80092a4 <_strtol_l.constprop.0>

0800939c <strtol>:
 800939c:	4613      	mov	r3, r2
 800939e:	460a      	mov	r2, r1
 80093a0:	4601      	mov	r1, r0
 80093a2:	4802      	ldr	r0, [pc, #8]	@ (80093ac <strtol+0x10>)
 80093a4:	6800      	ldr	r0, [r0, #0]
 80093a6:	f7ff bf7d 	b.w	80092a4 <_strtol_l.constprop.0>
 80093aa:	bf00      	nop
 80093ac:	20000024 	.word	0x20000024

080093b0 <__cvt>:
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b6:	461d      	mov	r5, r3
 80093b8:	bfbb      	ittet	lt
 80093ba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80093be:	461d      	movlt	r5, r3
 80093c0:	2300      	movge	r3, #0
 80093c2:	232d      	movlt	r3, #45	@ 0x2d
 80093c4:	b088      	sub	sp, #32
 80093c6:	4614      	mov	r4, r2
 80093c8:	bfb8      	it	lt
 80093ca:	4614      	movlt	r4, r2
 80093cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80093ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80093d0:	7013      	strb	r3, [r2, #0]
 80093d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80093d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80093d8:	f023 0820 	bic.w	r8, r3, #32
 80093dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093e0:	d005      	beq.n	80093ee <__cvt+0x3e>
 80093e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80093e6:	d100      	bne.n	80093ea <__cvt+0x3a>
 80093e8:	3601      	adds	r6, #1
 80093ea:	2302      	movs	r3, #2
 80093ec:	e000      	b.n	80093f0 <__cvt+0x40>
 80093ee:	2303      	movs	r3, #3
 80093f0:	aa07      	add	r2, sp, #28
 80093f2:	9204      	str	r2, [sp, #16]
 80093f4:	aa06      	add	r2, sp, #24
 80093f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80093fa:	e9cd 3600 	strd	r3, r6, [sp]
 80093fe:	4622      	mov	r2, r4
 8009400:	462b      	mov	r3, r5
 8009402:	f001 f9fd 	bl	800a800 <_dtoa_r>
 8009406:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800940a:	4607      	mov	r7, r0
 800940c:	d119      	bne.n	8009442 <__cvt+0x92>
 800940e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009410:	07db      	lsls	r3, r3, #31
 8009412:	d50e      	bpl.n	8009432 <__cvt+0x82>
 8009414:	eb00 0906 	add.w	r9, r0, r6
 8009418:	2200      	movs	r2, #0
 800941a:	2300      	movs	r3, #0
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f7 fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8009424:	b108      	cbz	r0, 800942a <__cvt+0x7a>
 8009426:	f8cd 901c 	str.w	r9, [sp, #28]
 800942a:	2230      	movs	r2, #48	@ 0x30
 800942c:	9b07      	ldr	r3, [sp, #28]
 800942e:	454b      	cmp	r3, r9
 8009430:	d31e      	bcc.n	8009470 <__cvt+0xc0>
 8009432:	4638      	mov	r0, r7
 8009434:	9b07      	ldr	r3, [sp, #28]
 8009436:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009438:	1bdb      	subs	r3, r3, r7
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	b008      	add	sp, #32
 800943e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009442:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009446:	eb00 0906 	add.w	r9, r0, r6
 800944a:	d1e5      	bne.n	8009418 <__cvt+0x68>
 800944c:	7803      	ldrb	r3, [r0, #0]
 800944e:	2b30      	cmp	r3, #48	@ 0x30
 8009450:	d10a      	bne.n	8009468 <__cvt+0xb8>
 8009452:	2200      	movs	r2, #0
 8009454:	2300      	movs	r3, #0
 8009456:	4620      	mov	r0, r4
 8009458:	4629      	mov	r1, r5
 800945a:	f7f7 faa5 	bl	80009a8 <__aeabi_dcmpeq>
 800945e:	b918      	cbnz	r0, 8009468 <__cvt+0xb8>
 8009460:	f1c6 0601 	rsb	r6, r6, #1
 8009464:	f8ca 6000 	str.w	r6, [sl]
 8009468:	f8da 3000 	ldr.w	r3, [sl]
 800946c:	4499      	add	r9, r3
 800946e:	e7d3      	b.n	8009418 <__cvt+0x68>
 8009470:	1c59      	adds	r1, r3, #1
 8009472:	9107      	str	r1, [sp, #28]
 8009474:	701a      	strb	r2, [r3, #0]
 8009476:	e7d9      	b.n	800942c <__cvt+0x7c>

08009478 <__exponent>:
 8009478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800947a:	2900      	cmp	r1, #0
 800947c:	bfb6      	itet	lt
 800947e:	232d      	movlt	r3, #45	@ 0x2d
 8009480:	232b      	movge	r3, #43	@ 0x2b
 8009482:	4249      	neglt	r1, r1
 8009484:	2909      	cmp	r1, #9
 8009486:	7002      	strb	r2, [r0, #0]
 8009488:	7043      	strb	r3, [r0, #1]
 800948a:	dd29      	ble.n	80094e0 <__exponent+0x68>
 800948c:	f10d 0307 	add.w	r3, sp, #7
 8009490:	461d      	mov	r5, r3
 8009492:	270a      	movs	r7, #10
 8009494:	fbb1 f6f7 	udiv	r6, r1, r7
 8009498:	461a      	mov	r2, r3
 800949a:	fb07 1416 	mls	r4, r7, r6, r1
 800949e:	3430      	adds	r4, #48	@ 0x30
 80094a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80094a4:	460c      	mov	r4, r1
 80094a6:	2c63      	cmp	r4, #99	@ 0x63
 80094a8:	4631      	mov	r1, r6
 80094aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80094ae:	dcf1      	bgt.n	8009494 <__exponent+0x1c>
 80094b0:	3130      	adds	r1, #48	@ 0x30
 80094b2:	1e94      	subs	r4, r2, #2
 80094b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80094b8:	4623      	mov	r3, r4
 80094ba:	1c41      	adds	r1, r0, #1
 80094bc:	42ab      	cmp	r3, r5
 80094be:	d30a      	bcc.n	80094d6 <__exponent+0x5e>
 80094c0:	f10d 0309 	add.w	r3, sp, #9
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	42ac      	cmp	r4, r5
 80094c8:	bf88      	it	hi
 80094ca:	2300      	movhi	r3, #0
 80094cc:	3302      	adds	r3, #2
 80094ce:	4403      	add	r3, r0
 80094d0:	1a18      	subs	r0, r3, r0
 80094d2:	b003      	add	sp, #12
 80094d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80094da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80094de:	e7ed      	b.n	80094bc <__exponent+0x44>
 80094e0:	2330      	movs	r3, #48	@ 0x30
 80094e2:	3130      	adds	r1, #48	@ 0x30
 80094e4:	7083      	strb	r3, [r0, #2]
 80094e6:	70c1      	strb	r1, [r0, #3]
 80094e8:	1d03      	adds	r3, r0, #4
 80094ea:	e7f1      	b.n	80094d0 <__exponent+0x58>

080094ec <_printf_float>:
 80094ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	b091      	sub	sp, #68	@ 0x44
 80094f2:	460c      	mov	r4, r1
 80094f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80094f8:	4616      	mov	r6, r2
 80094fa:	461f      	mov	r7, r3
 80094fc:	4605      	mov	r5, r0
 80094fe:	f001 f807 	bl	800a510 <_localeconv_r>
 8009502:	6803      	ldr	r3, [r0, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	9308      	str	r3, [sp, #32]
 8009508:	f7f6 fe22 	bl	8000150 <strlen>
 800950c:	2300      	movs	r3, #0
 800950e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009510:	f8d8 3000 	ldr.w	r3, [r8]
 8009514:	9009      	str	r0, [sp, #36]	@ 0x24
 8009516:	3307      	adds	r3, #7
 8009518:	f023 0307 	bic.w	r3, r3, #7
 800951c:	f103 0208 	add.w	r2, r3, #8
 8009520:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009524:	f8d4 b000 	ldr.w	fp, [r4]
 8009528:	f8c8 2000 	str.w	r2, [r8]
 800952c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009530:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009534:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009536:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800953a:	f04f 32ff 	mov.w	r2, #4294967295
 800953e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009542:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009546:	4b9c      	ldr	r3, [pc, #624]	@ (80097b8 <_printf_float+0x2cc>)
 8009548:	f7f7 fa60 	bl	8000a0c <__aeabi_dcmpun>
 800954c:	bb70      	cbnz	r0, 80095ac <_printf_float+0xc0>
 800954e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009552:	f04f 32ff 	mov.w	r2, #4294967295
 8009556:	4b98      	ldr	r3, [pc, #608]	@ (80097b8 <_printf_float+0x2cc>)
 8009558:	f7f7 fa3a 	bl	80009d0 <__aeabi_dcmple>
 800955c:	bb30      	cbnz	r0, 80095ac <_printf_float+0xc0>
 800955e:	2200      	movs	r2, #0
 8009560:	2300      	movs	r3, #0
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	f7f7 fa29 	bl	80009bc <__aeabi_dcmplt>
 800956a:	b110      	cbz	r0, 8009572 <_printf_float+0x86>
 800956c:	232d      	movs	r3, #45	@ 0x2d
 800956e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009572:	4a92      	ldr	r2, [pc, #584]	@ (80097bc <_printf_float+0x2d0>)
 8009574:	4b92      	ldr	r3, [pc, #584]	@ (80097c0 <_printf_float+0x2d4>)
 8009576:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800957a:	bf94      	ite	ls
 800957c:	4690      	movls	r8, r2
 800957e:	4698      	movhi	r8, r3
 8009580:	2303      	movs	r3, #3
 8009582:	f04f 0900 	mov.w	r9, #0
 8009586:	6123      	str	r3, [r4, #16]
 8009588:	f02b 0304 	bic.w	r3, fp, #4
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	4633      	mov	r3, r6
 8009590:	4621      	mov	r1, r4
 8009592:	4628      	mov	r0, r5
 8009594:	9700      	str	r7, [sp, #0]
 8009596:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009598:	f000 f9d4 	bl	8009944 <_printf_common>
 800959c:	3001      	adds	r0, #1
 800959e:	f040 8090 	bne.w	80096c2 <_printf_float+0x1d6>
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295
 80095a6:	b011      	add	sp, #68	@ 0x44
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 fa2a 	bl	8000a0c <__aeabi_dcmpun>
 80095b8:	b148      	cbz	r0, 80095ce <_printf_float+0xe2>
 80095ba:	464b      	mov	r3, r9
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfb8      	it	lt
 80095c0:	232d      	movlt	r3, #45	@ 0x2d
 80095c2:	4a80      	ldr	r2, [pc, #512]	@ (80097c4 <_printf_float+0x2d8>)
 80095c4:	bfb8      	it	lt
 80095c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80095ca:	4b7f      	ldr	r3, [pc, #508]	@ (80097c8 <_printf_float+0x2dc>)
 80095cc:	e7d3      	b.n	8009576 <_printf_float+0x8a>
 80095ce:	6863      	ldr	r3, [r4, #4]
 80095d0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	d13f      	bne.n	8009658 <_printf_float+0x16c>
 80095d8:	2306      	movs	r3, #6
 80095da:	6063      	str	r3, [r4, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	9206      	str	r2, [sp, #24]
 80095e6:	aa0e      	add	r2, sp, #56	@ 0x38
 80095e8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80095ec:	aa0d      	add	r2, sp, #52	@ 0x34
 80095ee:	9203      	str	r2, [sp, #12]
 80095f0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80095f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80095f8:	6863      	ldr	r3, [r4, #4]
 80095fa:	4642      	mov	r2, r8
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	4628      	mov	r0, r5
 8009600:	464b      	mov	r3, r9
 8009602:	910a      	str	r1, [sp, #40]	@ 0x28
 8009604:	f7ff fed4 	bl	80093b0 <__cvt>
 8009608:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800960a:	4680      	mov	r8, r0
 800960c:	2947      	cmp	r1, #71	@ 0x47
 800960e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009610:	d128      	bne.n	8009664 <_printf_float+0x178>
 8009612:	1cc8      	adds	r0, r1, #3
 8009614:	db02      	blt.n	800961c <_printf_float+0x130>
 8009616:	6863      	ldr	r3, [r4, #4]
 8009618:	4299      	cmp	r1, r3
 800961a:	dd40      	ble.n	800969e <_printf_float+0x1b2>
 800961c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009620:	fa5f fa8a 	uxtb.w	sl, sl
 8009624:	4652      	mov	r2, sl
 8009626:	3901      	subs	r1, #1
 8009628:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800962c:	910d      	str	r1, [sp, #52]	@ 0x34
 800962e:	f7ff ff23 	bl	8009478 <__exponent>
 8009632:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009634:	4681      	mov	r9, r0
 8009636:	1813      	adds	r3, r2, r0
 8009638:	2a01      	cmp	r2, #1
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	dc02      	bgt.n	8009644 <_printf_float+0x158>
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	07d2      	lsls	r2, r2, #31
 8009642:	d501      	bpl.n	8009648 <_printf_float+0x15c>
 8009644:	3301      	adds	r3, #1
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800964c:	2b00      	cmp	r3, #0
 800964e:	d09e      	beq.n	800958e <_printf_float+0xa2>
 8009650:	232d      	movs	r3, #45	@ 0x2d
 8009652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009656:	e79a      	b.n	800958e <_printf_float+0xa2>
 8009658:	2947      	cmp	r1, #71	@ 0x47
 800965a:	d1bf      	bne.n	80095dc <_printf_float+0xf0>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1bd      	bne.n	80095dc <_printf_float+0xf0>
 8009660:	2301      	movs	r3, #1
 8009662:	e7ba      	b.n	80095da <_printf_float+0xee>
 8009664:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009668:	d9dc      	bls.n	8009624 <_printf_float+0x138>
 800966a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800966e:	d118      	bne.n	80096a2 <_printf_float+0x1b6>
 8009670:	2900      	cmp	r1, #0
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	dd0b      	ble.n	800968e <_printf_float+0x1a2>
 8009676:	6121      	str	r1, [r4, #16]
 8009678:	b913      	cbnz	r3, 8009680 <_printf_float+0x194>
 800967a:	6822      	ldr	r2, [r4, #0]
 800967c:	07d0      	lsls	r0, r2, #31
 800967e:	d502      	bpl.n	8009686 <_printf_float+0x19a>
 8009680:	3301      	adds	r3, #1
 8009682:	440b      	add	r3, r1
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	f04f 0900 	mov.w	r9, #0
 800968a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800968c:	e7dc      	b.n	8009648 <_printf_float+0x15c>
 800968e:	b913      	cbnz	r3, 8009696 <_printf_float+0x1aa>
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	07d2      	lsls	r2, r2, #31
 8009694:	d501      	bpl.n	800969a <_printf_float+0x1ae>
 8009696:	3302      	adds	r3, #2
 8009698:	e7f4      	b.n	8009684 <_printf_float+0x198>
 800969a:	2301      	movs	r3, #1
 800969c:	e7f2      	b.n	8009684 <_printf_float+0x198>
 800969e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80096a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096a4:	4299      	cmp	r1, r3
 80096a6:	db05      	blt.n	80096b4 <_printf_float+0x1c8>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	6121      	str	r1, [r4, #16]
 80096ac:	07d8      	lsls	r0, r3, #31
 80096ae:	d5ea      	bpl.n	8009686 <_printf_float+0x19a>
 80096b0:	1c4b      	adds	r3, r1, #1
 80096b2:	e7e7      	b.n	8009684 <_printf_float+0x198>
 80096b4:	2900      	cmp	r1, #0
 80096b6:	bfcc      	ite	gt
 80096b8:	2201      	movgt	r2, #1
 80096ba:	f1c1 0202 	rsble	r2, r1, #2
 80096be:	4413      	add	r3, r2
 80096c0:	e7e0      	b.n	8009684 <_printf_float+0x198>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	055a      	lsls	r2, r3, #21
 80096c6:	d407      	bmi.n	80096d8 <_printf_float+0x1ec>
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	4642      	mov	r2, r8
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	d12b      	bne.n	800972e <_printf_float+0x242>
 80096d6:	e764      	b.n	80095a2 <_printf_float+0xb6>
 80096d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096dc:	f240 80dc 	bls.w	8009898 <_printf_float+0x3ac>
 80096e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096e4:	2200      	movs	r2, #0
 80096e6:	2300      	movs	r3, #0
 80096e8:	f7f7 f95e 	bl	80009a8 <__aeabi_dcmpeq>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d033      	beq.n	8009758 <_printf_float+0x26c>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4631      	mov	r1, r6
 80096f4:	4628      	mov	r0, r5
 80096f6:	4a35      	ldr	r2, [pc, #212]	@ (80097cc <_printf_float+0x2e0>)
 80096f8:	47b8      	blx	r7
 80096fa:	3001      	adds	r0, #1
 80096fc:	f43f af51 	beq.w	80095a2 <_printf_float+0xb6>
 8009700:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009704:	4543      	cmp	r3, r8
 8009706:	db02      	blt.n	800970e <_printf_float+0x222>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	07d8      	lsls	r0, r3, #31
 800970c:	d50f      	bpl.n	800972e <_printf_float+0x242>
 800970e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	47b8      	blx	r7
 8009718:	3001      	adds	r0, #1
 800971a:	f43f af42 	beq.w	80095a2 <_printf_float+0xb6>
 800971e:	f04f 0900 	mov.w	r9, #0
 8009722:	f108 38ff 	add.w	r8, r8, #4294967295
 8009726:	f104 0a1a 	add.w	sl, r4, #26
 800972a:	45c8      	cmp	r8, r9
 800972c:	dc09      	bgt.n	8009742 <_printf_float+0x256>
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	079b      	lsls	r3, r3, #30
 8009732:	f100 8102 	bmi.w	800993a <_printf_float+0x44e>
 8009736:	68e0      	ldr	r0, [r4, #12]
 8009738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800973a:	4298      	cmp	r0, r3
 800973c:	bfb8      	it	lt
 800973e:	4618      	movlt	r0, r3
 8009740:	e731      	b.n	80095a6 <_printf_float+0xba>
 8009742:	2301      	movs	r3, #1
 8009744:	4652      	mov	r2, sl
 8009746:	4631      	mov	r1, r6
 8009748:	4628      	mov	r0, r5
 800974a:	47b8      	blx	r7
 800974c:	3001      	adds	r0, #1
 800974e:	f43f af28 	beq.w	80095a2 <_printf_float+0xb6>
 8009752:	f109 0901 	add.w	r9, r9, #1
 8009756:	e7e8      	b.n	800972a <_printf_float+0x23e>
 8009758:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800975a:	2b00      	cmp	r3, #0
 800975c:	dc38      	bgt.n	80097d0 <_printf_float+0x2e4>
 800975e:	2301      	movs	r3, #1
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	4a19      	ldr	r2, [pc, #100]	@ (80097cc <_printf_float+0x2e0>)
 8009766:	47b8      	blx	r7
 8009768:	3001      	adds	r0, #1
 800976a:	f43f af1a 	beq.w	80095a2 <_printf_float+0xb6>
 800976e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009772:	ea59 0303 	orrs.w	r3, r9, r3
 8009776:	d102      	bne.n	800977e <_printf_float+0x292>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	07d9      	lsls	r1, r3, #31
 800977c:	d5d7      	bpl.n	800972e <_printf_float+0x242>
 800977e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009782:	4631      	mov	r1, r6
 8009784:	4628      	mov	r0, r5
 8009786:	47b8      	blx	r7
 8009788:	3001      	adds	r0, #1
 800978a:	f43f af0a 	beq.w	80095a2 <_printf_float+0xb6>
 800978e:	f04f 0a00 	mov.w	sl, #0
 8009792:	f104 0b1a 	add.w	fp, r4, #26
 8009796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009798:	425b      	negs	r3, r3
 800979a:	4553      	cmp	r3, sl
 800979c:	dc01      	bgt.n	80097a2 <_printf_float+0x2b6>
 800979e:	464b      	mov	r3, r9
 80097a0:	e793      	b.n	80096ca <_printf_float+0x1de>
 80097a2:	2301      	movs	r3, #1
 80097a4:	465a      	mov	r2, fp
 80097a6:	4631      	mov	r1, r6
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b8      	blx	r7
 80097ac:	3001      	adds	r0, #1
 80097ae:	f43f aef8 	beq.w	80095a2 <_printf_float+0xb6>
 80097b2:	f10a 0a01 	add.w	sl, sl, #1
 80097b6:	e7ee      	b.n	8009796 <_printf_float+0x2aa>
 80097b8:	7fefffff 	.word	0x7fefffff
 80097bc:	0800de33 	.word	0x0800de33
 80097c0:	0800de37 	.word	0x0800de37
 80097c4:	0800de3b 	.word	0x0800de3b
 80097c8:	0800de3f 	.word	0x0800de3f
 80097cc:	0800de43 	.word	0x0800de43
 80097d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097d2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80097d6:	4553      	cmp	r3, sl
 80097d8:	bfa8      	it	ge
 80097da:	4653      	movge	r3, sl
 80097dc:	2b00      	cmp	r3, #0
 80097de:	4699      	mov	r9, r3
 80097e0:	dc36      	bgt.n	8009850 <_printf_float+0x364>
 80097e2:	f04f 0b00 	mov.w	fp, #0
 80097e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097ea:	f104 021a 	add.w	r2, r4, #26
 80097ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f2:	eba3 0309 	sub.w	r3, r3, r9
 80097f6:	455b      	cmp	r3, fp
 80097f8:	dc31      	bgt.n	800985e <_printf_float+0x372>
 80097fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097fc:	459a      	cmp	sl, r3
 80097fe:	dc3a      	bgt.n	8009876 <_printf_float+0x38a>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	07da      	lsls	r2, r3, #31
 8009804:	d437      	bmi.n	8009876 <_printf_float+0x38a>
 8009806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009808:	ebaa 0903 	sub.w	r9, sl, r3
 800980c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800980e:	ebaa 0303 	sub.w	r3, sl, r3
 8009812:	4599      	cmp	r9, r3
 8009814:	bfa8      	it	ge
 8009816:	4699      	movge	r9, r3
 8009818:	f1b9 0f00 	cmp.w	r9, #0
 800981c:	dc33      	bgt.n	8009886 <_printf_float+0x39a>
 800981e:	f04f 0800 	mov.w	r8, #0
 8009822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009826:	f104 0b1a 	add.w	fp, r4, #26
 800982a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800982c:	ebaa 0303 	sub.w	r3, sl, r3
 8009830:	eba3 0309 	sub.w	r3, r3, r9
 8009834:	4543      	cmp	r3, r8
 8009836:	f77f af7a 	ble.w	800972e <_printf_float+0x242>
 800983a:	2301      	movs	r3, #1
 800983c:	465a      	mov	r2, fp
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	f43f aeac 	beq.w	80095a2 <_printf_float+0xb6>
 800984a:	f108 0801 	add.w	r8, r8, #1
 800984e:	e7ec      	b.n	800982a <_printf_float+0x33e>
 8009850:	4642      	mov	r2, r8
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	47b8      	blx	r7
 8009858:	3001      	adds	r0, #1
 800985a:	d1c2      	bne.n	80097e2 <_printf_float+0x2f6>
 800985c:	e6a1      	b.n	80095a2 <_printf_float+0xb6>
 800985e:	2301      	movs	r3, #1
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	920a      	str	r2, [sp, #40]	@ 0x28
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	f43f ae9a 	beq.w	80095a2 <_printf_float+0xb6>
 800986e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009870:	f10b 0b01 	add.w	fp, fp, #1
 8009874:	e7bb      	b.n	80097ee <_printf_float+0x302>
 8009876:	4631      	mov	r1, r6
 8009878:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800987c:	4628      	mov	r0, r5
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	d1c0      	bne.n	8009806 <_printf_float+0x31a>
 8009884:	e68d      	b.n	80095a2 <_printf_float+0xb6>
 8009886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009888:	464b      	mov	r3, r9
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	4442      	add	r2, r8
 8009890:	47b8      	blx	r7
 8009892:	3001      	adds	r0, #1
 8009894:	d1c3      	bne.n	800981e <_printf_float+0x332>
 8009896:	e684      	b.n	80095a2 <_printf_float+0xb6>
 8009898:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800989c:	f1ba 0f01 	cmp.w	sl, #1
 80098a0:	dc01      	bgt.n	80098a6 <_printf_float+0x3ba>
 80098a2:	07db      	lsls	r3, r3, #31
 80098a4:	d536      	bpl.n	8009914 <_printf_float+0x428>
 80098a6:	2301      	movs	r3, #1
 80098a8:	4642      	mov	r2, r8
 80098aa:	4631      	mov	r1, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b8      	blx	r7
 80098b0:	3001      	adds	r0, #1
 80098b2:	f43f ae76 	beq.w	80095a2 <_printf_float+0xb6>
 80098b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098ba:	4631      	mov	r1, r6
 80098bc:	4628      	mov	r0, r5
 80098be:	47b8      	blx	r7
 80098c0:	3001      	adds	r0, #1
 80098c2:	f43f ae6e 	beq.w	80095a2 <_printf_float+0xb6>
 80098c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098ca:	2200      	movs	r2, #0
 80098cc:	2300      	movs	r3, #0
 80098ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098d2:	f7f7 f869 	bl	80009a8 <__aeabi_dcmpeq>
 80098d6:	b9c0      	cbnz	r0, 800990a <_printf_float+0x41e>
 80098d8:	4653      	mov	r3, sl
 80098da:	f108 0201 	add.w	r2, r8, #1
 80098de:	4631      	mov	r1, r6
 80098e0:	4628      	mov	r0, r5
 80098e2:	47b8      	blx	r7
 80098e4:	3001      	adds	r0, #1
 80098e6:	d10c      	bne.n	8009902 <_printf_float+0x416>
 80098e8:	e65b      	b.n	80095a2 <_printf_float+0xb6>
 80098ea:	2301      	movs	r3, #1
 80098ec:	465a      	mov	r2, fp
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b8      	blx	r7
 80098f4:	3001      	adds	r0, #1
 80098f6:	f43f ae54 	beq.w	80095a2 <_printf_float+0xb6>
 80098fa:	f108 0801 	add.w	r8, r8, #1
 80098fe:	45d0      	cmp	r8, sl
 8009900:	dbf3      	blt.n	80098ea <_printf_float+0x3fe>
 8009902:	464b      	mov	r3, r9
 8009904:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009908:	e6e0      	b.n	80096cc <_printf_float+0x1e0>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	f104 0b1a 	add.w	fp, r4, #26
 8009912:	e7f4      	b.n	80098fe <_printf_float+0x412>
 8009914:	2301      	movs	r3, #1
 8009916:	4642      	mov	r2, r8
 8009918:	e7e1      	b.n	80098de <_printf_float+0x3f2>
 800991a:	2301      	movs	r3, #1
 800991c:	464a      	mov	r2, r9
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	47b8      	blx	r7
 8009924:	3001      	adds	r0, #1
 8009926:	f43f ae3c 	beq.w	80095a2 <_printf_float+0xb6>
 800992a:	f108 0801 	add.w	r8, r8, #1
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009932:	1a5b      	subs	r3, r3, r1
 8009934:	4543      	cmp	r3, r8
 8009936:	dcf0      	bgt.n	800991a <_printf_float+0x42e>
 8009938:	e6fd      	b.n	8009736 <_printf_float+0x24a>
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	f104 0919 	add.w	r9, r4, #25
 8009942:	e7f4      	b.n	800992e <_printf_float+0x442>

08009944 <_printf_common>:
 8009944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009948:	4616      	mov	r6, r2
 800994a:	4698      	mov	r8, r3
 800994c:	688a      	ldr	r2, [r1, #8]
 800994e:	690b      	ldr	r3, [r1, #16]
 8009950:	4607      	mov	r7, r0
 8009952:	4293      	cmp	r3, r2
 8009954:	bfb8      	it	lt
 8009956:	4613      	movlt	r3, r2
 8009958:	6033      	str	r3, [r6, #0]
 800995a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800995e:	460c      	mov	r4, r1
 8009960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009964:	b10a      	cbz	r2, 800996a <_printf_common+0x26>
 8009966:	3301      	adds	r3, #1
 8009968:	6033      	str	r3, [r6, #0]
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	0699      	lsls	r1, r3, #26
 800996e:	bf42      	ittt	mi
 8009970:	6833      	ldrmi	r3, [r6, #0]
 8009972:	3302      	addmi	r3, #2
 8009974:	6033      	strmi	r3, [r6, #0]
 8009976:	6825      	ldr	r5, [r4, #0]
 8009978:	f015 0506 	ands.w	r5, r5, #6
 800997c:	d106      	bne.n	800998c <_printf_common+0x48>
 800997e:	f104 0a19 	add.w	sl, r4, #25
 8009982:	68e3      	ldr	r3, [r4, #12]
 8009984:	6832      	ldr	r2, [r6, #0]
 8009986:	1a9b      	subs	r3, r3, r2
 8009988:	42ab      	cmp	r3, r5
 800998a:	dc2b      	bgt.n	80099e4 <_printf_common+0xa0>
 800998c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009990:	6822      	ldr	r2, [r4, #0]
 8009992:	3b00      	subs	r3, #0
 8009994:	bf18      	it	ne
 8009996:	2301      	movne	r3, #1
 8009998:	0692      	lsls	r2, r2, #26
 800999a:	d430      	bmi.n	80099fe <_printf_common+0xba>
 800999c:	4641      	mov	r1, r8
 800999e:	4638      	mov	r0, r7
 80099a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099a4:	47c8      	blx	r9
 80099a6:	3001      	adds	r0, #1
 80099a8:	d023      	beq.n	80099f2 <_printf_common+0xae>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	6922      	ldr	r2, [r4, #16]
 80099ae:	f003 0306 	and.w	r3, r3, #6
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	bf14      	ite	ne
 80099b6:	2500      	movne	r5, #0
 80099b8:	6833      	ldreq	r3, [r6, #0]
 80099ba:	f04f 0600 	mov.w	r6, #0
 80099be:	bf08      	it	eq
 80099c0:	68e5      	ldreq	r5, [r4, #12]
 80099c2:	f104 041a 	add.w	r4, r4, #26
 80099c6:	bf08      	it	eq
 80099c8:	1aed      	subeq	r5, r5, r3
 80099ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80099ce:	bf08      	it	eq
 80099d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099d4:	4293      	cmp	r3, r2
 80099d6:	bfc4      	itt	gt
 80099d8:	1a9b      	subgt	r3, r3, r2
 80099da:	18ed      	addgt	r5, r5, r3
 80099dc:	42b5      	cmp	r5, r6
 80099de:	d11a      	bne.n	8009a16 <_printf_common+0xd2>
 80099e0:	2000      	movs	r0, #0
 80099e2:	e008      	b.n	80099f6 <_printf_common+0xb2>
 80099e4:	2301      	movs	r3, #1
 80099e6:	4652      	mov	r2, sl
 80099e8:	4641      	mov	r1, r8
 80099ea:	4638      	mov	r0, r7
 80099ec:	47c8      	blx	r9
 80099ee:	3001      	adds	r0, #1
 80099f0:	d103      	bne.n	80099fa <_printf_common+0xb6>
 80099f2:	f04f 30ff 	mov.w	r0, #4294967295
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fa:	3501      	adds	r5, #1
 80099fc:	e7c1      	b.n	8009982 <_printf_common+0x3e>
 80099fe:	2030      	movs	r0, #48	@ 0x30
 8009a00:	18e1      	adds	r1, r4, r3
 8009a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a0c:	4422      	add	r2, r4
 8009a0e:	3302      	adds	r3, #2
 8009a10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a14:	e7c2      	b.n	800999c <_printf_common+0x58>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	47c8      	blx	r9
 8009a20:	3001      	adds	r0, #1
 8009a22:	d0e6      	beq.n	80099f2 <_printf_common+0xae>
 8009a24:	3601      	adds	r6, #1
 8009a26:	e7d9      	b.n	80099dc <_printf_common+0x98>

08009a28 <_printf_i>:
 8009a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2c:	7e0f      	ldrb	r7, [r1, #24]
 8009a2e:	4691      	mov	r9, r2
 8009a30:	2f78      	cmp	r7, #120	@ 0x78
 8009a32:	4680      	mov	r8, r0
 8009a34:	460c      	mov	r4, r1
 8009a36:	469a      	mov	sl, r3
 8009a38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a3e:	d807      	bhi.n	8009a50 <_printf_i+0x28>
 8009a40:	2f62      	cmp	r7, #98	@ 0x62
 8009a42:	d80a      	bhi.n	8009a5a <_printf_i+0x32>
 8009a44:	2f00      	cmp	r7, #0
 8009a46:	f000 80d3 	beq.w	8009bf0 <_printf_i+0x1c8>
 8009a4a:	2f58      	cmp	r7, #88	@ 0x58
 8009a4c:	f000 80ba 	beq.w	8009bc4 <_printf_i+0x19c>
 8009a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a58:	e03a      	b.n	8009ad0 <_printf_i+0xa8>
 8009a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a5e:	2b15      	cmp	r3, #21
 8009a60:	d8f6      	bhi.n	8009a50 <_printf_i+0x28>
 8009a62:	a101      	add	r1, pc, #4	@ (adr r1, 8009a68 <_printf_i+0x40>)
 8009a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a68:	08009ac1 	.word	0x08009ac1
 8009a6c:	08009ad5 	.word	0x08009ad5
 8009a70:	08009a51 	.word	0x08009a51
 8009a74:	08009a51 	.word	0x08009a51
 8009a78:	08009a51 	.word	0x08009a51
 8009a7c:	08009a51 	.word	0x08009a51
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009a51 	.word	0x08009a51
 8009a88:	08009a51 	.word	0x08009a51
 8009a8c:	08009a51 	.word	0x08009a51
 8009a90:	08009a51 	.word	0x08009a51
 8009a94:	08009bd7 	.word	0x08009bd7
 8009a98:	08009aff 	.word	0x08009aff
 8009a9c:	08009b91 	.word	0x08009b91
 8009aa0:	08009a51 	.word	0x08009a51
 8009aa4:	08009a51 	.word	0x08009a51
 8009aa8:	08009bf9 	.word	0x08009bf9
 8009aac:	08009a51 	.word	0x08009a51
 8009ab0:	08009aff 	.word	0x08009aff
 8009ab4:	08009a51 	.word	0x08009a51
 8009ab8:	08009a51 	.word	0x08009a51
 8009abc:	08009b99 	.word	0x08009b99
 8009ac0:	6833      	ldr	r3, [r6, #0]
 8009ac2:	1d1a      	adds	r2, r3, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6032      	str	r2, [r6, #0]
 8009ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e09e      	b.n	8009c12 <_printf_i+0x1ea>
 8009ad4:	6833      	ldr	r3, [r6, #0]
 8009ad6:	6820      	ldr	r0, [r4, #0]
 8009ad8:	1d19      	adds	r1, r3, #4
 8009ada:	6031      	str	r1, [r6, #0]
 8009adc:	0606      	lsls	r6, r0, #24
 8009ade:	d501      	bpl.n	8009ae4 <_printf_i+0xbc>
 8009ae0:	681d      	ldr	r5, [r3, #0]
 8009ae2:	e003      	b.n	8009aec <_printf_i+0xc4>
 8009ae4:	0645      	lsls	r5, r0, #25
 8009ae6:	d5fb      	bpl.n	8009ae0 <_printf_i+0xb8>
 8009ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009aec:	2d00      	cmp	r5, #0
 8009aee:	da03      	bge.n	8009af8 <_printf_i+0xd0>
 8009af0:	232d      	movs	r3, #45	@ 0x2d
 8009af2:	426d      	negs	r5, r5
 8009af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009af8:	230a      	movs	r3, #10
 8009afa:	4859      	ldr	r0, [pc, #356]	@ (8009c60 <_printf_i+0x238>)
 8009afc:	e011      	b.n	8009b22 <_printf_i+0xfa>
 8009afe:	6821      	ldr	r1, [r4, #0]
 8009b00:	6833      	ldr	r3, [r6, #0]
 8009b02:	0608      	lsls	r0, r1, #24
 8009b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b08:	d402      	bmi.n	8009b10 <_printf_i+0xe8>
 8009b0a:	0649      	lsls	r1, r1, #25
 8009b0c:	bf48      	it	mi
 8009b0e:	b2ad      	uxthmi	r5, r5
 8009b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b12:	6033      	str	r3, [r6, #0]
 8009b14:	bf14      	ite	ne
 8009b16:	230a      	movne	r3, #10
 8009b18:	2308      	moveq	r3, #8
 8009b1a:	4851      	ldr	r0, [pc, #324]	@ (8009c60 <_printf_i+0x238>)
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b22:	6866      	ldr	r6, [r4, #4]
 8009b24:	2e00      	cmp	r6, #0
 8009b26:	bfa8      	it	ge
 8009b28:	6821      	ldrge	r1, [r4, #0]
 8009b2a:	60a6      	str	r6, [r4, #8]
 8009b2c:	bfa4      	itt	ge
 8009b2e:	f021 0104 	bicge.w	r1, r1, #4
 8009b32:	6021      	strge	r1, [r4, #0]
 8009b34:	b90d      	cbnz	r5, 8009b3a <_printf_i+0x112>
 8009b36:	2e00      	cmp	r6, #0
 8009b38:	d04b      	beq.n	8009bd2 <_printf_i+0x1aa>
 8009b3a:	4616      	mov	r6, r2
 8009b3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b40:	fb03 5711 	mls	r7, r3, r1, r5
 8009b44:	5dc7      	ldrb	r7, [r0, r7]
 8009b46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b4a:	462f      	mov	r7, r5
 8009b4c:	42bb      	cmp	r3, r7
 8009b4e:	460d      	mov	r5, r1
 8009b50:	d9f4      	bls.n	8009b3c <_printf_i+0x114>
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d10b      	bne.n	8009b6e <_printf_i+0x146>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	07df      	lsls	r7, r3, #31
 8009b5a:	d508      	bpl.n	8009b6e <_printf_i+0x146>
 8009b5c:	6923      	ldr	r3, [r4, #16]
 8009b5e:	6861      	ldr	r1, [r4, #4]
 8009b60:	4299      	cmp	r1, r3
 8009b62:	bfde      	ittt	le
 8009b64:	2330      	movle	r3, #48	@ 0x30
 8009b66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b6e:	1b92      	subs	r2, r2, r6
 8009b70:	6122      	str	r2, [r4, #16]
 8009b72:	464b      	mov	r3, r9
 8009b74:	4621      	mov	r1, r4
 8009b76:	4640      	mov	r0, r8
 8009b78:	f8cd a000 	str.w	sl, [sp]
 8009b7c:	aa03      	add	r2, sp, #12
 8009b7e:	f7ff fee1 	bl	8009944 <_printf_common>
 8009b82:	3001      	adds	r0, #1
 8009b84:	d14a      	bne.n	8009c1c <_printf_i+0x1f4>
 8009b86:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8a:	b004      	add	sp, #16
 8009b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	f043 0320 	orr.w	r3, r3, #32
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	2778      	movs	r7, #120	@ 0x78
 8009b9a:	4832      	ldr	r0, [pc, #200]	@ (8009c64 <_printf_i+0x23c>)
 8009b9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	6831      	ldr	r1, [r6, #0]
 8009ba4:	061f      	lsls	r7, r3, #24
 8009ba6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009baa:	d402      	bmi.n	8009bb2 <_printf_i+0x18a>
 8009bac:	065f      	lsls	r7, r3, #25
 8009bae:	bf48      	it	mi
 8009bb0:	b2ad      	uxthmi	r5, r5
 8009bb2:	6031      	str	r1, [r6, #0]
 8009bb4:	07d9      	lsls	r1, r3, #31
 8009bb6:	bf44      	itt	mi
 8009bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8009bbc:	6023      	strmi	r3, [r4, #0]
 8009bbe:	b11d      	cbz	r5, 8009bc8 <_printf_i+0x1a0>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	e7ab      	b.n	8009b1c <_printf_i+0xf4>
 8009bc4:	4826      	ldr	r0, [pc, #152]	@ (8009c60 <_printf_i+0x238>)
 8009bc6:	e7e9      	b.n	8009b9c <_printf_i+0x174>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	f023 0320 	bic.w	r3, r3, #32
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	e7f6      	b.n	8009bc0 <_printf_i+0x198>
 8009bd2:	4616      	mov	r6, r2
 8009bd4:	e7bd      	b.n	8009b52 <_printf_i+0x12a>
 8009bd6:	6833      	ldr	r3, [r6, #0]
 8009bd8:	6825      	ldr	r5, [r4, #0]
 8009bda:	1d18      	adds	r0, r3, #4
 8009bdc:	6961      	ldr	r1, [r4, #20]
 8009bde:	6030      	str	r0, [r6, #0]
 8009be0:	062e      	lsls	r6, r5, #24
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	d501      	bpl.n	8009bea <_printf_i+0x1c2>
 8009be6:	6019      	str	r1, [r3, #0]
 8009be8:	e002      	b.n	8009bf0 <_printf_i+0x1c8>
 8009bea:	0668      	lsls	r0, r5, #25
 8009bec:	d5fb      	bpl.n	8009be6 <_printf_i+0x1be>
 8009bee:	8019      	strh	r1, [r3, #0]
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4616      	mov	r6, r2
 8009bf4:	6123      	str	r3, [r4, #16]
 8009bf6:	e7bc      	b.n	8009b72 <_printf_i+0x14a>
 8009bf8:	6833      	ldr	r3, [r6, #0]
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	1d1a      	adds	r2, r3, #4
 8009bfe:	6032      	str	r2, [r6, #0]
 8009c00:	681e      	ldr	r6, [r3, #0]
 8009c02:	6862      	ldr	r2, [r4, #4]
 8009c04:	4630      	mov	r0, r6
 8009c06:	f000 fd50 	bl	800a6aa <memchr>
 8009c0a:	b108      	cbz	r0, 8009c10 <_printf_i+0x1e8>
 8009c0c:	1b80      	subs	r0, r0, r6
 8009c0e:	6060      	str	r0, [r4, #4]
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	6123      	str	r3, [r4, #16]
 8009c14:	2300      	movs	r3, #0
 8009c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c1a:	e7aa      	b.n	8009b72 <_printf_i+0x14a>
 8009c1c:	4632      	mov	r2, r6
 8009c1e:	4649      	mov	r1, r9
 8009c20:	4640      	mov	r0, r8
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	47d0      	blx	sl
 8009c26:	3001      	adds	r0, #1
 8009c28:	d0ad      	beq.n	8009b86 <_printf_i+0x15e>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	079b      	lsls	r3, r3, #30
 8009c2e:	d413      	bmi.n	8009c58 <_printf_i+0x230>
 8009c30:	68e0      	ldr	r0, [r4, #12]
 8009c32:	9b03      	ldr	r3, [sp, #12]
 8009c34:	4298      	cmp	r0, r3
 8009c36:	bfb8      	it	lt
 8009c38:	4618      	movlt	r0, r3
 8009c3a:	e7a6      	b.n	8009b8a <_printf_i+0x162>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4632      	mov	r2, r6
 8009c40:	4649      	mov	r1, r9
 8009c42:	4640      	mov	r0, r8
 8009c44:	47d0      	blx	sl
 8009c46:	3001      	adds	r0, #1
 8009c48:	d09d      	beq.n	8009b86 <_printf_i+0x15e>
 8009c4a:	3501      	adds	r5, #1
 8009c4c:	68e3      	ldr	r3, [r4, #12]
 8009c4e:	9903      	ldr	r1, [sp, #12]
 8009c50:	1a5b      	subs	r3, r3, r1
 8009c52:	42ab      	cmp	r3, r5
 8009c54:	dcf2      	bgt.n	8009c3c <_printf_i+0x214>
 8009c56:	e7eb      	b.n	8009c30 <_printf_i+0x208>
 8009c58:	2500      	movs	r5, #0
 8009c5a:	f104 0619 	add.w	r6, r4, #25
 8009c5e:	e7f5      	b.n	8009c4c <_printf_i+0x224>
 8009c60:	0800de45 	.word	0x0800de45
 8009c64:	0800de56 	.word	0x0800de56

08009c68 <_scanf_float>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	b087      	sub	sp, #28
 8009c6e:	9303      	str	r3, [sp, #12]
 8009c70:	688b      	ldr	r3, [r1, #8]
 8009c72:	4617      	mov	r7, r2
 8009c74:	1e5a      	subs	r2, r3, #1
 8009c76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009c7a:	bf82      	ittt	hi
 8009c7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009c80:	eb03 0b05 	addhi.w	fp, r3, r5
 8009c84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009c88:	460a      	mov	r2, r1
 8009c8a:	f04f 0500 	mov.w	r5, #0
 8009c8e:	bf88      	it	hi
 8009c90:	608b      	strhi	r3, [r1, #8]
 8009c92:	680b      	ldr	r3, [r1, #0]
 8009c94:	4680      	mov	r8, r0
 8009c96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009c9a:	f842 3b1c 	str.w	r3, [r2], #28
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	bf98      	it	ls
 8009ca2:	f04f 0b00 	movls.w	fp, #0
 8009ca6:	4616      	mov	r6, r2
 8009ca8:	46aa      	mov	sl, r5
 8009caa:	46a9      	mov	r9, r5
 8009cac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009cb0:	9201      	str	r2, [sp, #4]
 8009cb2:	9502      	str	r5, [sp, #8]
 8009cb4:	68a2      	ldr	r2, [r4, #8]
 8009cb6:	b152      	cbz	r2, 8009cce <_scanf_float+0x66>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	2b4e      	cmp	r3, #78	@ 0x4e
 8009cbe:	d865      	bhi.n	8009d8c <_scanf_float+0x124>
 8009cc0:	2b40      	cmp	r3, #64	@ 0x40
 8009cc2:	d83d      	bhi.n	8009d40 <_scanf_float+0xd8>
 8009cc4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009cc8:	b2c8      	uxtb	r0, r1
 8009cca:	280e      	cmp	r0, #14
 8009ccc:	d93b      	bls.n	8009d46 <_scanf_float+0xde>
 8009cce:	f1b9 0f00 	cmp.w	r9, #0
 8009cd2:	d003      	beq.n	8009cdc <_scanf_float+0x74>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ce0:	f1ba 0f01 	cmp.w	sl, #1
 8009ce4:	f200 8118 	bhi.w	8009f18 <_scanf_float+0x2b0>
 8009ce8:	9b01      	ldr	r3, [sp, #4]
 8009cea:	429e      	cmp	r6, r3
 8009cec:	f200 8109 	bhi.w	8009f02 <_scanf_float+0x29a>
 8009cf0:	2001      	movs	r0, #1
 8009cf2:	b007      	add	sp, #28
 8009cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009cfc:	2a0d      	cmp	r2, #13
 8009cfe:	d8e6      	bhi.n	8009cce <_scanf_float+0x66>
 8009d00:	a101      	add	r1, pc, #4	@ (adr r1, 8009d08 <_scanf_float+0xa0>)
 8009d02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009e4f 	.word	0x08009e4f
 8009d0c:	08009ccf 	.word	0x08009ccf
 8009d10:	08009ccf 	.word	0x08009ccf
 8009d14:	08009ccf 	.word	0x08009ccf
 8009d18:	08009eaf 	.word	0x08009eaf
 8009d1c:	08009e87 	.word	0x08009e87
 8009d20:	08009ccf 	.word	0x08009ccf
 8009d24:	08009ccf 	.word	0x08009ccf
 8009d28:	08009e5d 	.word	0x08009e5d
 8009d2c:	08009ccf 	.word	0x08009ccf
 8009d30:	08009ccf 	.word	0x08009ccf
 8009d34:	08009ccf 	.word	0x08009ccf
 8009d38:	08009ccf 	.word	0x08009ccf
 8009d3c:	08009e15 	.word	0x08009e15
 8009d40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009d44:	e7da      	b.n	8009cfc <_scanf_float+0x94>
 8009d46:	290e      	cmp	r1, #14
 8009d48:	d8c1      	bhi.n	8009cce <_scanf_float+0x66>
 8009d4a:	a001      	add	r0, pc, #4	@ (adr r0, 8009d50 <_scanf_float+0xe8>)
 8009d4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d50:	08009e05 	.word	0x08009e05
 8009d54:	08009ccf 	.word	0x08009ccf
 8009d58:	08009e05 	.word	0x08009e05
 8009d5c:	08009e9b 	.word	0x08009e9b
 8009d60:	08009ccf 	.word	0x08009ccf
 8009d64:	08009dad 	.word	0x08009dad
 8009d68:	08009deb 	.word	0x08009deb
 8009d6c:	08009deb 	.word	0x08009deb
 8009d70:	08009deb 	.word	0x08009deb
 8009d74:	08009deb 	.word	0x08009deb
 8009d78:	08009deb 	.word	0x08009deb
 8009d7c:	08009deb 	.word	0x08009deb
 8009d80:	08009deb 	.word	0x08009deb
 8009d84:	08009deb 	.word	0x08009deb
 8009d88:	08009deb 	.word	0x08009deb
 8009d8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009d8e:	d809      	bhi.n	8009da4 <_scanf_float+0x13c>
 8009d90:	2b60      	cmp	r3, #96	@ 0x60
 8009d92:	d8b1      	bhi.n	8009cf8 <_scanf_float+0x90>
 8009d94:	2b54      	cmp	r3, #84	@ 0x54
 8009d96:	d07b      	beq.n	8009e90 <_scanf_float+0x228>
 8009d98:	2b59      	cmp	r3, #89	@ 0x59
 8009d9a:	d198      	bne.n	8009cce <_scanf_float+0x66>
 8009d9c:	2d07      	cmp	r5, #7
 8009d9e:	d196      	bne.n	8009cce <_scanf_float+0x66>
 8009da0:	2508      	movs	r5, #8
 8009da2:	e02c      	b.n	8009dfe <_scanf_float+0x196>
 8009da4:	2b74      	cmp	r3, #116	@ 0x74
 8009da6:	d073      	beq.n	8009e90 <_scanf_float+0x228>
 8009da8:	2b79      	cmp	r3, #121	@ 0x79
 8009daa:	e7f6      	b.n	8009d9a <_scanf_float+0x132>
 8009dac:	6821      	ldr	r1, [r4, #0]
 8009dae:	05c8      	lsls	r0, r1, #23
 8009db0:	d51b      	bpl.n	8009dea <_scanf_float+0x182>
 8009db2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009db6:	6021      	str	r1, [r4, #0]
 8009db8:	f109 0901 	add.w	r9, r9, #1
 8009dbc:	f1bb 0f00 	cmp.w	fp, #0
 8009dc0:	d003      	beq.n	8009dca <_scanf_float+0x162>
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dc8:	60a2      	str	r2, [r4, #8]
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	6123      	str	r3, [r4, #16]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	f340 8087 	ble.w	8009ef0 <_scanf_float+0x288>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	e764      	b.n	8009cb4 <_scanf_float+0x4c>
 8009dea:	eb1a 0105 	adds.w	r1, sl, r5
 8009dee:	f47f af6e 	bne.w	8009cce <_scanf_float+0x66>
 8009df2:	460d      	mov	r5, r1
 8009df4:	468a      	mov	sl, r1
 8009df6:	6822      	ldr	r2, [r4, #0]
 8009df8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009dfc:	6022      	str	r2, [r4, #0]
 8009dfe:	f806 3b01 	strb.w	r3, [r6], #1
 8009e02:	e7e2      	b.n	8009dca <_scanf_float+0x162>
 8009e04:	6822      	ldr	r2, [r4, #0]
 8009e06:	0610      	lsls	r0, r2, #24
 8009e08:	f57f af61 	bpl.w	8009cce <_scanf_float+0x66>
 8009e0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e10:	6022      	str	r2, [r4, #0]
 8009e12:	e7f4      	b.n	8009dfe <_scanf_float+0x196>
 8009e14:	f1ba 0f00 	cmp.w	sl, #0
 8009e18:	d10e      	bne.n	8009e38 <_scanf_float+0x1d0>
 8009e1a:	f1b9 0f00 	cmp.w	r9, #0
 8009e1e:	d10e      	bne.n	8009e3e <_scanf_float+0x1d6>
 8009e20:	6822      	ldr	r2, [r4, #0]
 8009e22:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009e26:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009e2a:	d108      	bne.n	8009e3e <_scanf_float+0x1d6>
 8009e2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e30:	f04f 0a01 	mov.w	sl, #1
 8009e34:	6022      	str	r2, [r4, #0]
 8009e36:	e7e2      	b.n	8009dfe <_scanf_float+0x196>
 8009e38:	f1ba 0f02 	cmp.w	sl, #2
 8009e3c:	d055      	beq.n	8009eea <_scanf_float+0x282>
 8009e3e:	2d01      	cmp	r5, #1
 8009e40:	d002      	beq.n	8009e48 <_scanf_float+0x1e0>
 8009e42:	2d04      	cmp	r5, #4
 8009e44:	f47f af43 	bne.w	8009cce <_scanf_float+0x66>
 8009e48:	3501      	adds	r5, #1
 8009e4a:	b2ed      	uxtb	r5, r5
 8009e4c:	e7d7      	b.n	8009dfe <_scanf_float+0x196>
 8009e4e:	f1ba 0f01 	cmp.w	sl, #1
 8009e52:	f47f af3c 	bne.w	8009cce <_scanf_float+0x66>
 8009e56:	f04f 0a02 	mov.w	sl, #2
 8009e5a:	e7d0      	b.n	8009dfe <_scanf_float+0x196>
 8009e5c:	b97d      	cbnz	r5, 8009e7e <_scanf_float+0x216>
 8009e5e:	f1b9 0f00 	cmp.w	r9, #0
 8009e62:	f47f af37 	bne.w	8009cd4 <_scanf_float+0x6c>
 8009e66:	6822      	ldr	r2, [r4, #0]
 8009e68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009e6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009e70:	f040 8103 	bne.w	800a07a <_scanf_float+0x412>
 8009e74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e78:	2501      	movs	r5, #1
 8009e7a:	6022      	str	r2, [r4, #0]
 8009e7c:	e7bf      	b.n	8009dfe <_scanf_float+0x196>
 8009e7e:	2d03      	cmp	r5, #3
 8009e80:	d0e2      	beq.n	8009e48 <_scanf_float+0x1e0>
 8009e82:	2d05      	cmp	r5, #5
 8009e84:	e7de      	b.n	8009e44 <_scanf_float+0x1dc>
 8009e86:	2d02      	cmp	r5, #2
 8009e88:	f47f af21 	bne.w	8009cce <_scanf_float+0x66>
 8009e8c:	2503      	movs	r5, #3
 8009e8e:	e7b6      	b.n	8009dfe <_scanf_float+0x196>
 8009e90:	2d06      	cmp	r5, #6
 8009e92:	f47f af1c 	bne.w	8009cce <_scanf_float+0x66>
 8009e96:	2507      	movs	r5, #7
 8009e98:	e7b1      	b.n	8009dfe <_scanf_float+0x196>
 8009e9a:	6822      	ldr	r2, [r4, #0]
 8009e9c:	0591      	lsls	r1, r2, #22
 8009e9e:	f57f af16 	bpl.w	8009cce <_scanf_float+0x66>
 8009ea2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009ea6:	6022      	str	r2, [r4, #0]
 8009ea8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009eac:	e7a7      	b.n	8009dfe <_scanf_float+0x196>
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009eb4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009eb8:	d006      	beq.n	8009ec8 <_scanf_float+0x260>
 8009eba:	0550      	lsls	r0, r2, #21
 8009ebc:	f57f af07 	bpl.w	8009cce <_scanf_float+0x66>
 8009ec0:	f1b9 0f00 	cmp.w	r9, #0
 8009ec4:	f000 80d9 	beq.w	800a07a <_scanf_float+0x412>
 8009ec8:	0591      	lsls	r1, r2, #22
 8009eca:	bf58      	it	pl
 8009ecc:	9902      	ldrpl	r1, [sp, #8]
 8009ece:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ed2:	bf58      	it	pl
 8009ed4:	eba9 0101 	subpl.w	r1, r9, r1
 8009ed8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009edc:	f04f 0900 	mov.w	r9, #0
 8009ee0:	bf58      	it	pl
 8009ee2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ee6:	6022      	str	r2, [r4, #0]
 8009ee8:	e789      	b.n	8009dfe <_scanf_float+0x196>
 8009eea:	f04f 0a03 	mov.w	sl, #3
 8009eee:	e786      	b.n	8009dfe <_scanf_float+0x196>
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ef8:	4798      	blx	r3
 8009efa:	2800      	cmp	r0, #0
 8009efc:	f43f aeda 	beq.w	8009cb4 <_scanf_float+0x4c>
 8009f00:	e6e5      	b.n	8009cce <_scanf_float+0x66>
 8009f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f06:	463a      	mov	r2, r7
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f0e:	4798      	blx	r3
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	3b01      	subs	r3, #1
 8009f14:	6123      	str	r3, [r4, #16]
 8009f16:	e6e7      	b.n	8009ce8 <_scanf_float+0x80>
 8009f18:	1e6b      	subs	r3, r5, #1
 8009f1a:	2b06      	cmp	r3, #6
 8009f1c:	d824      	bhi.n	8009f68 <_scanf_float+0x300>
 8009f1e:	2d02      	cmp	r5, #2
 8009f20:	d836      	bhi.n	8009f90 <_scanf_float+0x328>
 8009f22:	9b01      	ldr	r3, [sp, #4]
 8009f24:	429e      	cmp	r6, r3
 8009f26:	f67f aee3 	bls.w	8009cf0 <_scanf_float+0x88>
 8009f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f2e:	463a      	mov	r2, r7
 8009f30:	4640      	mov	r0, r8
 8009f32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f36:	4798      	blx	r3
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	6123      	str	r3, [r4, #16]
 8009f3e:	e7f0      	b.n	8009f22 <_scanf_float+0x2ba>
 8009f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f44:	463a      	mov	r2, r7
 8009f46:	4640      	mov	r0, r8
 8009f48:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009f4c:	4798      	blx	r3
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	6123      	str	r3, [r4, #16]
 8009f54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f58:	fa5f fa8a 	uxtb.w	sl, sl
 8009f5c:	f1ba 0f02 	cmp.w	sl, #2
 8009f60:	d1ee      	bne.n	8009f40 <_scanf_float+0x2d8>
 8009f62:	3d03      	subs	r5, #3
 8009f64:	b2ed      	uxtb	r5, r5
 8009f66:	1b76      	subs	r6, r6, r5
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	05da      	lsls	r2, r3, #23
 8009f6c:	d530      	bpl.n	8009fd0 <_scanf_float+0x368>
 8009f6e:	055b      	lsls	r3, r3, #21
 8009f70:	d511      	bpl.n	8009f96 <_scanf_float+0x32e>
 8009f72:	9b01      	ldr	r3, [sp, #4]
 8009f74:	429e      	cmp	r6, r3
 8009f76:	f67f aebb 	bls.w	8009cf0 <_scanf_float+0x88>
 8009f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f7e:	463a      	mov	r2, r7
 8009f80:	4640      	mov	r0, r8
 8009f82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f86:	4798      	blx	r3
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	e7f0      	b.n	8009f72 <_scanf_float+0x30a>
 8009f90:	46aa      	mov	sl, r5
 8009f92:	46b3      	mov	fp, r6
 8009f94:	e7de      	b.n	8009f54 <_scanf_float+0x2ec>
 8009f96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	2965      	cmp	r1, #101	@ 0x65
 8009f9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fa2:	f106 35ff 	add.w	r5, r6, #4294967295
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	d00c      	beq.n	8009fc4 <_scanf_float+0x35c>
 8009faa:	2945      	cmp	r1, #69	@ 0x45
 8009fac:	d00a      	beq.n	8009fc4 <_scanf_float+0x35c>
 8009fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fb2:	463a      	mov	r2, r7
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	4798      	blx	r3
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	1eb5      	subs	r5, r6, #2
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	463a      	mov	r2, r7
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fcc:	4798      	blx	r3
 8009fce:	462e      	mov	r6, r5
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	f012 0210 	ands.w	r2, r2, #16
 8009fd6:	d001      	beq.n	8009fdc <_scanf_float+0x374>
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e68a      	b.n	8009cf2 <_scanf_float+0x8a>
 8009fdc:	7032      	strb	r2, [r6, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fe8:	d11c      	bne.n	800a024 <_scanf_float+0x3bc>
 8009fea:	9b02      	ldr	r3, [sp, #8]
 8009fec:	454b      	cmp	r3, r9
 8009fee:	eba3 0209 	sub.w	r2, r3, r9
 8009ff2:	d123      	bne.n	800a03c <_scanf_float+0x3d4>
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	9901      	ldr	r1, [sp, #4]
 8009ffa:	f002 fd69 	bl	800cad0 <_strtod_r>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	6825      	ldr	r5, [r4, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f015 0f02 	tst.w	r5, #2
 800a008:	4606      	mov	r6, r0
 800a00a:	460f      	mov	r7, r1
 800a00c:	f103 0204 	add.w	r2, r3, #4
 800a010:	d01f      	beq.n	800a052 <_scanf_float+0x3ea>
 800a012:	9903      	ldr	r1, [sp, #12]
 800a014:	600a      	str	r2, [r1, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	e9c3 6700 	strd	r6, r7, [r3]
 800a01c:	68e3      	ldr	r3, [r4, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60e3      	str	r3, [r4, #12]
 800a022:	e7d9      	b.n	8009fd8 <_scanf_float+0x370>
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0e4      	beq.n	8009ff4 <_scanf_float+0x38c>
 800a02a:	9905      	ldr	r1, [sp, #20]
 800a02c:	230a      	movs	r3, #10
 800a02e:	4640      	mov	r0, r8
 800a030:	3101      	adds	r1, #1
 800a032:	f7ff f9b1 	bl	8009398 <_strtol_r>
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	9e05      	ldr	r6, [sp, #20]
 800a03a:	1ac2      	subs	r2, r0, r3
 800a03c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a040:	429e      	cmp	r6, r3
 800a042:	bf28      	it	cs
 800a044:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a048:	4630      	mov	r0, r6
 800a04a:	490d      	ldr	r1, [pc, #52]	@ (800a080 <_scanf_float+0x418>)
 800a04c:	f000 f94e 	bl	800a2ec <siprintf>
 800a050:	e7d0      	b.n	8009ff4 <_scanf_float+0x38c>
 800a052:	076d      	lsls	r5, r5, #29
 800a054:	d4dd      	bmi.n	800a012 <_scanf_float+0x3aa>
 800a056:	9d03      	ldr	r5, [sp, #12]
 800a058:	602a      	str	r2, [r5, #0]
 800a05a:	681d      	ldr	r5, [r3, #0]
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	f7f6 fcd4 	bl	8000a0c <__aeabi_dcmpun>
 800a064:	b120      	cbz	r0, 800a070 <_scanf_float+0x408>
 800a066:	4807      	ldr	r0, [pc, #28]	@ (800a084 <_scanf_float+0x41c>)
 800a068:	f000 fb3c 	bl	800a6e4 <nanf>
 800a06c:	6028      	str	r0, [r5, #0]
 800a06e:	e7d5      	b.n	800a01c <_scanf_float+0x3b4>
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fd28 	bl	8000ac8 <__aeabi_d2f>
 800a078:	e7f8      	b.n	800a06c <_scanf_float+0x404>
 800a07a:	f04f 0900 	mov.w	r9, #0
 800a07e:	e62d      	b.n	8009cdc <_scanf_float+0x74>
 800a080:	0800de67 	.word	0x0800de67
 800a084:	0800e0fc 	.word	0x0800e0fc

0800a088 <std>:
 800a088:	2300      	movs	r3, #0
 800a08a:	b510      	push	{r4, lr}
 800a08c:	4604      	mov	r4, r0
 800a08e:	e9c0 3300 	strd	r3, r3, [r0]
 800a092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a096:	6083      	str	r3, [r0, #8]
 800a098:	8181      	strh	r1, [r0, #12]
 800a09a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a09c:	81c2      	strh	r2, [r0, #14]
 800a09e:	6183      	str	r3, [r0, #24]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	2208      	movs	r2, #8
 800a0a4:	305c      	adds	r0, #92	@ 0x5c
 800a0a6:	f000 fa19 	bl	800a4dc <memset>
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e0 <std+0x58>)
 800a0ac:	6224      	str	r4, [r4, #32]
 800a0ae:	6263      	str	r3, [r4, #36]	@ 0x24
 800a0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e4 <std+0x5c>)
 800a0b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e8 <std+0x60>)
 800a0b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ec <std+0x64>)
 800a0ba:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f0 <std+0x68>)
 800a0be:	429c      	cmp	r4, r3
 800a0c0:	d006      	beq.n	800a0d0 <std+0x48>
 800a0c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0c6:	4294      	cmp	r4, r2
 800a0c8:	d002      	beq.n	800a0d0 <std+0x48>
 800a0ca:	33d0      	adds	r3, #208	@ 0xd0
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	d105      	bne.n	800a0dc <std+0x54>
 800a0d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d8:	f000 bae4 	b.w	800a6a4 <__retarget_lock_init_recursive>
 800a0dc:	bd10      	pop	{r4, pc}
 800a0de:	bf00      	nop
 800a0e0:	0800a32d 	.word	0x0800a32d
 800a0e4:	0800a34f 	.word	0x0800a34f
 800a0e8:	0800a387 	.word	0x0800a387
 800a0ec:	0800a3ab 	.word	0x0800a3ab
 800a0f0:	20001e14 	.word	0x20001e14

0800a0f4 <stdio_exit_handler>:
 800a0f4:	4a02      	ldr	r2, [pc, #8]	@ (800a100 <stdio_exit_handler+0xc>)
 800a0f6:	4903      	ldr	r1, [pc, #12]	@ (800a104 <stdio_exit_handler+0x10>)
 800a0f8:	4803      	ldr	r0, [pc, #12]	@ (800a108 <stdio_exit_handler+0x14>)
 800a0fa:	f000 b869 	b.w	800a1d0 <_fwalk_sglue>
 800a0fe:	bf00      	nop
 800a100:	20000018 	.word	0x20000018
 800a104:	0800d10d 	.word	0x0800d10d
 800a108:	20000028 	.word	0x20000028

0800a10c <cleanup_stdio>:
 800a10c:	6841      	ldr	r1, [r0, #4]
 800a10e:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <cleanup_stdio+0x34>)
 800a110:	b510      	push	{r4, lr}
 800a112:	4299      	cmp	r1, r3
 800a114:	4604      	mov	r4, r0
 800a116:	d001      	beq.n	800a11c <cleanup_stdio+0x10>
 800a118:	f002 fff8 	bl	800d10c <_fflush_r>
 800a11c:	68a1      	ldr	r1, [r4, #8]
 800a11e:	4b09      	ldr	r3, [pc, #36]	@ (800a144 <cleanup_stdio+0x38>)
 800a120:	4299      	cmp	r1, r3
 800a122:	d002      	beq.n	800a12a <cleanup_stdio+0x1e>
 800a124:	4620      	mov	r0, r4
 800a126:	f002 fff1 	bl	800d10c <_fflush_r>
 800a12a:	68e1      	ldr	r1, [r4, #12]
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <cleanup_stdio+0x3c>)
 800a12e:	4299      	cmp	r1, r3
 800a130:	d004      	beq.n	800a13c <cleanup_stdio+0x30>
 800a132:	4620      	mov	r0, r4
 800a134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a138:	f002 bfe8 	b.w	800d10c <_fflush_r>
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	bf00      	nop
 800a140:	20001e14 	.word	0x20001e14
 800a144:	20001e7c 	.word	0x20001e7c
 800a148:	20001ee4 	.word	0x20001ee4

0800a14c <global_stdio_init.part.0>:
 800a14c:	b510      	push	{r4, lr}
 800a14e:	4b0b      	ldr	r3, [pc, #44]	@ (800a17c <global_stdio_init.part.0+0x30>)
 800a150:	4c0b      	ldr	r4, [pc, #44]	@ (800a180 <global_stdio_init.part.0+0x34>)
 800a152:	4a0c      	ldr	r2, [pc, #48]	@ (800a184 <global_stdio_init.part.0+0x38>)
 800a154:	4620      	mov	r0, r4
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	2104      	movs	r1, #4
 800a15a:	2200      	movs	r2, #0
 800a15c:	f7ff ff94 	bl	800a088 <std>
 800a160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a164:	2201      	movs	r2, #1
 800a166:	2109      	movs	r1, #9
 800a168:	f7ff ff8e 	bl	800a088 <std>
 800a16c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a170:	2202      	movs	r2, #2
 800a172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a176:	2112      	movs	r1, #18
 800a178:	f7ff bf86 	b.w	800a088 <std>
 800a17c:	20001f4c 	.word	0x20001f4c
 800a180:	20001e14 	.word	0x20001e14
 800a184:	0800a0f5 	.word	0x0800a0f5

0800a188 <__sfp_lock_acquire>:
 800a188:	4801      	ldr	r0, [pc, #4]	@ (800a190 <__sfp_lock_acquire+0x8>)
 800a18a:	f000 ba8c 	b.w	800a6a6 <__retarget_lock_acquire_recursive>
 800a18e:	bf00      	nop
 800a190:	20001f55 	.word	0x20001f55

0800a194 <__sfp_lock_release>:
 800a194:	4801      	ldr	r0, [pc, #4]	@ (800a19c <__sfp_lock_release+0x8>)
 800a196:	f000 ba87 	b.w	800a6a8 <__retarget_lock_release_recursive>
 800a19a:	bf00      	nop
 800a19c:	20001f55 	.word	0x20001f55

0800a1a0 <__sinit>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	f7ff fff0 	bl	800a188 <__sfp_lock_acquire>
 800a1a8:	6a23      	ldr	r3, [r4, #32]
 800a1aa:	b11b      	cbz	r3, 800a1b4 <__sinit+0x14>
 800a1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b0:	f7ff bff0 	b.w	800a194 <__sfp_lock_release>
 800a1b4:	4b04      	ldr	r3, [pc, #16]	@ (800a1c8 <__sinit+0x28>)
 800a1b6:	6223      	str	r3, [r4, #32]
 800a1b8:	4b04      	ldr	r3, [pc, #16]	@ (800a1cc <__sinit+0x2c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1f5      	bne.n	800a1ac <__sinit+0xc>
 800a1c0:	f7ff ffc4 	bl	800a14c <global_stdio_init.part.0>
 800a1c4:	e7f2      	b.n	800a1ac <__sinit+0xc>
 800a1c6:	bf00      	nop
 800a1c8:	0800a10d 	.word	0x0800a10d
 800a1cc:	20001f4c 	.word	0x20001f4c

0800a1d0 <_fwalk_sglue>:
 800a1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	4688      	mov	r8, r1
 800a1d8:	4614      	mov	r4, r2
 800a1da:	2600      	movs	r6, #0
 800a1dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a1e4:	d505      	bpl.n	800a1f2 <_fwalk_sglue+0x22>
 800a1e6:	6824      	ldr	r4, [r4, #0]
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d1f7      	bne.n	800a1dc <_fwalk_sglue+0xc>
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d907      	bls.n	800a208 <_fwalk_sglue+0x38>
 800a1f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	d003      	beq.n	800a208 <_fwalk_sglue+0x38>
 800a200:	4629      	mov	r1, r5
 800a202:	4638      	mov	r0, r7
 800a204:	47c0      	blx	r8
 800a206:	4306      	orrs	r6, r0
 800a208:	3568      	adds	r5, #104	@ 0x68
 800a20a:	e7e9      	b.n	800a1e0 <_fwalk_sglue+0x10>

0800a20c <iprintf>:
 800a20c:	b40f      	push	{r0, r1, r2, r3}
 800a20e:	b507      	push	{r0, r1, r2, lr}
 800a210:	4906      	ldr	r1, [pc, #24]	@ (800a22c <iprintf+0x20>)
 800a212:	ab04      	add	r3, sp, #16
 800a214:	6808      	ldr	r0, [r1, #0]
 800a216:	f853 2b04 	ldr.w	r2, [r3], #4
 800a21a:	6881      	ldr	r1, [r0, #8]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	f002 fddd 	bl	800cddc <_vfiprintf_r>
 800a222:	b003      	add	sp, #12
 800a224:	f85d eb04 	ldr.w	lr, [sp], #4
 800a228:	b004      	add	sp, #16
 800a22a:	4770      	bx	lr
 800a22c:	20000024 	.word	0x20000024

0800a230 <_puts_r>:
 800a230:	6a03      	ldr	r3, [r0, #32]
 800a232:	b570      	push	{r4, r5, r6, lr}
 800a234:	4605      	mov	r5, r0
 800a236:	460e      	mov	r6, r1
 800a238:	6884      	ldr	r4, [r0, #8]
 800a23a:	b90b      	cbnz	r3, 800a240 <_puts_r+0x10>
 800a23c:	f7ff ffb0 	bl	800a1a0 <__sinit>
 800a240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a242:	07db      	lsls	r3, r3, #31
 800a244:	d405      	bmi.n	800a252 <_puts_r+0x22>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	0598      	lsls	r0, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_puts_r+0x22>
 800a24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a24e:	f000 fa2a 	bl	800a6a6 <__retarget_lock_acquire_recursive>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	0719      	lsls	r1, r3, #28
 800a256:	d502      	bpl.n	800a25e <_puts_r+0x2e>
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d135      	bne.n	800a2ca <_puts_r+0x9a>
 800a25e:	4621      	mov	r1, r4
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f8e5 	bl	800a430 <__swsetup_r>
 800a266:	b380      	cbz	r0, 800a2ca <_puts_r+0x9a>
 800a268:	f04f 35ff 	mov.w	r5, #4294967295
 800a26c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a26e:	07da      	lsls	r2, r3, #31
 800a270:	d405      	bmi.n	800a27e <_puts_r+0x4e>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	059b      	lsls	r3, r3, #22
 800a276:	d402      	bmi.n	800a27e <_puts_r+0x4e>
 800a278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a27a:	f000 fa15 	bl	800a6a8 <__retarget_lock_release_recursive>
 800a27e:	4628      	mov	r0, r5
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	2b00      	cmp	r3, #0
 800a284:	da04      	bge.n	800a290 <_puts_r+0x60>
 800a286:	69a2      	ldr	r2, [r4, #24]
 800a288:	429a      	cmp	r2, r3
 800a28a:	dc17      	bgt.n	800a2bc <_puts_r+0x8c>
 800a28c:	290a      	cmp	r1, #10
 800a28e:	d015      	beq.n	800a2bc <_puts_r+0x8c>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	6022      	str	r2, [r4, #0]
 800a296:	7019      	strb	r1, [r3, #0]
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	60a3      	str	r3, [r4, #8]
 800a2a2:	2900      	cmp	r1, #0
 800a2a4:	d1ed      	bne.n	800a282 <_puts_r+0x52>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	da11      	bge.n	800a2ce <_puts_r+0x9e>
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	210a      	movs	r1, #10
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 f87f 	bl	800a3b2 <__swbuf_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d0d7      	beq.n	800a268 <_puts_r+0x38>
 800a2b8:	250a      	movs	r5, #10
 800a2ba:	e7d7      	b.n	800a26c <_puts_r+0x3c>
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f877 	bl	800a3b2 <__swbuf_r>
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d1e7      	bne.n	800a298 <_puts_r+0x68>
 800a2c8:	e7ce      	b.n	800a268 <_puts_r+0x38>
 800a2ca:	3e01      	subs	r6, #1
 800a2cc:	e7e4      	b.n	800a298 <_puts_r+0x68>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	6022      	str	r2, [r4, #0]
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e7ee      	b.n	800a2b8 <_puts_r+0x88>
	...

0800a2dc <puts>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	@ (800a2e8 <puts+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f7ff bfa5 	b.w	800a230 <_puts_r>
 800a2e6:	bf00      	nop
 800a2e8:	20000024 	.word	0x20000024

0800a2ec <siprintf>:
 800a2ec:	b40e      	push	{r1, r2, r3}
 800a2ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a2f2:	b500      	push	{lr}
 800a2f4:	b09c      	sub	sp, #112	@ 0x70
 800a2f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a2f8:	9002      	str	r0, [sp, #8]
 800a2fa:	9006      	str	r0, [sp, #24]
 800a2fc:	9107      	str	r1, [sp, #28]
 800a2fe:	9104      	str	r1, [sp, #16]
 800a300:	4808      	ldr	r0, [pc, #32]	@ (800a324 <siprintf+0x38>)
 800a302:	4909      	ldr	r1, [pc, #36]	@ (800a328 <siprintf+0x3c>)
 800a304:	f853 2b04 	ldr.w	r2, [r3], #4
 800a308:	9105      	str	r1, [sp, #20]
 800a30a:	6800      	ldr	r0, [r0, #0]
 800a30c:	a902      	add	r1, sp, #8
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	f002 fc40 	bl	800cb94 <_svfiprintf_r>
 800a314:	2200      	movs	r2, #0
 800a316:	9b02      	ldr	r3, [sp, #8]
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	b01c      	add	sp, #112	@ 0x70
 800a31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a320:	b003      	add	sp, #12
 800a322:	4770      	bx	lr
 800a324:	20000024 	.word	0x20000024
 800a328:	ffff0208 	.word	0xffff0208

0800a32c <__sread>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	460c      	mov	r4, r1
 800a330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a334:	f000 f968 	bl	800a608 <_read_r>
 800a338:	2800      	cmp	r0, #0
 800a33a:	bfab      	itete	ge
 800a33c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a33e:	89a3      	ldrhlt	r3, [r4, #12]
 800a340:	181b      	addge	r3, r3, r0
 800a342:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a346:	bfac      	ite	ge
 800a348:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a34a:	81a3      	strhlt	r3, [r4, #12]
 800a34c:	bd10      	pop	{r4, pc}

0800a34e <__swrite>:
 800a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	461f      	mov	r7, r3
 800a354:	898b      	ldrh	r3, [r1, #12]
 800a356:	4605      	mov	r5, r0
 800a358:	05db      	lsls	r3, r3, #23
 800a35a:	460c      	mov	r4, r1
 800a35c:	4616      	mov	r6, r2
 800a35e:	d505      	bpl.n	800a36c <__swrite+0x1e>
 800a360:	2302      	movs	r3, #2
 800a362:	2200      	movs	r2, #0
 800a364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a368:	f000 f93c 	bl	800a5e4 <_lseek_r>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	4632      	mov	r2, r6
 800a370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	4628      	mov	r0, r5
 800a378:	463b      	mov	r3, r7
 800a37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a37e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a382:	f000 b953 	b.w	800a62c <_write_r>

0800a386 <__sseek>:
 800a386:	b510      	push	{r4, lr}
 800a388:	460c      	mov	r4, r1
 800a38a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a38e:	f000 f929 	bl	800a5e4 <_lseek_r>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	bf15      	itete	ne
 800a398:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a39a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a39e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3a2:	81a3      	strheq	r3, [r4, #12]
 800a3a4:	bf18      	it	ne
 800a3a6:	81a3      	strhne	r3, [r4, #12]
 800a3a8:	bd10      	pop	{r4, pc}

0800a3aa <__sclose>:
 800a3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ae:	f000 b8b3 	b.w	800a518 <_close_r>

0800a3b2 <__swbuf_r>:
 800a3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b4:	460e      	mov	r6, r1
 800a3b6:	4614      	mov	r4, r2
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	b118      	cbz	r0, 800a3c4 <__swbuf_r+0x12>
 800a3bc:	6a03      	ldr	r3, [r0, #32]
 800a3be:	b90b      	cbnz	r3, 800a3c4 <__swbuf_r+0x12>
 800a3c0:	f7ff feee 	bl	800a1a0 <__sinit>
 800a3c4:	69a3      	ldr	r3, [r4, #24]
 800a3c6:	60a3      	str	r3, [r4, #8]
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	071a      	lsls	r2, r3, #28
 800a3cc:	d501      	bpl.n	800a3d2 <__swbuf_r+0x20>
 800a3ce:	6923      	ldr	r3, [r4, #16]
 800a3d0:	b943      	cbnz	r3, 800a3e4 <__swbuf_r+0x32>
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f000 f82b 	bl	800a430 <__swsetup_r>
 800a3da:	b118      	cbz	r0, 800a3e4 <__swbuf_r+0x32>
 800a3dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	6922      	ldr	r2, [r4, #16]
 800a3e8:	b2f6      	uxtb	r6, r6
 800a3ea:	1a98      	subs	r0, r3, r2
 800a3ec:	6963      	ldr	r3, [r4, #20]
 800a3ee:	4637      	mov	r7, r6
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	dc05      	bgt.n	800a400 <__swbuf_r+0x4e>
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f002 fe88 	bl	800d10c <_fflush_r>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1ed      	bne.n	800a3dc <__swbuf_r+0x2a>
 800a400:	68a3      	ldr	r3, [r4, #8]
 800a402:	3b01      	subs	r3, #1
 800a404:	60a3      	str	r3, [r4, #8]
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	6022      	str	r2, [r4, #0]
 800a40c:	701e      	strb	r6, [r3, #0]
 800a40e:	6962      	ldr	r2, [r4, #20]
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	429a      	cmp	r2, r3
 800a414:	d004      	beq.n	800a420 <__swbuf_r+0x6e>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	07db      	lsls	r3, r3, #31
 800a41a:	d5e1      	bpl.n	800a3e0 <__swbuf_r+0x2e>
 800a41c:	2e0a      	cmp	r6, #10
 800a41e:	d1df      	bne.n	800a3e0 <__swbuf_r+0x2e>
 800a420:	4621      	mov	r1, r4
 800a422:	4628      	mov	r0, r5
 800a424:	f002 fe72 	bl	800d10c <_fflush_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d0d9      	beq.n	800a3e0 <__swbuf_r+0x2e>
 800a42c:	e7d6      	b.n	800a3dc <__swbuf_r+0x2a>
	...

0800a430 <__swsetup_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4b29      	ldr	r3, [pc, #164]	@ (800a4d8 <__swsetup_r+0xa8>)
 800a434:	4605      	mov	r5, r0
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	460c      	mov	r4, r1
 800a43a:	b118      	cbz	r0, 800a444 <__swsetup_r+0x14>
 800a43c:	6a03      	ldr	r3, [r0, #32]
 800a43e:	b90b      	cbnz	r3, 800a444 <__swsetup_r+0x14>
 800a440:	f7ff feae 	bl	800a1a0 <__sinit>
 800a444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a448:	0719      	lsls	r1, r3, #28
 800a44a:	d422      	bmi.n	800a492 <__swsetup_r+0x62>
 800a44c:	06da      	lsls	r2, r3, #27
 800a44e:	d407      	bmi.n	800a460 <__swsetup_r+0x30>
 800a450:	2209      	movs	r2, #9
 800a452:	602a      	str	r2, [r5, #0]
 800a454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	e033      	b.n	800a4c8 <__swsetup_r+0x98>
 800a460:	0758      	lsls	r0, r3, #29
 800a462:	d512      	bpl.n	800a48a <__swsetup_r+0x5a>
 800a464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a466:	b141      	cbz	r1, 800a47a <__swsetup_r+0x4a>
 800a468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a46c:	4299      	cmp	r1, r3
 800a46e:	d002      	beq.n	800a476 <__swsetup_r+0x46>
 800a470:	4628      	mov	r0, r5
 800a472:	f000 ff8d 	bl	800b390 <_free_r>
 800a476:	2300      	movs	r3, #0
 800a478:	6363      	str	r3, [r4, #52]	@ 0x34
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	2300      	movs	r3, #0
 800a484:	6063      	str	r3, [r4, #4]
 800a486:	6923      	ldr	r3, [r4, #16]
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	f043 0308 	orr.w	r3, r3, #8
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	b94b      	cbnz	r3, 800a4aa <__swsetup_r+0x7a>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a49c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4a0:	d003      	beq.n	800a4aa <__swsetup_r+0x7a>
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f002 fe7e 	bl	800d1a6 <__smakebuf_r>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	f013 0201 	ands.w	r2, r3, #1
 800a4b2:	d00a      	beq.n	800a4ca <__swsetup_r+0x9a>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	60a2      	str	r2, [r4, #8]
 800a4b8:	6962      	ldr	r2, [r4, #20]
 800a4ba:	4252      	negs	r2, r2
 800a4bc:	61a2      	str	r2, [r4, #24]
 800a4be:	6922      	ldr	r2, [r4, #16]
 800a4c0:	b942      	cbnz	r2, 800a4d4 <__swsetup_r+0xa4>
 800a4c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4c6:	d1c5      	bne.n	800a454 <__swsetup_r+0x24>
 800a4c8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ca:	0799      	lsls	r1, r3, #30
 800a4cc:	bf58      	it	pl
 800a4ce:	6962      	ldrpl	r2, [r4, #20]
 800a4d0:	60a2      	str	r2, [r4, #8]
 800a4d2:	e7f4      	b.n	800a4be <__swsetup_r+0x8e>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e7f7      	b.n	800a4c8 <__swsetup_r+0x98>
 800a4d8:	20000024 	.word	0x20000024

0800a4dc <memset>:
 800a4dc:	4603      	mov	r3, r0
 800a4de:	4402      	add	r2, r0
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d100      	bne.n	800a4e6 <memset+0xa>
 800a4e4:	4770      	bx	lr
 800a4e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ea:	e7f9      	b.n	800a4e0 <memset+0x4>

0800a4ec <strncmp>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	b16a      	cbz	r2, 800a50c <strncmp+0x20>
 800a4f0:	3901      	subs	r1, #1
 800a4f2:	1884      	adds	r4, r0, r2
 800a4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d103      	bne.n	800a508 <strncmp+0x1c>
 800a500:	42a0      	cmp	r0, r4
 800a502:	d001      	beq.n	800a508 <strncmp+0x1c>
 800a504:	2a00      	cmp	r2, #0
 800a506:	d1f5      	bne.n	800a4f4 <strncmp+0x8>
 800a508:	1ad0      	subs	r0, r2, r3
 800a50a:	bd10      	pop	{r4, pc}
 800a50c:	4610      	mov	r0, r2
 800a50e:	e7fc      	b.n	800a50a <strncmp+0x1e>

0800a510 <_localeconv_r>:
 800a510:	4800      	ldr	r0, [pc, #0]	@ (800a514 <_localeconv_r+0x4>)
 800a512:	4770      	bx	lr
 800a514:	20000164 	.word	0x20000164

0800a518 <_close_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	2300      	movs	r3, #0
 800a51c:	4d05      	ldr	r5, [pc, #20]	@ (800a534 <_close_r+0x1c>)
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	f7f7 fbf9 	bl	8001d1a <_close>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_close_r+0x1a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_close_r+0x1a>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	20001f50 	.word	0x20001f50

0800a538 <_reclaim_reent>:
 800a538:	4b29      	ldr	r3, [pc, #164]	@ (800a5e0 <_reclaim_reent+0xa8>)
 800a53a:	b570      	push	{r4, r5, r6, lr}
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4604      	mov	r4, r0
 800a540:	4283      	cmp	r3, r0
 800a542:	d04b      	beq.n	800a5dc <_reclaim_reent+0xa4>
 800a544:	69c3      	ldr	r3, [r0, #28]
 800a546:	b1ab      	cbz	r3, 800a574 <_reclaim_reent+0x3c>
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	b16b      	cbz	r3, 800a568 <_reclaim_reent+0x30>
 800a54c:	2500      	movs	r5, #0
 800a54e:	69e3      	ldr	r3, [r4, #28]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	5959      	ldr	r1, [r3, r5]
 800a554:	2900      	cmp	r1, #0
 800a556:	d13b      	bne.n	800a5d0 <_reclaim_reent+0x98>
 800a558:	3504      	adds	r5, #4
 800a55a:	2d80      	cmp	r5, #128	@ 0x80
 800a55c:	d1f7      	bne.n	800a54e <_reclaim_reent+0x16>
 800a55e:	69e3      	ldr	r3, [r4, #28]
 800a560:	4620      	mov	r0, r4
 800a562:	68d9      	ldr	r1, [r3, #12]
 800a564:	f000 ff14 	bl	800b390 <_free_r>
 800a568:	69e3      	ldr	r3, [r4, #28]
 800a56a:	6819      	ldr	r1, [r3, #0]
 800a56c:	b111      	cbz	r1, 800a574 <_reclaim_reent+0x3c>
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 ff0e 	bl	800b390 <_free_r>
 800a574:	6961      	ldr	r1, [r4, #20]
 800a576:	b111      	cbz	r1, 800a57e <_reclaim_reent+0x46>
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 ff09 	bl	800b390 <_free_r>
 800a57e:	69e1      	ldr	r1, [r4, #28]
 800a580:	b111      	cbz	r1, 800a588 <_reclaim_reent+0x50>
 800a582:	4620      	mov	r0, r4
 800a584:	f000 ff04 	bl	800b390 <_free_r>
 800a588:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a58a:	b111      	cbz	r1, 800a592 <_reclaim_reent+0x5a>
 800a58c:	4620      	mov	r0, r4
 800a58e:	f000 feff 	bl	800b390 <_free_r>
 800a592:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a594:	b111      	cbz	r1, 800a59c <_reclaim_reent+0x64>
 800a596:	4620      	mov	r0, r4
 800a598:	f000 fefa 	bl	800b390 <_free_r>
 800a59c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a59e:	b111      	cbz	r1, 800a5a6 <_reclaim_reent+0x6e>
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f000 fef5 	bl	800b390 <_free_r>
 800a5a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a5a8:	b111      	cbz	r1, 800a5b0 <_reclaim_reent+0x78>
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 fef0 	bl	800b390 <_free_r>
 800a5b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a5b2:	b111      	cbz	r1, 800a5ba <_reclaim_reent+0x82>
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 feeb 	bl	800b390 <_free_r>
 800a5ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a5bc:	b111      	cbz	r1, 800a5c4 <_reclaim_reent+0x8c>
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 fee6 	bl	800b390 <_free_r>
 800a5c4:	6a23      	ldr	r3, [r4, #32]
 800a5c6:	b14b      	cbz	r3, 800a5dc <_reclaim_reent+0xa4>
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a5ce:	4718      	bx	r3
 800a5d0:	680e      	ldr	r6, [r1, #0]
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 fedc 	bl	800b390 <_free_r>
 800a5d8:	4631      	mov	r1, r6
 800a5da:	e7bb      	b.n	800a554 <_reclaim_reent+0x1c>
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
 800a5de:	bf00      	nop
 800a5e0:	20000024 	.word	0x20000024

0800a5e4 <_lseek_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4d05      	ldr	r5, [pc, #20]	@ (800a604 <_lseek_r+0x20>)
 800a5f0:	602a      	str	r2, [r5, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f7f7 fbb5 	bl	8001d62 <_lseek>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_lseek_r+0x1e>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_lseek_r+0x1e>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	20001f50 	.word	0x20001f50

0800a608 <_read_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	2200      	movs	r2, #0
 800a612:	4d05      	ldr	r5, [pc, #20]	@ (800a628 <_read_r+0x20>)
 800a614:	602a      	str	r2, [r5, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	f7f7 fb62 	bl	8001ce0 <_read>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_read_r+0x1e>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_read_r+0x1e>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20001f50 	.word	0x20001f50

0800a62c <_write_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	2200      	movs	r2, #0
 800a636:	4d05      	ldr	r5, [pc, #20]	@ (800a64c <_write_r+0x20>)
 800a638:	602a      	str	r2, [r5, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	f7f6 fd28 	bl	8001090 <_write>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_write_r+0x1e>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_write_r+0x1e>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	20001f50 	.word	0x20001f50

0800a650 <__errno>:
 800a650:	4b01      	ldr	r3, [pc, #4]	@ (800a658 <__errno+0x8>)
 800a652:	6818      	ldr	r0, [r3, #0]
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	20000024 	.word	0x20000024

0800a65c <__libc_init_array>:
 800a65c:	b570      	push	{r4, r5, r6, lr}
 800a65e:	2600      	movs	r6, #0
 800a660:	4d0c      	ldr	r5, [pc, #48]	@ (800a694 <__libc_init_array+0x38>)
 800a662:	4c0d      	ldr	r4, [pc, #52]	@ (800a698 <__libc_init_array+0x3c>)
 800a664:	1b64      	subs	r4, r4, r5
 800a666:	10a4      	asrs	r4, r4, #2
 800a668:	42a6      	cmp	r6, r4
 800a66a:	d109      	bne.n	800a680 <__libc_init_array+0x24>
 800a66c:	f003 fa48 	bl	800db00 <_init>
 800a670:	2600      	movs	r6, #0
 800a672:	4d0a      	ldr	r5, [pc, #40]	@ (800a69c <__libc_init_array+0x40>)
 800a674:	4c0a      	ldr	r4, [pc, #40]	@ (800a6a0 <__libc_init_array+0x44>)
 800a676:	1b64      	subs	r4, r4, r5
 800a678:	10a4      	asrs	r4, r4, #2
 800a67a:	42a6      	cmp	r6, r4
 800a67c:	d105      	bne.n	800a68a <__libc_init_array+0x2e>
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	f855 3b04 	ldr.w	r3, [r5], #4
 800a684:	4798      	blx	r3
 800a686:	3601      	adds	r6, #1
 800a688:	e7ee      	b.n	800a668 <__libc_init_array+0xc>
 800a68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a68e:	4798      	blx	r3
 800a690:	3601      	adds	r6, #1
 800a692:	e7f2      	b.n	800a67a <__libc_init_array+0x1e>
 800a694:	0800e168 	.word	0x0800e168
 800a698:	0800e168 	.word	0x0800e168
 800a69c:	0800e168 	.word	0x0800e168
 800a6a0:	0800e16c 	.word	0x0800e16c

0800a6a4 <__retarget_lock_init_recursive>:
 800a6a4:	4770      	bx	lr

0800a6a6 <__retarget_lock_acquire_recursive>:
 800a6a6:	4770      	bx	lr

0800a6a8 <__retarget_lock_release_recursive>:
 800a6a8:	4770      	bx	lr

0800a6aa <memchr>:
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	b2c9      	uxtb	r1, r1
 800a6b0:	4402      	add	r2, r0
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	d101      	bne.n	800a6bc <memchr+0x12>
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e003      	b.n	800a6c4 <memchr+0x1a>
 800a6bc:	7804      	ldrb	r4, [r0, #0]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	428c      	cmp	r4, r1
 800a6c2:	d1f6      	bne.n	800a6b2 <memchr+0x8>
 800a6c4:	bd10      	pop	{r4, pc}

0800a6c6 <memcpy>:
 800a6c6:	440a      	add	r2, r1
 800a6c8:	4291      	cmp	r1, r2
 800a6ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6ce:	d100      	bne.n	800a6d2 <memcpy+0xc>
 800a6d0:	4770      	bx	lr
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d8:	4291      	cmp	r1, r2
 800a6da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6de:	d1f9      	bne.n	800a6d4 <memcpy+0xe>
 800a6e0:	bd10      	pop	{r4, pc}
	...

0800a6e4 <nanf>:
 800a6e4:	4800      	ldr	r0, [pc, #0]	@ (800a6e8 <nanf+0x4>)
 800a6e6:	4770      	bx	lr
 800a6e8:	7fc00000 	.word	0x7fc00000

0800a6ec <quorem>:
 800a6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	6903      	ldr	r3, [r0, #16]
 800a6f2:	690c      	ldr	r4, [r1, #16]
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	42a3      	cmp	r3, r4
 800a6f8:	db7e      	blt.n	800a7f8 <quorem+0x10c>
 800a6fa:	3c01      	subs	r4, #1
 800a6fc:	00a3      	lsls	r3, r4, #2
 800a6fe:	f100 0514 	add.w	r5, r0, #20
 800a702:	f101 0814 	add.w	r8, r1, #20
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a716:	3301      	adds	r3, #1
 800a718:	429a      	cmp	r2, r3
 800a71a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a71e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a722:	d32e      	bcc.n	800a782 <quorem+0x96>
 800a724:	f04f 0a00 	mov.w	sl, #0
 800a728:	46c4      	mov	ip, r8
 800a72a:	46ae      	mov	lr, r5
 800a72c:	46d3      	mov	fp, sl
 800a72e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a732:	b298      	uxth	r0, r3
 800a734:	fb06 a000 	mla	r0, r6, r0, sl
 800a738:	0c1b      	lsrs	r3, r3, #16
 800a73a:	0c02      	lsrs	r2, r0, #16
 800a73c:	fb06 2303 	mla	r3, r6, r3, r2
 800a740:	f8de 2000 	ldr.w	r2, [lr]
 800a744:	b280      	uxth	r0, r0
 800a746:	b292      	uxth	r2, r2
 800a748:	1a12      	subs	r2, r2, r0
 800a74a:	445a      	add	r2, fp
 800a74c:	f8de 0000 	ldr.w	r0, [lr]
 800a750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a754:	b29b      	uxth	r3, r3
 800a756:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a75a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a75e:	b292      	uxth	r2, r2
 800a760:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a764:	45e1      	cmp	r9, ip
 800a766:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a76a:	f84e 2b04 	str.w	r2, [lr], #4
 800a76e:	d2de      	bcs.n	800a72e <quorem+0x42>
 800a770:	9b00      	ldr	r3, [sp, #0]
 800a772:	58eb      	ldr	r3, [r5, r3]
 800a774:	b92b      	cbnz	r3, 800a782 <quorem+0x96>
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	3b04      	subs	r3, #4
 800a77a:	429d      	cmp	r5, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	d32f      	bcc.n	800a7e0 <quorem+0xf4>
 800a780:	613c      	str	r4, [r7, #16]
 800a782:	4638      	mov	r0, r7
 800a784:	f001 f9c4 	bl	800bb10 <__mcmp>
 800a788:	2800      	cmp	r0, #0
 800a78a:	db25      	blt.n	800a7d8 <quorem+0xec>
 800a78c:	4629      	mov	r1, r5
 800a78e:	2000      	movs	r0, #0
 800a790:	f858 2b04 	ldr.w	r2, [r8], #4
 800a794:	f8d1 c000 	ldr.w	ip, [r1]
 800a798:	fa1f fe82 	uxth.w	lr, r2
 800a79c:	fa1f f38c 	uxth.w	r3, ip
 800a7a0:	eba3 030e 	sub.w	r3, r3, lr
 800a7a4:	4403      	add	r3, r0
 800a7a6:	0c12      	lsrs	r2, r2, #16
 800a7a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7b6:	45c1      	cmp	r9, r8
 800a7b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7bc:	f841 3b04 	str.w	r3, [r1], #4
 800a7c0:	d2e6      	bcs.n	800a790 <quorem+0xa4>
 800a7c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ca:	b922      	cbnz	r2, 800a7d6 <quorem+0xea>
 800a7cc:	3b04      	subs	r3, #4
 800a7ce:	429d      	cmp	r5, r3
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	d30b      	bcc.n	800a7ec <quorem+0x100>
 800a7d4:	613c      	str	r4, [r7, #16]
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	4630      	mov	r0, r6
 800a7da:	b003      	add	sp, #12
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e0:	6812      	ldr	r2, [r2, #0]
 800a7e2:	3b04      	subs	r3, #4
 800a7e4:	2a00      	cmp	r2, #0
 800a7e6:	d1cb      	bne.n	800a780 <quorem+0x94>
 800a7e8:	3c01      	subs	r4, #1
 800a7ea:	e7c6      	b.n	800a77a <quorem+0x8e>
 800a7ec:	6812      	ldr	r2, [r2, #0]
 800a7ee:	3b04      	subs	r3, #4
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	d1ef      	bne.n	800a7d4 <quorem+0xe8>
 800a7f4:	3c01      	subs	r4, #1
 800a7f6:	e7ea      	b.n	800a7ce <quorem+0xe2>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	e7ee      	b.n	800a7da <quorem+0xee>
 800a7fc:	0000      	movs	r0, r0
	...

0800a800 <_dtoa_r>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	4614      	mov	r4, r2
 800a806:	461d      	mov	r5, r3
 800a808:	69c7      	ldr	r7, [r0, #28]
 800a80a:	b097      	sub	sp, #92	@ 0x5c
 800a80c:	4683      	mov	fp, r0
 800a80e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a812:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a814:	b97f      	cbnz	r7, 800a836 <_dtoa_r+0x36>
 800a816:	2010      	movs	r0, #16
 800a818:	f000 fe02 	bl	800b420 <malloc>
 800a81c:	4602      	mov	r2, r0
 800a81e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a822:	b920      	cbnz	r0, 800a82e <_dtoa_r+0x2e>
 800a824:	21ef      	movs	r1, #239	@ 0xef
 800a826:	4ba8      	ldr	r3, [pc, #672]	@ (800aac8 <_dtoa_r+0x2c8>)
 800a828:	48a8      	ldr	r0, [pc, #672]	@ (800aacc <_dtoa_r+0x2cc>)
 800a82a:	f002 fd4b 	bl	800d2c4 <__assert_func>
 800a82e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a832:	6007      	str	r7, [r0, #0]
 800a834:	60c7      	str	r7, [r0, #12]
 800a836:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a83a:	6819      	ldr	r1, [r3, #0]
 800a83c:	b159      	cbz	r1, 800a856 <_dtoa_r+0x56>
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	2301      	movs	r3, #1
 800a842:	4093      	lsls	r3, r2
 800a844:	604a      	str	r2, [r1, #4]
 800a846:	608b      	str	r3, [r1, #8]
 800a848:	4658      	mov	r0, fp
 800a84a:	f000 fedf 	bl	800b60c <_Bfree>
 800a84e:	2200      	movs	r2, #0
 800a850:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	1e2b      	subs	r3, r5, #0
 800a858:	bfaf      	iteee	ge
 800a85a:	2300      	movge	r3, #0
 800a85c:	2201      	movlt	r2, #1
 800a85e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a862:	9303      	strlt	r3, [sp, #12]
 800a864:	bfa8      	it	ge
 800a866:	6033      	strge	r3, [r6, #0]
 800a868:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a86c:	4b98      	ldr	r3, [pc, #608]	@ (800aad0 <_dtoa_r+0x2d0>)
 800a86e:	bfb8      	it	lt
 800a870:	6032      	strlt	r2, [r6, #0]
 800a872:	ea33 0308 	bics.w	r3, r3, r8
 800a876:	d112      	bne.n	800a89e <_dtoa_r+0x9e>
 800a878:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a87c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a884:	4323      	orrs	r3, r4
 800a886:	f000 8550 	beq.w	800b32a <_dtoa_r+0xb2a>
 800a88a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a88c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800aad4 <_dtoa_r+0x2d4>
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8552 	beq.w	800b33a <_dtoa_r+0xb3a>
 800a896:	f10a 0303 	add.w	r3, sl, #3
 800a89a:	f000 bd4c 	b.w	800b336 <_dtoa_r+0xb36>
 800a89e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a8a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f7f6 f87b 	bl	80009a8 <__aeabi_dcmpeq>
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	b158      	cbz	r0, 800a8ce <_dtoa_r+0xce>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a8ba:	6013      	str	r3, [r2, #0]
 800a8bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8be:	b113      	cbz	r3, 800a8c6 <_dtoa_r+0xc6>
 800a8c0:	4b85      	ldr	r3, [pc, #532]	@ (800aad8 <_dtoa_r+0x2d8>)
 800a8c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800aadc <_dtoa_r+0x2dc>
 800a8ca:	f000 bd36 	b.w	800b33a <_dtoa_r+0xb3a>
 800a8ce:	ab14      	add	r3, sp, #80	@ 0x50
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	ab15      	add	r3, sp, #84	@ 0x54
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	4658      	mov	r0, fp
 800a8d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8dc:	f001 fa30 	bl	800bd40 <__d2b>
 800a8e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a8e4:	4681      	mov	r9, r0
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d077      	beq.n	800a9da <_dtoa_r+0x1da>
 800a8ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a900:	9712      	str	r7, [sp, #72]	@ 0x48
 800a902:	4619      	mov	r1, r3
 800a904:	2200      	movs	r2, #0
 800a906:	4b76      	ldr	r3, [pc, #472]	@ (800aae0 <_dtoa_r+0x2e0>)
 800a908:	f7f5 fc2e 	bl	8000168 <__aeabi_dsub>
 800a90c:	a368      	add	r3, pc, #416	@ (adr r3, 800aab0 <_dtoa_r+0x2b0>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	f7f5 fde1 	bl	80004d8 <__aeabi_dmul>
 800a916:	a368      	add	r3, pc, #416	@ (adr r3, 800aab8 <_dtoa_r+0x2b8>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fc26 	bl	800016c <__adddf3>
 800a920:	4604      	mov	r4, r0
 800a922:	4630      	mov	r0, r6
 800a924:	460d      	mov	r5, r1
 800a926:	f7f5 fd6d 	bl	8000404 <__aeabi_i2d>
 800a92a:	a365      	add	r3, pc, #404	@ (adr r3, 800aac0 <_dtoa_r+0x2c0>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fdd2 	bl	80004d8 <__aeabi_dmul>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fc16 	bl	800016c <__adddf3>
 800a940:	4604      	mov	r4, r0
 800a942:	460d      	mov	r5, r1
 800a944:	f7f6 f878 	bl	8000a38 <__aeabi_d2iz>
 800a948:	2200      	movs	r2, #0
 800a94a:	4607      	mov	r7, r0
 800a94c:	2300      	movs	r3, #0
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	f7f6 f833 	bl	80009bc <__aeabi_dcmplt>
 800a956:	b140      	cbz	r0, 800a96a <_dtoa_r+0x16a>
 800a958:	4638      	mov	r0, r7
 800a95a:	f7f5 fd53 	bl	8000404 <__aeabi_i2d>
 800a95e:	4622      	mov	r2, r4
 800a960:	462b      	mov	r3, r5
 800a962:	f7f6 f821 	bl	80009a8 <__aeabi_dcmpeq>
 800a966:	b900      	cbnz	r0, 800a96a <_dtoa_r+0x16a>
 800a968:	3f01      	subs	r7, #1
 800a96a:	2f16      	cmp	r7, #22
 800a96c:	d853      	bhi.n	800aa16 <_dtoa_r+0x216>
 800a96e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a972:	4b5c      	ldr	r3, [pc, #368]	@ (800aae4 <_dtoa_r+0x2e4>)
 800a974:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f6 f81e 	bl	80009bc <__aeabi_dcmplt>
 800a980:	2800      	cmp	r0, #0
 800a982:	d04a      	beq.n	800aa1a <_dtoa_r+0x21a>
 800a984:	2300      	movs	r3, #0
 800a986:	3f01      	subs	r7, #1
 800a988:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a98a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a98c:	1b9b      	subs	r3, r3, r6
 800a98e:	1e5a      	subs	r2, r3, #1
 800a990:	bf46      	itte	mi
 800a992:	f1c3 0801 	rsbmi	r8, r3, #1
 800a996:	2300      	movmi	r3, #0
 800a998:	f04f 0800 	movpl.w	r8, #0
 800a99c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a99e:	bf48      	it	mi
 800a9a0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a9a2:	2f00      	cmp	r7, #0
 800a9a4:	db3b      	blt.n	800aa1e <_dtoa_r+0x21e>
 800a9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a8:	970e      	str	r7, [sp, #56]	@ 0x38
 800a9aa:	443b      	add	r3, r7
 800a9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9b4:	2b09      	cmp	r3, #9
 800a9b6:	d866      	bhi.n	800aa86 <_dtoa_r+0x286>
 800a9b8:	2b05      	cmp	r3, #5
 800a9ba:	bfc4      	itt	gt
 800a9bc:	3b04      	subgt	r3, #4
 800a9be:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a9c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9c2:	bfc8      	it	gt
 800a9c4:	2400      	movgt	r4, #0
 800a9c6:	f1a3 0302 	sub.w	r3, r3, #2
 800a9ca:	bfd8      	it	le
 800a9cc:	2401      	movle	r4, #1
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d864      	bhi.n	800aa9c <_dtoa_r+0x29c>
 800a9d2:	e8df f003 	tbb	[pc, r3]
 800a9d6:	382b      	.short	0x382b
 800a9d8:	5636      	.short	0x5636
 800a9da:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a9de:	441e      	add	r6, r3
 800a9e0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	bfc1      	itttt	gt
 800a9e8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800a9f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9f8:	bfd6      	itet	le
 800a9fa:	f1c3 0320 	rsble	r3, r3, #32
 800a9fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa02:	fa04 f003 	lslle.w	r0, r4, r3
 800aa06:	f7f5 fced 	bl	80003e4 <__aeabi_ui2d>
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa10:	3e01      	subs	r6, #1
 800aa12:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa14:	e775      	b.n	800a902 <_dtoa_r+0x102>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e7b6      	b.n	800a988 <_dtoa_r+0x188>
 800aa1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800aa1c:	e7b5      	b.n	800a98a <_dtoa_r+0x18a>
 800aa1e:	427b      	negs	r3, r7
 800aa20:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa22:	2300      	movs	r3, #0
 800aa24:	eba8 0807 	sub.w	r8, r8, r7
 800aa28:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa2a:	e7c2      	b.n	800a9b2 <_dtoa_r+0x1b2>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	dc35      	bgt.n	800aaa2 <_dtoa_r+0x2a2>
 800aa36:	2301      	movs	r3, #1
 800aa38:	461a      	mov	r2, r3
 800aa3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aa3e:	9221      	str	r2, [sp, #132]	@ 0x84
 800aa40:	e00b      	b.n	800aa5a <_dtoa_r+0x25a>
 800aa42:	2301      	movs	r3, #1
 800aa44:	e7f3      	b.n	800aa2e <_dtoa_r+0x22e>
 800aa46:	2300      	movs	r3, #0
 800aa48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa4c:	18fb      	adds	r3, r7, r3
 800aa4e:	9308      	str	r3, [sp, #32]
 800aa50:	3301      	adds	r3, #1
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	9307      	str	r3, [sp, #28]
 800aa56:	bfb8      	it	lt
 800aa58:	2301      	movlt	r3, #1
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	2204      	movs	r2, #4
 800aa5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa62:	f102 0514 	add.w	r5, r2, #20
 800aa66:	429d      	cmp	r5, r3
 800aa68:	d91f      	bls.n	800aaaa <_dtoa_r+0x2aa>
 800aa6a:	6041      	str	r1, [r0, #4]
 800aa6c:	4658      	mov	r0, fp
 800aa6e:	f000 fd8d 	bl	800b58c <_Balloc>
 800aa72:	4682      	mov	sl, r0
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d139      	bne.n	800aaec <_dtoa_r+0x2ec>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa7e:	4b1a      	ldr	r3, [pc, #104]	@ (800aae8 <_dtoa_r+0x2e8>)
 800aa80:	e6d2      	b.n	800a828 <_dtoa_r+0x28>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e7e0      	b.n	800aa48 <_dtoa_r+0x248>
 800aa86:	2401      	movs	r4, #1
 800aa88:	2300      	movs	r3, #0
 800aa8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa8c:	9320      	str	r3, [sp, #128]	@ 0x80
 800aa8e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa92:	2200      	movs	r2, #0
 800aa94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aa98:	2312      	movs	r3, #18
 800aa9a:	e7d0      	b.n	800aa3e <_dtoa_r+0x23e>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaa0:	e7f5      	b.n	800aa8e <_dtoa_r+0x28e>
 800aaa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aaa4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aaa8:	e7d7      	b.n	800aa5a <_dtoa_r+0x25a>
 800aaaa:	3101      	adds	r1, #1
 800aaac:	0052      	lsls	r2, r2, #1
 800aaae:	e7d8      	b.n	800aa62 <_dtoa_r+0x262>
 800aab0:	636f4361 	.word	0x636f4361
 800aab4:	3fd287a7 	.word	0x3fd287a7
 800aab8:	8b60c8b3 	.word	0x8b60c8b3
 800aabc:	3fc68a28 	.word	0x3fc68a28
 800aac0:	509f79fb 	.word	0x509f79fb
 800aac4:	3fd34413 	.word	0x3fd34413
 800aac8:	0800de79 	.word	0x0800de79
 800aacc:	0800de90 	.word	0x0800de90
 800aad0:	7ff00000 	.word	0x7ff00000
 800aad4:	0800de75 	.word	0x0800de75
 800aad8:	0800de44 	.word	0x0800de44
 800aadc:	0800de43 	.word	0x0800de43
 800aae0:	3ff80000 	.word	0x3ff80000
 800aae4:	0800df88 	.word	0x0800df88
 800aae8:	0800dee8 	.word	0x0800dee8
 800aaec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aaf0:	6018      	str	r0, [r3, #0]
 800aaf2:	9b07      	ldr	r3, [sp, #28]
 800aaf4:	2b0e      	cmp	r3, #14
 800aaf6:	f200 80a4 	bhi.w	800ac42 <_dtoa_r+0x442>
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	f000 80a1 	beq.w	800ac42 <_dtoa_r+0x442>
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	dd33      	ble.n	800ab6c <_dtoa_r+0x36c>
 800ab04:	4b86      	ldr	r3, [pc, #536]	@ (800ad20 <_dtoa_r+0x520>)
 800ab06:	f007 020f 	and.w	r2, r7, #15
 800ab0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab0e:	05f8      	lsls	r0, r7, #23
 800ab10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab1c:	d516      	bpl.n	800ab4c <_dtoa_r+0x34c>
 800ab1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab22:	4b80      	ldr	r3, [pc, #512]	@ (800ad24 <_dtoa_r+0x524>)
 800ab24:	2603      	movs	r6, #3
 800ab26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab2a:	f7f5 fdff 	bl	800072c <__aeabi_ddiv>
 800ab2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab32:	f004 040f 	and.w	r4, r4, #15
 800ab36:	4d7b      	ldr	r5, [pc, #492]	@ (800ad24 <_dtoa_r+0x524>)
 800ab38:	b954      	cbnz	r4, 800ab50 <_dtoa_r+0x350>
 800ab3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab42:	f7f5 fdf3 	bl	800072c <__aeabi_ddiv>
 800ab46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab4a:	e028      	b.n	800ab9e <_dtoa_r+0x39e>
 800ab4c:	2602      	movs	r6, #2
 800ab4e:	e7f2      	b.n	800ab36 <_dtoa_r+0x336>
 800ab50:	07e1      	lsls	r1, r4, #31
 800ab52:	d508      	bpl.n	800ab66 <_dtoa_r+0x366>
 800ab54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab5c:	f7f5 fcbc 	bl	80004d8 <__aeabi_dmul>
 800ab60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab64:	3601      	adds	r6, #1
 800ab66:	1064      	asrs	r4, r4, #1
 800ab68:	3508      	adds	r5, #8
 800ab6a:	e7e5      	b.n	800ab38 <_dtoa_r+0x338>
 800ab6c:	f000 80d2 	beq.w	800ad14 <_dtoa_r+0x514>
 800ab70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab74:	427c      	negs	r4, r7
 800ab76:	4b6a      	ldr	r3, [pc, #424]	@ (800ad20 <_dtoa_r+0x520>)
 800ab78:	f004 020f 	and.w	r2, r4, #15
 800ab7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7f5 fca8 	bl	80004d8 <__aeabi_dmul>
 800ab88:	2602      	movs	r6, #2
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab90:	4d64      	ldr	r5, [pc, #400]	@ (800ad24 <_dtoa_r+0x524>)
 800ab92:	1124      	asrs	r4, r4, #4
 800ab94:	2c00      	cmp	r4, #0
 800ab96:	f040 80b2 	bne.w	800acfe <_dtoa_r+0x4fe>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1d3      	bne.n	800ab46 <_dtoa_r+0x346>
 800ab9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 80b7 	beq.w	800ad18 <_dtoa_r+0x518>
 800abaa:	2200      	movs	r2, #0
 800abac:	4620      	mov	r0, r4
 800abae:	4629      	mov	r1, r5
 800abb0:	4b5d      	ldr	r3, [pc, #372]	@ (800ad28 <_dtoa_r+0x528>)
 800abb2:	f7f5 ff03 	bl	80009bc <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f000 80ae 	beq.w	800ad18 <_dtoa_r+0x518>
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 80aa 	beq.w	800ad18 <_dtoa_r+0x518>
 800abc4:	9b08      	ldr	r3, [sp, #32]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	dd37      	ble.n	800ac3a <_dtoa_r+0x43a>
 800abca:	1e7b      	subs	r3, r7, #1
 800abcc:	4620      	mov	r0, r4
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	2200      	movs	r2, #0
 800abd2:	4629      	mov	r1, r5
 800abd4:	4b55      	ldr	r3, [pc, #340]	@ (800ad2c <_dtoa_r+0x52c>)
 800abd6:	f7f5 fc7f 	bl	80004d8 <__aeabi_dmul>
 800abda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abde:	9c08      	ldr	r4, [sp, #32]
 800abe0:	3601      	adds	r6, #1
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7f5 fc0e 	bl	8000404 <__aeabi_i2d>
 800abe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abec:	f7f5 fc74 	bl	80004d8 <__aeabi_dmul>
 800abf0:	2200      	movs	r2, #0
 800abf2:	4b4f      	ldr	r3, [pc, #316]	@ (800ad30 <_dtoa_r+0x530>)
 800abf4:	f7f5 faba 	bl	800016c <__adddf3>
 800abf8:	4605      	mov	r5, r0
 800abfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800abfe:	2c00      	cmp	r4, #0
 800ac00:	f040 809a 	bne.w	800ad38 <_dtoa_r+0x538>
 800ac04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4b4a      	ldr	r3, [pc, #296]	@ (800ad34 <_dtoa_r+0x534>)
 800ac0c:	f7f5 faac 	bl	8000168 <__aeabi_dsub>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac18:	462a      	mov	r2, r5
 800ac1a:	4633      	mov	r3, r6
 800ac1c:	f7f5 feec 	bl	80009f8 <__aeabi_dcmpgt>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	f040 828e 	bne.w	800b142 <_dtoa_r+0x942>
 800ac26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac2a:	462a      	mov	r2, r5
 800ac2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac30:	f7f5 fec4 	bl	80009bc <__aeabi_dcmplt>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	f040 8127 	bne.w	800ae88 <_dtoa_r+0x688>
 800ac3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ac42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f2c0 8163 	blt.w	800af10 <_dtoa_r+0x710>
 800ac4a:	2f0e      	cmp	r7, #14
 800ac4c:	f300 8160 	bgt.w	800af10 <_dtoa_r+0x710>
 800ac50:	4b33      	ldr	r3, [pc, #204]	@ (800ad20 <_dtoa_r+0x520>)
 800ac52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac56:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	da03      	bge.n	800ac6c <_dtoa_r+0x46c>
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f340 8100 	ble.w	800ae6c <_dtoa_r+0x66c>
 800ac6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac70:	4656      	mov	r6, sl
 800ac72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac76:	4620      	mov	r0, r4
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7f5 fd57 	bl	800072c <__aeabi_ddiv>
 800ac7e:	f7f5 fedb 	bl	8000a38 <__aeabi_d2iz>
 800ac82:	4680      	mov	r8, r0
 800ac84:	f7f5 fbbe 	bl	8000404 <__aeabi_i2d>
 800ac88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac8c:	f7f5 fc24 	bl	80004d8 <__aeabi_dmul>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4620      	mov	r0, r4
 800ac96:	4629      	mov	r1, r5
 800ac98:	f7f5 fa66 	bl	8000168 <__aeabi_dsub>
 800ac9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aca0:	9d07      	ldr	r5, [sp, #28]
 800aca2:	f806 4b01 	strb.w	r4, [r6], #1
 800aca6:	eba6 040a 	sub.w	r4, r6, sl
 800acaa:	42a5      	cmp	r5, r4
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	f040 8116 	bne.w	800aee0 <_dtoa_r+0x6e0>
 800acb4:	f7f5 fa5a 	bl	800016c <__adddf3>
 800acb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acbc:	4604      	mov	r4, r0
 800acbe:	460d      	mov	r5, r1
 800acc0:	f7f5 fe9a 	bl	80009f8 <__aeabi_dcmpgt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f040 80f8 	bne.w	800aeba <_dtoa_r+0x6ba>
 800acca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acce:	4620      	mov	r0, r4
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f5 fe69 	bl	80009a8 <__aeabi_dcmpeq>
 800acd6:	b118      	cbz	r0, 800ace0 <_dtoa_r+0x4e0>
 800acd8:	f018 0f01 	tst.w	r8, #1
 800acdc:	f040 80ed 	bne.w	800aeba <_dtoa_r+0x6ba>
 800ace0:	4649      	mov	r1, r9
 800ace2:	4658      	mov	r0, fp
 800ace4:	f000 fc92 	bl	800b60c <_Bfree>
 800ace8:	2300      	movs	r3, #0
 800acea:	7033      	strb	r3, [r6, #0]
 800acec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800acee:	3701      	adds	r7, #1
 800acf0:	601f      	str	r7, [r3, #0]
 800acf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8320 	beq.w	800b33a <_dtoa_r+0xb3a>
 800acfa:	601e      	str	r6, [r3, #0]
 800acfc:	e31d      	b.n	800b33a <_dtoa_r+0xb3a>
 800acfe:	07e2      	lsls	r2, r4, #31
 800ad00:	d505      	bpl.n	800ad0e <_dtoa_r+0x50e>
 800ad02:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad06:	f7f5 fbe7 	bl	80004d8 <__aeabi_dmul>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	3601      	adds	r6, #1
 800ad0e:	1064      	asrs	r4, r4, #1
 800ad10:	3508      	adds	r5, #8
 800ad12:	e73f      	b.n	800ab94 <_dtoa_r+0x394>
 800ad14:	2602      	movs	r6, #2
 800ad16:	e742      	b.n	800ab9e <_dtoa_r+0x39e>
 800ad18:	9c07      	ldr	r4, [sp, #28]
 800ad1a:	9704      	str	r7, [sp, #16]
 800ad1c:	e761      	b.n	800abe2 <_dtoa_r+0x3e2>
 800ad1e:	bf00      	nop
 800ad20:	0800df88 	.word	0x0800df88
 800ad24:	0800df60 	.word	0x0800df60
 800ad28:	3ff00000 	.word	0x3ff00000
 800ad2c:	40240000 	.word	0x40240000
 800ad30:	401c0000 	.word	0x401c0000
 800ad34:	40140000 	.word	0x40140000
 800ad38:	4b70      	ldr	r3, [pc, #448]	@ (800aefc <_dtoa_r+0x6fc>)
 800ad3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad44:	4454      	add	r4, sl
 800ad46:	2900      	cmp	r1, #0
 800ad48:	d045      	beq.n	800add6 <_dtoa_r+0x5d6>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	496c      	ldr	r1, [pc, #432]	@ (800af00 <_dtoa_r+0x700>)
 800ad4e:	f7f5 fced 	bl	800072c <__aeabi_ddiv>
 800ad52:	4633      	mov	r3, r6
 800ad54:	462a      	mov	r2, r5
 800ad56:	f7f5 fa07 	bl	8000168 <__aeabi_dsub>
 800ad5a:	4656      	mov	r6, sl
 800ad5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad64:	f7f5 fe68 	bl	8000a38 <__aeabi_d2iz>
 800ad68:	4605      	mov	r5, r0
 800ad6a:	f7f5 fb4b 	bl	8000404 <__aeabi_i2d>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad76:	f7f5 f9f7 	bl	8000168 <__aeabi_dsub>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	3530      	adds	r5, #48	@ 0x30
 800ad80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad88:	f806 5b01 	strb.w	r5, [r6], #1
 800ad8c:	f7f5 fe16 	bl	80009bc <__aeabi_dcmplt>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d163      	bne.n	800ae5c <_dtoa_r+0x65c>
 800ad94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad98:	2000      	movs	r0, #0
 800ad9a:	495a      	ldr	r1, [pc, #360]	@ (800af04 <_dtoa_r+0x704>)
 800ad9c:	f7f5 f9e4 	bl	8000168 <__aeabi_dsub>
 800ada0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ada4:	f7f5 fe0a 	bl	80009bc <__aeabi_dcmplt>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	f040 8087 	bne.w	800aebc <_dtoa_r+0x6bc>
 800adae:	42a6      	cmp	r6, r4
 800adb0:	f43f af43 	beq.w	800ac3a <_dtoa_r+0x43a>
 800adb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adb8:	2200      	movs	r2, #0
 800adba:	4b53      	ldr	r3, [pc, #332]	@ (800af08 <_dtoa_r+0x708>)
 800adbc:	f7f5 fb8c 	bl	80004d8 <__aeabi_dmul>
 800adc0:	2200      	movs	r2, #0
 800adc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adca:	4b4f      	ldr	r3, [pc, #316]	@ (800af08 <_dtoa_r+0x708>)
 800adcc:	f7f5 fb84 	bl	80004d8 <__aeabi_dmul>
 800add0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800add4:	e7c4      	b.n	800ad60 <_dtoa_r+0x560>
 800add6:	4631      	mov	r1, r6
 800add8:	4628      	mov	r0, r5
 800adda:	f7f5 fb7d 	bl	80004d8 <__aeabi_dmul>
 800adde:	4656      	mov	r6, sl
 800ade0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ade4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ade6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adea:	f7f5 fe25 	bl	8000a38 <__aeabi_d2iz>
 800adee:	4605      	mov	r5, r0
 800adf0:	f7f5 fb08 	bl	8000404 <__aeabi_i2d>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfc:	f7f5 f9b4 	bl	8000168 <__aeabi_dsub>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	3530      	adds	r5, #48	@ 0x30
 800ae06:	f806 5b01 	strb.w	r5, [r6], #1
 800ae0a:	42a6      	cmp	r6, r4
 800ae0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae10:	f04f 0200 	mov.w	r2, #0
 800ae14:	d124      	bne.n	800ae60 <_dtoa_r+0x660>
 800ae16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae1a:	4b39      	ldr	r3, [pc, #228]	@ (800af00 <_dtoa_r+0x700>)
 800ae1c:	f7f5 f9a6 	bl	800016c <__adddf3>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae28:	f7f5 fde6 	bl	80009f8 <__aeabi_dcmpgt>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d145      	bne.n	800aebc <_dtoa_r+0x6bc>
 800ae30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae34:	2000      	movs	r0, #0
 800ae36:	4932      	ldr	r1, [pc, #200]	@ (800af00 <_dtoa_r+0x700>)
 800ae38:	f7f5 f996 	bl	8000168 <__aeabi_dsub>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae44:	f7f5 fdba 	bl	80009bc <__aeabi_dcmplt>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	f43f aef6 	beq.w	800ac3a <_dtoa_r+0x43a>
 800ae4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ae50:	1e73      	subs	r3, r6, #1
 800ae52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae58:	2b30      	cmp	r3, #48	@ 0x30
 800ae5a:	d0f8      	beq.n	800ae4e <_dtoa_r+0x64e>
 800ae5c:	9f04      	ldr	r7, [sp, #16]
 800ae5e:	e73f      	b.n	800ace0 <_dtoa_r+0x4e0>
 800ae60:	4b29      	ldr	r3, [pc, #164]	@ (800af08 <_dtoa_r+0x708>)
 800ae62:	f7f5 fb39 	bl	80004d8 <__aeabi_dmul>
 800ae66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae6a:	e7bc      	b.n	800ade6 <_dtoa_r+0x5e6>
 800ae6c:	d10c      	bne.n	800ae88 <_dtoa_r+0x688>
 800ae6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae72:	2200      	movs	r2, #0
 800ae74:	4b25      	ldr	r3, [pc, #148]	@ (800af0c <_dtoa_r+0x70c>)
 800ae76:	f7f5 fb2f 	bl	80004d8 <__aeabi_dmul>
 800ae7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae7e:	f7f5 fdb1 	bl	80009e4 <__aeabi_dcmpge>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f000 815b 	beq.w	800b13e <_dtoa_r+0x93e>
 800ae88:	2400      	movs	r4, #0
 800ae8a:	4625      	mov	r5, r4
 800ae8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae8e:	4656      	mov	r6, sl
 800ae90:	43db      	mvns	r3, r3
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	2700      	movs	r7, #0
 800ae96:	4621      	mov	r1, r4
 800ae98:	4658      	mov	r0, fp
 800ae9a:	f000 fbb7 	bl	800b60c <_Bfree>
 800ae9e:	2d00      	cmp	r5, #0
 800aea0:	d0dc      	beq.n	800ae5c <_dtoa_r+0x65c>
 800aea2:	b12f      	cbz	r7, 800aeb0 <_dtoa_r+0x6b0>
 800aea4:	42af      	cmp	r7, r5
 800aea6:	d003      	beq.n	800aeb0 <_dtoa_r+0x6b0>
 800aea8:	4639      	mov	r1, r7
 800aeaa:	4658      	mov	r0, fp
 800aeac:	f000 fbae 	bl	800b60c <_Bfree>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4658      	mov	r0, fp
 800aeb4:	f000 fbaa 	bl	800b60c <_Bfree>
 800aeb8:	e7d0      	b.n	800ae5c <_dtoa_r+0x65c>
 800aeba:	9704      	str	r7, [sp, #16]
 800aebc:	4633      	mov	r3, r6
 800aebe:	461e      	mov	r6, r3
 800aec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aec4:	2a39      	cmp	r2, #57	@ 0x39
 800aec6:	d107      	bne.n	800aed8 <_dtoa_r+0x6d8>
 800aec8:	459a      	cmp	sl, r3
 800aeca:	d1f8      	bne.n	800aebe <_dtoa_r+0x6be>
 800aecc:	9a04      	ldr	r2, [sp, #16]
 800aece:	3201      	adds	r2, #1
 800aed0:	9204      	str	r2, [sp, #16]
 800aed2:	2230      	movs	r2, #48	@ 0x30
 800aed4:	f88a 2000 	strb.w	r2, [sl]
 800aed8:	781a      	ldrb	r2, [r3, #0]
 800aeda:	3201      	adds	r2, #1
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e7bd      	b.n	800ae5c <_dtoa_r+0x65c>
 800aee0:	2200      	movs	r2, #0
 800aee2:	4b09      	ldr	r3, [pc, #36]	@ (800af08 <_dtoa_r+0x708>)
 800aee4:	f7f5 faf8 	bl	80004d8 <__aeabi_dmul>
 800aee8:	2200      	movs	r2, #0
 800aeea:	2300      	movs	r3, #0
 800aeec:	4604      	mov	r4, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	f7f5 fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	f43f aebc 	beq.w	800ac72 <_dtoa_r+0x472>
 800aefa:	e6f1      	b.n	800ace0 <_dtoa_r+0x4e0>
 800aefc:	0800df88 	.word	0x0800df88
 800af00:	3fe00000 	.word	0x3fe00000
 800af04:	3ff00000 	.word	0x3ff00000
 800af08:	40240000 	.word	0x40240000
 800af0c:	40140000 	.word	0x40140000
 800af10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af12:	2a00      	cmp	r2, #0
 800af14:	f000 80db 	beq.w	800b0ce <_dtoa_r+0x8ce>
 800af18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800af1a:	2a01      	cmp	r2, #1
 800af1c:	f300 80bf 	bgt.w	800b09e <_dtoa_r+0x89e>
 800af20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af22:	2a00      	cmp	r2, #0
 800af24:	f000 80b7 	beq.w	800b096 <_dtoa_r+0x896>
 800af28:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af2c:	4646      	mov	r6, r8
 800af2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af32:	2101      	movs	r1, #1
 800af34:	441a      	add	r2, r3
 800af36:	4658      	mov	r0, fp
 800af38:	4498      	add	r8, r3
 800af3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800af3c:	f000 fc64 	bl	800b808 <__i2b>
 800af40:	4605      	mov	r5, r0
 800af42:	b15e      	cbz	r6, 800af5c <_dtoa_r+0x75c>
 800af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	dd08      	ble.n	800af5c <_dtoa_r+0x75c>
 800af4a:	42b3      	cmp	r3, r6
 800af4c:	bfa8      	it	ge
 800af4e:	4633      	movge	r3, r6
 800af50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af52:	eba8 0803 	sub.w	r8, r8, r3
 800af56:	1af6      	subs	r6, r6, r3
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af5e:	b1f3      	cbz	r3, 800af9e <_dtoa_r+0x79e>
 800af60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 80b7 	beq.w	800b0d6 <_dtoa_r+0x8d6>
 800af68:	b18c      	cbz	r4, 800af8e <_dtoa_r+0x78e>
 800af6a:	4629      	mov	r1, r5
 800af6c:	4622      	mov	r2, r4
 800af6e:	4658      	mov	r0, fp
 800af70:	f000 fd08 	bl	800b984 <__pow5mult>
 800af74:	464a      	mov	r2, r9
 800af76:	4601      	mov	r1, r0
 800af78:	4605      	mov	r5, r0
 800af7a:	4658      	mov	r0, fp
 800af7c:	f000 fc5a 	bl	800b834 <__multiply>
 800af80:	4649      	mov	r1, r9
 800af82:	9004      	str	r0, [sp, #16]
 800af84:	4658      	mov	r0, fp
 800af86:	f000 fb41 	bl	800b60c <_Bfree>
 800af8a:	9b04      	ldr	r3, [sp, #16]
 800af8c:	4699      	mov	r9, r3
 800af8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af90:	1b1a      	subs	r2, r3, r4
 800af92:	d004      	beq.n	800af9e <_dtoa_r+0x79e>
 800af94:	4649      	mov	r1, r9
 800af96:	4658      	mov	r0, fp
 800af98:	f000 fcf4 	bl	800b984 <__pow5mult>
 800af9c:	4681      	mov	r9, r0
 800af9e:	2101      	movs	r1, #1
 800afa0:	4658      	mov	r0, fp
 800afa2:	f000 fc31 	bl	800b808 <__i2b>
 800afa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afa8:	4604      	mov	r4, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 81c9 	beq.w	800b342 <_dtoa_r+0xb42>
 800afb0:	461a      	mov	r2, r3
 800afb2:	4601      	mov	r1, r0
 800afb4:	4658      	mov	r0, fp
 800afb6:	f000 fce5 	bl	800b984 <__pow5mult>
 800afba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800afbc:	4604      	mov	r4, r0
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	f300 808f 	bgt.w	800b0e2 <_dtoa_r+0x8e2>
 800afc4:	9b02      	ldr	r3, [sp, #8]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f040 8087 	bne.w	800b0da <_dtoa_r+0x8da>
 800afcc:	9b03      	ldr	r3, [sp, #12]
 800afce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f040 8083 	bne.w	800b0de <_dtoa_r+0x8de>
 800afd8:	9b03      	ldr	r3, [sp, #12]
 800afda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afde:	0d1b      	lsrs	r3, r3, #20
 800afe0:	051b      	lsls	r3, r3, #20
 800afe2:	b12b      	cbz	r3, 800aff0 <_dtoa_r+0x7f0>
 800afe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe6:	f108 0801 	add.w	r8, r8, #1
 800afea:	3301      	adds	r3, #1
 800afec:	9309      	str	r3, [sp, #36]	@ 0x24
 800afee:	2301      	movs	r3, #1
 800aff0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 81aa 	beq.w	800b34e <_dtoa_r+0xb4e>
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b000:	6918      	ldr	r0, [r3, #16]
 800b002:	f000 fbb5 	bl	800b770 <__hi0bits>
 800b006:	f1c0 0020 	rsb	r0, r0, #32
 800b00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00c:	4418      	add	r0, r3
 800b00e:	f010 001f 	ands.w	r0, r0, #31
 800b012:	d071      	beq.n	800b0f8 <_dtoa_r+0x8f8>
 800b014:	f1c0 0320 	rsb	r3, r0, #32
 800b018:	2b04      	cmp	r3, #4
 800b01a:	dd65      	ble.n	800b0e8 <_dtoa_r+0x8e8>
 800b01c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01e:	f1c0 001c 	rsb	r0, r0, #28
 800b022:	4403      	add	r3, r0
 800b024:	4480      	add	r8, r0
 800b026:	4406      	add	r6, r0
 800b028:	9309      	str	r3, [sp, #36]	@ 0x24
 800b02a:	f1b8 0f00 	cmp.w	r8, #0
 800b02e:	dd05      	ble.n	800b03c <_dtoa_r+0x83c>
 800b030:	4649      	mov	r1, r9
 800b032:	4642      	mov	r2, r8
 800b034:	4658      	mov	r0, fp
 800b036:	f000 fcff 	bl	800ba38 <__lshift>
 800b03a:	4681      	mov	r9, r0
 800b03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dd05      	ble.n	800b04e <_dtoa_r+0x84e>
 800b042:	4621      	mov	r1, r4
 800b044:	461a      	mov	r2, r3
 800b046:	4658      	mov	r0, fp
 800b048:	f000 fcf6 	bl	800ba38 <__lshift>
 800b04c:	4604      	mov	r4, r0
 800b04e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b050:	2b00      	cmp	r3, #0
 800b052:	d053      	beq.n	800b0fc <_dtoa_r+0x8fc>
 800b054:	4621      	mov	r1, r4
 800b056:	4648      	mov	r0, r9
 800b058:	f000 fd5a 	bl	800bb10 <__mcmp>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	da4d      	bge.n	800b0fc <_dtoa_r+0x8fc>
 800b060:	1e7b      	subs	r3, r7, #1
 800b062:	4649      	mov	r1, r9
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	220a      	movs	r2, #10
 800b068:	2300      	movs	r3, #0
 800b06a:	4658      	mov	r0, fp
 800b06c:	f000 faf0 	bl	800b650 <__multadd>
 800b070:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b072:	4681      	mov	r9, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 816c 	beq.w	800b352 <_dtoa_r+0xb52>
 800b07a:	2300      	movs	r3, #0
 800b07c:	4629      	mov	r1, r5
 800b07e:	220a      	movs	r2, #10
 800b080:	4658      	mov	r0, fp
 800b082:	f000 fae5 	bl	800b650 <__multadd>
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	4605      	mov	r5, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	dc61      	bgt.n	800b152 <_dtoa_r+0x952>
 800b08e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b090:	2b02      	cmp	r3, #2
 800b092:	dc3b      	bgt.n	800b10c <_dtoa_r+0x90c>
 800b094:	e05d      	b.n	800b152 <_dtoa_r+0x952>
 800b096:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b098:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b09c:	e746      	b.n	800af2c <_dtoa_r+0x72c>
 800b09e:	9b07      	ldr	r3, [sp, #28]
 800b0a0:	1e5c      	subs	r4, r3, #1
 800b0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0a4:	42a3      	cmp	r3, r4
 800b0a6:	bfbf      	itttt	lt
 800b0a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b0ac:	1ae3      	sublt	r3, r4, r3
 800b0ae:	18d2      	addlt	r2, r2, r3
 800b0b0:	bfa8      	it	ge
 800b0b2:	1b1c      	subge	r4, r3, r4
 800b0b4:	9b07      	ldr	r3, [sp, #28]
 800b0b6:	bfbe      	ittt	lt
 800b0b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b0ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b0bc:	2400      	movlt	r4, #0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bfb5      	itete	lt
 800b0c2:	eba8 0603 	sublt.w	r6, r8, r3
 800b0c6:	4646      	movge	r6, r8
 800b0c8:	2300      	movlt	r3, #0
 800b0ca:	9b07      	ldrge	r3, [sp, #28]
 800b0cc:	e730      	b.n	800af30 <_dtoa_r+0x730>
 800b0ce:	4646      	mov	r6, r8
 800b0d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b0d4:	e735      	b.n	800af42 <_dtoa_r+0x742>
 800b0d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0d8:	e75c      	b.n	800af94 <_dtoa_r+0x794>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e788      	b.n	800aff0 <_dtoa_r+0x7f0>
 800b0de:	9b02      	ldr	r3, [sp, #8]
 800b0e0:	e786      	b.n	800aff0 <_dtoa_r+0x7f0>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e6:	e788      	b.n	800affa <_dtoa_r+0x7fa>
 800b0e8:	d09f      	beq.n	800b02a <_dtoa_r+0x82a>
 800b0ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ec:	331c      	adds	r3, #28
 800b0ee:	441a      	add	r2, r3
 800b0f0:	4498      	add	r8, r3
 800b0f2:	441e      	add	r6, r3
 800b0f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0f6:	e798      	b.n	800b02a <_dtoa_r+0x82a>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	e7f6      	b.n	800b0ea <_dtoa_r+0x8ea>
 800b0fc:	9b07      	ldr	r3, [sp, #28]
 800b0fe:	9704      	str	r7, [sp, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc20      	bgt.n	800b146 <_dtoa_r+0x946>
 800b104:	9308      	str	r3, [sp, #32]
 800b106:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b108:	2b02      	cmp	r3, #2
 800b10a:	dd1e      	ble.n	800b14a <_dtoa_r+0x94a>
 800b10c:	9b08      	ldr	r3, [sp, #32]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f47f aebc 	bne.w	800ae8c <_dtoa_r+0x68c>
 800b114:	4621      	mov	r1, r4
 800b116:	2205      	movs	r2, #5
 800b118:	4658      	mov	r0, fp
 800b11a:	f000 fa99 	bl	800b650 <__multadd>
 800b11e:	4601      	mov	r1, r0
 800b120:	4604      	mov	r4, r0
 800b122:	4648      	mov	r0, r9
 800b124:	f000 fcf4 	bl	800bb10 <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	f77f aeaf 	ble.w	800ae8c <_dtoa_r+0x68c>
 800b12e:	2331      	movs	r3, #49	@ 0x31
 800b130:	4656      	mov	r6, sl
 800b132:	f806 3b01 	strb.w	r3, [r6], #1
 800b136:	9b04      	ldr	r3, [sp, #16]
 800b138:	3301      	adds	r3, #1
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	e6aa      	b.n	800ae94 <_dtoa_r+0x694>
 800b13e:	9c07      	ldr	r4, [sp, #28]
 800b140:	9704      	str	r7, [sp, #16]
 800b142:	4625      	mov	r5, r4
 800b144:	e7f3      	b.n	800b12e <_dtoa_r+0x92e>
 800b146:	9b07      	ldr	r3, [sp, #28]
 800b148:	9308      	str	r3, [sp, #32]
 800b14a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 8104 	beq.w	800b35a <_dtoa_r+0xb5a>
 800b152:	2e00      	cmp	r6, #0
 800b154:	dd05      	ble.n	800b162 <_dtoa_r+0x962>
 800b156:	4629      	mov	r1, r5
 800b158:	4632      	mov	r2, r6
 800b15a:	4658      	mov	r0, fp
 800b15c:	f000 fc6c 	bl	800ba38 <__lshift>
 800b160:	4605      	mov	r5, r0
 800b162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b164:	2b00      	cmp	r3, #0
 800b166:	d05a      	beq.n	800b21e <_dtoa_r+0xa1e>
 800b168:	4658      	mov	r0, fp
 800b16a:	6869      	ldr	r1, [r5, #4]
 800b16c:	f000 fa0e 	bl	800b58c <_Balloc>
 800b170:	4606      	mov	r6, r0
 800b172:	b928      	cbnz	r0, 800b180 <_dtoa_r+0x980>
 800b174:	4602      	mov	r2, r0
 800b176:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b17a:	4b83      	ldr	r3, [pc, #524]	@ (800b388 <_dtoa_r+0xb88>)
 800b17c:	f7ff bb54 	b.w	800a828 <_dtoa_r+0x28>
 800b180:	692a      	ldr	r2, [r5, #16]
 800b182:	f105 010c 	add.w	r1, r5, #12
 800b186:	3202      	adds	r2, #2
 800b188:	0092      	lsls	r2, r2, #2
 800b18a:	300c      	adds	r0, #12
 800b18c:	f7ff fa9b 	bl	800a6c6 <memcpy>
 800b190:	2201      	movs	r2, #1
 800b192:	4631      	mov	r1, r6
 800b194:	4658      	mov	r0, fp
 800b196:	f000 fc4f 	bl	800ba38 <__lshift>
 800b19a:	462f      	mov	r7, r5
 800b19c:	4605      	mov	r5, r0
 800b19e:	f10a 0301 	add.w	r3, sl, #1
 800b1a2:	9307      	str	r3, [sp, #28]
 800b1a4:	9b08      	ldr	r3, [sp, #32]
 800b1a6:	4453      	add	r3, sl
 800b1a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1aa:	9b02      	ldr	r3, [sp, #8]
 800b1ac:	f003 0301 	and.w	r3, r3, #1
 800b1b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1b2:	9b07      	ldr	r3, [sp, #28]
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	4648      	mov	r0, r9
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	f7ff fa96 	bl	800a6ec <quorem>
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	9008      	str	r0, [sp, #32]
 800b1c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1c8:	4648      	mov	r0, r9
 800b1ca:	f000 fca1 	bl	800bb10 <__mcmp>
 800b1ce:	462a      	mov	r2, r5
 800b1d0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4658      	mov	r0, fp
 800b1d6:	f000 fcb7 	bl	800bb48 <__mdiff>
 800b1da:	68c2      	ldr	r2, [r0, #12]
 800b1dc:	4606      	mov	r6, r0
 800b1de:	bb02      	cbnz	r2, 800b222 <_dtoa_r+0xa22>
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	4648      	mov	r0, r9
 800b1e4:	f000 fc94 	bl	800bb10 <__mcmp>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	4658      	mov	r0, fp
 800b1ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800b1f0:	f000 fa0c 	bl	800b60c <_Bfree>
 800b1f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b1f8:	9e07      	ldr	r6, [sp, #28]
 800b1fa:	ea43 0102 	orr.w	r1, r3, r2
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b200:	4319      	orrs	r1, r3
 800b202:	d110      	bne.n	800b226 <_dtoa_r+0xa26>
 800b204:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b208:	d029      	beq.n	800b25e <_dtoa_r+0xa5e>
 800b20a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dd02      	ble.n	800b216 <_dtoa_r+0xa16>
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b216:	9b02      	ldr	r3, [sp, #8]
 800b218:	f883 8000 	strb.w	r8, [r3]
 800b21c:	e63b      	b.n	800ae96 <_dtoa_r+0x696>
 800b21e:	4628      	mov	r0, r5
 800b220:	e7bb      	b.n	800b19a <_dtoa_r+0x99a>
 800b222:	2201      	movs	r2, #1
 800b224:	e7e1      	b.n	800b1ea <_dtoa_r+0x9ea>
 800b226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	db04      	blt.n	800b236 <_dtoa_r+0xa36>
 800b22c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b22e:	430b      	orrs	r3, r1
 800b230:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b232:	430b      	orrs	r3, r1
 800b234:	d120      	bne.n	800b278 <_dtoa_r+0xa78>
 800b236:	2a00      	cmp	r2, #0
 800b238:	dded      	ble.n	800b216 <_dtoa_r+0xa16>
 800b23a:	4649      	mov	r1, r9
 800b23c:	2201      	movs	r2, #1
 800b23e:	4658      	mov	r0, fp
 800b240:	f000 fbfa 	bl	800ba38 <__lshift>
 800b244:	4621      	mov	r1, r4
 800b246:	4681      	mov	r9, r0
 800b248:	f000 fc62 	bl	800bb10 <__mcmp>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	dc03      	bgt.n	800b258 <_dtoa_r+0xa58>
 800b250:	d1e1      	bne.n	800b216 <_dtoa_r+0xa16>
 800b252:	f018 0f01 	tst.w	r8, #1
 800b256:	d0de      	beq.n	800b216 <_dtoa_r+0xa16>
 800b258:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b25c:	d1d8      	bne.n	800b210 <_dtoa_r+0xa10>
 800b25e:	2339      	movs	r3, #57	@ 0x39
 800b260:	9a02      	ldr	r2, [sp, #8]
 800b262:	7013      	strb	r3, [r2, #0]
 800b264:	4633      	mov	r3, r6
 800b266:	461e      	mov	r6, r3
 800b268:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	2a39      	cmp	r2, #57	@ 0x39
 800b270:	d052      	beq.n	800b318 <_dtoa_r+0xb18>
 800b272:	3201      	adds	r2, #1
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	e60e      	b.n	800ae96 <_dtoa_r+0x696>
 800b278:	2a00      	cmp	r2, #0
 800b27a:	dd07      	ble.n	800b28c <_dtoa_r+0xa8c>
 800b27c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b280:	d0ed      	beq.n	800b25e <_dtoa_r+0xa5e>
 800b282:	9a02      	ldr	r2, [sp, #8]
 800b284:	f108 0301 	add.w	r3, r8, #1
 800b288:	7013      	strb	r3, [r2, #0]
 800b28a:	e604      	b.n	800ae96 <_dtoa_r+0x696>
 800b28c:	9b07      	ldr	r3, [sp, #28]
 800b28e:	9a07      	ldr	r2, [sp, #28]
 800b290:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b296:	4293      	cmp	r3, r2
 800b298:	d028      	beq.n	800b2ec <_dtoa_r+0xaec>
 800b29a:	4649      	mov	r1, r9
 800b29c:	2300      	movs	r3, #0
 800b29e:	220a      	movs	r2, #10
 800b2a0:	4658      	mov	r0, fp
 800b2a2:	f000 f9d5 	bl	800b650 <__multadd>
 800b2a6:	42af      	cmp	r7, r5
 800b2a8:	4681      	mov	r9, r0
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	f04f 020a 	mov.w	r2, #10
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	4658      	mov	r0, fp
 800b2b6:	d107      	bne.n	800b2c8 <_dtoa_r+0xac8>
 800b2b8:	f000 f9ca 	bl	800b650 <__multadd>
 800b2bc:	4607      	mov	r7, r0
 800b2be:	4605      	mov	r5, r0
 800b2c0:	9b07      	ldr	r3, [sp, #28]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	9307      	str	r3, [sp, #28]
 800b2c6:	e774      	b.n	800b1b2 <_dtoa_r+0x9b2>
 800b2c8:	f000 f9c2 	bl	800b650 <__multadd>
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4607      	mov	r7, r0
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	220a      	movs	r2, #10
 800b2d4:	4658      	mov	r0, fp
 800b2d6:	f000 f9bb 	bl	800b650 <__multadd>
 800b2da:	4605      	mov	r5, r0
 800b2dc:	e7f0      	b.n	800b2c0 <_dtoa_r+0xac0>
 800b2de:	9b08      	ldr	r3, [sp, #32]
 800b2e0:	2700      	movs	r7, #0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bfcc      	ite	gt
 800b2e6:	461e      	movgt	r6, r3
 800b2e8:	2601      	movle	r6, #1
 800b2ea:	4456      	add	r6, sl
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	4658      	mov	r0, fp
 800b2f2:	f000 fba1 	bl	800ba38 <__lshift>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4681      	mov	r9, r0
 800b2fa:	f000 fc09 	bl	800bb10 <__mcmp>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	dcb0      	bgt.n	800b264 <_dtoa_r+0xa64>
 800b302:	d102      	bne.n	800b30a <_dtoa_r+0xb0a>
 800b304:	f018 0f01 	tst.w	r8, #1
 800b308:	d1ac      	bne.n	800b264 <_dtoa_r+0xa64>
 800b30a:	4633      	mov	r3, r6
 800b30c:	461e      	mov	r6, r3
 800b30e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b312:	2a30      	cmp	r2, #48	@ 0x30
 800b314:	d0fa      	beq.n	800b30c <_dtoa_r+0xb0c>
 800b316:	e5be      	b.n	800ae96 <_dtoa_r+0x696>
 800b318:	459a      	cmp	sl, r3
 800b31a:	d1a4      	bne.n	800b266 <_dtoa_r+0xa66>
 800b31c:	9b04      	ldr	r3, [sp, #16]
 800b31e:	3301      	adds	r3, #1
 800b320:	9304      	str	r3, [sp, #16]
 800b322:	2331      	movs	r3, #49	@ 0x31
 800b324:	f88a 3000 	strb.w	r3, [sl]
 800b328:	e5b5      	b.n	800ae96 <_dtoa_r+0x696>
 800b32a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b32c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b38c <_dtoa_r+0xb8c>
 800b330:	b11b      	cbz	r3, 800b33a <_dtoa_r+0xb3a>
 800b332:	f10a 0308 	add.w	r3, sl, #8
 800b336:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	4650      	mov	r0, sl
 800b33c:	b017      	add	sp, #92	@ 0x5c
 800b33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b342:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b344:	2b01      	cmp	r3, #1
 800b346:	f77f ae3d 	ble.w	800afc4 <_dtoa_r+0x7c4>
 800b34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b34c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b34e:	2001      	movs	r0, #1
 800b350:	e65b      	b.n	800b00a <_dtoa_r+0x80a>
 800b352:	9b08      	ldr	r3, [sp, #32]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f77f aed6 	ble.w	800b106 <_dtoa_r+0x906>
 800b35a:	4656      	mov	r6, sl
 800b35c:	4621      	mov	r1, r4
 800b35e:	4648      	mov	r0, r9
 800b360:	f7ff f9c4 	bl	800a6ec <quorem>
 800b364:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b368:	9b08      	ldr	r3, [sp, #32]
 800b36a:	f806 8b01 	strb.w	r8, [r6], #1
 800b36e:	eba6 020a 	sub.w	r2, r6, sl
 800b372:	4293      	cmp	r3, r2
 800b374:	ddb3      	ble.n	800b2de <_dtoa_r+0xade>
 800b376:	4649      	mov	r1, r9
 800b378:	2300      	movs	r3, #0
 800b37a:	220a      	movs	r2, #10
 800b37c:	4658      	mov	r0, fp
 800b37e:	f000 f967 	bl	800b650 <__multadd>
 800b382:	4681      	mov	r9, r0
 800b384:	e7ea      	b.n	800b35c <_dtoa_r+0xb5c>
 800b386:	bf00      	nop
 800b388:	0800dee8 	.word	0x0800dee8
 800b38c:	0800de6c 	.word	0x0800de6c

0800b390 <_free_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4605      	mov	r5, r0
 800b394:	2900      	cmp	r1, #0
 800b396:	d040      	beq.n	800b41a <_free_r+0x8a>
 800b398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b39c:	1f0c      	subs	r4, r1, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bfb8      	it	lt
 800b3a2:	18e4      	addlt	r4, r4, r3
 800b3a4:	f000 f8e6 	bl	800b574 <__malloc_lock>
 800b3a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b41c <_free_r+0x8c>)
 800b3aa:	6813      	ldr	r3, [r2, #0]
 800b3ac:	b933      	cbnz	r3, 800b3bc <_free_r+0x2c>
 800b3ae:	6063      	str	r3, [r4, #4]
 800b3b0:	6014      	str	r4, [r2, #0]
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b8:	f000 b8e2 	b.w	800b580 <__malloc_unlock>
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	d908      	bls.n	800b3d2 <_free_r+0x42>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	1821      	adds	r1, r4, r0
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	bf01      	itttt	eq
 800b3c8:	6819      	ldreq	r1, [r3, #0]
 800b3ca:	685b      	ldreq	r3, [r3, #4]
 800b3cc:	1809      	addeq	r1, r1, r0
 800b3ce:	6021      	streq	r1, [r4, #0]
 800b3d0:	e7ed      	b.n	800b3ae <_free_r+0x1e>
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	b10b      	cbz	r3, 800b3dc <_free_r+0x4c>
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	d9fa      	bls.n	800b3d2 <_free_r+0x42>
 800b3dc:	6811      	ldr	r1, [r2, #0]
 800b3de:	1850      	adds	r0, r2, r1
 800b3e0:	42a0      	cmp	r0, r4
 800b3e2:	d10b      	bne.n	800b3fc <_free_r+0x6c>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	4401      	add	r1, r0
 800b3e8:	1850      	adds	r0, r2, r1
 800b3ea:	4283      	cmp	r3, r0
 800b3ec:	6011      	str	r1, [r2, #0]
 800b3ee:	d1e0      	bne.n	800b3b2 <_free_r+0x22>
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	4408      	add	r0, r1
 800b3f6:	6010      	str	r0, [r2, #0]
 800b3f8:	6053      	str	r3, [r2, #4]
 800b3fa:	e7da      	b.n	800b3b2 <_free_r+0x22>
 800b3fc:	d902      	bls.n	800b404 <_free_r+0x74>
 800b3fe:	230c      	movs	r3, #12
 800b400:	602b      	str	r3, [r5, #0]
 800b402:	e7d6      	b.n	800b3b2 <_free_r+0x22>
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	1821      	adds	r1, r4, r0
 800b408:	428b      	cmp	r3, r1
 800b40a:	bf01      	itttt	eq
 800b40c:	6819      	ldreq	r1, [r3, #0]
 800b40e:	685b      	ldreq	r3, [r3, #4]
 800b410:	1809      	addeq	r1, r1, r0
 800b412:	6021      	streq	r1, [r4, #0]
 800b414:	6063      	str	r3, [r4, #4]
 800b416:	6054      	str	r4, [r2, #4]
 800b418:	e7cb      	b.n	800b3b2 <_free_r+0x22>
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	20001f5c 	.word	0x20001f5c

0800b420 <malloc>:
 800b420:	4b02      	ldr	r3, [pc, #8]	@ (800b42c <malloc+0xc>)
 800b422:	4601      	mov	r1, r0
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f000 b825 	b.w	800b474 <_malloc_r>
 800b42a:	bf00      	nop
 800b42c:	20000024 	.word	0x20000024

0800b430 <sbrk_aligned>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	4e0f      	ldr	r6, [pc, #60]	@ (800b470 <sbrk_aligned+0x40>)
 800b434:	460c      	mov	r4, r1
 800b436:	6831      	ldr	r1, [r6, #0]
 800b438:	4605      	mov	r5, r0
 800b43a:	b911      	cbnz	r1, 800b442 <sbrk_aligned+0x12>
 800b43c:	f001 ff2c 	bl	800d298 <_sbrk_r>
 800b440:	6030      	str	r0, [r6, #0]
 800b442:	4621      	mov	r1, r4
 800b444:	4628      	mov	r0, r5
 800b446:	f001 ff27 	bl	800d298 <_sbrk_r>
 800b44a:	1c43      	adds	r3, r0, #1
 800b44c:	d103      	bne.n	800b456 <sbrk_aligned+0x26>
 800b44e:	f04f 34ff 	mov.w	r4, #4294967295
 800b452:	4620      	mov	r0, r4
 800b454:	bd70      	pop	{r4, r5, r6, pc}
 800b456:	1cc4      	adds	r4, r0, #3
 800b458:	f024 0403 	bic.w	r4, r4, #3
 800b45c:	42a0      	cmp	r0, r4
 800b45e:	d0f8      	beq.n	800b452 <sbrk_aligned+0x22>
 800b460:	1a21      	subs	r1, r4, r0
 800b462:	4628      	mov	r0, r5
 800b464:	f001 ff18 	bl	800d298 <_sbrk_r>
 800b468:	3001      	adds	r0, #1
 800b46a:	d1f2      	bne.n	800b452 <sbrk_aligned+0x22>
 800b46c:	e7ef      	b.n	800b44e <sbrk_aligned+0x1e>
 800b46e:	bf00      	nop
 800b470:	20001f58 	.word	0x20001f58

0800b474 <_malloc_r>:
 800b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b478:	1ccd      	adds	r5, r1, #3
 800b47a:	f025 0503 	bic.w	r5, r5, #3
 800b47e:	3508      	adds	r5, #8
 800b480:	2d0c      	cmp	r5, #12
 800b482:	bf38      	it	cc
 800b484:	250c      	movcc	r5, #12
 800b486:	2d00      	cmp	r5, #0
 800b488:	4606      	mov	r6, r0
 800b48a:	db01      	blt.n	800b490 <_malloc_r+0x1c>
 800b48c:	42a9      	cmp	r1, r5
 800b48e:	d904      	bls.n	800b49a <_malloc_r+0x26>
 800b490:	230c      	movs	r3, #12
 800b492:	6033      	str	r3, [r6, #0]
 800b494:	2000      	movs	r0, #0
 800b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b570 <_malloc_r+0xfc>
 800b49e:	f000 f869 	bl	800b574 <__malloc_lock>
 800b4a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a6:	461c      	mov	r4, r3
 800b4a8:	bb44      	cbnz	r4, 800b4fc <_malloc_r+0x88>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff ffbf 	bl	800b430 <sbrk_aligned>
 800b4b2:	1c43      	adds	r3, r0, #1
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	d158      	bne.n	800b56a <_malloc_r+0xf6>
 800b4b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b4bc:	4627      	mov	r7, r4
 800b4be:	2f00      	cmp	r7, #0
 800b4c0:	d143      	bne.n	800b54a <_malloc_r+0xd6>
 800b4c2:	2c00      	cmp	r4, #0
 800b4c4:	d04b      	beq.n	800b55e <_malloc_r+0xea>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	eb04 0903 	add.w	r9, r4, r3
 800b4d0:	f001 fee2 	bl	800d298 <_sbrk_r>
 800b4d4:	4581      	cmp	r9, r0
 800b4d6:	d142      	bne.n	800b55e <_malloc_r+0xea>
 800b4d8:	6821      	ldr	r1, [r4, #0]
 800b4da:	4630      	mov	r0, r6
 800b4dc:	1a6d      	subs	r5, r5, r1
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f7ff ffa6 	bl	800b430 <sbrk_aligned>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d03a      	beq.n	800b55e <_malloc_r+0xea>
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	442b      	add	r3, r5
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	bb62      	cbnz	r2, 800b550 <_malloc_r+0xdc>
 800b4f6:	f8c8 7000 	str.w	r7, [r8]
 800b4fa:	e00f      	b.n	800b51c <_malloc_r+0xa8>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	1b52      	subs	r2, r2, r5
 800b500:	d420      	bmi.n	800b544 <_malloc_r+0xd0>
 800b502:	2a0b      	cmp	r2, #11
 800b504:	d917      	bls.n	800b536 <_malloc_r+0xc2>
 800b506:	1961      	adds	r1, r4, r5
 800b508:	42a3      	cmp	r3, r4
 800b50a:	6025      	str	r5, [r4, #0]
 800b50c:	bf18      	it	ne
 800b50e:	6059      	strne	r1, [r3, #4]
 800b510:	6863      	ldr	r3, [r4, #4]
 800b512:	bf08      	it	eq
 800b514:	f8c8 1000 	streq.w	r1, [r8]
 800b518:	5162      	str	r2, [r4, r5]
 800b51a:	604b      	str	r3, [r1, #4]
 800b51c:	4630      	mov	r0, r6
 800b51e:	f000 f82f 	bl	800b580 <__malloc_unlock>
 800b522:	f104 000b 	add.w	r0, r4, #11
 800b526:	1d23      	adds	r3, r4, #4
 800b528:	f020 0007 	bic.w	r0, r0, #7
 800b52c:	1ac2      	subs	r2, r0, r3
 800b52e:	bf1c      	itt	ne
 800b530:	1a1b      	subne	r3, r3, r0
 800b532:	50a3      	strne	r3, [r4, r2]
 800b534:	e7af      	b.n	800b496 <_malloc_r+0x22>
 800b536:	6862      	ldr	r2, [r4, #4]
 800b538:	42a3      	cmp	r3, r4
 800b53a:	bf0c      	ite	eq
 800b53c:	f8c8 2000 	streq.w	r2, [r8]
 800b540:	605a      	strne	r2, [r3, #4]
 800b542:	e7eb      	b.n	800b51c <_malloc_r+0xa8>
 800b544:	4623      	mov	r3, r4
 800b546:	6864      	ldr	r4, [r4, #4]
 800b548:	e7ae      	b.n	800b4a8 <_malloc_r+0x34>
 800b54a:	463c      	mov	r4, r7
 800b54c:	687f      	ldr	r7, [r7, #4]
 800b54e:	e7b6      	b.n	800b4be <_malloc_r+0x4a>
 800b550:	461a      	mov	r2, r3
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	42a3      	cmp	r3, r4
 800b556:	d1fb      	bne.n	800b550 <_malloc_r+0xdc>
 800b558:	2300      	movs	r3, #0
 800b55a:	6053      	str	r3, [r2, #4]
 800b55c:	e7de      	b.n	800b51c <_malloc_r+0xa8>
 800b55e:	230c      	movs	r3, #12
 800b560:	4630      	mov	r0, r6
 800b562:	6033      	str	r3, [r6, #0]
 800b564:	f000 f80c 	bl	800b580 <__malloc_unlock>
 800b568:	e794      	b.n	800b494 <_malloc_r+0x20>
 800b56a:	6005      	str	r5, [r0, #0]
 800b56c:	e7d6      	b.n	800b51c <_malloc_r+0xa8>
 800b56e:	bf00      	nop
 800b570:	20001f5c 	.word	0x20001f5c

0800b574 <__malloc_lock>:
 800b574:	4801      	ldr	r0, [pc, #4]	@ (800b57c <__malloc_lock+0x8>)
 800b576:	f7ff b896 	b.w	800a6a6 <__retarget_lock_acquire_recursive>
 800b57a:	bf00      	nop
 800b57c:	20001f54 	.word	0x20001f54

0800b580 <__malloc_unlock>:
 800b580:	4801      	ldr	r0, [pc, #4]	@ (800b588 <__malloc_unlock+0x8>)
 800b582:	f7ff b891 	b.w	800a6a8 <__retarget_lock_release_recursive>
 800b586:	bf00      	nop
 800b588:	20001f54 	.word	0x20001f54

0800b58c <_Balloc>:
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	69c6      	ldr	r6, [r0, #28]
 800b590:	4604      	mov	r4, r0
 800b592:	460d      	mov	r5, r1
 800b594:	b976      	cbnz	r6, 800b5b4 <_Balloc+0x28>
 800b596:	2010      	movs	r0, #16
 800b598:	f7ff ff42 	bl	800b420 <malloc>
 800b59c:	4602      	mov	r2, r0
 800b59e:	61e0      	str	r0, [r4, #28]
 800b5a0:	b920      	cbnz	r0, 800b5ac <_Balloc+0x20>
 800b5a2:	216b      	movs	r1, #107	@ 0x6b
 800b5a4:	4b17      	ldr	r3, [pc, #92]	@ (800b604 <_Balloc+0x78>)
 800b5a6:	4818      	ldr	r0, [pc, #96]	@ (800b608 <_Balloc+0x7c>)
 800b5a8:	f001 fe8c 	bl	800d2c4 <__assert_func>
 800b5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b0:	6006      	str	r6, [r0, #0]
 800b5b2:	60c6      	str	r6, [r0, #12]
 800b5b4:	69e6      	ldr	r6, [r4, #28]
 800b5b6:	68f3      	ldr	r3, [r6, #12]
 800b5b8:	b183      	cbz	r3, 800b5dc <_Balloc+0x50>
 800b5ba:	69e3      	ldr	r3, [r4, #28]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5c2:	b9b8      	cbnz	r0, 800b5f4 <_Balloc+0x68>
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	fa01 f605 	lsl.w	r6, r1, r5
 800b5ca:	1d72      	adds	r2, r6, #5
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	0092      	lsls	r2, r2, #2
 800b5d0:	f001 fe96 	bl	800d300 <_calloc_r>
 800b5d4:	b160      	cbz	r0, 800b5f0 <_Balloc+0x64>
 800b5d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5da:	e00e      	b.n	800b5fa <_Balloc+0x6e>
 800b5dc:	2221      	movs	r2, #33	@ 0x21
 800b5de:	2104      	movs	r1, #4
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f001 fe8d 	bl	800d300 <_calloc_r>
 800b5e6:	69e3      	ldr	r3, [r4, #28]
 800b5e8:	60f0      	str	r0, [r6, #12]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e4      	bne.n	800b5ba <_Balloc+0x2e>
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	bd70      	pop	{r4, r5, r6, pc}
 800b5f4:	6802      	ldr	r2, [r0, #0]
 800b5f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b600:	e7f7      	b.n	800b5f2 <_Balloc+0x66>
 800b602:	bf00      	nop
 800b604:	0800de79 	.word	0x0800de79
 800b608:	0800def9 	.word	0x0800def9

0800b60c <_Bfree>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	69c6      	ldr	r6, [r0, #28]
 800b610:	4605      	mov	r5, r0
 800b612:	460c      	mov	r4, r1
 800b614:	b976      	cbnz	r6, 800b634 <_Bfree+0x28>
 800b616:	2010      	movs	r0, #16
 800b618:	f7ff ff02 	bl	800b420 <malloc>
 800b61c:	4602      	mov	r2, r0
 800b61e:	61e8      	str	r0, [r5, #28]
 800b620:	b920      	cbnz	r0, 800b62c <_Bfree+0x20>
 800b622:	218f      	movs	r1, #143	@ 0x8f
 800b624:	4b08      	ldr	r3, [pc, #32]	@ (800b648 <_Bfree+0x3c>)
 800b626:	4809      	ldr	r0, [pc, #36]	@ (800b64c <_Bfree+0x40>)
 800b628:	f001 fe4c 	bl	800d2c4 <__assert_func>
 800b62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b630:	6006      	str	r6, [r0, #0]
 800b632:	60c6      	str	r6, [r0, #12]
 800b634:	b13c      	cbz	r4, 800b646 <_Bfree+0x3a>
 800b636:	69eb      	ldr	r3, [r5, #28]
 800b638:	6862      	ldr	r2, [r4, #4]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b640:	6021      	str	r1, [r4, #0]
 800b642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	0800de79 	.word	0x0800de79
 800b64c:	0800def9 	.word	0x0800def9

0800b650 <__multadd>:
 800b650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b654:	4607      	mov	r7, r0
 800b656:	460c      	mov	r4, r1
 800b658:	461e      	mov	r6, r3
 800b65a:	2000      	movs	r0, #0
 800b65c:	690d      	ldr	r5, [r1, #16]
 800b65e:	f101 0c14 	add.w	ip, r1, #20
 800b662:	f8dc 3000 	ldr.w	r3, [ip]
 800b666:	3001      	adds	r0, #1
 800b668:	b299      	uxth	r1, r3
 800b66a:	fb02 6101 	mla	r1, r2, r1, r6
 800b66e:	0c1e      	lsrs	r6, r3, #16
 800b670:	0c0b      	lsrs	r3, r1, #16
 800b672:	fb02 3306 	mla	r3, r2, r6, r3
 800b676:	b289      	uxth	r1, r1
 800b678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b67c:	4285      	cmp	r5, r0
 800b67e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b682:	f84c 1b04 	str.w	r1, [ip], #4
 800b686:	dcec      	bgt.n	800b662 <__multadd+0x12>
 800b688:	b30e      	cbz	r6, 800b6ce <__multadd+0x7e>
 800b68a:	68a3      	ldr	r3, [r4, #8]
 800b68c:	42ab      	cmp	r3, r5
 800b68e:	dc19      	bgt.n	800b6c4 <__multadd+0x74>
 800b690:	6861      	ldr	r1, [r4, #4]
 800b692:	4638      	mov	r0, r7
 800b694:	3101      	adds	r1, #1
 800b696:	f7ff ff79 	bl	800b58c <_Balloc>
 800b69a:	4680      	mov	r8, r0
 800b69c:	b928      	cbnz	r0, 800b6aa <__multadd+0x5a>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	21ba      	movs	r1, #186	@ 0xba
 800b6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d4 <__multadd+0x84>)
 800b6a4:	480c      	ldr	r0, [pc, #48]	@ (800b6d8 <__multadd+0x88>)
 800b6a6:	f001 fe0d 	bl	800d2c4 <__assert_func>
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	f104 010c 	add.w	r1, r4, #12
 800b6b0:	3202      	adds	r2, #2
 800b6b2:	0092      	lsls	r2, r2, #2
 800b6b4:	300c      	adds	r0, #12
 800b6b6:	f7ff f806 	bl	800a6c6 <memcpy>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7ff ffa5 	bl	800b60c <_Bfree>
 800b6c2:	4644      	mov	r4, r8
 800b6c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	615e      	str	r6, [r3, #20]
 800b6cc:	6125      	str	r5, [r4, #16]
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d4:	0800dee8 	.word	0x0800dee8
 800b6d8:	0800def9 	.word	0x0800def9

0800b6dc <__s2b>:
 800b6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e0:	4615      	mov	r5, r2
 800b6e2:	2209      	movs	r2, #9
 800b6e4:	461f      	mov	r7, r3
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	db09      	blt.n	800b70c <__s2b+0x30>
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f7ff ff47 	bl	800b58c <_Balloc>
 800b6fe:	b940      	cbnz	r0, 800b712 <__s2b+0x36>
 800b700:	4602      	mov	r2, r0
 800b702:	21d3      	movs	r1, #211	@ 0xd3
 800b704:	4b18      	ldr	r3, [pc, #96]	@ (800b768 <__s2b+0x8c>)
 800b706:	4819      	ldr	r0, [pc, #100]	@ (800b76c <__s2b+0x90>)
 800b708:	f001 fddc 	bl	800d2c4 <__assert_func>
 800b70c:	0052      	lsls	r2, r2, #1
 800b70e:	3101      	adds	r1, #1
 800b710:	e7f0      	b.n	800b6f4 <__s2b+0x18>
 800b712:	9b08      	ldr	r3, [sp, #32]
 800b714:	2d09      	cmp	r5, #9
 800b716:	6143      	str	r3, [r0, #20]
 800b718:	f04f 0301 	mov.w	r3, #1
 800b71c:	6103      	str	r3, [r0, #16]
 800b71e:	dd16      	ble.n	800b74e <__s2b+0x72>
 800b720:	f104 0909 	add.w	r9, r4, #9
 800b724:	46c8      	mov	r8, r9
 800b726:	442c      	add	r4, r5
 800b728:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b72c:	4601      	mov	r1, r0
 800b72e:	220a      	movs	r2, #10
 800b730:	4630      	mov	r0, r6
 800b732:	3b30      	subs	r3, #48	@ 0x30
 800b734:	f7ff ff8c 	bl	800b650 <__multadd>
 800b738:	45a0      	cmp	r8, r4
 800b73a:	d1f5      	bne.n	800b728 <__s2b+0x4c>
 800b73c:	f1a5 0408 	sub.w	r4, r5, #8
 800b740:	444c      	add	r4, r9
 800b742:	1b2d      	subs	r5, r5, r4
 800b744:	1963      	adds	r3, r4, r5
 800b746:	42bb      	cmp	r3, r7
 800b748:	db04      	blt.n	800b754 <__s2b+0x78>
 800b74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b74e:	2509      	movs	r5, #9
 800b750:	340a      	adds	r4, #10
 800b752:	e7f6      	b.n	800b742 <__s2b+0x66>
 800b754:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b758:	4601      	mov	r1, r0
 800b75a:	220a      	movs	r2, #10
 800b75c:	4630      	mov	r0, r6
 800b75e:	3b30      	subs	r3, #48	@ 0x30
 800b760:	f7ff ff76 	bl	800b650 <__multadd>
 800b764:	e7ee      	b.n	800b744 <__s2b+0x68>
 800b766:	bf00      	nop
 800b768:	0800dee8 	.word	0x0800dee8
 800b76c:	0800def9 	.word	0x0800def9

0800b770 <__hi0bits>:
 800b770:	4603      	mov	r3, r0
 800b772:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b776:	bf3a      	itte	cc
 800b778:	0403      	lslcc	r3, r0, #16
 800b77a:	2010      	movcc	r0, #16
 800b77c:	2000      	movcs	r0, #0
 800b77e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b782:	bf3c      	itt	cc
 800b784:	021b      	lslcc	r3, r3, #8
 800b786:	3008      	addcc	r0, #8
 800b788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b78c:	bf3c      	itt	cc
 800b78e:	011b      	lslcc	r3, r3, #4
 800b790:	3004      	addcc	r0, #4
 800b792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b796:	bf3c      	itt	cc
 800b798:	009b      	lslcc	r3, r3, #2
 800b79a:	3002      	addcc	r0, #2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	db05      	blt.n	800b7ac <__hi0bits+0x3c>
 800b7a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7a4:	f100 0001 	add.w	r0, r0, #1
 800b7a8:	bf08      	it	eq
 800b7aa:	2020      	moveq	r0, #32
 800b7ac:	4770      	bx	lr

0800b7ae <__lo0bits>:
 800b7ae:	6803      	ldr	r3, [r0, #0]
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	f013 0007 	ands.w	r0, r3, #7
 800b7b6:	d00b      	beq.n	800b7d0 <__lo0bits+0x22>
 800b7b8:	07d9      	lsls	r1, r3, #31
 800b7ba:	d421      	bmi.n	800b800 <__lo0bits+0x52>
 800b7bc:	0798      	lsls	r0, r3, #30
 800b7be:	bf49      	itett	mi
 800b7c0:	085b      	lsrmi	r3, r3, #1
 800b7c2:	089b      	lsrpl	r3, r3, #2
 800b7c4:	2001      	movmi	r0, #1
 800b7c6:	6013      	strmi	r3, [r2, #0]
 800b7c8:	bf5c      	itt	pl
 800b7ca:	2002      	movpl	r0, #2
 800b7cc:	6013      	strpl	r3, [r2, #0]
 800b7ce:	4770      	bx	lr
 800b7d0:	b299      	uxth	r1, r3
 800b7d2:	b909      	cbnz	r1, 800b7d8 <__lo0bits+0x2a>
 800b7d4:	2010      	movs	r0, #16
 800b7d6:	0c1b      	lsrs	r3, r3, #16
 800b7d8:	b2d9      	uxtb	r1, r3
 800b7da:	b909      	cbnz	r1, 800b7e0 <__lo0bits+0x32>
 800b7dc:	3008      	adds	r0, #8
 800b7de:	0a1b      	lsrs	r3, r3, #8
 800b7e0:	0719      	lsls	r1, r3, #28
 800b7e2:	bf04      	itt	eq
 800b7e4:	091b      	lsreq	r3, r3, #4
 800b7e6:	3004      	addeq	r0, #4
 800b7e8:	0799      	lsls	r1, r3, #30
 800b7ea:	bf04      	itt	eq
 800b7ec:	089b      	lsreq	r3, r3, #2
 800b7ee:	3002      	addeq	r0, #2
 800b7f0:	07d9      	lsls	r1, r3, #31
 800b7f2:	d403      	bmi.n	800b7fc <__lo0bits+0x4e>
 800b7f4:	085b      	lsrs	r3, r3, #1
 800b7f6:	f100 0001 	add.w	r0, r0, #1
 800b7fa:	d003      	beq.n	800b804 <__lo0bits+0x56>
 800b7fc:	6013      	str	r3, [r2, #0]
 800b7fe:	4770      	bx	lr
 800b800:	2000      	movs	r0, #0
 800b802:	4770      	bx	lr
 800b804:	2020      	movs	r0, #32
 800b806:	4770      	bx	lr

0800b808 <__i2b>:
 800b808:	b510      	push	{r4, lr}
 800b80a:	460c      	mov	r4, r1
 800b80c:	2101      	movs	r1, #1
 800b80e:	f7ff febd 	bl	800b58c <_Balloc>
 800b812:	4602      	mov	r2, r0
 800b814:	b928      	cbnz	r0, 800b822 <__i2b+0x1a>
 800b816:	f240 1145 	movw	r1, #325	@ 0x145
 800b81a:	4b04      	ldr	r3, [pc, #16]	@ (800b82c <__i2b+0x24>)
 800b81c:	4804      	ldr	r0, [pc, #16]	@ (800b830 <__i2b+0x28>)
 800b81e:	f001 fd51 	bl	800d2c4 <__assert_func>
 800b822:	2301      	movs	r3, #1
 800b824:	6144      	str	r4, [r0, #20]
 800b826:	6103      	str	r3, [r0, #16]
 800b828:	bd10      	pop	{r4, pc}
 800b82a:	bf00      	nop
 800b82c:	0800dee8 	.word	0x0800dee8
 800b830:	0800def9 	.word	0x0800def9

0800b834 <__multiply>:
 800b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b838:	4614      	mov	r4, r2
 800b83a:	690a      	ldr	r2, [r1, #16]
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	460f      	mov	r7, r1
 800b840:	429a      	cmp	r2, r3
 800b842:	bfa2      	ittt	ge
 800b844:	4623      	movge	r3, r4
 800b846:	460c      	movge	r4, r1
 800b848:	461f      	movge	r7, r3
 800b84a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b84e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	6861      	ldr	r1, [r4, #4]
 800b856:	eb0a 0609 	add.w	r6, sl, r9
 800b85a:	42b3      	cmp	r3, r6
 800b85c:	b085      	sub	sp, #20
 800b85e:	bfb8      	it	lt
 800b860:	3101      	addlt	r1, #1
 800b862:	f7ff fe93 	bl	800b58c <_Balloc>
 800b866:	b930      	cbnz	r0, 800b876 <__multiply+0x42>
 800b868:	4602      	mov	r2, r0
 800b86a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b86e:	4b43      	ldr	r3, [pc, #268]	@ (800b97c <__multiply+0x148>)
 800b870:	4843      	ldr	r0, [pc, #268]	@ (800b980 <__multiply+0x14c>)
 800b872:	f001 fd27 	bl	800d2c4 <__assert_func>
 800b876:	f100 0514 	add.w	r5, r0, #20
 800b87a:	462b      	mov	r3, r5
 800b87c:	2200      	movs	r2, #0
 800b87e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b882:	4543      	cmp	r3, r8
 800b884:	d321      	bcc.n	800b8ca <__multiply+0x96>
 800b886:	f107 0114 	add.w	r1, r7, #20
 800b88a:	f104 0214 	add.w	r2, r4, #20
 800b88e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b892:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b896:	9302      	str	r3, [sp, #8]
 800b898:	1b13      	subs	r3, r2, r4
 800b89a:	3b15      	subs	r3, #21
 800b89c:	f023 0303 	bic.w	r3, r3, #3
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	f104 0715 	add.w	r7, r4, #21
 800b8a6:	42ba      	cmp	r2, r7
 800b8a8:	bf38      	it	cc
 800b8aa:	2304      	movcc	r3, #4
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	9103      	str	r1, [sp, #12]
 800b8b2:	428b      	cmp	r3, r1
 800b8b4:	d80c      	bhi.n	800b8d0 <__multiply+0x9c>
 800b8b6:	2e00      	cmp	r6, #0
 800b8b8:	dd03      	ble.n	800b8c2 <__multiply+0x8e>
 800b8ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d05a      	beq.n	800b978 <__multiply+0x144>
 800b8c2:	6106      	str	r6, [r0, #16]
 800b8c4:	b005      	add	sp, #20
 800b8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ca:	f843 2b04 	str.w	r2, [r3], #4
 800b8ce:	e7d8      	b.n	800b882 <__multiply+0x4e>
 800b8d0:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8d4:	f1ba 0f00 	cmp.w	sl, #0
 800b8d8:	d023      	beq.n	800b922 <__multiply+0xee>
 800b8da:	46a9      	mov	r9, r5
 800b8dc:	f04f 0c00 	mov.w	ip, #0
 800b8e0:	f104 0e14 	add.w	lr, r4, #20
 800b8e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8e8:	f8d9 3000 	ldr.w	r3, [r9]
 800b8ec:	fa1f fb87 	uxth.w	fp, r7
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	fb0a 330b 	mla	r3, sl, fp, r3
 800b8f6:	4463      	add	r3, ip
 800b8f8:	f8d9 c000 	ldr.w	ip, [r9]
 800b8fc:	0c3f      	lsrs	r7, r7, #16
 800b8fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b902:	fb0a c707 	mla	r7, sl, r7, ip
 800b906:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b910:	4572      	cmp	r2, lr
 800b912:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b916:	f849 3b04 	str.w	r3, [r9], #4
 800b91a:	d8e3      	bhi.n	800b8e4 <__multiply+0xb0>
 800b91c:	9b01      	ldr	r3, [sp, #4]
 800b91e:	f845 c003 	str.w	ip, [r5, r3]
 800b922:	9b03      	ldr	r3, [sp, #12]
 800b924:	3104      	adds	r1, #4
 800b926:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	d021      	beq.n	800b974 <__multiply+0x140>
 800b930:	46ae      	mov	lr, r5
 800b932:	f04f 0a00 	mov.w	sl, #0
 800b936:	682b      	ldr	r3, [r5, #0]
 800b938:	f104 0c14 	add.w	ip, r4, #20
 800b93c:	f8bc b000 	ldrh.w	fp, [ip]
 800b940:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b944:	b29b      	uxth	r3, r3
 800b946:	fb09 770b 	mla	r7, r9, fp, r7
 800b94a:	4457      	add	r7, sl
 800b94c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b950:	f84e 3b04 	str.w	r3, [lr], #4
 800b954:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b95c:	f8be 3000 	ldrh.w	r3, [lr]
 800b960:	4562      	cmp	r2, ip
 800b962:	fb09 330a 	mla	r3, r9, sl, r3
 800b966:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b96a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b96e:	d8e5      	bhi.n	800b93c <__multiply+0x108>
 800b970:	9f01      	ldr	r7, [sp, #4]
 800b972:	51eb      	str	r3, [r5, r7]
 800b974:	3504      	adds	r5, #4
 800b976:	e79a      	b.n	800b8ae <__multiply+0x7a>
 800b978:	3e01      	subs	r6, #1
 800b97a:	e79c      	b.n	800b8b6 <__multiply+0x82>
 800b97c:	0800dee8 	.word	0x0800dee8
 800b980:	0800def9 	.word	0x0800def9

0800b984 <__pow5mult>:
 800b984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b988:	4615      	mov	r5, r2
 800b98a:	f012 0203 	ands.w	r2, r2, #3
 800b98e:	4607      	mov	r7, r0
 800b990:	460e      	mov	r6, r1
 800b992:	d007      	beq.n	800b9a4 <__pow5mult+0x20>
 800b994:	4c25      	ldr	r4, [pc, #148]	@ (800ba2c <__pow5mult+0xa8>)
 800b996:	3a01      	subs	r2, #1
 800b998:	2300      	movs	r3, #0
 800b99a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b99e:	f7ff fe57 	bl	800b650 <__multadd>
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	10ad      	asrs	r5, r5, #2
 800b9a6:	d03d      	beq.n	800ba24 <__pow5mult+0xa0>
 800b9a8:	69fc      	ldr	r4, [r7, #28]
 800b9aa:	b97c      	cbnz	r4, 800b9cc <__pow5mult+0x48>
 800b9ac:	2010      	movs	r0, #16
 800b9ae:	f7ff fd37 	bl	800b420 <malloc>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	61f8      	str	r0, [r7, #28]
 800b9b6:	b928      	cbnz	r0, 800b9c4 <__pow5mult+0x40>
 800b9b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9bc:	4b1c      	ldr	r3, [pc, #112]	@ (800ba30 <__pow5mult+0xac>)
 800b9be:	481d      	ldr	r0, [pc, #116]	@ (800ba34 <__pow5mult+0xb0>)
 800b9c0:	f001 fc80 	bl	800d2c4 <__assert_func>
 800b9c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9c8:	6004      	str	r4, [r0, #0]
 800b9ca:	60c4      	str	r4, [r0, #12]
 800b9cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9d4:	b94c      	cbnz	r4, 800b9ea <__pow5mult+0x66>
 800b9d6:	f240 2171 	movw	r1, #625	@ 0x271
 800b9da:	4638      	mov	r0, r7
 800b9dc:	f7ff ff14 	bl	800b808 <__i2b>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9e8:	6003      	str	r3, [r0, #0]
 800b9ea:	f04f 0900 	mov.w	r9, #0
 800b9ee:	07eb      	lsls	r3, r5, #31
 800b9f0:	d50a      	bpl.n	800ba08 <__pow5mult+0x84>
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4622      	mov	r2, r4
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	f7ff ff1c 	bl	800b834 <__multiply>
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4631      	mov	r1, r6
 800ba00:	4638      	mov	r0, r7
 800ba02:	f7ff fe03 	bl	800b60c <_Bfree>
 800ba06:	4646      	mov	r6, r8
 800ba08:	106d      	asrs	r5, r5, #1
 800ba0a:	d00b      	beq.n	800ba24 <__pow5mult+0xa0>
 800ba0c:	6820      	ldr	r0, [r4, #0]
 800ba0e:	b938      	cbnz	r0, 800ba20 <__pow5mult+0x9c>
 800ba10:	4622      	mov	r2, r4
 800ba12:	4621      	mov	r1, r4
 800ba14:	4638      	mov	r0, r7
 800ba16:	f7ff ff0d 	bl	800b834 <__multiply>
 800ba1a:	6020      	str	r0, [r4, #0]
 800ba1c:	f8c0 9000 	str.w	r9, [r0]
 800ba20:	4604      	mov	r4, r0
 800ba22:	e7e4      	b.n	800b9ee <__pow5mult+0x6a>
 800ba24:	4630      	mov	r0, r6
 800ba26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0800df54 	.word	0x0800df54
 800ba30:	0800de79 	.word	0x0800de79
 800ba34:	0800def9 	.word	0x0800def9

0800ba38 <__lshift>:
 800ba38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	4607      	mov	r7, r0
 800ba40:	4691      	mov	r9, r2
 800ba42:	6923      	ldr	r3, [r4, #16]
 800ba44:	6849      	ldr	r1, [r1, #4]
 800ba46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba4a:	68a3      	ldr	r3, [r4, #8]
 800ba4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba50:	f108 0601 	add.w	r6, r8, #1
 800ba54:	42b3      	cmp	r3, r6
 800ba56:	db0b      	blt.n	800ba70 <__lshift+0x38>
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7ff fd97 	bl	800b58c <_Balloc>
 800ba5e:	4605      	mov	r5, r0
 800ba60:	b948      	cbnz	r0, 800ba76 <__lshift+0x3e>
 800ba62:	4602      	mov	r2, r0
 800ba64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba68:	4b27      	ldr	r3, [pc, #156]	@ (800bb08 <__lshift+0xd0>)
 800ba6a:	4828      	ldr	r0, [pc, #160]	@ (800bb0c <__lshift+0xd4>)
 800ba6c:	f001 fc2a 	bl	800d2c4 <__assert_func>
 800ba70:	3101      	adds	r1, #1
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	e7ee      	b.n	800ba54 <__lshift+0x1c>
 800ba76:	2300      	movs	r3, #0
 800ba78:	f100 0114 	add.w	r1, r0, #20
 800ba7c:	f100 0210 	add.w	r2, r0, #16
 800ba80:	4618      	mov	r0, r3
 800ba82:	4553      	cmp	r3, sl
 800ba84:	db33      	blt.n	800baee <__lshift+0xb6>
 800ba86:	6920      	ldr	r0, [r4, #16]
 800ba88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba8c:	f104 0314 	add.w	r3, r4, #20
 800ba90:	f019 091f 	ands.w	r9, r9, #31
 800ba94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba9c:	d02b      	beq.n	800baf6 <__lshift+0xbe>
 800ba9e:	468a      	mov	sl, r1
 800baa0:	2200      	movs	r2, #0
 800baa2:	f1c9 0e20 	rsb	lr, r9, #32
 800baa6:	6818      	ldr	r0, [r3, #0]
 800baa8:	fa00 f009 	lsl.w	r0, r0, r9
 800baac:	4310      	orrs	r0, r2
 800baae:	f84a 0b04 	str.w	r0, [sl], #4
 800bab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab6:	459c      	cmp	ip, r3
 800bab8:	fa22 f20e 	lsr.w	r2, r2, lr
 800babc:	d8f3      	bhi.n	800baa6 <__lshift+0x6e>
 800babe:	ebac 0304 	sub.w	r3, ip, r4
 800bac2:	3b15      	subs	r3, #21
 800bac4:	f023 0303 	bic.w	r3, r3, #3
 800bac8:	3304      	adds	r3, #4
 800baca:	f104 0015 	add.w	r0, r4, #21
 800bace:	4584      	cmp	ip, r0
 800bad0:	bf38      	it	cc
 800bad2:	2304      	movcc	r3, #4
 800bad4:	50ca      	str	r2, [r1, r3]
 800bad6:	b10a      	cbz	r2, 800badc <__lshift+0xa4>
 800bad8:	f108 0602 	add.w	r6, r8, #2
 800badc:	3e01      	subs	r6, #1
 800bade:	4638      	mov	r0, r7
 800bae0:	4621      	mov	r1, r4
 800bae2:	612e      	str	r6, [r5, #16]
 800bae4:	f7ff fd92 	bl	800b60c <_Bfree>
 800bae8:	4628      	mov	r0, r5
 800baea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baee:	f842 0f04 	str.w	r0, [r2, #4]!
 800baf2:	3301      	adds	r3, #1
 800baf4:	e7c5      	b.n	800ba82 <__lshift+0x4a>
 800baf6:	3904      	subs	r1, #4
 800baf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafc:	459c      	cmp	ip, r3
 800bafe:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb02:	d8f9      	bhi.n	800baf8 <__lshift+0xc0>
 800bb04:	e7ea      	b.n	800badc <__lshift+0xa4>
 800bb06:	bf00      	nop
 800bb08:	0800dee8 	.word	0x0800dee8
 800bb0c:	0800def9 	.word	0x0800def9

0800bb10 <__mcmp>:
 800bb10:	4603      	mov	r3, r0
 800bb12:	690a      	ldr	r2, [r1, #16]
 800bb14:	6900      	ldr	r0, [r0, #16]
 800bb16:	b530      	push	{r4, r5, lr}
 800bb18:	1a80      	subs	r0, r0, r2
 800bb1a:	d10e      	bne.n	800bb3a <__mcmp+0x2a>
 800bb1c:	3314      	adds	r3, #20
 800bb1e:	3114      	adds	r1, #20
 800bb20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb30:	4295      	cmp	r5, r2
 800bb32:	d003      	beq.n	800bb3c <__mcmp+0x2c>
 800bb34:	d205      	bcs.n	800bb42 <__mcmp+0x32>
 800bb36:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3a:	bd30      	pop	{r4, r5, pc}
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	d3f3      	bcc.n	800bb28 <__mcmp+0x18>
 800bb40:	e7fb      	b.n	800bb3a <__mcmp+0x2a>
 800bb42:	2001      	movs	r0, #1
 800bb44:	e7f9      	b.n	800bb3a <__mcmp+0x2a>
	...

0800bb48 <__mdiff>:
 800bb48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	4689      	mov	r9, r1
 800bb4e:	4606      	mov	r6, r0
 800bb50:	4611      	mov	r1, r2
 800bb52:	4648      	mov	r0, r9
 800bb54:	4614      	mov	r4, r2
 800bb56:	f7ff ffdb 	bl	800bb10 <__mcmp>
 800bb5a:	1e05      	subs	r5, r0, #0
 800bb5c:	d112      	bne.n	800bb84 <__mdiff+0x3c>
 800bb5e:	4629      	mov	r1, r5
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7ff fd13 	bl	800b58c <_Balloc>
 800bb66:	4602      	mov	r2, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__mdiff+0x2e>
 800bb6a:	f240 2137 	movw	r1, #567	@ 0x237
 800bb6e:	4b3e      	ldr	r3, [pc, #248]	@ (800bc68 <__mdiff+0x120>)
 800bb70:	483e      	ldr	r0, [pc, #248]	@ (800bc6c <__mdiff+0x124>)
 800bb72:	f001 fba7 	bl	800d2c4 <__assert_func>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	b003      	add	sp, #12
 800bb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb84:	bfbc      	itt	lt
 800bb86:	464b      	movlt	r3, r9
 800bb88:	46a1      	movlt	r9, r4
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb90:	bfba      	itte	lt
 800bb92:	461c      	movlt	r4, r3
 800bb94:	2501      	movlt	r5, #1
 800bb96:	2500      	movge	r5, #0
 800bb98:	f7ff fcf8 	bl	800b58c <_Balloc>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	b918      	cbnz	r0, 800bba8 <__mdiff+0x60>
 800bba0:	f240 2145 	movw	r1, #581	@ 0x245
 800bba4:	4b30      	ldr	r3, [pc, #192]	@ (800bc68 <__mdiff+0x120>)
 800bba6:	e7e3      	b.n	800bb70 <__mdiff+0x28>
 800bba8:	f100 0b14 	add.w	fp, r0, #20
 800bbac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbb0:	f109 0310 	add.w	r3, r9, #16
 800bbb4:	60c5      	str	r5, [r0, #12]
 800bbb6:	f04f 0c00 	mov.w	ip, #0
 800bbba:	f109 0514 	add.w	r5, r9, #20
 800bbbe:	46d9      	mov	r9, fp
 800bbc0:	6926      	ldr	r6, [r4, #16]
 800bbc2:	f104 0e14 	add.w	lr, r4, #20
 800bbc6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bbca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bbce:	9301      	str	r3, [sp, #4]
 800bbd0:	9b01      	ldr	r3, [sp, #4]
 800bbd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bbd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bbda:	b281      	uxth	r1, r0
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	fa1f f38a 	uxth.w	r3, sl
 800bbe2:	1a5b      	subs	r3, r3, r1
 800bbe4:	0c00      	lsrs	r0, r0, #16
 800bbe6:	4463      	add	r3, ip
 800bbe8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bbf6:	4576      	cmp	r6, lr
 800bbf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbfc:	f849 3b04 	str.w	r3, [r9], #4
 800bc00:	d8e6      	bhi.n	800bbd0 <__mdiff+0x88>
 800bc02:	1b33      	subs	r3, r6, r4
 800bc04:	3b15      	subs	r3, #21
 800bc06:	f023 0303 	bic.w	r3, r3, #3
 800bc0a:	3415      	adds	r4, #21
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	42a6      	cmp	r6, r4
 800bc10:	bf38      	it	cc
 800bc12:	2304      	movcc	r3, #4
 800bc14:	441d      	add	r5, r3
 800bc16:	445b      	add	r3, fp
 800bc18:	461e      	mov	r6, r3
 800bc1a:	462c      	mov	r4, r5
 800bc1c:	4544      	cmp	r4, r8
 800bc1e:	d30e      	bcc.n	800bc3e <__mdiff+0xf6>
 800bc20:	f108 0103 	add.w	r1, r8, #3
 800bc24:	1b49      	subs	r1, r1, r5
 800bc26:	f021 0103 	bic.w	r1, r1, #3
 800bc2a:	3d03      	subs	r5, #3
 800bc2c:	45a8      	cmp	r8, r5
 800bc2e:	bf38      	it	cc
 800bc30:	2100      	movcc	r1, #0
 800bc32:	440b      	add	r3, r1
 800bc34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc38:	b199      	cbz	r1, 800bc62 <__mdiff+0x11a>
 800bc3a:	6117      	str	r7, [r2, #16]
 800bc3c:	e79e      	b.n	800bb7c <__mdiff+0x34>
 800bc3e:	46e6      	mov	lr, ip
 800bc40:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc44:	fa1f fc81 	uxth.w	ip, r1
 800bc48:	44f4      	add	ip, lr
 800bc4a:	0c08      	lsrs	r0, r1, #16
 800bc4c:	4471      	add	r1, lr
 800bc4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc52:	b289      	uxth	r1, r1
 800bc54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc5c:	f846 1b04 	str.w	r1, [r6], #4
 800bc60:	e7dc      	b.n	800bc1c <__mdiff+0xd4>
 800bc62:	3f01      	subs	r7, #1
 800bc64:	e7e6      	b.n	800bc34 <__mdiff+0xec>
 800bc66:	bf00      	nop
 800bc68:	0800dee8 	.word	0x0800dee8
 800bc6c:	0800def9 	.word	0x0800def9

0800bc70 <__ulp>:
 800bc70:	4b0e      	ldr	r3, [pc, #56]	@ (800bcac <__ulp+0x3c>)
 800bc72:	400b      	ands	r3, r1
 800bc74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dc08      	bgt.n	800bc8e <__ulp+0x1e>
 800bc7c:	425b      	negs	r3, r3
 800bc7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bc82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc86:	da04      	bge.n	800bc92 <__ulp+0x22>
 800bc88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bc8c:	4113      	asrs	r3, r2
 800bc8e:	2200      	movs	r2, #0
 800bc90:	e008      	b.n	800bca4 <__ulp+0x34>
 800bc92:	f1a2 0314 	sub.w	r3, r2, #20
 800bc96:	2b1e      	cmp	r3, #30
 800bc98:	bfd6      	itet	le
 800bc9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bc9e:	2201      	movgt	r2, #1
 800bca0:	40da      	lsrle	r2, r3
 800bca2:	2300      	movs	r3, #0
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	7ff00000 	.word	0x7ff00000

0800bcb0 <__b2d>:
 800bcb0:	6902      	ldr	r2, [r0, #16]
 800bcb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb4:	f100 0614 	add.w	r6, r0, #20
 800bcb8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bcbc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bcc0:	4f1e      	ldr	r7, [pc, #120]	@ (800bd3c <__b2d+0x8c>)
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f7ff fd54 	bl	800b770 <__hi0bits>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f1c0 0020 	rsb	r0, r0, #32
 800bcce:	2b0a      	cmp	r3, #10
 800bcd0:	f1a2 0504 	sub.w	r5, r2, #4
 800bcd4:	6008      	str	r0, [r1, #0]
 800bcd6:	dc12      	bgt.n	800bcfe <__b2d+0x4e>
 800bcd8:	42ae      	cmp	r6, r5
 800bcda:	bf2c      	ite	cs
 800bcdc:	2200      	movcs	r2, #0
 800bcde:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bce2:	f1c3 0c0b 	rsb	ip, r3, #11
 800bce6:	3315      	adds	r3, #21
 800bce8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800bcec:	fa04 f303 	lsl.w	r3, r4, r3
 800bcf0:	fa22 f20c 	lsr.w	r2, r2, ip
 800bcf4:	ea4e 0107 	orr.w	r1, lr, r7
 800bcf8:	431a      	orrs	r2, r3
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcfe:	42ae      	cmp	r6, r5
 800bd00:	bf36      	itet	cc
 800bd02:	f1a2 0508 	subcc.w	r5, r2, #8
 800bd06:	2200      	movcs	r2, #0
 800bd08:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bd0c:	3b0b      	subs	r3, #11
 800bd0e:	d012      	beq.n	800bd36 <__b2d+0x86>
 800bd10:	f1c3 0720 	rsb	r7, r3, #32
 800bd14:	fa22 f107 	lsr.w	r1, r2, r7
 800bd18:	409c      	lsls	r4, r3
 800bd1a:	430c      	orrs	r4, r1
 800bd1c:	42b5      	cmp	r5, r6
 800bd1e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800bd22:	bf94      	ite	ls
 800bd24:	2400      	movls	r4, #0
 800bd26:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800bd2a:	409a      	lsls	r2, r3
 800bd2c:	40fc      	lsrs	r4, r7
 800bd2e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bd32:	4322      	orrs	r2, r4
 800bd34:	e7e1      	b.n	800bcfa <__b2d+0x4a>
 800bd36:	ea44 0107 	orr.w	r1, r4, r7
 800bd3a:	e7de      	b.n	800bcfa <__b2d+0x4a>
 800bd3c:	3ff00000 	.word	0x3ff00000

0800bd40 <__d2b>:
 800bd40:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bd44:	2101      	movs	r1, #1
 800bd46:	4690      	mov	r8, r2
 800bd48:	4699      	mov	r9, r3
 800bd4a:	9e08      	ldr	r6, [sp, #32]
 800bd4c:	f7ff fc1e 	bl	800b58c <_Balloc>
 800bd50:	4604      	mov	r4, r0
 800bd52:	b930      	cbnz	r0, 800bd62 <__d2b+0x22>
 800bd54:	4602      	mov	r2, r0
 800bd56:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd5a:	4b23      	ldr	r3, [pc, #140]	@ (800bde8 <__d2b+0xa8>)
 800bd5c:	4823      	ldr	r0, [pc, #140]	@ (800bdec <__d2b+0xac>)
 800bd5e:	f001 fab1 	bl	800d2c4 <__assert_func>
 800bd62:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd6a:	b10d      	cbz	r5, 800bd70 <__d2b+0x30>
 800bd6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd70:	9301      	str	r3, [sp, #4]
 800bd72:	f1b8 0300 	subs.w	r3, r8, #0
 800bd76:	d024      	beq.n	800bdc2 <__d2b+0x82>
 800bd78:	4668      	mov	r0, sp
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	f7ff fd17 	bl	800b7ae <__lo0bits>
 800bd80:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd84:	b1d8      	cbz	r0, 800bdbe <__d2b+0x7e>
 800bd86:	f1c0 0320 	rsb	r3, r0, #32
 800bd8a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd8e:	430b      	orrs	r3, r1
 800bd90:	40c2      	lsrs	r2, r0
 800bd92:	6163      	str	r3, [r4, #20]
 800bd94:	9201      	str	r2, [sp, #4]
 800bd96:	9b01      	ldr	r3, [sp, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	bf0c      	ite	eq
 800bd9c:	2201      	moveq	r2, #1
 800bd9e:	2202      	movne	r2, #2
 800bda0:	61a3      	str	r3, [r4, #24]
 800bda2:	6122      	str	r2, [r4, #16]
 800bda4:	b1ad      	cbz	r5, 800bdd2 <__d2b+0x92>
 800bda6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bdaa:	4405      	add	r5, r0
 800bdac:	6035      	str	r5, [r6, #0]
 800bdae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bdb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb4:	6018      	str	r0, [r3, #0]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	b002      	add	sp, #8
 800bdba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bdbe:	6161      	str	r1, [r4, #20]
 800bdc0:	e7e9      	b.n	800bd96 <__d2b+0x56>
 800bdc2:	a801      	add	r0, sp, #4
 800bdc4:	f7ff fcf3 	bl	800b7ae <__lo0bits>
 800bdc8:	9b01      	ldr	r3, [sp, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	6163      	str	r3, [r4, #20]
 800bdce:	3020      	adds	r0, #32
 800bdd0:	e7e7      	b.n	800bda2 <__d2b+0x62>
 800bdd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bdd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdda:	6030      	str	r0, [r6, #0]
 800bddc:	6918      	ldr	r0, [r3, #16]
 800bdde:	f7ff fcc7 	bl	800b770 <__hi0bits>
 800bde2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bde6:	e7e4      	b.n	800bdb2 <__d2b+0x72>
 800bde8:	0800dee8 	.word	0x0800dee8
 800bdec:	0800def9 	.word	0x0800def9

0800bdf0 <__ratio>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	e9cd 1000 	strd	r1, r0, [sp]
 800bdfa:	a902      	add	r1, sp, #8
 800bdfc:	f7ff ff58 	bl	800bcb0 <__b2d>
 800be00:	468b      	mov	fp, r1
 800be02:	4606      	mov	r6, r0
 800be04:	460f      	mov	r7, r1
 800be06:	9800      	ldr	r0, [sp, #0]
 800be08:	a903      	add	r1, sp, #12
 800be0a:	f7ff ff51 	bl	800bcb0 <__b2d>
 800be0e:	460d      	mov	r5, r1
 800be10:	9b01      	ldr	r3, [sp, #4]
 800be12:	4689      	mov	r9, r1
 800be14:	6919      	ldr	r1, [r3, #16]
 800be16:	9b00      	ldr	r3, [sp, #0]
 800be18:	4604      	mov	r4, r0
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	4630      	mov	r0, r6
 800be1e:	1ac9      	subs	r1, r1, r3
 800be20:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800be24:	1a9b      	subs	r3, r3, r2
 800be26:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	bfcd      	iteet	gt
 800be2e:	463a      	movgt	r2, r7
 800be30:	462a      	movle	r2, r5
 800be32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be36:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800be3a:	bfd8      	it	le
 800be3c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800be40:	464b      	mov	r3, r9
 800be42:	4622      	mov	r2, r4
 800be44:	4659      	mov	r1, fp
 800be46:	f7f4 fc71 	bl	800072c <__aeabi_ddiv>
 800be4a:	b005      	add	sp, #20
 800be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be50 <__copybits>:
 800be50:	3901      	subs	r1, #1
 800be52:	b570      	push	{r4, r5, r6, lr}
 800be54:	1149      	asrs	r1, r1, #5
 800be56:	6914      	ldr	r4, [r2, #16]
 800be58:	3101      	adds	r1, #1
 800be5a:	f102 0314 	add.w	r3, r2, #20
 800be5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be66:	1f05      	subs	r5, r0, #4
 800be68:	42a3      	cmp	r3, r4
 800be6a:	d30c      	bcc.n	800be86 <__copybits+0x36>
 800be6c:	1aa3      	subs	r3, r4, r2
 800be6e:	3b11      	subs	r3, #17
 800be70:	f023 0303 	bic.w	r3, r3, #3
 800be74:	3211      	adds	r2, #17
 800be76:	42a2      	cmp	r2, r4
 800be78:	bf88      	it	hi
 800be7a:	2300      	movhi	r3, #0
 800be7c:	4418      	add	r0, r3
 800be7e:	2300      	movs	r3, #0
 800be80:	4288      	cmp	r0, r1
 800be82:	d305      	bcc.n	800be90 <__copybits+0x40>
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	f853 6b04 	ldr.w	r6, [r3], #4
 800be8a:	f845 6f04 	str.w	r6, [r5, #4]!
 800be8e:	e7eb      	b.n	800be68 <__copybits+0x18>
 800be90:	f840 3b04 	str.w	r3, [r0], #4
 800be94:	e7f4      	b.n	800be80 <__copybits+0x30>

0800be96 <__any_on>:
 800be96:	f100 0214 	add.w	r2, r0, #20
 800be9a:	6900      	ldr	r0, [r0, #16]
 800be9c:	114b      	asrs	r3, r1, #5
 800be9e:	4298      	cmp	r0, r3
 800bea0:	b510      	push	{r4, lr}
 800bea2:	db11      	blt.n	800bec8 <__any_on+0x32>
 800bea4:	dd0a      	ble.n	800bebc <__any_on+0x26>
 800bea6:	f011 011f 	ands.w	r1, r1, #31
 800beaa:	d007      	beq.n	800bebc <__any_on+0x26>
 800beac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beb0:	fa24 f001 	lsr.w	r0, r4, r1
 800beb4:	fa00 f101 	lsl.w	r1, r0, r1
 800beb8:	428c      	cmp	r4, r1
 800beba:	d10b      	bne.n	800bed4 <__any_on+0x3e>
 800bebc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d803      	bhi.n	800becc <__any_on+0x36>
 800bec4:	2000      	movs	r0, #0
 800bec6:	bd10      	pop	{r4, pc}
 800bec8:	4603      	mov	r3, r0
 800beca:	e7f7      	b.n	800bebc <__any_on+0x26>
 800becc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bed0:	2900      	cmp	r1, #0
 800bed2:	d0f5      	beq.n	800bec0 <__any_on+0x2a>
 800bed4:	2001      	movs	r0, #1
 800bed6:	e7f6      	b.n	800bec6 <__any_on+0x30>

0800bed8 <sulp>:
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	460f      	mov	r7, r1
 800bede:	4690      	mov	r8, r2
 800bee0:	f7ff fec6 	bl	800bc70 <__ulp>
 800bee4:	4604      	mov	r4, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	f1b8 0f00 	cmp.w	r8, #0
 800beec:	d011      	beq.n	800bf12 <sulp+0x3a>
 800beee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bef2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	dd0b      	ble.n	800bf12 <sulp+0x3a>
 800befa:	2400      	movs	r4, #0
 800befc:	051b      	lsls	r3, r3, #20
 800befe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bf06:	4622      	mov	r2, r4
 800bf08:	462b      	mov	r3, r5
 800bf0a:	f7f4 fae5 	bl	80004d8 <__aeabi_dmul>
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	4620      	mov	r0, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf1a:	0000      	movs	r0, r0
 800bf1c:	0000      	movs	r0, r0
	...

0800bf20 <_strtod_l>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	b09f      	sub	sp, #124	@ 0x7c
 800bf26:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bf28:	2200      	movs	r2, #0
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	921a      	str	r2, [sp, #104]	@ 0x68
 800bf2e:	f04f 0a00 	mov.w	sl, #0
 800bf32:	f04f 0b00 	mov.w	fp, #0
 800bf36:	460a      	mov	r2, r1
 800bf38:	9005      	str	r0, [sp, #20]
 800bf3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf3c:	7811      	ldrb	r1, [r2, #0]
 800bf3e:	292b      	cmp	r1, #43	@ 0x2b
 800bf40:	d048      	beq.n	800bfd4 <_strtod_l+0xb4>
 800bf42:	d836      	bhi.n	800bfb2 <_strtod_l+0x92>
 800bf44:	290d      	cmp	r1, #13
 800bf46:	d830      	bhi.n	800bfaa <_strtod_l+0x8a>
 800bf48:	2908      	cmp	r1, #8
 800bf4a:	d830      	bhi.n	800bfae <_strtod_l+0x8e>
 800bf4c:	2900      	cmp	r1, #0
 800bf4e:	d039      	beq.n	800bfc4 <_strtod_l+0xa4>
 800bf50:	2200      	movs	r2, #0
 800bf52:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bf54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bf56:	782a      	ldrb	r2, [r5, #0]
 800bf58:	2a30      	cmp	r2, #48	@ 0x30
 800bf5a:	f040 80b1 	bne.w	800c0c0 <_strtod_l+0x1a0>
 800bf5e:	786a      	ldrb	r2, [r5, #1]
 800bf60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf64:	2a58      	cmp	r2, #88	@ 0x58
 800bf66:	d16c      	bne.n	800c042 <_strtod_l+0x122>
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf6c:	4a8e      	ldr	r2, [pc, #568]	@ (800c1a8 <_strtod_l+0x288>)
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	ab1a      	add	r3, sp, #104	@ 0x68
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	9805      	ldr	r0, [sp, #20]
 800bf76:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bf78:	a919      	add	r1, sp, #100	@ 0x64
 800bf7a:	f001 fa3d 	bl	800d3f8 <__gethex>
 800bf7e:	f010 060f 	ands.w	r6, r0, #15
 800bf82:	4604      	mov	r4, r0
 800bf84:	d005      	beq.n	800bf92 <_strtod_l+0x72>
 800bf86:	2e06      	cmp	r6, #6
 800bf88:	d126      	bne.n	800bfd8 <_strtod_l+0xb8>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	3501      	adds	r5, #1
 800bf8e:	9519      	str	r5, [sp, #100]	@ 0x64
 800bf90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f040 8584 	bne.w	800caa2 <_strtod_l+0xb82>
 800bf9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf9c:	b1bb      	cbz	r3, 800bfce <_strtod_l+0xae>
 800bf9e:	4650      	mov	r0, sl
 800bfa0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800bfa4:	b01f      	add	sp, #124	@ 0x7c
 800bfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfaa:	2920      	cmp	r1, #32
 800bfac:	d1d0      	bne.n	800bf50 <_strtod_l+0x30>
 800bfae:	3201      	adds	r2, #1
 800bfb0:	e7c3      	b.n	800bf3a <_strtod_l+0x1a>
 800bfb2:	292d      	cmp	r1, #45	@ 0x2d
 800bfb4:	d1cc      	bne.n	800bf50 <_strtod_l+0x30>
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bfba:	1c51      	adds	r1, r2, #1
 800bfbc:	9119      	str	r1, [sp, #100]	@ 0x64
 800bfbe:	7852      	ldrb	r2, [r2, #1]
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	d1c7      	bne.n	800bf54 <_strtod_l+0x34>
 800bfc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfc6:	9419      	str	r4, [sp, #100]	@ 0x64
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 8568 	bne.w	800ca9e <_strtod_l+0xb7e>
 800bfce:	4650      	mov	r0, sl
 800bfd0:	4659      	mov	r1, fp
 800bfd2:	e7e7      	b.n	800bfa4 <_strtod_l+0x84>
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	e7ef      	b.n	800bfb8 <_strtod_l+0x98>
 800bfd8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bfda:	b13a      	cbz	r2, 800bfec <_strtod_l+0xcc>
 800bfdc:	2135      	movs	r1, #53	@ 0x35
 800bfde:	a81c      	add	r0, sp, #112	@ 0x70
 800bfe0:	f7ff ff36 	bl	800be50 <__copybits>
 800bfe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfe6:	9805      	ldr	r0, [sp, #20]
 800bfe8:	f7ff fb10 	bl	800b60c <_Bfree>
 800bfec:	3e01      	subs	r6, #1
 800bfee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bff0:	2e04      	cmp	r6, #4
 800bff2:	d806      	bhi.n	800c002 <_strtod_l+0xe2>
 800bff4:	e8df f006 	tbb	[pc, r6]
 800bff8:	201d0314 	.word	0x201d0314
 800bffc:	14          	.byte	0x14
 800bffd:	00          	.byte	0x00
 800bffe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c002:	05e1      	lsls	r1, r4, #23
 800c004:	bf48      	it	mi
 800c006:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c00a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c00e:	0d1b      	lsrs	r3, r3, #20
 800c010:	051b      	lsls	r3, r3, #20
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1bd      	bne.n	800bf92 <_strtod_l+0x72>
 800c016:	f7fe fb1b 	bl	800a650 <__errno>
 800c01a:	2322      	movs	r3, #34	@ 0x22
 800c01c:	6003      	str	r3, [r0, #0]
 800c01e:	e7b8      	b.n	800bf92 <_strtod_l+0x72>
 800c020:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c024:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c028:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c02c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c030:	e7e7      	b.n	800c002 <_strtod_l+0xe2>
 800c032:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800c1ac <_strtod_l+0x28c>
 800c036:	e7e4      	b.n	800c002 <_strtod_l+0xe2>
 800c038:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c03c:	f04f 3aff 	mov.w	sl, #4294967295
 800c040:	e7df      	b.n	800c002 <_strtod_l+0xe2>
 800c042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	9219      	str	r2, [sp, #100]	@ 0x64
 800c048:	785b      	ldrb	r3, [r3, #1]
 800c04a:	2b30      	cmp	r3, #48	@ 0x30
 800c04c:	d0f9      	beq.n	800c042 <_strtod_l+0x122>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d09f      	beq.n	800bf92 <_strtod_l+0x72>
 800c052:	2301      	movs	r3, #1
 800c054:	9309      	str	r3, [sp, #36]	@ 0x24
 800c056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c058:	220a      	movs	r2, #10
 800c05a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c05c:	2300      	movs	r3, #0
 800c05e:	461f      	mov	r7, r3
 800c060:	9308      	str	r3, [sp, #32]
 800c062:	930a      	str	r3, [sp, #40]	@ 0x28
 800c064:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c066:	7805      	ldrb	r5, [r0, #0]
 800c068:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c06c:	b2d9      	uxtb	r1, r3
 800c06e:	2909      	cmp	r1, #9
 800c070:	d928      	bls.n	800c0c4 <_strtod_l+0x1a4>
 800c072:	2201      	movs	r2, #1
 800c074:	494e      	ldr	r1, [pc, #312]	@ (800c1b0 <_strtod_l+0x290>)
 800c076:	f7fe fa39 	bl	800a4ec <strncmp>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d032      	beq.n	800c0e4 <_strtod_l+0x1c4>
 800c07e:	2000      	movs	r0, #0
 800c080:	462a      	mov	r2, r5
 800c082:	4681      	mov	r9, r0
 800c084:	463d      	mov	r5, r7
 800c086:	4603      	mov	r3, r0
 800c088:	2a65      	cmp	r2, #101	@ 0x65
 800c08a:	d001      	beq.n	800c090 <_strtod_l+0x170>
 800c08c:	2a45      	cmp	r2, #69	@ 0x45
 800c08e:	d114      	bne.n	800c0ba <_strtod_l+0x19a>
 800c090:	b91d      	cbnz	r5, 800c09a <_strtod_l+0x17a>
 800c092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c094:	4302      	orrs	r2, r0
 800c096:	d095      	beq.n	800bfc4 <_strtod_l+0xa4>
 800c098:	2500      	movs	r5, #0
 800c09a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c09c:	1c62      	adds	r2, r4, #1
 800c09e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0a0:	7862      	ldrb	r2, [r4, #1]
 800c0a2:	2a2b      	cmp	r2, #43	@ 0x2b
 800c0a4:	d077      	beq.n	800c196 <_strtod_l+0x276>
 800c0a6:	2a2d      	cmp	r2, #45	@ 0x2d
 800c0a8:	d07b      	beq.n	800c1a2 <_strtod_l+0x282>
 800c0aa:	f04f 0c00 	mov.w	ip, #0
 800c0ae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c0b2:	2909      	cmp	r1, #9
 800c0b4:	f240 8082 	bls.w	800c1bc <_strtod_l+0x29c>
 800c0b8:	9419      	str	r4, [sp, #100]	@ 0x64
 800c0ba:	f04f 0800 	mov.w	r8, #0
 800c0be:	e0a2      	b.n	800c206 <_strtod_l+0x2e6>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	e7c7      	b.n	800c054 <_strtod_l+0x134>
 800c0c4:	2f08      	cmp	r7, #8
 800c0c6:	bfd5      	itete	le
 800c0c8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c0ca:	9908      	ldrgt	r1, [sp, #32]
 800c0cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0d0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c0d4:	f100 0001 	add.w	r0, r0, #1
 800c0d8:	bfd4      	ite	le
 800c0da:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c0dc:	9308      	strgt	r3, [sp, #32]
 800c0de:	3701      	adds	r7, #1
 800c0e0:	9019      	str	r0, [sp, #100]	@ 0x64
 800c0e2:	e7bf      	b.n	800c064 <_strtod_l+0x144>
 800c0e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0ea:	785a      	ldrb	r2, [r3, #1]
 800c0ec:	b37f      	cbz	r7, 800c14e <_strtod_l+0x22e>
 800c0ee:	4681      	mov	r9, r0
 800c0f0:	463d      	mov	r5, r7
 800c0f2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c0f6:	2b09      	cmp	r3, #9
 800c0f8:	d912      	bls.n	800c120 <_strtod_l+0x200>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e7c4      	b.n	800c088 <_strtod_l+0x168>
 800c0fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c100:	3001      	adds	r0, #1
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	9219      	str	r2, [sp, #100]	@ 0x64
 800c106:	785a      	ldrb	r2, [r3, #1]
 800c108:	2a30      	cmp	r2, #48	@ 0x30
 800c10a:	d0f8      	beq.n	800c0fe <_strtod_l+0x1de>
 800c10c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c110:	2b08      	cmp	r3, #8
 800c112:	f200 84cb 	bhi.w	800caac <_strtod_l+0xb8c>
 800c116:	4681      	mov	r9, r0
 800c118:	2000      	movs	r0, #0
 800c11a:	4605      	mov	r5, r0
 800c11c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c11e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c120:	3a30      	subs	r2, #48	@ 0x30
 800c122:	f100 0301 	add.w	r3, r0, #1
 800c126:	d02a      	beq.n	800c17e <_strtod_l+0x25e>
 800c128:	4499      	add	r9, r3
 800c12a:	210a      	movs	r1, #10
 800c12c:	462b      	mov	r3, r5
 800c12e:	eb00 0c05 	add.w	ip, r0, r5
 800c132:	4563      	cmp	r3, ip
 800c134:	d10d      	bne.n	800c152 <_strtod_l+0x232>
 800c136:	1c69      	adds	r1, r5, #1
 800c138:	4401      	add	r1, r0
 800c13a:	4428      	add	r0, r5
 800c13c:	2808      	cmp	r0, #8
 800c13e:	dc16      	bgt.n	800c16e <_strtod_l+0x24e>
 800c140:	230a      	movs	r3, #10
 800c142:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c144:	fb03 2300 	mla	r3, r3, r0, r2
 800c148:	930a      	str	r3, [sp, #40]	@ 0x28
 800c14a:	2300      	movs	r3, #0
 800c14c:	e018      	b.n	800c180 <_strtod_l+0x260>
 800c14e:	4638      	mov	r0, r7
 800c150:	e7da      	b.n	800c108 <_strtod_l+0x1e8>
 800c152:	2b08      	cmp	r3, #8
 800c154:	f103 0301 	add.w	r3, r3, #1
 800c158:	dc03      	bgt.n	800c162 <_strtod_l+0x242>
 800c15a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c15c:	434e      	muls	r6, r1
 800c15e:	960a      	str	r6, [sp, #40]	@ 0x28
 800c160:	e7e7      	b.n	800c132 <_strtod_l+0x212>
 800c162:	2b10      	cmp	r3, #16
 800c164:	bfde      	ittt	le
 800c166:	9e08      	ldrle	r6, [sp, #32]
 800c168:	434e      	mulle	r6, r1
 800c16a:	9608      	strle	r6, [sp, #32]
 800c16c:	e7e1      	b.n	800c132 <_strtod_l+0x212>
 800c16e:	280f      	cmp	r0, #15
 800c170:	dceb      	bgt.n	800c14a <_strtod_l+0x22a>
 800c172:	230a      	movs	r3, #10
 800c174:	9808      	ldr	r0, [sp, #32]
 800c176:	fb03 2300 	mla	r3, r3, r0, r2
 800c17a:	9308      	str	r3, [sp, #32]
 800c17c:	e7e5      	b.n	800c14a <_strtod_l+0x22a>
 800c17e:	4629      	mov	r1, r5
 800c180:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c182:	460d      	mov	r5, r1
 800c184:	1c50      	adds	r0, r2, #1
 800c186:	9019      	str	r0, [sp, #100]	@ 0x64
 800c188:	7852      	ldrb	r2, [r2, #1]
 800c18a:	4618      	mov	r0, r3
 800c18c:	e7b1      	b.n	800c0f2 <_strtod_l+0x1d2>
 800c18e:	f04f 0900 	mov.w	r9, #0
 800c192:	2301      	movs	r3, #1
 800c194:	e77d      	b.n	800c092 <_strtod_l+0x172>
 800c196:	f04f 0c00 	mov.w	ip, #0
 800c19a:	1ca2      	adds	r2, r4, #2
 800c19c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c19e:	78a2      	ldrb	r2, [r4, #2]
 800c1a0:	e785      	b.n	800c0ae <_strtod_l+0x18e>
 800c1a2:	f04f 0c01 	mov.w	ip, #1
 800c1a6:	e7f8      	b.n	800c19a <_strtod_l+0x27a>
 800c1a8:	0800e068 	.word	0x0800e068
 800c1ac:	7ff00000 	.word	0x7ff00000
 800c1b0:	0800e050 	.word	0x0800e050
 800c1b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1b6:	1c51      	adds	r1, r2, #1
 800c1b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1ba:	7852      	ldrb	r2, [r2, #1]
 800c1bc:	2a30      	cmp	r2, #48	@ 0x30
 800c1be:	d0f9      	beq.n	800c1b4 <_strtod_l+0x294>
 800c1c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c1c4:	2908      	cmp	r1, #8
 800c1c6:	f63f af78 	bhi.w	800c0ba <_strtod_l+0x19a>
 800c1ca:	f04f 080a 	mov.w	r8, #10
 800c1ce:	3a30      	subs	r2, #48	@ 0x30
 800c1d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c1d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1d8:	1c56      	adds	r6, r2, #1
 800c1da:	9619      	str	r6, [sp, #100]	@ 0x64
 800c1dc:	7852      	ldrb	r2, [r2, #1]
 800c1de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c1e2:	f1be 0f09 	cmp.w	lr, #9
 800c1e6:	d939      	bls.n	800c25c <_strtod_l+0x33c>
 800c1e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c1ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c1ee:	1a76      	subs	r6, r6, r1
 800c1f0:	2e08      	cmp	r6, #8
 800c1f2:	dc03      	bgt.n	800c1fc <_strtod_l+0x2dc>
 800c1f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c1f6:	4588      	cmp	r8, r1
 800c1f8:	bfa8      	it	ge
 800c1fa:	4688      	movge	r8, r1
 800c1fc:	f1bc 0f00 	cmp.w	ip, #0
 800c200:	d001      	beq.n	800c206 <_strtod_l+0x2e6>
 800c202:	f1c8 0800 	rsb	r8, r8, #0
 800c206:	2d00      	cmp	r5, #0
 800c208:	d14e      	bne.n	800c2a8 <_strtod_l+0x388>
 800c20a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c20c:	4308      	orrs	r0, r1
 800c20e:	f47f aec0 	bne.w	800bf92 <_strtod_l+0x72>
 800c212:	2b00      	cmp	r3, #0
 800c214:	f47f aed6 	bne.w	800bfc4 <_strtod_l+0xa4>
 800c218:	2a69      	cmp	r2, #105	@ 0x69
 800c21a:	d028      	beq.n	800c26e <_strtod_l+0x34e>
 800c21c:	dc25      	bgt.n	800c26a <_strtod_l+0x34a>
 800c21e:	2a49      	cmp	r2, #73	@ 0x49
 800c220:	d025      	beq.n	800c26e <_strtod_l+0x34e>
 800c222:	2a4e      	cmp	r2, #78	@ 0x4e
 800c224:	f47f aece 	bne.w	800bfc4 <_strtod_l+0xa4>
 800c228:	499a      	ldr	r1, [pc, #616]	@ (800c494 <_strtod_l+0x574>)
 800c22a:	a819      	add	r0, sp, #100	@ 0x64
 800c22c:	f001 fb06 	bl	800d83c <__match>
 800c230:	2800      	cmp	r0, #0
 800c232:	f43f aec7 	beq.w	800bfc4 <_strtod_l+0xa4>
 800c236:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b28      	cmp	r3, #40	@ 0x28
 800c23c:	d12e      	bne.n	800c29c <_strtod_l+0x37c>
 800c23e:	4996      	ldr	r1, [pc, #600]	@ (800c498 <_strtod_l+0x578>)
 800c240:	aa1c      	add	r2, sp, #112	@ 0x70
 800c242:	a819      	add	r0, sp, #100	@ 0x64
 800c244:	f001 fb0e 	bl	800d864 <__hexnan>
 800c248:	2805      	cmp	r0, #5
 800c24a:	d127      	bne.n	800c29c <_strtod_l+0x37c>
 800c24c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c24e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c252:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c256:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c25a:	e69a      	b.n	800bf92 <_strtod_l+0x72>
 800c25c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c25e:	fb08 2101 	mla	r1, r8, r1, r2
 800c262:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c266:	920e      	str	r2, [sp, #56]	@ 0x38
 800c268:	e7b5      	b.n	800c1d6 <_strtod_l+0x2b6>
 800c26a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c26c:	e7da      	b.n	800c224 <_strtod_l+0x304>
 800c26e:	498b      	ldr	r1, [pc, #556]	@ (800c49c <_strtod_l+0x57c>)
 800c270:	a819      	add	r0, sp, #100	@ 0x64
 800c272:	f001 fae3 	bl	800d83c <__match>
 800c276:	2800      	cmp	r0, #0
 800c278:	f43f aea4 	beq.w	800bfc4 <_strtod_l+0xa4>
 800c27c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c27e:	4988      	ldr	r1, [pc, #544]	@ (800c4a0 <_strtod_l+0x580>)
 800c280:	3b01      	subs	r3, #1
 800c282:	a819      	add	r0, sp, #100	@ 0x64
 800c284:	9319      	str	r3, [sp, #100]	@ 0x64
 800c286:	f001 fad9 	bl	800d83c <__match>
 800c28a:	b910      	cbnz	r0, 800c292 <_strtod_l+0x372>
 800c28c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c28e:	3301      	adds	r3, #1
 800c290:	9319      	str	r3, [sp, #100]	@ 0x64
 800c292:	f04f 0a00 	mov.w	sl, #0
 800c296:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800c4a4 <_strtod_l+0x584>
 800c29a:	e67a      	b.n	800bf92 <_strtod_l+0x72>
 800c29c:	4882      	ldr	r0, [pc, #520]	@ (800c4a8 <_strtod_l+0x588>)
 800c29e:	f001 f80b 	bl	800d2b8 <nan>
 800c2a2:	4682      	mov	sl, r0
 800c2a4:	468b      	mov	fp, r1
 800c2a6:	e674      	b.n	800bf92 <_strtod_l+0x72>
 800c2a8:	eba8 0309 	sub.w	r3, r8, r9
 800c2ac:	2f00      	cmp	r7, #0
 800c2ae:	bf08      	it	eq
 800c2b0:	462f      	moveq	r7, r5
 800c2b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2b4:	2d10      	cmp	r5, #16
 800c2b6:	462c      	mov	r4, r5
 800c2b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2ba:	bfa8      	it	ge
 800c2bc:	2410      	movge	r4, #16
 800c2be:	f7f4 f891 	bl	80003e4 <__aeabi_ui2d>
 800c2c2:	2d09      	cmp	r5, #9
 800c2c4:	4682      	mov	sl, r0
 800c2c6:	468b      	mov	fp, r1
 800c2c8:	dc11      	bgt.n	800c2ee <_strtod_l+0x3ce>
 800c2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f43f ae60 	beq.w	800bf92 <_strtod_l+0x72>
 800c2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d4:	dd76      	ble.n	800c3c4 <_strtod_l+0x4a4>
 800c2d6:	2b16      	cmp	r3, #22
 800c2d8:	dc5d      	bgt.n	800c396 <_strtod_l+0x476>
 800c2da:	4974      	ldr	r1, [pc, #464]	@ (800c4ac <_strtod_l+0x58c>)
 800c2dc:	4652      	mov	r2, sl
 800c2de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2e2:	465b      	mov	r3, fp
 800c2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2e8:	f7f4 f8f6 	bl	80004d8 <__aeabi_dmul>
 800c2ec:	e7d9      	b.n	800c2a2 <_strtod_l+0x382>
 800c2ee:	4b6f      	ldr	r3, [pc, #444]	@ (800c4ac <_strtod_l+0x58c>)
 800c2f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c2f8:	f7f4 f8ee 	bl	80004d8 <__aeabi_dmul>
 800c2fc:	4682      	mov	sl, r0
 800c2fe:	9808      	ldr	r0, [sp, #32]
 800c300:	468b      	mov	fp, r1
 800c302:	f7f4 f86f 	bl	80003e4 <__aeabi_ui2d>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4650      	mov	r0, sl
 800c30c:	4659      	mov	r1, fp
 800c30e:	f7f3 ff2d 	bl	800016c <__adddf3>
 800c312:	2d0f      	cmp	r5, #15
 800c314:	4682      	mov	sl, r0
 800c316:	468b      	mov	fp, r1
 800c318:	ddd7      	ble.n	800c2ca <_strtod_l+0x3aa>
 800c31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c31c:	1b2c      	subs	r4, r5, r4
 800c31e:	441c      	add	r4, r3
 800c320:	2c00      	cmp	r4, #0
 800c322:	f340 8096 	ble.w	800c452 <_strtod_l+0x532>
 800c326:	f014 030f 	ands.w	r3, r4, #15
 800c32a:	d00a      	beq.n	800c342 <_strtod_l+0x422>
 800c32c:	495f      	ldr	r1, [pc, #380]	@ (800c4ac <_strtod_l+0x58c>)
 800c32e:	4652      	mov	r2, sl
 800c330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c338:	465b      	mov	r3, fp
 800c33a:	f7f4 f8cd 	bl	80004d8 <__aeabi_dmul>
 800c33e:	4682      	mov	sl, r0
 800c340:	468b      	mov	fp, r1
 800c342:	f034 040f 	bics.w	r4, r4, #15
 800c346:	d073      	beq.n	800c430 <_strtod_l+0x510>
 800c348:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c34c:	dd48      	ble.n	800c3e0 <_strtod_l+0x4c0>
 800c34e:	2400      	movs	r4, #0
 800c350:	46a0      	mov	r8, r4
 800c352:	46a1      	mov	r9, r4
 800c354:	940a      	str	r4, [sp, #40]	@ 0x28
 800c356:	2322      	movs	r3, #34	@ 0x22
 800c358:	f04f 0a00 	mov.w	sl, #0
 800c35c:	9a05      	ldr	r2, [sp, #20]
 800c35e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800c4a4 <_strtod_l+0x584>
 800c362:	6013      	str	r3, [r2, #0]
 800c364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c366:	2b00      	cmp	r3, #0
 800c368:	f43f ae13 	beq.w	800bf92 <_strtod_l+0x72>
 800c36c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c36e:	9805      	ldr	r0, [sp, #20]
 800c370:	f7ff f94c 	bl	800b60c <_Bfree>
 800c374:	4649      	mov	r1, r9
 800c376:	9805      	ldr	r0, [sp, #20]
 800c378:	f7ff f948 	bl	800b60c <_Bfree>
 800c37c:	4641      	mov	r1, r8
 800c37e:	9805      	ldr	r0, [sp, #20]
 800c380:	f7ff f944 	bl	800b60c <_Bfree>
 800c384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c386:	9805      	ldr	r0, [sp, #20]
 800c388:	f7ff f940 	bl	800b60c <_Bfree>
 800c38c:	4621      	mov	r1, r4
 800c38e:	9805      	ldr	r0, [sp, #20]
 800c390:	f7ff f93c 	bl	800b60c <_Bfree>
 800c394:	e5fd      	b.n	800bf92 <_strtod_l+0x72>
 800c396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c398:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c39c:	4293      	cmp	r3, r2
 800c39e:	dbbc      	blt.n	800c31a <_strtod_l+0x3fa>
 800c3a0:	4c42      	ldr	r4, [pc, #264]	@ (800c4ac <_strtod_l+0x58c>)
 800c3a2:	f1c5 050f 	rsb	r5, r5, #15
 800c3a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c3aa:	4652      	mov	r2, sl
 800c3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b0:	465b      	mov	r3, fp
 800c3b2:	f7f4 f891 	bl	80004d8 <__aeabi_dmul>
 800c3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b8:	1b5d      	subs	r5, r3, r5
 800c3ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c3be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c3c2:	e791      	b.n	800c2e8 <_strtod_l+0x3c8>
 800c3c4:	3316      	adds	r3, #22
 800c3c6:	dba8      	blt.n	800c31a <_strtod_l+0x3fa>
 800c3c8:	4b38      	ldr	r3, [pc, #224]	@ (800c4ac <_strtod_l+0x58c>)
 800c3ca:	eba9 0808 	sub.w	r8, r9, r8
 800c3ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c3d2:	4650      	mov	r0, sl
 800c3d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c3d8:	4659      	mov	r1, fp
 800c3da:	f7f4 f9a7 	bl	800072c <__aeabi_ddiv>
 800c3de:	e760      	b.n	800c2a2 <_strtod_l+0x382>
 800c3e0:	4b33      	ldr	r3, [pc, #204]	@ (800c4b0 <_strtod_l+0x590>)
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	9308      	str	r3, [sp, #32]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	4659      	mov	r1, fp
 800c3ea:	461e      	mov	r6, r3
 800c3ec:	1124      	asrs	r4, r4, #4
 800c3ee:	2c01      	cmp	r4, #1
 800c3f0:	dc21      	bgt.n	800c436 <_strtod_l+0x516>
 800c3f2:	b10b      	cbz	r3, 800c3f8 <_strtod_l+0x4d8>
 800c3f4:	4682      	mov	sl, r0
 800c3f6:	468b      	mov	fp, r1
 800c3f8:	492d      	ldr	r1, [pc, #180]	@ (800c4b0 <_strtod_l+0x590>)
 800c3fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c3fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c402:	4652      	mov	r2, sl
 800c404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c408:	465b      	mov	r3, fp
 800c40a:	f7f4 f865 	bl	80004d8 <__aeabi_dmul>
 800c40e:	4b25      	ldr	r3, [pc, #148]	@ (800c4a4 <_strtod_l+0x584>)
 800c410:	460a      	mov	r2, r1
 800c412:	400b      	ands	r3, r1
 800c414:	4927      	ldr	r1, [pc, #156]	@ (800c4b4 <_strtod_l+0x594>)
 800c416:	4682      	mov	sl, r0
 800c418:	428b      	cmp	r3, r1
 800c41a:	d898      	bhi.n	800c34e <_strtod_l+0x42e>
 800c41c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c420:	428b      	cmp	r3, r1
 800c422:	bf86      	itte	hi
 800c424:	f04f 3aff 	movhi.w	sl, #4294967295
 800c428:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c4b8 <_strtod_l+0x598>
 800c42c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c430:	2300      	movs	r3, #0
 800c432:	9308      	str	r3, [sp, #32]
 800c434:	e07a      	b.n	800c52c <_strtod_l+0x60c>
 800c436:	07e2      	lsls	r2, r4, #31
 800c438:	d505      	bpl.n	800c446 <_strtod_l+0x526>
 800c43a:	9b08      	ldr	r3, [sp, #32]
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	f7f4 f84a 	bl	80004d8 <__aeabi_dmul>
 800c444:	2301      	movs	r3, #1
 800c446:	9a08      	ldr	r2, [sp, #32]
 800c448:	3601      	adds	r6, #1
 800c44a:	3208      	adds	r2, #8
 800c44c:	1064      	asrs	r4, r4, #1
 800c44e:	9208      	str	r2, [sp, #32]
 800c450:	e7cd      	b.n	800c3ee <_strtod_l+0x4ce>
 800c452:	d0ed      	beq.n	800c430 <_strtod_l+0x510>
 800c454:	4264      	negs	r4, r4
 800c456:	f014 020f 	ands.w	r2, r4, #15
 800c45a:	d00a      	beq.n	800c472 <_strtod_l+0x552>
 800c45c:	4b13      	ldr	r3, [pc, #76]	@ (800c4ac <_strtod_l+0x58c>)
 800c45e:	4650      	mov	r0, sl
 800c460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c464:	4659      	mov	r1, fp
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7f4 f95f 	bl	800072c <__aeabi_ddiv>
 800c46e:	4682      	mov	sl, r0
 800c470:	468b      	mov	fp, r1
 800c472:	1124      	asrs	r4, r4, #4
 800c474:	d0dc      	beq.n	800c430 <_strtod_l+0x510>
 800c476:	2c1f      	cmp	r4, #31
 800c478:	dd20      	ble.n	800c4bc <_strtod_l+0x59c>
 800c47a:	2400      	movs	r4, #0
 800c47c:	46a0      	mov	r8, r4
 800c47e:	46a1      	mov	r9, r4
 800c480:	940a      	str	r4, [sp, #40]	@ 0x28
 800c482:	2322      	movs	r3, #34	@ 0x22
 800c484:	9a05      	ldr	r2, [sp, #20]
 800c486:	f04f 0a00 	mov.w	sl, #0
 800c48a:	f04f 0b00 	mov.w	fp, #0
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	e768      	b.n	800c364 <_strtod_l+0x444>
 800c492:	bf00      	nop
 800c494:	0800de40 	.word	0x0800de40
 800c498:	0800e054 	.word	0x0800e054
 800c49c:	0800de38 	.word	0x0800de38
 800c4a0:	0800de6f 	.word	0x0800de6f
 800c4a4:	7ff00000 	.word	0x7ff00000
 800c4a8:	0800e0fc 	.word	0x0800e0fc
 800c4ac:	0800df88 	.word	0x0800df88
 800c4b0:	0800df60 	.word	0x0800df60
 800c4b4:	7ca00000 	.word	0x7ca00000
 800c4b8:	7fefffff 	.word	0x7fefffff
 800c4bc:	f014 0310 	ands.w	r3, r4, #16
 800c4c0:	bf18      	it	ne
 800c4c2:	236a      	movne	r3, #106	@ 0x6a
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	9308      	str	r3, [sp, #32]
 800c4c8:	4659      	mov	r1, fp
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	4ea9      	ldr	r6, [pc, #676]	@ (800c774 <_strtod_l+0x854>)
 800c4ce:	07e2      	lsls	r2, r4, #31
 800c4d0:	d504      	bpl.n	800c4dc <_strtod_l+0x5bc>
 800c4d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4d6:	f7f3 ffff 	bl	80004d8 <__aeabi_dmul>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	1064      	asrs	r4, r4, #1
 800c4de:	f106 0608 	add.w	r6, r6, #8
 800c4e2:	d1f4      	bne.n	800c4ce <_strtod_l+0x5ae>
 800c4e4:	b10b      	cbz	r3, 800c4ea <_strtod_l+0x5ca>
 800c4e6:	4682      	mov	sl, r0
 800c4e8:	468b      	mov	fp, r1
 800c4ea:	9b08      	ldr	r3, [sp, #32]
 800c4ec:	b1b3      	cbz	r3, 800c51c <_strtod_l+0x5fc>
 800c4ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c4f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	4659      	mov	r1, fp
 800c4fa:	dd0f      	ble.n	800c51c <_strtod_l+0x5fc>
 800c4fc:	2b1f      	cmp	r3, #31
 800c4fe:	dd57      	ble.n	800c5b0 <_strtod_l+0x690>
 800c500:	2b34      	cmp	r3, #52	@ 0x34
 800c502:	bfd8      	it	le
 800c504:	f04f 33ff 	movle.w	r3, #4294967295
 800c508:	f04f 0a00 	mov.w	sl, #0
 800c50c:	bfcf      	iteee	gt
 800c50e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c512:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c516:	4093      	lslle	r3, r2
 800c518:	ea03 0b01 	andle.w	fp, r3, r1
 800c51c:	2200      	movs	r2, #0
 800c51e:	2300      	movs	r3, #0
 800c520:	4650      	mov	r0, sl
 800c522:	4659      	mov	r1, fp
 800c524:	f7f4 fa40 	bl	80009a8 <__aeabi_dcmpeq>
 800c528:	2800      	cmp	r0, #0
 800c52a:	d1a6      	bne.n	800c47a <_strtod_l+0x55a>
 800c52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c52e:	463a      	mov	r2, r7
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c534:	462b      	mov	r3, r5
 800c536:	9805      	ldr	r0, [sp, #20]
 800c538:	f7ff f8d0 	bl	800b6dc <__s2b>
 800c53c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c53e:	2800      	cmp	r0, #0
 800c540:	f43f af05 	beq.w	800c34e <_strtod_l+0x42e>
 800c544:	2400      	movs	r4, #0
 800c546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c548:	eba9 0308 	sub.w	r3, r9, r8
 800c54c:	2a00      	cmp	r2, #0
 800c54e:	bfa8      	it	ge
 800c550:	2300      	movge	r3, #0
 800c552:	46a0      	mov	r8, r4
 800c554:	9312      	str	r3, [sp, #72]	@ 0x48
 800c556:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c55a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c55c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c55e:	9805      	ldr	r0, [sp, #20]
 800c560:	6859      	ldr	r1, [r3, #4]
 800c562:	f7ff f813 	bl	800b58c <_Balloc>
 800c566:	4681      	mov	r9, r0
 800c568:	2800      	cmp	r0, #0
 800c56a:	f43f aef4 	beq.w	800c356 <_strtod_l+0x436>
 800c56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c570:	300c      	adds	r0, #12
 800c572:	691a      	ldr	r2, [r3, #16]
 800c574:	f103 010c 	add.w	r1, r3, #12
 800c578:	3202      	adds	r2, #2
 800c57a:	0092      	lsls	r2, r2, #2
 800c57c:	f7fe f8a3 	bl	800a6c6 <memcpy>
 800c580:	ab1c      	add	r3, sp, #112	@ 0x70
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	4652      	mov	r2, sl
 800c58a:	465b      	mov	r3, fp
 800c58c:	9805      	ldr	r0, [sp, #20]
 800c58e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c592:	f7ff fbd5 	bl	800bd40 <__d2b>
 800c596:	901a      	str	r0, [sp, #104]	@ 0x68
 800c598:	2800      	cmp	r0, #0
 800c59a:	f43f aedc 	beq.w	800c356 <_strtod_l+0x436>
 800c59e:	2101      	movs	r1, #1
 800c5a0:	9805      	ldr	r0, [sp, #20]
 800c5a2:	f7ff f931 	bl	800b808 <__i2b>
 800c5a6:	4680      	mov	r8, r0
 800c5a8:	b948      	cbnz	r0, 800c5be <_strtod_l+0x69e>
 800c5aa:	f04f 0800 	mov.w	r8, #0
 800c5ae:	e6d2      	b.n	800c356 <_strtod_l+0x436>
 800c5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b8:	ea03 0a0a 	and.w	sl, r3, sl
 800c5bc:	e7ae      	b.n	800c51c <_strtod_l+0x5fc>
 800c5be:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c5c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c5c2:	2d00      	cmp	r5, #0
 800c5c4:	bfab      	itete	ge
 800c5c6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c5c8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c5ca:	18ef      	addge	r7, r5, r3
 800c5cc:	1b5e      	sublt	r6, r3, r5
 800c5ce:	9b08      	ldr	r3, [sp, #32]
 800c5d0:	bfa8      	it	ge
 800c5d2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c5d4:	eba5 0503 	sub.w	r5, r5, r3
 800c5d8:	4415      	add	r5, r2
 800c5da:	4b67      	ldr	r3, [pc, #412]	@ (800c778 <_strtod_l+0x858>)
 800c5dc:	f105 35ff 	add.w	r5, r5, #4294967295
 800c5e0:	bfb8      	it	lt
 800c5e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c5e4:	429d      	cmp	r5, r3
 800c5e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c5ea:	da50      	bge.n	800c68e <_strtod_l+0x76e>
 800c5ec:	1b5b      	subs	r3, r3, r5
 800c5ee:	2b1f      	cmp	r3, #31
 800c5f0:	f04f 0101 	mov.w	r1, #1
 800c5f4:	eba2 0203 	sub.w	r2, r2, r3
 800c5f8:	dc3d      	bgt.n	800c676 <_strtod_l+0x756>
 800c5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c5fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c600:	2300      	movs	r3, #0
 800c602:	9310      	str	r3, [sp, #64]	@ 0x40
 800c604:	18bd      	adds	r5, r7, r2
 800c606:	9b08      	ldr	r3, [sp, #32]
 800c608:	42af      	cmp	r7, r5
 800c60a:	4416      	add	r6, r2
 800c60c:	441e      	add	r6, r3
 800c60e:	463b      	mov	r3, r7
 800c610:	bfa8      	it	ge
 800c612:	462b      	movge	r3, r5
 800c614:	42b3      	cmp	r3, r6
 800c616:	bfa8      	it	ge
 800c618:	4633      	movge	r3, r6
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bfc2      	ittt	gt
 800c61e:	1aed      	subgt	r5, r5, r3
 800c620:	1af6      	subgt	r6, r6, r3
 800c622:	1aff      	subgt	r7, r7, r3
 800c624:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c626:	2b00      	cmp	r3, #0
 800c628:	dd16      	ble.n	800c658 <_strtod_l+0x738>
 800c62a:	4641      	mov	r1, r8
 800c62c:	461a      	mov	r2, r3
 800c62e:	9805      	ldr	r0, [sp, #20]
 800c630:	f7ff f9a8 	bl	800b984 <__pow5mult>
 800c634:	4680      	mov	r8, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	d0b7      	beq.n	800c5aa <_strtod_l+0x68a>
 800c63a:	4601      	mov	r1, r0
 800c63c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c63e:	9805      	ldr	r0, [sp, #20]
 800c640:	f7ff f8f8 	bl	800b834 <__multiply>
 800c644:	900e      	str	r0, [sp, #56]	@ 0x38
 800c646:	2800      	cmp	r0, #0
 800c648:	f43f ae85 	beq.w	800c356 <_strtod_l+0x436>
 800c64c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c64e:	9805      	ldr	r0, [sp, #20]
 800c650:	f7fe ffdc 	bl	800b60c <_Bfree>
 800c654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c656:	931a      	str	r3, [sp, #104]	@ 0x68
 800c658:	2d00      	cmp	r5, #0
 800c65a:	dc1d      	bgt.n	800c698 <_strtod_l+0x778>
 800c65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	dd23      	ble.n	800c6aa <_strtod_l+0x78a>
 800c662:	4649      	mov	r1, r9
 800c664:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c666:	9805      	ldr	r0, [sp, #20]
 800c668:	f7ff f98c 	bl	800b984 <__pow5mult>
 800c66c:	4681      	mov	r9, r0
 800c66e:	b9e0      	cbnz	r0, 800c6aa <_strtod_l+0x78a>
 800c670:	f04f 0900 	mov.w	r9, #0
 800c674:	e66f      	b.n	800c356 <_strtod_l+0x436>
 800c676:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c67a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c67e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c682:	35e2      	adds	r5, #226	@ 0xe2
 800c684:	fa01 f305 	lsl.w	r3, r1, r5
 800c688:	9310      	str	r3, [sp, #64]	@ 0x40
 800c68a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c68c:	e7ba      	b.n	800c604 <_strtod_l+0x6e4>
 800c68e:	2300      	movs	r3, #0
 800c690:	9310      	str	r3, [sp, #64]	@ 0x40
 800c692:	2301      	movs	r3, #1
 800c694:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c696:	e7b5      	b.n	800c604 <_strtod_l+0x6e4>
 800c698:	462a      	mov	r2, r5
 800c69a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c69c:	9805      	ldr	r0, [sp, #20]
 800c69e:	f7ff f9cb 	bl	800ba38 <__lshift>
 800c6a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d1d9      	bne.n	800c65c <_strtod_l+0x73c>
 800c6a8:	e655      	b.n	800c356 <_strtod_l+0x436>
 800c6aa:	2e00      	cmp	r6, #0
 800c6ac:	dd07      	ble.n	800c6be <_strtod_l+0x79e>
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	4632      	mov	r2, r6
 800c6b2:	9805      	ldr	r0, [sp, #20]
 800c6b4:	f7ff f9c0 	bl	800ba38 <__lshift>
 800c6b8:	4681      	mov	r9, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d0d8      	beq.n	800c670 <_strtod_l+0x750>
 800c6be:	2f00      	cmp	r7, #0
 800c6c0:	dd08      	ble.n	800c6d4 <_strtod_l+0x7b4>
 800c6c2:	4641      	mov	r1, r8
 800c6c4:	463a      	mov	r2, r7
 800c6c6:	9805      	ldr	r0, [sp, #20]
 800c6c8:	f7ff f9b6 	bl	800ba38 <__lshift>
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f43f ae41 	beq.w	800c356 <_strtod_l+0x436>
 800c6d4:	464a      	mov	r2, r9
 800c6d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6d8:	9805      	ldr	r0, [sp, #20]
 800c6da:	f7ff fa35 	bl	800bb48 <__mdiff>
 800c6de:	4604      	mov	r4, r0
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	f43f ae38 	beq.w	800c356 <_strtod_l+0x436>
 800c6e6:	68c3      	ldr	r3, [r0, #12]
 800c6e8:	4641      	mov	r1, r8
 800c6ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	60c3      	str	r3, [r0, #12]
 800c6f0:	f7ff fa0e 	bl	800bb10 <__mcmp>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	da45      	bge.n	800c784 <_strtod_l+0x864>
 800c6f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6fa:	ea53 030a 	orrs.w	r3, r3, sl
 800c6fe:	d16b      	bne.n	800c7d8 <_strtod_l+0x8b8>
 800c700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c704:	2b00      	cmp	r3, #0
 800c706:	d167      	bne.n	800c7d8 <_strtod_l+0x8b8>
 800c708:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c70c:	0d1b      	lsrs	r3, r3, #20
 800c70e:	051b      	lsls	r3, r3, #20
 800c710:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c714:	d960      	bls.n	800c7d8 <_strtod_l+0x8b8>
 800c716:	6963      	ldr	r3, [r4, #20]
 800c718:	b913      	cbnz	r3, 800c720 <_strtod_l+0x800>
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	dd5b      	ble.n	800c7d8 <_strtod_l+0x8b8>
 800c720:	4621      	mov	r1, r4
 800c722:	2201      	movs	r2, #1
 800c724:	9805      	ldr	r0, [sp, #20]
 800c726:	f7ff f987 	bl	800ba38 <__lshift>
 800c72a:	4641      	mov	r1, r8
 800c72c:	4604      	mov	r4, r0
 800c72e:	f7ff f9ef 	bl	800bb10 <__mcmp>
 800c732:	2800      	cmp	r0, #0
 800c734:	dd50      	ble.n	800c7d8 <_strtod_l+0x8b8>
 800c736:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c73a:	9a08      	ldr	r2, [sp, #32]
 800c73c:	0d1b      	lsrs	r3, r3, #20
 800c73e:	051b      	lsls	r3, r3, #20
 800c740:	2a00      	cmp	r2, #0
 800c742:	d06a      	beq.n	800c81a <_strtod_l+0x8fa>
 800c744:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c748:	d867      	bhi.n	800c81a <_strtod_l+0x8fa>
 800c74a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c74e:	f67f ae98 	bls.w	800c482 <_strtod_l+0x562>
 800c752:	4650      	mov	r0, sl
 800c754:	4659      	mov	r1, fp
 800c756:	4b09      	ldr	r3, [pc, #36]	@ (800c77c <_strtod_l+0x85c>)
 800c758:	2200      	movs	r2, #0
 800c75a:	f7f3 febd 	bl	80004d8 <__aeabi_dmul>
 800c75e:	4b08      	ldr	r3, [pc, #32]	@ (800c780 <_strtod_l+0x860>)
 800c760:	4682      	mov	sl, r0
 800c762:	400b      	ands	r3, r1
 800c764:	468b      	mov	fp, r1
 800c766:	2b00      	cmp	r3, #0
 800c768:	f47f ae00 	bne.w	800c36c <_strtod_l+0x44c>
 800c76c:	2322      	movs	r3, #34	@ 0x22
 800c76e:	9a05      	ldr	r2, [sp, #20]
 800c770:	6013      	str	r3, [r2, #0]
 800c772:	e5fb      	b.n	800c36c <_strtod_l+0x44c>
 800c774:	0800e080 	.word	0x0800e080
 800c778:	fffffc02 	.word	0xfffffc02
 800c77c:	39500000 	.word	0x39500000
 800c780:	7ff00000 	.word	0x7ff00000
 800c784:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c788:	d165      	bne.n	800c856 <_strtod_l+0x936>
 800c78a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c78c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c790:	b35a      	cbz	r2, 800c7ea <_strtod_l+0x8ca>
 800c792:	4a99      	ldr	r2, [pc, #612]	@ (800c9f8 <_strtod_l+0xad8>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d12b      	bne.n	800c7f0 <_strtod_l+0x8d0>
 800c798:	9b08      	ldr	r3, [sp, #32]
 800c79a:	4651      	mov	r1, sl
 800c79c:	b303      	cbz	r3, 800c7e0 <_strtod_l+0x8c0>
 800c79e:	465a      	mov	r2, fp
 800c7a0:	4b96      	ldr	r3, [pc, #600]	@ (800c9fc <_strtod_l+0xadc>)
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ac:	d81b      	bhi.n	800c7e6 <_strtod_l+0x8c6>
 800c7ae:	0d1b      	lsrs	r3, r3, #20
 800c7b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b8:	4299      	cmp	r1, r3
 800c7ba:	d119      	bne.n	800c7f0 <_strtod_l+0x8d0>
 800c7bc:	4b90      	ldr	r3, [pc, #576]	@ (800ca00 <_strtod_l+0xae0>)
 800c7be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d102      	bne.n	800c7ca <_strtod_l+0x8aa>
 800c7c4:	3101      	adds	r1, #1
 800c7c6:	f43f adc6 	beq.w	800c356 <_strtod_l+0x436>
 800c7ca:	f04f 0a00 	mov.w	sl, #0
 800c7ce:	4b8b      	ldr	r3, [pc, #556]	@ (800c9fc <_strtod_l+0xadc>)
 800c7d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7d2:	401a      	ands	r2, r3
 800c7d4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c7d8:	9b08      	ldr	r3, [sp, #32]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1b9      	bne.n	800c752 <_strtod_l+0x832>
 800c7de:	e5c5      	b.n	800c36c <_strtod_l+0x44c>
 800c7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e4:	e7e8      	b.n	800c7b8 <_strtod_l+0x898>
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	e7e6      	b.n	800c7b8 <_strtod_l+0x898>
 800c7ea:	ea53 030a 	orrs.w	r3, r3, sl
 800c7ee:	d0a2      	beq.n	800c736 <_strtod_l+0x816>
 800c7f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7f2:	b1db      	cbz	r3, 800c82c <_strtod_l+0x90c>
 800c7f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7f6:	4213      	tst	r3, r2
 800c7f8:	d0ee      	beq.n	800c7d8 <_strtod_l+0x8b8>
 800c7fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7fc:	4650      	mov	r0, sl
 800c7fe:	4659      	mov	r1, fp
 800c800:	9a08      	ldr	r2, [sp, #32]
 800c802:	b1bb      	cbz	r3, 800c834 <_strtod_l+0x914>
 800c804:	f7ff fb68 	bl	800bed8 <sulp>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c810:	f7f3 fcac 	bl	800016c <__adddf3>
 800c814:	4682      	mov	sl, r0
 800c816:	468b      	mov	fp, r1
 800c818:	e7de      	b.n	800c7d8 <_strtod_l+0x8b8>
 800c81a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c81e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c822:	f04f 3aff 	mov.w	sl, #4294967295
 800c826:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c82a:	e7d5      	b.n	800c7d8 <_strtod_l+0x8b8>
 800c82c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c82e:	ea13 0f0a 	tst.w	r3, sl
 800c832:	e7e1      	b.n	800c7f8 <_strtod_l+0x8d8>
 800c834:	f7ff fb50 	bl	800bed8 <sulp>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c840:	f7f3 fc92 	bl	8000168 <__aeabi_dsub>
 800c844:	2200      	movs	r2, #0
 800c846:	2300      	movs	r3, #0
 800c848:	4682      	mov	sl, r0
 800c84a:	468b      	mov	fp, r1
 800c84c:	f7f4 f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 800c850:	2800      	cmp	r0, #0
 800c852:	d0c1      	beq.n	800c7d8 <_strtod_l+0x8b8>
 800c854:	e615      	b.n	800c482 <_strtod_l+0x562>
 800c856:	4641      	mov	r1, r8
 800c858:	4620      	mov	r0, r4
 800c85a:	f7ff fac9 	bl	800bdf0 <__ratio>
 800c85e:	2200      	movs	r2, #0
 800c860:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c864:	4606      	mov	r6, r0
 800c866:	460f      	mov	r7, r1
 800c868:	f7f4 f8b2 	bl	80009d0 <__aeabi_dcmple>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d06d      	beq.n	800c94c <_strtod_l+0xa2c>
 800c870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d178      	bne.n	800c968 <_strtod_l+0xa48>
 800c876:	f1ba 0f00 	cmp.w	sl, #0
 800c87a:	d156      	bne.n	800c92a <_strtod_l+0xa0a>
 800c87c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c87e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c882:	2b00      	cmp	r3, #0
 800c884:	d158      	bne.n	800c938 <_strtod_l+0xa18>
 800c886:	2200      	movs	r2, #0
 800c888:	4630      	mov	r0, r6
 800c88a:	4639      	mov	r1, r7
 800c88c:	4b5d      	ldr	r3, [pc, #372]	@ (800ca04 <_strtod_l+0xae4>)
 800c88e:	f7f4 f895 	bl	80009bc <__aeabi_dcmplt>
 800c892:	2800      	cmp	r0, #0
 800c894:	d157      	bne.n	800c946 <_strtod_l+0xa26>
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	2200      	movs	r2, #0
 800c89c:	4b5a      	ldr	r3, [pc, #360]	@ (800ca08 <_strtod_l+0xae8>)
 800c89e:	f7f3 fe1b 	bl	80004d8 <__aeabi_dmul>
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	460f      	mov	r7, r1
 800c8a6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c8aa:	9606      	str	r6, [sp, #24]
 800c8ac:	9307      	str	r3, [sp, #28]
 800c8ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8b2:	4d52      	ldr	r5, [pc, #328]	@ (800c9fc <_strtod_l+0xadc>)
 800c8b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8ba:	401d      	ands	r5, r3
 800c8bc:	4b53      	ldr	r3, [pc, #332]	@ (800ca0c <_strtod_l+0xaec>)
 800c8be:	429d      	cmp	r5, r3
 800c8c0:	f040 80aa 	bne.w	800ca18 <_strtod_l+0xaf8>
 800c8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c8cc:	4659      	mov	r1, fp
 800c8ce:	f7ff f9cf 	bl	800bc70 <__ulp>
 800c8d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8d6:	f7f3 fdff 	bl	80004d8 <__aeabi_dmul>
 800c8da:	4652      	mov	r2, sl
 800c8dc:	465b      	mov	r3, fp
 800c8de:	f7f3 fc45 	bl	800016c <__adddf3>
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4945      	ldr	r1, [pc, #276]	@ (800c9fc <_strtod_l+0xadc>)
 800c8e6:	4a4a      	ldr	r2, [pc, #296]	@ (800ca10 <_strtod_l+0xaf0>)
 800c8e8:	4019      	ands	r1, r3
 800c8ea:	4291      	cmp	r1, r2
 800c8ec:	4682      	mov	sl, r0
 800c8ee:	d942      	bls.n	800c976 <_strtod_l+0xa56>
 800c8f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c8f2:	4b43      	ldr	r3, [pc, #268]	@ (800ca00 <_strtod_l+0xae0>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d103      	bne.n	800c900 <_strtod_l+0x9e0>
 800c8f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	f43f ad2b 	beq.w	800c356 <_strtod_l+0x436>
 800c900:	f04f 3aff 	mov.w	sl, #4294967295
 800c904:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800ca00 <_strtod_l+0xae0>
 800c908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c90a:	9805      	ldr	r0, [sp, #20]
 800c90c:	f7fe fe7e 	bl	800b60c <_Bfree>
 800c910:	4649      	mov	r1, r9
 800c912:	9805      	ldr	r0, [sp, #20]
 800c914:	f7fe fe7a 	bl	800b60c <_Bfree>
 800c918:	4641      	mov	r1, r8
 800c91a:	9805      	ldr	r0, [sp, #20]
 800c91c:	f7fe fe76 	bl	800b60c <_Bfree>
 800c920:	4621      	mov	r1, r4
 800c922:	9805      	ldr	r0, [sp, #20]
 800c924:	f7fe fe72 	bl	800b60c <_Bfree>
 800c928:	e618      	b.n	800c55c <_strtod_l+0x63c>
 800c92a:	f1ba 0f01 	cmp.w	sl, #1
 800c92e:	d103      	bne.n	800c938 <_strtod_l+0xa18>
 800c930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c932:	2b00      	cmp	r3, #0
 800c934:	f43f ada5 	beq.w	800c482 <_strtod_l+0x562>
 800c938:	2200      	movs	r2, #0
 800c93a:	4b36      	ldr	r3, [pc, #216]	@ (800ca14 <_strtod_l+0xaf4>)
 800c93c:	2600      	movs	r6, #0
 800c93e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c942:	4f30      	ldr	r7, [pc, #192]	@ (800ca04 <_strtod_l+0xae4>)
 800c944:	e7b3      	b.n	800c8ae <_strtod_l+0x98e>
 800c946:	2600      	movs	r6, #0
 800c948:	4f2f      	ldr	r7, [pc, #188]	@ (800ca08 <_strtod_l+0xae8>)
 800c94a:	e7ac      	b.n	800c8a6 <_strtod_l+0x986>
 800c94c:	4630      	mov	r0, r6
 800c94e:	4639      	mov	r1, r7
 800c950:	4b2d      	ldr	r3, [pc, #180]	@ (800ca08 <_strtod_l+0xae8>)
 800c952:	2200      	movs	r2, #0
 800c954:	f7f3 fdc0 	bl	80004d8 <__aeabi_dmul>
 800c958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c95a:	4606      	mov	r6, r0
 800c95c:	460f      	mov	r7, r1
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0a1      	beq.n	800c8a6 <_strtod_l+0x986>
 800c962:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c966:	e7a2      	b.n	800c8ae <_strtod_l+0x98e>
 800c968:	2200      	movs	r2, #0
 800c96a:	4b26      	ldr	r3, [pc, #152]	@ (800ca04 <_strtod_l+0xae4>)
 800c96c:	4616      	mov	r6, r2
 800c96e:	461f      	mov	r7, r3
 800c970:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c974:	e79b      	b.n	800c8ae <_strtod_l+0x98e>
 800c976:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c97a:	9b08      	ldr	r3, [sp, #32]
 800c97c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1c1      	bne.n	800c908 <_strtod_l+0x9e8>
 800c984:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c988:	0d1b      	lsrs	r3, r3, #20
 800c98a:	051b      	lsls	r3, r3, #20
 800c98c:	429d      	cmp	r5, r3
 800c98e:	d1bb      	bne.n	800c908 <_strtod_l+0x9e8>
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f7f4 fb46 	bl	8001024 <__aeabi_d2lz>
 800c998:	f7f3 fd70 	bl	800047c <__aeabi_l2d>
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f7f3 fbe0 	bl	8000168 <__aeabi_dsub>
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c9b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9b6:	ea46 060a 	orr.w	r6, r6, sl
 800c9ba:	431e      	orrs	r6, r3
 800c9bc:	d069      	beq.n	800ca92 <_strtod_l+0xb72>
 800c9be:	a30a      	add	r3, pc, #40	@ (adr r3, 800c9e8 <_strtod_l+0xac8>)
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	f7f3 fffa 	bl	80009bc <__aeabi_dcmplt>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	f47f accf 	bne.w	800c36c <_strtod_l+0x44c>
 800c9ce:	a308      	add	r3, pc, #32	@ (adr r3, 800c9f0 <_strtod_l+0xad0>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9d8:	f7f4 f80e 	bl	80009f8 <__aeabi_dcmpgt>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d093      	beq.n	800c908 <_strtod_l+0x9e8>
 800c9e0:	e4c4      	b.n	800c36c <_strtod_l+0x44c>
 800c9e2:	bf00      	nop
 800c9e4:	f3af 8000 	nop.w
 800c9e8:	94a03595 	.word	0x94a03595
 800c9ec:	3fdfffff 	.word	0x3fdfffff
 800c9f0:	35afe535 	.word	0x35afe535
 800c9f4:	3fe00000 	.word	0x3fe00000
 800c9f8:	000fffff 	.word	0x000fffff
 800c9fc:	7ff00000 	.word	0x7ff00000
 800ca00:	7fefffff 	.word	0x7fefffff
 800ca04:	3ff00000 	.word	0x3ff00000
 800ca08:	3fe00000 	.word	0x3fe00000
 800ca0c:	7fe00000 	.word	0x7fe00000
 800ca10:	7c9fffff 	.word	0x7c9fffff
 800ca14:	bff00000 	.word	0xbff00000
 800ca18:	9b08      	ldr	r3, [sp, #32]
 800ca1a:	b323      	cbz	r3, 800ca66 <_strtod_l+0xb46>
 800ca1c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ca20:	d821      	bhi.n	800ca66 <_strtod_l+0xb46>
 800ca22:	a327      	add	r3, pc, #156	@ (adr r3, 800cac0 <_strtod_l+0xba0>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	4630      	mov	r0, r6
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	f7f3 ffd0 	bl	80009d0 <__aeabi_dcmple>
 800ca30:	b1a0      	cbz	r0, 800ca5c <_strtod_l+0xb3c>
 800ca32:	4639      	mov	r1, r7
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7f4 f827 	bl	8000a88 <__aeabi_d2uiz>
 800ca3a:	2801      	cmp	r0, #1
 800ca3c:	bf38      	it	cc
 800ca3e:	2001      	movcc	r0, #1
 800ca40:	f7f3 fcd0 	bl	80003e4 <__aeabi_ui2d>
 800ca44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca46:	4606      	mov	r6, r0
 800ca48:	460f      	mov	r7, r1
 800ca4a:	b9fb      	cbnz	r3, 800ca8c <_strtod_l+0xb6c>
 800ca4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca50:	9014      	str	r0, [sp, #80]	@ 0x50
 800ca52:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ca58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca5e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ca62:	1b5b      	subs	r3, r3, r5
 800ca64:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca6a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ca6e:	f7ff f8ff 	bl	800bc70 <__ulp>
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	4650      	mov	r0, sl
 800ca78:	4659      	mov	r1, fp
 800ca7a:	f7f3 fd2d 	bl	80004d8 <__aeabi_dmul>
 800ca7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ca82:	f7f3 fb73 	bl	800016c <__adddf3>
 800ca86:	4682      	mov	sl, r0
 800ca88:	468b      	mov	fp, r1
 800ca8a:	e776      	b.n	800c97a <_strtod_l+0xa5a>
 800ca8c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ca90:	e7e0      	b.n	800ca54 <_strtod_l+0xb34>
 800ca92:	a30d      	add	r3, pc, #52	@ (adr r3, 800cac8 <_strtod_l+0xba8>)
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	f7f3 ff90 	bl	80009bc <__aeabi_dcmplt>
 800ca9c:	e79e      	b.n	800c9dc <_strtod_l+0xabc>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caa4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	f7ff ba77 	b.w	800bf9a <_strtod_l+0x7a>
 800caac:	2a65      	cmp	r2, #101	@ 0x65
 800caae:	f43f ab6e 	beq.w	800c18e <_strtod_l+0x26e>
 800cab2:	2a45      	cmp	r2, #69	@ 0x45
 800cab4:	f43f ab6b 	beq.w	800c18e <_strtod_l+0x26e>
 800cab8:	2301      	movs	r3, #1
 800caba:	f7ff bba6 	b.w	800c20a <_strtod_l+0x2ea>
 800cabe:	bf00      	nop
 800cac0:	ffc00000 	.word	0xffc00000
 800cac4:	41dfffff 	.word	0x41dfffff
 800cac8:	94a03595 	.word	0x94a03595
 800cacc:	3fcfffff 	.word	0x3fcfffff

0800cad0 <_strtod_r>:
 800cad0:	4b01      	ldr	r3, [pc, #4]	@ (800cad8 <_strtod_r+0x8>)
 800cad2:	f7ff ba25 	b.w	800bf20 <_strtod_l>
 800cad6:	bf00      	nop
 800cad8:	20000074 	.word	0x20000074

0800cadc <__ssputs_r>:
 800cadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cae0:	461f      	mov	r7, r3
 800cae2:	688e      	ldr	r6, [r1, #8]
 800cae4:	4682      	mov	sl, r0
 800cae6:	42be      	cmp	r6, r7
 800cae8:	460c      	mov	r4, r1
 800caea:	4690      	mov	r8, r2
 800caec:	680b      	ldr	r3, [r1, #0]
 800caee:	d82d      	bhi.n	800cb4c <__ssputs_r+0x70>
 800caf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800caf8:	d026      	beq.n	800cb48 <__ssputs_r+0x6c>
 800cafa:	6965      	ldr	r5, [r4, #20]
 800cafc:	6909      	ldr	r1, [r1, #16]
 800cafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb02:	eba3 0901 	sub.w	r9, r3, r1
 800cb06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb0a:	1c7b      	adds	r3, r7, #1
 800cb0c:	444b      	add	r3, r9
 800cb0e:	106d      	asrs	r5, r5, #1
 800cb10:	429d      	cmp	r5, r3
 800cb12:	bf38      	it	cc
 800cb14:	461d      	movcc	r5, r3
 800cb16:	0553      	lsls	r3, r2, #21
 800cb18:	d527      	bpl.n	800cb6a <__ssputs_r+0x8e>
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f7fe fcaa 	bl	800b474 <_malloc_r>
 800cb20:	4606      	mov	r6, r0
 800cb22:	b360      	cbz	r0, 800cb7e <__ssputs_r+0xa2>
 800cb24:	464a      	mov	r2, r9
 800cb26:	6921      	ldr	r1, [r4, #16]
 800cb28:	f7fd fdcd 	bl	800a6c6 <memcpy>
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb36:	81a3      	strh	r3, [r4, #12]
 800cb38:	6126      	str	r6, [r4, #16]
 800cb3a:	444e      	add	r6, r9
 800cb3c:	6026      	str	r6, [r4, #0]
 800cb3e:	463e      	mov	r6, r7
 800cb40:	6165      	str	r5, [r4, #20]
 800cb42:	eba5 0509 	sub.w	r5, r5, r9
 800cb46:	60a5      	str	r5, [r4, #8]
 800cb48:	42be      	cmp	r6, r7
 800cb4a:	d900      	bls.n	800cb4e <__ssputs_r+0x72>
 800cb4c:	463e      	mov	r6, r7
 800cb4e:	4632      	mov	r2, r6
 800cb50:	4641      	mov	r1, r8
 800cb52:	6820      	ldr	r0, [r4, #0]
 800cb54:	f000 fb63 	bl	800d21e <memmove>
 800cb58:	2000      	movs	r0, #0
 800cb5a:	68a3      	ldr	r3, [r4, #8]
 800cb5c:	1b9b      	subs	r3, r3, r6
 800cb5e:	60a3      	str	r3, [r4, #8]
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	4433      	add	r3, r6
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb6a:	462a      	mov	r2, r5
 800cb6c:	f000 ff27 	bl	800d9be <_realloc_r>
 800cb70:	4606      	mov	r6, r0
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d1e0      	bne.n	800cb38 <__ssputs_r+0x5c>
 800cb76:	4650      	mov	r0, sl
 800cb78:	6921      	ldr	r1, [r4, #16]
 800cb7a:	f7fe fc09 	bl	800b390 <_free_r>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	f8ca 3000 	str.w	r3, [sl]
 800cb84:	89a3      	ldrh	r3, [r4, #12]
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb8e:	81a3      	strh	r3, [r4, #12]
 800cb90:	e7e9      	b.n	800cb66 <__ssputs_r+0x8a>
	...

0800cb94 <_svfiprintf_r>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	4698      	mov	r8, r3
 800cb9a:	898b      	ldrh	r3, [r1, #12]
 800cb9c:	4607      	mov	r7, r0
 800cb9e:	061b      	lsls	r3, r3, #24
 800cba0:	460d      	mov	r5, r1
 800cba2:	4614      	mov	r4, r2
 800cba4:	b09d      	sub	sp, #116	@ 0x74
 800cba6:	d510      	bpl.n	800cbca <_svfiprintf_r+0x36>
 800cba8:	690b      	ldr	r3, [r1, #16]
 800cbaa:	b973      	cbnz	r3, 800cbca <_svfiprintf_r+0x36>
 800cbac:	2140      	movs	r1, #64	@ 0x40
 800cbae:	f7fe fc61 	bl	800b474 <_malloc_r>
 800cbb2:	6028      	str	r0, [r5, #0]
 800cbb4:	6128      	str	r0, [r5, #16]
 800cbb6:	b930      	cbnz	r0, 800cbc6 <_svfiprintf_r+0x32>
 800cbb8:	230c      	movs	r3, #12
 800cbba:	603b      	str	r3, [r7, #0]
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc0:	b01d      	add	sp, #116	@ 0x74
 800cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc6:	2340      	movs	r3, #64	@ 0x40
 800cbc8:	616b      	str	r3, [r5, #20]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbce:	2320      	movs	r3, #32
 800cbd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbd4:	2330      	movs	r3, #48	@ 0x30
 800cbd6:	f04f 0901 	mov.w	r9, #1
 800cbda:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cd78 <_svfiprintf_r+0x1e4>
 800cbe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbe6:	4623      	mov	r3, r4
 800cbe8:	469a      	mov	sl, r3
 800cbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbee:	b10a      	cbz	r2, 800cbf4 <_svfiprintf_r+0x60>
 800cbf0:	2a25      	cmp	r2, #37	@ 0x25
 800cbf2:	d1f9      	bne.n	800cbe8 <_svfiprintf_r+0x54>
 800cbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800cbf8:	d00b      	beq.n	800cc12 <_svfiprintf_r+0x7e>
 800cbfa:	465b      	mov	r3, fp
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4638      	mov	r0, r7
 800cc02:	f7ff ff6b 	bl	800cadc <__ssputs_r>
 800cc06:	3001      	adds	r0, #1
 800cc08:	f000 80a7 	beq.w	800cd5a <_svfiprintf_r+0x1c6>
 800cc0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc0e:	445a      	add	r2, fp
 800cc10:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc12:	f89a 3000 	ldrb.w	r3, [sl]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f000 809f 	beq.w	800cd5a <_svfiprintf_r+0x1c6>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc26:	f10a 0a01 	add.w	sl, sl, #1
 800cc2a:	9304      	str	r3, [sp, #16]
 800cc2c:	9307      	str	r3, [sp, #28]
 800cc2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc32:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc34:	4654      	mov	r4, sl
 800cc36:	2205      	movs	r2, #5
 800cc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc3c:	484e      	ldr	r0, [pc, #312]	@ (800cd78 <_svfiprintf_r+0x1e4>)
 800cc3e:	f7fd fd34 	bl	800a6aa <memchr>
 800cc42:	9a04      	ldr	r2, [sp, #16]
 800cc44:	b9d8      	cbnz	r0, 800cc7e <_svfiprintf_r+0xea>
 800cc46:	06d0      	lsls	r0, r2, #27
 800cc48:	bf44      	itt	mi
 800cc4a:	2320      	movmi	r3, #32
 800cc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc50:	0711      	lsls	r1, r2, #28
 800cc52:	bf44      	itt	mi
 800cc54:	232b      	movmi	r3, #43	@ 0x2b
 800cc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc60:	d015      	beq.n	800cc8e <_svfiprintf_r+0xfa>
 800cc62:	4654      	mov	r4, sl
 800cc64:	2000      	movs	r0, #0
 800cc66:	f04f 0c0a 	mov.w	ip, #10
 800cc6a:	9a07      	ldr	r2, [sp, #28]
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc72:	3b30      	subs	r3, #48	@ 0x30
 800cc74:	2b09      	cmp	r3, #9
 800cc76:	d94b      	bls.n	800cd10 <_svfiprintf_r+0x17c>
 800cc78:	b1b0      	cbz	r0, 800cca8 <_svfiprintf_r+0x114>
 800cc7a:	9207      	str	r2, [sp, #28]
 800cc7c:	e014      	b.n	800cca8 <_svfiprintf_r+0x114>
 800cc7e:	eba0 0308 	sub.w	r3, r0, r8
 800cc82:	fa09 f303 	lsl.w	r3, r9, r3
 800cc86:	4313      	orrs	r3, r2
 800cc88:	46a2      	mov	sl, r4
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	e7d2      	b.n	800cc34 <_svfiprintf_r+0xa0>
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	1d19      	adds	r1, r3, #4
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	9103      	str	r1, [sp, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	bfbb      	ittet	lt
 800cc9a:	425b      	neglt	r3, r3
 800cc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cca0:	9307      	strge	r3, [sp, #28]
 800cca2:	9307      	strlt	r3, [sp, #28]
 800cca4:	bfb8      	it	lt
 800cca6:	9204      	strlt	r2, [sp, #16]
 800cca8:	7823      	ldrb	r3, [r4, #0]
 800ccaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccac:	d10a      	bne.n	800ccc4 <_svfiprintf_r+0x130>
 800ccae:	7863      	ldrb	r3, [r4, #1]
 800ccb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccb2:	d132      	bne.n	800cd1a <_svfiprintf_r+0x186>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	3402      	adds	r4, #2
 800ccb8:	1d1a      	adds	r2, r3, #4
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	9203      	str	r2, [sp, #12]
 800ccbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccc2:	9305      	str	r3, [sp, #20]
 800ccc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cd7c <_svfiprintf_r+0x1e8>
 800ccc8:	2203      	movs	r2, #3
 800ccca:	4650      	mov	r0, sl
 800cccc:	7821      	ldrb	r1, [r4, #0]
 800ccce:	f7fd fcec 	bl	800a6aa <memchr>
 800ccd2:	b138      	cbz	r0, 800cce4 <_svfiprintf_r+0x150>
 800ccd4:	2240      	movs	r2, #64	@ 0x40
 800ccd6:	9b04      	ldr	r3, [sp, #16]
 800ccd8:	eba0 000a 	sub.w	r0, r0, sl
 800ccdc:	4082      	lsls	r2, r0
 800ccde:	4313      	orrs	r3, r2
 800cce0:	3401      	adds	r4, #1
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce8:	2206      	movs	r2, #6
 800ccea:	4825      	ldr	r0, [pc, #148]	@ (800cd80 <_svfiprintf_r+0x1ec>)
 800ccec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccf0:	f7fd fcdb 	bl	800a6aa <memchr>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d036      	beq.n	800cd66 <_svfiprintf_r+0x1d2>
 800ccf8:	4b22      	ldr	r3, [pc, #136]	@ (800cd84 <_svfiprintf_r+0x1f0>)
 800ccfa:	bb1b      	cbnz	r3, 800cd44 <_svfiprintf_r+0x1b0>
 800ccfc:	9b03      	ldr	r3, [sp, #12]
 800ccfe:	3307      	adds	r3, #7
 800cd00:	f023 0307 	bic.w	r3, r3, #7
 800cd04:	3308      	adds	r3, #8
 800cd06:	9303      	str	r3, [sp, #12]
 800cd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd0a:	4433      	add	r3, r6
 800cd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd0e:	e76a      	b.n	800cbe6 <_svfiprintf_r+0x52>
 800cd10:	460c      	mov	r4, r1
 800cd12:	2001      	movs	r0, #1
 800cd14:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd18:	e7a8      	b.n	800cc6c <_svfiprintf_r+0xd8>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f04f 0c0a 	mov.w	ip, #10
 800cd20:	4619      	mov	r1, r3
 800cd22:	3401      	adds	r4, #1
 800cd24:	9305      	str	r3, [sp, #20]
 800cd26:	4620      	mov	r0, r4
 800cd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd2c:	3a30      	subs	r2, #48	@ 0x30
 800cd2e:	2a09      	cmp	r2, #9
 800cd30:	d903      	bls.n	800cd3a <_svfiprintf_r+0x1a6>
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0c6      	beq.n	800ccc4 <_svfiprintf_r+0x130>
 800cd36:	9105      	str	r1, [sp, #20]
 800cd38:	e7c4      	b.n	800ccc4 <_svfiprintf_r+0x130>
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd42:	e7f0      	b.n	800cd26 <_svfiprintf_r+0x192>
 800cd44:	ab03      	add	r3, sp, #12
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	462a      	mov	r2, r5
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	4b0e      	ldr	r3, [pc, #56]	@ (800cd88 <_svfiprintf_r+0x1f4>)
 800cd4e:	a904      	add	r1, sp, #16
 800cd50:	f7fc fbcc 	bl	80094ec <_printf_float>
 800cd54:	1c42      	adds	r2, r0, #1
 800cd56:	4606      	mov	r6, r0
 800cd58:	d1d6      	bne.n	800cd08 <_svfiprintf_r+0x174>
 800cd5a:	89ab      	ldrh	r3, [r5, #12]
 800cd5c:	065b      	lsls	r3, r3, #25
 800cd5e:	f53f af2d 	bmi.w	800cbbc <_svfiprintf_r+0x28>
 800cd62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd64:	e72c      	b.n	800cbc0 <_svfiprintf_r+0x2c>
 800cd66:	ab03      	add	r3, sp, #12
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	462a      	mov	r2, r5
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	4b06      	ldr	r3, [pc, #24]	@ (800cd88 <_svfiprintf_r+0x1f4>)
 800cd70:	a904      	add	r1, sp, #16
 800cd72:	f7fc fe59 	bl	8009a28 <_printf_i>
 800cd76:	e7ed      	b.n	800cd54 <_svfiprintf_r+0x1c0>
 800cd78:	0800e0a8 	.word	0x0800e0a8
 800cd7c:	0800e0ae 	.word	0x0800e0ae
 800cd80:	0800e0b2 	.word	0x0800e0b2
 800cd84:	080094ed 	.word	0x080094ed
 800cd88:	0800cadd 	.word	0x0800cadd

0800cd8c <__sfputc_r>:
 800cd8c:	6893      	ldr	r3, [r2, #8]
 800cd8e:	b410      	push	{r4}
 800cd90:	3b01      	subs	r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	6093      	str	r3, [r2, #8]
 800cd96:	da07      	bge.n	800cda8 <__sfputc_r+0x1c>
 800cd98:	6994      	ldr	r4, [r2, #24]
 800cd9a:	42a3      	cmp	r3, r4
 800cd9c:	db01      	blt.n	800cda2 <__sfputc_r+0x16>
 800cd9e:	290a      	cmp	r1, #10
 800cda0:	d102      	bne.n	800cda8 <__sfputc_r+0x1c>
 800cda2:	bc10      	pop	{r4}
 800cda4:	f7fd bb05 	b.w	800a3b2 <__swbuf_r>
 800cda8:	6813      	ldr	r3, [r2, #0]
 800cdaa:	1c58      	adds	r0, r3, #1
 800cdac:	6010      	str	r0, [r2, #0]
 800cdae:	7019      	strb	r1, [r3, #0]
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	bc10      	pop	{r4}
 800cdb4:	4770      	bx	lr

0800cdb6 <__sfputs_r>:
 800cdb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb8:	4606      	mov	r6, r0
 800cdba:	460f      	mov	r7, r1
 800cdbc:	4614      	mov	r4, r2
 800cdbe:	18d5      	adds	r5, r2, r3
 800cdc0:	42ac      	cmp	r4, r5
 800cdc2:	d101      	bne.n	800cdc8 <__sfputs_r+0x12>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e007      	b.n	800cdd8 <__sfputs_r+0x22>
 800cdc8:	463a      	mov	r2, r7
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd0:	f7ff ffdc 	bl	800cd8c <__sfputc_r>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d1f3      	bne.n	800cdc0 <__sfputs_r+0xa>
 800cdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cddc <_vfiprintf_r>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	460d      	mov	r5, r1
 800cde2:	4614      	mov	r4, r2
 800cde4:	4698      	mov	r8, r3
 800cde6:	4606      	mov	r6, r0
 800cde8:	b09d      	sub	sp, #116	@ 0x74
 800cdea:	b118      	cbz	r0, 800cdf4 <_vfiprintf_r+0x18>
 800cdec:	6a03      	ldr	r3, [r0, #32]
 800cdee:	b90b      	cbnz	r3, 800cdf4 <_vfiprintf_r+0x18>
 800cdf0:	f7fd f9d6 	bl	800a1a0 <__sinit>
 800cdf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdf6:	07d9      	lsls	r1, r3, #31
 800cdf8:	d405      	bmi.n	800ce06 <_vfiprintf_r+0x2a>
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	059a      	lsls	r2, r3, #22
 800cdfe:	d402      	bmi.n	800ce06 <_vfiprintf_r+0x2a>
 800ce00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce02:	f7fd fc50 	bl	800a6a6 <__retarget_lock_acquire_recursive>
 800ce06:	89ab      	ldrh	r3, [r5, #12]
 800ce08:	071b      	lsls	r3, r3, #28
 800ce0a:	d501      	bpl.n	800ce10 <_vfiprintf_r+0x34>
 800ce0c:	692b      	ldr	r3, [r5, #16]
 800ce0e:	b99b      	cbnz	r3, 800ce38 <_vfiprintf_r+0x5c>
 800ce10:	4629      	mov	r1, r5
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7fd fb0c 	bl	800a430 <__swsetup_r>
 800ce18:	b170      	cbz	r0, 800ce38 <_vfiprintf_r+0x5c>
 800ce1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce1c:	07dc      	lsls	r4, r3, #31
 800ce1e:	d504      	bpl.n	800ce2a <_vfiprintf_r+0x4e>
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
 800ce24:	b01d      	add	sp, #116	@ 0x74
 800ce26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2a:	89ab      	ldrh	r3, [r5, #12]
 800ce2c:	0598      	lsls	r0, r3, #22
 800ce2e:	d4f7      	bmi.n	800ce20 <_vfiprintf_r+0x44>
 800ce30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce32:	f7fd fc39 	bl	800a6a8 <__retarget_lock_release_recursive>
 800ce36:	e7f3      	b.n	800ce20 <_vfiprintf_r+0x44>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce3c:	2320      	movs	r3, #32
 800ce3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce42:	2330      	movs	r3, #48	@ 0x30
 800ce44:	f04f 0901 	mov.w	r9, #1
 800ce48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cff8 <_vfiprintf_r+0x21c>
 800ce50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce54:	4623      	mov	r3, r4
 800ce56:	469a      	mov	sl, r3
 800ce58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce5c:	b10a      	cbz	r2, 800ce62 <_vfiprintf_r+0x86>
 800ce5e:	2a25      	cmp	r2, #37	@ 0x25
 800ce60:	d1f9      	bne.n	800ce56 <_vfiprintf_r+0x7a>
 800ce62:	ebba 0b04 	subs.w	fp, sl, r4
 800ce66:	d00b      	beq.n	800ce80 <_vfiprintf_r+0xa4>
 800ce68:	465b      	mov	r3, fp
 800ce6a:	4622      	mov	r2, r4
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ffa1 	bl	800cdb6 <__sfputs_r>
 800ce74:	3001      	adds	r0, #1
 800ce76:	f000 80a7 	beq.w	800cfc8 <_vfiprintf_r+0x1ec>
 800ce7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce7c:	445a      	add	r2, fp
 800ce7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce80:	f89a 3000 	ldrb.w	r3, [sl]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 809f 	beq.w	800cfc8 <_vfiprintf_r+0x1ec>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce94:	f10a 0a01 	add.w	sl, sl, #1
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	9307      	str	r3, [sp, #28]
 800ce9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cea0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cea2:	4654      	mov	r4, sl
 800cea4:	2205      	movs	r2, #5
 800cea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceaa:	4853      	ldr	r0, [pc, #332]	@ (800cff8 <_vfiprintf_r+0x21c>)
 800ceac:	f7fd fbfd 	bl	800a6aa <memchr>
 800ceb0:	9a04      	ldr	r2, [sp, #16]
 800ceb2:	b9d8      	cbnz	r0, 800ceec <_vfiprintf_r+0x110>
 800ceb4:	06d1      	lsls	r1, r2, #27
 800ceb6:	bf44      	itt	mi
 800ceb8:	2320      	movmi	r3, #32
 800ceba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cebe:	0713      	lsls	r3, r2, #28
 800cec0:	bf44      	itt	mi
 800cec2:	232b      	movmi	r3, #43	@ 0x2b
 800cec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cec8:	f89a 3000 	ldrb.w	r3, [sl]
 800cecc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cece:	d015      	beq.n	800cefc <_vfiprintf_r+0x120>
 800ced0:	4654      	mov	r4, sl
 800ced2:	2000      	movs	r0, #0
 800ced4:	f04f 0c0a 	mov.w	ip, #10
 800ced8:	9a07      	ldr	r2, [sp, #28]
 800ceda:	4621      	mov	r1, r4
 800cedc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cee0:	3b30      	subs	r3, #48	@ 0x30
 800cee2:	2b09      	cmp	r3, #9
 800cee4:	d94b      	bls.n	800cf7e <_vfiprintf_r+0x1a2>
 800cee6:	b1b0      	cbz	r0, 800cf16 <_vfiprintf_r+0x13a>
 800cee8:	9207      	str	r2, [sp, #28]
 800ceea:	e014      	b.n	800cf16 <_vfiprintf_r+0x13a>
 800ceec:	eba0 0308 	sub.w	r3, r0, r8
 800cef0:	fa09 f303 	lsl.w	r3, r9, r3
 800cef4:	4313      	orrs	r3, r2
 800cef6:	46a2      	mov	sl, r4
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	e7d2      	b.n	800cea2 <_vfiprintf_r+0xc6>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	1d19      	adds	r1, r3, #4
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	9103      	str	r1, [sp, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfbb      	ittet	lt
 800cf08:	425b      	neglt	r3, r3
 800cf0a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf0e:	9307      	strge	r3, [sp, #28]
 800cf10:	9307      	strlt	r3, [sp, #28]
 800cf12:	bfb8      	it	lt
 800cf14:	9204      	strlt	r2, [sp, #16]
 800cf16:	7823      	ldrb	r3, [r4, #0]
 800cf18:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf1a:	d10a      	bne.n	800cf32 <_vfiprintf_r+0x156>
 800cf1c:	7863      	ldrb	r3, [r4, #1]
 800cf1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf20:	d132      	bne.n	800cf88 <_vfiprintf_r+0x1ac>
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	3402      	adds	r4, #2
 800cf26:	1d1a      	adds	r2, r3, #4
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	9203      	str	r2, [sp, #12]
 800cf2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cffc <_vfiprintf_r+0x220>
 800cf36:	2203      	movs	r2, #3
 800cf38:	4650      	mov	r0, sl
 800cf3a:	7821      	ldrb	r1, [r4, #0]
 800cf3c:	f7fd fbb5 	bl	800a6aa <memchr>
 800cf40:	b138      	cbz	r0, 800cf52 <_vfiprintf_r+0x176>
 800cf42:	2240      	movs	r2, #64	@ 0x40
 800cf44:	9b04      	ldr	r3, [sp, #16]
 800cf46:	eba0 000a 	sub.w	r0, r0, sl
 800cf4a:	4082      	lsls	r2, r0
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	3401      	adds	r4, #1
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf56:	2206      	movs	r2, #6
 800cf58:	4829      	ldr	r0, [pc, #164]	@ (800d000 <_vfiprintf_r+0x224>)
 800cf5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf5e:	f7fd fba4 	bl	800a6aa <memchr>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d03f      	beq.n	800cfe6 <_vfiprintf_r+0x20a>
 800cf66:	4b27      	ldr	r3, [pc, #156]	@ (800d004 <_vfiprintf_r+0x228>)
 800cf68:	bb1b      	cbnz	r3, 800cfb2 <_vfiprintf_r+0x1d6>
 800cf6a:	9b03      	ldr	r3, [sp, #12]
 800cf6c:	3307      	adds	r3, #7
 800cf6e:	f023 0307 	bic.w	r3, r3, #7
 800cf72:	3308      	adds	r3, #8
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf78:	443b      	add	r3, r7
 800cf7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf7c:	e76a      	b.n	800ce54 <_vfiprintf_r+0x78>
 800cf7e:	460c      	mov	r4, r1
 800cf80:	2001      	movs	r0, #1
 800cf82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf86:	e7a8      	b.n	800ceda <_vfiprintf_r+0xfe>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f04f 0c0a 	mov.w	ip, #10
 800cf8e:	4619      	mov	r1, r3
 800cf90:	3401      	adds	r4, #1
 800cf92:	9305      	str	r3, [sp, #20]
 800cf94:	4620      	mov	r0, r4
 800cf96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf9a:	3a30      	subs	r2, #48	@ 0x30
 800cf9c:	2a09      	cmp	r2, #9
 800cf9e:	d903      	bls.n	800cfa8 <_vfiprintf_r+0x1cc>
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0c6      	beq.n	800cf32 <_vfiprintf_r+0x156>
 800cfa4:	9105      	str	r1, [sp, #20]
 800cfa6:	e7c4      	b.n	800cf32 <_vfiprintf_r+0x156>
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	2301      	movs	r3, #1
 800cfac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfb0:	e7f0      	b.n	800cf94 <_vfiprintf_r+0x1b8>
 800cfb2:	ab03      	add	r3, sp, #12
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	4630      	mov	r0, r6
 800cfba:	4b13      	ldr	r3, [pc, #76]	@ (800d008 <_vfiprintf_r+0x22c>)
 800cfbc:	a904      	add	r1, sp, #16
 800cfbe:	f7fc fa95 	bl	80094ec <_printf_float>
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	1c78      	adds	r0, r7, #1
 800cfc6:	d1d6      	bne.n	800cf76 <_vfiprintf_r+0x19a>
 800cfc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfca:	07d9      	lsls	r1, r3, #31
 800cfcc:	d405      	bmi.n	800cfda <_vfiprintf_r+0x1fe>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	059a      	lsls	r2, r3, #22
 800cfd2:	d402      	bmi.n	800cfda <_vfiprintf_r+0x1fe>
 800cfd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfd6:	f7fd fb67 	bl	800a6a8 <__retarget_lock_release_recursive>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	065b      	lsls	r3, r3, #25
 800cfde:	f53f af1f 	bmi.w	800ce20 <_vfiprintf_r+0x44>
 800cfe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfe4:	e71e      	b.n	800ce24 <_vfiprintf_r+0x48>
 800cfe6:	ab03      	add	r3, sp, #12
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4630      	mov	r0, r6
 800cfee:	4b06      	ldr	r3, [pc, #24]	@ (800d008 <_vfiprintf_r+0x22c>)
 800cff0:	a904      	add	r1, sp, #16
 800cff2:	f7fc fd19 	bl	8009a28 <_printf_i>
 800cff6:	e7e4      	b.n	800cfc2 <_vfiprintf_r+0x1e6>
 800cff8:	0800e0a8 	.word	0x0800e0a8
 800cffc:	0800e0ae 	.word	0x0800e0ae
 800d000:	0800e0b2 	.word	0x0800e0b2
 800d004:	080094ed 	.word	0x080094ed
 800d008:	0800cdb7 	.word	0x0800cdb7

0800d00c <__sflush_r>:
 800d00c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	0716      	lsls	r6, r2, #28
 800d014:	4605      	mov	r5, r0
 800d016:	460c      	mov	r4, r1
 800d018:	d454      	bmi.n	800d0c4 <__sflush_r+0xb8>
 800d01a:	684b      	ldr	r3, [r1, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dc02      	bgt.n	800d026 <__sflush_r+0x1a>
 800d020:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d022:	2b00      	cmp	r3, #0
 800d024:	dd48      	ble.n	800d0b8 <__sflush_r+0xac>
 800d026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d028:	2e00      	cmp	r6, #0
 800d02a:	d045      	beq.n	800d0b8 <__sflush_r+0xac>
 800d02c:	2300      	movs	r3, #0
 800d02e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d032:	682f      	ldr	r7, [r5, #0]
 800d034:	6a21      	ldr	r1, [r4, #32]
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	d030      	beq.n	800d09c <__sflush_r+0x90>
 800d03a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	0759      	lsls	r1, r3, #29
 800d040:	d505      	bpl.n	800d04e <__sflush_r+0x42>
 800d042:	6863      	ldr	r3, [r4, #4]
 800d044:	1ad2      	subs	r2, r2, r3
 800d046:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d048:	b10b      	cbz	r3, 800d04e <__sflush_r+0x42>
 800d04a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d04c:	1ad2      	subs	r2, r2, r3
 800d04e:	2300      	movs	r3, #0
 800d050:	4628      	mov	r0, r5
 800d052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d054:	6a21      	ldr	r1, [r4, #32]
 800d056:	47b0      	blx	r6
 800d058:	1c43      	adds	r3, r0, #1
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	d106      	bne.n	800d06c <__sflush_r+0x60>
 800d05e:	6829      	ldr	r1, [r5, #0]
 800d060:	291d      	cmp	r1, #29
 800d062:	d82b      	bhi.n	800d0bc <__sflush_r+0xb0>
 800d064:	4a28      	ldr	r2, [pc, #160]	@ (800d108 <__sflush_r+0xfc>)
 800d066:	410a      	asrs	r2, r1
 800d068:	07d6      	lsls	r6, r2, #31
 800d06a:	d427      	bmi.n	800d0bc <__sflush_r+0xb0>
 800d06c:	2200      	movs	r2, #0
 800d06e:	6062      	str	r2, [r4, #4]
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	04d9      	lsls	r1, r3, #19
 800d074:	6022      	str	r2, [r4, #0]
 800d076:	d504      	bpl.n	800d082 <__sflush_r+0x76>
 800d078:	1c42      	adds	r2, r0, #1
 800d07a:	d101      	bne.n	800d080 <__sflush_r+0x74>
 800d07c:	682b      	ldr	r3, [r5, #0]
 800d07e:	b903      	cbnz	r3, 800d082 <__sflush_r+0x76>
 800d080:	6560      	str	r0, [r4, #84]	@ 0x54
 800d082:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d084:	602f      	str	r7, [r5, #0]
 800d086:	b1b9      	cbz	r1, 800d0b8 <__sflush_r+0xac>
 800d088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d08c:	4299      	cmp	r1, r3
 800d08e:	d002      	beq.n	800d096 <__sflush_r+0x8a>
 800d090:	4628      	mov	r0, r5
 800d092:	f7fe f97d 	bl	800b390 <_free_r>
 800d096:	2300      	movs	r3, #0
 800d098:	6363      	str	r3, [r4, #52]	@ 0x34
 800d09a:	e00d      	b.n	800d0b8 <__sflush_r+0xac>
 800d09c:	2301      	movs	r3, #1
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b0      	blx	r6
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	1c50      	adds	r0, r2, #1
 800d0a6:	d1c9      	bne.n	800d03c <__sflush_r+0x30>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0c6      	beq.n	800d03c <__sflush_r+0x30>
 800d0ae:	2b1d      	cmp	r3, #29
 800d0b0:	d001      	beq.n	800d0b6 <__sflush_r+0xaa>
 800d0b2:	2b16      	cmp	r3, #22
 800d0b4:	d11d      	bne.n	800d0f2 <__sflush_r+0xe6>
 800d0b6:	602f      	str	r7, [r5, #0]
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	e021      	b.n	800d100 <__sflush_r+0xf4>
 800d0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0c0:	b21b      	sxth	r3, r3
 800d0c2:	e01a      	b.n	800d0fa <__sflush_r+0xee>
 800d0c4:	690f      	ldr	r7, [r1, #16]
 800d0c6:	2f00      	cmp	r7, #0
 800d0c8:	d0f6      	beq.n	800d0b8 <__sflush_r+0xac>
 800d0ca:	0793      	lsls	r3, r2, #30
 800d0cc:	bf18      	it	ne
 800d0ce:	2300      	movne	r3, #0
 800d0d0:	680e      	ldr	r6, [r1, #0]
 800d0d2:	bf08      	it	eq
 800d0d4:	694b      	ldreq	r3, [r1, #20]
 800d0d6:	1bf6      	subs	r6, r6, r7
 800d0d8:	600f      	str	r7, [r1, #0]
 800d0da:	608b      	str	r3, [r1, #8]
 800d0dc:	2e00      	cmp	r6, #0
 800d0de:	ddeb      	ble.n	800d0b8 <__sflush_r+0xac>
 800d0e0:	4633      	mov	r3, r6
 800d0e2:	463a      	mov	r2, r7
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d0ec:	47e0      	blx	ip
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	dc07      	bgt.n	800d102 <__sflush_r+0xf6>
 800d0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d102:	4407      	add	r7, r0
 800d104:	1a36      	subs	r6, r6, r0
 800d106:	e7e9      	b.n	800d0dc <__sflush_r+0xd0>
 800d108:	dfbffffe 	.word	0xdfbffffe

0800d10c <_fflush_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	690b      	ldr	r3, [r1, #16]
 800d110:	4605      	mov	r5, r0
 800d112:	460c      	mov	r4, r1
 800d114:	b913      	cbnz	r3, 800d11c <_fflush_r+0x10>
 800d116:	2500      	movs	r5, #0
 800d118:	4628      	mov	r0, r5
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	b118      	cbz	r0, 800d126 <_fflush_r+0x1a>
 800d11e:	6a03      	ldr	r3, [r0, #32]
 800d120:	b90b      	cbnz	r3, 800d126 <_fflush_r+0x1a>
 800d122:	f7fd f83d 	bl	800a1a0 <__sinit>
 800d126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0f3      	beq.n	800d116 <_fflush_r+0xa>
 800d12e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d130:	07d0      	lsls	r0, r2, #31
 800d132:	d404      	bmi.n	800d13e <_fflush_r+0x32>
 800d134:	0599      	lsls	r1, r3, #22
 800d136:	d402      	bmi.n	800d13e <_fflush_r+0x32>
 800d138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d13a:	f7fd fab4 	bl	800a6a6 <__retarget_lock_acquire_recursive>
 800d13e:	4628      	mov	r0, r5
 800d140:	4621      	mov	r1, r4
 800d142:	f7ff ff63 	bl	800d00c <__sflush_r>
 800d146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d148:	4605      	mov	r5, r0
 800d14a:	07da      	lsls	r2, r3, #31
 800d14c:	d4e4      	bmi.n	800d118 <_fflush_r+0xc>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	059b      	lsls	r3, r3, #22
 800d152:	d4e1      	bmi.n	800d118 <_fflush_r+0xc>
 800d154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d156:	f7fd faa7 	bl	800a6a8 <__retarget_lock_release_recursive>
 800d15a:	e7dd      	b.n	800d118 <_fflush_r+0xc>

0800d15c <__swhatbuf_r>:
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	460c      	mov	r4, r1
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	4615      	mov	r5, r2
 800d166:	2900      	cmp	r1, #0
 800d168:	461e      	mov	r6, r3
 800d16a:	b096      	sub	sp, #88	@ 0x58
 800d16c:	da0c      	bge.n	800d188 <__swhatbuf_r+0x2c>
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	2100      	movs	r1, #0
 800d172:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d176:	bf14      	ite	ne
 800d178:	2340      	movne	r3, #64	@ 0x40
 800d17a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d17e:	2000      	movs	r0, #0
 800d180:	6031      	str	r1, [r6, #0]
 800d182:	602b      	str	r3, [r5, #0]
 800d184:	b016      	add	sp, #88	@ 0x58
 800d186:	bd70      	pop	{r4, r5, r6, pc}
 800d188:	466a      	mov	r2, sp
 800d18a:	f000 f863 	bl	800d254 <_fstat_r>
 800d18e:	2800      	cmp	r0, #0
 800d190:	dbed      	blt.n	800d16e <__swhatbuf_r+0x12>
 800d192:	9901      	ldr	r1, [sp, #4]
 800d194:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d198:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d19c:	4259      	negs	r1, r3
 800d19e:	4159      	adcs	r1, r3
 800d1a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1a4:	e7eb      	b.n	800d17e <__swhatbuf_r+0x22>

0800d1a6 <__smakebuf_r>:
 800d1a6:	898b      	ldrh	r3, [r1, #12]
 800d1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1aa:	079d      	lsls	r5, r3, #30
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	d507      	bpl.n	800d1c2 <__smakebuf_r+0x1c>
 800d1b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1b6:	6023      	str	r3, [r4, #0]
 800d1b8:	6123      	str	r3, [r4, #16]
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	6163      	str	r3, [r4, #20]
 800d1be:	b003      	add	sp, #12
 800d1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c2:	466a      	mov	r2, sp
 800d1c4:	ab01      	add	r3, sp, #4
 800d1c6:	f7ff ffc9 	bl	800d15c <__swhatbuf_r>
 800d1ca:	9f00      	ldr	r7, [sp, #0]
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	4639      	mov	r1, r7
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f7fe f94f 	bl	800b474 <_malloc_r>
 800d1d6:	b948      	cbnz	r0, 800d1ec <__smakebuf_r+0x46>
 800d1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1dc:	059a      	lsls	r2, r3, #22
 800d1de:	d4ee      	bmi.n	800d1be <__smakebuf_r+0x18>
 800d1e0:	f023 0303 	bic.w	r3, r3, #3
 800d1e4:	f043 0302 	orr.w	r3, r3, #2
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	e7e2      	b.n	800d1b2 <__smakebuf_r+0xc>
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	9b01      	ldr	r3, [sp, #4]
 800d1fa:	6020      	str	r0, [r4, #0]
 800d1fc:	b15b      	cbz	r3, 800d216 <__smakebuf_r+0x70>
 800d1fe:	4630      	mov	r0, r6
 800d200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d204:	f000 f838 	bl	800d278 <_isatty_r>
 800d208:	b128      	cbz	r0, 800d216 <__smakebuf_r+0x70>
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	f023 0303 	bic.w	r3, r3, #3
 800d210:	f043 0301 	orr.w	r3, r3, #1
 800d214:	81a3      	strh	r3, [r4, #12]
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	431d      	orrs	r5, r3
 800d21a:	81a5      	strh	r5, [r4, #12]
 800d21c:	e7cf      	b.n	800d1be <__smakebuf_r+0x18>

0800d21e <memmove>:
 800d21e:	4288      	cmp	r0, r1
 800d220:	b510      	push	{r4, lr}
 800d222:	eb01 0402 	add.w	r4, r1, r2
 800d226:	d902      	bls.n	800d22e <memmove+0x10>
 800d228:	4284      	cmp	r4, r0
 800d22a:	4623      	mov	r3, r4
 800d22c:	d807      	bhi.n	800d23e <memmove+0x20>
 800d22e:	1e43      	subs	r3, r0, #1
 800d230:	42a1      	cmp	r1, r4
 800d232:	d008      	beq.n	800d246 <memmove+0x28>
 800d234:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d238:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d23c:	e7f8      	b.n	800d230 <memmove+0x12>
 800d23e:	4601      	mov	r1, r0
 800d240:	4402      	add	r2, r0
 800d242:	428a      	cmp	r2, r1
 800d244:	d100      	bne.n	800d248 <memmove+0x2a>
 800d246:	bd10      	pop	{r4, pc}
 800d248:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d24c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d250:	e7f7      	b.n	800d242 <memmove+0x24>
	...

0800d254 <_fstat_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	2300      	movs	r3, #0
 800d258:	4d06      	ldr	r5, [pc, #24]	@ (800d274 <_fstat_r+0x20>)
 800d25a:	4604      	mov	r4, r0
 800d25c:	4608      	mov	r0, r1
 800d25e:	4611      	mov	r1, r2
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	f7f4 fd65 	bl	8001d30 <_fstat>
 800d266:	1c43      	adds	r3, r0, #1
 800d268:	d102      	bne.n	800d270 <_fstat_r+0x1c>
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	b103      	cbz	r3, 800d270 <_fstat_r+0x1c>
 800d26e:	6023      	str	r3, [r4, #0]
 800d270:	bd38      	pop	{r3, r4, r5, pc}
 800d272:	bf00      	nop
 800d274:	20001f50 	.word	0x20001f50

0800d278 <_isatty_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	2300      	movs	r3, #0
 800d27c:	4d05      	ldr	r5, [pc, #20]	@ (800d294 <_isatty_r+0x1c>)
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	602b      	str	r3, [r5, #0]
 800d284:	f7f4 fd63 	bl	8001d4e <_isatty>
 800d288:	1c43      	adds	r3, r0, #1
 800d28a:	d102      	bne.n	800d292 <_isatty_r+0x1a>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	b103      	cbz	r3, 800d292 <_isatty_r+0x1a>
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	bd38      	pop	{r3, r4, r5, pc}
 800d294:	20001f50 	.word	0x20001f50

0800d298 <_sbrk_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	2300      	movs	r3, #0
 800d29c:	4d05      	ldr	r5, [pc, #20]	@ (800d2b4 <_sbrk_r+0x1c>)
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	602b      	str	r3, [r5, #0]
 800d2a4:	f7f4 fd6a 	bl	8001d7c <_sbrk>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_sbrk_r+0x1a>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_sbrk_r+0x1a>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	20001f50 	.word	0x20001f50

0800d2b8 <nan>:
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	4901      	ldr	r1, [pc, #4]	@ (800d2c0 <nan+0x8>)
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	7ff80000 	.word	0x7ff80000

0800d2c4 <__assert_func>:
 800d2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2c6:	4614      	mov	r4, r2
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	4b09      	ldr	r3, [pc, #36]	@ (800d2f0 <__assert_func+0x2c>)
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68d8      	ldr	r0, [r3, #12]
 800d2d2:	b954      	cbnz	r4, 800d2ea <__assert_func+0x26>
 800d2d4:	4b07      	ldr	r3, [pc, #28]	@ (800d2f4 <__assert_func+0x30>)
 800d2d6:	461c      	mov	r4, r3
 800d2d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2dc:	9100      	str	r1, [sp, #0]
 800d2de:	462b      	mov	r3, r5
 800d2e0:	4905      	ldr	r1, [pc, #20]	@ (800d2f8 <__assert_func+0x34>)
 800d2e2:	f000 fba7 	bl	800da34 <fiprintf>
 800d2e6:	f000 fbb7 	bl	800da58 <abort>
 800d2ea:	4b04      	ldr	r3, [pc, #16]	@ (800d2fc <__assert_func+0x38>)
 800d2ec:	e7f4      	b.n	800d2d8 <__assert_func+0x14>
 800d2ee:	bf00      	nop
 800d2f0:	20000024 	.word	0x20000024
 800d2f4:	0800e0fc 	.word	0x0800e0fc
 800d2f8:	0800e0ce 	.word	0x0800e0ce
 800d2fc:	0800e0c1 	.word	0x0800e0c1

0800d300 <_calloc_r>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	fba1 5402 	umull	r5, r4, r1, r2
 800d306:	b93c      	cbnz	r4, 800d318 <_calloc_r+0x18>
 800d308:	4629      	mov	r1, r5
 800d30a:	f7fe f8b3 	bl	800b474 <_malloc_r>
 800d30e:	4606      	mov	r6, r0
 800d310:	b928      	cbnz	r0, 800d31e <_calloc_r+0x1e>
 800d312:	2600      	movs	r6, #0
 800d314:	4630      	mov	r0, r6
 800d316:	bd70      	pop	{r4, r5, r6, pc}
 800d318:	220c      	movs	r2, #12
 800d31a:	6002      	str	r2, [r0, #0]
 800d31c:	e7f9      	b.n	800d312 <_calloc_r+0x12>
 800d31e:	462a      	mov	r2, r5
 800d320:	4621      	mov	r1, r4
 800d322:	f7fd f8db 	bl	800a4dc <memset>
 800d326:	e7f5      	b.n	800d314 <_calloc_r+0x14>

0800d328 <rshift>:
 800d328:	6903      	ldr	r3, [r0, #16]
 800d32a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d32e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d332:	f100 0414 	add.w	r4, r0, #20
 800d336:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d33a:	dd46      	ble.n	800d3ca <rshift+0xa2>
 800d33c:	f011 011f 	ands.w	r1, r1, #31
 800d340:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d344:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d348:	d10c      	bne.n	800d364 <rshift+0x3c>
 800d34a:	4629      	mov	r1, r5
 800d34c:	f100 0710 	add.w	r7, r0, #16
 800d350:	42b1      	cmp	r1, r6
 800d352:	d335      	bcc.n	800d3c0 <rshift+0x98>
 800d354:	1a9b      	subs	r3, r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	1eea      	subs	r2, r5, #3
 800d35a:	4296      	cmp	r6, r2
 800d35c:	bf38      	it	cc
 800d35e:	2300      	movcc	r3, #0
 800d360:	4423      	add	r3, r4
 800d362:	e015      	b.n	800d390 <rshift+0x68>
 800d364:	46a1      	mov	r9, r4
 800d366:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d36a:	f1c1 0820 	rsb	r8, r1, #32
 800d36e:	40cf      	lsrs	r7, r1
 800d370:	f105 0e04 	add.w	lr, r5, #4
 800d374:	4576      	cmp	r6, lr
 800d376:	46f4      	mov	ip, lr
 800d378:	d816      	bhi.n	800d3a8 <rshift+0x80>
 800d37a:	1a9a      	subs	r2, r3, r2
 800d37c:	0092      	lsls	r2, r2, #2
 800d37e:	3a04      	subs	r2, #4
 800d380:	3501      	adds	r5, #1
 800d382:	42ae      	cmp	r6, r5
 800d384:	bf38      	it	cc
 800d386:	2200      	movcc	r2, #0
 800d388:	18a3      	adds	r3, r4, r2
 800d38a:	50a7      	str	r7, [r4, r2]
 800d38c:	b107      	cbz	r7, 800d390 <rshift+0x68>
 800d38e:	3304      	adds	r3, #4
 800d390:	42a3      	cmp	r3, r4
 800d392:	eba3 0204 	sub.w	r2, r3, r4
 800d396:	bf08      	it	eq
 800d398:	2300      	moveq	r3, #0
 800d39a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d39e:	6102      	str	r2, [r0, #16]
 800d3a0:	bf08      	it	eq
 800d3a2:	6143      	streq	r3, [r0, #20]
 800d3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3a8:	f8dc c000 	ldr.w	ip, [ip]
 800d3ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800d3b0:	ea4c 0707 	orr.w	r7, ip, r7
 800d3b4:	f849 7b04 	str.w	r7, [r9], #4
 800d3b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d3bc:	40cf      	lsrs	r7, r1
 800d3be:	e7d9      	b.n	800d374 <rshift+0x4c>
 800d3c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800d3c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800d3c8:	e7c2      	b.n	800d350 <rshift+0x28>
 800d3ca:	4623      	mov	r3, r4
 800d3cc:	e7e0      	b.n	800d390 <rshift+0x68>

0800d3ce <__hexdig_fun>:
 800d3ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d3d2:	2b09      	cmp	r3, #9
 800d3d4:	d802      	bhi.n	800d3dc <__hexdig_fun+0xe>
 800d3d6:	3820      	subs	r0, #32
 800d3d8:	b2c0      	uxtb	r0, r0
 800d3da:	4770      	bx	lr
 800d3dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d3e0:	2b05      	cmp	r3, #5
 800d3e2:	d801      	bhi.n	800d3e8 <__hexdig_fun+0x1a>
 800d3e4:	3847      	subs	r0, #71	@ 0x47
 800d3e6:	e7f7      	b.n	800d3d8 <__hexdig_fun+0xa>
 800d3e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d3ec:	2b05      	cmp	r3, #5
 800d3ee:	d801      	bhi.n	800d3f4 <__hexdig_fun+0x26>
 800d3f0:	3827      	subs	r0, #39	@ 0x27
 800d3f2:	e7f1      	b.n	800d3d8 <__hexdig_fun+0xa>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	4770      	bx	lr

0800d3f8 <__gethex>:
 800d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	468a      	mov	sl, r1
 800d3fe:	4690      	mov	r8, r2
 800d400:	b085      	sub	sp, #20
 800d402:	9302      	str	r3, [sp, #8]
 800d404:	680b      	ldr	r3, [r1, #0]
 800d406:	9001      	str	r0, [sp, #4]
 800d408:	1c9c      	adds	r4, r3, #2
 800d40a:	46a1      	mov	r9, r4
 800d40c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d410:	2830      	cmp	r0, #48	@ 0x30
 800d412:	d0fa      	beq.n	800d40a <__gethex+0x12>
 800d414:	eba9 0303 	sub.w	r3, r9, r3
 800d418:	f1a3 0b02 	sub.w	fp, r3, #2
 800d41c:	f7ff ffd7 	bl	800d3ce <__hexdig_fun>
 800d420:	4605      	mov	r5, r0
 800d422:	2800      	cmp	r0, #0
 800d424:	d168      	bne.n	800d4f8 <__gethex+0x100>
 800d426:	2201      	movs	r2, #1
 800d428:	4648      	mov	r0, r9
 800d42a:	499f      	ldr	r1, [pc, #636]	@ (800d6a8 <__gethex+0x2b0>)
 800d42c:	f7fd f85e 	bl	800a4ec <strncmp>
 800d430:	4607      	mov	r7, r0
 800d432:	2800      	cmp	r0, #0
 800d434:	d167      	bne.n	800d506 <__gethex+0x10e>
 800d436:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d43a:	4626      	mov	r6, r4
 800d43c:	f7ff ffc7 	bl	800d3ce <__hexdig_fun>
 800d440:	2800      	cmp	r0, #0
 800d442:	d062      	beq.n	800d50a <__gethex+0x112>
 800d444:	4623      	mov	r3, r4
 800d446:	7818      	ldrb	r0, [r3, #0]
 800d448:	4699      	mov	r9, r3
 800d44a:	2830      	cmp	r0, #48	@ 0x30
 800d44c:	f103 0301 	add.w	r3, r3, #1
 800d450:	d0f9      	beq.n	800d446 <__gethex+0x4e>
 800d452:	f7ff ffbc 	bl	800d3ce <__hexdig_fun>
 800d456:	fab0 f580 	clz	r5, r0
 800d45a:	f04f 0b01 	mov.w	fp, #1
 800d45e:	096d      	lsrs	r5, r5, #5
 800d460:	464a      	mov	r2, r9
 800d462:	4616      	mov	r6, r2
 800d464:	7830      	ldrb	r0, [r6, #0]
 800d466:	3201      	adds	r2, #1
 800d468:	f7ff ffb1 	bl	800d3ce <__hexdig_fun>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d1f8      	bne.n	800d462 <__gethex+0x6a>
 800d470:	2201      	movs	r2, #1
 800d472:	4630      	mov	r0, r6
 800d474:	498c      	ldr	r1, [pc, #560]	@ (800d6a8 <__gethex+0x2b0>)
 800d476:	f7fd f839 	bl	800a4ec <strncmp>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d13f      	bne.n	800d4fe <__gethex+0x106>
 800d47e:	b944      	cbnz	r4, 800d492 <__gethex+0x9a>
 800d480:	1c74      	adds	r4, r6, #1
 800d482:	4622      	mov	r2, r4
 800d484:	4616      	mov	r6, r2
 800d486:	7830      	ldrb	r0, [r6, #0]
 800d488:	3201      	adds	r2, #1
 800d48a:	f7ff ffa0 	bl	800d3ce <__hexdig_fun>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d1f8      	bne.n	800d484 <__gethex+0x8c>
 800d492:	1ba4      	subs	r4, r4, r6
 800d494:	00a7      	lsls	r7, r4, #2
 800d496:	7833      	ldrb	r3, [r6, #0]
 800d498:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d49c:	2b50      	cmp	r3, #80	@ 0x50
 800d49e:	d13e      	bne.n	800d51e <__gethex+0x126>
 800d4a0:	7873      	ldrb	r3, [r6, #1]
 800d4a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800d4a4:	d033      	beq.n	800d50e <__gethex+0x116>
 800d4a6:	2b2d      	cmp	r3, #45	@ 0x2d
 800d4a8:	d034      	beq.n	800d514 <__gethex+0x11c>
 800d4aa:	2400      	movs	r4, #0
 800d4ac:	1c71      	adds	r1, r6, #1
 800d4ae:	7808      	ldrb	r0, [r1, #0]
 800d4b0:	f7ff ff8d 	bl	800d3ce <__hexdig_fun>
 800d4b4:	1e43      	subs	r3, r0, #1
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b18      	cmp	r3, #24
 800d4ba:	d830      	bhi.n	800d51e <__gethex+0x126>
 800d4bc:	f1a0 0210 	sub.w	r2, r0, #16
 800d4c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d4c4:	f7ff ff83 	bl	800d3ce <__hexdig_fun>
 800d4c8:	f100 3cff 	add.w	ip, r0, #4294967295
 800d4cc:	fa5f fc8c 	uxtb.w	ip, ip
 800d4d0:	f1bc 0f18 	cmp.w	ip, #24
 800d4d4:	f04f 030a 	mov.w	r3, #10
 800d4d8:	d91e      	bls.n	800d518 <__gethex+0x120>
 800d4da:	b104      	cbz	r4, 800d4de <__gethex+0xe6>
 800d4dc:	4252      	negs	r2, r2
 800d4de:	4417      	add	r7, r2
 800d4e0:	f8ca 1000 	str.w	r1, [sl]
 800d4e4:	b1ed      	cbz	r5, 800d522 <__gethex+0x12a>
 800d4e6:	f1bb 0f00 	cmp.w	fp, #0
 800d4ea:	bf0c      	ite	eq
 800d4ec:	2506      	moveq	r5, #6
 800d4ee:	2500      	movne	r5, #0
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	b005      	add	sp, #20
 800d4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f8:	2500      	movs	r5, #0
 800d4fa:	462c      	mov	r4, r5
 800d4fc:	e7b0      	b.n	800d460 <__gethex+0x68>
 800d4fe:	2c00      	cmp	r4, #0
 800d500:	d1c7      	bne.n	800d492 <__gethex+0x9a>
 800d502:	4627      	mov	r7, r4
 800d504:	e7c7      	b.n	800d496 <__gethex+0x9e>
 800d506:	464e      	mov	r6, r9
 800d508:	462f      	mov	r7, r5
 800d50a:	2501      	movs	r5, #1
 800d50c:	e7c3      	b.n	800d496 <__gethex+0x9e>
 800d50e:	2400      	movs	r4, #0
 800d510:	1cb1      	adds	r1, r6, #2
 800d512:	e7cc      	b.n	800d4ae <__gethex+0xb6>
 800d514:	2401      	movs	r4, #1
 800d516:	e7fb      	b.n	800d510 <__gethex+0x118>
 800d518:	fb03 0002 	mla	r0, r3, r2, r0
 800d51c:	e7ce      	b.n	800d4bc <__gethex+0xc4>
 800d51e:	4631      	mov	r1, r6
 800d520:	e7de      	b.n	800d4e0 <__gethex+0xe8>
 800d522:	4629      	mov	r1, r5
 800d524:	eba6 0309 	sub.w	r3, r6, r9
 800d528:	3b01      	subs	r3, #1
 800d52a:	2b07      	cmp	r3, #7
 800d52c:	dc0a      	bgt.n	800d544 <__gethex+0x14c>
 800d52e:	9801      	ldr	r0, [sp, #4]
 800d530:	f7fe f82c 	bl	800b58c <_Balloc>
 800d534:	4604      	mov	r4, r0
 800d536:	b940      	cbnz	r0, 800d54a <__gethex+0x152>
 800d538:	4602      	mov	r2, r0
 800d53a:	21e4      	movs	r1, #228	@ 0xe4
 800d53c:	4b5b      	ldr	r3, [pc, #364]	@ (800d6ac <__gethex+0x2b4>)
 800d53e:	485c      	ldr	r0, [pc, #368]	@ (800d6b0 <__gethex+0x2b8>)
 800d540:	f7ff fec0 	bl	800d2c4 <__assert_func>
 800d544:	3101      	adds	r1, #1
 800d546:	105b      	asrs	r3, r3, #1
 800d548:	e7ef      	b.n	800d52a <__gethex+0x132>
 800d54a:	2300      	movs	r3, #0
 800d54c:	f100 0a14 	add.w	sl, r0, #20
 800d550:	4655      	mov	r5, sl
 800d552:	469b      	mov	fp, r3
 800d554:	45b1      	cmp	r9, r6
 800d556:	d337      	bcc.n	800d5c8 <__gethex+0x1d0>
 800d558:	f845 bb04 	str.w	fp, [r5], #4
 800d55c:	eba5 050a 	sub.w	r5, r5, sl
 800d560:	10ad      	asrs	r5, r5, #2
 800d562:	6125      	str	r5, [r4, #16]
 800d564:	4658      	mov	r0, fp
 800d566:	f7fe f903 	bl	800b770 <__hi0bits>
 800d56a:	016d      	lsls	r5, r5, #5
 800d56c:	f8d8 6000 	ldr.w	r6, [r8]
 800d570:	1a2d      	subs	r5, r5, r0
 800d572:	42b5      	cmp	r5, r6
 800d574:	dd54      	ble.n	800d620 <__gethex+0x228>
 800d576:	1bad      	subs	r5, r5, r6
 800d578:	4629      	mov	r1, r5
 800d57a:	4620      	mov	r0, r4
 800d57c:	f7fe fc8b 	bl	800be96 <__any_on>
 800d580:	4681      	mov	r9, r0
 800d582:	b178      	cbz	r0, 800d5a4 <__gethex+0x1ac>
 800d584:	f04f 0901 	mov.w	r9, #1
 800d588:	1e6b      	subs	r3, r5, #1
 800d58a:	1159      	asrs	r1, r3, #5
 800d58c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d590:	f003 021f 	and.w	r2, r3, #31
 800d594:	fa09 f202 	lsl.w	r2, r9, r2
 800d598:	420a      	tst	r2, r1
 800d59a:	d003      	beq.n	800d5a4 <__gethex+0x1ac>
 800d59c:	454b      	cmp	r3, r9
 800d59e:	dc36      	bgt.n	800d60e <__gethex+0x216>
 800d5a0:	f04f 0902 	mov.w	r9, #2
 800d5a4:	4629      	mov	r1, r5
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f7ff febe 	bl	800d328 <rshift>
 800d5ac:	442f      	add	r7, r5
 800d5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5b2:	42bb      	cmp	r3, r7
 800d5b4:	da42      	bge.n	800d63c <__gethex+0x244>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	9801      	ldr	r0, [sp, #4]
 800d5ba:	f7fe f827 	bl	800b60c <_Bfree>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5c2:	25a3      	movs	r5, #163	@ 0xa3
 800d5c4:	6013      	str	r3, [r2, #0]
 800d5c6:	e793      	b.n	800d4f0 <__gethex+0xf8>
 800d5c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d5cc:	2a2e      	cmp	r2, #46	@ 0x2e
 800d5ce:	d012      	beq.n	800d5f6 <__gethex+0x1fe>
 800d5d0:	2b20      	cmp	r3, #32
 800d5d2:	d104      	bne.n	800d5de <__gethex+0x1e6>
 800d5d4:	f845 bb04 	str.w	fp, [r5], #4
 800d5d8:	f04f 0b00 	mov.w	fp, #0
 800d5dc:	465b      	mov	r3, fp
 800d5de:	7830      	ldrb	r0, [r6, #0]
 800d5e0:	9303      	str	r3, [sp, #12]
 800d5e2:	f7ff fef4 	bl	800d3ce <__hexdig_fun>
 800d5e6:	9b03      	ldr	r3, [sp, #12]
 800d5e8:	f000 000f 	and.w	r0, r0, #15
 800d5ec:	4098      	lsls	r0, r3
 800d5ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	e7ae      	b.n	800d554 <__gethex+0x15c>
 800d5f6:	45b1      	cmp	r9, r6
 800d5f8:	d8ea      	bhi.n	800d5d0 <__gethex+0x1d8>
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	492a      	ldr	r1, [pc, #168]	@ (800d6a8 <__gethex+0x2b0>)
 800d600:	9303      	str	r3, [sp, #12]
 800d602:	f7fc ff73 	bl	800a4ec <strncmp>
 800d606:	9b03      	ldr	r3, [sp, #12]
 800d608:	2800      	cmp	r0, #0
 800d60a:	d1e1      	bne.n	800d5d0 <__gethex+0x1d8>
 800d60c:	e7a2      	b.n	800d554 <__gethex+0x15c>
 800d60e:	4620      	mov	r0, r4
 800d610:	1ea9      	subs	r1, r5, #2
 800d612:	f7fe fc40 	bl	800be96 <__any_on>
 800d616:	2800      	cmp	r0, #0
 800d618:	d0c2      	beq.n	800d5a0 <__gethex+0x1a8>
 800d61a:	f04f 0903 	mov.w	r9, #3
 800d61e:	e7c1      	b.n	800d5a4 <__gethex+0x1ac>
 800d620:	da09      	bge.n	800d636 <__gethex+0x23e>
 800d622:	1b75      	subs	r5, r6, r5
 800d624:	4621      	mov	r1, r4
 800d626:	462a      	mov	r2, r5
 800d628:	9801      	ldr	r0, [sp, #4]
 800d62a:	f7fe fa05 	bl	800ba38 <__lshift>
 800d62e:	4604      	mov	r4, r0
 800d630:	1b7f      	subs	r7, r7, r5
 800d632:	f100 0a14 	add.w	sl, r0, #20
 800d636:	f04f 0900 	mov.w	r9, #0
 800d63a:	e7b8      	b.n	800d5ae <__gethex+0x1b6>
 800d63c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d640:	42bd      	cmp	r5, r7
 800d642:	dd6f      	ble.n	800d724 <__gethex+0x32c>
 800d644:	1bed      	subs	r5, r5, r7
 800d646:	42ae      	cmp	r6, r5
 800d648:	dc34      	bgt.n	800d6b4 <__gethex+0x2bc>
 800d64a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d022      	beq.n	800d698 <__gethex+0x2a0>
 800d652:	2b03      	cmp	r3, #3
 800d654:	d024      	beq.n	800d6a0 <__gethex+0x2a8>
 800d656:	2b01      	cmp	r3, #1
 800d658:	d115      	bne.n	800d686 <__gethex+0x28e>
 800d65a:	42ae      	cmp	r6, r5
 800d65c:	d113      	bne.n	800d686 <__gethex+0x28e>
 800d65e:	2e01      	cmp	r6, #1
 800d660:	d10b      	bne.n	800d67a <__gethex+0x282>
 800d662:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d666:	9a02      	ldr	r2, [sp, #8]
 800d668:	2562      	movs	r5, #98	@ 0x62
 800d66a:	6013      	str	r3, [r2, #0]
 800d66c:	2301      	movs	r3, #1
 800d66e:	6123      	str	r3, [r4, #16]
 800d670:	f8ca 3000 	str.w	r3, [sl]
 800d674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d676:	601c      	str	r4, [r3, #0]
 800d678:	e73a      	b.n	800d4f0 <__gethex+0xf8>
 800d67a:	4620      	mov	r0, r4
 800d67c:	1e71      	subs	r1, r6, #1
 800d67e:	f7fe fc0a 	bl	800be96 <__any_on>
 800d682:	2800      	cmp	r0, #0
 800d684:	d1ed      	bne.n	800d662 <__gethex+0x26a>
 800d686:	4621      	mov	r1, r4
 800d688:	9801      	ldr	r0, [sp, #4]
 800d68a:	f7fd ffbf 	bl	800b60c <_Bfree>
 800d68e:	2300      	movs	r3, #0
 800d690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d692:	2550      	movs	r5, #80	@ 0x50
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	e72b      	b.n	800d4f0 <__gethex+0xf8>
 800d698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1f3      	bne.n	800d686 <__gethex+0x28e>
 800d69e:	e7e0      	b.n	800d662 <__gethex+0x26a>
 800d6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1dd      	bne.n	800d662 <__gethex+0x26a>
 800d6a6:	e7ee      	b.n	800d686 <__gethex+0x28e>
 800d6a8:	0800e050 	.word	0x0800e050
 800d6ac:	0800dee8 	.word	0x0800dee8
 800d6b0:	0800e0fd 	.word	0x0800e0fd
 800d6b4:	1e6f      	subs	r7, r5, #1
 800d6b6:	f1b9 0f00 	cmp.w	r9, #0
 800d6ba:	d130      	bne.n	800d71e <__gethex+0x326>
 800d6bc:	b127      	cbz	r7, 800d6c8 <__gethex+0x2d0>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f7fe fbe8 	bl	800be96 <__any_on>
 800d6c6:	4681      	mov	r9, r0
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	1b76      	subs	r6, r6, r5
 800d6ce:	2502      	movs	r5, #2
 800d6d0:	117a      	asrs	r2, r7, #5
 800d6d2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d6d6:	f007 071f 	and.w	r7, r7, #31
 800d6da:	40bb      	lsls	r3, r7
 800d6dc:	4213      	tst	r3, r2
 800d6de:	4620      	mov	r0, r4
 800d6e0:	bf18      	it	ne
 800d6e2:	f049 0902 	orrne.w	r9, r9, #2
 800d6e6:	f7ff fe1f 	bl	800d328 <rshift>
 800d6ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d6ee:	f1b9 0f00 	cmp.w	r9, #0
 800d6f2:	d047      	beq.n	800d784 <__gethex+0x38c>
 800d6f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d015      	beq.n	800d728 <__gethex+0x330>
 800d6fc:	2b03      	cmp	r3, #3
 800d6fe:	d017      	beq.n	800d730 <__gethex+0x338>
 800d700:	2b01      	cmp	r3, #1
 800d702:	d109      	bne.n	800d718 <__gethex+0x320>
 800d704:	f019 0f02 	tst.w	r9, #2
 800d708:	d006      	beq.n	800d718 <__gethex+0x320>
 800d70a:	f8da 3000 	ldr.w	r3, [sl]
 800d70e:	ea49 0903 	orr.w	r9, r9, r3
 800d712:	f019 0f01 	tst.w	r9, #1
 800d716:	d10e      	bne.n	800d736 <__gethex+0x33e>
 800d718:	f045 0510 	orr.w	r5, r5, #16
 800d71c:	e032      	b.n	800d784 <__gethex+0x38c>
 800d71e:	f04f 0901 	mov.w	r9, #1
 800d722:	e7d1      	b.n	800d6c8 <__gethex+0x2d0>
 800d724:	2501      	movs	r5, #1
 800d726:	e7e2      	b.n	800d6ee <__gethex+0x2f6>
 800d728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d72a:	f1c3 0301 	rsb	r3, r3, #1
 800d72e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d732:	2b00      	cmp	r3, #0
 800d734:	d0f0      	beq.n	800d718 <__gethex+0x320>
 800d736:	f04f 0c00 	mov.w	ip, #0
 800d73a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d73e:	f104 0314 	add.w	r3, r4, #20
 800d742:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d746:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d750:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d754:	d01b      	beq.n	800d78e <__gethex+0x396>
 800d756:	3201      	adds	r2, #1
 800d758:	6002      	str	r2, [r0, #0]
 800d75a:	2d02      	cmp	r5, #2
 800d75c:	f104 0314 	add.w	r3, r4, #20
 800d760:	d13c      	bne.n	800d7dc <__gethex+0x3e4>
 800d762:	f8d8 2000 	ldr.w	r2, [r8]
 800d766:	3a01      	subs	r2, #1
 800d768:	42b2      	cmp	r2, r6
 800d76a:	d109      	bne.n	800d780 <__gethex+0x388>
 800d76c:	2201      	movs	r2, #1
 800d76e:	1171      	asrs	r1, r6, #5
 800d770:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d774:	f006 061f 	and.w	r6, r6, #31
 800d778:	fa02 f606 	lsl.w	r6, r2, r6
 800d77c:	421e      	tst	r6, r3
 800d77e:	d13a      	bne.n	800d7f6 <__gethex+0x3fe>
 800d780:	f045 0520 	orr.w	r5, r5, #32
 800d784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d786:	601c      	str	r4, [r3, #0]
 800d788:	9b02      	ldr	r3, [sp, #8]
 800d78a:	601f      	str	r7, [r3, #0]
 800d78c:	e6b0      	b.n	800d4f0 <__gethex+0xf8>
 800d78e:	4299      	cmp	r1, r3
 800d790:	f843 cc04 	str.w	ip, [r3, #-4]
 800d794:	d8d9      	bhi.n	800d74a <__gethex+0x352>
 800d796:	68a3      	ldr	r3, [r4, #8]
 800d798:	459b      	cmp	fp, r3
 800d79a:	db17      	blt.n	800d7cc <__gethex+0x3d4>
 800d79c:	6861      	ldr	r1, [r4, #4]
 800d79e:	9801      	ldr	r0, [sp, #4]
 800d7a0:	3101      	adds	r1, #1
 800d7a2:	f7fd fef3 	bl	800b58c <_Balloc>
 800d7a6:	4681      	mov	r9, r0
 800d7a8:	b918      	cbnz	r0, 800d7b2 <__gethex+0x3ba>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	2184      	movs	r1, #132	@ 0x84
 800d7ae:	4b19      	ldr	r3, [pc, #100]	@ (800d814 <__gethex+0x41c>)
 800d7b0:	e6c5      	b.n	800d53e <__gethex+0x146>
 800d7b2:	6922      	ldr	r2, [r4, #16]
 800d7b4:	f104 010c 	add.w	r1, r4, #12
 800d7b8:	3202      	adds	r2, #2
 800d7ba:	0092      	lsls	r2, r2, #2
 800d7bc:	300c      	adds	r0, #12
 800d7be:	f7fc ff82 	bl	800a6c6 <memcpy>
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	9801      	ldr	r0, [sp, #4]
 800d7c6:	f7fd ff21 	bl	800b60c <_Bfree>
 800d7ca:	464c      	mov	r4, r9
 800d7cc:	6923      	ldr	r3, [r4, #16]
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	6122      	str	r2, [r4, #16]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7d8:	615a      	str	r2, [r3, #20]
 800d7da:	e7be      	b.n	800d75a <__gethex+0x362>
 800d7dc:	6922      	ldr	r2, [r4, #16]
 800d7de:	455a      	cmp	r2, fp
 800d7e0:	dd0b      	ble.n	800d7fa <__gethex+0x402>
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f7ff fd9f 	bl	800d328 <rshift>
 800d7ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7ee:	3701      	adds	r7, #1
 800d7f0:	42bb      	cmp	r3, r7
 800d7f2:	f6ff aee0 	blt.w	800d5b6 <__gethex+0x1be>
 800d7f6:	2501      	movs	r5, #1
 800d7f8:	e7c2      	b.n	800d780 <__gethex+0x388>
 800d7fa:	f016 061f 	ands.w	r6, r6, #31
 800d7fe:	d0fa      	beq.n	800d7f6 <__gethex+0x3fe>
 800d800:	4453      	add	r3, sl
 800d802:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d806:	f7fd ffb3 	bl	800b770 <__hi0bits>
 800d80a:	f1c6 0620 	rsb	r6, r6, #32
 800d80e:	42b0      	cmp	r0, r6
 800d810:	dbe7      	blt.n	800d7e2 <__gethex+0x3ea>
 800d812:	e7f0      	b.n	800d7f6 <__gethex+0x3fe>
 800d814:	0800dee8 	.word	0x0800dee8

0800d818 <L_shift>:
 800d818:	f1c2 0208 	rsb	r2, r2, #8
 800d81c:	0092      	lsls	r2, r2, #2
 800d81e:	b570      	push	{r4, r5, r6, lr}
 800d820:	f1c2 0620 	rsb	r6, r2, #32
 800d824:	6843      	ldr	r3, [r0, #4]
 800d826:	6804      	ldr	r4, [r0, #0]
 800d828:	fa03 f506 	lsl.w	r5, r3, r6
 800d82c:	432c      	orrs	r4, r5
 800d82e:	40d3      	lsrs	r3, r2
 800d830:	6004      	str	r4, [r0, #0]
 800d832:	f840 3f04 	str.w	r3, [r0, #4]!
 800d836:	4288      	cmp	r0, r1
 800d838:	d3f4      	bcc.n	800d824 <L_shift+0xc>
 800d83a:	bd70      	pop	{r4, r5, r6, pc}

0800d83c <__match>:
 800d83c:	b530      	push	{r4, r5, lr}
 800d83e:	6803      	ldr	r3, [r0, #0]
 800d840:	3301      	adds	r3, #1
 800d842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d846:	b914      	cbnz	r4, 800d84e <__match+0x12>
 800d848:	6003      	str	r3, [r0, #0]
 800d84a:	2001      	movs	r0, #1
 800d84c:	bd30      	pop	{r4, r5, pc}
 800d84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d852:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d856:	2d19      	cmp	r5, #25
 800d858:	bf98      	it	ls
 800d85a:	3220      	addls	r2, #32
 800d85c:	42a2      	cmp	r2, r4
 800d85e:	d0f0      	beq.n	800d842 <__match+0x6>
 800d860:	2000      	movs	r0, #0
 800d862:	e7f3      	b.n	800d84c <__match+0x10>

0800d864 <__hexnan>:
 800d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	2500      	movs	r5, #0
 800d86a:	680b      	ldr	r3, [r1, #0]
 800d86c:	4682      	mov	sl, r0
 800d86e:	115e      	asrs	r6, r3, #5
 800d870:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d874:	f013 031f 	ands.w	r3, r3, #31
 800d878:	bf18      	it	ne
 800d87a:	3604      	addne	r6, #4
 800d87c:	1f37      	subs	r7, r6, #4
 800d87e:	4690      	mov	r8, r2
 800d880:	46b9      	mov	r9, r7
 800d882:	463c      	mov	r4, r7
 800d884:	46ab      	mov	fp, r5
 800d886:	b087      	sub	sp, #28
 800d888:	6801      	ldr	r1, [r0, #0]
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	f846 5c04 	str.w	r5, [r6, #-4]
 800d890:	9502      	str	r5, [sp, #8]
 800d892:	784a      	ldrb	r2, [r1, #1]
 800d894:	1c4b      	adds	r3, r1, #1
 800d896:	9303      	str	r3, [sp, #12]
 800d898:	b342      	cbz	r2, 800d8ec <__hexnan+0x88>
 800d89a:	4610      	mov	r0, r2
 800d89c:	9105      	str	r1, [sp, #20]
 800d89e:	9204      	str	r2, [sp, #16]
 800d8a0:	f7ff fd95 	bl	800d3ce <__hexdig_fun>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d151      	bne.n	800d94c <__hexnan+0xe8>
 800d8a8:	9a04      	ldr	r2, [sp, #16]
 800d8aa:	9905      	ldr	r1, [sp, #20]
 800d8ac:	2a20      	cmp	r2, #32
 800d8ae:	d818      	bhi.n	800d8e2 <__hexnan+0x7e>
 800d8b0:	9b02      	ldr	r3, [sp, #8]
 800d8b2:	459b      	cmp	fp, r3
 800d8b4:	dd13      	ble.n	800d8de <__hexnan+0x7a>
 800d8b6:	454c      	cmp	r4, r9
 800d8b8:	d206      	bcs.n	800d8c8 <__hexnan+0x64>
 800d8ba:	2d07      	cmp	r5, #7
 800d8bc:	dc04      	bgt.n	800d8c8 <__hexnan+0x64>
 800d8be:	462a      	mov	r2, r5
 800d8c0:	4649      	mov	r1, r9
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f7ff ffa8 	bl	800d818 <L_shift>
 800d8c8:	4544      	cmp	r4, r8
 800d8ca:	d952      	bls.n	800d972 <__hexnan+0x10e>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f1a4 0904 	sub.w	r9, r4, #4
 800d8d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8d6:	461d      	mov	r5, r3
 800d8d8:	464c      	mov	r4, r9
 800d8da:	f8cd b008 	str.w	fp, [sp, #8]
 800d8de:	9903      	ldr	r1, [sp, #12]
 800d8e0:	e7d7      	b.n	800d892 <__hexnan+0x2e>
 800d8e2:	2a29      	cmp	r2, #41	@ 0x29
 800d8e4:	d157      	bne.n	800d996 <__hexnan+0x132>
 800d8e6:	3102      	adds	r1, #2
 800d8e8:	f8ca 1000 	str.w	r1, [sl]
 800d8ec:	f1bb 0f00 	cmp.w	fp, #0
 800d8f0:	d051      	beq.n	800d996 <__hexnan+0x132>
 800d8f2:	454c      	cmp	r4, r9
 800d8f4:	d206      	bcs.n	800d904 <__hexnan+0xa0>
 800d8f6:	2d07      	cmp	r5, #7
 800d8f8:	dc04      	bgt.n	800d904 <__hexnan+0xa0>
 800d8fa:	462a      	mov	r2, r5
 800d8fc:	4649      	mov	r1, r9
 800d8fe:	4620      	mov	r0, r4
 800d900:	f7ff ff8a 	bl	800d818 <L_shift>
 800d904:	4544      	cmp	r4, r8
 800d906:	d936      	bls.n	800d976 <__hexnan+0x112>
 800d908:	4623      	mov	r3, r4
 800d90a:	f1a8 0204 	sub.w	r2, r8, #4
 800d90e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d912:	429f      	cmp	r7, r3
 800d914:	f842 1f04 	str.w	r1, [r2, #4]!
 800d918:	d2f9      	bcs.n	800d90e <__hexnan+0xaa>
 800d91a:	1b3b      	subs	r3, r7, r4
 800d91c:	f023 0303 	bic.w	r3, r3, #3
 800d920:	3304      	adds	r3, #4
 800d922:	3401      	adds	r4, #1
 800d924:	3e03      	subs	r6, #3
 800d926:	42b4      	cmp	r4, r6
 800d928:	bf88      	it	hi
 800d92a:	2304      	movhi	r3, #4
 800d92c:	2200      	movs	r2, #0
 800d92e:	4443      	add	r3, r8
 800d930:	f843 2b04 	str.w	r2, [r3], #4
 800d934:	429f      	cmp	r7, r3
 800d936:	d2fb      	bcs.n	800d930 <__hexnan+0xcc>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	b91b      	cbnz	r3, 800d944 <__hexnan+0xe0>
 800d93c:	4547      	cmp	r7, r8
 800d93e:	d128      	bne.n	800d992 <__hexnan+0x12e>
 800d940:	2301      	movs	r3, #1
 800d942:	603b      	str	r3, [r7, #0]
 800d944:	2005      	movs	r0, #5
 800d946:	b007      	add	sp, #28
 800d948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94c:	3501      	adds	r5, #1
 800d94e:	2d08      	cmp	r5, #8
 800d950:	f10b 0b01 	add.w	fp, fp, #1
 800d954:	dd06      	ble.n	800d964 <__hexnan+0x100>
 800d956:	4544      	cmp	r4, r8
 800d958:	d9c1      	bls.n	800d8de <__hexnan+0x7a>
 800d95a:	2300      	movs	r3, #0
 800d95c:	2501      	movs	r5, #1
 800d95e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d962:	3c04      	subs	r4, #4
 800d964:	6822      	ldr	r2, [r4, #0]
 800d966:	f000 000f 	and.w	r0, r0, #15
 800d96a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d96e:	6020      	str	r0, [r4, #0]
 800d970:	e7b5      	b.n	800d8de <__hexnan+0x7a>
 800d972:	2508      	movs	r5, #8
 800d974:	e7b3      	b.n	800d8de <__hexnan+0x7a>
 800d976:	9b01      	ldr	r3, [sp, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d0dd      	beq.n	800d938 <__hexnan+0xd4>
 800d97c:	f04f 32ff 	mov.w	r2, #4294967295
 800d980:	f1c3 0320 	rsb	r3, r3, #32
 800d984:	40da      	lsrs	r2, r3
 800d986:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d98a:	4013      	ands	r3, r2
 800d98c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d990:	e7d2      	b.n	800d938 <__hexnan+0xd4>
 800d992:	3f04      	subs	r7, #4
 800d994:	e7d0      	b.n	800d938 <__hexnan+0xd4>
 800d996:	2004      	movs	r0, #4
 800d998:	e7d5      	b.n	800d946 <__hexnan+0xe2>

0800d99a <__ascii_mbtowc>:
 800d99a:	b082      	sub	sp, #8
 800d99c:	b901      	cbnz	r1, 800d9a0 <__ascii_mbtowc+0x6>
 800d99e:	a901      	add	r1, sp, #4
 800d9a0:	b142      	cbz	r2, 800d9b4 <__ascii_mbtowc+0x1a>
 800d9a2:	b14b      	cbz	r3, 800d9b8 <__ascii_mbtowc+0x1e>
 800d9a4:	7813      	ldrb	r3, [r2, #0]
 800d9a6:	600b      	str	r3, [r1, #0]
 800d9a8:	7812      	ldrb	r2, [r2, #0]
 800d9aa:	1e10      	subs	r0, r2, #0
 800d9ac:	bf18      	it	ne
 800d9ae:	2001      	movne	r0, #1
 800d9b0:	b002      	add	sp, #8
 800d9b2:	4770      	bx	lr
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	e7fb      	b.n	800d9b0 <__ascii_mbtowc+0x16>
 800d9b8:	f06f 0001 	mvn.w	r0, #1
 800d9bc:	e7f8      	b.n	800d9b0 <__ascii_mbtowc+0x16>

0800d9be <_realloc_r>:
 800d9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	4615      	mov	r5, r2
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	b921      	cbnz	r1, 800d9d4 <_realloc_r+0x16>
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d0:	f7fd bd50 	b.w	800b474 <_malloc_r>
 800d9d4:	b92a      	cbnz	r2, 800d9e2 <_realloc_r+0x24>
 800d9d6:	f7fd fcdb 	bl	800b390 <_free_r>
 800d9da:	2400      	movs	r4, #0
 800d9dc:	4620      	mov	r0, r4
 800d9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e2:	f000 f840 	bl	800da66 <_malloc_usable_size_r>
 800d9e6:	4285      	cmp	r5, r0
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	d802      	bhi.n	800d9f2 <_realloc_r+0x34>
 800d9ec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9f0:	d8f4      	bhi.n	800d9dc <_realloc_r+0x1e>
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	f7fd fd3d 	bl	800b474 <_malloc_r>
 800d9fa:	4607      	mov	r7, r0
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d0ec      	beq.n	800d9da <_realloc_r+0x1c>
 800da00:	42b5      	cmp	r5, r6
 800da02:	462a      	mov	r2, r5
 800da04:	4621      	mov	r1, r4
 800da06:	bf28      	it	cs
 800da08:	4632      	movcs	r2, r6
 800da0a:	f7fc fe5c 	bl	800a6c6 <memcpy>
 800da0e:	4621      	mov	r1, r4
 800da10:	4640      	mov	r0, r8
 800da12:	f7fd fcbd 	bl	800b390 <_free_r>
 800da16:	463c      	mov	r4, r7
 800da18:	e7e0      	b.n	800d9dc <_realloc_r+0x1e>

0800da1a <__ascii_wctomb>:
 800da1a:	4603      	mov	r3, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	b141      	cbz	r1, 800da32 <__ascii_wctomb+0x18>
 800da20:	2aff      	cmp	r2, #255	@ 0xff
 800da22:	d904      	bls.n	800da2e <__ascii_wctomb+0x14>
 800da24:	228a      	movs	r2, #138	@ 0x8a
 800da26:	f04f 30ff 	mov.w	r0, #4294967295
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	4770      	bx	lr
 800da2e:	2001      	movs	r0, #1
 800da30:	700a      	strb	r2, [r1, #0]
 800da32:	4770      	bx	lr

0800da34 <fiprintf>:
 800da34:	b40e      	push	{r1, r2, r3}
 800da36:	b503      	push	{r0, r1, lr}
 800da38:	4601      	mov	r1, r0
 800da3a:	ab03      	add	r3, sp, #12
 800da3c:	4805      	ldr	r0, [pc, #20]	@ (800da54 <fiprintf+0x20>)
 800da3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da42:	6800      	ldr	r0, [r0, #0]
 800da44:	9301      	str	r3, [sp, #4]
 800da46:	f7ff f9c9 	bl	800cddc <_vfiprintf_r>
 800da4a:	b002      	add	sp, #8
 800da4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da50:	b003      	add	sp, #12
 800da52:	4770      	bx	lr
 800da54:	20000024 	.word	0x20000024

0800da58 <abort>:
 800da58:	2006      	movs	r0, #6
 800da5a:	b508      	push	{r3, lr}
 800da5c:	f000 f834 	bl	800dac8 <raise>
 800da60:	2001      	movs	r0, #1
 800da62:	f7f4 f932 	bl	8001cca <_exit>

0800da66 <_malloc_usable_size_r>:
 800da66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6a:	1f18      	subs	r0, r3, #4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	bfbc      	itt	lt
 800da70:	580b      	ldrlt	r3, [r1, r0]
 800da72:	18c0      	addlt	r0, r0, r3
 800da74:	4770      	bx	lr

0800da76 <_raise_r>:
 800da76:	291f      	cmp	r1, #31
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4605      	mov	r5, r0
 800da7c:	460c      	mov	r4, r1
 800da7e:	d904      	bls.n	800da8a <_raise_r+0x14>
 800da80:	2316      	movs	r3, #22
 800da82:	6003      	str	r3, [r0, #0]
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da8c:	b112      	cbz	r2, 800da94 <_raise_r+0x1e>
 800da8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da92:	b94b      	cbnz	r3, 800daa8 <_raise_r+0x32>
 800da94:	4628      	mov	r0, r5
 800da96:	f000 f831 	bl	800dafc <_getpid_r>
 800da9a:	4622      	mov	r2, r4
 800da9c:	4601      	mov	r1, r0
 800da9e:	4628      	mov	r0, r5
 800daa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa4:	f000 b818 	b.w	800dad8 <_kill_r>
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d00a      	beq.n	800dac2 <_raise_r+0x4c>
 800daac:	1c59      	adds	r1, r3, #1
 800daae:	d103      	bne.n	800dab8 <_raise_r+0x42>
 800dab0:	2316      	movs	r3, #22
 800dab2:	6003      	str	r3, [r0, #0]
 800dab4:	2001      	movs	r0, #1
 800dab6:	e7e7      	b.n	800da88 <_raise_r+0x12>
 800dab8:	2100      	movs	r1, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dac0:	4798      	blx	r3
 800dac2:	2000      	movs	r0, #0
 800dac4:	e7e0      	b.n	800da88 <_raise_r+0x12>
	...

0800dac8 <raise>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	@ (800dad4 <raise+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff bfd2 	b.w	800da76 <_raise_r>
 800dad2:	bf00      	nop
 800dad4:	20000024 	.word	0x20000024

0800dad8 <_kill_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	2300      	movs	r3, #0
 800dadc:	4d06      	ldr	r5, [pc, #24]	@ (800daf8 <_kill_r+0x20>)
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	4611      	mov	r1, r2
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f7f4 f8e0 	bl	8001caa <_kill>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d102      	bne.n	800daf4 <_kill_r+0x1c>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b103      	cbz	r3, 800daf4 <_kill_r+0x1c>
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	20001f50 	.word	0x20001f50

0800dafc <_getpid_r>:
 800dafc:	f7f4 b8ce 	b.w	8001c9c <_getpid>

0800db00 <_init>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	bf00      	nop
 800db04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db06:	bc08      	pop	{r3}
 800db08:	469e      	mov	lr, r3
 800db0a:	4770      	bx	lr

0800db0c <_fini>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr
