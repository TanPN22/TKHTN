
RTOS_C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000643c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  08006684  08006684  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006684  08006684  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006684  08006684  00007684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006688  08006688  00007688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800668c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  2000006c  080066f8  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  080066f8  00008c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d8b  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334f  00000000  00000000  0001ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00022170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb8  00000000  00000000  000235b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004252  00000000  00000000  00024568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f7f  00000000  00000000  000287ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096856  00000000  00000000  0003f739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5f8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c90  00000000  00000000  000d5fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dbc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006534 	.word	0x08006534

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08006534 	.word	0x08006534

08000150 <_write>:
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void *argument);
void StartTask02(void *argument);

/* USER CODE BEGIN PFP */
int _write(int fd, char * ptr, int len) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	b29a      	uxth	r2, r3
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	68b9      	ldr	r1, [r7, #8]
 8000166:	4804      	ldr	r0, [pc, #16]	@ (8000178 <_write+0x28>)
 8000168:	f001 fd1e 	bl	8001ba8 <HAL_UART_Transmit>
  return len;
 800016c:	687b      	ldr	r3, [r7, #4]
}
 800016e:	4618      	mov	r0, r3
 8000170:	3710      	adds	r7, #16
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000088 	.word	0x20000088

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 fb7c 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f832 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f8a0 	bl	80002cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800018c:	f000 f874 	bl	8000278 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000190:	f001 ff22 	bl	8001fd8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUart */
  semUartHandle = osSemaphoreNew(1, 1, &semUart_attributes);
 8000194:	4a0d      	ldr	r2, [pc, #52]	@ (80001cc <main+0x50>)
 8000196:	2101      	movs	r1, #1
 8000198:	2001      	movs	r0, #1
 800019a:	f002 f839 	bl	8002210 <osSemaphoreNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a0b      	ldr	r2, [pc, #44]	@ (80001d0 <main+0x54>)
 80001a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001a4:	4a0b      	ldr	r2, [pc, #44]	@ (80001d4 <main+0x58>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	480b      	ldr	r0, [pc, #44]	@ (80001d8 <main+0x5c>)
 80001aa:	f001 ff72 	bl	8002092 <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a0a      	ldr	r2, [pc, #40]	@ (80001dc <main+0x60>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001b4:	4a0a      	ldr	r2, [pc, #40]	@ (80001e0 <main+0x64>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	480a      	ldr	r0, [pc, #40]	@ (80001e4 <main+0x68>)
 80001ba:	f001 ff6a 	bl	8002092 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a09      	ldr	r2, [pc, #36]	@ (80001e8 <main+0x6c>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f001 ff2a 	bl	800201c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	bf00      	nop
 80001ca:	e7fd      	b.n	80001c8 <main+0x4c>
 80001cc:	08006614 	.word	0x08006614
 80001d0:	200000d8 	.word	0x200000d8
 80001d4:	080065cc 	.word	0x080065cc
 80001d8:	08000391 	.word	0x08000391
 80001dc:	200000d0 	.word	0x200000d0
 80001e0:	080065f0 	.word	0x080065f0
 80001e4:	08000419 	.word	0x08000419
 80001e8:	200000d4 	.word	0x200000d4

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	@ 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f005 fb13 	bl	8005826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000220:	2302      	movs	r3, #2
 8000222:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fde9 	bl	8000e0c <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000240:	f000 f940 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f856 	bl	8001310 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026a:	f000 f92b 	bl	80004c4 <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	@ 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 800027e:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <MX_USART1_UART_Init+0x50>)
 8000280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 8000284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000290:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000296:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 800029e:	220c      	movs	r2, #12
 80002a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a2:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ae:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <MX_USART1_UART_Init+0x4c>)
 80002b0:	f001 fc2a 	bl	8001b08 <HAL_UART_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ba:	f000 f903 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000088 	.word	0x20000088
 80002c8:	40013800 	.word	0x40013800

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b28      	ldr	r3, [pc, #160]	@ (8000384 <MX_GPIO_Init+0xb8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a27      	ldr	r2, [pc, #156]	@ (8000384 <MX_GPIO_Init+0xb8>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b25      	ldr	r3, [pc, #148]	@ (8000384 <MX_GPIO_Init+0xb8>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0310 	and.w	r3, r3, #16
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f8:	4b22      	ldr	r3, [pc, #136]	@ (8000384 <MX_GPIO_Init+0xb8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a21      	ldr	r2, [pc, #132]	@ (8000384 <MX_GPIO_Init+0xb8>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <MX_GPIO_Init+0xb8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <MX_GPIO_Init+0xb8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <MX_GPIO_Init+0xb8>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <MX_GPIO_Init+0xb8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800032e:	4816      	ldr	r0, [pc, #88]	@ (8000388 <MX_GPIO_Init+0xbc>)
 8000330:	f000 fd3a 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800033a:	4814      	ldr	r0, [pc, #80]	@ (800038c <MX_GPIO_Init+0xc0>)
 800033c:	f000 fd34 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000340:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2302      	movs	r3, #2
 8000350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	480b      	ldr	r0, [pc, #44]	@ (8000388 <MX_GPIO_Init+0xbc>)
 800035a:	f000 fba1 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800035e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <MX_GPIO_Init+0xc0>)
 8000378:	f000 fb92 	bl	8000aa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40011000 	.word	0x40011000
 800038c:	40010800 	.word	0x40010800

08000390 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t next_wake_time = osKernelGetTickCount();
 8000398:	f001 fe66 	bl	8002068 <osKernelGetTickCount>
 800039c:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 800039e:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <StartDefaultTask+0x78>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f04f 31ff 	mov.w	r1, #4294967295
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 ffbc 	bl	8002324 <osSemaphoreAcquire>
#endif
	printf("Task 1 in: %ld\n", osKernelGetTickCount());
 80003ac:	f001 fe5c 	bl	8002068 <osKernelGetTickCount>
 80003b0:	4603      	mov	r3, r0
 80003b2:	4619      	mov	r1, r3
 80003b4:	4815      	ldr	r0, [pc, #84]	@ (800040c <StartDefaultTask+0x7c>)
 80003b6:	f005 f9e1 	bl	800577c <iprintf>
	osSemaphoreRelease(semUartHandle);
 80003ba:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <StartDefaultTask+0x78>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 f802 	bl	80023c8 <osSemaphoreRelease>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c8:	4811      	ldr	r0, [pc, #68]	@ (8000410 <StartDefaultTask+0x80>)
 80003ca:	f000 fd05 	bl	8000dd8 <HAL_GPIO_TogglePin>

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 80003ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <StartDefaultTask+0x78>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f04f 31ff 	mov.w	r1, #4294967295
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 ffa4 	bl	8002324 <osSemaphoreAcquire>
#endif
	printf("Task 1 out: %ld\n\n", osKernelGetTickCount());
 80003dc:	f001 fe44 	bl	8002068 <osKernelGetTickCount>
 80003e0:	4603      	mov	r3, r0
 80003e2:	4619      	mov	r1, r3
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <StartDefaultTask+0x84>)
 80003e6:	f005 f9c9 	bl	800577c <iprintf>
	osSemaphoreRelease(semUartHandle);
 80003ea:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <StartDefaultTask+0x78>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 ffea 	bl	80023c8 <osSemaphoreRelease>

	next_wake_time += 1000;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80003fa:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 80003fc:	68f8      	ldr	r0, [r7, #12]
 80003fe:	f001 feda 	bl	80021b6 <osDelayUntil>
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000402:	bf00      	nop
 8000404:	e7cb      	b.n	800039e <StartDefaultTask+0xe>
 8000406:	bf00      	nop
 8000408:	200000d8 	.word	0x200000d8
 800040c:	0800656c 	.word	0x0800656c
 8000410:	40011000 	.word	0x40011000
 8000414:	0800657c 	.word	0x0800657c

08000418 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t next_wake_time = osKernelGetTickCount();
 8000420:	f001 fe22 	bl	8002068 <osKernelGetTickCount>
 8000424:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <StartTask02+0x78>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f04f 31ff 	mov.w	r1, #4294967295
 800042e:	4618      	mov	r0, r3
 8000430:	f001 ff78 	bl	8002324 <osSemaphoreAcquire>
#endif
	printf("Task 2 in: %ld\n", osKernelGetTickCount());
 8000434:	f001 fe18 	bl	8002068 <osKernelGetTickCount>
 8000438:	4603      	mov	r3, r0
 800043a:	4619      	mov	r1, r3
 800043c:	4815      	ldr	r0, [pc, #84]	@ (8000494 <StartTask02+0x7c>)
 800043e:	f005 f99d 	bl	800577c <iprintf>
	osSemaphoreRelease(semUartHandle);
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <StartTask02+0x78>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f001 ffbe 	bl	80023c8 <osSemaphoreRelease>

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800044c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000450:	4811      	ldr	r0, [pc, #68]	@ (8000498 <StartTask02+0x80>)
 8000452:	f000 fcc1 	bl	8000dd8 <HAL_GPIO_TogglePin>

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <StartTask02+0x78>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f04f 31ff 	mov.w	r1, #4294967295
 800045e:	4618      	mov	r0, r3
 8000460:	f001 ff60 	bl	8002324 <osSemaphoreAcquire>
#endif
	printf("Task 2 out: %ld\n\n", osKernelGetTickCount());
 8000464:	f001 fe00 	bl	8002068 <osKernelGetTickCount>
 8000468:	4603      	mov	r3, r0
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	@ (800049c <StartTask02+0x84>)
 800046e:	f005 f985 	bl	800577c <iprintf>
	osSemaphoreRelease(semUartHandle);
 8000472:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <StartTask02+0x78>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f001 ffa6 	bl	80023c8 <osSemaphoreRelease>

	next_wake_time += 1500;
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000482:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 8000484:	68f8      	ldr	r0, [r7, #12]
 8000486:	f001 fe96 	bl	80021b6 <osDelayUntil>
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 800048a:	bf00      	nop
 800048c:	e7cb      	b.n	8000426 <StartTask02+0xe>
 800048e:	bf00      	nop
 8000490:	200000d8 	.word	0x200000d8
 8000494:	08006590 	.word	0x08006590
 8000498:	40010800 	.word	0x40010800
 800049c:	080065a0 	.word	0x080065a0

080004a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d101      	bne.n	80004b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004b2:	f000 f9f9 	bl	80008a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40000400 	.word	0x40000400

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <Error_Handler+0x8>

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d6:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <HAL_MspInit+0x68>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a17      	ldr	r2, [pc, #92]	@ (8000538 <HAL_MspInit+0x68>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_MspInit+0x68>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_MspInit+0x68>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a11      	ldr	r2, [pc, #68]	@ (8000538 <HAL_MspInit+0x68>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <HAL_MspInit+0x68>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	210f      	movs	r1, #15
 800050a:	f06f 0001 	mvn.w	r0, #1
 800050e:	f000 fa9c 	bl	8000a4a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HAL_MspInit+0x6c>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	@ (800053c <HAL_MspInit+0x6c>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <HAL_UART_MspInit+0x8c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d131      	bne.n	80005c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <HAL_UART_MspInit+0x94>)
 80005a6:	f000 fa7b 	bl	8000aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <HAL_UART_MspInit+0x94>)
 80005c0:	f000 fa6e 	bl	8000aa0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40013800 	.word	0x40013800
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800

080005d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	@ 0x38
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80005ee:	4b34      	ldr	r3, [pc, #208]	@ (80006c0 <HAL_InitTick+0xe8>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a33      	ldr	r2, [pc, #204]	@ (80006c0 <HAL_InitTick+0xe8>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <HAL_InitTick+0xe8>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000606:	f107 0210 	add.w	r2, r7, #16
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ffed 	bl	80015f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000616:	6a3b      	ldr	r3, [r7, #32]
 8000618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800061a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800061c:	2b00      	cmp	r3, #0
 800061e:	d103      	bne.n	8000628 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000620:	f000 ffbe 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 8000624:	6378      	str	r0, [r7, #52]	@ 0x34
 8000626:	e004      	b.n	8000632 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000628:	f000 ffba 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 800062c:	4603      	mov	r3, r0
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000634:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <HAL_InitTick+0xec>)
 8000636:	fba2 2303 	umull	r2, r3, r2, r3
 800063a:	0c9b      	lsrs	r3, r3, #18
 800063c:	3b01      	subs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000640:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <HAL_InitTick+0xf0>)
 8000642:	4a22      	ldr	r2, [pc, #136]	@ (80006cc <HAL_InitTick+0xf4>)
 8000644:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_InitTick+0xf0>)
 8000648:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800064c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800064e:	4a1e      	ldr	r2, [pc, #120]	@ (80006c8 <HAL_InitTick+0xf0>)
 8000650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000652:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_InitTick+0xf0>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <HAL_InitTick+0xf0>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_InitTick+0xf0>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000666:	4818      	ldr	r0, [pc, #96]	@ (80006c8 <HAL_InitTick+0xf0>)
 8000668:	f001 f810 	bl	800168c <HAL_TIM_Base_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000672:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000676:	2b00      	cmp	r3, #0
 8000678:	d11b      	bne.n	80006b2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800067a:	4813      	ldr	r0, [pc, #76]	@ (80006c8 <HAL_InitTick+0xf0>)
 800067c:	f001 f85e 	bl	800173c <HAL_TIM_Base_Start_IT>
 8000680:	4603      	mov	r3, r0
 8000682:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000686:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800068a:	2b00      	cmp	r3, #0
 800068c:	d111      	bne.n	80006b2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800068e:	201d      	movs	r0, #29
 8000690:	f000 f9f7 	bl	8000a82 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	d808      	bhi.n	80006ac <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800069a:	2200      	movs	r2, #0
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	201d      	movs	r0, #29
 80006a0:	f000 f9d3 	bl	8000a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006a4:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <HAL_InitTick+0xf8>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e002      	b.n	80006b2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3738      	adds	r7, #56	@ 0x38
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	431bde83 	.word	0x431bde83
 80006c8:	200000dc 	.word	0x200000dc
 80006cc:	40000400 	.word	0x40000400
 80006d0:	20000004 	.word	0x20000004

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <NMI_Handler+0x4>

080006dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <MemManage_Handler+0x4>

080006ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <TIM3_IRQHandler+0x10>)
 800070e:	f001 f867 	bl	80017e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000dc 	.word	0x200000dc

0800071c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	e00a      	b.n	8000744 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800072e:	f3af 8000 	nop.w
 8000732:	4601      	mov	r1, r0
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	60ba      	str	r2, [r7, #8]
 800073a:	b2ca      	uxtb	r2, r1
 800073c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697a      	ldr	r2, [r7, #20]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	dbf0      	blt.n	800072e <_read+0x12>
  }

  return len;
 800074c:	687b      	ldr	r3, [r7, #4]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800077c:	605a      	str	r2, [r3, #4]
  return 0;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <_isatty>:

int _isatty(int file)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
	...

080007b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c0:	4a14      	ldr	r2, [pc, #80]	@ (8000814 <_sbrk+0x5c>)
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <_sbrk+0x60>)
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <_sbrk+0x64>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d102      	bne.n	80007da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <_sbrk+0x64>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <_sbrk+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d207      	bcs.n	80007f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e8:	f005 f8c2 	bl	8005970 <__errno>
 80007ec:	4603      	mov	r3, r0
 80007ee:	220c      	movs	r2, #12
 80007f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	e009      	b.n	800080c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007fe:	4b07      	ldr	r3, [pc, #28]	@ (800081c <_sbrk+0x64>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	4a05      	ldr	r2, [pc, #20]	@ (800081c <_sbrk+0x64>)
 8000808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800080a:	68fb      	ldr	r3, [r7, #12]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20005000 	.word	0x20005000
 8000818:	00000400 	.word	0x00000400
 800081c:	20000124 	.word	0x20000124
 8000820:	20001c60 	.word	0x20001c60

08000824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff fff8 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480b      	ldr	r0, [pc, #44]	@ (8000864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000836:	490c      	ldr	r1, [pc, #48]	@ (8000868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000838:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <LoopFillZerobss+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800084c:	4c09      	ldr	r4, [pc, #36]	@ (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f005 f88f 	bl	800597c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085e:	f7ff fc8d 	bl	800017c <main>
  bx lr
 8000862:	4770      	bx	lr
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800086c:	0800668c 	.word	0x0800668c
  ldr r2, =_sbss
 8000870:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000874:	20001c60 	.word	0x20001c60

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f8d1 	bl	8000a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f7ff fea0 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff fe1a 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	@ (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000128 	.word	0x20000128

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	@ (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	20000128 	.word	0x20000128

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4906      	ldr	r1, [pc, #24]	@ (8000978 <__NVIC_EnableIRQ+0x34>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	@ (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	@ (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	@ 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f1c3 0307 	rsb	r3, r3, #7
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	bf28      	it	cs
 80009ee:	2304      	movcs	r3, #4
 80009f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3304      	adds	r3, #4
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d902      	bls.n	8000a00 <NVIC_EncodePriority+0x30>
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	e000      	b.n	8000a02 <NVIC_EncodePriority+0x32>
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43d9      	mvns	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4313      	orrs	r3, r2
         );
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	@ 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff4f 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff64 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ffb2 	bl	80009d0 <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff81 	bl	800097c <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff57 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b08b      	sub	sp, #44	@ 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e169      	b.n	8000d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8158 	bne.w	8000d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a9a      	ldr	r2, [pc, #616]	@ (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d05e      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000adc:	4a98      	ldr	r2, [pc, #608]	@ (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d875      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000ae2:	4a98      	ldr	r2, [pc, #608]	@ (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d058      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000ae8:	4a96      	ldr	r2, [pc, #600]	@ (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d86f      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000aee:	4a96      	ldr	r2, [pc, #600]	@ (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d052      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000af4:	4a94      	ldr	r2, [pc, #592]	@ (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d869      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000afa:	4a94      	ldr	r2, [pc, #592]	@ (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d04c      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b00:	4a92      	ldr	r2, [pc, #584]	@ (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d863      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b06:	4a92      	ldr	r2, [pc, #584]	@ (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d046      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b0c:	4a90      	ldr	r2, [pc, #576]	@ (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d85d      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d82a      	bhi.n	8000b6c <HAL_GPIO_Init+0xcc>
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d859      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b20 <HAL_GPIO_Init+0x80>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b9b 	.word	0x08000b9b
 8000b24:	08000b75 	.word	0x08000b75
 8000b28:	08000b87 	.word	0x08000b87
 8000b2c:	08000bc9 	.word	0x08000bc9
 8000b30:	08000bcf 	.word	0x08000bcf
 8000b34:	08000bcf 	.word	0x08000bcf
 8000b38:	08000bcf 	.word	0x08000bcf
 8000b3c:	08000bcf 	.word	0x08000bcf
 8000b40:	08000bcf 	.word	0x08000bcf
 8000b44:	08000bcf 	.word	0x08000bcf
 8000b48:	08000bcf 	.word	0x08000bcf
 8000b4c:	08000bcf 	.word	0x08000bcf
 8000b50:	08000bcf 	.word	0x08000bcf
 8000b54:	08000bcf 	.word	0x08000bcf
 8000b58:	08000bcf 	.word	0x08000bcf
 8000b5c:	08000bcf 	.word	0x08000bcf
 8000b60:	08000bcf 	.word	0x08000bcf
 8000b64:	08000b7d 	.word	0x08000b7d
 8000b68:	08000b91 	.word	0x08000b91
 8000b6c:	4a79      	ldr	r2, [pc, #484]	@ (8000d54 <HAL_GPIO_Init+0x2b4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b72:	e02c      	b.n	8000bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e029      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	3304      	adds	r3, #4
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e024      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e01f      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	330c      	adds	r3, #12
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e01a      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e013      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	611a      	str	r2, [r3, #16]
          break;
 8000bba:	e009      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	615a      	str	r2, [r3, #20]
          break;
 8000bc6:	e003      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e000      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          break;
 8000bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	@ 0xff
 8000bd4:	d801      	bhi.n	8000bda <HAL_GPIO_Init+0x13a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_Init+0x13e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2bff      	cmp	r3, #255	@ 0xff
 8000be4:	d802      	bhi.n	8000bec <HAL_GPIO_Init+0x14c>
 8000be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0x152>
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	6a39      	ldr	r1, [r7, #32]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 80b1 	beq.w	8000d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c20:	4b4d      	ldr	r3, [pc, #308]	@ (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a4c      	ldr	r2, [pc, #304]	@ (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c38:	4a48      	ldr	r2, [pc, #288]	@ (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	@ (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d013      	beq.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3f      	ldr	r2, [pc, #252]	@ (8000d64 <HAL_GPIO_Init+0x2c4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1e8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d68 <HAL_GPIO_Init+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1e4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3d      	ldr	r2, [pc, #244]	@ (8000d6c <HAL_GPIO_Init+0x2cc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1e0>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9e:	492f      	ldr	r1, [pc, #188]	@ (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	492c      	ldr	r1, [pc, #176]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce0:	4b23      	ldr	r3, [pc, #140]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	4922      	ldr	r1, [pc, #136]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60cb      	str	r3, [r1, #12]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cee:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	491e      	ldr	r1, [pc, #120]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d08:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4918      	ldr	r1, [pc, #96]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4914      	ldr	r1, [pc, #80]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d021      	beq.n	8000d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	490e      	ldr	r1, [pc, #56]	@ (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e021      	b.n	8000d82 <HAL_GPIO_Init+0x2e2>
 8000d3e:	bf00      	nop
 8000d40:	10320000 	.word	0x10320000
 8000d44:	10310000 	.word	0x10310000
 8000d48:	10220000 	.word	0x10220000
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	10120000 	.word	0x10120000
 8000d54:	10110000 	.word	0x10110000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40011400 	.word	0x40011400
 8000d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_GPIO_Init+0x304>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4909      	ldr	r1, [pc, #36]	@ (8000da4 <HAL_GPIO_Init+0x304>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	3301      	adds	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f47f ae8e 	bne.w	8000ab4 <HAL_GPIO_Init+0x14>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	372c      	adds	r7, #44	@ 0x2c
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
 8000db4:	4613      	mov	r3, r2
 8000db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db8:	787b      	ldrb	r3, [r7, #1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc4:	e003      	b.n	8000dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	611a      	str	r2, [r3, #16]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	041a      	lsls	r2, r3, #16
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43d9      	mvns	r1, r3
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	400b      	ands	r3, r1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	611a      	str	r2, [r3, #16]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e272      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8087 	beq.w	8000f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e2c:	4b92      	ldr	r3, [pc, #584]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d00c      	beq.n	8000e52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e38:	4b8f      	ldr	r3, [pc, #572]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d112      	bne.n	8000e6a <HAL_RCC_OscConfig+0x5e>
 8000e44:	4b8c      	ldr	r3, [pc, #560]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e50:	d10b      	bne.n	8000e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	4b89      	ldr	r3, [pc, #548]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d06c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x12c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d168      	bne.n	8000f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e24c      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e72:	d106      	bne.n	8000e82 <HAL_RCC_OscConfig+0x76>
 8000e74:	4b80      	ldr	r3, [pc, #512]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a7f      	ldr	r2, [pc, #508]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e02e      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x98>
 8000e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a7a      	ldr	r2, [pc, #488]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b78      	ldr	r3, [pc, #480]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a77      	ldr	r2, [pc, #476]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e01d      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0xbc>
 8000eae:	4b72      	ldr	r3, [pc, #456]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a71      	ldr	r2, [pc, #452]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b6f      	ldr	r3, [pc, #444]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6e      	ldr	r2, [pc, #440]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000ec8:	4b6b      	ldr	r3, [pc, #428]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b68      	ldr	r3, [pc, #416]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a67      	ldr	r2, [pc, #412]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ede:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fcf0 	bl	80008cc <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fcec 	bl	80008cc <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	@ 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e200      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	4b5d      	ldr	r3, [pc, #372]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xe4>
 8000f0e:	e014      	b.n	8000f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fcdc 	bl	80008cc <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fcd8 	bl	80008cc <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	@ 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e1ec      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x10c>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d063      	beq.n	800100e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f46:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f52:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d11c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x18c>
 8000f5e:	4b46      	ldr	r3, [pc, #280]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d116      	bne.n	8000f98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	4b43      	ldr	r3, [pc, #268]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <HAL_RCC_OscConfig+0x176>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d001      	beq.n	8000f82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e1c0      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4939      	ldr	r1, [pc, #228]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	e03a      	b.n	800100e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d020      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	4b36      	ldr	r3, [pc, #216]	@ (800107c <HAL_RCC_OscConfig+0x270>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc91 	bl	80008cc <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc8d 	bl	80008cc <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e1a1      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4927      	ldr	r1, [pc, #156]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e015      	b.n	800100e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b26      	ldr	r3, [pc, #152]	@ (800107c <HAL_RCC_OscConfig+0x270>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc70 	bl	80008cc <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc6c 	bl	80008cc <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e180      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d03a      	beq.n	8001090 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d019      	beq.n	8001056 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <HAL_RCC_OscConfig+0x274>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001028:	f7ff fc50 	bl	80008cc <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fc4c 	bl	80008cc <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e160      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <HAL_RCC_OscConfig+0x26c>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fafe 	bl	8001650 <RCC_Delay>
 8001054:	e01c      	b.n	8001090 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_RCC_OscConfig+0x274>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fc36 	bl	80008cc <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001062:	e00f      	b.n	8001084 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fc32 	bl	80008cc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d908      	bls.n	8001084 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e146      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	42420000 	.word	0x42420000
 8001080:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001084:	4b92      	ldr	r3, [pc, #584]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e9      	bne.n	8001064 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a6 	beq.w	80011ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a2:	4b8b      	ldr	r3, [pc, #556]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10d      	bne.n	80010ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b88      	ldr	r3, [pc, #544]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a87      	ldr	r2, [pc, #540]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b85      	ldr	r3, [pc, #532]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c6:	2301      	movs	r3, #1
 80010c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ca:	4b82      	ldr	r3, [pc, #520]	@ (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d6:	4b7f      	ldr	r3, [pc, #508]	@ (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7e      	ldr	r2, [pc, #504]	@ (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fbf3 	bl	80008cc <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ea:	f7ff fbef 	bl	80008cc <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	@ 0x64
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e103      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	4b75      	ldr	r3, [pc, #468]	@ (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x312>
 8001110:	4b6f      	ldr	r3, [pc, #444]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a6e      	ldr	r2, [pc, #440]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	e02d      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x334>
 8001126:	4b6a      	ldr	r3, [pc, #424]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a69      	ldr	r2, [pc, #420]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	4b67      	ldr	r3, [pc, #412]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a66      	ldr	r2, [pc, #408]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	e01c      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b05      	cmp	r3, #5
 8001146:	d10c      	bne.n	8001162 <HAL_RCC_OscConfig+0x356>
 8001148:	4b61      	ldr	r3, [pc, #388]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a60      	ldr	r2, [pc, #384]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6213      	str	r3, [r2, #32]
 8001154:	4b5e      	ldr	r3, [pc, #376]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a5d      	ldr	r2, [pc, #372]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6213      	str	r3, [r2, #32]
 8001160:	e00b      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 8001162:	4b5b      	ldr	r3, [pc, #364]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a5a      	ldr	r2, [pc, #360]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	4b58      	ldr	r3, [pc, #352]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a57      	ldr	r2, [pc, #348]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d015      	beq.n	80011ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001182:	f7ff fba3 	bl	80008cc <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fb9f 	bl	80008cc <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e0b1      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	4b4b      	ldr	r3, [pc, #300]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0ee      	beq.n	800118a <HAL_RCC_OscConfig+0x37e>
 80011ac:	e014      	b.n	80011d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fb8d 	bl	80008cc <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b4:	e00a      	b.n	80011cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff fb89 	bl	80008cc <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e09b      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011cc:	4b40      	ldr	r3, [pc, #256]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ee      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d105      	bne.n	80011ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011de:	4b3c      	ldr	r3, [pc, #240]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a3b      	ldr	r2, [pc, #236]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8087 	beq.w	8001302 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f4:	4b36      	ldr	r3, [pc, #216]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d061      	beq.n	80012c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d146      	bne.n	8001296 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001208:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <HAL_RCC_OscConfig+0x4cc>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fb5d 	bl	80008cc <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff fb59 	bl	80008cc <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e06d      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001228:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800123c:	d108      	bne.n	8001250 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4921      	ldr	r1, [pc, #132]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a19      	ldr	r1, [r3, #32]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	430b      	orrs	r3, r1
 8001262:	491b      	ldr	r1, [pc, #108]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <HAL_RCC_OscConfig+0x4cc>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb2d 	bl	80008cc <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff fb29 	bl	80008cc <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e03d      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x46a>
 8001294:	e035      	b.n	8001302 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_RCC_OscConfig+0x4cc>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb16 	bl	80008cc <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb12 	bl	80008cc <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e026      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x498>
 80012c2:	e01e      	b.n	8001302 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d107      	bne.n	80012dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e019      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40007000 	.word	0x40007000
 80012d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_RCC_OscConfig+0x500>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d106      	bne.n	80012fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0d0      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001324:	4b6a      	ldr	r3, [pc, #424]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d910      	bls.n	8001354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b67      	ldr	r3, [pc, #412]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0207 	bic.w	r2, r3, #7
 800133a:	4965      	ldr	r1, [pc, #404]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b63      	ldr	r3, [pc, #396]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0b8      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136c:	4b59      	ldr	r3, [pc, #356]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a58      	ldr	r2, [pc, #352]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001376:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001384:	4b53      	ldr	r3, [pc, #332]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800138e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4b50      	ldr	r3, [pc, #320]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	494d      	ldr	r1, [pc, #308]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d040      	beq.n	8001430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b47      	ldr	r3, [pc, #284]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d115      	bne.n	80013ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e07f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e073      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	4b3d      	ldr	r3, [pc, #244]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06b      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ee:	4b39      	ldr	r3, [pc, #228]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f023 0203 	bic.w	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4936      	ldr	r1, [pc, #216]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001400:	f7ff fa64 	bl	80008cc <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001406:	e00a      	b.n	800141e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001408:	f7ff fa60 	bl	80008cc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e053      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 020c 	and.w	r2, r3, #12
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	429a      	cmp	r2, r3
 800142e:	d1eb      	bne.n	8001408 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001430:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d210      	bcs.n	8001460 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0207 	bic.w	r2, r3, #7
 8001446:	4922      	ldr	r1, [pc, #136]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e032      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4916      	ldr	r1, [pc, #88]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800149e:	f000 f821 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	490a      	ldr	r1, [pc, #40]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c8>)
 80014b0:	5ccb      	ldrb	r3, [r1, r3]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <HAL_RCC_ClockConfig+0x1cc>)
 80014b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_RCC_ClockConfig+0x1d0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f88a 	bl	80005d8 <HAL_InitTick>

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	08006624 	.word	0x08006624
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x94>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b04      	cmp	r3, #4
 800150c:	d002      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x30>
 800150e:	2b08      	cmp	r3, #8
 8001510:	d003      	beq.n	800151a <HAL_RCC_GetSysClockFreq+0x36>
 8001512:	e027      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_RCC_GetSysClockFreq+0x98>)
 8001516:	613b      	str	r3, [r7, #16]
      break;
 8001518:	e027      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d010      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x94>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0c5b      	lsrs	r3, r3, #17
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <HAL_RCC_GetSysClockFreq+0xa0>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_RCC_GetSysClockFreq+0x98>)
 8001546:	fb03 f202 	mul.w	r2, r3, r2
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e004      	b.n	800155e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	613b      	str	r3, [r7, #16]
      break;
 8001562:	e002      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_RCC_GetSysClockFreq+0x98>)
 8001566:	613b      	str	r3, [r7, #16]
      break;
 8001568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800156a:	693b      	ldr	r3, [r7, #16]
}
 800156c:	4618      	mov	r0, r3
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	007a1200 	.word	0x007a1200
 8001580:	0800663c 	.word	0x0800663c
 8001584:	0800664c 	.word	0x0800664c
 8001588:	003d0900 	.word	0x003d0900

0800158c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001590:	4b02      	ldr	r3, [pc, #8]	@ (800159c <HAL_RCC_GetHCLKFreq+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000000 	.word	0x20000000

080015a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015a4:	f7ff fff2 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	4903      	ldr	r1, [pc, #12]	@ (80015c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08006634 	.word	0x08006634

080015c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015cc:	f7ff ffde 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	0adb      	lsrs	r3, r3, #11
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	4903      	ldr	r1, [pc, #12]	@ (80015ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08006634 	.word	0x08006634

080015f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	220f      	movs	r2, #15
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_RCC_GetClockConfig+0x58>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_RCC_GetClockConfig+0x58>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_RCC_GetClockConfig+0x58>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <HAL_RCC_GetClockConfig+0x58>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_RCC_GetClockConfig+0x5c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0207 	and.w	r2, r3, #7
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000
 800164c:	40022000 	.word	0x40022000

08001650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <RCC_Delay+0x34>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <RCC_Delay+0x38>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0a5b      	lsrs	r3, r3, #9
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800166c:	bf00      	nop
  }
  while (Delay --);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	60fa      	str	r2, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f9      	bne.n	800166c <RCC_Delay+0x1c>
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000000 	.word	0x20000000
 8001688:	10624dd3 	.word	0x10624dd3

0800168c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e041      	b.n	8001722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f839 	bl	800172a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4610      	mov	r0, r2
 80016cc:	f000 f99c 	bl	8001a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d001      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e03a      	b.n	80017ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a18      	ldr	r2, [pc, #96]	@ (80017d4 <HAL_TIM_Base_Start_IT+0x98>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00e      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x58>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800177e:	d009      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x58>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d004      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x58>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <HAL_TIM_Base_Start_IT+0xa0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d111      	bne.n	80017b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d010      	beq.n	80017c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b6:	e007      	b.n	80017c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	40000400 	.word	0x40000400
 80017dc:	40000800 	.word	0x40000800

080017e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d020      	beq.n	8001844 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01b      	beq.n	8001844 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0202 	mvn.w	r2, #2
 8001814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f8d1 	bl	80019d2 <HAL_TIM_IC_CaptureCallback>
 8001830:	e005      	b.n	800183e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f8c4 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f8d3 	bl	80019e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d020      	beq.n	8001890 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01b      	beq.n	8001890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0204 	mvn.w	r2, #4
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8ab 	bl	80019d2 <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f89e 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f8ad 	bl	80019e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d020      	beq.n	80018dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01b      	beq.n	80018dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0208 	mvn.w	r2, #8
 80018ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2204      	movs	r2, #4
 80018b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f885 	bl	80019d2 <HAL_TIM_IC_CaptureCallback>
 80018c8:	e005      	b.n	80018d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f878 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f887 	bl	80019e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d020      	beq.n	8001928 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01b      	beq.n	8001928 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0210 	mvn.w	r2, #16
 80018f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2208      	movs	r2, #8
 80018fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f85f 	bl	80019d2 <HAL_TIM_IC_CaptureCallback>
 8001914:	e005      	b.n	8001922 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f852 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f861 	bl	80019e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0201 	mvn.w	r2, #1
 8001944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fdaa 	bl	80004a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8c3 	bl	8001af6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00c      	beq.n	8001994 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800198c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f831 	bl	80019f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00c      	beq.n	80019b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0220 	mvn.w	r2, #32
 80019b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f896 	bl	8001ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad8 <TIM_Base_SetConfig+0xd0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00b      	beq.n	8001a38 <TIM_Base_SetConfig+0x30>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a26:	d007      	beq.n	8001a38 <TIM_Base_SetConfig+0x30>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001adc <TIM_Base_SetConfig+0xd4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d003      	beq.n	8001a38 <TIM_Base_SetConfig+0x30>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae0 <TIM_Base_SetConfig+0xd8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d108      	bne.n	8001a4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <TIM_Base_SetConfig+0xd0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00b      	beq.n	8001a6a <TIM_Base_SetConfig+0x62>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a58:	d007      	beq.n	8001a6a <TIM_Base_SetConfig+0x62>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <TIM_Base_SetConfig+0xd4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d003      	beq.n	8001a6a <TIM_Base_SetConfig+0x62>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <TIM_Base_SetConfig+0xd8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d108      	bne.n	8001a7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <TIM_Base_SetConfig+0xd0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d103      	bne.n	8001ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f023 0201 	bic.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e042      	b.n	8001ba0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fd06 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2224      	movs	r2, #36	@ 0x24
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f971 	bl	8001e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d175      	bne.n	8001cb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_UART_Transmit+0x2c>
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e06e      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2221      	movs	r2, #33	@ 0x21
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001be6:	f7fe fe71 	bl	80008cc <HAL_GetTick>
 8001bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c00:	d108      	bne.n	8001c14 <HAL_UART_Transmit+0x6c>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d104      	bne.n	8001c14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e003      	b.n	8001c1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c1c:	e02e      	b.n	8001c7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2180      	movs	r1, #128	@ 0x80
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f848 	bl	8001cbe <UART_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e03a      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e007      	b.n	8001c6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1cb      	bne.n	8001c1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2140      	movs	r1, #64	@ 0x40
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f814 	bl	8001cbe <UART_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e006      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e000      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cce:	e03b      	b.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	d037      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd8:	f7fe fdf8 	bl	80008cc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	6a3a      	ldr	r2, [r7, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d302      	bcc.n	8001cee <UART_WaitOnFlagUntilTimeout+0x30>
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e03a      	b.n	8001d68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b80      	cmp	r3, #128	@ 0x80
 8001d04:	d020      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d01d      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d116      	bne.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f81d 	bl	8001d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2208      	movs	r2, #8
 8001d3a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e00f      	b.n	8001d68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4013      	ands	r3, r2
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d0b4      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b095      	sub	sp, #84	@ 0x54
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d82:	e853 3f00 	ldrex	r3, [r3]
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	330c      	adds	r3, #12
 8001d96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d98:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001da0:	e841 2300 	strex	r3, r2, [r1]
 8001da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3314      	adds	r3, #20
 8001db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	e853 3f00 	ldrex	r3, [r3]
 8001dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3314      	adds	r3, #20
 8001dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dd4:	e841 2300 	strex	r3, r2, [r1]
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e5      	bne.n	8001dac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d119      	bne.n	8001e1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	e853 3f00 	ldrex	r3, [r3]
 8001df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f023 0310 	bic.w	r3, r3, #16
 8001dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	330c      	adds	r3, #12
 8001e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e08:	61ba      	str	r2, [r7, #24]
 8001e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	e841 2300 	strex	r3, r2, [r1]
 8001e14:	613b      	str	r3, [r7, #16]
   return(result);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e5      	bne.n	8001de8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e2a:	bf00      	nop
 8001e2c:	3754      	adds	r7, #84	@ 0x54
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e6e:	f023 030c 	bic.w	r3, r3, #12
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a2c      	ldr	r2, [pc, #176]	@ (8001f48 <UART_SetConfig+0x114>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d103      	bne.n	8001ea4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e9c:	f7ff fb94 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	e002      	b.n	8001eaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f7ff fb7c 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009a      	lsls	r2, r3, #2
 8001eb4:	441a      	add	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	4a22      	ldr	r2, [pc, #136]	@ (8001f4c <UART_SetConfig+0x118>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	0119      	lsls	r1, r3, #4
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	441a      	add	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <UART_SetConfig+0x118>)
 8001ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2064      	movs	r0, #100	@ 0x64
 8001eea:	fb00 f303 	mul.w	r3, r0, r3
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	3332      	adds	r3, #50	@ 0x32
 8001ef4:	4a15      	ldr	r2, [pc, #84]	@ (8001f4c <UART_SetConfig+0x118>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f00:	4419      	add	r1, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	009a      	lsls	r2, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <UART_SetConfig+0x118>)
 8001f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2064      	movs	r0, #100	@ 0x64
 8001f22:	fb00 f303 	mul.w	r3, r0, r3
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	3332      	adds	r3, #50	@ 0x32
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <UART_SetConfig+0x118>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	f003 020f 	and.w	r2, r3, #15
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	440a      	add	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	51eb851f 	.word	0x51eb851f

08001f50 <__NVIC_SetPriority>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <SysTick_Handler+0x1c>)
 8001faa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fac:	f002 fa0c 	bl	80043c8 <xTaskGetSchedulerState>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fb6:	f003 f8af 	bl	8005118 <xPortSysTickHandler>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f06f 0004 	mvn.w	r0, #4
 8001fce:	f7ff ffbf 	bl	8001f50 <__NVIC_SetPriority>
#endif
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fde:	f3ef 8305 	mrs	r3, IPSR
 8001fe2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fe4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001fea:	f06f 0305 	mvn.w	r3, #5
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	e00c      	b.n	800200c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <osKernelInitialize+0x40>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <osKernelInitialize+0x40>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e002      	b.n	800200c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	2000012c 	.word	0x2000012c

0800201c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002022:	f3ef 8305 	mrs	r3, IPSR
 8002026:	603b      	str	r3, [r7, #0]
  return(result);
 8002028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <osKernelStart+0x1a>
    stat = osErrorISR;
 800202e:	f06f 0305 	mvn.w	r3, #5
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	e010      	b.n	8002058 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <osKernelStart+0x48>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d109      	bne.n	8002052 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800203e:	f7ff ffc1 	bl	8001fc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <osKernelStart+0x48>)
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002048:	f001 fd4c 	bl	8003ae4 <vTaskStartScheduler>
      stat = osOK;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	e002      	b.n	8002058 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000012c 	.word	0x2000012c

08002068 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800206e:	f3ef 8305 	mrs	r3, IPSR
 8002072:	603b      	str	r3, [r7, #0]
  return(result);
 8002074:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800207a:	f001 fe5d 	bl	8003d38 <xTaskGetTickCountFromISR>
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	e002      	b.n	8002088 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8002082:	f001 fe4b 	bl	8003d1c <xTaskGetTickCount>
 8002086:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002092:	b580      	push	{r7, lr}
 8002094:	b08e      	sub	sp, #56	@ 0x38
 8002096:	af04      	add	r7, sp, #16
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020a2:	f3ef 8305 	mrs	r3, IPSR
 80020a6:	617b      	str	r3, [r7, #20]
  return(result);
 80020a8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d17e      	bne.n	80021ac <osThreadNew+0x11a>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d07b      	beq.n	80021ac <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020b8:	2318      	movs	r3, #24
 80020ba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d045      	beq.n	8002158 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <osThreadNew+0x48>
        name = attr->name;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <osThreadNew+0x6e>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	2b38      	cmp	r3, #56	@ 0x38
 80020f2:	d805      	bhi.n	8002100 <osThreadNew+0x6e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <osThreadNew+0x72>
        return (NULL);
 8002100:	2300      	movs	r3, #0
 8002102:	e054      	b.n	80021ae <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <osThreadNew+0xa8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2ba7      	cmp	r3, #167	@ 0xa7
 8002122:	d90a      	bls.n	800213a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <osThreadNew+0xa8>
        mem = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e010      	b.n	800215c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <osThreadNew+0xca>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d108      	bne.n	800215c <osThreadNew+0xca>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <osThreadNew+0xca>
          mem = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	e001      	b.n	800215c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d110      	bne.n	8002184 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800216a:	9202      	str	r2, [sp, #8]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f001 fa75 	bl	8003668 <xTaskCreateStatic>
 800217e:	4603      	mov	r3, r0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	e013      	b.n	80021ac <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d110      	bne.n	80021ac <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	b29a      	uxth	r2, r3
 800218e:	f107 0310 	add.w	r3, r7, #16
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f001 fac3 	bl	8003728 <xTaskCreate>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d001      	beq.n	80021ac <osThreadNew+0x11a>
            hTask = NULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3728      	adds	r7, #40	@ 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021be:	f3ef 8305 	mrs	r3, IPSR
 80021c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80021c4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80021ca:	f06f 0305 	mvn.w	r3, #5
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e019      	b.n	8002206 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80021d6:	f001 fda1 	bl	8003d1c <xTaskGetTickCount>
 80021da:	4603      	mov	r3, r0
 80021dc:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <osDelayUntil+0x4a>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db06      	blt.n	8002200 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	6939      	ldr	r1, [r7, #16]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 fbf3 	bl	80039e4 <vTaskDelayUntil>
 80021fe:	e002      	b.n	8002206 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8002200:	f06f 0303 	mvn.w	r3, #3
 8002204:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002206:	697b      	ldr	r3, [r7, #20]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002220:	f3ef 8305 	mrs	r3, IPSR
 8002224:	613b      	str	r3, [r7, #16]
  return(result);
 8002226:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002228:	2b00      	cmp	r3, #0
 800222a:	d175      	bne.n	8002318 <osSemaphoreNew+0x108>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d072      	beq.n	8002318 <osSemaphoreNew+0x108>
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	429a      	cmp	r2, r3
 8002238:	d86e      	bhi.n	8002318 <osSemaphoreNew+0x108>
    mem = -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d006      	beq.n	800225c <osSemaphoreNew+0x4c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b4f      	cmp	r3, #79	@ 0x4f
 8002254:	d902      	bls.n	800225c <osSemaphoreNew+0x4c>
        mem = 1;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	e00c      	b.n	8002276 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <osSemaphoreNew+0x66>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <osSemaphoreNew+0x66>
          mem = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e001      	b.n	8002276 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d04c      	beq.n	8002318 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d128      	bne.n	80022d6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10a      	bne.n	80022a0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2203      	movs	r2, #3
 8002290:	9200      	str	r2, [sp, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2001      	movs	r0, #1
 8002298:	f000 fa26 	bl	80026e8 <xQueueGenericCreateStatic>
 800229c:	61f8      	str	r0, [r7, #28]
 800229e:	e005      	b.n	80022ac <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80022a0:	2203      	movs	r2, #3
 80022a2:	2100      	movs	r1, #0
 80022a4:	2001      	movs	r0, #1
 80022a6:	f000 fa9c 	bl	80027e2 <xQueueGenericCreate>
 80022aa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d022      	beq.n	80022f8 <osSemaphoreNew+0xe8>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01f      	beq.n	80022f8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	69f8      	ldr	r0, [r7, #28]
 80022c0:	f000 fb5c 	bl	800297c <xQueueGenericSend>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d016      	beq.n	80022f8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80022ca:	69f8      	ldr	r0, [r7, #28]
 80022cc:	f000 fffa 	bl	80032c4 <vQueueDelete>
            hSemaphore = NULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	e010      	b.n	80022f8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d108      	bne.n	80022ee <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fada 	bl	800289e <xQueueCreateCountingSemaphoreStatic>
 80022ea:	61f8      	str	r0, [r7, #28]
 80022ec:	e004      	b.n	80022f8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fb0d 	bl	8002910 <xQueueCreateCountingSemaphore>
 80022f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <osSemaphoreNew+0xfc>
          name = attr->name;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e001      	b.n	8002310 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002310:	6979      	ldr	r1, [r7, #20]
 8002312:	69f8      	ldr	r0, [r7, #28]
 8002314:	f001 f922 	bl	800355c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002318:	69fb      	ldr	r3, [r7, #28]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800233c:	f06f 0303 	mvn.w	r3, #3
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e039      	b.n	80023b8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002344:	f3ef 8305 	mrs	r3, IPSR
 8002348:	60fb      	str	r3, [r7, #12]
  return(result);
 800234a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002356:	f06f 0303 	mvn.w	r3, #3
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e02c      	b.n	80023b8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	461a      	mov	r2, r3
 8002368:	2100      	movs	r1, #0
 800236a:	6938      	ldr	r0, [r7, #16]
 800236c:	f000 ff28 	bl	80031c0 <xQueueReceiveFromISR>
 8002370:	4603      	mov	r3, r0
 8002372:	2b01      	cmp	r3, #1
 8002374:	d003      	beq.n	800237e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002376:	f06f 0302 	mvn.w	r3, #2
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e01c      	b.n	80023b8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d019      	beq.n	80023b8 <osSemaphoreAcquire+0x94>
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <osSemaphoreAcquire+0xa0>)
 8002386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	e010      	b.n	80023b8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	6938      	ldr	r0, [r7, #16]
 800239a:	f000 fe01 	bl	8002fa0 <xQueueSemaphoreTake>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d009      	beq.n	80023b8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80023aa:	f06f 0301 	mvn.w	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e002      	b.n	80023b8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80023b2:	f06f 0302 	mvn.w	r3, #2
 80023b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80023b8:	697b      	ldr	r3, [r7, #20]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	e000ed04 	.word	0xe000ed04

080023c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80023de:	f06f 0303 	mvn.w	r3, #3
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e02c      	b.n	8002440 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023e6:	f3ef 8305 	mrs	r3, IPSR
 80023ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80023ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01a      	beq.n	8002428 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80023f6:	f107 0308 	add.w	r3, r7, #8
 80023fa:	4619      	mov	r1, r3
 80023fc:	6938      	ldr	r0, [r7, #16]
 80023fe:	f000 fc5d 	bl	8002cbc <xQueueGiveFromISR>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	d003      	beq.n	8002410 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002408:	f06f 0302 	mvn.w	r3, #2
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e017      	b.n	8002440 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d014      	beq.n	8002440 <osSemaphoreRelease+0x78>
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <osSemaphoreRelease+0x84>)
 8002418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	e00b      	b.n	8002440 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	6938      	ldr	r0, [r7, #16]
 8002430:	f000 faa4 	bl	800297c <xQueueGenericSend>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d002      	beq.n	8002440 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800243a:	f06f 0302 	mvn.w	r3, #2
 800243e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002440:	697b      	ldr	r3, [r7, #20]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000ed04 	.word	0xe000ed04

08002450 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a06      	ldr	r2, [pc, #24]	@ (8002478 <vApplicationGetIdleTaskMemory+0x28>)
 8002460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4a05      	ldr	r2, [pc, #20]	@ (800247c <vApplicationGetIdleTaskMemory+0x2c>)
 8002466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2280      	movs	r2, #128	@ 0x80
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	20000130 	.word	0x20000130
 800247c:	200001d8 	.word	0x200001d8

08002480 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a07      	ldr	r2, [pc, #28]	@ (80024ac <vApplicationGetTimerTaskMemory+0x2c>)
 8002490:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <vApplicationGetTimerTaskMemory+0x30>)
 8002496:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800249e:	601a      	str	r2, [r3, #0]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	200003d8 	.word	0x200003d8
 80024b0:	20000480 	.word	0x20000480

080024b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0208 	add.w	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f103 0208 	add.w	r2, r3, #8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0208 	add.w	r2, r3, #8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d103      	bne.n	8002570 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e00c      	b.n	800258a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3308      	adds	r3, #8
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e002      	b.n	800257e <vListInsert+0x2e>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	d2f6      	bcs.n	8002578 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6892      	ldr	r2, [r2, #8]
 80025d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6852      	ldr	r2, [r2, #4]
 80025e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d103      	bne.n	80025f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1e5a      	subs	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
	...

08002614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002640:	f002 fcec 	bl	800501c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	441a      	add	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	3b01      	subs	r3, #1
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	441a      	add	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	22ff      	movs	r2, #255	@ 0xff
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	22ff      	movs	r2, #255	@ 0xff
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01a      	beq.n	80026d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3310      	adds	r3, #16
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fcca 	bl	800403c <xTaskRemoveFromEventList>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026ae:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <xQueueGenericReset+0xd0>)
 80026b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	e009      	b.n	80026d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3310      	adds	r3, #16
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fef5 	bl	80024b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3324      	adds	r3, #36	@ 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fef0 	bl	80024b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026d4:	f002 fcd2 	bl	800507c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026d8:	2301      	movs	r3, #1
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08e      	sub	sp, #56	@ 0x38
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <xQueueGenericCreateStatic+0x56>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <xQueueGenericCreateStatic+0x5a>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <xQueueGenericCreateStatic+0x5c>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	623b      	str	r3, [r7, #32]
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <xQueueGenericCreateStatic+0x84>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <xQueueGenericCreateStatic+0x88>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <xQueueGenericCreateStatic+0x8a>
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	61fb      	str	r3, [r7, #28]
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800278e:	2350      	movs	r3, #80	@ 0x50
 8002790:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b50      	cmp	r3, #80	@ 0x50
 8002796:	d00b      	beq.n	80027b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	61bb      	str	r3, [r7, #24]
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80027b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80027c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f840 	bl	8002858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80027da:	4618      	mov	r0, r3
 80027dc:	3730      	adds	r7, #48	@ 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b08a      	sub	sp, #40	@ 0x28
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	4613      	mov	r3, r2
 80027ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10b      	bne.n	800280e <xQueueGenericCreate+0x2c>
	__asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	613b      	str	r3, [r7, #16]
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	e7fd      	b.n	800280a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3350      	adds	r3, #80	@ 0x50
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fcff 	bl	8005220 <pvPortMalloc>
 8002822:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d011      	beq.n	800284e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3350      	adds	r3, #80	@ 0x50
 8002832:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f805 	bl	8002858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800284e:	69bb      	ldr	r3, [r7, #24]
	}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e002      	b.n	800287a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002886:	2101      	movs	r1, #1
 8002888:	69b8      	ldr	r0, [r7, #24]
 800288a:	f7ff fec3 	bl	8002614 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b08a      	sub	sp, #40	@ 0x28
 80028a2:	af02      	add	r7, sp, #8
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	61bb      	str	r3, [r7, #24]
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d90b      	bls.n	80028e8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	617b      	str	r3, [r7, #20]
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80028e8:	2302      	movs	r3, #2
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fef8 	bl	80026e8 <xQueueGenericCreateStatic>
 80028f8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002906:	69fb      	ldr	r3, [r7, #28]
	}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	613b      	str	r3, [r7, #16]
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	d90b      	bls.n	8002958 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60fb      	str	r3, [r7, #12]
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002958:	2202      	movs	r2, #2
 800295a:	2100      	movs	r1, #0
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff40 	bl	80027e2 <xQueueGenericCreate>
 8002962:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002970:	697b      	ldr	r3, [r7, #20]
	}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	@ 0x38
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800298a:	2300      	movs	r3, #0
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10b      	bne.n	80029b0 <xQueueGenericSend+0x34>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <xQueueGenericSend+0x42>
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <xQueueGenericSend+0x46>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <xQueueGenericSend+0x48>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <xQueueGenericSend+0x64>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d103      	bne.n	80029ee <xQueueGenericSend+0x72>
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <xQueueGenericSend+0x76>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <xQueueGenericSend+0x78>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <xQueueGenericSend+0x94>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	623b      	str	r3, [r7, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a10:	f001 fcda 	bl	80043c8 <xTaskGetSchedulerState>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <xQueueGenericSend+0xa4>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <xQueueGenericSend+0xa8>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <xQueueGenericSend+0xaa>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10b      	bne.n	8002a42 <xQueueGenericSend+0xc6>
	__asm volatile
 8002a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	61fb      	str	r3, [r7, #28]
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	e7fd      	b.n	8002a3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a42:	f002 faeb 	bl	800501c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <xQueueGenericSend+0xdc>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d129      	bne.n	8002aac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a5e:	f000 fc6c 	bl	800333a <prvCopyDataToQueue>
 8002a62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d010      	beq.n	8002a8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	3324      	adds	r3, #36	@ 0x24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fae3 	bl	800403c <xTaskRemoveFromEventList>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b7c <xQueueGenericSend+0x200>)
 8002a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	e00a      	b.n	8002aa4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a94:	4b39      	ldr	r3, [pc, #228]	@ (8002b7c <xQueueGenericSend+0x200>)
 8002a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002aa4:	f002 faea 	bl	800507c <vPortExitCritical>
				return pdPASS;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e063      	b.n	8002b74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ab2:	f002 fae3 	bl	800507c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e05c      	b.n	8002b74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f001 fb1d 	bl	8004104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aca:	2301      	movs	r3, #1
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ace:	f002 fad5 	bl	800507c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ad2:	f001 f877 	bl	8003bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ad6:	f002 faa1 	bl	800501c <vPortEnterCritical>
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae6:	d103      	bne.n	8002af0 <xQueueGenericSend+0x174>
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d103      	bne.n	8002b06 <xQueueGenericSend+0x18a>
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b06:	f002 fab9 	bl	800507c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b0a:	1d3a      	adds	r2, r7, #4
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 fb0c 	bl	8004130 <xTaskCheckForTimeOut>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d124      	bne.n	8002b68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b20:	f000 fd03 	bl	800352a <prvIsQueueFull>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d018      	beq.n	8002b5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 fa30 	bl	8003f98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b3a:	f000 fc8e 	bl	800345a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b3e:	f001 f84f 	bl	8003be0 <xTaskResumeAll>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f af7c 	bne.w	8002a42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <xQueueGenericSend+0x200>)
 8002b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	e772      	b.n	8002a42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b5e:	f000 fc7c 	bl	800345a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b62:	f001 f83d 	bl	8003be0 <xTaskResumeAll>
 8002b66:	e76c      	b.n	8002a42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b6a:	f000 fc76 	bl	800345a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b6e:	f001 f837 	bl	8003be0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3738      	adds	r7, #56	@ 0x38
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b090      	sub	sp, #64	@ 0x40
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSendFromISR+0x3e>
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <xQueueGenericSendFromISR+0x42>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericSendFromISR+0x44>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d103      	bne.n	8002bee <xQueueGenericSendFromISR+0x6e>
 8002be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x72>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueGenericSendFromISR+0x74>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	623b      	str	r3, [r7, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c10:	f002 fac6 	bl	80051a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c14:	f3ef 8211 	mrs	r2, BASEPRI
 8002c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	61fa      	str	r2, [r7, #28]
 8002c2a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c2e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d302      	bcc.n	8002c42 <xQueueGenericSendFromISR+0xc2>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d12f      	bne.n	8002ca2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c58:	f000 fb6f 	bl	800333a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d112      	bne.n	8002c8c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c70:	3324      	adds	r3, #36	@ 0x24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f9e2 	bl	800403c <xTaskRemoveFromEventList>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00e      	beq.n	8002c9c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e007      	b.n	8002c9c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c90:	3301      	adds	r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	b25a      	sxtb	r2, r3
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002ca0:	e001      	b.n	8002ca6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3740      	adds	r7, #64	@ 0x40
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	623b      	str	r3, [r7, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	61fb      	str	r3, [r7, #28]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <xQueueGiveFromISR+0x5c>
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <xQueueGiveFromISR+0x60>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <xQueueGiveFromISR+0x62>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	61bb      	str	r3, [r7, #24]
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	e7fd      	b.n	8002d36 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d3a:	f002 fa31 	bl	80051a0 <vPortValidateInterruptPriority>
	__asm volatile
 8002d3e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	617a      	str	r2, [r7, #20]
 8002d54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002d56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d22b      	bcs.n	8002dc2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d112      	bne.n	8002dac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	3324      	adds	r3, #36	@ 0x24
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f952 	bl	800403c <xTaskRemoveFromEventList>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e007      	b.n	8002dbc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002db0:	3301      	adds	r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	b25a      	sxtb	r2, r3
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dc0:	e001      	b.n	8002dc6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f383 8811 	msr	BASEPRI, r3
}
 8002dd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3738      	adds	r7, #56	@ 0x38
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <xQueueReceive+0x32>
	__asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	623b      	str	r3, [r7, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	e7fd      	b.n	8002e0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <xQueueReceive+0x40>
 8002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <xQueueReceive+0x44>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <xQueueReceive+0x46>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <xQueueReceive+0x62>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	61fb      	str	r3, [r7, #28]
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	e7fd      	b.n	8002e3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e3e:	f001 fac3 	bl	80043c8 <xTaskGetSchedulerState>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <xQueueReceive+0x72>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <xQueueReceive+0x76>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueReceive+0x78>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <xQueueReceive+0x94>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	61bb      	str	r3, [r7, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e70:	f002 f8d4 	bl	800501c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01f      	beq.n	8002ec0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e84:	f000 fac3 	bl	800340e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	1e5a      	subs	r2, r3, #1
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00f      	beq.n	8002eb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	3310      	adds	r3, #16
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f8cd 	bl	800403c <xTaskRemoveFromEventList>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8002f9c <xQueueReceive+0x1c0>)
 8002eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eb8:	f002 f8e0 	bl	800507c <vPortExitCritical>
				return pdPASS;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e069      	b.n	8002f94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ec6:	f002 f8d9 	bl	800507c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e062      	b.n	8002f94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ed4:	f107 0310 	add.w	r3, r7, #16
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 f913 	bl	8004104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ee2:	f002 f8cb 	bl	800507c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ee6:	f000 fe6d 	bl	8003bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eea:	f002 f897 	bl	800501c <vPortEnterCritical>
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d103      	bne.n	8002f04 <xQueueReceive+0x128>
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d103      	bne.n	8002f1a <xQueueReceive+0x13e>
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f1a:	f002 f8af 	bl	800507c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f1e:	1d3a      	adds	r2, r7, #4
 8002f20:	f107 0310 	add.w	r3, r7, #16
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 f902 	bl	8004130 <xTaskCheckForTimeOut>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d123      	bne.n	8002f7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f34:	f000 fae3 	bl	80034fe <prvIsQueueEmpty>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d017      	beq.n	8002f6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	3324      	adds	r3, #36	@ 0x24
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f826 	bl	8003f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f4e:	f000 fa84 	bl	800345a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f52:	f000 fe45 	bl	8003be0 <xTaskResumeAll>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d189      	bne.n	8002e70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f9c <xQueueReceive+0x1c0>)
 8002f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	e780      	b.n	8002e70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f70:	f000 fa73 	bl	800345a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f74:	f000 fe34 	bl	8003be0 <xTaskResumeAll>
 8002f78:	e77a      	b.n	8002e70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f7c:	f000 fa6d 	bl	800345a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f80:	f000 fe2e 	bl	8003be0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f86:	f000 faba 	bl	80034fe <prvIsQueueEmpty>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f43f af6f 	beq.w	8002e70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3730      	adds	r7, #48	@ 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08e      	sub	sp, #56	@ 0x38
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	623b      	str	r3, [r7, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61fb      	str	r3, [r7, #28]
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ff4:	f001 f9e8 	bl	80043c8 <xTaskGetSchedulerState>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <xQueueSemaphoreTake+0x64>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <xQueueSemaphoreTake+0x68>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <xQueueSemaphoreTake+0x6a>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	61bb      	str	r3, [r7, #24]
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003026:	f001 fff9 	bl	800501c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800302a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d024      	beq.n	8003080 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003046:	f001 fb39 	bl	80046bc <pvTaskIncrementMutexHeldCount>
 800304a:	4602      	mov	r2, r0
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00f      	beq.n	8003078 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305a:	3310      	adds	r3, #16
 800305c:	4618      	mov	r0, r3
 800305e:	f000 ffed 	bl	800403c <xTaskRemoveFromEventList>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003068:	4b54      	ldr	r3, [pc, #336]	@ (80031bc <xQueueSemaphoreTake+0x21c>)
 800306a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003078:	f002 f800 	bl	800507c <vPortExitCritical>
				return pdPASS;
 800307c:	2301      	movs	r3, #1
 800307e:	e098      	b.n	80031b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d112      	bne.n	80030ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	617b      	str	r3, [r7, #20]
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030a4:	f001 ffea 	bl	800507c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e082      	b.n	80031b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f824 	bl	8004104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030c0:	f001 ffdc 	bl	800507c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030c4:	f000 fd7e 	bl	8003bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030c8:	f001 ffa8 	bl	800501c <vPortEnterCritical>
 80030cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d103      	bne.n	80030e2 <xQueueSemaphoreTake+0x142>
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d103      	bne.n	80030f8 <xQueueSemaphoreTake+0x158>
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030f8:	f001 ffc0 	bl	800507c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030fc:	463a      	mov	r2, r7
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f001 f813 	bl	8004130 <xTaskCheckForTimeOut>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d132      	bne.n	8003176 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003112:	f000 f9f4 	bl	80034fe <prvIsQueueEmpty>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d026      	beq.n	800316a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003124:	f001 ff7a 	bl	800501c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f969 	bl	8004404 <xTaskPriorityInherit>
 8003132:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003134:	f001 ffa2 	bl	800507c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	3324      	adds	r3, #36	@ 0x24
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f000 ff29 	bl	8003f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003148:	f000 f987 	bl	800345a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800314c:	f000 fd48 	bl	8003be0 <xTaskResumeAll>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	f47f af67 	bne.w	8003026 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003158:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <xQueueSemaphoreTake+0x21c>)
 800315a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	e75d      	b.n	8003026 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800316a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800316c:	f000 f975 	bl	800345a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003170:	f000 fd36 	bl	8003be0 <xTaskResumeAll>
 8003174:	e757      	b.n	8003026 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003176:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003178:	f000 f96f 	bl	800345a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800317c:	f000 fd30 	bl	8003be0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003180:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003182:	f000 f9bc 	bl	80034fe <prvIsQueueEmpty>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f43f af4c 	beq.w	8003026 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003194:	f001 ff42 	bl	800501c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003198:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800319a:	f000 f8b7 	bl	800330c <prvGetDisinheritPriorityAfterTimeout>
 800319e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fa04 	bl	80045b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031ac:	f001 ff66 	bl	800507c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3738      	adds	r7, #56	@ 0x38
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000ed04 	.word	0xe000ed04

080031c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	@ 0x38
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80031d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	623b      	str	r3, [r7, #32]
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <xQueueReceiveFromISR+0x3c>
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <xQueueReceiveFromISR+0x40>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <xQueueReceiveFromISR+0x42>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	61fb      	str	r3, [r7, #28]
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800321e:	f001 ffbf 	bl	80051a0 <vPortValidateInterruptPriority>
	__asm volatile
 8003222:	f3ef 8211 	mrs	r2, BASEPRI
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	61ba      	str	r2, [r7, #24]
 8003238:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800323a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003242:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02f      	beq.n	80032aa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003258:	f000 f8d9 	bl	800340e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003262:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003264:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d112      	bne.n	8003294 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	3310      	adds	r3, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fede 	bl	800403c <xTaskRemoveFromEventList>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e007      	b.n	80032a4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003298:	3301      	adds	r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	b25a      	sxtb	r2, r3
 800329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80032a4:	2301      	movs	r3, #1
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032a8:	e001      	b.n	80032ae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f383 8811 	msr	BASEPRI, r3
}
 80032b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3738      	adds	r7, #56	@ 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <vQueueDelete+0x2a>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	60bb      	str	r3, [r7, #8]
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	e7fd      	b.n	80032ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f95c 	bl	80035ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f002 f85c 	bl	80053bc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	d006      	beq.n	800332a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e001      	b.n	800332e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800332e:	68fb      	ldr	r3, [r7, #12]
	}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d14d      	bne.n	80033fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f001 f8b5 	bl	80044d4 <xTaskPriorityDisinherit>
 800336a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	e043      	b.n	80033fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d119      	bne.n	80033ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6858      	ldr	r0, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	461a      	mov	r2, r3
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	f002 fb20 	bl	80059ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	441a      	add	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d32b      	bcc.n	80033fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	e026      	b.n	80033fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68d8      	ldr	r0, [r3, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	461a      	mov	r2, r3
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	f002 fb06 	bl	80059ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	425b      	negs	r3, r3
 80033c8:	441a      	add	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d207      	bcs.n	80033ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	425b      	negs	r3, r3
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d105      	bne.n	80033fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003404:	697b      	ldr	r3, [r7, #20]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d018      	beq.n	8003452 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	441a      	add	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d303      	bcc.n	8003442 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	461a      	mov	r2, r3
 800344c:	6838      	ldr	r0, [r7, #0]
 800344e:	f002 fabc 	bl	80059ca <memcpy>
	}
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003462:	f001 fddb 	bl	800501c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800346c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800346e:	e011      	b.n	8003494 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3324      	adds	r3, #36	@ 0x24
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fddd 	bl	800403c <xTaskRemoveFromEventList>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003488:	f000 feb6 	bl	80041f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	3b01      	subs	r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003498:	2b00      	cmp	r3, #0
 800349a:	dce9      	bgt.n	8003470 <prvUnlockQueue+0x16>
 800349c:	e000      	b.n	80034a0 <prvUnlockQueue+0x46>
					break;
 800349e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	22ff      	movs	r2, #255	@ 0xff
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80034a8:	f001 fde8 	bl	800507c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ac:	f001 fdb6 	bl	800501c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b8:	e011      	b.n	80034de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3310      	adds	r3, #16
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fdb8 	bl	800403c <xTaskRemoveFromEventList>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034d2:	f000 fe91 	bl	80041f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034d6:	7bbb      	ldrb	r3, [r7, #14]
 80034d8:	3b01      	subs	r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dce9      	bgt.n	80034ba <prvUnlockQueue+0x60>
 80034e6:	e000      	b.n	80034ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	22ff      	movs	r2, #255	@ 0xff
 80034ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034f2:	f001 fdc3 	bl	800507c <vPortExitCritical>
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003506:	f001 fd89 	bl	800501c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003512:	2301      	movs	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e001      	b.n	800351c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351c:	f001 fdae 	bl	800507c <vPortExitCritical>

	return xReturn;
 8003520:	68fb      	ldr	r3, [r7, #12]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003532:	f001 fd73 	bl	800501c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	429a      	cmp	r2, r3
 8003540:	d102      	bne.n	8003548 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e001      	b.n	800354c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800354c:	f001 fd96 	bl	800507c <vPortExitCritical>

	return xReturn;
 8003550:	68fb      	ldr	r3, [r7, #12]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e014      	b.n	8003596 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800356c:	4a0e      	ldr	r2, [pc, #56]	@ (80035a8 <vQueueAddToRegistry+0x4c>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003578:	490b      	ldr	r1, [pc, #44]	@ (80035a8 <vQueueAddToRegistry+0x4c>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003582:	4a09      	ldr	r2, [pc, #36]	@ (80035a8 <vQueueAddToRegistry+0x4c>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800358e:	e006      	b.n	800359e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b07      	cmp	r3, #7
 800359a:	d9e7      	bls.n	800356c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	20000880 	.word	0x20000880

080035ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e016      	b.n	80035e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80035ba:	4a10      	ldr	r2, [pc, #64]	@ (80035fc <vQueueUnregisterQueue+0x50>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d10b      	bne.n	80035e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80035ca:	4a0c      	ldr	r2, [pc, #48]	@ (80035fc <vQueueUnregisterQueue+0x50>)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2100      	movs	r1, #0
 80035d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80035d4:	4a09      	ldr	r2, [pc, #36]	@ (80035fc <vQueueUnregisterQueue+0x50>)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
				break;
 80035e0:	e006      	b.n	80035f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b07      	cmp	r3, #7
 80035ec:	d9e5      	bls.n	80035ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000880 	.word	0x20000880

08003600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003610:	f001 fd04 	bl	800501c <vPortEnterCritical>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800361a:	b25b      	sxtb	r3, r3
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d103      	bne.n	800362a <vQueueWaitForMessageRestricted+0x2a>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003630:	b25b      	sxtb	r3, r3
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d103      	bne.n	8003640 <vQueueWaitForMessageRestricted+0x40>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003640:	f001 fd1c 	bl	800507c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3324      	adds	r3, #36	@ 0x24
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fcc5 	bl	8003fe4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff fefd 	bl	800345a <prvUnlockQueue>
	}
 8003660:	bf00      	nop
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08e      	sub	sp, #56	@ 0x38
 800366c:	af04      	add	r7, sp, #16
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <xTaskCreateStatic+0x2c>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	623b      	str	r3, [r7, #32]
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	61fb      	str	r3, [r7, #28]
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036b2:	23a8      	movs	r3, #168	@ 0xa8
 80036b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80036ba:	d00b      	beq.n	80036d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	61bb      	str	r3, [r7, #24]
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01e      	beq.n	800371a <xTaskCreateStatic+0xb2>
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01b      	beq.n	800371a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036f4:	2300      	movs	r3, #0
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	9302      	str	r3, [sp, #8]
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f851 	bl	80037b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003712:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003714:	f000 f8f6 	bl	8003904 <prvAddNewTaskToReadyList>
 8003718:	e001      	b.n	800371e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800371e:	697b      	ldr	r3, [r7, #20]
	}
 8003720:	4618      	mov	r0, r3
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	@ 0x30
 800372c:	af04      	add	r7, sp, #16
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fd6f 	bl	8005220 <pvPortMalloc>
 8003742:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00e      	beq.n	8003768 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800374a:	20a8      	movs	r0, #168	@ 0xa8
 800374c:	f001 fd68 	bl	8005220 <pvPortMalloc>
 8003750:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
 800375e:	e005      	b.n	800376c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003760:	6978      	ldr	r0, [r7, #20]
 8003762:	f001 fe2b 	bl	80053bc <vPortFree>
 8003766:	e001      	b.n	800376c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d017      	beq.n	80037a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	2300      	movs	r3, #0
 800377e:	9303      	str	r3, [sp, #12]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	9302      	str	r3, [sp, #8]
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f80f 	bl	80037b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003796:	69f8      	ldr	r0, [r7, #28]
 8003798:	f000 f8b4 	bl	8003904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800379c:	2301      	movs	r3, #1
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e002      	b.n	80037a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037a8:	69bb      	ldr	r3, [r7, #24]
	}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	21a5      	movs	r1, #165	@ 0xa5
 80037ce:	f002 f82a 	bl	8005826 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037dc:	3b01      	subs	r3, #1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f023 0307 	bic.w	r3, r3, #7
 80037ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	617b      	str	r3, [r7, #20]
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	e7fd      	b.n	800380a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01f      	beq.n	8003854 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e012      	b.n	8003840 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	7819      	ldrb	r1, [r3, #0]
 8003822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	3334      	adds	r3, #52	@ 0x34
 800382a:	460a      	mov	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	4413      	add	r3, r2
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3301      	adds	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	d9e9      	bls.n	800381a <prvInitialiseNewTask+0x66>
 8003846:	e000      	b.n	800384a <prvInitialiseNewTask+0x96>
			{
				break;
 8003848:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003852:	e003      	b.n	800385c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	2b37      	cmp	r3, #55	@ 0x37
 8003860:	d901      	bls.n	8003866 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003862:	2337      	movs	r3, #55	@ 0x37
 8003864:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800386a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003870:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	2200      	movs	r2, #0
 8003876:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	3304      	adds	r3, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fe38 	bl	80024f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	3318      	adds	r3, #24
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fe33 	bl	80024f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003890:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	3354      	adds	r3, #84	@ 0x54
 80038b6:	224c      	movs	r2, #76	@ 0x4c
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 ffb3 	bl	8005826 <memset>
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	4a0d      	ldr	r2, [pc, #52]	@ (80038f8 <prvInitialiseNewTask+0x144>)
 80038c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	4a0c      	ldr	r2, [pc, #48]	@ (80038fc <prvInitialiseNewTask+0x148>)
 80038ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003900 <prvInitialiseNewTask+0x14c>)
 80038d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	68f9      	ldr	r1, [r7, #12]
 80038d6:	69b8      	ldr	r0, [r7, #24]
 80038d8:	f001 fab0 	bl	8004e3c <pxPortInitialiseStack>
 80038dc:	4602      	mov	r2, r0
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ee:	bf00      	nop
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20001b14 	.word	0x20001b14
 80038fc:	20001b7c 	.word	0x20001b7c
 8003900:	20001be4 	.word	0x20001be4

08003904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800390c:	f001 fb86 	bl	800501c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003910:	4b2d      	ldr	r3, [pc, #180]	@ (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a2c      	ldr	r2, [pc, #176]	@ (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800391a:	4b2c      	ldr	r3, [pc, #176]	@ (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003922:	4a2a      	ldr	r2, [pc, #168]	@ (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003930:	f000 fc86 	bl	8004240 <prvInitialiseTaskLists>
 8003934:	e00d      	b.n	8003952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003936:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393e:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d802      	bhi.n	8003952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800394c:	4a1f      	ldr	r2, [pc, #124]	@ (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003952:	4b20      	ldr	r3, [pc, #128]	@ (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a1e      	ldr	r2, [pc, #120]	@ (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800395c:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d903      	bls.n	8003978 <prvAddNewTaskToReadyList+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	4a18      	ldr	r2, [pc, #96]	@ (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a15      	ldr	r2, [pc, #84]	@ (80039dc <prvAddNewTaskToReadyList+0xd8>)
 8003986:	441a      	add	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7fe fdbb 	bl	800250a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003994:	f001 fb72 	bl	800507c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003998:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <prvAddNewTaskToReadyList+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d207      	bcs.n	80039be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ae:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <prvAddNewTaskToReadyList+0xdc>)
 80039b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000d94 	.word	0x20000d94
 80039cc:	200008c0 	.word	0x200008c0
 80039d0:	20000da0 	.word	0x20000da0
 80039d4:	20000db0 	.word	0x20000db0
 80039d8:	20000d9c 	.word	0x20000d9c
 80039dc:	200008c4 	.word	0x200008c4
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	@ 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <vTaskDelayUntil+0x2c>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	617b      	str	r3, [r7, #20]
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <vTaskDelayUntil+0x4a>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	613b      	str	r3, [r7, #16]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad8 <vTaskDelayUntil+0xf4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <vTaskDelayUntil+0x6a>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60fb      	str	r3, [r7, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8003a4e:	f000 f8b9 	bl	8003bc4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <vTaskDelayUntil+0xf8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d20b      	bcs.n	8003a84 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d211      	bcs.n	8003a9a <vTaskDelayUntil+0xb6>
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d90d      	bls.n	8003a9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a82:	e00a      	b.n	8003a9a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d303      	bcc.n	8003a96 <vTaskDelayUntil+0xb2>
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d901      	bls.n	8003a9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003a96:	2301      	movs	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fe18 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003ab4:	f000 f894 	bl	8003be0 <xTaskResumeAll>
 8003ab8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8003ac0:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <vTaskDelayUntil+0xfc>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ad0:	bf00      	nop
 8003ad2:	3728      	adds	r7, #40	@ 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000dbc 	.word	0x20000dbc
 8003adc:	20000d98 	.word	0x20000d98
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003af2:	463a      	mov	r2, r7
 8003af4:	1d39      	adds	r1, r7, #4
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fca8 	bl	8002450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	9202      	str	r2, [sp, #8]
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	460a      	mov	r2, r1
 8003b12:	4924      	ldr	r1, [pc, #144]	@ (8003ba4 <vTaskStartScheduler+0xc0>)
 8003b14:	4824      	ldr	r0, [pc, #144]	@ (8003ba8 <vTaskStartScheduler+0xc4>)
 8003b16:	f7ff fda7 	bl	8003668 <xTaskCreateStatic>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <vTaskStartScheduler+0xc8>)
 8003b1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b20:	4b22      	ldr	r3, [pc, #136]	@ (8003bac <vTaskStartScheduler+0xc8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e001      	b.n	8003b32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b38:	f000 fe28 	bl	800478c <xTimerCreateTimerTask>
 8003b3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d11b      	bne.n	8003b7c <vTaskStartScheduler+0x98>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	613b      	str	r3, [r7, #16]
}
 8003b56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b58:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <vTaskStartScheduler+0xcc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3354      	adds	r3, #84	@ 0x54
 8003b5e:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <vTaskStartScheduler+0xd0>)
 8003b60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b62:	4b15      	ldr	r3, [pc, #84]	@ (8003bb8 <vTaskStartScheduler+0xd4>)
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b6a:	4b14      	ldr	r3, [pc, #80]	@ (8003bbc <vTaskStartScheduler+0xd8>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b70:	4b13      	ldr	r3, [pc, #76]	@ (8003bc0 <vTaskStartScheduler+0xdc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b76:	f001 f9df 	bl	8004f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b7a:	e00f      	b.n	8003b9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d10b      	bne.n	8003b9c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60fb      	str	r3, [r7, #12]
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <vTaskStartScheduler+0xb4>
}
 8003b9c:	bf00      	nop
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	080065b4 	.word	0x080065b4
 8003ba8:	08004211 	.word	0x08004211
 8003bac:	20000db8 	.word	0x20000db8
 8003bb0:	200008c0 	.word	0x200008c0
 8003bb4:	2000001c 	.word	0x2000001c
 8003bb8:	20000db4 	.word	0x20000db4
 8003bbc:	20000da0 	.word	0x20000da0
 8003bc0:	20000d98 	.word	0x20000d98

08003bc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bc8:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <vTaskSuspendAll+0x18>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a03      	ldr	r2, [pc, #12]	@ (8003bdc <vTaskSuspendAll+0x18>)
 8003bd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000dbc 	.word	0x20000dbc

08003be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bee:	4b42      	ldr	r3, [pc, #264]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <xTaskResumeAll+0x2e>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	603b      	str	r3, [r7, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c0e:	f001 fa05 	bl	800501c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c12:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a37      	ldr	r2, [pc, #220]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003c1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1c:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d162      	bne.n	8003cea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c24:	4b35      	ldr	r3, [pc, #212]	@ (8003cfc <xTaskResumeAll+0x11c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05e      	beq.n	8003cea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c2c:	e02f      	b.n	8003c8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c2e:	4b34      	ldr	r3, [pc, #208]	@ (8003d00 <xTaskResumeAll+0x120>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3318      	adds	r3, #24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fcc0 	bl	80025c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fcbb 	bl	80025c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <xTaskResumeAll+0x124>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d903      	bls.n	8003c5e <xTaskResumeAll+0x7e>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d04 <xTaskResumeAll+0x124>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a27      	ldr	r2, [pc, #156]	@ (8003d08 <xTaskResumeAll+0x128>)
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fe fc48 	bl	800250a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7e:	4b23      	ldr	r3, [pc, #140]	@ (8003d0c <xTaskResumeAll+0x12c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003c88:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <xTaskResumeAll+0x130>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <xTaskResumeAll+0x120>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1cb      	bne.n	8003c2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c9c:	f000 fb74 	bl	8004388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d14 <xTaskResumeAll+0x134>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cac:	f000 f856 	bl	8003d5c <xTaskIncrementTick>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003cb6:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <xTaskResumeAll+0x130>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f1      	bne.n	8003cac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <xTaskResumeAll+0x134>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <xTaskResumeAll+0x130>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cda:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <xTaskResumeAll+0x138>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cea:	f001 f9c7 	bl	800507c <vPortExitCritical>

	return xAlreadyYielded;
 8003cee:	68bb      	ldr	r3, [r7, #8]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000dbc 	.word	0x20000dbc
 8003cfc:	20000d94 	.word	0x20000d94
 8003d00:	20000d54 	.word	0x20000d54
 8003d04:	20000d9c 	.word	0x20000d9c
 8003d08:	200008c4 	.word	0x200008c4
 8003d0c:	200008c0 	.word	0x200008c0
 8003d10:	20000da8 	.word	0x20000da8
 8003d14:	20000da4 	.word	0x20000da4
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d22:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <xTaskGetTickCount+0x18>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	20000d98 	.word	0x20000d98

08003d38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d3e:	f001 fa2f 	bl	80051a0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003d46:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <xTaskGetTickCountFromISR+0x20>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d4c:	683b      	ldr	r3, [r7, #0]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000d98 	.word	0x20000d98

08003d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d66:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea4 <xTaskIncrementTick+0x148>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 8090 	bne.w	8003e90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d70:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea8 <xTaskIncrementTick+0x14c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea8 <xTaskIncrementTick+0x14c>)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d121      	bne.n	8003dc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d84:	4b49      	ldr	r3, [pc, #292]	@ (8003eac <xTaskIncrementTick+0x150>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	603b      	str	r3, [r7, #0]
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	e7fd      	b.n	8003da2 <xTaskIncrementTick+0x46>
 8003da6:	4b41      	ldr	r3, [pc, #260]	@ (8003eac <xTaskIncrementTick+0x150>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	4b40      	ldr	r3, [pc, #256]	@ (8003eb0 <xTaskIncrementTick+0x154>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3e      	ldr	r2, [pc, #248]	@ (8003eac <xTaskIncrementTick+0x150>)
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb0 <xTaskIncrementTick+0x154>)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb4 <xTaskIncrementTick+0x158>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb4 <xTaskIncrementTick+0x158>)
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	f000 fae0 	bl	8004388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb8 <xTaskIncrementTick+0x15c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d349      	bcc.n	8003e66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd2:	4b36      	ldr	r3, [pc, #216]	@ (8003eac <xTaskIncrementTick+0x150>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d104      	bne.n	8003de6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ddc:	4b36      	ldr	r3, [pc, #216]	@ (8003eb8 <xTaskIncrementTick+0x15c>)
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
 8003de2:	601a      	str	r2, [r3, #0]
					break;
 8003de4:	e03f      	b.n	8003e66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de6:	4b31      	ldr	r3, [pc, #196]	@ (8003eac <xTaskIncrementTick+0x150>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d203      	bcs.n	8003e06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb8 <xTaskIncrementTick+0x15c>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e04:	e02f      	b.n	8003e66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fbd8 	bl	80025c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe fbcf 	bl	80025c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e26:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <xTaskIncrementTick+0x160>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d903      	bls.n	8003e36 <xTaskIncrementTick+0xda>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	4a22      	ldr	r2, [pc, #136]	@ (8003ebc <xTaskIncrementTick+0x160>)
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec0 <xTaskIncrementTick+0x164>)
 8003e44:	441a      	add	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe fb5c 	bl	800250a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <xTaskIncrementTick+0x168>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3b8      	bcc.n	8003dd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e64:	e7b5      	b.n	8003dd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e66:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <xTaskIncrementTick+0x168>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	4914      	ldr	r1, [pc, #80]	@ (8003ec0 <xTaskIncrementTick+0x164>)
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d901      	bls.n	8003e82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e82:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <xTaskIncrementTick+0x16c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e004      	b.n	8003e9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ecc <xTaskIncrementTick+0x170>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ecc <xTaskIncrementTick+0x170>)
 8003e98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e9a:	697b      	ldr	r3, [r7, #20]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000dbc 	.word	0x20000dbc
 8003ea8:	20000d98 	.word	0x20000d98
 8003eac:	20000d4c 	.word	0x20000d4c
 8003eb0:	20000d50 	.word	0x20000d50
 8003eb4:	20000dac 	.word	0x20000dac
 8003eb8:	20000db4 	.word	0x20000db4
 8003ebc:	20000d9c 	.word	0x20000d9c
 8003ec0:	200008c4 	.word	0x200008c4
 8003ec4:	200008c0 	.word	0x200008c0
 8003ec8:	20000da8 	.word	0x20000da8
 8003ecc:	20000da4 	.word	0x20000da4

08003ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f80 <vTaskSwitchContext+0xb0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ede:	4b29      	ldr	r3, [pc, #164]	@ (8003f84 <vTaskSwitchContext+0xb4>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ee4:	e047      	b.n	8003f76 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ee6:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <vTaskSwitchContext+0xb4>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <vTaskSwitchContext+0xb8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e011      	b.n	8003f18 <vTaskSwitchContext+0x48>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <vTaskSwitchContext+0x42>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	607b      	str	r3, [r7, #4]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <vTaskSwitchContext+0x3e>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	491c      	ldr	r1, [pc, #112]	@ (8003f8c <vTaskSwitchContext+0xbc>)
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0e3      	beq.n	8003ef4 <vTaskSwitchContext+0x24>
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <vTaskSwitchContext+0xbc>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d104      	bne.n	8003f5c <vTaskSwitchContext+0x8c>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	@ (8003f90 <vTaskSwitchContext+0xc0>)
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4a08      	ldr	r2, [pc, #32]	@ (8003f88 <vTaskSwitchContext+0xb8>)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f6c:	4b08      	ldr	r3, [pc, #32]	@ (8003f90 <vTaskSwitchContext+0xc0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3354      	adds	r3, #84	@ 0x54
 8003f72:	4a08      	ldr	r2, [pc, #32]	@ (8003f94 <vTaskSwitchContext+0xc4>)
 8003f74:	6013      	str	r3, [r2, #0]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	20000dbc 	.word	0x20000dbc
 8003f84:	20000da8 	.word	0x20000da8
 8003f88:	20000d9c 	.word	0x20000d9c
 8003f8c:	200008c4 	.word	0x200008c4
 8003f90:	200008c0 	.word	0x200008c0
 8003f94:	2000001c 	.word	0x2000001c

08003f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fc0:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <vTaskPlaceOnEventList+0x48>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fe fac1 	bl	8002550 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fce:	2101      	movs	r1, #1
 8003fd0:	6838      	ldr	r0, [r7, #0]
 8003fd2:	f000 fb87 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200008c0 	.word	0x200008c0

08003fe4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	617b      	str	r3, [r7, #20]
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	e7fd      	b.n	800400a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800400e:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <vTaskPlaceOnEventListRestricted+0x54>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3318      	adds	r3, #24
 8004014:	4619      	mov	r1, r3
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7fe fa77 	bl	800250a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	f000 fb5a 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
	}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	200008c0 	.word	0x200008c0

0800403c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60fb      	str	r3, [r7, #12]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3318      	adds	r3, #24
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe faa6 	bl	80025c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004074:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <xTaskRemoveFromEventList+0xb0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11d      	bne.n	80040b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	3304      	adds	r3, #4
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fa9d 	bl	80025c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408a:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <xTaskRemoveFromEventList+0xb4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d903      	bls.n	800409a <xTaskRemoveFromEventList+0x5e>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	4a16      	ldr	r2, [pc, #88]	@ (80040f0 <xTaskRemoveFromEventList+0xb4>)
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4a13      	ldr	r2, [pc, #76]	@ (80040f4 <xTaskRemoveFromEventList+0xb8>)
 80040a8:	441a      	add	r2, r3
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7fe fa2a 	bl	800250a <vListInsertEnd>
 80040b6:	e005      	b.n	80040c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	3318      	adds	r3, #24
 80040bc:	4619      	mov	r1, r3
 80040be:	480e      	ldr	r0, [pc, #56]	@ (80040f8 <xTaskRemoveFromEventList+0xbc>)
 80040c0:	f7fe fa23 	bl	800250a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c8:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <xTaskRemoveFromEventList+0xc0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d905      	bls.n	80040de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <xTaskRemoveFromEventList+0xc4>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e001      	b.n	80040e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040e2:	697b      	ldr	r3, [r7, #20]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000dbc 	.word	0x20000dbc
 80040f0:	20000d9c 	.word	0x20000d9c
 80040f4:	200008c4 	.word	0x200008c4
 80040f8:	20000d54 	.word	0x20000d54
 80040fc:	200008c0 	.word	0x200008c0
 8004100:	20000da8 	.word	0x20000da8

08004104 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800410c:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <vTaskInternalSetTimeOutState+0x24>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <vTaskInternalSetTimeOutState+0x28>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	605a      	str	r2, [r3, #4]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000dac 	.word	0x20000dac
 800412c:	20000d98 	.word	0x20000d98

08004130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	613b      	str	r3, [r7, #16]
}
 8004152:	bf00      	nop
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	60fb      	str	r3, [r7, #12]
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	e7fd      	b.n	8004172 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004176:	f000 ff51 	bl	800501c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800417a:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <xTaskCheckForTimeOut+0xc0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d102      	bne.n	800419a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e023      	b.n	80041e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <xTaskCheckForTimeOut+0xc4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d007      	beq.n	80041b6 <xTaskCheckForTimeOut+0x86>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d302      	bcc.n	80041b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e015      	b.n	80041e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d20b      	bcs.n	80041d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff99 	bl	8004104 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e004      	b.n	80041e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041de:	2301      	movs	r3, #1
 80041e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041e2:	f000 ff4b 	bl	800507c <vPortExitCritical>

	return xReturn;
 80041e6:	69fb      	ldr	r3, [r7, #28]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000d98 	.word	0x20000d98
 80041f4:	20000dac 	.word	0x20000dac

080041f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041fc:	4b03      	ldr	r3, [pc, #12]	@ (800420c <vTaskMissedYield+0x14>)
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000da8 	.word	0x20000da8

08004210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004218:	f000 f852 	bl	80042c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <prvIdleTask+0x28>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d9f9      	bls.n	8004218 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004224:	4b05      	ldr	r3, [pc, #20]	@ (800423c <prvIdleTask+0x2c>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004234:	e7f0      	b.n	8004218 <prvIdleTask+0x8>
 8004236:	bf00      	nop
 8004238:	200008c4 	.word	0x200008c4
 800423c:	e000ed04 	.word	0xe000ed04

08004240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	e00c      	b.n	8004266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4a12      	ldr	r2, [pc, #72]	@ (80042a0 <prvInitialiseTaskLists+0x60>)
 8004258:	4413      	add	r3, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe f92a 	bl	80024b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3301      	adds	r3, #1
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b37      	cmp	r3, #55	@ 0x37
 800426a:	d9ef      	bls.n	800424c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800426c:	480d      	ldr	r0, [pc, #52]	@ (80042a4 <prvInitialiseTaskLists+0x64>)
 800426e:	f7fe f921 	bl	80024b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004272:	480d      	ldr	r0, [pc, #52]	@ (80042a8 <prvInitialiseTaskLists+0x68>)
 8004274:	f7fe f91e 	bl	80024b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004278:	480c      	ldr	r0, [pc, #48]	@ (80042ac <prvInitialiseTaskLists+0x6c>)
 800427a:	f7fe f91b 	bl	80024b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800427e:	480c      	ldr	r0, [pc, #48]	@ (80042b0 <prvInitialiseTaskLists+0x70>)
 8004280:	f7fe f918 	bl	80024b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004284:	480b      	ldr	r0, [pc, #44]	@ (80042b4 <prvInitialiseTaskLists+0x74>)
 8004286:	f7fe f915 	bl	80024b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800428a:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <prvInitialiseTaskLists+0x78>)
 800428c:	4a05      	ldr	r2, [pc, #20]	@ (80042a4 <prvInitialiseTaskLists+0x64>)
 800428e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004290:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <prvInitialiseTaskLists+0x7c>)
 8004292:	4a05      	ldr	r2, [pc, #20]	@ (80042a8 <prvInitialiseTaskLists+0x68>)
 8004294:	601a      	str	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200008c4 	.word	0x200008c4
 80042a4:	20000d24 	.word	0x20000d24
 80042a8:	20000d38 	.word	0x20000d38
 80042ac:	20000d54 	.word	0x20000d54
 80042b0:	20000d68 	.word	0x20000d68
 80042b4:	20000d80 	.word	0x20000d80
 80042b8:	20000d4c 	.word	0x20000d4c
 80042bc:	20000d50 	.word	0x20000d50

080042c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c6:	e019      	b.n	80042fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042c8:	f000 fea8 	bl	800501c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042cc:	4b10      	ldr	r3, [pc, #64]	@ (8004310 <prvCheckTasksWaitingTermination+0x50>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe f971 	bl	80025c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <prvCheckTasksWaitingTermination+0x54>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004314 <prvCheckTasksWaitingTermination+0x54>)
 80042e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <prvCheckTasksWaitingTermination+0x58>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004318 <prvCheckTasksWaitingTermination+0x58>)
 80042f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042f2:	f000 fec3 	bl	800507c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f810 	bl	800431c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <prvCheckTasksWaitingTermination+0x58>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e1      	bne.n	80042c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000d68 	.word	0x20000d68
 8004314:	20000d94 	.word	0x20000d94
 8004318:	20000d7c 	.word	0x20000d7c

0800431c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3354      	adds	r3, #84	@ 0x54
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fa95 	bl	8005858 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004334:	2b00      	cmp	r3, #0
 8004336:	d108      	bne.n	800434a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433c:	4618      	mov	r0, r3
 800433e:	f001 f83d 	bl	80053bc <vPortFree>
				vPortFree( pxTCB );
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 f83a 	bl	80053bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004348:	e019      	b.n	800437e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004350:	2b01      	cmp	r3, #1
 8004352:	d103      	bne.n	800435c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 f831 	bl	80053bc <vPortFree>
	}
 800435a:	e010      	b.n	800437e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004362:	2b02      	cmp	r3, #2
 8004364:	d00b      	beq.n	800437e <prvDeleteTCB+0x62>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	60fb      	str	r3, [r7, #12]
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	e7fd      	b.n	800437a <prvDeleteTCB+0x5e>
	}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800438e:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <prvResetNextTaskUnblockTime+0x38>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <prvResetNextTaskUnblockTime+0x3c>)
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043a0:	e008      	b.n	80043b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a2:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <prvResetNextTaskUnblockTime+0x38>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <prvResetNextTaskUnblockTime+0x3c>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000d4c 	.word	0x20000d4c
 80043c4:	20000db4 	.word	0x20000db4

080043c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <xTaskGetSchedulerState+0x34>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043d6:	2301      	movs	r3, #1
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	e008      	b.n	80043ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043dc:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <xTaskGetSchedulerState+0x38>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043e4:	2302      	movs	r3, #2
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	e001      	b.n	80043ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043ee:	687b      	ldr	r3, [r7, #4]
	}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000da0 	.word	0x20000da0
 8004400:	20000dbc 	.word	0x20000dbc

08004404 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d051      	beq.n	80044be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441e:	4b2a      	ldr	r3, [pc, #168]	@ (80044c8 <xTaskPriorityInherit+0xc4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	429a      	cmp	r2, r3
 8004426:	d241      	bcs.n	80044ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	db06      	blt.n	800443e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004430:	4b25      	ldr	r3, [pc, #148]	@ (80044c8 <xTaskPriorityInherit+0xc4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6959      	ldr	r1, [r3, #20]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4a1f      	ldr	r2, [pc, #124]	@ (80044cc <xTaskPriorityInherit+0xc8>)
 8004450:	4413      	add	r3, r2
 8004452:	4299      	cmp	r1, r3
 8004454:	d122      	bne.n	800449c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	3304      	adds	r3, #4
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe f8b0 	bl	80025c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004460:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <xTaskPriorityInherit+0xc4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446e:	4b18      	ldr	r3, [pc, #96]	@ (80044d0 <xTaskPriorityInherit+0xcc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d903      	bls.n	800447e <xTaskPriorityInherit+0x7a>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	4a15      	ldr	r2, [pc, #84]	@ (80044d0 <xTaskPriorityInherit+0xcc>)
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4a10      	ldr	r2, [pc, #64]	@ (80044cc <xTaskPriorityInherit+0xc8>)
 800448c:	441a      	add	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	3304      	adds	r3, #4
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f7fe f838 	bl	800250a <vListInsertEnd>
 800449a:	e004      	b.n	80044a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800449c:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <xTaskPriorityInherit+0xc4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e008      	b.n	80044be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <xTaskPriorityInherit+0xc4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d201      	bcs.n	80044be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044be:	68fb      	ldr	r3, [r7, #12]
	}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200008c0 	.word	0x200008c0
 80044cc:	200008c4 	.word	0x200008c4
 80044d0:	20000d9c 	.word	0x20000d9c

080044d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d058      	beq.n	800459c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044ea:	4b2f      	ldr	r3, [pc, #188]	@ (80045a8 <xTaskPriorityDisinherit+0xd4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d00b      	beq.n	800450c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	60fb      	str	r3, [r7, #12]
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	e7fd      	b.n	8004508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60bb      	str	r3, [r7, #8]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004530:	1e5a      	subs	r2, r3, #1
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453e:	429a      	cmp	r2, r3
 8004540:	d02c      	beq.n	800459c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004546:	2b00      	cmp	r3, #0
 8004548:	d128      	bne.n	800459c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3304      	adds	r3, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe f836 	bl	80025c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456c:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <xTaskPriorityDisinherit+0xd8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d903      	bls.n	800457c <xTaskPriorityDisinherit+0xa8>
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	4a0c      	ldr	r2, [pc, #48]	@ (80045ac <xTaskPriorityDisinherit+0xd8>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <xTaskPriorityDisinherit+0xdc>)
 800458a:	441a      	add	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7fd ffb9 	bl	800250a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800459c:	697b      	ldr	r3, [r7, #20]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200008c0 	.word	0x200008c0
 80045ac:	20000d9c 	.word	0x20000d9c
 80045b0:	200008c4 	.word	0x200008c4

080045b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d06c      	beq.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60fb      	str	r3, [r7, #12]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d902      	bls.n	80045fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e002      	b.n	8004602 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004600:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	429a      	cmp	r2, r3
 800460a:	d04c      	beq.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	429a      	cmp	r2, r3
 8004614:	d147      	bne.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004616:	4b26      	ldr	r3, [pc, #152]	@ (80046b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	d10b      	bne.n	8004638 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60bb      	str	r3, [r7, #8]
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db04      	blt.n	8004656 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	6959      	ldr	r1, [r3, #20]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a13      	ldr	r2, [pc, #76]	@ (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004666:	4413      	add	r3, r2
 8004668:	4299      	cmp	r1, r3
 800466a:	d11c      	bne.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd ffa5 	bl	80025c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800467a:	4b0f      	ldr	r3, [pc, #60]	@ (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d903      	bls.n	800468a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	4a0c      	ldr	r2, [pc, #48]	@ (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a07      	ldr	r2, [pc, #28]	@ (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004698:	441a      	add	r2, r3
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fd ff32 	bl	800250a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046a6:	bf00      	nop
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200008c0 	.word	0x200008c0
 80046b4:	200008c4 	.word	0x200008c4
 80046b8:	20000d9c 	.word	0x20000d9c

080046bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046ce:	3201      	adds	r2, #1
 80046d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80046d2:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80046d4:	681b      	ldr	r3, [r3, #0]
	}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	200008c0 	.word	0x200008c0

080046e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046ee:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <prvAddCurrentTaskToDelayedList+0x90>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fd ff60 	bl	80025c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d10a      	bne.n	800471e <prvAddCurrentTaskToDelayedList+0x3a>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470e:	4b1a      	ldr	r3, [pc, #104]	@ (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4819      	ldr	r0, [pc, #100]	@ (800477c <prvAddCurrentTaskToDelayedList+0x98>)
 8004718:	f7fd fef7 	bl	800250a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800471c:	e026      	b.n	800476c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4413      	add	r3, r2
 8004724:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004726:	4b14      	ldr	r3, [pc, #80]	@ (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	429a      	cmp	r2, r3
 8004734:	d209      	bcs.n	800474a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004736:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fd ff04 	bl	8002550 <vListInsert>
}
 8004748:	e010      	b.n	800476c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xa0>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b0a      	ldr	r3, [pc, #40]	@ (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f7fd fefa 	bl	8002550 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <prvAddCurrentTaskToDelayedList+0xa4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d202      	bcs.n	800476c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004766:	4a08      	ldr	r2, [pc, #32]	@ (8004788 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000d98 	.word	0x20000d98
 8004778:	200008c0 	.word	0x200008c0
 800477c:	20000d80 	.word	0x20000d80
 8004780:	20000d50 	.word	0x20000d50
 8004784:	20000d4c 	.word	0x20000d4c
 8004788:	20000db4 	.word	0x20000db4

0800478c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	@ 0x28
 8004790:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004796:	f000 fb11 	bl	8004dbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800479a:	4b1d      	ldr	r3, [pc, #116]	@ (8004810 <xTimerCreateTimerTask+0x84>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d021      	beq.n	80047e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047aa:	1d3a      	adds	r2, r7, #4
 80047ac:	f107 0108 	add.w	r1, r7, #8
 80047b0:	f107 030c 	add.w	r3, r7, #12
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd fe63 	bl	8002480 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	2302      	movs	r3, #2
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2300      	movs	r3, #0
 80047ca:	460a      	mov	r2, r1
 80047cc:	4911      	ldr	r1, [pc, #68]	@ (8004814 <xTimerCreateTimerTask+0x88>)
 80047ce:	4812      	ldr	r0, [pc, #72]	@ (8004818 <xTimerCreateTimerTask+0x8c>)
 80047d0:	f7fe ff4a 	bl	8003668 <xTaskCreateStatic>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4a11      	ldr	r2, [pc, #68]	@ (800481c <xTimerCreateTimerTask+0x90>)
 80047d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047da:	4b10      	ldr	r3, [pc, #64]	@ (800481c <xTimerCreateTimerTask+0x90>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047e2:	2301      	movs	r3, #1
 80047e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	613b      	str	r3, [r7, #16]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004804:	697b      	ldr	r3, [r7, #20]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000df0 	.word	0x20000df0
 8004814:	080065bc 	.word	0x080065bc
 8004818:	08004959 	.word	0x08004959
 800481c:	20000df4 	.word	0x20000df4

08004820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800482e:	2300      	movs	r3, #0
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <xTimerGenericCommand+0x30>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	623b      	str	r3, [r7, #32]
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004850:	4b19      	ldr	r3, [pc, #100]	@ (80048b8 <xTimerGenericCommand+0x98>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02a      	beq.n	80048ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b05      	cmp	r3, #5
 8004868:	dc18      	bgt.n	800489c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800486a:	f7ff fdad 	bl	80043c8 <xTaskGetSchedulerState>
 800486e:	4603      	mov	r3, r0
 8004870:	2b02      	cmp	r3, #2
 8004872:	d109      	bne.n	8004888 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004874:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <xTimerGenericCommand+0x98>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	f107 0110 	add.w	r1, r7, #16
 800487c:	2300      	movs	r3, #0
 800487e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004880:	f7fe f87c 	bl	800297c <xQueueGenericSend>
 8004884:	6278      	str	r0, [r7, #36]	@ 0x24
 8004886:	e012      	b.n	80048ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004888:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <xTimerGenericCommand+0x98>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	f107 0110 	add.w	r1, r7, #16
 8004890:	2300      	movs	r3, #0
 8004892:	2200      	movs	r2, #0
 8004894:	f7fe f872 	bl	800297c <xQueueGenericSend>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24
 800489a:	e008      	b.n	80048ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800489c:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <xTimerGenericCommand+0x98>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	f107 0110 	add.w	r1, r7, #16
 80048a4:	2300      	movs	r3, #0
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	f7fe f96a 	bl	8002b80 <xQueueGenericSendFromISR>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3728      	adds	r7, #40	@ 0x28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000df0 	.word	0x20000df0

080048bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c6:	4b23      	ldr	r3, [pc, #140]	@ (8004954 <prvProcessExpiredTimer+0x98>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fd fe73 	bl	80025c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d023      	beq.n	8004930 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	18d1      	adds	r1, r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	6978      	ldr	r0, [r7, #20]
 80048f6:	f000 f8d3 	bl	8004aa0 <prvInsertTimerInActiveList>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004900:	2300      	movs	r3, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	2100      	movs	r1, #0
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff ff88 	bl	8004820 <xTimerGenericCommand>
 8004910:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d114      	bne.n	8004942 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6978      	ldr	r0, [r7, #20]
 8004948:	4798      	blx	r3
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000de8 	.word	0x20000de8

08004958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004960:	f107 0308 	add.w	r3, r7, #8
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f859 	bl	8004a1c <prvGetNextExpireTime>
 800496a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4619      	mov	r1, r3
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f805 	bl	8004980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004976:	f000 f8d5 	bl	8004b24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800497a:	bf00      	nop
 800497c:	e7f0      	b.n	8004960 <prvTimerTask+0x8>
	...

08004980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800498a:	f7ff f91b 	bl	8003bc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f864 	bl	8004a60 <prvSampleTimeNow>
 8004998:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d130      	bne.n	8004a02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <prvProcessTimerOrBlockTask+0x3c>
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d806      	bhi.n	80049bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049ae:	f7ff f917 	bl	8003be0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff81 	bl	80048bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049ba:	e024      	b.n	8004a06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049c2:	4b13      	ldr	r3, [pc, #76]	@ (8004a10 <prvProcessTimerOrBlockTask+0x90>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <prvProcessTimerOrBlockTask+0x50>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <prvProcessTimerOrBlockTask+0x52>
 80049d0:	2300      	movs	r3, #0
 80049d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a14 <prvProcessTimerOrBlockTask+0x94>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4619      	mov	r1, r3
 80049e2:	f7fe fe0d 	bl	8003600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049e6:	f7ff f8fb 	bl	8003be0 <xTaskResumeAll>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049f0:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <prvProcessTimerOrBlockTask+0x98>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
}
 8004a00:	e001      	b.n	8004a06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a02:	f7ff f8ed 	bl	8003be0 <xTaskResumeAll>
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000dec 	.word	0x20000dec
 8004a14:	20000df0 	.word	0x20000df0
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a24:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <prvGetNextExpireTime+0x40>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <prvGetNextExpireTime+0x16>
 8004a2e:	2201      	movs	r2, #1
 8004a30:	e000      	b.n	8004a34 <prvGetNextExpireTime+0x18>
 8004a32:	2200      	movs	r2, #0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a40:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <prvGetNextExpireTime+0x40>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e001      	b.n	8004a50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a50:	68fb      	ldr	r3, [r7, #12]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	20000de8 	.word	0x20000de8

08004a60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a68:	f7ff f958 	bl	8003d1c <xTaskGetTickCount>
 8004a6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <prvSampleTimeNow+0x3c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d205      	bcs.n	8004a84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a78:	f000 f93a 	bl	8004cf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e002      	b.n	8004a8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a8a:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <prvSampleTimeNow+0x3c>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a90:	68fb      	ldr	r3, [r7, #12]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000df8 	.word	0x20000df8

08004aa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d812      	bhi.n	8004aec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d302      	bcc.n	8004ada <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e01b      	b.n	8004b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ada:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <prvInsertTimerInActiveList+0x7c>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f7fd fd33 	bl	8002550 <vListInsert>
 8004aea:	e012      	b.n	8004b12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d206      	bcs.n	8004b02 <prvInsertTimerInActiveList+0x62>
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e007      	b.n	8004b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b02:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <prvInsertTimerInActiveList+0x80>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f7fd fd1f 	bl	8002550 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b12:	697b      	ldr	r3, [r7, #20]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000dec 	.word	0x20000dec
 8004b20:	20000de8 	.word	0x20000de8

08004b24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	@ 0x38
 8004b28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b2a:	e0ce      	b.n	8004cca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da19      	bge.n	8004b66 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	3304      	adds	r3, #4
 8004b36:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b5c:	6850      	ldr	r0, [r2, #4]
 8004b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b60:	6892      	ldr	r2, [r2, #8]
 8004b62:	4611      	mov	r1, r2
 8004b64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f2c0 80ae 	blt.w	8004cca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd fd1e 	bl	80025c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b84:	463b      	mov	r3, r7
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff6a 	bl	8004a60 <prvSampleTimeNow>
 8004b8c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	f200 8097 	bhi.w	8004cc4 <prvProcessReceivedCommands+0x1a0>
 8004b96:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <prvProcessReceivedCommands+0x78>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bc5 	.word	0x08004bc5
 8004ba8:	08004c3b 	.word	0x08004c3b
 8004bac:	08004c4f 	.word	0x08004c4f
 8004bb0:	08004c9b 	.word	0x08004c9b
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bc5 	.word	0x08004bc5
 8004bbc:	08004c3b 	.word	0x08004c3b
 8004bc0:	08004c4f 	.word	0x08004c4f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	18d1      	adds	r1, r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004be4:	f7ff ff5c 	bl	8004aa0 <prvInsertTimerInActiveList>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d06c      	beq.n	8004cc8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d061      	beq.n	8004cc8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	441a      	add	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2300      	movs	r3, #0
 8004c12:	2100      	movs	r1, #0
 8004c14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c16:	f7ff fe03 	bl	8004820 <xTimerGenericCommand>
 8004c1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d152      	bne.n	8004cc8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61bb      	str	r3, [r7, #24]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c4c:	e03d      	b.n	8004cca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10b      	bne.n	8004c86 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	617b      	str	r3, [r7, #20]
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	18d1      	adds	r1, r2, r3
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c94:	f7ff ff04 	bl	8004aa0 <prvInsertTimerInActiveList>
					break;
 8004c98:	e017      	b.n	8004cca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004caa:	f000 fb87 	bl	80053bc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cae:	e00c      	b.n	8004cca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cc2:	e002      	b.n	8004cca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <prvProcessReceivedCommands+0x1a6>
					break;
 8004cc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cca:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <prvProcessReceivedCommands+0x1c8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1d39      	adds	r1, r7, #4
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe f882 	bl	8002ddc <xQueueReceive>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f47f af26 	bne.w	8004b2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	3730      	adds	r7, #48	@ 0x30
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000df0 	.word	0x20000df0

08004cf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cf6:	e049      	b.n	8004d8c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8004db4 <prvSwitchTimerLists+0xc4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <prvSwitchTimerLists+0xc4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd fc55 	bl	80025c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d02f      	beq.n	8004d8c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90e      	bls.n	8004d5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <prvSwitchTimerLists+0xc4>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7fd fbfb 	bl	8002550 <vListInsert>
 8004d5a:	e017      	b.n	8004d8c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	2100      	movs	r1, #0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff fd5a 	bl	8004820 <xTimerGenericCommand>
 8004d6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	603b      	str	r3, [r7, #0]
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	e7fd      	b.n	8004d88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <prvSwitchTimerLists+0xc4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1b0      	bne.n	8004cf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d96:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <prvSwitchTimerLists+0xc4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <prvSwitchTimerLists+0xc8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a04      	ldr	r2, [pc, #16]	@ (8004db4 <prvSwitchTimerLists+0xc4>)
 8004da2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004da4:	4a04      	ldr	r2, [pc, #16]	@ (8004db8 <prvSwitchTimerLists+0xc8>)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000de8 	.word	0x20000de8
 8004db8:	20000dec 	.word	0x20000dec

08004dbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dc2:	f000 f92b 	bl	800501c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dc6:	4b15      	ldr	r3, [pc, #84]	@ (8004e1c <prvCheckForValidListAndQueue+0x60>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d120      	bne.n	8004e10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dce:	4814      	ldr	r0, [pc, #80]	@ (8004e20 <prvCheckForValidListAndQueue+0x64>)
 8004dd0:	f7fd fb70 	bl	80024b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dd4:	4813      	ldr	r0, [pc, #76]	@ (8004e24 <prvCheckForValidListAndQueue+0x68>)
 8004dd6:	f7fd fb6d 	bl	80024b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dda:	4b13      	ldr	r3, [pc, #76]	@ (8004e28 <prvCheckForValidListAndQueue+0x6c>)
 8004ddc:	4a10      	ldr	r2, [pc, #64]	@ (8004e20 <prvCheckForValidListAndQueue+0x64>)
 8004dde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004de0:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <prvCheckForValidListAndQueue+0x70>)
 8004de2:	4a10      	ldr	r2, [pc, #64]	@ (8004e24 <prvCheckForValidListAndQueue+0x68>)
 8004de4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004de6:	2300      	movs	r3, #0
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <prvCheckForValidListAndQueue+0x74>)
 8004dec:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <prvCheckForValidListAndQueue+0x78>)
 8004dee:	2110      	movs	r1, #16
 8004df0:	200a      	movs	r0, #10
 8004df2:	f7fd fc79 	bl	80026e8 <xQueueGenericCreateStatic>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <prvCheckForValidListAndQueue+0x60>)
 8004dfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004dfc:	4b07      	ldr	r3, [pc, #28]	@ (8004e1c <prvCheckForValidListAndQueue+0x60>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <prvCheckForValidListAndQueue+0x60>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	490b      	ldr	r1, [pc, #44]	@ (8004e38 <prvCheckForValidListAndQueue+0x7c>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fba6 	bl	800355c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e10:	f000 f934 	bl	800507c <vPortExitCritical>
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000df0 	.word	0x20000df0
 8004e20:	20000dc0 	.word	0x20000dc0
 8004e24:	20000dd4 	.word	0x20000dd4
 8004e28:	20000de8 	.word	0x20000de8
 8004e2c:	20000dec 	.word	0x20000dec
 8004e30:	20000e9c 	.word	0x20000e9c
 8004e34:	20000dfc 	.word	0x20000dfc
 8004e38:	080065c4 	.word	0x080065c4

08004e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3b04      	subs	r3, #4
 8004e4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3b04      	subs	r3, #4
 8004e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e6c:	4a08      	ldr	r2, [pc, #32]	@ (8004e90 <pxPortInitialiseStack+0x54>)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3b14      	subs	r3, #20
 8004e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b20      	subs	r3, #32
 8004e82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e84:	68fb      	ldr	r3, [r7, #12]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr
 8004e90:	08004e95 	.word	0x08004e95

08004e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <prvTaskExitError+0x54>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d00b      	beq.n	8004ec0 <prvTaskExitError+0x2c>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <prvTaskExitError+0x28>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60bb      	str	r3, [r7, #8]
}
 8004ed2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ed4:	bf00      	nop
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0fc      	beq.n	8004ed6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr
 8004ee8:	2000000c 	.word	0x2000000c
 8004eec:	00000000 	.word	0x00000000

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f0e:	4770      	bx	lr

08004f10 <pxCurrentTCBConst2>:
 8004f10:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004f18:	4806      	ldr	r0, [pc, #24]	@ (8004f34 <prvPortStartFirstTask+0x1c>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	b662      	cpsie	i
 8004f24:	b661      	cpsie	f
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	df00      	svc	0
 8004f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f32:	bf00      	nop
 8004f34:	e000ed08 	.word	0xe000ed08

08004f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f3e:	4b32      	ldr	r3, [pc, #200]	@ (8005008 <xPortStartScheduler+0xd0>)
 8004f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	22ff      	movs	r2, #255	@ 0xff
 8004f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	4b2a      	ldr	r3, [pc, #168]	@ (800500c <xPortStartScheduler+0xd4>)
 8004f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f66:	4b2a      	ldr	r3, [pc, #168]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004f68:	2207      	movs	r2, #7
 8004f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6c:	e009      	b.n	8004f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f6e:	4b28      	ldr	r3, [pc, #160]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	4a26      	ldr	r2, [pc, #152]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8a:	2b80      	cmp	r3, #128	@ 0x80
 8004f8c:	d0ef      	beq.n	8004f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f8e:	4b20      	ldr	r3, [pc, #128]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1c3 0307 	rsb	r3, r3, #7
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d00b      	beq.n	8004fb2 <xPortStartScheduler+0x7a>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	60bb      	str	r3, [r7, #8]
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	e7fd      	b.n	8004fae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fb2:	4b17      	ldr	r3, [pc, #92]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	4a15      	ldr	r2, [pc, #84]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004fba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc4:	4a12      	ldr	r2, [pc, #72]	@ (8005010 <xPortStartScheduler+0xd8>)
 8004fc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fd0:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <xPortStartScheduler+0xdc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8005014 <xPortStartScheduler+0xdc>)
 8004fd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <xPortStartScheduler+0xdc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <xPortStartScheduler+0xdc>)
 8004fe2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fe6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fe8:	f000 f8b8 	bl	800515c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <xPortStartScheduler+0xe0>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ff2:	f7ff ff91 	bl	8004f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ff6:	f7fe ff6b 	bl	8003ed0 <vTaskSwitchContext>
	prvTaskExitError();
 8004ffa:	f7ff ff4b 	bl	8004e94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	e000e400 	.word	0xe000e400
 800500c:	20000eec 	.word	0x20000eec
 8005010:	20000ef0 	.word	0x20000ef0
 8005014:	e000ed20 	.word	0xe000ed20
 8005018:	2000000c 	.word	0x2000000c

0800501c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	607b      	str	r3, [r7, #4]
}
 8005034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005036:	4b0f      	ldr	r3, [pc, #60]	@ (8005074 <vPortEnterCritical+0x58>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a0d      	ldr	r2, [pc, #52]	@ (8005074 <vPortEnterCritical+0x58>)
 800503e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005040:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <vPortEnterCritical+0x58>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d110      	bne.n	800506a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <vPortEnterCritical+0x5c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <vPortEnterCritical+0x4e>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	603b      	str	r3, [r7, #0]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <vPortEnterCritical+0x4a>
	}
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	2000000c 	.word	0x2000000c
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005082:	4b12      	ldr	r3, [pc, #72]	@ (80050cc <vPortExitCritical+0x50>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <vPortExitCritical+0x26>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	607b      	str	r3, [r7, #4]
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	e7fd      	b.n	800509e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <vPortExitCritical+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	4a08      	ldr	r2, [pc, #32]	@ (80050cc <vPortExitCritical+0x50>)
 80050aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050ac:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <vPortExitCritical+0x50>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <vPortExitCritical+0x44>
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f383 8811 	msr	BASEPRI, r3
}
 80050be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	2000000c 	.word	0x2000000c

080050d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050d0:	f3ef 8009 	mrs	r0, PSP
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <pxCurrentTCBConst>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050e0:	6010      	str	r0, [r2, #0]
 80050e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80050e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050ea:	f380 8811 	msr	BASEPRI, r0
 80050ee:	f7fe feef 	bl	8003ed0 <vTaskSwitchContext>
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050fe:	6819      	ldr	r1, [r3, #0]
 8005100:	6808      	ldr	r0, [r1, #0]
 8005102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005106:	f380 8809 	msr	PSP, r0
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	4770      	bx	lr

08005110 <pxCurrentTCBConst>:
 8005110:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
}
 8005130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005132:	f7fe fe13 	bl	8003d5c <xTaskIncrementTick>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <xPortSysTickHandler+0x40>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f383 8811 	msr	BASEPRI, r3
}
 800514e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005160:	4b0a      	ldr	r3, [pc, #40]	@ (800518c <vPortSetupTimerInterrupt+0x30>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005166:	4b0a      	ldr	r3, [pc, #40]	@ (8005190 <vPortSetupTimerInterrupt+0x34>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800516c:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <vPortSetupTimerInterrupt+0x38>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a09      	ldr	r2, [pc, #36]	@ (8005198 <vPortSetupTimerInterrupt+0x3c>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	4a08      	ldr	r2, [pc, #32]	@ (800519c <vPortSetupTimerInterrupt+0x40>)
 800517a:	3b01      	subs	r3, #1
 800517c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800517e:	4b03      	ldr	r3, [pc, #12]	@ (800518c <vPortSetupTimerInterrupt+0x30>)
 8005180:	2207      	movs	r2, #7
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	e000e010 	.word	0xe000e010
 8005190:	e000e018 	.word	0xe000e018
 8005194:	20000000 	.word	0x20000000
 8005198:	10624dd3 	.word	0x10624dd3
 800519c:	e000e014 	.word	0xe000e014

080051a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051a6:	f3ef 8305 	mrs	r3, IPSR
 80051aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	d915      	bls.n	80051de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051b2:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <vPortValidateInterruptPriority+0x70>)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051bc:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <vPortValidateInterruptPriority+0x74>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	7afa      	ldrb	r2, [r7, #11]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d20b      	bcs.n	80051de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	607b      	str	r3, [r7, #4]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051de:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <vPortValidateInterruptPriority+0x78>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <vPortValidateInterruptPriority+0x7c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d90b      	bls.n	8005206 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <vPortValidateInterruptPriority+0x62>
	}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	e000e3f0 	.word	0xe000e3f0
 8005214:	20000eec 	.word	0x20000eec
 8005218:	e000ed0c 	.word	0xe000ed0c
 800521c:	20000ef0 	.word	0x20000ef0

08005220 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	@ 0x28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800522c:	f7fe fcca 	bl	8003bc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005230:	4b5c      	ldr	r3, [pc, #368]	@ (80053a4 <pvPortMalloc+0x184>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005238:	f000 f924 	bl	8005484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800523c:	4b5a      	ldr	r3, [pc, #360]	@ (80053a8 <pvPortMalloc+0x188>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	f040 8095 	bne.w	8005374 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01e      	beq.n	800528e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005250:	2208      	movs	r2, #8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4413      	add	r3, r2
 8005256:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b00      	cmp	r3, #0
 8005260:	d015      	beq.n	800528e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f023 0307 	bic.w	r3, r3, #7
 8005268:	3308      	adds	r3, #8
 800526a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <pvPortMalloc+0x6e>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	617b      	str	r3, [r7, #20]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d06f      	beq.n	8005374 <pvPortMalloc+0x154>
 8005294:	4b45      	ldr	r3, [pc, #276]	@ (80053ac <pvPortMalloc+0x18c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d86a      	bhi.n	8005374 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800529e:	4b44      	ldr	r3, [pc, #272]	@ (80053b0 <pvPortMalloc+0x190>)
 80052a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052a2:	4b43      	ldr	r3, [pc, #268]	@ (80053b0 <pvPortMalloc+0x190>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052a8:	e004      	b.n	80052b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d903      	bls.n	80052c6 <pvPortMalloc+0xa6>
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f1      	bne.n	80052aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052c6:	4b37      	ldr	r3, [pc, #220]	@ (80053a4 <pvPortMalloc+0x184>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d051      	beq.n	8005374 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2208      	movs	r2, #8
 80052d6:	4413      	add	r3, r2
 80052d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	1ad2      	subs	r2, r2, r3
 80052ea:	2308      	movs	r3, #8
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d920      	bls.n	8005334 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4413      	add	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <pvPortMalloc+0xfc>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	613b      	str	r3, [r7, #16]
}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	e7fd      	b.n	8005318 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	1ad2      	subs	r2, r2, r3
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800532e:	69b8      	ldr	r0, [r7, #24]
 8005330:	f000 f90a 	bl	8005548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005334:	4b1d      	ldr	r3, [pc, #116]	@ (80053ac <pvPortMalloc+0x18c>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <pvPortMalloc+0x18c>)
 8005340:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005342:	4b1a      	ldr	r3, [pc, #104]	@ (80053ac <pvPortMalloc+0x18c>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b1b      	ldr	r3, [pc, #108]	@ (80053b4 <pvPortMalloc+0x194>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d203      	bcs.n	8005356 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800534e:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <pvPortMalloc+0x18c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a18      	ldr	r2, [pc, #96]	@ (80053b4 <pvPortMalloc+0x194>)
 8005354:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	4b13      	ldr	r3, [pc, #76]	@ (80053a8 <pvPortMalloc+0x188>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	431a      	orrs	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800536a:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <pvPortMalloc+0x198>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	4a11      	ldr	r2, [pc, #68]	@ (80053b8 <pvPortMalloc+0x198>)
 8005372:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005374:	f7fe fc34 	bl	8003be0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <pvPortMalloc+0x17a>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	60fb      	str	r3, [r7, #12]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <pvPortMalloc+0x176>
	return pvReturn;
 800539a:	69fb      	ldr	r3, [r7, #28]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3728      	adds	r7, #40	@ 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20001afc 	.word	0x20001afc
 80053a8:	20001b10 	.word	0x20001b10
 80053ac:	20001b00 	.word	0x20001b00
 80053b0:	20001af4 	.word	0x20001af4
 80053b4:	20001b04 	.word	0x20001b04
 80053b8:	20001b08 	.word	0x20001b08

080053bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d04f      	beq.n	800546e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053ce:	2308      	movs	r3, #8
 80053d0:	425b      	negs	r3, r3
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4413      	add	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	4b25      	ldr	r3, [pc, #148]	@ (8005478 <vPortFree+0xbc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <vPortFree+0x46>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	60fb      	str	r3, [r7, #12]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <vPortFree+0x66>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <vPortFree+0xbc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01e      	beq.n	800546e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11a      	bne.n	800546e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4b0e      	ldr	r3, [pc, #56]	@ (8005478 <vPortFree+0xbc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	43db      	mvns	r3, r3
 8005442:	401a      	ands	r2, r3
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005448:	f7fe fbbc 	bl	8003bc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <vPortFree+0xc0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4413      	add	r3, r2
 8005456:	4a09      	ldr	r2, [pc, #36]	@ (800547c <vPortFree+0xc0>)
 8005458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800545a:	6938      	ldr	r0, [r7, #16]
 800545c:	f000 f874 	bl	8005548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005460:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <vPortFree+0xc4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	4a06      	ldr	r2, [pc, #24]	@ (8005480 <vPortFree+0xc4>)
 8005468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800546a:	f7fe fbb9 	bl	8003be0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800546e:	bf00      	nop
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20001b10 	.word	0x20001b10
 800547c:	20001b00 	.word	0x20001b00
 8005480:	20001b0c 	.word	0x20001b0c

08005484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800548a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800548e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005490:	4b27      	ldr	r3, [pc, #156]	@ (8005530 <prvHeapInit+0xac>)
 8005492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3307      	adds	r3, #7
 80054a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <prvHeapInit+0xac>)
 80054b4:	4413      	add	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <prvHeapInit+0xb0>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005534 <prvHeapInit+0xb0>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4413      	add	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054d0:	2208      	movs	r2, #8
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0307 	bic.w	r3, r3, #7
 80054de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a15      	ldr	r2, [pc, #84]	@ (8005538 <prvHeapInit+0xb4>)
 80054e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054e6:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <prvHeapInit+0xb4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054ee:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <prvHeapInit+0xb4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005504:	4b0c      	ldr	r3, [pc, #48]	@ (8005538 <prvHeapInit+0xb4>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a0a      	ldr	r2, [pc, #40]	@ (800553c <prvHeapInit+0xb8>)
 8005512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <prvHeapInit+0xbc>)
 800551a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800551c:	4b09      	ldr	r3, [pc, #36]	@ (8005544 <prvHeapInit+0xc0>)
 800551e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005522:	601a      	str	r2, [r3, #0]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000ef4 	.word	0x20000ef4
 8005534:	20001af4 	.word	0x20001af4
 8005538:	20001afc 	.word	0x20001afc
 800553c:	20001b04 	.word	0x20001b04
 8005540:	20001b00 	.word	0x20001b00
 8005544:	20001b10 	.word	0x20001b10

08005548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005550:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <prvInsertBlockIntoFreeList+0xa8>)
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e002      	b.n	800555c <prvInsertBlockIntoFreeList+0x14>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d8f7      	bhi.n	8005556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	4413      	add	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d108      	bne.n	800558a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	441a      	add	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	441a      	add	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d118      	bne.n	80055d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <prvInsertBlockIntoFreeList+0xac>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d00d      	beq.n	80055c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e008      	b.n	80055d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <prvInsertBlockIntoFreeList+0xac>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e003      	b.n	80055d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d002      	beq.n	80055e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	20001af4 	.word	0x20001af4
 80055f4:	20001afc 	.word	0x20001afc

080055f8 <std>:
 80055f8:	2300      	movs	r3, #0
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005606:	6083      	str	r3, [r0, #8]
 8005608:	8181      	strh	r1, [r0, #12]
 800560a:	6643      	str	r3, [r0, #100]	@ 0x64
 800560c:	81c2      	strh	r2, [r0, #14]
 800560e:	6183      	str	r3, [r0, #24]
 8005610:	4619      	mov	r1, r3
 8005612:	2208      	movs	r2, #8
 8005614:	305c      	adds	r0, #92	@ 0x5c
 8005616:	f000 f906 	bl	8005826 <memset>
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <std+0x58>)
 800561c:	6224      	str	r4, [r4, #32]
 800561e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <std+0x5c>)
 8005622:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005624:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <std+0x60>)
 8005626:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005628:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <std+0x64>)
 800562a:	6323      	str	r3, [r4, #48]	@ 0x30
 800562c:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <std+0x68>)
 800562e:	429c      	cmp	r4, r3
 8005630:	d006      	beq.n	8005640 <std+0x48>
 8005632:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005636:	4294      	cmp	r4, r2
 8005638:	d002      	beq.n	8005640 <std+0x48>
 800563a:	33d0      	adds	r3, #208	@ 0xd0
 800563c:	429c      	cmp	r4, r3
 800563e:	d105      	bne.n	800564c <std+0x54>
 8005640:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005648:	f000 b9bc 	b.w	80059c4 <__retarget_lock_init_recursive>
 800564c:	bd10      	pop	{r4, pc}
 800564e:	bf00      	nop
 8005650:	080057a1 	.word	0x080057a1
 8005654:	080057c3 	.word	0x080057c3
 8005658:	080057fb 	.word	0x080057fb
 800565c:	0800581f 	.word	0x0800581f
 8005660:	20001b14 	.word	0x20001b14

08005664 <stdio_exit_handler>:
 8005664:	4a02      	ldr	r2, [pc, #8]	@ (8005670 <stdio_exit_handler+0xc>)
 8005666:	4903      	ldr	r1, [pc, #12]	@ (8005674 <stdio_exit_handler+0x10>)
 8005668:	4803      	ldr	r0, [pc, #12]	@ (8005678 <stdio_exit_handler+0x14>)
 800566a:	f000 b869 	b.w	8005740 <_fwalk_sglue>
 800566e:	bf00      	nop
 8005670:	20000010 	.word	0x20000010
 8005674:	08006279 	.word	0x08006279
 8005678:	20000020 	.word	0x20000020

0800567c <cleanup_stdio>:
 800567c:	6841      	ldr	r1, [r0, #4]
 800567e:	4b0c      	ldr	r3, [pc, #48]	@ (80056b0 <cleanup_stdio+0x34>)
 8005680:	b510      	push	{r4, lr}
 8005682:	4299      	cmp	r1, r3
 8005684:	4604      	mov	r4, r0
 8005686:	d001      	beq.n	800568c <cleanup_stdio+0x10>
 8005688:	f000 fdf6 	bl	8006278 <_fflush_r>
 800568c:	68a1      	ldr	r1, [r4, #8]
 800568e:	4b09      	ldr	r3, [pc, #36]	@ (80056b4 <cleanup_stdio+0x38>)
 8005690:	4299      	cmp	r1, r3
 8005692:	d002      	beq.n	800569a <cleanup_stdio+0x1e>
 8005694:	4620      	mov	r0, r4
 8005696:	f000 fdef 	bl	8006278 <_fflush_r>
 800569a:	68e1      	ldr	r1, [r4, #12]
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <cleanup_stdio+0x3c>)
 800569e:	4299      	cmp	r1, r3
 80056a0:	d004      	beq.n	80056ac <cleanup_stdio+0x30>
 80056a2:	4620      	mov	r0, r4
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	f000 bde6 	b.w	8006278 <_fflush_r>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	20001b14 	.word	0x20001b14
 80056b4:	20001b7c 	.word	0x20001b7c
 80056b8:	20001be4 	.word	0x20001be4

080056bc <global_stdio_init.part.0>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <global_stdio_init.part.0+0x30>)
 80056c0:	4c0b      	ldr	r4, [pc, #44]	@ (80056f0 <global_stdio_init.part.0+0x34>)
 80056c2:	4a0c      	ldr	r2, [pc, #48]	@ (80056f4 <global_stdio_init.part.0+0x38>)
 80056c4:	4620      	mov	r0, r4
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	2104      	movs	r1, #4
 80056ca:	2200      	movs	r2, #0
 80056cc:	f7ff ff94 	bl	80055f8 <std>
 80056d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056d4:	2201      	movs	r2, #1
 80056d6:	2109      	movs	r1, #9
 80056d8:	f7ff ff8e 	bl	80055f8 <std>
 80056dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056e0:	2202      	movs	r2, #2
 80056e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e6:	2112      	movs	r1, #18
 80056e8:	f7ff bf86 	b.w	80055f8 <std>
 80056ec:	20001c4c 	.word	0x20001c4c
 80056f0:	20001b14 	.word	0x20001b14
 80056f4:	08005665 	.word	0x08005665

080056f8 <__sfp_lock_acquire>:
 80056f8:	4801      	ldr	r0, [pc, #4]	@ (8005700 <__sfp_lock_acquire+0x8>)
 80056fa:	f000 b964 	b.w	80059c6 <__retarget_lock_acquire_recursive>
 80056fe:	bf00      	nop
 8005700:	20001c55 	.word	0x20001c55

08005704 <__sfp_lock_release>:
 8005704:	4801      	ldr	r0, [pc, #4]	@ (800570c <__sfp_lock_release+0x8>)
 8005706:	f000 b95f 	b.w	80059c8 <__retarget_lock_release_recursive>
 800570a:	bf00      	nop
 800570c:	20001c55 	.word	0x20001c55

08005710 <__sinit>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	f7ff fff0 	bl	80056f8 <__sfp_lock_acquire>
 8005718:	6a23      	ldr	r3, [r4, #32]
 800571a:	b11b      	cbz	r3, 8005724 <__sinit+0x14>
 800571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005720:	f7ff bff0 	b.w	8005704 <__sfp_lock_release>
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <__sinit+0x28>)
 8005726:	6223      	str	r3, [r4, #32]
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <__sinit+0x2c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f5      	bne.n	800571c <__sinit+0xc>
 8005730:	f7ff ffc4 	bl	80056bc <global_stdio_init.part.0>
 8005734:	e7f2      	b.n	800571c <__sinit+0xc>
 8005736:	bf00      	nop
 8005738:	0800567d 	.word	0x0800567d
 800573c:	20001c4c 	.word	0x20001c4c

08005740 <_fwalk_sglue>:
 8005740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005744:	4607      	mov	r7, r0
 8005746:	4688      	mov	r8, r1
 8005748:	4614      	mov	r4, r2
 800574a:	2600      	movs	r6, #0
 800574c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005750:	f1b9 0901 	subs.w	r9, r9, #1
 8005754:	d505      	bpl.n	8005762 <_fwalk_sglue+0x22>
 8005756:	6824      	ldr	r4, [r4, #0]
 8005758:	2c00      	cmp	r4, #0
 800575a:	d1f7      	bne.n	800574c <_fwalk_sglue+0xc>
 800575c:	4630      	mov	r0, r6
 800575e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005762:	89ab      	ldrh	r3, [r5, #12]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d907      	bls.n	8005778 <_fwalk_sglue+0x38>
 8005768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800576c:	3301      	adds	r3, #1
 800576e:	d003      	beq.n	8005778 <_fwalk_sglue+0x38>
 8005770:	4629      	mov	r1, r5
 8005772:	4638      	mov	r0, r7
 8005774:	47c0      	blx	r8
 8005776:	4306      	orrs	r6, r0
 8005778:	3568      	adds	r5, #104	@ 0x68
 800577a:	e7e9      	b.n	8005750 <_fwalk_sglue+0x10>

0800577c <iprintf>:
 800577c:	b40f      	push	{r0, r1, r2, r3}
 800577e:	b507      	push	{r0, r1, r2, lr}
 8005780:	4906      	ldr	r1, [pc, #24]	@ (800579c <iprintf+0x20>)
 8005782:	ab04      	add	r3, sp, #16
 8005784:	6808      	ldr	r0, [r1, #0]
 8005786:	f853 2b04 	ldr.w	r2, [r3], #4
 800578a:	6881      	ldr	r1, [r0, #8]
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	f000 fa49 	bl	8005c24 <_vfiprintf_r>
 8005792:	b003      	add	sp, #12
 8005794:	f85d eb04 	ldr.w	lr, [sp], #4
 8005798:	b004      	add	sp, #16
 800579a:	4770      	bx	lr
 800579c:	2000001c 	.word	0x2000001c

080057a0 <__sread>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	460c      	mov	r4, r1
 80057a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a8:	f000 f8be 	bl	8005928 <_read_r>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	bfab      	itete	ge
 80057b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057b2:	89a3      	ldrhlt	r3, [r4, #12]
 80057b4:	181b      	addge	r3, r3, r0
 80057b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ba:	bfac      	ite	ge
 80057bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057be:	81a3      	strhlt	r3, [r4, #12]
 80057c0:	bd10      	pop	{r4, pc}

080057c2 <__swrite>:
 80057c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c6:	461f      	mov	r7, r3
 80057c8:	898b      	ldrh	r3, [r1, #12]
 80057ca:	4605      	mov	r5, r0
 80057cc:	05db      	lsls	r3, r3, #23
 80057ce:	460c      	mov	r4, r1
 80057d0:	4616      	mov	r6, r2
 80057d2:	d505      	bpl.n	80057e0 <__swrite+0x1e>
 80057d4:	2302      	movs	r3, #2
 80057d6:	2200      	movs	r2, #0
 80057d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057dc:	f000 f892 	bl	8005904 <_lseek_r>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	4632      	mov	r2, r6
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	4628      	mov	r0, r5
 80057ec:	463b      	mov	r3, r7
 80057ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	f000 b8a9 	b.w	800594c <_write_r>

080057fa <__sseek>:
 80057fa:	b510      	push	{r4, lr}
 80057fc:	460c      	mov	r4, r1
 80057fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005802:	f000 f87f 	bl	8005904 <_lseek_r>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	bf15      	itete	ne
 800580c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800580e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005812:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005816:	81a3      	strheq	r3, [r4, #12]
 8005818:	bf18      	it	ne
 800581a:	81a3      	strhne	r3, [r4, #12]
 800581c:	bd10      	pop	{r4, pc}

0800581e <__sclose>:
 800581e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005822:	f000 b809 	b.w	8005838 <_close_r>

08005826 <memset>:
 8005826:	4603      	mov	r3, r0
 8005828:	4402      	add	r2, r0
 800582a:	4293      	cmp	r3, r2
 800582c:	d100      	bne.n	8005830 <memset+0xa>
 800582e:	4770      	bx	lr
 8005830:	f803 1b01 	strb.w	r1, [r3], #1
 8005834:	e7f9      	b.n	800582a <memset+0x4>
	...

08005838 <_close_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	2300      	movs	r3, #0
 800583c:	4d05      	ldr	r5, [pc, #20]	@ (8005854 <_close_r+0x1c>)
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fa ff87 	bl	8000756 <_close>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_close_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_close_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20001c50 	.word	0x20001c50

08005858 <_reclaim_reent>:
 8005858:	4b29      	ldr	r3, [pc, #164]	@ (8005900 <_reclaim_reent+0xa8>)
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4604      	mov	r4, r0
 8005860:	4283      	cmp	r3, r0
 8005862:	d04b      	beq.n	80058fc <_reclaim_reent+0xa4>
 8005864:	69c3      	ldr	r3, [r0, #28]
 8005866:	b1ab      	cbz	r3, 8005894 <_reclaim_reent+0x3c>
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	b16b      	cbz	r3, 8005888 <_reclaim_reent+0x30>
 800586c:	2500      	movs	r5, #0
 800586e:	69e3      	ldr	r3, [r4, #28]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	5959      	ldr	r1, [r3, r5]
 8005874:	2900      	cmp	r1, #0
 8005876:	d13b      	bne.n	80058f0 <_reclaim_reent+0x98>
 8005878:	3504      	adds	r5, #4
 800587a:	2d80      	cmp	r5, #128	@ 0x80
 800587c:	d1f7      	bne.n	800586e <_reclaim_reent+0x16>
 800587e:	69e3      	ldr	r3, [r4, #28]
 8005880:	4620      	mov	r0, r4
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	f000 f8b0 	bl	80059e8 <_free_r>
 8005888:	69e3      	ldr	r3, [r4, #28]
 800588a:	6819      	ldr	r1, [r3, #0]
 800588c:	b111      	cbz	r1, 8005894 <_reclaim_reent+0x3c>
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f8aa 	bl	80059e8 <_free_r>
 8005894:	6961      	ldr	r1, [r4, #20]
 8005896:	b111      	cbz	r1, 800589e <_reclaim_reent+0x46>
 8005898:	4620      	mov	r0, r4
 800589a:	f000 f8a5 	bl	80059e8 <_free_r>
 800589e:	69e1      	ldr	r1, [r4, #28]
 80058a0:	b111      	cbz	r1, 80058a8 <_reclaim_reent+0x50>
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f8a0 	bl	80059e8 <_free_r>
 80058a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80058aa:	b111      	cbz	r1, 80058b2 <_reclaim_reent+0x5a>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 f89b 	bl	80059e8 <_free_r>
 80058b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058b4:	b111      	cbz	r1, 80058bc <_reclaim_reent+0x64>
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 f896 	bl	80059e8 <_free_r>
 80058bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80058be:	b111      	cbz	r1, 80058c6 <_reclaim_reent+0x6e>
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 f891 	bl	80059e8 <_free_r>
 80058c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80058c8:	b111      	cbz	r1, 80058d0 <_reclaim_reent+0x78>
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 f88c 	bl	80059e8 <_free_r>
 80058d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80058d2:	b111      	cbz	r1, 80058da <_reclaim_reent+0x82>
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 f887 	bl	80059e8 <_free_r>
 80058da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80058dc:	b111      	cbz	r1, 80058e4 <_reclaim_reent+0x8c>
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 f882 	bl	80059e8 <_free_r>
 80058e4:	6a23      	ldr	r3, [r4, #32]
 80058e6:	b14b      	cbz	r3, 80058fc <_reclaim_reent+0xa4>
 80058e8:	4620      	mov	r0, r4
 80058ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80058ee:	4718      	bx	r3
 80058f0:	680e      	ldr	r6, [r1, #0]
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 f878 	bl	80059e8 <_free_r>
 80058f8:	4631      	mov	r1, r6
 80058fa:	e7bb      	b.n	8005874 <_reclaim_reent+0x1c>
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	bf00      	nop
 8005900:	2000001c 	.word	0x2000001c

08005904 <_lseek_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	2200      	movs	r2, #0
 800590e:	4d05      	ldr	r5, [pc, #20]	@ (8005924 <_lseek_r+0x20>)
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fa ff43 	bl	800079e <_lseek>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_lseek_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_lseek_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20001c50 	.word	0x20001c50

08005928 <_read_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	2200      	movs	r2, #0
 8005932:	4d05      	ldr	r5, [pc, #20]	@ (8005948 <_read_r+0x20>)
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fa fef0 	bl	800071c <_read>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_read_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_read_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20001c50 	.word	0x20001c50

0800594c <_write_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	2200      	movs	r2, #0
 8005956:	4d05      	ldr	r5, [pc, #20]	@ (800596c <_write_r+0x20>)
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fa fbf8 	bl	8000150 <_write>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_write_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_write_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20001c50 	.word	0x20001c50

08005970 <__errno>:
 8005970:	4b01      	ldr	r3, [pc, #4]	@ (8005978 <__errno+0x8>)
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	2000001c 	.word	0x2000001c

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	2600      	movs	r6, #0
 8005980:	4d0c      	ldr	r5, [pc, #48]	@ (80059b4 <__libc_init_array+0x38>)
 8005982:	4c0d      	ldr	r4, [pc, #52]	@ (80059b8 <__libc_init_array+0x3c>)
 8005984:	1b64      	subs	r4, r4, r5
 8005986:	10a4      	asrs	r4, r4, #2
 8005988:	42a6      	cmp	r6, r4
 800598a:	d109      	bne.n	80059a0 <__libc_init_array+0x24>
 800598c:	f000 fdd2 	bl	8006534 <_init>
 8005990:	2600      	movs	r6, #0
 8005992:	4d0a      	ldr	r5, [pc, #40]	@ (80059bc <__libc_init_array+0x40>)
 8005994:	4c0a      	ldr	r4, [pc, #40]	@ (80059c0 <__libc_init_array+0x44>)
 8005996:	1b64      	subs	r4, r4, r5
 8005998:	10a4      	asrs	r4, r4, #2
 800599a:	42a6      	cmp	r6, r4
 800599c:	d105      	bne.n	80059aa <__libc_init_array+0x2e>
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a4:	4798      	blx	r3
 80059a6:	3601      	adds	r6, #1
 80059a8:	e7ee      	b.n	8005988 <__libc_init_array+0xc>
 80059aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ae:	4798      	blx	r3
 80059b0:	3601      	adds	r6, #1
 80059b2:	e7f2      	b.n	800599a <__libc_init_array+0x1e>
 80059b4:	08006684 	.word	0x08006684
 80059b8:	08006684 	.word	0x08006684
 80059bc:	08006684 	.word	0x08006684
 80059c0:	08006688 	.word	0x08006688

080059c4 <__retarget_lock_init_recursive>:
 80059c4:	4770      	bx	lr

080059c6 <__retarget_lock_acquire_recursive>:
 80059c6:	4770      	bx	lr

080059c8 <__retarget_lock_release_recursive>:
 80059c8:	4770      	bx	lr

080059ca <memcpy>:
 80059ca:	440a      	add	r2, r1
 80059cc:	4291      	cmp	r1, r2
 80059ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80059d2:	d100      	bne.n	80059d6 <memcpy+0xc>
 80059d4:	4770      	bx	lr
 80059d6:	b510      	push	{r4, lr}
 80059d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059dc:	4291      	cmp	r1, r2
 80059de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059e2:	d1f9      	bne.n	80059d8 <memcpy+0xe>
 80059e4:	bd10      	pop	{r4, pc}
	...

080059e8 <_free_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4605      	mov	r5, r0
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d040      	beq.n	8005a72 <_free_r+0x8a>
 80059f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f4:	1f0c      	subs	r4, r1, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bfb8      	it	lt
 80059fa:	18e4      	addlt	r4, r4, r3
 80059fc:	f000 f8de 	bl	8005bbc <__malloc_lock>
 8005a00:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <_free_r+0x8c>)
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	b933      	cbnz	r3, 8005a14 <_free_r+0x2c>
 8005a06:	6063      	str	r3, [r4, #4]
 8005a08:	6014      	str	r4, [r2, #0]
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a10:	f000 b8da 	b.w	8005bc8 <__malloc_unlock>
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d908      	bls.n	8005a2a <_free_r+0x42>
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	1821      	adds	r1, r4, r0
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf01      	itttt	eq
 8005a20:	6819      	ldreq	r1, [r3, #0]
 8005a22:	685b      	ldreq	r3, [r3, #4]
 8005a24:	1809      	addeq	r1, r1, r0
 8005a26:	6021      	streq	r1, [r4, #0]
 8005a28:	e7ed      	b.n	8005a06 <_free_r+0x1e>
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b10b      	cbz	r3, 8005a34 <_free_r+0x4c>
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	d9fa      	bls.n	8005a2a <_free_r+0x42>
 8005a34:	6811      	ldr	r1, [r2, #0]
 8005a36:	1850      	adds	r0, r2, r1
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d10b      	bne.n	8005a54 <_free_r+0x6c>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	4401      	add	r1, r0
 8005a40:	1850      	adds	r0, r2, r1
 8005a42:	4283      	cmp	r3, r0
 8005a44:	6011      	str	r1, [r2, #0]
 8005a46:	d1e0      	bne.n	8005a0a <_free_r+0x22>
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4408      	add	r0, r1
 8005a4e:	6010      	str	r0, [r2, #0]
 8005a50:	6053      	str	r3, [r2, #4]
 8005a52:	e7da      	b.n	8005a0a <_free_r+0x22>
 8005a54:	d902      	bls.n	8005a5c <_free_r+0x74>
 8005a56:	230c      	movs	r3, #12
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	e7d6      	b.n	8005a0a <_free_r+0x22>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	1821      	adds	r1, r4, r0
 8005a60:	428b      	cmp	r3, r1
 8005a62:	bf01      	itttt	eq
 8005a64:	6819      	ldreq	r1, [r3, #0]
 8005a66:	685b      	ldreq	r3, [r3, #4]
 8005a68:	1809      	addeq	r1, r1, r0
 8005a6a:	6021      	streq	r1, [r4, #0]
 8005a6c:	6063      	str	r3, [r4, #4]
 8005a6e:	6054      	str	r4, [r2, #4]
 8005a70:	e7cb      	b.n	8005a0a <_free_r+0x22>
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	20001c5c 	.word	0x20001c5c

08005a78 <sbrk_aligned>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ab8 <sbrk_aligned+0x40>)
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	6831      	ldr	r1, [r6, #0]
 8005a80:	4605      	mov	r5, r0
 8005a82:	b911      	cbnz	r1, 8005a8a <sbrk_aligned+0x12>
 8005a84:	f000 fcb4 	bl	80063f0 <_sbrk_r>
 8005a88:	6030      	str	r0, [r6, #0]
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 fcaf 	bl	80063f0 <_sbrk_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d103      	bne.n	8005a9e <sbrk_aligned+0x26>
 8005a96:	f04f 34ff 	mov.w	r4, #4294967295
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	1cc4      	adds	r4, r0, #3
 8005aa0:	f024 0403 	bic.w	r4, r4, #3
 8005aa4:	42a0      	cmp	r0, r4
 8005aa6:	d0f8      	beq.n	8005a9a <sbrk_aligned+0x22>
 8005aa8:	1a21      	subs	r1, r4, r0
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 fca0 	bl	80063f0 <_sbrk_r>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d1f2      	bne.n	8005a9a <sbrk_aligned+0x22>
 8005ab4:	e7ef      	b.n	8005a96 <sbrk_aligned+0x1e>
 8005ab6:	bf00      	nop
 8005ab8:	20001c58 	.word	0x20001c58

08005abc <_malloc_r>:
 8005abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac0:	1ccd      	adds	r5, r1, #3
 8005ac2:	f025 0503 	bic.w	r5, r5, #3
 8005ac6:	3508      	adds	r5, #8
 8005ac8:	2d0c      	cmp	r5, #12
 8005aca:	bf38      	it	cc
 8005acc:	250c      	movcc	r5, #12
 8005ace:	2d00      	cmp	r5, #0
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	db01      	blt.n	8005ad8 <_malloc_r+0x1c>
 8005ad4:	42a9      	cmp	r1, r5
 8005ad6:	d904      	bls.n	8005ae2 <_malloc_r+0x26>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	6033      	str	r3, [r6, #0]
 8005adc:	2000      	movs	r0, #0
 8005ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bb8 <_malloc_r+0xfc>
 8005ae6:	f000 f869 	bl	8005bbc <__malloc_lock>
 8005aea:	f8d8 3000 	ldr.w	r3, [r8]
 8005aee:	461c      	mov	r4, r3
 8005af0:	bb44      	cbnz	r4, 8005b44 <_malloc_r+0x88>
 8005af2:	4629      	mov	r1, r5
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff ffbf 	bl	8005a78 <sbrk_aligned>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	4604      	mov	r4, r0
 8005afe:	d158      	bne.n	8005bb2 <_malloc_r+0xf6>
 8005b00:	f8d8 4000 	ldr.w	r4, [r8]
 8005b04:	4627      	mov	r7, r4
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	d143      	bne.n	8005b92 <_malloc_r+0xd6>
 8005b0a:	2c00      	cmp	r4, #0
 8005b0c:	d04b      	beq.n	8005ba6 <_malloc_r+0xea>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	4639      	mov	r1, r7
 8005b12:	4630      	mov	r0, r6
 8005b14:	eb04 0903 	add.w	r9, r4, r3
 8005b18:	f000 fc6a 	bl	80063f0 <_sbrk_r>
 8005b1c:	4581      	cmp	r9, r0
 8005b1e:	d142      	bne.n	8005ba6 <_malloc_r+0xea>
 8005b20:	6821      	ldr	r1, [r4, #0]
 8005b22:	4630      	mov	r0, r6
 8005b24:	1a6d      	subs	r5, r5, r1
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7ff ffa6 	bl	8005a78 <sbrk_aligned>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d03a      	beq.n	8005ba6 <_malloc_r+0xea>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	442b      	add	r3, r5
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	bb62      	cbnz	r2, 8005b98 <_malloc_r+0xdc>
 8005b3e:	f8c8 7000 	str.w	r7, [r8]
 8005b42:	e00f      	b.n	8005b64 <_malloc_r+0xa8>
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	1b52      	subs	r2, r2, r5
 8005b48:	d420      	bmi.n	8005b8c <_malloc_r+0xd0>
 8005b4a:	2a0b      	cmp	r2, #11
 8005b4c:	d917      	bls.n	8005b7e <_malloc_r+0xc2>
 8005b4e:	1961      	adds	r1, r4, r5
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	6025      	str	r5, [r4, #0]
 8005b54:	bf18      	it	ne
 8005b56:	6059      	strne	r1, [r3, #4]
 8005b58:	6863      	ldr	r3, [r4, #4]
 8005b5a:	bf08      	it	eq
 8005b5c:	f8c8 1000 	streq.w	r1, [r8]
 8005b60:	5162      	str	r2, [r4, r5]
 8005b62:	604b      	str	r3, [r1, #4]
 8005b64:	4630      	mov	r0, r6
 8005b66:	f000 f82f 	bl	8005bc8 <__malloc_unlock>
 8005b6a:	f104 000b 	add.w	r0, r4, #11
 8005b6e:	1d23      	adds	r3, r4, #4
 8005b70:	f020 0007 	bic.w	r0, r0, #7
 8005b74:	1ac2      	subs	r2, r0, r3
 8005b76:	bf1c      	itt	ne
 8005b78:	1a1b      	subne	r3, r3, r0
 8005b7a:	50a3      	strne	r3, [r4, r2]
 8005b7c:	e7af      	b.n	8005ade <_malloc_r+0x22>
 8005b7e:	6862      	ldr	r2, [r4, #4]
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	bf0c      	ite	eq
 8005b84:	f8c8 2000 	streq.w	r2, [r8]
 8005b88:	605a      	strne	r2, [r3, #4]
 8005b8a:	e7eb      	b.n	8005b64 <_malloc_r+0xa8>
 8005b8c:	4623      	mov	r3, r4
 8005b8e:	6864      	ldr	r4, [r4, #4]
 8005b90:	e7ae      	b.n	8005af0 <_malloc_r+0x34>
 8005b92:	463c      	mov	r4, r7
 8005b94:	687f      	ldr	r7, [r7, #4]
 8005b96:	e7b6      	b.n	8005b06 <_malloc_r+0x4a>
 8005b98:	461a      	mov	r2, r3
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d1fb      	bne.n	8005b98 <_malloc_r+0xdc>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6053      	str	r3, [r2, #4]
 8005ba4:	e7de      	b.n	8005b64 <_malloc_r+0xa8>
 8005ba6:	230c      	movs	r3, #12
 8005ba8:	4630      	mov	r0, r6
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f000 f80c 	bl	8005bc8 <__malloc_unlock>
 8005bb0:	e794      	b.n	8005adc <_malloc_r+0x20>
 8005bb2:	6005      	str	r5, [r0, #0]
 8005bb4:	e7d6      	b.n	8005b64 <_malloc_r+0xa8>
 8005bb6:	bf00      	nop
 8005bb8:	20001c5c 	.word	0x20001c5c

08005bbc <__malloc_lock>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	@ (8005bc4 <__malloc_lock+0x8>)
 8005bbe:	f7ff bf02 	b.w	80059c6 <__retarget_lock_acquire_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	20001c54 	.word	0x20001c54

08005bc8 <__malloc_unlock>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	@ (8005bd0 <__malloc_unlock+0x8>)
 8005bca:	f7ff befd 	b.w	80059c8 <__retarget_lock_release_recursive>
 8005bce:	bf00      	nop
 8005bd0:	20001c54 	.word	0x20001c54

08005bd4 <__sfputc_r>:
 8005bd4:	6893      	ldr	r3, [r2, #8]
 8005bd6:	b410      	push	{r4}
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	6093      	str	r3, [r2, #8]
 8005bde:	da07      	bge.n	8005bf0 <__sfputc_r+0x1c>
 8005be0:	6994      	ldr	r4, [r2, #24]
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	db01      	blt.n	8005bea <__sfputc_r+0x16>
 8005be6:	290a      	cmp	r1, #10
 8005be8:	d102      	bne.n	8005bf0 <__sfputc_r+0x1c>
 8005bea:	bc10      	pop	{r4}
 8005bec:	f000 bb6c 	b.w	80062c8 <__swbuf_r>
 8005bf0:	6813      	ldr	r3, [r2, #0]
 8005bf2:	1c58      	adds	r0, r3, #1
 8005bf4:	6010      	str	r0, [r2, #0]
 8005bf6:	7019      	strb	r1, [r3, #0]
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	bc10      	pop	{r4}
 8005bfc:	4770      	bx	lr

08005bfe <__sfputs_r>:
 8005bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c00:	4606      	mov	r6, r0
 8005c02:	460f      	mov	r7, r1
 8005c04:	4614      	mov	r4, r2
 8005c06:	18d5      	adds	r5, r2, r3
 8005c08:	42ac      	cmp	r4, r5
 8005c0a:	d101      	bne.n	8005c10 <__sfputs_r+0x12>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e007      	b.n	8005c20 <__sfputs_r+0x22>
 8005c10:	463a      	mov	r2, r7
 8005c12:	4630      	mov	r0, r6
 8005c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c18:	f7ff ffdc 	bl	8005bd4 <__sfputc_r>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d1f3      	bne.n	8005c08 <__sfputs_r+0xa>
 8005c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c24 <_vfiprintf_r>:
 8005c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	460d      	mov	r5, r1
 8005c2a:	4614      	mov	r4, r2
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	4606      	mov	r6, r0
 8005c30:	b09d      	sub	sp, #116	@ 0x74
 8005c32:	b118      	cbz	r0, 8005c3c <_vfiprintf_r+0x18>
 8005c34:	6a03      	ldr	r3, [r0, #32]
 8005c36:	b90b      	cbnz	r3, 8005c3c <_vfiprintf_r+0x18>
 8005c38:	f7ff fd6a 	bl	8005710 <__sinit>
 8005c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d405      	bmi.n	8005c4e <_vfiprintf_r+0x2a>
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	059a      	lsls	r2, r3, #22
 8005c46:	d402      	bmi.n	8005c4e <_vfiprintf_r+0x2a>
 8005c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c4a:	f7ff febc 	bl	80059c6 <__retarget_lock_acquire_recursive>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	d501      	bpl.n	8005c58 <_vfiprintf_r+0x34>
 8005c54:	692b      	ldr	r3, [r5, #16]
 8005c56:	b99b      	cbnz	r3, 8005c80 <_vfiprintf_r+0x5c>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 fb72 	bl	8006344 <__swsetup_r>
 8005c60:	b170      	cbz	r0, 8005c80 <_vfiprintf_r+0x5c>
 8005c62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c64:	07dc      	lsls	r4, r3, #31
 8005c66:	d504      	bpl.n	8005c72 <_vfiprintf_r+0x4e>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	b01d      	add	sp, #116	@ 0x74
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	89ab      	ldrh	r3, [r5, #12]
 8005c74:	0598      	lsls	r0, r3, #22
 8005c76:	d4f7      	bmi.n	8005c68 <_vfiprintf_r+0x44>
 8005c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c7a:	f7ff fea5 	bl	80059c8 <__retarget_lock_release_recursive>
 8005c7e:	e7f3      	b.n	8005c68 <_vfiprintf_r+0x44>
 8005c80:	2300      	movs	r3, #0
 8005c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c84:	2320      	movs	r3, #32
 8005c86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c8a:	2330      	movs	r3, #48	@ 0x30
 8005c8c:	f04f 0901 	mov.w	r9, #1
 8005c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005e40 <_vfiprintf_r+0x21c>
 8005c98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c9c:	4623      	mov	r3, r4
 8005c9e:	469a      	mov	sl, r3
 8005ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca4:	b10a      	cbz	r2, 8005caa <_vfiprintf_r+0x86>
 8005ca6:	2a25      	cmp	r2, #37	@ 0x25
 8005ca8:	d1f9      	bne.n	8005c9e <_vfiprintf_r+0x7a>
 8005caa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cae:	d00b      	beq.n	8005cc8 <_vfiprintf_r+0xa4>
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7ff ffa1 	bl	8005bfe <__sfputs_r>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f000 80a7 	beq.w	8005e10 <_vfiprintf_r+0x1ec>
 8005cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cc4:	445a      	add	r2, fp
 8005cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 809f 	beq.w	8005e10 <_vfiprintf_r+0x1ec>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cdc:	f10a 0a01 	add.w	sl, sl, #1
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ce8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cea:	4654      	mov	r4, sl
 8005cec:	2205      	movs	r2, #5
 8005cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf2:	4853      	ldr	r0, [pc, #332]	@ (8005e40 <_vfiprintf_r+0x21c>)
 8005cf4:	f000 fb8c 	bl	8006410 <memchr>
 8005cf8:	9a04      	ldr	r2, [sp, #16]
 8005cfa:	b9d8      	cbnz	r0, 8005d34 <_vfiprintf_r+0x110>
 8005cfc:	06d1      	lsls	r1, r2, #27
 8005cfe:	bf44      	itt	mi
 8005d00:	2320      	movmi	r3, #32
 8005d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d06:	0713      	lsls	r3, r2, #28
 8005d08:	bf44      	itt	mi
 8005d0a:	232b      	movmi	r3, #43	@ 0x2b
 8005d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d10:	f89a 3000 	ldrb.w	r3, [sl]
 8005d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d16:	d015      	beq.n	8005d44 <_vfiprintf_r+0x120>
 8005d18:	4654      	mov	r4, sl
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f04f 0c0a 	mov.w	ip, #10
 8005d20:	9a07      	ldr	r2, [sp, #28]
 8005d22:	4621      	mov	r1, r4
 8005d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d28:	3b30      	subs	r3, #48	@ 0x30
 8005d2a:	2b09      	cmp	r3, #9
 8005d2c:	d94b      	bls.n	8005dc6 <_vfiprintf_r+0x1a2>
 8005d2e:	b1b0      	cbz	r0, 8005d5e <_vfiprintf_r+0x13a>
 8005d30:	9207      	str	r2, [sp, #28]
 8005d32:	e014      	b.n	8005d5e <_vfiprintf_r+0x13a>
 8005d34:	eba0 0308 	sub.w	r3, r0, r8
 8005d38:	fa09 f303 	lsl.w	r3, r9, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	46a2      	mov	sl, r4
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	e7d2      	b.n	8005cea <_vfiprintf_r+0xc6>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	1d19      	adds	r1, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	9103      	str	r1, [sp, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfbb      	ittet	lt
 8005d50:	425b      	neglt	r3, r3
 8005d52:	f042 0202 	orrlt.w	r2, r2, #2
 8005d56:	9307      	strge	r3, [sp, #28]
 8005d58:	9307      	strlt	r3, [sp, #28]
 8005d5a:	bfb8      	it	lt
 8005d5c:	9204      	strlt	r2, [sp, #16]
 8005d5e:	7823      	ldrb	r3, [r4, #0]
 8005d60:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d62:	d10a      	bne.n	8005d7a <_vfiprintf_r+0x156>
 8005d64:	7863      	ldrb	r3, [r4, #1]
 8005d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d68:	d132      	bne.n	8005dd0 <_vfiprintf_r+0x1ac>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	3402      	adds	r4, #2
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	9203      	str	r2, [sp, #12]
 8005d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d78:	9305      	str	r3, [sp, #20]
 8005d7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005e44 <_vfiprintf_r+0x220>
 8005d7e:	2203      	movs	r2, #3
 8005d80:	4650      	mov	r0, sl
 8005d82:	7821      	ldrb	r1, [r4, #0]
 8005d84:	f000 fb44 	bl	8006410 <memchr>
 8005d88:	b138      	cbz	r0, 8005d9a <_vfiprintf_r+0x176>
 8005d8a:	2240      	movs	r2, #64	@ 0x40
 8005d8c:	9b04      	ldr	r3, [sp, #16]
 8005d8e:	eba0 000a 	sub.w	r0, r0, sl
 8005d92:	4082      	lsls	r2, r0
 8005d94:	4313      	orrs	r3, r2
 8005d96:	3401      	adds	r4, #1
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9e:	2206      	movs	r2, #6
 8005da0:	4829      	ldr	r0, [pc, #164]	@ (8005e48 <_vfiprintf_r+0x224>)
 8005da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005da6:	f000 fb33 	bl	8006410 <memchr>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d03f      	beq.n	8005e2e <_vfiprintf_r+0x20a>
 8005dae:	4b27      	ldr	r3, [pc, #156]	@ (8005e4c <_vfiprintf_r+0x228>)
 8005db0:	bb1b      	cbnz	r3, 8005dfa <_vfiprintf_r+0x1d6>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	3307      	adds	r3, #7
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	3308      	adds	r3, #8
 8005dbc:	9303      	str	r3, [sp, #12]
 8005dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc0:	443b      	add	r3, r7
 8005dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc4:	e76a      	b.n	8005c9c <_vfiprintf_r+0x78>
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	2001      	movs	r0, #1
 8005dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dce:	e7a8      	b.n	8005d22 <_vfiprintf_r+0xfe>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f04f 0c0a 	mov.w	ip, #10
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	3401      	adds	r4, #1
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de2:	3a30      	subs	r2, #48	@ 0x30
 8005de4:	2a09      	cmp	r2, #9
 8005de6:	d903      	bls.n	8005df0 <_vfiprintf_r+0x1cc>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0c6      	beq.n	8005d7a <_vfiprintf_r+0x156>
 8005dec:	9105      	str	r1, [sp, #20]
 8005dee:	e7c4      	b.n	8005d7a <_vfiprintf_r+0x156>
 8005df0:	4604      	mov	r4, r0
 8005df2:	2301      	movs	r3, #1
 8005df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df8:	e7f0      	b.n	8005ddc <_vfiprintf_r+0x1b8>
 8005dfa:	ab03      	add	r3, sp, #12
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	462a      	mov	r2, r5
 8005e00:	4630      	mov	r0, r6
 8005e02:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <_vfiprintf_r+0x22c>)
 8005e04:	a904      	add	r1, sp, #16
 8005e06:	f3af 8000 	nop.w
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	1c78      	adds	r0, r7, #1
 8005e0e:	d1d6      	bne.n	8005dbe <_vfiprintf_r+0x19a>
 8005e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e12:	07d9      	lsls	r1, r3, #31
 8005e14:	d405      	bmi.n	8005e22 <_vfiprintf_r+0x1fe>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	059a      	lsls	r2, r3, #22
 8005e1a:	d402      	bmi.n	8005e22 <_vfiprintf_r+0x1fe>
 8005e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e1e:	f7ff fdd3 	bl	80059c8 <__retarget_lock_release_recursive>
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	065b      	lsls	r3, r3, #25
 8005e26:	f53f af1f 	bmi.w	8005c68 <_vfiprintf_r+0x44>
 8005e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e2c:	e71e      	b.n	8005c6c <_vfiprintf_r+0x48>
 8005e2e:	ab03      	add	r3, sp, #12
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	462a      	mov	r2, r5
 8005e34:	4630      	mov	r0, r6
 8005e36:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <_vfiprintf_r+0x22c>)
 8005e38:	a904      	add	r1, sp, #16
 8005e3a:	f000 f87d 	bl	8005f38 <_printf_i>
 8005e3e:	e7e4      	b.n	8005e0a <_vfiprintf_r+0x1e6>
 8005e40:	0800664e 	.word	0x0800664e
 8005e44:	08006654 	.word	0x08006654
 8005e48:	08006658 	.word	0x08006658
 8005e4c:	00000000 	.word	0x00000000
 8005e50:	08005bff 	.word	0x08005bff

08005e54 <_printf_common>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	4616      	mov	r6, r2
 8005e5a:	4698      	mov	r8, r3
 8005e5c:	688a      	ldr	r2, [r1, #8]
 8005e5e:	690b      	ldr	r3, [r1, #16]
 8005e60:	4607      	mov	r7, r0
 8005e62:	4293      	cmp	r3, r2
 8005e64:	bfb8      	it	lt
 8005e66:	4613      	movlt	r3, r2
 8005e68:	6033      	str	r3, [r6, #0]
 8005e6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e6e:	460c      	mov	r4, r1
 8005e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e74:	b10a      	cbz	r2, 8005e7a <_printf_common+0x26>
 8005e76:	3301      	adds	r3, #1
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	0699      	lsls	r1, r3, #26
 8005e7e:	bf42      	ittt	mi
 8005e80:	6833      	ldrmi	r3, [r6, #0]
 8005e82:	3302      	addmi	r3, #2
 8005e84:	6033      	strmi	r3, [r6, #0]
 8005e86:	6825      	ldr	r5, [r4, #0]
 8005e88:	f015 0506 	ands.w	r5, r5, #6
 8005e8c:	d106      	bne.n	8005e9c <_printf_common+0x48>
 8005e8e:	f104 0a19 	add.w	sl, r4, #25
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	6832      	ldr	r2, [r6, #0]
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dc2b      	bgt.n	8005ef4 <_printf_common+0xa0>
 8005e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	3b00      	subs	r3, #0
 8005ea4:	bf18      	it	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	0692      	lsls	r2, r2, #26
 8005eaa:	d430      	bmi.n	8005f0e <_printf_common+0xba>
 8005eac:	4641      	mov	r1, r8
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005eb4:	47c8      	blx	r9
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d023      	beq.n	8005f02 <_printf_common+0xae>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	6922      	ldr	r2, [r4, #16]
 8005ebe:	f003 0306 	and.w	r3, r3, #6
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	bf14      	ite	ne
 8005ec6:	2500      	movne	r5, #0
 8005ec8:	6833      	ldreq	r3, [r6, #0]
 8005eca:	f04f 0600 	mov.w	r6, #0
 8005ece:	bf08      	it	eq
 8005ed0:	68e5      	ldreq	r5, [r4, #12]
 8005ed2:	f104 041a 	add.w	r4, r4, #26
 8005ed6:	bf08      	it	eq
 8005ed8:	1aed      	subeq	r5, r5, r3
 8005eda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ede:	bf08      	it	eq
 8005ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bfc4      	itt	gt
 8005ee8:	1a9b      	subgt	r3, r3, r2
 8005eea:	18ed      	addgt	r5, r5, r3
 8005eec:	42b5      	cmp	r5, r6
 8005eee:	d11a      	bne.n	8005f26 <_printf_common+0xd2>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e008      	b.n	8005f06 <_printf_common+0xb2>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	4641      	mov	r1, r8
 8005efa:	4638      	mov	r0, r7
 8005efc:	47c8      	blx	r9
 8005efe:	3001      	adds	r0, #1
 8005f00:	d103      	bne.n	8005f0a <_printf_common+0xb6>
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	3501      	adds	r5, #1
 8005f0c:	e7c1      	b.n	8005e92 <_printf_common+0x3e>
 8005f0e:	2030      	movs	r0, #48	@ 0x30
 8005f10:	18e1      	adds	r1, r4, r3
 8005f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f1c:	4422      	add	r2, r4
 8005f1e:	3302      	adds	r3, #2
 8005f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f24:	e7c2      	b.n	8005eac <_printf_common+0x58>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	47c8      	blx	r9
 8005f30:	3001      	adds	r0, #1
 8005f32:	d0e6      	beq.n	8005f02 <_printf_common+0xae>
 8005f34:	3601      	adds	r6, #1
 8005f36:	e7d9      	b.n	8005eec <_printf_common+0x98>

08005f38 <_printf_i>:
 8005f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	7e0f      	ldrb	r7, [r1, #24]
 8005f3e:	4691      	mov	r9, r2
 8005f40:	2f78      	cmp	r7, #120	@ 0x78
 8005f42:	4680      	mov	r8, r0
 8005f44:	460c      	mov	r4, r1
 8005f46:	469a      	mov	sl, r3
 8005f48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f4e:	d807      	bhi.n	8005f60 <_printf_i+0x28>
 8005f50:	2f62      	cmp	r7, #98	@ 0x62
 8005f52:	d80a      	bhi.n	8005f6a <_printf_i+0x32>
 8005f54:	2f00      	cmp	r7, #0
 8005f56:	f000 80d3 	beq.w	8006100 <_printf_i+0x1c8>
 8005f5a:	2f58      	cmp	r7, #88	@ 0x58
 8005f5c:	f000 80ba 	beq.w	80060d4 <_printf_i+0x19c>
 8005f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f68:	e03a      	b.n	8005fe0 <_printf_i+0xa8>
 8005f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f6e:	2b15      	cmp	r3, #21
 8005f70:	d8f6      	bhi.n	8005f60 <_printf_i+0x28>
 8005f72:	a101      	add	r1, pc, #4	@ (adr r1, 8005f78 <_printf_i+0x40>)
 8005f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005f61 	.word	0x08005f61
 8005f84:	08005f61 	.word	0x08005f61
 8005f88:	08005f61 	.word	0x08005f61
 8005f8c:	08005f61 	.word	0x08005f61
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005f61 	.word	0x08005f61
 8005f98:	08005f61 	.word	0x08005f61
 8005f9c:	08005f61 	.word	0x08005f61
 8005fa0:	08005f61 	.word	0x08005f61
 8005fa4:	080060e7 	.word	0x080060e7
 8005fa8:	0800600f 	.word	0x0800600f
 8005fac:	080060a1 	.word	0x080060a1
 8005fb0:	08005f61 	.word	0x08005f61
 8005fb4:	08005f61 	.word	0x08005f61
 8005fb8:	08006109 	.word	0x08006109
 8005fbc:	08005f61 	.word	0x08005f61
 8005fc0:	0800600f 	.word	0x0800600f
 8005fc4:	08005f61 	.word	0x08005f61
 8005fc8:	08005f61 	.word	0x08005f61
 8005fcc:	080060a9 	.word	0x080060a9
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6032      	str	r2, [r6, #0]
 8005fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e09e      	b.n	8006122 <_printf_i+0x1ea>
 8005fe4:	6833      	ldr	r3, [r6, #0]
 8005fe6:	6820      	ldr	r0, [r4, #0]
 8005fe8:	1d19      	adds	r1, r3, #4
 8005fea:	6031      	str	r1, [r6, #0]
 8005fec:	0606      	lsls	r6, r0, #24
 8005fee:	d501      	bpl.n	8005ff4 <_printf_i+0xbc>
 8005ff0:	681d      	ldr	r5, [r3, #0]
 8005ff2:	e003      	b.n	8005ffc <_printf_i+0xc4>
 8005ff4:	0645      	lsls	r5, r0, #25
 8005ff6:	d5fb      	bpl.n	8005ff0 <_printf_i+0xb8>
 8005ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	da03      	bge.n	8006008 <_printf_i+0xd0>
 8006000:	232d      	movs	r3, #45	@ 0x2d
 8006002:	426d      	negs	r5, r5
 8006004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006008:	230a      	movs	r3, #10
 800600a:	4859      	ldr	r0, [pc, #356]	@ (8006170 <_printf_i+0x238>)
 800600c:	e011      	b.n	8006032 <_printf_i+0xfa>
 800600e:	6821      	ldr	r1, [r4, #0]
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	0608      	lsls	r0, r1, #24
 8006014:	f853 5b04 	ldr.w	r5, [r3], #4
 8006018:	d402      	bmi.n	8006020 <_printf_i+0xe8>
 800601a:	0649      	lsls	r1, r1, #25
 800601c:	bf48      	it	mi
 800601e:	b2ad      	uxthmi	r5, r5
 8006020:	2f6f      	cmp	r7, #111	@ 0x6f
 8006022:	6033      	str	r3, [r6, #0]
 8006024:	bf14      	ite	ne
 8006026:	230a      	movne	r3, #10
 8006028:	2308      	moveq	r3, #8
 800602a:	4851      	ldr	r0, [pc, #324]	@ (8006170 <_printf_i+0x238>)
 800602c:	2100      	movs	r1, #0
 800602e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006032:	6866      	ldr	r6, [r4, #4]
 8006034:	2e00      	cmp	r6, #0
 8006036:	bfa8      	it	ge
 8006038:	6821      	ldrge	r1, [r4, #0]
 800603a:	60a6      	str	r6, [r4, #8]
 800603c:	bfa4      	itt	ge
 800603e:	f021 0104 	bicge.w	r1, r1, #4
 8006042:	6021      	strge	r1, [r4, #0]
 8006044:	b90d      	cbnz	r5, 800604a <_printf_i+0x112>
 8006046:	2e00      	cmp	r6, #0
 8006048:	d04b      	beq.n	80060e2 <_printf_i+0x1aa>
 800604a:	4616      	mov	r6, r2
 800604c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006050:	fb03 5711 	mls	r7, r3, r1, r5
 8006054:	5dc7      	ldrb	r7, [r0, r7]
 8006056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800605a:	462f      	mov	r7, r5
 800605c:	42bb      	cmp	r3, r7
 800605e:	460d      	mov	r5, r1
 8006060:	d9f4      	bls.n	800604c <_printf_i+0x114>
 8006062:	2b08      	cmp	r3, #8
 8006064:	d10b      	bne.n	800607e <_printf_i+0x146>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	07df      	lsls	r7, r3, #31
 800606a:	d508      	bpl.n	800607e <_printf_i+0x146>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	6861      	ldr	r1, [r4, #4]
 8006070:	4299      	cmp	r1, r3
 8006072:	bfde      	ittt	le
 8006074:	2330      	movle	r3, #48	@ 0x30
 8006076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800607a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800607e:	1b92      	subs	r2, r2, r6
 8006080:	6122      	str	r2, [r4, #16]
 8006082:	464b      	mov	r3, r9
 8006084:	4621      	mov	r1, r4
 8006086:	4640      	mov	r0, r8
 8006088:	f8cd a000 	str.w	sl, [sp]
 800608c:	aa03      	add	r2, sp, #12
 800608e:	f7ff fee1 	bl	8005e54 <_printf_common>
 8006092:	3001      	adds	r0, #1
 8006094:	d14a      	bne.n	800612c <_printf_i+0x1f4>
 8006096:	f04f 30ff 	mov.w	r0, #4294967295
 800609a:	b004      	add	sp, #16
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	f043 0320 	orr.w	r3, r3, #32
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	2778      	movs	r7, #120	@ 0x78
 80060aa:	4832      	ldr	r0, [pc, #200]	@ (8006174 <_printf_i+0x23c>)
 80060ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	6831      	ldr	r1, [r6, #0]
 80060b4:	061f      	lsls	r7, r3, #24
 80060b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80060ba:	d402      	bmi.n	80060c2 <_printf_i+0x18a>
 80060bc:	065f      	lsls	r7, r3, #25
 80060be:	bf48      	it	mi
 80060c0:	b2ad      	uxthmi	r5, r5
 80060c2:	6031      	str	r1, [r6, #0]
 80060c4:	07d9      	lsls	r1, r3, #31
 80060c6:	bf44      	itt	mi
 80060c8:	f043 0320 	orrmi.w	r3, r3, #32
 80060cc:	6023      	strmi	r3, [r4, #0]
 80060ce:	b11d      	cbz	r5, 80060d8 <_printf_i+0x1a0>
 80060d0:	2310      	movs	r3, #16
 80060d2:	e7ab      	b.n	800602c <_printf_i+0xf4>
 80060d4:	4826      	ldr	r0, [pc, #152]	@ (8006170 <_printf_i+0x238>)
 80060d6:	e7e9      	b.n	80060ac <_printf_i+0x174>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	f023 0320 	bic.w	r3, r3, #32
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	e7f6      	b.n	80060d0 <_printf_i+0x198>
 80060e2:	4616      	mov	r6, r2
 80060e4:	e7bd      	b.n	8006062 <_printf_i+0x12a>
 80060e6:	6833      	ldr	r3, [r6, #0]
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	1d18      	adds	r0, r3, #4
 80060ec:	6961      	ldr	r1, [r4, #20]
 80060ee:	6030      	str	r0, [r6, #0]
 80060f0:	062e      	lsls	r6, r5, #24
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	d501      	bpl.n	80060fa <_printf_i+0x1c2>
 80060f6:	6019      	str	r1, [r3, #0]
 80060f8:	e002      	b.n	8006100 <_printf_i+0x1c8>
 80060fa:	0668      	lsls	r0, r5, #25
 80060fc:	d5fb      	bpl.n	80060f6 <_printf_i+0x1be>
 80060fe:	8019      	strh	r1, [r3, #0]
 8006100:	2300      	movs	r3, #0
 8006102:	4616      	mov	r6, r2
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	e7bc      	b.n	8006082 <_printf_i+0x14a>
 8006108:	6833      	ldr	r3, [r6, #0]
 800610a:	2100      	movs	r1, #0
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	6032      	str	r2, [r6, #0]
 8006110:	681e      	ldr	r6, [r3, #0]
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	4630      	mov	r0, r6
 8006116:	f000 f97b 	bl	8006410 <memchr>
 800611a:	b108      	cbz	r0, 8006120 <_printf_i+0x1e8>
 800611c:	1b80      	subs	r0, r0, r6
 800611e:	6060      	str	r0, [r4, #4]
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	6123      	str	r3, [r4, #16]
 8006124:	2300      	movs	r3, #0
 8006126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800612a:	e7aa      	b.n	8006082 <_printf_i+0x14a>
 800612c:	4632      	mov	r2, r6
 800612e:	4649      	mov	r1, r9
 8006130:	4640      	mov	r0, r8
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	47d0      	blx	sl
 8006136:	3001      	adds	r0, #1
 8006138:	d0ad      	beq.n	8006096 <_printf_i+0x15e>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	079b      	lsls	r3, r3, #30
 800613e:	d413      	bmi.n	8006168 <_printf_i+0x230>
 8006140:	68e0      	ldr	r0, [r4, #12]
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	4298      	cmp	r0, r3
 8006146:	bfb8      	it	lt
 8006148:	4618      	movlt	r0, r3
 800614a:	e7a6      	b.n	800609a <_printf_i+0x162>
 800614c:	2301      	movs	r3, #1
 800614e:	4632      	mov	r2, r6
 8006150:	4649      	mov	r1, r9
 8006152:	4640      	mov	r0, r8
 8006154:	47d0      	blx	sl
 8006156:	3001      	adds	r0, #1
 8006158:	d09d      	beq.n	8006096 <_printf_i+0x15e>
 800615a:	3501      	adds	r5, #1
 800615c:	68e3      	ldr	r3, [r4, #12]
 800615e:	9903      	ldr	r1, [sp, #12]
 8006160:	1a5b      	subs	r3, r3, r1
 8006162:	42ab      	cmp	r3, r5
 8006164:	dcf2      	bgt.n	800614c <_printf_i+0x214>
 8006166:	e7eb      	b.n	8006140 <_printf_i+0x208>
 8006168:	2500      	movs	r5, #0
 800616a:	f104 0619 	add.w	r6, r4, #25
 800616e:	e7f5      	b.n	800615c <_printf_i+0x224>
 8006170:	0800665f 	.word	0x0800665f
 8006174:	08006670 	.word	0x08006670

08006178 <__sflush_r>:
 8006178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	0716      	lsls	r6, r2, #28
 8006180:	4605      	mov	r5, r0
 8006182:	460c      	mov	r4, r1
 8006184:	d454      	bmi.n	8006230 <__sflush_r+0xb8>
 8006186:	684b      	ldr	r3, [r1, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	dc02      	bgt.n	8006192 <__sflush_r+0x1a>
 800618c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	dd48      	ble.n	8006224 <__sflush_r+0xac>
 8006192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006194:	2e00      	cmp	r6, #0
 8006196:	d045      	beq.n	8006224 <__sflush_r+0xac>
 8006198:	2300      	movs	r3, #0
 800619a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800619e:	682f      	ldr	r7, [r5, #0]
 80061a0:	6a21      	ldr	r1, [r4, #32]
 80061a2:	602b      	str	r3, [r5, #0]
 80061a4:	d030      	beq.n	8006208 <__sflush_r+0x90>
 80061a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	0759      	lsls	r1, r3, #29
 80061ac:	d505      	bpl.n	80061ba <__sflush_r+0x42>
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	1ad2      	subs	r2, r2, r3
 80061b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061b4:	b10b      	cbz	r3, 80061ba <__sflush_r+0x42>
 80061b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061b8:	1ad2      	subs	r2, r2, r3
 80061ba:	2300      	movs	r3, #0
 80061bc:	4628      	mov	r0, r5
 80061be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061c0:	6a21      	ldr	r1, [r4, #32]
 80061c2:	47b0      	blx	r6
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	d106      	bne.n	80061d8 <__sflush_r+0x60>
 80061ca:	6829      	ldr	r1, [r5, #0]
 80061cc:	291d      	cmp	r1, #29
 80061ce:	d82b      	bhi.n	8006228 <__sflush_r+0xb0>
 80061d0:	4a28      	ldr	r2, [pc, #160]	@ (8006274 <__sflush_r+0xfc>)
 80061d2:	410a      	asrs	r2, r1
 80061d4:	07d6      	lsls	r6, r2, #31
 80061d6:	d427      	bmi.n	8006228 <__sflush_r+0xb0>
 80061d8:	2200      	movs	r2, #0
 80061da:	6062      	str	r2, [r4, #4]
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	04d9      	lsls	r1, r3, #19
 80061e0:	6022      	str	r2, [r4, #0]
 80061e2:	d504      	bpl.n	80061ee <__sflush_r+0x76>
 80061e4:	1c42      	adds	r2, r0, #1
 80061e6:	d101      	bne.n	80061ec <__sflush_r+0x74>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b903      	cbnz	r3, 80061ee <__sflush_r+0x76>
 80061ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80061ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061f0:	602f      	str	r7, [r5, #0]
 80061f2:	b1b9      	cbz	r1, 8006224 <__sflush_r+0xac>
 80061f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061f8:	4299      	cmp	r1, r3
 80061fa:	d002      	beq.n	8006202 <__sflush_r+0x8a>
 80061fc:	4628      	mov	r0, r5
 80061fe:	f7ff fbf3 	bl	80059e8 <_free_r>
 8006202:	2300      	movs	r3, #0
 8006204:	6363      	str	r3, [r4, #52]	@ 0x34
 8006206:	e00d      	b.n	8006224 <__sflush_r+0xac>
 8006208:	2301      	movs	r3, #1
 800620a:	4628      	mov	r0, r5
 800620c:	47b0      	blx	r6
 800620e:	4602      	mov	r2, r0
 8006210:	1c50      	adds	r0, r2, #1
 8006212:	d1c9      	bne.n	80061a8 <__sflush_r+0x30>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0c6      	beq.n	80061a8 <__sflush_r+0x30>
 800621a:	2b1d      	cmp	r3, #29
 800621c:	d001      	beq.n	8006222 <__sflush_r+0xaa>
 800621e:	2b16      	cmp	r3, #22
 8006220:	d11d      	bne.n	800625e <__sflush_r+0xe6>
 8006222:	602f      	str	r7, [r5, #0]
 8006224:	2000      	movs	r0, #0
 8006226:	e021      	b.n	800626c <__sflush_r+0xf4>
 8006228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800622c:	b21b      	sxth	r3, r3
 800622e:	e01a      	b.n	8006266 <__sflush_r+0xee>
 8006230:	690f      	ldr	r7, [r1, #16]
 8006232:	2f00      	cmp	r7, #0
 8006234:	d0f6      	beq.n	8006224 <__sflush_r+0xac>
 8006236:	0793      	lsls	r3, r2, #30
 8006238:	bf18      	it	ne
 800623a:	2300      	movne	r3, #0
 800623c:	680e      	ldr	r6, [r1, #0]
 800623e:	bf08      	it	eq
 8006240:	694b      	ldreq	r3, [r1, #20]
 8006242:	1bf6      	subs	r6, r6, r7
 8006244:	600f      	str	r7, [r1, #0]
 8006246:	608b      	str	r3, [r1, #8]
 8006248:	2e00      	cmp	r6, #0
 800624a:	ddeb      	ble.n	8006224 <__sflush_r+0xac>
 800624c:	4633      	mov	r3, r6
 800624e:	463a      	mov	r2, r7
 8006250:	4628      	mov	r0, r5
 8006252:	6a21      	ldr	r1, [r4, #32]
 8006254:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006258:	47e0      	blx	ip
 800625a:	2800      	cmp	r0, #0
 800625c:	dc07      	bgt.n	800626e <__sflush_r+0xf6>
 800625e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626e:	4407      	add	r7, r0
 8006270:	1a36      	subs	r6, r6, r0
 8006272:	e7e9      	b.n	8006248 <__sflush_r+0xd0>
 8006274:	dfbffffe 	.word	0xdfbffffe

08006278 <_fflush_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	690b      	ldr	r3, [r1, #16]
 800627c:	4605      	mov	r5, r0
 800627e:	460c      	mov	r4, r1
 8006280:	b913      	cbnz	r3, 8006288 <_fflush_r+0x10>
 8006282:	2500      	movs	r5, #0
 8006284:	4628      	mov	r0, r5
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	b118      	cbz	r0, 8006292 <_fflush_r+0x1a>
 800628a:	6a03      	ldr	r3, [r0, #32]
 800628c:	b90b      	cbnz	r3, 8006292 <_fflush_r+0x1a>
 800628e:	f7ff fa3f 	bl	8005710 <__sinit>
 8006292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f3      	beq.n	8006282 <_fflush_r+0xa>
 800629a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800629c:	07d0      	lsls	r0, r2, #31
 800629e:	d404      	bmi.n	80062aa <_fflush_r+0x32>
 80062a0:	0599      	lsls	r1, r3, #22
 80062a2:	d402      	bmi.n	80062aa <_fflush_r+0x32>
 80062a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062a6:	f7ff fb8e 	bl	80059c6 <__retarget_lock_acquire_recursive>
 80062aa:	4628      	mov	r0, r5
 80062ac:	4621      	mov	r1, r4
 80062ae:	f7ff ff63 	bl	8006178 <__sflush_r>
 80062b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062b4:	4605      	mov	r5, r0
 80062b6:	07da      	lsls	r2, r3, #31
 80062b8:	d4e4      	bmi.n	8006284 <_fflush_r+0xc>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	059b      	lsls	r3, r3, #22
 80062be:	d4e1      	bmi.n	8006284 <_fflush_r+0xc>
 80062c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062c2:	f7ff fb81 	bl	80059c8 <__retarget_lock_release_recursive>
 80062c6:	e7dd      	b.n	8006284 <_fflush_r+0xc>

080062c8 <__swbuf_r>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	460e      	mov	r6, r1
 80062cc:	4614      	mov	r4, r2
 80062ce:	4605      	mov	r5, r0
 80062d0:	b118      	cbz	r0, 80062da <__swbuf_r+0x12>
 80062d2:	6a03      	ldr	r3, [r0, #32]
 80062d4:	b90b      	cbnz	r3, 80062da <__swbuf_r+0x12>
 80062d6:	f7ff fa1b 	bl	8005710 <__sinit>
 80062da:	69a3      	ldr	r3, [r4, #24]
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	071a      	lsls	r2, r3, #28
 80062e2:	d501      	bpl.n	80062e8 <__swbuf_r+0x20>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	b943      	cbnz	r3, 80062fa <__swbuf_r+0x32>
 80062e8:	4621      	mov	r1, r4
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 f82a 	bl	8006344 <__swsetup_r>
 80062f0:	b118      	cbz	r0, 80062fa <__swbuf_r+0x32>
 80062f2:	f04f 37ff 	mov.w	r7, #4294967295
 80062f6:	4638      	mov	r0, r7
 80062f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	6922      	ldr	r2, [r4, #16]
 80062fe:	b2f6      	uxtb	r6, r6
 8006300:	1a98      	subs	r0, r3, r2
 8006302:	6963      	ldr	r3, [r4, #20]
 8006304:	4637      	mov	r7, r6
 8006306:	4283      	cmp	r3, r0
 8006308:	dc05      	bgt.n	8006316 <__swbuf_r+0x4e>
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f7ff ffb3 	bl	8006278 <_fflush_r>
 8006312:	2800      	cmp	r0, #0
 8006314:	d1ed      	bne.n	80062f2 <__swbuf_r+0x2a>
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	3b01      	subs	r3, #1
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	6022      	str	r2, [r4, #0]
 8006322:	701e      	strb	r6, [r3, #0]
 8006324:	6962      	ldr	r2, [r4, #20]
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	429a      	cmp	r2, r3
 800632a:	d004      	beq.n	8006336 <__swbuf_r+0x6e>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	07db      	lsls	r3, r3, #31
 8006330:	d5e1      	bpl.n	80062f6 <__swbuf_r+0x2e>
 8006332:	2e0a      	cmp	r6, #10
 8006334:	d1df      	bne.n	80062f6 <__swbuf_r+0x2e>
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f7ff ff9d 	bl	8006278 <_fflush_r>
 800633e:	2800      	cmp	r0, #0
 8006340:	d0d9      	beq.n	80062f6 <__swbuf_r+0x2e>
 8006342:	e7d6      	b.n	80062f2 <__swbuf_r+0x2a>

08006344 <__swsetup_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4b29      	ldr	r3, [pc, #164]	@ (80063ec <__swsetup_r+0xa8>)
 8006348:	4605      	mov	r5, r0
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	460c      	mov	r4, r1
 800634e:	b118      	cbz	r0, 8006358 <__swsetup_r+0x14>
 8006350:	6a03      	ldr	r3, [r0, #32]
 8006352:	b90b      	cbnz	r3, 8006358 <__swsetup_r+0x14>
 8006354:	f7ff f9dc 	bl	8005710 <__sinit>
 8006358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635c:	0719      	lsls	r1, r3, #28
 800635e:	d422      	bmi.n	80063a6 <__swsetup_r+0x62>
 8006360:	06da      	lsls	r2, r3, #27
 8006362:	d407      	bmi.n	8006374 <__swsetup_r+0x30>
 8006364:	2209      	movs	r2, #9
 8006366:	602a      	str	r2, [r5, #0]
 8006368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	e033      	b.n	80063dc <__swsetup_r+0x98>
 8006374:	0758      	lsls	r0, r3, #29
 8006376:	d512      	bpl.n	800639e <__swsetup_r+0x5a>
 8006378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800637a:	b141      	cbz	r1, 800638e <__swsetup_r+0x4a>
 800637c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006380:	4299      	cmp	r1, r3
 8006382:	d002      	beq.n	800638a <__swsetup_r+0x46>
 8006384:	4628      	mov	r0, r5
 8006386:	f7ff fb2f 	bl	80059e8 <_free_r>
 800638a:	2300      	movs	r3, #0
 800638c:	6363      	str	r3, [r4, #52]	@ 0x34
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	2300      	movs	r3, #0
 8006398:	6063      	str	r3, [r4, #4]
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f043 0308 	orr.w	r3, r3, #8
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	b94b      	cbnz	r3, 80063be <__swsetup_r+0x7a>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063b4:	d003      	beq.n	80063be <__swsetup_r+0x7a>
 80063b6:	4621      	mov	r1, r4
 80063b8:	4628      	mov	r0, r5
 80063ba:	f000 f85c 	bl	8006476 <__smakebuf_r>
 80063be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063c2:	f013 0201 	ands.w	r2, r3, #1
 80063c6:	d00a      	beq.n	80063de <__swsetup_r+0x9a>
 80063c8:	2200      	movs	r2, #0
 80063ca:	60a2      	str	r2, [r4, #8]
 80063cc:	6962      	ldr	r2, [r4, #20]
 80063ce:	4252      	negs	r2, r2
 80063d0:	61a2      	str	r2, [r4, #24]
 80063d2:	6922      	ldr	r2, [r4, #16]
 80063d4:	b942      	cbnz	r2, 80063e8 <__swsetup_r+0xa4>
 80063d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063da:	d1c5      	bne.n	8006368 <__swsetup_r+0x24>
 80063dc:	bd38      	pop	{r3, r4, r5, pc}
 80063de:	0799      	lsls	r1, r3, #30
 80063e0:	bf58      	it	pl
 80063e2:	6962      	ldrpl	r2, [r4, #20]
 80063e4:	60a2      	str	r2, [r4, #8]
 80063e6:	e7f4      	b.n	80063d2 <__swsetup_r+0x8e>
 80063e8:	2000      	movs	r0, #0
 80063ea:	e7f7      	b.n	80063dc <__swsetup_r+0x98>
 80063ec:	2000001c 	.word	0x2000001c

080063f0 <_sbrk_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	2300      	movs	r3, #0
 80063f4:	4d05      	ldr	r5, [pc, #20]	@ (800640c <_sbrk_r+0x1c>)
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fa f9dc 	bl	80007b8 <_sbrk>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_sbrk_r+0x1a>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_sbrk_r+0x1a>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	20001c50 	.word	0x20001c50

08006410 <memchr>:
 8006410:	4603      	mov	r3, r0
 8006412:	b510      	push	{r4, lr}
 8006414:	b2c9      	uxtb	r1, r1
 8006416:	4402      	add	r2, r0
 8006418:	4293      	cmp	r3, r2
 800641a:	4618      	mov	r0, r3
 800641c:	d101      	bne.n	8006422 <memchr+0x12>
 800641e:	2000      	movs	r0, #0
 8006420:	e003      	b.n	800642a <memchr+0x1a>
 8006422:	7804      	ldrb	r4, [r0, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	428c      	cmp	r4, r1
 8006428:	d1f6      	bne.n	8006418 <memchr+0x8>
 800642a:	bd10      	pop	{r4, pc}

0800642c <__swhatbuf_r>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	460c      	mov	r4, r1
 8006430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006434:	4615      	mov	r5, r2
 8006436:	2900      	cmp	r1, #0
 8006438:	461e      	mov	r6, r3
 800643a:	b096      	sub	sp, #88	@ 0x58
 800643c:	da0c      	bge.n	8006458 <__swhatbuf_r+0x2c>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	2100      	movs	r1, #0
 8006442:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006446:	bf14      	ite	ne
 8006448:	2340      	movne	r3, #64	@ 0x40
 800644a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800644e:	2000      	movs	r0, #0
 8006450:	6031      	str	r1, [r6, #0]
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	b016      	add	sp, #88	@ 0x58
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	466a      	mov	r2, sp
 800645a:	f000 f849 	bl	80064f0 <_fstat_r>
 800645e:	2800      	cmp	r0, #0
 8006460:	dbed      	blt.n	800643e <__swhatbuf_r+0x12>
 8006462:	9901      	ldr	r1, [sp, #4]
 8006464:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006468:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800646c:	4259      	negs	r1, r3
 800646e:	4159      	adcs	r1, r3
 8006470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006474:	e7eb      	b.n	800644e <__swhatbuf_r+0x22>

08006476 <__smakebuf_r>:
 8006476:	898b      	ldrh	r3, [r1, #12]
 8006478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800647a:	079d      	lsls	r5, r3, #30
 800647c:	4606      	mov	r6, r0
 800647e:	460c      	mov	r4, r1
 8006480:	d507      	bpl.n	8006492 <__smakebuf_r+0x1c>
 8006482:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	2301      	movs	r3, #1
 800648c:	6163      	str	r3, [r4, #20]
 800648e:	b003      	add	sp, #12
 8006490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006492:	466a      	mov	r2, sp
 8006494:	ab01      	add	r3, sp, #4
 8006496:	f7ff ffc9 	bl	800642c <__swhatbuf_r>
 800649a:	9f00      	ldr	r7, [sp, #0]
 800649c:	4605      	mov	r5, r0
 800649e:	4639      	mov	r1, r7
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff fb0b 	bl	8005abc <_malloc_r>
 80064a6:	b948      	cbnz	r0, 80064bc <__smakebuf_r+0x46>
 80064a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ac:	059a      	lsls	r2, r3, #22
 80064ae:	d4ee      	bmi.n	800648e <__smakebuf_r+0x18>
 80064b0:	f023 0303 	bic.w	r3, r3, #3
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	e7e2      	b.n	8006482 <__smakebuf_r+0xc>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	9b01      	ldr	r3, [sp, #4]
 80064ca:	6020      	str	r0, [r4, #0]
 80064cc:	b15b      	cbz	r3, 80064e6 <__smakebuf_r+0x70>
 80064ce:	4630      	mov	r0, r6
 80064d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064d4:	f000 f81e 	bl	8006514 <_isatty_r>
 80064d8:	b128      	cbz	r0, 80064e6 <__smakebuf_r+0x70>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f023 0303 	bic.w	r3, r3, #3
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	431d      	orrs	r5, r3
 80064ea:	81a5      	strh	r5, [r4, #12]
 80064ec:	e7cf      	b.n	800648e <__smakebuf_r+0x18>
	...

080064f0 <_fstat_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	2300      	movs	r3, #0
 80064f4:	4d06      	ldr	r5, [pc, #24]	@ (8006510 <_fstat_r+0x20>)
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	f7fa f935 	bl	800076c <_fstat>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d102      	bne.n	800650c <_fstat_r+0x1c>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	b103      	cbz	r3, 800650c <_fstat_r+0x1c>
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	bf00      	nop
 8006510:	20001c50 	.word	0x20001c50

08006514 <_isatty_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	2300      	movs	r3, #0
 8006518:	4d05      	ldr	r5, [pc, #20]	@ (8006530 <_isatty_r+0x1c>)
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	f7fa f933 	bl	800078a <_isatty>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_isatty_r+0x1a>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_isatty_r+0x1a>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	20001c50 	.word	0x20001c50

08006534 <_init>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr

08006540 <_fini>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr
