
MCB20242_Hub_WSN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08009600  08009600  0000a600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b8c  08009b8c  0000b1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009b8c  08009b8c  0000ab8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b94  08009b94  0000b1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b94  08009b94  0000ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b98  08009b98  0000ab98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08009b9c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001ec  08009d88  0000b1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  08009d88  0000b670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf8e  00000000  00000000  0000b215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a6  00000000  00000000  000171a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00019550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092c  00000000  00000000  0001a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000385c  00000000  00000000  0001aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe50  00000000  00000000  0001e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008896d  00000000  00000000  0002e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6aa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  000b6ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000bb32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080095e8 	.word	0x080095e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080095e8 	.word	0x080095e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b99e 	b.w	8000ebc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83c 	bl	8000c04 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460d      	mov	r5, r1
 8000ba2:	f7ff ff0b 	bl	80009bc <__aeabi_dcmplt>
 8000ba6:	b928      	cbnz	r0, 8000bb4 <__aeabi_d2lz+0x1c>
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4629      	mov	r1, r5
 8000bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb0:	f000 b80a 	b.w	8000bc8 <__aeabi_d2ulz>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bba:	f000 f805 	bl	8000bc8 <__aeabi_d2ulz>
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc4:	bd38      	pop	{r3, r4, r5, pc}
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2ulz>:
 8000bc8:	b5d0      	push	{r4, r6, r7, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <__aeabi_d2ulz+0x34>)
 8000bce:	4606      	mov	r6, r0
 8000bd0:	460f      	mov	r7, r1
 8000bd2:	f7ff fc81 	bl	80004d8 <__aeabi_dmul>
 8000bd6:	f7ff ff57 	bl	8000a88 <__aeabi_d2uiz>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	f7ff fc02 	bl	80003e4 <__aeabi_ui2d>
 8000be0:	2200      	movs	r2, #0
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <__aeabi_d2ulz+0x38>)
 8000be4:	f7ff fc78 	bl	80004d8 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4630      	mov	r0, r6
 8000bee:	4639      	mov	r1, r7
 8000bf0:	f7ff faba 	bl	8000168 <__aeabi_dsub>
 8000bf4:	f7ff ff48 	bl	8000a88 <__aeabi_d2uiz>
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfc:	3df00000 	.word	0x3df00000
 8000c00:	41f00000 	.word	0x41f00000

08000c04 <__udivmoddi4>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	9d08      	ldr	r5, [sp, #32]
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d14e      	bne.n	8000cae <__udivmoddi4+0xaa>
 8000c10:	4694      	mov	ip, r2
 8000c12:	458c      	cmp	ip, r1
 8000c14:	4686      	mov	lr, r0
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	d962      	bls.n	8000ce2 <__udivmoddi4+0xde>
 8000c1c:	b14a      	cbz	r2, 8000c32 <__udivmoddi4+0x2e>
 8000c1e:	f1c2 0320 	rsb	r3, r2, #32
 8000c22:	4091      	lsls	r1, r2
 8000c24:	fa20 f303 	lsr.w	r3, r0, r3
 8000c28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	fa1f f68c 	uxth.w	r6, ip
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb04 f106 	mul.w	r1, r4, r6
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x64>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5a:	f080 8110 	bcs.w	8000e7e <__udivmoddi4+0x27a>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 810d 	bls.w	8000e7e <__udivmoddi4+0x27a>
 8000c64:	3c02      	subs	r4, #2
 8000c66:	4463      	add	r3, ip
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x94>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	f080 80fa 	bcs.w	8000e82 <__udivmoddi4+0x27e>
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	f240 80f7 	bls.w	8000e82 <__udivmoddi4+0x27e>
 8000c94:	4463      	add	r3, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	2100      	movs	r1, #0
 8000c9a:	1b9b      	subs	r3, r3, r6
 8000c9c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa6>
 8000ca2:	40d3      	lsrs	r3, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xba>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb4>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa6>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x150>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xcc>
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	f0c0 80ee 	bcc.w	8000eac <__udivmoddi4+0x2a8>
 8000cd0:	1a86      	subs	r6, r0, r2
 8000cd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d0e6      	beq.n	8000caa <__udivmoddi4+0xa6>
 8000cdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce0:	e7e3      	b.n	8000caa <__udivmoddi4+0xa6>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	f040 808f 	bne.w	8000e06 <__udivmoddi4+0x202>
 8000ce8:	eba1 040c 	sub.w	r4, r1, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x11c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x11a>
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <__udivmoddi4+0x2b0>
 8000d1e:	4626      	mov	r6, r4
 8000d20:	1a1c      	subs	r4, r3, r0
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	429f      	cmp	r7, r3
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x148>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x146>
 8000d44:	429f      	cmp	r7, r3
 8000d46:	f200 80ae 	bhi.w	8000ea6 <__udivmoddi4+0x2a2>
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	1bdb      	subs	r3, r3, r7
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x9c>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa24 f607 	lsr.w	r6, r4, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	fb09 6618 	mls	r6, r9, r8, r6
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	408c      	lsls	r4, r1
 8000d7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	431c      	orrs	r4, r3
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d90a      	bls.n	8000daa <__udivmoddi4+0x1a6>
 8000d94:	eb1c 0303 	adds.w	r3, ip, r3
 8000d98:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d9c:	f080 8081 	bcs.w	8000ea2 <__udivmoddi4+0x29e>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	d97e      	bls.n	8000ea2 <__udivmoddi4+0x29e>
 8000da4:	f1a8 0802 	sub.w	r8, r8, #2
 8000da8:	4463      	add	r3, ip
 8000daa:	1a1e      	subs	r6, r3, r0
 8000dac:	fbb6 f3f9 	udiv	r3, r6, r9
 8000db0:	fb09 6613 	mls	r6, r9, r3, r6
 8000db4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x1d0>
 8000dc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dca:	d266      	bcs.n	8000e9a <__udivmoddi4+0x296>
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d964      	bls.n	8000e9a <__udivmoddi4+0x296>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	4464      	add	r4, ip
 8000dd4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dd8:	fba0 8302 	umull	r8, r3, r0, r2
 8000ddc:	eba4 040e 	sub.w	r4, r4, lr
 8000de0:	429c      	cmp	r4, r3
 8000de2:	46c6      	mov	lr, r8
 8000de4:	461e      	mov	r6, r3
 8000de6:	d350      	bcc.n	8000e8a <__udivmoddi4+0x286>
 8000de8:	d04d      	beq.n	8000e86 <__udivmoddi4+0x282>
 8000dea:	b155      	cbz	r5, 8000e02 <__udivmoddi4+0x1fe>
 8000dec:	ebba 030e 	subs.w	r3, sl, lr
 8000df0:	eb64 0406 	sbc.w	r4, r4, r6
 8000df4:	fa04 f707 	lsl.w	r7, r4, r7
 8000df8:	40cb      	lsrs	r3, r1
 8000dfa:	431f      	orrs	r7, r3
 8000dfc:	40cc      	lsrs	r4, r1
 8000dfe:	e9c5 7400 	strd	r7, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e751      	b.n	8000caa <__udivmoddi4+0xa6>
 8000e06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0a:	f1c2 0320 	rsb	r3, r2, #32
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e20:	fb08 1110 	mls	r1, r8, r0, r1
 8000e24:	4094      	lsls	r4, r2
 8000e26:	431c      	orrs	r4, r3
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x248>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29a>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29a>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e52:	fb08 3311 	mls	r3, r8, r1, r3
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x272>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x292>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x292>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f2      	b.n	8000c68 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e708      	b.n	8000c98 <__udivmoddi4+0x94>
 8000e86:	45c2      	cmp	sl, r8
 8000e88:	d2af      	bcs.n	8000dea <__udivmoddi4+0x1e6>
 8000e8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e8e:	eb63 060c 	sbc.w	r6, r3, ip
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a9      	b.n	8000dea <__udivmoddi4+0x1e6>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x272>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e79a      	b.n	8000dd4 <__udivmoddi4+0x1d0>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x248>
 8000ea2:	46b0      	mov	r8, r6
 8000ea4:	e781      	b.n	8000daa <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74f      	b.n	8000d4c <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e711      	b.n	8000cd8 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e732      	b.n	8000d20 <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6958      	ldr	r0, [r3, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	f001 fcd8 	bl	80028a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	f107 010f 	add.w	r1, r7, #15
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	2201      	movs	r2, #1
 8000f00:	f002 fc99 	bl	8003836 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f04:	bf00      	nop
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f898 	bl	8004042 <HAL_SPI_GetState>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d1f6      	bne.n	8000f06 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6998      	ldr	r0, [r3, #24]
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	2201      	movs	r2, #1
 8000f28:	f002 fdc9 	bl	8003abe <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f2c:	bf00      	nop
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 f884 	bl	8004042 <HAL_SPI_GetState>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d1f6      	bne.n	8000f2e <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6958      	ldr	r0, [r3, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4619      	mov	r1, r3
 8000f52:	f001 fca5 	bl	80028a0 <HAL_GPIO_WritePin>
	return rxByte;
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6958      	ldr	r0, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f001 fc88 	bl	80028a0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6998      	ldr	r0, [r3, #24]
 8000f96:	f107 010f 	add.w	r1, r7, #15
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f002 fc49 	bl	8003836 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fa4:	bf00      	nop
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 f848 	bl	8004042 <HAL_SPI_GetState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1f6      	bne.n	8000fa6 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6998      	ldr	r0, [r3, #24]
 8000fbe:	1cb9      	adds	r1, r7, #2
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f002 fc36 	bl	8003836 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fca:	bf00      	nop
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f835 	bl	8004042 <HAL_SPI_GetState>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d1f6      	bne.n	8000fcc <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6958      	ldr	r0, [r3, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f001 fc56 	bl	80028a0 <HAL_GPIO_WritePin>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <lora_init>:



uint8_t lora_init(lora_t * module){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6858      	ldr	r0, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f001 fc43 	bl	80028a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f001 f98a 	bl	8002334 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6858      	ldr	r0, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	f001 fc35 	bl	80028a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f001 f97c 	bl	8002334 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 800103c:	2142      	movs	r1, #66	@ 0x42
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff3e 	bl	8000ec0 <lora_read_reg>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d001      	beq.n	8001052 <lora_init+0x56>
		return 1;
 800104e:	2301      	movs	r3, #1
 8001050:	e052      	b.n	80010f8 <lora_init+0xfc>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	2101      	movs	r1, #1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff82 	bl	8000f60 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <lora_init+0x104>)
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f95e 	bl	800132c <lora_set_frequency>
	lora_set_bandwidth(module, BANDWIDTH[module->bandwidth]);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	795b      	ldrb	r3, [r3, #5]
 8001074:	461a      	mov	r2, r3
 8001076:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <lora_init+0x108>)
 8001078:	5c9b      	ldrb	r3, [r3, r2]
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f99b 	bl	80013b8 <lora_set_bandwidth>
	lora_set_gain(module,module->powergain);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f9b7 	bl	80013fc <lora_set_gain>
	lora_set_spreading_factor(module, module->spreadingfactor);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	79db      	ldrb	r3, [r3, #7]
 8001092:	4619      	mov	r1, r3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f9d5 	bl	8001444 <lora_set_spreading_factor>
	lora_set_coding_rate(module, module->codingrate);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a1b      	ldrb	r3, [r3, #8]
 800109e:	4619      	mov	r1, r3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f9fb 	bl	800149c <lora_set_coding_rate>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210e      	movs	r1, #14
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff58 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	210f      	movs	r1, #15
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff53 	bl	8000f60 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 80010ba:	210c      	movs	r1, #12
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff feff 	bl	8000ec0 <lora_read_reg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f043 0303 	orr.w	r3, r3, #3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	210c      	movs	r1, #12
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff44 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 80010d8:	2204      	movs	r2, #4
 80010da:	2126      	movs	r1, #38	@ 0x26
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff3f 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 80010e2:	228f      	movs	r2, #143	@ 0x8f
 80010e4:	2109      	movs	r1, #9
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff3a 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 80010ec:	2281      	movs	r2, #129	@ 0x81
 80010ee:	2101      	movs	r1, #1
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff35 	bl	8000f60 <lora_write_reg>
	return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	080096d8 	.word	0x080096d8
 8001104:	080096f8 	.word	0x080096f8

08001108 <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 8001114:	2112      	movs	r1, #18
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fed2 	bl	8000ec0 <lora_read_reg>
 800111c:	4603      	mov	r3, r0
 800111e:	60bb      	str	r3, [r7, #8]
//	lora_read_reg(module, REG_MODEM_CONFIG_1);
//	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	2112      	movs	r1, #18
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff19 	bl	8000f60 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01d      	beq.n	8001174 <lora_prasePacket+0x6c>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <lora_prasePacket+0x6c>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 8001142:	2113      	movs	r1, #19
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff febb 	bl	8000ec0 <lora_read_reg>
 800114a:	4603      	mov	r3, r0
 800114c:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 800114e:	2110      	movs	r1, #16
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff feb5 	bl	8000ec0 <lora_read_reg>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	210d      	movs	r1, #13
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff feff 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8001162:	2281      	movs	r2, #129	@ 0x81
 8001164:	2101      	movs	r1, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fefa 	bl	8000f60 <lora_write_reg>
		packetIndex = 0;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <lora_prasePacket+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e010      	b.n	8001196 <lora_prasePacket+0x8e>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001174:	2101      	movs	r1, #1
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fea2 	bl	8000ec0 <lora_read_reg>
 800117c:	4603      	mov	r3, r0
 800117e:	2b86      	cmp	r3, #134	@ 0x86
 8001180:	d009      	beq.n	8001196 <lora_prasePacket+0x8e>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210d      	movs	r1, #13
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff feea 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800118c:	2286      	movs	r2, #134	@ 0x86
 800118e:	2101      	movs	r1, #1
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fee5 	bl	8000f60 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <lora_prasePacket+0x9e>
		return -1;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	e000      	b.n	80011a8 <lora_prasePacket+0xa0>
	}
	return packetLength;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000208 	.word	0x20000208

080011b4 <lora_available>:

uint8_t lora_available(lora_t * module){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 80011bc:	2113      	movs	r1, #19
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fe7e 	bl	8000ec0 <lora_read_reg>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <lora_available+0x24>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000208 	.word	0x20000208

080011dc <lora_read>:

uint8_t lora_read(lora_t * module){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffe5 	bl	80011b4 <lora_available>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <lora_read+0x18>
		return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e00a      	b.n	800120a <lora_read+0x2e>
	packetIndex++;
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <lora_read+0x38>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <lora_read+0x38>)
 80011fe:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fe5c 	bl	8000ec0 <lora_read_reg>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000208 	.word	0x20000208

08001218 <lora_begin_packet>:

uint8_t lora_begin_packet(lora_t * module){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	//int ret;
	if ((lora_read_reg(module, REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8001220:	2101      	movs	r1, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fe4c 	bl	8000ec0 <lora_read_reg>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d101      	bne.n	8001236 <lora_begin_packet+0x1e>
    return 1;
 8001232:	2301      	movs	r3, #1
 8001234:	e014      	b.n	8001260 <lora_begin_packet+0x48>
  }
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001236:	2281      	movs	r2, #129	@ 0x81
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe90 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 8001240:	2272      	movs	r2, #114	@ 0x72
 8001242:	211d      	movs	r1, #29
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe8b 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	210d      	movs	r1, #13
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe86 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module, REG_PAYLOAD_LENGTH, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2122      	movs	r1, #34	@ 0x22
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fe81 	bl	8000f60 <lora_write_reg>
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <lora_tx>:

void lora_tx(lora_t * module, uint8_t * buf, uint8_t size){
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	71fb      	strb	r3, [r7, #7]
	int currentLength = lora_read_reg(module, REG_PAYLOAD_LENGTH);
 8001276:	2122      	movs	r1, #34	@ 0x22
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff fe21 	bl	8000ec0 <lora_read_reg>
 800127e:	4603      	mov	r3, r0
 8001280:	613b      	str	r3, [r7, #16]
  if ((currentLength + size > MAX_PKT_LENGTH)){
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4413      	add	r3, r2
 8001288:	2bff      	cmp	r3, #255	@ 0xff
 800128a:	dd03      	ble.n	8001294 <lora_tx+0x2c>
    size = MAX_PKT_LENGTH - currentLength;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	71fb      	strb	r3, [r7, #7]
  }

  for (int i = 0; i < size; i++) {
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00b      	b.n	80012b2 <lora_tx+0x4a>
    lora_write_reg(module, REG_FIFO, buf[i]);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fe5a 	bl	8000f60 <lora_write_reg>
  for (int i = 0; i < size; i++) {
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbef      	blt.n	800129a <lora_tx+0x32>
  }
  lora_write_reg(module, REG_PAYLOAD_LENGTH, currentLength + size);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	2122      	movs	r1, #34	@ 0x22
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff fe49 	bl	8000f60 <lora_write_reg>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <lora_end_packet>:

uint8_t lora_end_packet(lora_t * module){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 80012de:	2364      	movs	r3, #100	@ 0x64
 80012e0:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80012e2:	2283      	movs	r2, #131	@ 0x83
 80012e4:	2101      	movs	r1, #1
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fe3a 	bl	8000f60 <lora_write_reg>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80012ec:	e00a      	b.n	8001304 <lora_end_packet+0x2e>
		if(--timeout==0){
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d104      	bne.n	8001304 <lora_end_packet+0x2e>
			HAL_Delay(1);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f001 f81a 	bl	8002334 <HAL_Delay>
			return 1;
 8001300:	2301      	movs	r3, #1
 8001302:	e00e      	b.n	8001322 <lora_end_packet+0x4c>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001304:	2112      	movs	r1, #18
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fdda 	bl	8000ec0 <lora_read_reg>
 800130c:	4603      	mov	r3, r0
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0eb      	beq.n	80012ee <lora_end_packet+0x18>
		}
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001316:	2208      	movs	r2, #8
 8001318:	2112      	movs	r1, #18
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe20 	bl	8000f60 <lora_write_reg>
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <lora_set_frequency>:

void lora_set_frequency(lora_t * module, uint64_t freq){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8001338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133c:	f04f 0000 	mov.w	r0, #0
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	04d9      	lsls	r1, r3, #19
 8001346:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800134a:	04d0      	lsls	r0, r2, #19
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <lora_set_frequency+0x88>)
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	f7ff fc09 	bl	8000b68 <__aeabi_uldivmod>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 800135e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	0c02      	lsrs	r2, r0, #16
 800136c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001370:	0c0b      	lsrs	r3, r1, #16
 8001372:	b2d3      	uxtb	r3, r2
 8001374:	461a      	mov	r2, r3
 8001376:	2106      	movs	r1, #6
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fdf1 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 800137e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	0a02      	lsrs	r2, r0, #8
 800138c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001390:	0a0b      	lsrs	r3, r1, #8
 8001392:	b2d3      	uxtb	r3, r2
 8001394:	461a      	mov	r2, r3
 8001396:	2107      	movs	r1, #7
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fde1 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800139e:	7c3b      	ldrb	r3, [r7, #16]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2108      	movs	r1, #8
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff fddb 	bl	8000f60 <lora_write_reg>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	01e84800 	.word	0x01e84800

080013b8 <lora_set_bandwidth>:
void lora_set_bandwidth(lora_t * module, uint8_t bandwidth){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
	uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 80013c4:	211d      	movs	r1, #29
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fd7a 	bl	8000ec0 <lora_read_reg>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
	modem_config_1 &= 0x0F;                // Xóa các bit 7-4
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	73fb      	strb	r3, [r7, #15]
	modem_config_1 |= (bandwidth << 4);    // Thiết lập bandwidth
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	461a      	mov	r2, r3
 80013ec:	211d      	movs	r1, #29
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fdb6 	bl	8000f60 <lora_write_reg>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <lora_set_gain>:
void lora_set_gain(lora_t * module, uint8_t power_gain){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
    // Đọc giá trị hiện tại của thanh ghi REG_PA_CONFIG
    uint8_t pa_config = lora_read_reg(module, REG_PA_CONFIG);
 8001408:	2109      	movs	r1, #9
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fd58 	bl	8000ec0 <lora_read_reg>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit liên quan đến công suất phát (bit 0-3)
    pa_config &= 0xF0;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	73fb      	strb	r3, [r7, #15]
    // Gán giá trị power_gain trực tiếp vào các bit 0-3
    pa_config |= (power_gain & 0x0F);  // Chỉ lấy phần liên quan đến các bit 0-3
 800141c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	b25a      	sxtb	r2, r3
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị mới vào thanh ghi REG_PA_CONFIG
    lora_write_reg(module, REG_PA_CONFIG, pa_config);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	461a      	mov	r2, r3
 8001434:	2109      	movs	r1, #9
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fd92 	bl	8000f60 <lora_write_reg>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <lora_set_spreading_factor>:
void lora_set_spreading_factor(lora_t *module, uint8_t spreading_factor) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị spreading factor có hợp lệ không
    if (spreading_factor < SF_7) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b06      	cmp	r3, #6
 8001454:	d801      	bhi.n	800145a <lora_set_spreading_factor+0x16>
        // Nếu SF < 7 thì set = 7
    	spreading_factor =7;
 8001456:	2307      	movs	r3, #7
 8001458:	70fb      	strb	r3, [r7, #3]
    }
    if (spreading_factor > SF_12) {
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d901      	bls.n	8001464 <lora_set_spreading_factor+0x20>
        // Nếu SF > 7 thì set = 12
    	spreading_factor =12;
 8001460:	230c      	movs	r3, #12
 8001462:	70fb      	strb	r3, [r7, #3]
        }
    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_2
    uint8_t modem_config_2 = lora_read_reg(module, REG_MODEM_CONFIG_2);
 8001464:	211e      	movs	r1, #30
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fd2a 	bl	8000ec0 <lora_read_reg>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit 7-4 (liên quan đến SF) để chuẩn bị ghi giá trị mới
    modem_config_2 &= 0x0F;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	73fb      	strb	r3, [r7, #15]
    // Thiết lập giá trị spreading factor mới
    modem_config_2 |= (spreading_factor << 4);
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	b25a      	sxtb	r2, r3
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị vào REG_MODEM_CONFIG_2
    lora_write_reg(module, REG_MODEM_CONFIG_2, modem_config_2);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	461a      	mov	r2, r3
 800148c:	211e      	movs	r1, #30
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fd66 	bl	8000f60 <lora_write_reg>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <lora_set_coding_rate>:
void lora_set_coding_rate(lora_t *module, uint8_t coding_rate) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị coding rate < 1 thì set = 1
    if (coding_rate < CR_4_5) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <lora_set_coding_rate+0x16>
        coding_rate =1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	70fb      	strb	r3, [r7, #3]
    }
    // Kiểm tra giá trị coding rate > 1 thì set = 4
       if (coding_rate > CR_4_8) {
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d901      	bls.n	80014bc <lora_set_coding_rate+0x20>
           coding_rate = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	70fb      	strb	r3, [r7, #3]
       }
    HAL_Delay(1); // Thêm độ trễ để ổn định trước khi thực hiện bất kỳ tác vụ nào
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 ff39 	bl	8002334 <HAL_Delay>

    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_1
    uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 80014c2:	211d      	movs	r1, #29
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fcfb 	bl	8000ec0 <lora_read_reg>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi để đảm bảo đọc hoàn tất
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 ff30 	bl	8002334 <HAL_Delay>

    // Xóa các bit 3-1 (liên quan đến CR) để chuẩn bị ghi giá trị mới
    modem_config_1 &= 0xF1;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	f023 030e 	bic.w	r3, r3, #14
 80014da:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi cập nhật giá trị trong bộ nhớ tạm
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 ff29 	bl	8002334 <HAL_Delay>

    // Thiết lập giá trị coding rate mới (CR nằm ở bit 3-1)
    modem_config_1 |= (coding_rate << 1);
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi chuẩn bị giá trị mới
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 ff1e 	bl	8002334 <HAL_Delay>

    // Ghi lại giá trị vào REG_MODEM_CONFIG_1
    lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	461a      	mov	r2, r3
 80014fc:	211d      	movs	r1, #29
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fd2e 	bl	8000f60 <lora_write_reg>
    HAL_Delay(1); // Đợi để đảm bảo quá trình ghi vào thanh ghi hoàn tất
 8001504:	2001      	movs	r0, #1
 8001506:	f000 ff15 	bl	8002334 <HAL_Delay>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <_write>:

UART_HandleTypeDef huart3;


/* USER CODE BEGIN PV */
int _write(int fd, char * ptr, int len) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart3, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	b29a      	uxth	r2, r3
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <_write+0x28>)
 800152c:	f002 fef1 	bl	8004312 <HAL_UART_Transmit>
  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000278 	.word	0x20000278

08001540 <lora_Init>:
char data_receive[80];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lora_Init(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	//cấu hình lora
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <lora_Init+0x70>)
 8001546:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <lora_Init+0x74>)
 8001548:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <lora_Init+0x70>)
 800154c:	2201      	movs	r2, #1
 800154e:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;				// NSS pin to which port is connected
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <lora_Init+0x70>)
 8001552:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <lora_Init+0x78>)
 8001554:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;					// NSS pin to which pin is connected
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <lora_Init+0x70>)
 8001558:	2210      	movs	r2, #16
 800155a:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;			// RESET pin to which port is connected
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <lora_Init+0x70>)
 800155e:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <lora_Init+0x74>)
 8001560:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;			// RESET pin to which pin is connected
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <lora_Init+0x70>)
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <lora_Init+0x70>)
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <lora_Init+0x7c>)
 800156c:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <lora_Init+0x80>)
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <lora_Init+0x70>)
 8001572:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;								// 433MHZ Frequency
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <lora_Init+0x80>)
 8001576:	2200      	movs	r2, #0
 8001578:	711a      	strb	r2, [r3, #4]
	//lora.frequency = FREQ_865MHZ;								// 865MHZ Frequency
	//lora.frequency = FREQ_866MHZ;								// 866MHZ Frequency
	//lora.frequency = FREQ_867MHZ;								// 867MHZ Frequency
	lora.bandwidth = BW_125KHz;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <lora_Init+0x80>)
 800157c:	2207      	movs	r2, #7
 800157e:	715a      	strb	r2, [r3, #5]
	lora.powergain = POWER_20db;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <lora_Init+0x80>)
 8001582:	22ff      	movs	r2, #255	@ 0xff
 8001584:	719a      	strb	r2, [r3, #6]
	lora.spreadingfactor = SF_7;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <lora_Init+0x80>)
 8001588:	2207      	movs	r2, #7
 800158a:	71da      	strb	r2, [r3, #7]
	lora.codingrate = CR_4_5;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <lora_Init+0x80>)
 800158e:	2201      	movs	r2, #1
 8001590:	721a      	strb	r2, [r3, #8]


	while(lora_init(&lora)){										// Initialize the lora module
 8001592:	e003      	b.n	800159c <lora_Init+0x5c>
		HAL_Delay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f000 fecc 	bl	8002334 <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <lora_Init+0x80>)
 800159e:	f7ff fd2d 	bl	8000ffc <lora_init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f5      	bne.n	8001594 <lora_Init+0x54>
	}

}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002c0 	.word	0x200002c0
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40010800 	.word	0x40010800
 80015bc:	20000220 	.word	0x20000220
 80015c0:	200002dc 	.word	0x200002dc

080015c4 <send_broadcast>:

char dataBroadcast[] = "RG0P";
void send_broadcast(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	lora_begin_packet(&lora);
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <send_broadcast+0x28>)
 80015ca:	f7ff fe25 	bl	8001218 <lora_begin_packet>
	lora_tx(&lora, (uint8_t*)dataBroadcast, strlen(dataBroadcast));
 80015ce:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <send_broadcast+0x2c>)
 80015d0:	f7fe fdbe 	bl	8000150 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4905      	ldr	r1, [pc, #20]	@ (80015f0 <send_broadcast+0x2c>)
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <send_broadcast+0x28>)
 80015de:	f7ff fe43 	bl	8001268 <lora_tx>
	lora_end_packet(&lora);
 80015e2:	4802      	ldr	r0, [pc, #8]	@ (80015ec <send_broadcast+0x28>)
 80015e4:	f7ff fe77 	bl	80012d6 <lora_end_packet>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002dc 	.word	0x200002dc
 80015f0:	20000010 	.word	0x20000010

080015f4 <send_stt>:
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
    lora_end_packet(&lora);
    printf("Send ACK to %d\r\n", node_id);
}

void send_stt(uint8_t node_id) {
 80015f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f8:	b09b      	sub	sp, #108	@ 0x6c
 80015fa:	af08      	add	r7, sp, #32
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
    char buf[64];
    sprintf(buf, "%d %d %.1f %.1f %.1f %.1f", node_id, nodeCount, T_min, T_max, H_min, H_max);
 8001600:	79fe      	ldrb	r6, [r7, #7]
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <send_stt+0xa8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <send_stt+0xac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff0b 	bl	8000428 <__aeabi_f2d>
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <send_stt+0xb0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff04 	bl	8000428 <__aeabi_f2d>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <send_stt+0xb4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fefd 	bl	8000428 <__aeabi_f2d>
 800162e:	4682      	mov	sl, r0
 8001630:	468b      	mov	fp, r1
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <send_stt+0xb8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fef6 	bl	8000428 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	f107 0008 	add.w	r0, r7, #8
 8001644:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001648:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800164c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001650:	e9cd 4500 	strd	r4, r5, [sp]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4632      	mov	r2, r6
 8001658:	4915      	ldr	r1, [pc, #84]	@ (80016b0 <send_stt+0xbc>)
 800165a:	f003 ff6f 	bl	800553c <siprintf>
    lora_begin_packet(&lora);
 800165e:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <send_stt+0xc0>)
 8001660:	f7ff fdda 	bl	8001218 <lora_begin_packet>
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fd71 	bl	8000150 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	b2da      	uxtb	r2, r3
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4619      	mov	r1, r3
 8001678:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <send_stt+0xc0>)
 800167a:	f7ff fdf5 	bl	8001268 <lora_tx>
    lora_end_packet(&lora);
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <send_stt+0xc0>)
 8001680:	f7ff fe29 	bl	80012d6 <lora_end_packet>
    printf("Send STT to %d: %s\r\n", node_id, buf);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	4619      	mov	r1, r3
 800168c:	480a      	ldr	r0, [pc, #40]	@ (80016b8 <send_stt+0xc4>)
 800168e:	f003 ff43 	bl	8005518 <iprintf>
}
 8001692:	bf00      	nop
 8001694:	374c      	adds	r7, #76	@ 0x4c
 8001696:	46bd      	mov	sp, r7
 8001698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800169c:	200002e8 	.word	0x200002e8
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000008 	.word	0x20000008
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	0800961c 	.word	0x0800961c
 80016b4:	200002dc 	.word	0x200002dc
 80016b8:	08009638 	.word	0x08009638

080016bc <send_ok>:

void send_ok(uint8_t node_id) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    char buf[16];
    sprintf(buf, "%d Ok", node_id);
 80016c6:	79fa      	ldrb	r2, [r7, #7]
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	490f      	ldr	r1, [pc, #60]	@ (800170c <send_ok+0x50>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 ff34 	bl	800553c <siprintf>
    lora_begin_packet(&lora);
 80016d4:	480e      	ldr	r0, [pc, #56]	@ (8001710 <send_ok+0x54>)
 80016d6:	f7ff fd9f 	bl	8001218 <lora_begin_packet>
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd36 	bl	8000150 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <send_ok+0x54>)
 80016f0:	f7ff fdba 	bl	8001268 <lora_tx>
    lora_end_packet(&lora);
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <send_ok+0x54>)
 80016f6:	f7ff fdee 	bl	80012d6 <lora_end_packet>
    printf("Send Ok to %d\r\n", node_id);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <send_ok+0x58>)
 8001700:	f003 ff0a 	bl	8005518 <iprintf>
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	08009650 	.word	0x08009650
 8001710:	200002dc 	.word	0x200002dc
 8001714:	08009658 	.word	0x08009658

08001718 <send_request>:

void send_request(uint8_t node_id) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
    char buf[16];
    sprintf(buf, "%d R", node_id);
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	490f      	ldr	r1, [pc, #60]	@ (8001768 <send_request+0x50>)
 800172a:	4618      	mov	r0, r3
 800172c:	f003 ff06 	bl	800553c <siprintf>
    lora_begin_packet(&lora);
 8001730:	480e      	ldr	r0, [pc, #56]	@ (800176c <send_request+0x54>)
 8001732:	f7ff fd71 	bl	8001218 <lora_begin_packet>
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fd08 	bl	8000150 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	b2da      	uxtb	r2, r3
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	4808      	ldr	r0, [pc, #32]	@ (800176c <send_request+0x54>)
 800174c:	f7ff fd8c 	bl	8001268 <lora_tx>
    lora_end_packet(&lora);
 8001750:	4806      	ldr	r0, [pc, #24]	@ (800176c <send_request+0x54>)
 8001752:	f7ff fdc0 	bl	80012d6 <lora_end_packet>

    printf("Send Request to %d\r\n", node_id);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4619      	mov	r1, r3
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <send_request+0x58>)
 800175c:	f003 fedc 	bl	8005518 <iprintf>
}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	08009668 	.word	0x08009668
 800176c:	200002dc 	.word	0x200002dc
 8001770:	08009670 	.word	0x08009670

08001774 <search_Node>:

int search_Node(){
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	b09b      	sub	sp, #108	@ 0x6c
 8001778:	af02      	add	r7, sp, #8
	send_broadcast();
 800177a:	f7ff ff23 	bl	80015c4 <send_broadcast>
	char buf[60];
	uint32_t timeStart = HAL_GetTick();
 800177e:	f000 fdcf 	bl	8002320 <HAL_GetTick>
 8001782:	6538      	str	r0, [r7, #80]	@ 0x50
	while (HAL_GetTick() - timeStart <= SEARCH_NODE_TIMEOUT){
 8001784:	e0bb      	b.n	80018fe <search_Node+0x18a>

		uint8_t ret = lora_prasePacket(&lora);
 8001786:	4865      	ldr	r0, [pc, #404]	@ (800191c <search_Node+0x1a8>)
 8001788:	f7ff fcbe 	bl	8001108 <lora_prasePacket>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		uint8_t i = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (ret) {
 8001798:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80ae 	beq.w	80018fe <search_Node+0x18a>
		i = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		while (lora_available(&lora) && i < sizeof(buf) - 1) {
 80017a8:	e00f      	b.n	80017ca <search_Node+0x56>
			buf[i++] = lora_read(&lora);
 80017aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	f887 205f 	strb.w	r2, [r7, #95]	@ 0x5f
 80017b4:	461c      	mov	r4, r3
 80017b6:	4859      	ldr	r0, [pc, #356]	@ (800191c <search_Node+0x1a8>)
 80017b8:	f7ff fd10 	bl	80011dc <lora_read>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80017c4:	443b      	add	r3, r7
 80017c6:	f803 2c50 	strb.w	r2, [r3, #-80]
		while (lora_available(&lora) && i < sizeof(buf) - 1) {
 80017ca:	4854      	ldr	r0, [pc, #336]	@ (800191c <search_Node+0x1a8>)
 80017cc:	f7ff fcf2 	bl	80011b4 <lora_available>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <search_Node+0x6a>
 80017d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017da:	2b3a      	cmp	r3, #58	@ 0x3a
 80017dc:	d9e5      	bls.n	80017aa <search_Node+0x36>
		}
		buf[i] = '\0';
 80017de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017e2:	3360      	adds	r3, #96	@ 0x60
 80017e4:	443b      	add	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	f803 2c50 	strb.w	r2, [r3, #-80]

		if (strncmp(buf, "RG", 2) == 0) {
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2202      	movs	r2, #2
 80017f2:	494b      	ldr	r1, [pc, #300]	@ (8001920 <search_Node+0x1ac>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 ff38 	bl	800566a <strncmp>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d17e      	bne.n	80018fe <search_Node+0x18a>
            int node_id;
            float lat, lon;
			sscanf(buf + 3, "%d %f %f", &node_id, &lat, &lon);
 8001800:	f107 0010 	add.w	r0, r7, #16
 8001804:	3003      	adds	r0, #3
 8001806:	f107 0108 	add.w	r1, r7, #8
 800180a:	f107 020c 	add.w	r2, r7, #12
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	460b      	mov	r3, r1
 8001814:	4943      	ldr	r1, [pc, #268]	@ (8001924 <search_Node+0x1b0>)
 8001816:	f003 feb1 	bl	800557c <siscanf>
//			send_ack(node_id);
			// Thêm node vào danh sách nếu chưa có
			int exists = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	65bb      	str	r3, [r7, #88]	@ 0x58
			for (int i = 0; i < nodeCount; i++) {
 800181e:	2300      	movs	r3, #0
 8001820:	657b      	str	r3, [r7, #84]	@ 0x54
 8001822:	e011      	b.n	8001848 <search_Node+0xd4>
				if (nodes[i].id == node_id) {
 8001824:	4940      	ldr	r1, [pc, #256]	@ (8001928 <search_Node+0x1b4>)
 8001826:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d102      	bne.n	8001842 <search_Node+0xce>
					exists = 1;
 800183c:	2301      	movs	r3, #1
 800183e:	65bb      	str	r3, [r7, #88]	@ 0x58
					break;
 8001840:	e007      	b.n	8001852 <search_Node+0xde>
			for (int i = 0; i < nodeCount; i++) {
 8001842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001844:	3301      	adds	r3, #1
 8001846:	657b      	str	r3, [r7, #84]	@ 0x54
 8001848:	4b38      	ldr	r3, [pc, #224]	@ (800192c <search_Node+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800184e:	429a      	cmp	r2, r3
 8001850:	dbe8      	blt.n	8001824 <search_Node+0xb0>
				}
			}
			if (!exists && nodeCount < MAX_NODES) {
 8001852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001854:	2b00      	cmp	r3, #0
 8001856:	d12a      	bne.n	80018ae <search_Node+0x13a>
 8001858:	4b34      	ldr	r3, [pc, #208]	@ (800192c <search_Node+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b13      	cmp	r3, #19
 800185e:	dc26      	bgt.n	80018ae <search_Node+0x13a>
				nodes[nodeCount].id = node_id;
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	4b32      	ldr	r3, [pc, #200]	@ (800192c <search_Node+0x1b8>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	b2c8      	uxtb	r0, r1
 8001868:	492f      	ldr	r1, [pc, #188]	@ (8001928 <search_Node+0x1b4>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	4602      	mov	r2, r0
 8001876:	701a      	strb	r2, [r3, #0]
				nodes[nodeCount].latitude = lat;
 8001878:	4b2c      	ldr	r3, [pc, #176]	@ (800192c <search_Node+0x1b8>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	482a      	ldr	r0, [pc, #168]	@ (8001928 <search_Node+0x1b4>)
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4403      	add	r3, r0
 800188a:	3304      	adds	r3, #4
 800188c:	6019      	str	r1, [r3, #0]
				nodes[nodeCount].longitude = lon;
 800188e:	4b27      	ldr	r3, [pc, #156]	@ (800192c <search_Node+0x1b8>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4824      	ldr	r0, [pc, #144]	@ (8001928 <search_Node+0x1b4>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4403      	add	r3, r0
 80018a0:	3308      	adds	r3, #8
 80018a2:	6019      	str	r1, [r3, #0]
				nodeCount++;
 80018a4:	4b21      	ldr	r3, [pc, #132]	@ (800192c <search_Node+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a20      	ldr	r2, [pc, #128]	@ (800192c <search_Node+0x1b8>)
 80018ac:	6013      	str	r3, [r2, #0]
			}
			send_stt(node_id);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fe9e 	bl	80015f4 <send_stt>


			printf("Node register: %s\r\n", buf);
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4619      	mov	r1, r3
 80018be:	481c      	ldr	r0, [pc, #112]	@ (8001930 <search_Node+0x1bc>)
 80018c0:	f003 fe2a 	bl	8005518 <iprintf>
			printf("Node ID: %d, x: %f, y: %f\n", node_id, lat, lon);
 80018c4:	68fe      	ldr	r6, [r7, #12]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fdad 	bl	8000428 <__aeabi_f2d>
 80018ce:	4604      	mov	r4, r0
 80018d0:	460d      	mov	r5, r1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fda7 	bl	8000428 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9cd 2300 	strd	r2, r3, [sp]
 80018e2:	4622      	mov	r2, r4
 80018e4:	462b      	mov	r3, r5
 80018e6:	4631      	mov	r1, r6
 80018e8:	4812      	ldr	r0, [pc, #72]	@ (8001934 <search_Node+0x1c0>)
 80018ea:	f003 fe15 	bl	8005518 <iprintf>

			sprintf(data_receive, buf);
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	4810      	ldr	r0, [pc, #64]	@ (8001938 <search_Node+0x1c4>)
 80018f6:	f003 fe21 	bl	800553c <siprintf>
			return 1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e009      	b.n	8001912 <search_Node+0x19e>
	while (HAL_GetTick() - timeStart <= SEARCH_NODE_TIMEOUT){
 80018fe:	f000 fd0f 	bl	8002320 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800190c:	f67f af3b 	bls.w	8001786 <search_Node+0x12>
			}
		}
	}
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3764      	adds	r7, #100	@ 0x64
 8001916:	46bd      	mov	sp, r7
 8001918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191a:	bf00      	nop
 800191c:	200002dc 	.word	0x200002dc
 8001920:	08009688 	.word	0x08009688
 8001924:	0800968c 	.word	0x0800968c
 8001928:	200002ec 	.word	0x200002ec
 800192c:	200002e8 	.word	0x200002e8
 8001930:	08009698 	.word	0x08009698
 8001934:	080096ac 	.word	0x080096ac
 8001938:	200004cc 	.word	0x200004cc

0800193c <receive_data>:
	lora_begin_packet(&lora);
	lora_tx(&lora, (uint8_t *)data, strlen(data));
	lora_end_packet(&lora);
}

int receive_data(uint8_t *node_id, float *t, float *h, uint8_t nodeid_i) {
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b099      	sub	sp, #100	@ 0x64
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[60];
//    uint8_t ret = lora_prasePacket(&lora);
	uint8_t ret =0;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	uint32_t timeStart = HAL_GetTick();
 8001950:	f000 fce6 	bl	8002320 <HAL_GetTick>
 8001954:	6538      	str	r0, [r7, #80]	@ 0x50

	while(!ret){
 8001956:	e04b      	b.n	80019f0 <receive_data+0xb4>
	  ret = lora_prasePacket(&lora);
 8001958:	482a      	ldr	r0, [pc, #168]	@ (8001a04 <receive_data+0xc8>)
 800195a:	f7ff fbd5 	bl	8001108 <lora_prasePacket>
 800195e:	4603      	mov	r3, r0
 8001960:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  if(ret){
 8001964:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001968:	2b00      	cmp	r3, #0
 800196a:	d032      	beq.n	80019d2 <receive_data+0x96>
	   //Nhận gói tin
	   uint8_t i = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	   memset(buf, 0, sizeof(buf));
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	223c      	movs	r2, #60	@ 0x3c
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fe6d 	bl	800565a <memset>

	    while (lora_available(&lora)) {
 8001980:	e00f      	b.n	80019a2 <receive_data+0x66>
	    	buf[i++] = lora_read(&lora);
 8001982:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	f887 204f 	strb.w	r2, [r7, #79]	@ 0x4f
 800198c:	461c      	mov	r4, r3
 800198e:	481d      	ldr	r0, [pc, #116]	@ (8001a04 <receive_data+0xc8>)
 8001990:	f7ff fc24 	bl	80011dc <lora_read>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 800199c:	443b      	add	r3, r7
 800199e:	f803 2c48 	strb.w	r2, [r3, #-72]
	    while (lora_available(&lora)) {
 80019a2:	4818      	ldr	r0, [pc, #96]	@ (8001a04 <receive_data+0xc8>)
 80019a4:	f7ff fc06 	bl	80011b4 <lora_available>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e9      	bne.n	8001982 <receive_data+0x46>
	   }
	    buf[i] = '\0'; // Kết thúc chuỗi
 80019ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019b2:	3358      	adds	r3, #88	@ 0x58
 80019b4:	443b      	add	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	f803 2c48 	strb.w	r2, [r3, #-72]

	    sscanf(buf, "%d %f %f", node_id, t, h);
 80019bc:	f107 0010 	add.w	r0, r7, #16
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	490f      	ldr	r1, [pc, #60]	@ (8001a08 <receive_data+0xcc>)
 80019ca:	f003 fdd7 	bl	800557c <siscanf>

	    return 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e013      	b.n	80019fa <receive_data+0xbe>
	  }

	if (HAL_GetTick() - timeStart >= 2000){
 80019d2:	f000 fca5 	bl	8002320 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80019e0:	d306      	bcc.n	80019f0 <receive_data+0xb4>
		send_request(nodeid_i);
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe97 	bl	8001718 <send_request>
		timeStart = HAL_GetTick();
 80019ea:	f000 fc99 	bl	8002320 <HAL_GetTick>
 80019ee:	6538      	str	r0, [r7, #80]	@ 0x50
	while(!ret){
 80019f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0af      	beq.n	8001958 <receive_data+0x1c>
	}
	}
    return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	375c      	adds	r7, #92	@ 0x5c
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002dc 	.word	0x200002dc
 8001a08:	0800968c 	.word	0x0800968c

08001a0c <get_data_Node>:

void get_data_Node(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
    for (int i = 0; i < nodeCount; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e05f      	b.n	8001ad8 <get_data_Node+0xcc>
        uint8_t node_id = nodes[i].id;
 8001a18:	4934      	ldr	r1, [pc, #208]	@ (8001aec <get_data_Node+0xe0>)
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	74fb      	strb	r3, [r7, #19]
        int retries = 0, data_ok = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
        while (retries < MAX_RETRIES && !data_ok) {
 8001a32:	e048      	b.n	8001ac6 <get_data_Node+0xba>
            send_request(node_id);
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe6e 	bl	8001718 <send_request>
            HAL_Delay(50);
 8001a3c:	2032      	movs	r0, #50	@ 0x32
 8001a3e:	f000 fc79 	bl	8002334 <HAL_Delay>
            uint32_t t0 = HAL_GetTick();
 8001a42:	f000 fc6d 	bl	8002320 <HAL_GetTick>
 8001a46:	60f8      	str	r0, [r7, #12]
            while (HAL_GetTick() - t0 < DATA_PACKET_TIMEOUT_MS) {
 8001a48:	e032      	b.n	8001ab0 <get_data_Node+0xa4>
                uint8_t recv_id;
                float t1, h1;
                if (receive_data(&recv_id, &t1, &h1, nodes[i].id) && recv_id == node_id) {
 8001a4a:	4928      	ldr	r1, [pc, #160]	@ (8001aec <get_data_Node+0xe0>)
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	463a      	mov	r2, r7
 8001a5c:	1d39      	adds	r1, r7, #4
 8001a5e:	f107 000b 	add.w	r0, r7, #11
 8001a62:	f7ff ff6b 	bl	800193c <receive_data>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d021      	beq.n	8001ab0 <get_data_Node+0xa4>
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	7cfa      	ldrb	r2, [r7, #19]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d11d      	bne.n	8001ab0 <get_data_Node+0xa4>
                    nodes[i].t = t1;
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	481d      	ldr	r0, [pc, #116]	@ (8001aec <get_data_Node+0xe0>)
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4403      	add	r3, r0
 8001a84:	330c      	adds	r3, #12
 8001a86:	6019      	str	r1, [r3, #0]
                    nodes[i].h = h1;
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	4818      	ldr	r0, [pc, #96]	@ (8001aec <get_data_Node+0xe0>)
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4403      	add	r3, r0
 8001a98:	3310      	adds	r3, #16
 8001a9a:	6019      	str	r1, [r3, #0]
//                    send_ack(node_id);
                    HAL_Delay(100);
 8001a9c:	2064      	movs	r0, #100	@ 0x64
 8001a9e:	f000 fc49 	bl	8002334 <HAL_Delay>

                    send_ok(node_id);
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fe09 	bl	80016bc <send_ok>
                    data_ok = 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e007      	b.n	8001ac0 <get_data_Node+0xb4>
            while (HAL_GetTick() - t0 < DATA_PACKET_TIMEOUT_MS) {
 8001ab0:	f000 fc36 	bl	8002320 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001abe:	d3c4      	bcc.n	8001a4a <get_data_Node+0x3e>
                    break;
                }
            }
            retries++;
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
        while (retries < MAX_RETRIES && !data_ok) {
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	dc02      	bgt.n	8001ad2 <get_data_Node+0xc6>
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0b0      	beq.n	8001a34 <get_data_Node+0x28>
    for (int i = 0; i < nodeCount; i++) {
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <get_data_Node+0xe4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	db9a      	blt.n	8001a18 <get_data_Node+0xc>
        }
    }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200002ec 	.word	0x200002ec
 8001af0:	200002e8 	.word	0x200002e8

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afa:	f000 fbb9 	bl	8002270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afe:	f000 f84b 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b02:	f000 f923 	bl	8001d4c <MX_GPIO_Init>
  MX_RTC_Init();
 8001b06:	f000 f8a5 	bl	8001c54 <MX_RTC_Init>
  MX_SPI1_Init();
 8001b0a:	f000 f8bf 	bl	8001c8c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001b0e:	f000 f8f3 	bl	8001cf8 <MX_USART3_UART_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b18:	481c      	ldr	r0, [pc, #112]	@ (8001b8c <main+0x98>)
 8001b1a:	f000 fec1 	bl	80028a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b24:	4819      	ldr	r0, [pc, #100]	@ (8001b8c <main+0x98>)
 8001b26:	f000 febb 	bl	80028a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b30:	4816      	ldr	r0, [pc, #88]	@ (8001b8c <main+0x98>)
 8001b32:	f000 feb5 	bl	80028a0 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 2 */
  lora_Init();
 8001b36:	f7ff fd03 	bl	8001540 <lora_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE BEGIN 3 */
	  //Step 0: Reset Node table
	  nodeCount = 0;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <main+0x9c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
	  memset(nodes, 0, sizeof(nodes));
 8001b40:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b44:	2100      	movs	r1, #0
 8001b46:	4813      	ldr	r0, [pc, #76]	@ (8001b94 <main+0xa0>)
 8001b48:	f003 fd87 	bl	800565a <memset>

	  //Step 1: Search Node
	  uint32_t timeSearch = HAL_GetTick();
 8001b4c:	f000 fbe8 	bl	8002320 <HAL_GetTick>
 8001b50:	6038      	str	r0, [r7, #0]
	  while (HAL_GetTick() - timeSearch <= 5000){
 8001b52:	e001      	b.n	8001b58 <main+0x64>
		  search_Node();
 8001b54:	f7ff fe0e 	bl	8001774 <search_Node>
	  while (HAL_GetTick() - timeSearch <= 5000){
 8001b58:	f000 fbe2 	bl	8002320 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d9f4      	bls.n	8001b54 <main+0x60>
	  }

	 //Step 2: Get data from Node
	  get_data_Node();
 8001b6a:	f7ff ff4f 	bl	8001a0c <get_data_Node>

	  for (int i = 0; i <= TIME_CYCLE_GET; i ++){
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	e006      	b.n	8001b82 <main+0x8e>
		  HAL_Delay(1000);
 8001b74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b78:	f000 fbdc 	bl	8002334 <HAL_Delay>
	  for (int i = 0; i <= TIME_CYCLE_GET; i ++){
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0a      	cmp	r3, #10
 8001b86:	ddf5      	ble.n	8001b74 <main+0x80>
  {
 8001b88:	e7d7      	b.n	8001b3a <main+0x46>
 8001b8a:	bf00      	nop
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	200002e8 	.word	0x200002e8
 8001b94:	200002ec 	.word	0x200002ec

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b094      	sub	sp, #80	@ 0x50
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba2:	2228      	movs	r2, #40	@ 0x28
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fd57 	bl	800565a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001bc8:	2309      	movs	r3, #9
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bde:	2302      	movs	r3, #2
 8001be0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001be8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fe9a 	bl	800292c <HAL_RCC_OscConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001bfe:	f000 f91b 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c02:	230f      	movs	r3, #15
 8001c04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 f906 	bl	8002e30 <HAL_RCC_ClockConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c2a:	f000 f905 	bl	8001e38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c36:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 fa86 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001c46:	f000 f8f7 	bl	8001e38 <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3750      	adds	r7, #80	@ 0x50
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <MX_RTC_Init+0x30>)
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <MX_RTC_Init+0x34>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <MX_RTC_Init+0x30>)
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <MX_RTC_Init+0x30>)
 8001c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c6c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <MX_RTC_Init+0x30>)
 8001c70:	f001 fbd8 	bl	8003424 <HAL_RTC_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001c7a:	f000 f8dd 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000020c 	.word	0x2000020c
 8001c88:	40002800 	.word	0x40002800

08001c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001c92:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <MX_SPI1_Init+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c96:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001c98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cd8:	220a      	movs	r2, #10
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cde:	f001 fd26 	bl	800372e <HAL_SPI_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ce8:	f000 f8a6 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000220 	.word	0x20000220
 8001cf4:	40013000 	.word	0x40013000

08001cf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <MX_USART3_UART_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_USART3_UART_Init+0x4c>)
 8001d30:	f002 fa9f 	bl	8004272 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f000 f87d 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000278 	.word	0x20000278
 8001d48:	40004800 	.word	0x40004800

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a30      	ldr	r2, [pc, #192]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a24      	ldr	r2, [pc, #144]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <MX_GPIO_Init+0xdc>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Data_DHT_Pin|NSS_Pin|Led_6_Pin|Led_5_Pin|Led_4_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f640 6114 	movw	r1, #3604	@ 0xe14
 8001dae:	481f      	ldr	r0, [pc, #124]	@ (8001e2c <MX_GPIO_Init+0xe0>)
 8001db0:	f000 fd76 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2102      	movs	r1, #2
 8001db8:	481d      	ldr	r0, [pc, #116]	@ (8001e30 <MX_GPIO_Init+0xe4>)
 8001dba:	f000 fd71 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Data_DHT_Pin NSS_Pin Led_5_Pin Led_4_Pin */
  GPIO_InitStruct.Pin = Data_DHT_Pin|NSS_Pin|Led_6_Pin|Led_5_Pin|Led_4_Pin;
 8001dbe:	f640 6314 	movw	r3, #3604	@ 0xe14
 8001dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4815      	ldr	r0, [pc, #84]	@ (8001e2c <MX_GPIO_Init+0xe0>)
 8001dd8:	f000 fbde 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_GPIO_Init+0xe8>)
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	4810      	ldr	r0, [pc, #64]	@ (8001e30 <MX_GPIO_Init+0xe4>)
 8001df0:	f000 fbd2 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001df4:	2302      	movs	r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	@ (8001e30 <MX_GPIO_Init+0xe4>)
 8001e0c:	f000 fbc4 	bl	8002598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2006      	movs	r0, #6
 8001e16:	f000 fb88 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e1a:	2006      	movs	r0, #6
 8001e1c:	f000 fba1 	bl	8002562 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010800 	.word	0x40010800
 8001e30:	40010c00 	.word	0x40010c00
 8001e34:	10110000 	.word	0x10110000

08001e38 <Error_Handler>:
//				HAL_UART_Transmit(&huart3, (uint8_t *)data_receive, strlen(data_receive),1000);
//
//	}
//}
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <Error_Handler+0x8>

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_MspInit+0x5c>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <HAL_MspInit+0x5c>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6193      	str	r3, [r2, #24]
 8001e56:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_MspInit+0x5c>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <HAL_MspInit+0x5c>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea0 <HAL_MspInit+0x5c>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_MspInit+0x5c>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_MspInit+0x60>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_MspInit+0x60>)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000

08001ea8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <HAL_RTC_MspInit+0x5c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d120      	bne.n	8001efc <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001eba:	f000 fd2b 	bl	8002914 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_RTC_MspInit+0x60>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a11      	ldr	r2, [pc, #68]	@ (8001f08 <HAL_RTC_MspInit+0x60>)
 8001ec4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_RTC_MspInit+0x60>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <HAL_RTC_MspInit+0x64>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 fb22 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	f000 fb3b 	bl	8002562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2029      	movs	r0, #41	@ 0x29
 8001ef2:	f000 fb1a 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ef6:	2029      	movs	r0, #41	@ 0x29
 8001ef8:	f000 fb33 	bl	8002562 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40002800 	.word	0x40002800
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	4242043c 	.word	0x4242043c

08001f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f98 <HAL_SPI_MspInit+0x88>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d12f      	bne.n	8001f90 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_SPI_MspInit+0x8c>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_SPI_MspInit+0x8c>)
 8001f36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_SPI_MspInit+0x8c>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_SPI_MspInit+0x8c>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <HAL_SPI_MspInit+0x8c>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_SPI_MspInit+0x8c>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f60:	23a0      	movs	r3, #160	@ 0xa0
 8001f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <HAL_SPI_MspInit+0x90>)
 8001f74:	f000 fb10 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f78:	2340      	movs	r3, #64	@ 0x40
 8001f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <HAL_SPI_MspInit+0x90>)
 8001f8c:	f000 fb04 	bl	8002598 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40013000 	.word	0x40013000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010800 	.word	0x40010800

08001fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_UART_MspInit+0x8c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d131      	bne.n	8002028 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_UART_MspInit+0x90>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002034 <HAL_UART_MspInit+0x90>)
 8001fca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fce:	61d3      	str	r3, [r2, #28]
 8001fd0:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <HAL_UART_MspInit+0x90>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_UART_MspInit+0x90>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <HAL_UART_MspInit+0x90>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_UART_MspInit+0x90>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4619      	mov	r1, r3
 8002008:	480b      	ldr	r0, [pc, #44]	@ (8002038 <HAL_UART_MspInit+0x94>)
 800200a:	f000 fac5 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800200e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4619      	mov	r1, r3
 8002022:	4805      	ldr	r0, [pc, #20]	@ (8002038 <HAL_UART_MspInit+0x94>)
 8002024:	f000 fab8 	bl	8002598 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40004800 	.word	0x40004800
 8002034:	40021000 	.word	0x40021000
 8002038:	40010c00 	.word	0x40010c00

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <NMI_Handler+0x4>

08002044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <MemManage_Handler+0x4>

08002054 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <UsageFault_Handler+0x4>

08002064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208c:	f000 f936 	bl	80022fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <RTC_IRQHandler+0x10>)
 800209a:	f001 faff 	bl	800369c <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000020c 	.word	0x2000020c

080020a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 fc0f 	bl	80028d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80020bc:	4802      	ldr	r0, [pc, #8]	@ (80020c8 <RTC_Alarm_IRQHandler+0x10>)
 80020be:	f001 fa3d 	bl	800353c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000020c 	.word	0x2000020c

080020cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <_kill>:

int _kill(int pid, int sig)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e4:	f003 fb1e 	bl	8005724 <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2216      	movs	r2, #22
 80020ec:	601a      	str	r2, [r3, #0]
  return -1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_exit>:

void _exit (int status)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002102:	f04f 31ff 	mov.w	r1, #4294967295
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffe7 	bl	80020da <_kill>
  while (1) {}    /* Make sure we hang here */
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <_exit+0x12>

08002110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00a      	b.n	8002138 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002122:	f3af 8000 	nop.w
 8002126:	4601      	mov	r1, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf0      	blt.n	8002122 <_read+0x12>
  }

  return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_close>:
  }
  return len;
}

int _close(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002170:	605a      	str	r2, [r3, #4]
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <_isatty>:

int _isatty(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f003 faa2 	bl	8005724 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 }
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20005000 	.word	0x20005000
 800220c:	00000400 	.word	0x00000400
 8002210:	2000051c 	.word	0x2000051c
 8002214:	20000670 	.word	0x20000670

08002218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002224:	f7ff fff8 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480b      	ldr	r0, [pc, #44]	@ (8002258 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800222a:	490c      	ldr	r1, [pc, #48]	@ (800225c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800222c:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <LoopFillZerobss+0x16>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002240:	4c09      	ldr	r4, [pc, #36]	@ (8002268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224e:	f003 fa6f 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002252:	f7ff fc4f 	bl	8001af4 <main>
  bx lr
 8002256:	4770      	bx	lr
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002260:	08009b9c 	.word	0x08009b9c
  ldr r2, =_sbss
 8002264:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002268:	20000670 	.word	0x20000670

0800226c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC1_2_IRQHandler>
	...

08002270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <HAL_Init+0x28>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <HAL_Init+0x28>)
 800227a:	f043 0310 	orr.w	r3, r3, #16
 800227e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f947 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002286:	200f      	movs	r0, #15
 8002288:	f000 f808 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228c:	f7ff fdda 	bl	8001e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_InitTick+0x54>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x58>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f95f 	bl	800257e <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f927 	bl	800252a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <HAL_InitTick+0x5c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000018 	.word	0x20000018
 80022f4:	20000020 	.word	0x20000020
 80022f8:	2000001c 	.word	0x2000001c

080022fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_IncTick+0x1c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_IncTick+0x20>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a03      	ldr	r2, [pc, #12]	@ (800231c <HAL_IncTick+0x20>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000020 	.word	0x20000020
 800231c:	20000520 	.word	0x20000520

08002320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b02      	ldr	r3, [pc, #8]	@ (8002330 <HAL_GetTick+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000520 	.word	0x20000520

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fff0 	bl	8002320 <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffe0 	bl	8002320 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000020 	.word	0x20000020

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4906      	ldr	r1, [pc, #24]	@ (8002414 <__NVIC_EnableIRQ+0x34>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	@ (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	@ (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	@ 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f7ff ff90 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff2d 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff42 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff90 	bl	800246c <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5f 	bl	8002418 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff35 	bl	80023e0 <__NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa2 	bl	80024d0 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	@ 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	e169      	b.n	8002880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025ac:	2201      	movs	r2, #1
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8158 	bne.w	800287a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d05e      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025d4:	4a98      	ldr	r2, [pc, #608]	@ (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d875      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025da:	4a98      	ldr	r2, [pc, #608]	@ (800283c <HAL_GPIO_Init+0x2a4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d058      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025e0:	4a96      	ldr	r2, [pc, #600]	@ (800283c <HAL_GPIO_Init+0x2a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d86f      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025e6:	4a96      	ldr	r2, [pc, #600]	@ (8002840 <HAL_GPIO_Init+0x2a8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d052      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025ec:	4a94      	ldr	r2, [pc, #592]	@ (8002840 <HAL_GPIO_Init+0x2a8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d869      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025f2:	4a94      	ldr	r2, [pc, #592]	@ (8002844 <HAL_GPIO_Init+0x2ac>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04c      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025f8:	4a92      	ldr	r2, [pc, #584]	@ (8002844 <HAL_GPIO_Init+0x2ac>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d863      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025fe:	4a92      	ldr	r2, [pc, #584]	@ (8002848 <HAL_GPIO_Init+0x2b0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d046      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 8002604:	4a90      	ldr	r2, [pc, #576]	@ (8002848 <HAL_GPIO_Init+0x2b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d85d      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 800260a:	2b12      	cmp	r3, #18
 800260c:	d82a      	bhi.n	8002664 <HAL_GPIO_Init+0xcc>
 800260e:	2b12      	cmp	r3, #18
 8002610:	d859      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 8002612:	a201      	add	r2, pc, #4	@ (adr r2, 8002618 <HAL_GPIO_Init+0x80>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002693 	.word	0x08002693
 800261c:	0800266d 	.word	0x0800266d
 8002620:	0800267f 	.word	0x0800267f
 8002624:	080026c1 	.word	0x080026c1
 8002628:	080026c7 	.word	0x080026c7
 800262c:	080026c7 	.word	0x080026c7
 8002630:	080026c7 	.word	0x080026c7
 8002634:	080026c7 	.word	0x080026c7
 8002638:	080026c7 	.word	0x080026c7
 800263c:	080026c7 	.word	0x080026c7
 8002640:	080026c7 	.word	0x080026c7
 8002644:	080026c7 	.word	0x080026c7
 8002648:	080026c7 	.word	0x080026c7
 800264c:	080026c7 	.word	0x080026c7
 8002650:	080026c7 	.word	0x080026c7
 8002654:	080026c7 	.word	0x080026c7
 8002658:	080026c7 	.word	0x080026c7
 800265c:	08002675 	.word	0x08002675
 8002660:	08002689 	.word	0x08002689
 8002664:	4a79      	ldr	r2, [pc, #484]	@ (800284c <HAL_GPIO_Init+0x2b4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800266a:	e02c      	b.n	80026c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	623b      	str	r3, [r7, #32]
          break;
 8002672:	e029      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	3304      	adds	r3, #4
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e024      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	3308      	adds	r3, #8
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e01f      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	330c      	adds	r3, #12
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e01a      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800269a:	2304      	movs	r3, #4
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e013      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	611a      	str	r2, [r3, #16]
          break;
 80026b2:	e009      	b.n	80026c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b4:	2308      	movs	r3, #8
 80026b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	615a      	str	r2, [r3, #20]
          break;
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          break;
 80026c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	@ 0xff
 80026cc:	d801      	bhi.n	80026d2 <HAL_GPIO_Init+0x13a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_Init+0x13e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	@ 0xff
 80026dc:	d802      	bhi.n	80026e4 <HAL_GPIO_Init+0x14c>
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x152>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	3b08      	subs	r3, #8
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	210f      	movs	r1, #15
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80b1 	beq.w	800287a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a4c      	ldr	r2, [pc, #304]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002730:	4a48      	ldr	r2, [pc, #288]	@ (8002854 <HAL_GPIO_Init+0x2bc>)
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a40      	ldr	r2, [pc, #256]	@ (8002858 <HAL_GPIO_Init+0x2c0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_GPIO_Init+0x1ec>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3f      	ldr	r2, [pc, #252]	@ (800285c <HAL_GPIO_Init+0x2c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00d      	beq.n	8002780 <HAL_GPIO_Init+0x1e8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3e      	ldr	r2, [pc, #248]	@ (8002860 <HAL_GPIO_Init+0x2c8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <HAL_GPIO_Init+0x1e4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3d      	ldr	r2, [pc, #244]	@ (8002864 <HAL_GPIO_Init+0x2cc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_GPIO_Init+0x1e0>
 8002774:	2303      	movs	r3, #3
 8002776:	e006      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002778:	2304      	movs	r3, #4
 800277a:	e004      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 800277c:	2302      	movs	r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002784:	2300      	movs	r3, #0
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002796:	492f      	ldr	r1, [pc, #188]	@ (8002854 <HAL_GPIO_Init+0x2bc>)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	492c      	ldr	r1, [pc, #176]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4928      	ldr	r1, [pc, #160]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4922      	ldr	r1, [pc, #136]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	491e      	ldr	r1, [pc, #120]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002800:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4918      	ldr	r1, [pc, #96]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	43db      	mvns	r3, r3
 8002816:	4914      	ldr	r1, [pc, #80]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002818:	4013      	ands	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d021      	beq.n	800286c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	490e      	ldr	r1, [pc, #56]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e021      	b.n	800287a <HAL_GPIO_Init+0x2e2>
 8002836:	bf00      	nop
 8002838:	10320000 	.word	0x10320000
 800283c:	10310000 	.word	0x10310000
 8002840:	10220000 	.word	0x10220000
 8002844:	10210000 	.word	0x10210000
 8002848:	10120000 	.word	0x10120000
 800284c:	10110000 	.word	0x10110000
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	40010800 	.word	0x40010800
 800285c:	40010c00 	.word	0x40010c00
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_GPIO_Init+0x304>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	43db      	mvns	r3, r3
 8002874:	4909      	ldr	r1, [pc, #36]	@ (800289c <HAL_GPIO_Init+0x304>)
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	3301      	adds	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	f47f ae8e 	bne.w	80025ac <HAL_GPIO_Init+0x14>
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	372c      	adds	r7, #44	@ 0x2c
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	611a      	str	r2, [r3, #16]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e6:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f806 	bl	8002900 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <HAL_PWR_EnableBkUpAccess+0x14>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	420e0020 	.word	0x420e0020

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e272      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800294c:	4b92      	ldr	r3, [pc, #584]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002958:	4b8f      	ldr	r3, [pc, #572]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
 8002964:	4b8c      	ldr	r3, [pc, #560]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002970:	d10b      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	4b89      	ldr	r3, [pc, #548]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x12c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e24c      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x76>
 8002994:	4b80      	ldr	r3, [pc, #512]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7f      	ldr	r2, [pc, #508]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b78      	ldr	r3, [pc, #480]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xbc>
 80029ce:	4b72      	ldr	r3, [pc, #456]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a71      	ldr	r2, [pc, #452]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6f      	ldr	r3, [pc, #444]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6e      	ldr	r2, [pc, #440]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fc8a 	bl	8002320 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff fc86 	bl	8002320 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	@ 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e200      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b5d      	ldr	r3, [pc, #372]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe4>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff fc76 	bl	8002320 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff fc72 	bl	8002320 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1ec      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x10c>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a72:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
 8002a7e:	4b46      	ldr	r3, [pc, #280]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b43      	ldr	r3, [pc, #268]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4939      	ldr	r1, [pc, #228]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff fc2b 	bl	8002320 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff fc27 	bl	8002320 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b2a      	ldr	r3, [pc, #168]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4927      	ldr	r1, [pc, #156]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b26      	ldr	r3, [pc, #152]	@ (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff fc0a 	bl	8002320 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7ff fc06 	bl	8002320 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e180      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03a      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7ff fbea 	bl	8002320 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7ff fbe6 	bl	8002320 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e160      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 face 	bl	8003110 <RCC_Delay>
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7ff fbd0 	bl	8002320 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7ff fbcc 	bl	8002320 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e146      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	42420000 	.word	0x42420000
 8002ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e9      	bne.n	8002b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a6 	beq.w	8002d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b88      	ldr	r3, [pc, #544]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b85      	ldr	r3, [pc, #532]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b82      	ldr	r3, [pc, #520]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c02:	f7ff fb8d 	bl	8002320 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7ff fb89 	bl	8002320 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	@ 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e103      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b75      	ldr	r3, [pc, #468]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x312>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e02d      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x334>
 8002c46:	4b6a      	ldr	r3, [pc, #424]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a69      	ldr	r2, [pc, #420]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b67      	ldr	r3, [pc, #412]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a66      	ldr	r2, [pc, #408]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e01c      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x356>
 8002c68:	4b61      	ldr	r3, [pc, #388]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	4b5e      	ldr	r3, [pc, #376]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c82:	4b5b      	ldr	r3, [pc, #364]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a5a      	ldr	r2, [pc, #360]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b58      	ldr	r3, [pc, #352]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a57      	ldr	r2, [pc, #348]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff fb3d 	bl	8002320 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7ff fb39 	bl	8002320 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ee      	beq.n	8002caa <HAL_RCC_OscConfig+0x37e>
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7ff fb27 	bl	8002320 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff fb23 	bl	8002320 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e09b      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	4b40      	ldr	r3, [pc, #256]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b36      	ldr	r3, [pc, #216]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d061      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d146      	bne.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b33      	ldr	r3, [pc, #204]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7ff faf7 	bl	8002320 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7ff faf3 	bl	8002320 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e06d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4b24      	ldr	r3, [pc, #144]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4921      	ldr	r1, [pc, #132]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a19      	ldr	r1, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	430b      	orrs	r3, r1
 8002d82:	491b      	ldr	r1, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7ff fac7 	bl	8002320 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7ff fac3 	bl	8002320 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46a>
 8002db4:	e035      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fab0 	bl	8002320 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7ff faac 	bl	8002320 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e026      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x498>
 8002de2:	e01e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_RCC_OscConfig+0x500>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d0      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b67      	ldr	r3, [pc, #412]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4965      	ldr	r1, [pc, #404]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a58      	ldr	r2, [pc, #352]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b41      	ldr	r3, [pc, #260]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e073      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06b      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b39      	ldr	r3, [pc, #228]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4936      	ldr	r1, [pc, #216]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7ff f9fe 	bl	8002320 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7ff f9fa 	bl	8002320 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e053      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b27      	ldr	r3, [pc, #156]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d210      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4922      	ldr	r1, [pc, #136]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002faa:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	@ (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f95c 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08009704 	.word	0x08009704
 8002ffc:	20000018 	.word	0x20000018
 8003000:	2000001c 	.word	0x2000001c

08003004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800301e:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x94>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x30>
 800302e:	2b08      	cmp	r3, #8
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x36>
 8003032:	e027      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003036:	613b      	str	r3, [r7, #16]
      break;
 8003038:	e027      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0c9b      	lsrs	r3, r3, #18
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003044:	5cd3      	ldrb	r3, [r2, r3]
 8003046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x94>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	0c5b      	lsrs	r3, r3, #17
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	4a11      	ldr	r2, [pc, #68]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003066:	fb03 f202 	mul.w	r2, r3, r2
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e004      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0c      	ldr	r2, [pc, #48]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	613b      	str	r3, [r7, #16]
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003086:	613b      	str	r3, [r7, #16]
      break;
 8003088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308a:	693b      	ldr	r3, [r7, #16]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	0800971c 	.word	0x0800971c
 80030a4:	0800972c 	.word	0x0800972c
 80030a8:	003d0900 	.word	0x003d0900

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b02      	ldr	r3, [pc, #8]	@ (80030bc <HAL_RCC_GetHCLKFreq+0x10>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	20000018 	.word	0x20000018

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c4:	f7ff fff2 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08009714 	.word	0x08009714

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffde 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	0adb      	lsrs	r3, r3, #11
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	@ (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	08009714 	.word	0x08009714

08003110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <RCC_Delay+0x34>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <RCC_Delay+0x38>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800312c:	bf00      	nop
  }
  while (Delay --);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	60fa      	str	r2, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f9      	bne.n	800312c <RCC_Delay+0x1c>
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	20000018 	.word	0x20000018
 8003148:	10624dd3 	.word	0x10624dd3

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d07d      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316c:	4b4f      	ldr	r3, [pc, #316]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10d      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b4c      	ldr	r3, [pc, #304]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4a4b      	ldr	r2, [pc, #300]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003182:	61d3      	str	r3, [r2, #28]
 8003184:	4b49      	ldr	r3, [pc, #292]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	4b46      	ldr	r3, [pc, #280]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d118      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a0:	4b43      	ldr	r3, [pc, #268]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a42      	ldr	r2, [pc, #264]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ac:	f7ff f8b8 	bl	8002320 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b2:	e008      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7ff f8b4 	bl	8002320 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	@ 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e06d      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	4b3a      	ldr	r3, [pc, #232]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031d2:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02e      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d027      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f0:	4b2e      	ldr	r3, [pc, #184]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	4b2e      	ldr	r3, [pc, #184]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003200:	4b2c      	ldr	r3, [pc, #176]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003206:	4a29      	ldr	r2, [pc, #164]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d014      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003216:	f7ff f883 	bl	8002320 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7ff f87f 	bl	8002320 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e036      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003234:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ee      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003240:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4917      	ldr	r1, [pc, #92]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	4313      	orrs	r3, r2
 8003250:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003262:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	490b      	ldr	r1, [pc, #44]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4904      	ldr	r1, [pc, #16]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420440 	.word	0x42420440

080032b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	2300      	movs	r3, #0
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b10      	cmp	r3, #16
 80032de:	f200 808a 	bhi.w	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d045      	beq.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d075      	beq.n	80033da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80032ee:	e082      	b.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80032f0:	4b46      	ldr	r3, [pc, #280]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032f6:	4b45      	ldr	r3, [pc, #276]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d07b      	beq.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	0c9b      	lsrs	r3, r3, #18
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	4a41      	ldr	r2, [pc, #260]	@ (8003410 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800330c:	5cd3      	ldrb	r3, [r2, r3]
 800330e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d015      	beq.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331a:	4b3c      	ldr	r3, [pc, #240]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c5b      	lsrs	r3, r3, #17
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	4a3b      	ldr	r2, [pc, #236]	@ (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003334:	4a38      	ldr	r2, [pc, #224]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e004      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4a34      	ldr	r2, [pc, #208]	@ (800341c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003350:	4b2e      	ldr	r3, [pc, #184]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335c:	d102      	bne.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	61bb      	str	r3, [r7, #24]
      break;
 8003362:	e04a      	b.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4a2d      	ldr	r2, [pc, #180]	@ (8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	61bb      	str	r3, [r7, #24]
      break;
 8003372:	e042      	b.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003384:	d108      	bne.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	e01f      	b.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a2:	d109      	bne.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80033b0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	e00f      	b.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c2:	d11c      	bne.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033c4:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80033d0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80033d4:	61bb      	str	r3, [r7, #24]
      break;
 80033d6:	e012      	b.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033d8:	e011      	b.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80033da:	f7ff fe85 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0b9b      	lsrs	r3, r3, #14
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	3301      	adds	r3, #1
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	61bb      	str	r3, [r7, #24]
      break;
 80033f4:	e004      	b.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033fe:	bf00      	nop
    }
  }
  return (frequency);
 8003400:	69bb      	ldr	r3, [r7, #24]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	08009730 	.word	0x08009730
 8003414:	08009740 	.word	0x08009740
 8003418:	007a1200 	.word	0x007a1200
 800341c:	003d0900 	.word	0x003d0900
 8003420:	aaaaaaab 	.word	0xaaaaaaab

08003424 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e07a      	b.n	8003530 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7c5b      	ldrb	r3, [r3, #17]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fe fd2c 	bl	8001ea8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8a3 	bl	80035a2 <HAL_RTC_WaitForSynchro>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2204      	movs	r2, #4
 8003466:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e061      	b.n	8003530 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8c5 	bl	80035fc <RTC_EnterInitMode>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2204      	movs	r2, #4
 800347c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e056      	b.n	8003530 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0207 	bic.w	r2, r2, #7
 8003490:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800349a:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <HAL_RTC_Init+0x114>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	4a26      	ldr	r2, [pc, #152]	@ (8003538 <HAL_RTC_Init+0x114>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80034a6:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RTC_Init+0x114>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4921      	ldr	r1, [pc, #132]	@ (8003538 <HAL_RTC_Init+0x114>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d003      	beq.n	80034ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e00e      	b.n	80034e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80034ca:	2001      	movs	r0, #1
 80034cc:	f7ff fef4 	bl	80032b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80034d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e026      	b.n	8003530 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	0c1a      	lsrs	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f002 020f 	and.w	r2, r2, #15
 80034f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	b292      	uxth	r2, r2
 80034fe:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8a3 	bl	800364c <RTC_ExitInitMode>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e00c      	b.n	8003530 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40006c00 	.word	0x40006c00

0800353c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d011      	beq.n	8003576 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f815 	bl	8003590 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0202 	bic.w	r2, r2, #2
 8003574:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003576:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003578:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800357c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	745a      	strb	r2, [r3, #17]
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e01d      	b.n	80035f4 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0208 	bic.w	r2, r2, #8
 80035c6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80035c8:	f7fe feaa 	bl	8002320 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80035ce:	e009      	b.n	80035e4 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80035d0:	f7fe fea6 	bl	8002320 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035de:	d901      	bls.n	80035e4 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e007      	b.n	80035f4 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003608:	f7fe fe8a 	bl	8002320 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800360e:	e009      	b.n	8003624 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003610:	f7fe fe86 	bl	8002320 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800361e:	d901      	bls.n	8003624 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e00f      	b.n	8003644 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ee      	beq.n	8003610 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0210 	orr.w	r2, r2, #16
 8003640:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0210 	bic.w	r2, r2, #16
 8003666:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003668:	f7fe fe5a 	bl	8002320 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800366e:	e009      	b.n	8003684 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003670:	f7fe fe56 	bl	8002320 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800367e:	d901      	bls.n	8003684 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e007      	b.n	8003694 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0ee      	beq.n	8003670 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d027      	beq.n	8003702 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f824 	bl	800371c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2204      	movs	r2, #4
 80036e2:	745a      	strb	r2, [r3, #17]
 80036e4:	e005      	b.n	80036f2 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f80f 	bl	800370a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e076      	b.n	800382e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d108      	bne.n	800375a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003750:	d009      	beq.n	8003766 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	61da      	str	r2, [r3, #28]
 8003758:	e005      	b.n	8003766 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fe fbc5 	bl	8001f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ea:	ea42 0103 	orr.w	r1, r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	0c1a      	lsrs	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 0204 	and.w	r2, r2, #4
 800380c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800381c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b088      	sub	sp, #32
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003846:	f7fe fd6b 	bl	8002320 <HAL_GetTick>
 800384a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d001      	beq.n	8003860 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
 800385e:	e12a      	b.n	8003ab6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_SPI_Transmit+0x36>
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e122      	b.n	8003ab6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_SPI_Transmit+0x48>
 800387a:	2302      	movs	r3, #2
 800387c:	e11b      	b.n	8003ab6 <HAL_SPI_Transmit+0x280>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2203      	movs	r2, #3
 800388a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038cc:	d10f      	bne.n	80038ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d007      	beq.n	800390c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800390a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d152      	bne.n	80039bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_SPI_Transmit+0xee>
 800391e:	8b7b      	ldrh	r3, [r7, #26]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d145      	bne.n	80039b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003948:	e032      	b.n	80039b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d112      	bne.n	800397e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	881a      	ldrh	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	1c9a      	adds	r2, r3, #2
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800397c:	e018      	b.n	80039b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800397e:	f7fe fccf 	bl	8002320 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d803      	bhi.n	8003996 <HAL_SPI_Transmit+0x160>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d102      	bne.n	800399c <HAL_SPI_Transmit+0x166>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e082      	b.n	8003ab6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1c7      	bne.n	800394a <HAL_SPI_Transmit+0x114>
 80039ba:	e053      	b.n	8003a64 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_SPI_Transmit+0x194>
 80039c4:	8b7b      	ldrh	r3, [r7, #26]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d147      	bne.n	8003a5a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	7812      	ldrb	r2, [r2, #0]
 80039d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039f0:	e033      	b.n	8003a5a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d113      	bne.n	8003a28 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	7812      	ldrb	r2, [r2, #0]
 8003a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a26:	e018      	b.n	8003a5a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a28:	f7fe fc7a 	bl	8002320 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d803      	bhi.n	8003a40 <HAL_SPI_Transmit+0x20a>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Transmit+0x210>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e02d      	b.n	8003ab6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1c6      	bne.n	80039f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fbd1 	bl	8004210 <SPI_EndRxTxTransaction>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b088      	sub	sp, #32
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
 8003adc:	e104      	b.n	8003ce8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ae6:	d112      	bne.n	8003b0e <HAL_SPI_Receive+0x50>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10e      	bne.n	8003b0e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2204      	movs	r2, #4
 8003af4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f8f3 	bl	8003cf0 <HAL_SPI_TransmitReceive>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	e0ec      	b.n	8003ce8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b0e:	f7fe fc07 	bl	8002320 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Receive+0x62>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0e1      	b.n	8003ce8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Receive+0x74>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e0da      	b.n	8003ce8 <HAL_SPI_Receive+0x22a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b80:	d10f      	bne.n	8003ba2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	2b40      	cmp	r3, #64	@ 0x40
 8003bae:	d007      	beq.n	8003bc0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d170      	bne.n	8003caa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003bc8:	e035      	b.n	8003c36 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d115      	bne.n	8003c04 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f103 020c 	add.w	r2, r3, #12
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c02:	e018      	b.n	8003c36 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c04:	f7fe fb8c 	bl	8002320 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d803      	bhi.n	8003c1c <HAL_SPI_Receive+0x15e>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d102      	bne.n	8003c22 <HAL_SPI_Receive+0x164>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e058      	b.n	8003ce8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1c4      	bne.n	8003bca <HAL_SPI_Receive+0x10c>
 8003c40:	e038      	b.n	8003cb4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d113      	bne.n	8003c78 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	b292      	uxth	r2, r2
 8003c5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c62:	1c9a      	adds	r2, r3, #2
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c76:	e018      	b.n	8003caa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c78:	f7fe fb52 	bl	8002320 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d803      	bhi.n	8003c90 <HAL_SPI_Receive+0x1d2>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8e:	d102      	bne.n	8003c96 <HAL_SPI_Receive+0x1d8>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e01e      	b.n	8003ce8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1c6      	bne.n	8003c42 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6839      	ldr	r1, [r7, #0]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fa57 	bl	800416c <SPI_EndRxTransaction>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d02:	f7fe fb0d 	bl	8002320 <HAL_GetTick>
 8003d06:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d0e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d00c      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x4a>
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d26:	d106      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x46>
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d001      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	e17f      	b.n	800403a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x5c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x5c>
 8003d46:	887b      	ldrh	r3, [r7, #2]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e174      	b.n	800403a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_SPI_TransmitReceive+0x6e>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e16d      	b.n	800403a <HAL_SPI_TransmitReceive+0x34a>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d003      	beq.n	8003d7a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2205      	movs	r2, #5
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	887a      	ldrh	r2, [r7, #2]
 8003d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	887a      	ldrh	r2, [r7, #2]
 8003da2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d007      	beq.n	8003dce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd6:	d17e      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0xf6>
 8003de0:	8afb      	ldrh	r3, [r7, #22]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d16c      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	881a      	ldrh	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	1c9a      	adds	r2, r3, #2
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e0a:	e059      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d11b      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x162>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d016      	beq.n	8003e52 <HAL_SPI_TransmitReceive+0x162>
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d113      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	1c9a      	adds	r2, r3, #2
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d119      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x1a4>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d014      	beq.n	8003e94 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	b292      	uxth	r2, r2
 8003e76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7c:	1c9a      	adds	r2, r3, #2
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e90:	2301      	movs	r3, #1
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e94:	f7fe fa44 	bl	8002320 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d80d      	bhi.n	8003ec0 <HAL_SPI_TransmitReceive+0x1d0>
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d009      	beq.n	8003ec0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0bc      	b.n	800403a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1a0      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x11c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d19b      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x11c>
 8003ed4:	e082      	b.n	8003fdc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x1f4>
 8003ede:	8afb      	ldrh	r3, [r7, #22]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d171      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f0a:	e05d      	b.n	8003fc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d11c      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x264>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x264>
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d114      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d119      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x2a6>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d014      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f92:	2301      	movs	r3, #1
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f96:	f7fe f9c3 	bl	8002320 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d803      	bhi.n	8003fae <HAL_SPI_TransmitReceive+0x2be>
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d102      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x2c4>
 8003fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e038      	b.n	800403a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d19c      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x21c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d197      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f915 	bl	8004210 <SPI_EndRxTxTransaction>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e01d      	b.n	800403a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004038:	2300      	movs	r3, #0
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	@ 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004050:	b2db      	uxtb	r3, r3
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800406c:	f7fe f958 	bl	8002320 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	4413      	add	r3, r2
 800407a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800407c:	f7fe f950 	bl	8002320 <HAL_GetTick>
 8004080:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004082:	4b39      	ldr	r3, [pc, #228]	@ (8004168 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	015b      	lsls	r3, r3, #5
 8004088:	0d1b      	lsrs	r3, r3, #20
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004092:	e054      	b.n	800413e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d050      	beq.n	800413e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800409c:	f7fe f940 	bl	8002320 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d902      	bls.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d13d      	bne.n	800412e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ca:	d111      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d4:	d004      	beq.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040de:	d107      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f8:	d10f      	bne.n	800411a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e017      	b.n	800415e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3b01      	subs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d19b      	bne.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000018 	.word	0x20000018

0800416c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004180:	d111      	bne.n	80041a6 <SPI_EndRxTransaction+0x3a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800418a:	d004      	beq.n	8004196 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004194:	d107      	bne.n	80041a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041ae:	d117      	bne.n	80041e0 <SPI_EndRxTransaction+0x74>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b8:	d112      	bne.n	80041e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2101      	movs	r1, #1
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff ff49 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01a      	beq.n	8004206 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e013      	b.n	8004208 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2180      	movs	r1, #128	@ 0x80
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff36 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e000      	b.n	8004208 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2201      	movs	r2, #1
 8004224:	2102      	movs	r1, #2
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff ff18 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e013      	b.n	800426a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2200      	movs	r2, #0
 800424a:	2180      	movs	r1, #128	@ 0x80
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff ff05 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	f043 0220 	orr.w	r2, r3, #32
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e000      	b.n	800426a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e042      	b.n	800430a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fd fe83 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2224      	movs	r2, #36	@ 0x24
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f972 	bl	80045a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08a      	sub	sp, #40	@ 0x28
 8004316:	af02      	add	r7, sp, #8
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	d175      	bne.n	800441e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_UART_Transmit+0x2c>
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e06e      	b.n	8004420 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2221      	movs	r2, #33	@ 0x21
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004350:	f7fd ffe6 	bl	8002320 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d108      	bne.n	800437e <HAL_UART_Transmit+0x6c>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	e003      	b.n	8004386 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004386:	e02e      	b.n	80043e6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2200      	movs	r2, #0
 8004390:	2180      	movs	r1, #128	@ 0x80
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f848 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e03a      	b.n	8004420 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043be:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	3302      	adds	r3, #2
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e007      	b.n	80043d8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1cb      	bne.n	8004388 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	2140      	movs	r1, #64	@ 0x40
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f814 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e006      	b.n	8004420 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	e03b      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d037      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fd ff6d 	bl	8002320 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <UART_WaitOnFlagUntilTimeout+0x30>
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e03a      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d023      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b80      	cmp	r3, #128	@ 0x80
 800446e:	d020      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b40      	cmp	r3, #64	@ 0x40
 8004474:	d01d      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d116      	bne.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f81d 	bl	80044da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2208      	movs	r2, #8
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e00f      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d0b4      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044da:	b480      	push	{r7}
 80044dc:	b095      	sub	sp, #84	@ 0x54
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004502:	643a      	str	r2, [r7, #64]	@ 0x40
 8004504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004508:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3314      	adds	r3, #20
 800451c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	61fb      	str	r3, [r7, #28]
   return(result);
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800453c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	2b01      	cmp	r3, #1
 8004550:	d119      	bne.n	8004586 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	60bb      	str	r3, [r7, #8]
   return(result);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f023 0310 	bic.w	r3, r3, #16
 8004568:	647b      	str	r3, [r7, #68]	@ 0x44
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004572:	61ba      	str	r2, [r7, #24]
 8004574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6979      	ldr	r1, [r7, #20]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	613b      	str	r3, [r7, #16]
   return(result);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004594:	bf00      	nop
 8004596:	3754      	adds	r7, #84	@ 0x54
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
	...

080045a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045da:	f023 030c 	bic.w	r3, r3, #12
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2c      	ldr	r2, [pc, #176]	@ (80046b4 <UART_SetConfig+0x114>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004608:	f7fe fd6e 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	e002      	b.n	8004616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7fe fd56 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009a      	lsls	r2, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <UART_SetConfig+0x118>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	0119      	lsls	r1, r3, #4
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f2f3 	udiv	r2, r2, r3
 800464c:	4b1a      	ldr	r3, [pc, #104]	@ (80046b8 <UART_SetConfig+0x118>)
 800464e:	fba3 0302 	umull	r0, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2064      	movs	r0, #100	@ 0x64
 8004656:	fb00 f303 	mul.w	r3, r0, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	@ 0x32
 8004660:	4a15      	ldr	r2, [pc, #84]	@ (80046b8 <UART_SetConfig+0x118>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800466c:	4419      	add	r1, r3
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009a      	lsls	r2, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fbb2 f2f3 	udiv	r2, r2, r3
 8004684:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <UART_SetConfig+0x118>)
 8004686:	fba3 0302 	umull	r0, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2064      	movs	r0, #100	@ 0x64
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	3332      	adds	r3, #50	@ 0x32
 8004698:	4a07      	ldr	r2, [pc, #28]	@ (80046b8 <UART_SetConfig+0x118>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	440a      	add	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40013800 	.word	0x40013800
 80046b8:	51eb851f 	.word	0x51eb851f

080046bc <__cvt>:
 80046bc:	2b00      	cmp	r3, #0
 80046be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c2:	461d      	mov	r5, r3
 80046c4:	bfbb      	ittet	lt
 80046c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80046ca:	461d      	movlt	r5, r3
 80046cc:	2300      	movge	r3, #0
 80046ce:	232d      	movlt	r3, #45	@ 0x2d
 80046d0:	b088      	sub	sp, #32
 80046d2:	4614      	mov	r4, r2
 80046d4:	bfb8      	it	lt
 80046d6:	4614      	movlt	r4, r2
 80046d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80046da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80046dc:	7013      	strb	r3, [r2, #0]
 80046de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80046e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80046e4:	f023 0820 	bic.w	r8, r3, #32
 80046e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046ec:	d005      	beq.n	80046fa <__cvt+0x3e>
 80046ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80046f2:	d100      	bne.n	80046f6 <__cvt+0x3a>
 80046f4:	3601      	adds	r6, #1
 80046f6:	2302      	movs	r3, #2
 80046f8:	e000      	b.n	80046fc <__cvt+0x40>
 80046fa:	2303      	movs	r3, #3
 80046fc:	aa07      	add	r2, sp, #28
 80046fe:	9204      	str	r2, [sp, #16]
 8004700:	aa06      	add	r2, sp, #24
 8004702:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004706:	e9cd 3600 	strd	r3, r6, [sp]
 800470a:	4622      	mov	r2, r4
 800470c:	462b      	mov	r3, r5
 800470e:	f001 f8d3 	bl	80058b8 <_dtoa_r>
 8004712:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004716:	4607      	mov	r7, r0
 8004718:	d119      	bne.n	800474e <__cvt+0x92>
 800471a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800471c:	07db      	lsls	r3, r3, #31
 800471e:	d50e      	bpl.n	800473e <__cvt+0x82>
 8004720:	eb00 0906 	add.w	r9, r0, r6
 8004724:	2200      	movs	r2, #0
 8004726:	2300      	movs	r3, #0
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fc f93c 	bl	80009a8 <__aeabi_dcmpeq>
 8004730:	b108      	cbz	r0, 8004736 <__cvt+0x7a>
 8004732:	f8cd 901c 	str.w	r9, [sp, #28]
 8004736:	2230      	movs	r2, #48	@ 0x30
 8004738:	9b07      	ldr	r3, [sp, #28]
 800473a:	454b      	cmp	r3, r9
 800473c:	d31e      	bcc.n	800477c <__cvt+0xc0>
 800473e:	4638      	mov	r0, r7
 8004740:	9b07      	ldr	r3, [sp, #28]
 8004742:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004744:	1bdb      	subs	r3, r3, r7
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	b008      	add	sp, #32
 800474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004752:	eb00 0906 	add.w	r9, r0, r6
 8004756:	d1e5      	bne.n	8004724 <__cvt+0x68>
 8004758:	7803      	ldrb	r3, [r0, #0]
 800475a:	2b30      	cmp	r3, #48	@ 0x30
 800475c:	d10a      	bne.n	8004774 <__cvt+0xb8>
 800475e:	2200      	movs	r2, #0
 8004760:	2300      	movs	r3, #0
 8004762:	4620      	mov	r0, r4
 8004764:	4629      	mov	r1, r5
 8004766:	f7fc f91f 	bl	80009a8 <__aeabi_dcmpeq>
 800476a:	b918      	cbnz	r0, 8004774 <__cvt+0xb8>
 800476c:	f1c6 0601 	rsb	r6, r6, #1
 8004770:	f8ca 6000 	str.w	r6, [sl]
 8004774:	f8da 3000 	ldr.w	r3, [sl]
 8004778:	4499      	add	r9, r3
 800477a:	e7d3      	b.n	8004724 <__cvt+0x68>
 800477c:	1c59      	adds	r1, r3, #1
 800477e:	9107      	str	r1, [sp, #28]
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e7d9      	b.n	8004738 <__cvt+0x7c>

08004784 <__exponent>:
 8004784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004786:	2900      	cmp	r1, #0
 8004788:	bfb6      	itet	lt
 800478a:	232d      	movlt	r3, #45	@ 0x2d
 800478c:	232b      	movge	r3, #43	@ 0x2b
 800478e:	4249      	neglt	r1, r1
 8004790:	2909      	cmp	r1, #9
 8004792:	7002      	strb	r2, [r0, #0]
 8004794:	7043      	strb	r3, [r0, #1]
 8004796:	dd29      	ble.n	80047ec <__exponent+0x68>
 8004798:	f10d 0307 	add.w	r3, sp, #7
 800479c:	461d      	mov	r5, r3
 800479e:	270a      	movs	r7, #10
 80047a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80047a4:	461a      	mov	r2, r3
 80047a6:	fb07 1416 	mls	r4, r7, r6, r1
 80047aa:	3430      	adds	r4, #48	@ 0x30
 80047ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80047b0:	460c      	mov	r4, r1
 80047b2:	2c63      	cmp	r4, #99	@ 0x63
 80047b4:	4631      	mov	r1, r6
 80047b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80047ba:	dcf1      	bgt.n	80047a0 <__exponent+0x1c>
 80047bc:	3130      	adds	r1, #48	@ 0x30
 80047be:	1e94      	subs	r4, r2, #2
 80047c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047c4:	4623      	mov	r3, r4
 80047c6:	1c41      	adds	r1, r0, #1
 80047c8:	42ab      	cmp	r3, r5
 80047ca:	d30a      	bcc.n	80047e2 <__exponent+0x5e>
 80047cc:	f10d 0309 	add.w	r3, sp, #9
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	42ac      	cmp	r4, r5
 80047d4:	bf88      	it	hi
 80047d6:	2300      	movhi	r3, #0
 80047d8:	3302      	adds	r3, #2
 80047da:	4403      	add	r3, r0
 80047dc:	1a18      	subs	r0, r3, r0
 80047de:	b003      	add	sp, #12
 80047e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80047e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80047ea:	e7ed      	b.n	80047c8 <__exponent+0x44>
 80047ec:	2330      	movs	r3, #48	@ 0x30
 80047ee:	3130      	adds	r1, #48	@ 0x30
 80047f0:	7083      	strb	r3, [r0, #2]
 80047f2:	70c1      	strb	r1, [r0, #3]
 80047f4:	1d03      	adds	r3, r0, #4
 80047f6:	e7f1      	b.n	80047dc <__exponent+0x58>

080047f8 <_printf_float>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	b091      	sub	sp, #68	@ 0x44
 80047fe:	460c      	mov	r4, r1
 8004800:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004804:	4616      	mov	r6, r2
 8004806:	461f      	mov	r7, r3
 8004808:	4605      	mov	r5, r0
 800480a:	f000 ff41 	bl	8005690 <_localeconv_r>
 800480e:	6803      	ldr	r3, [r0, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	9308      	str	r3, [sp, #32]
 8004814:	f7fb fc9c 	bl	8000150 <strlen>
 8004818:	2300      	movs	r3, #0
 800481a:	930e      	str	r3, [sp, #56]	@ 0x38
 800481c:	f8d8 3000 	ldr.w	r3, [r8]
 8004820:	9009      	str	r0, [sp, #36]	@ 0x24
 8004822:	3307      	adds	r3, #7
 8004824:	f023 0307 	bic.w	r3, r3, #7
 8004828:	f103 0208 	add.w	r2, r3, #8
 800482c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004830:	f8d4 b000 	ldr.w	fp, [r4]
 8004834:	f8c8 2000 	str.w	r2, [r8]
 8004838:	e9d3 8900 	ldrd	r8, r9, [r3]
 800483c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004842:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800484e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004852:	4b9c      	ldr	r3, [pc, #624]	@ (8004ac4 <_printf_float+0x2cc>)
 8004854:	f7fc f8da 	bl	8000a0c <__aeabi_dcmpun>
 8004858:	bb70      	cbnz	r0, 80048b8 <_printf_float+0xc0>
 800485a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	4b98      	ldr	r3, [pc, #608]	@ (8004ac4 <_printf_float+0x2cc>)
 8004864:	f7fc f8b4 	bl	80009d0 <__aeabi_dcmple>
 8004868:	bb30      	cbnz	r0, 80048b8 <_printf_float+0xc0>
 800486a:	2200      	movs	r2, #0
 800486c:	2300      	movs	r3, #0
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f7fc f8a3 	bl	80009bc <__aeabi_dcmplt>
 8004876:	b110      	cbz	r0, 800487e <_printf_float+0x86>
 8004878:	232d      	movs	r3, #45	@ 0x2d
 800487a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800487e:	4a92      	ldr	r2, [pc, #584]	@ (8004ac8 <_printf_float+0x2d0>)
 8004880:	4b92      	ldr	r3, [pc, #584]	@ (8004acc <_printf_float+0x2d4>)
 8004882:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004886:	bf94      	ite	ls
 8004888:	4690      	movls	r8, r2
 800488a:	4698      	movhi	r8, r3
 800488c:	2303      	movs	r3, #3
 800488e:	f04f 0900 	mov.w	r9, #0
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	f02b 0304 	bic.w	r3, fp, #4
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	4633      	mov	r3, r6
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	9700      	str	r7, [sp, #0]
 80048a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80048a4:	f000 f9d4 	bl	8004c50 <_printf_common>
 80048a8:	3001      	adds	r0, #1
 80048aa:	f040 8090 	bne.w	80049ce <_printf_float+0x1d6>
 80048ae:	f04f 30ff 	mov.w	r0, #4294967295
 80048b2:	b011      	add	sp, #68	@ 0x44
 80048b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	4640      	mov	r0, r8
 80048be:	4649      	mov	r1, r9
 80048c0:	f7fc f8a4 	bl	8000a0c <__aeabi_dcmpun>
 80048c4:	b148      	cbz	r0, 80048da <_printf_float+0xe2>
 80048c6:	464b      	mov	r3, r9
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bfb8      	it	lt
 80048cc:	232d      	movlt	r3, #45	@ 0x2d
 80048ce:	4a80      	ldr	r2, [pc, #512]	@ (8004ad0 <_printf_float+0x2d8>)
 80048d0:	bfb8      	it	lt
 80048d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048d6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad4 <_printf_float+0x2dc>)
 80048d8:	e7d3      	b.n	8004882 <_printf_float+0x8a>
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	d13f      	bne.n	8004964 <_printf_float+0x16c>
 80048e4:	2306      	movs	r3, #6
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	9206      	str	r2, [sp, #24]
 80048f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80048f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80048f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80048fa:	9203      	str	r2, [sp, #12]
 80048fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004900:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004904:	6863      	ldr	r3, [r4, #4]
 8004906:	4642      	mov	r2, r8
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4628      	mov	r0, r5
 800490c:	464b      	mov	r3, r9
 800490e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004910:	f7ff fed4 	bl	80046bc <__cvt>
 8004914:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004916:	4680      	mov	r8, r0
 8004918:	2947      	cmp	r1, #71	@ 0x47
 800491a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800491c:	d128      	bne.n	8004970 <_printf_float+0x178>
 800491e:	1cc8      	adds	r0, r1, #3
 8004920:	db02      	blt.n	8004928 <_printf_float+0x130>
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	4299      	cmp	r1, r3
 8004926:	dd40      	ble.n	80049aa <_printf_float+0x1b2>
 8004928:	f1aa 0a02 	sub.w	sl, sl, #2
 800492c:	fa5f fa8a 	uxtb.w	sl, sl
 8004930:	4652      	mov	r2, sl
 8004932:	3901      	subs	r1, #1
 8004934:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004938:	910d      	str	r1, [sp, #52]	@ 0x34
 800493a:	f7ff ff23 	bl	8004784 <__exponent>
 800493e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004940:	4681      	mov	r9, r0
 8004942:	1813      	adds	r3, r2, r0
 8004944:	2a01      	cmp	r2, #1
 8004946:	6123      	str	r3, [r4, #16]
 8004948:	dc02      	bgt.n	8004950 <_printf_float+0x158>
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	07d2      	lsls	r2, r2, #31
 800494e:	d501      	bpl.n	8004954 <_printf_float+0x15c>
 8004950:	3301      	adds	r3, #1
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004958:	2b00      	cmp	r3, #0
 800495a:	d09e      	beq.n	800489a <_printf_float+0xa2>
 800495c:	232d      	movs	r3, #45	@ 0x2d
 800495e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004962:	e79a      	b.n	800489a <_printf_float+0xa2>
 8004964:	2947      	cmp	r1, #71	@ 0x47
 8004966:	d1bf      	bne.n	80048e8 <_printf_float+0xf0>
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1bd      	bne.n	80048e8 <_printf_float+0xf0>
 800496c:	2301      	movs	r3, #1
 800496e:	e7ba      	b.n	80048e6 <_printf_float+0xee>
 8004970:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004974:	d9dc      	bls.n	8004930 <_printf_float+0x138>
 8004976:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800497a:	d118      	bne.n	80049ae <_printf_float+0x1b6>
 800497c:	2900      	cmp	r1, #0
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	dd0b      	ble.n	800499a <_printf_float+0x1a2>
 8004982:	6121      	str	r1, [r4, #16]
 8004984:	b913      	cbnz	r3, 800498c <_printf_float+0x194>
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	07d0      	lsls	r0, r2, #31
 800498a:	d502      	bpl.n	8004992 <_printf_float+0x19a>
 800498c:	3301      	adds	r3, #1
 800498e:	440b      	add	r3, r1
 8004990:	6123      	str	r3, [r4, #16]
 8004992:	f04f 0900 	mov.w	r9, #0
 8004996:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004998:	e7dc      	b.n	8004954 <_printf_float+0x15c>
 800499a:	b913      	cbnz	r3, 80049a2 <_printf_float+0x1aa>
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	07d2      	lsls	r2, r2, #31
 80049a0:	d501      	bpl.n	80049a6 <_printf_float+0x1ae>
 80049a2:	3302      	adds	r3, #2
 80049a4:	e7f4      	b.n	8004990 <_printf_float+0x198>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e7f2      	b.n	8004990 <_printf_float+0x198>
 80049aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80049ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049b0:	4299      	cmp	r1, r3
 80049b2:	db05      	blt.n	80049c0 <_printf_float+0x1c8>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	6121      	str	r1, [r4, #16]
 80049b8:	07d8      	lsls	r0, r3, #31
 80049ba:	d5ea      	bpl.n	8004992 <_printf_float+0x19a>
 80049bc:	1c4b      	adds	r3, r1, #1
 80049be:	e7e7      	b.n	8004990 <_printf_float+0x198>
 80049c0:	2900      	cmp	r1, #0
 80049c2:	bfcc      	ite	gt
 80049c4:	2201      	movgt	r2, #1
 80049c6:	f1c1 0202 	rsble	r2, r1, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	e7e0      	b.n	8004990 <_printf_float+0x198>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	055a      	lsls	r2, r3, #21
 80049d2:	d407      	bmi.n	80049e4 <_printf_float+0x1ec>
 80049d4:	6923      	ldr	r3, [r4, #16]
 80049d6:	4642      	mov	r2, r8
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	d12b      	bne.n	8004a3a <_printf_float+0x242>
 80049e2:	e764      	b.n	80048ae <_printf_float+0xb6>
 80049e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049e8:	f240 80dc 	bls.w	8004ba4 <_printf_float+0x3ac>
 80049ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	f7fb ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d033      	beq.n	8004a64 <_printf_float+0x26c>
 80049fc:	2301      	movs	r3, #1
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	4a35      	ldr	r2, [pc, #212]	@ (8004ad8 <_printf_float+0x2e0>)
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f af51 	beq.w	80048ae <_printf_float+0xb6>
 8004a0c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004a10:	4543      	cmp	r3, r8
 8004a12:	db02      	blt.n	8004a1a <_printf_float+0x222>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	07d8      	lsls	r0, r3, #31
 8004a18:	d50f      	bpl.n	8004a3a <_printf_float+0x242>
 8004a1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f af42 	beq.w	80048ae <_printf_float+0xb6>
 8004a2a:	f04f 0900 	mov.w	r9, #0
 8004a2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a32:	f104 0a1a 	add.w	sl, r4, #26
 8004a36:	45c8      	cmp	r8, r9
 8004a38:	dc09      	bgt.n	8004a4e <_printf_float+0x256>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	079b      	lsls	r3, r3, #30
 8004a3e:	f100 8102 	bmi.w	8004c46 <_printf_float+0x44e>
 8004a42:	68e0      	ldr	r0, [r4, #12]
 8004a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a46:	4298      	cmp	r0, r3
 8004a48:	bfb8      	it	lt
 8004a4a:	4618      	movlt	r0, r3
 8004a4c:	e731      	b.n	80048b2 <_printf_float+0xba>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4652      	mov	r2, sl
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f43f af28 	beq.w	80048ae <_printf_float+0xb6>
 8004a5e:	f109 0901 	add.w	r9, r9, #1
 8004a62:	e7e8      	b.n	8004a36 <_printf_float+0x23e>
 8004a64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dc38      	bgt.n	8004adc <_printf_float+0x2e4>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4a19      	ldr	r2, [pc, #100]	@ (8004ad8 <_printf_float+0x2e0>)
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f af1a 	beq.w	80048ae <_printf_float+0xb6>
 8004a7a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004a7e:	ea59 0303 	orrs.w	r3, r9, r3
 8004a82:	d102      	bne.n	8004a8a <_printf_float+0x292>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	07d9      	lsls	r1, r3, #31
 8004a88:	d5d7      	bpl.n	8004a3a <_printf_float+0x242>
 8004a8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f af0a 	beq.w	80048ae <_printf_float+0xb6>
 8004a9a:	f04f 0a00 	mov.w	sl, #0
 8004a9e:	f104 0b1a 	add.w	fp, r4, #26
 8004aa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	4553      	cmp	r3, sl
 8004aa8:	dc01      	bgt.n	8004aae <_printf_float+0x2b6>
 8004aaa:	464b      	mov	r3, r9
 8004aac:	e793      	b.n	80049d6 <_printf_float+0x1de>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	465a      	mov	r2, fp
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b8      	blx	r7
 8004ab8:	3001      	adds	r0, #1
 8004aba:	f43f aef8 	beq.w	80048ae <_printf_float+0xb6>
 8004abe:	f10a 0a01 	add.w	sl, sl, #1
 8004ac2:	e7ee      	b.n	8004aa2 <_printf_float+0x2aa>
 8004ac4:	7fefffff 	.word	0x7fefffff
 8004ac8:	08009742 	.word	0x08009742
 8004acc:	08009746 	.word	0x08009746
 8004ad0:	0800974a 	.word	0x0800974a
 8004ad4:	0800974e 	.word	0x0800974e
 8004ad8:	08009ae0 	.word	0x08009ae0
 8004adc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ade:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ae2:	4553      	cmp	r3, sl
 8004ae4:	bfa8      	it	ge
 8004ae6:	4653      	movge	r3, sl
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	4699      	mov	r9, r3
 8004aec:	dc36      	bgt.n	8004b5c <_printf_float+0x364>
 8004aee:	f04f 0b00 	mov.w	fp, #0
 8004af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004af6:	f104 021a 	add.w	r2, r4, #26
 8004afa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004afc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004afe:	eba3 0309 	sub.w	r3, r3, r9
 8004b02:	455b      	cmp	r3, fp
 8004b04:	dc31      	bgt.n	8004b6a <_printf_float+0x372>
 8004b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b08:	459a      	cmp	sl, r3
 8004b0a:	dc3a      	bgt.n	8004b82 <_printf_float+0x38a>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	07da      	lsls	r2, r3, #31
 8004b10:	d437      	bmi.n	8004b82 <_printf_float+0x38a>
 8004b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b14:	ebaa 0903 	sub.w	r9, sl, r3
 8004b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004b1e:	4599      	cmp	r9, r3
 8004b20:	bfa8      	it	ge
 8004b22:	4699      	movge	r9, r3
 8004b24:	f1b9 0f00 	cmp.w	r9, #0
 8004b28:	dc33      	bgt.n	8004b92 <_printf_float+0x39a>
 8004b2a:	f04f 0800 	mov.w	r8, #0
 8004b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b32:	f104 0b1a 	add.w	fp, r4, #26
 8004b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b38:	ebaa 0303 	sub.w	r3, sl, r3
 8004b3c:	eba3 0309 	sub.w	r3, r3, r9
 8004b40:	4543      	cmp	r3, r8
 8004b42:	f77f af7a 	ble.w	8004a3a <_printf_float+0x242>
 8004b46:	2301      	movs	r3, #1
 8004b48:	465a      	mov	r2, fp
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b8      	blx	r7
 8004b50:	3001      	adds	r0, #1
 8004b52:	f43f aeac 	beq.w	80048ae <_printf_float+0xb6>
 8004b56:	f108 0801 	add.w	r8, r8, #1
 8004b5a:	e7ec      	b.n	8004b36 <_printf_float+0x33e>
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	d1c2      	bne.n	8004aee <_printf_float+0x2f6>
 8004b68:	e6a1      	b.n	80048ae <_printf_float+0xb6>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	920a      	str	r2, [sp, #40]	@ 0x28
 8004b72:	47b8      	blx	r7
 8004b74:	3001      	adds	r0, #1
 8004b76:	f43f ae9a 	beq.w	80048ae <_printf_float+0xb6>
 8004b7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b7c:	f10b 0b01 	add.w	fp, fp, #1
 8004b80:	e7bb      	b.n	8004afa <_printf_float+0x302>
 8004b82:	4631      	mov	r1, r6
 8004b84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d1c0      	bne.n	8004b12 <_printf_float+0x31a>
 8004b90:	e68d      	b.n	80048ae <_printf_float+0xb6>
 8004b92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b94:	464b      	mov	r3, r9
 8004b96:	4631      	mov	r1, r6
 8004b98:	4628      	mov	r0, r5
 8004b9a:	4442      	add	r2, r8
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d1c3      	bne.n	8004b2a <_printf_float+0x332>
 8004ba2:	e684      	b.n	80048ae <_printf_float+0xb6>
 8004ba4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ba8:	f1ba 0f01 	cmp.w	sl, #1
 8004bac:	dc01      	bgt.n	8004bb2 <_printf_float+0x3ba>
 8004bae:	07db      	lsls	r3, r3, #31
 8004bb0:	d536      	bpl.n	8004c20 <_printf_float+0x428>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b8      	blx	r7
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	f43f ae76 	beq.w	80048ae <_printf_float+0xb6>
 8004bc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f43f ae6e 	beq.w	80048ae <_printf_float+0xb6>
 8004bd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bde:	f7fb fee3 	bl	80009a8 <__aeabi_dcmpeq>
 8004be2:	b9c0      	cbnz	r0, 8004c16 <_printf_float+0x41e>
 8004be4:	4653      	mov	r3, sl
 8004be6:	f108 0201 	add.w	r2, r8, #1
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b8      	blx	r7
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d10c      	bne.n	8004c0e <_printf_float+0x416>
 8004bf4:	e65b      	b.n	80048ae <_printf_float+0xb6>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	465a      	mov	r2, fp
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	f43f ae54 	beq.w	80048ae <_printf_float+0xb6>
 8004c06:	f108 0801 	add.w	r8, r8, #1
 8004c0a:	45d0      	cmp	r8, sl
 8004c0c:	dbf3      	blt.n	8004bf6 <_printf_float+0x3fe>
 8004c0e:	464b      	mov	r3, r9
 8004c10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c14:	e6e0      	b.n	80049d8 <_printf_float+0x1e0>
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	f104 0b1a 	add.w	fp, r4, #26
 8004c1e:	e7f4      	b.n	8004c0a <_printf_float+0x412>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4642      	mov	r2, r8
 8004c24:	e7e1      	b.n	8004bea <_printf_float+0x3f2>
 8004c26:	2301      	movs	r3, #1
 8004c28:	464a      	mov	r2, r9
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	f43f ae3c 	beq.w	80048ae <_printf_float+0xb6>
 8004c36:	f108 0801 	add.w	r8, r8, #1
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004c3e:	1a5b      	subs	r3, r3, r1
 8004c40:	4543      	cmp	r3, r8
 8004c42:	dcf0      	bgt.n	8004c26 <_printf_float+0x42e>
 8004c44:	e6fd      	b.n	8004a42 <_printf_float+0x24a>
 8004c46:	f04f 0800 	mov.w	r8, #0
 8004c4a:	f104 0919 	add.w	r9, r4, #25
 8004c4e:	e7f4      	b.n	8004c3a <_printf_float+0x442>

08004c50 <_printf_common>:
 8004c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	4616      	mov	r6, r2
 8004c56:	4698      	mov	r8, r3
 8004c58:	688a      	ldr	r2, [r1, #8]
 8004c5a:	690b      	ldr	r3, [r1, #16]
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	bfb8      	it	lt
 8004c62:	4613      	movlt	r3, r2
 8004c64:	6033      	str	r3, [r6, #0]
 8004c66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c70:	b10a      	cbz	r2, 8004c76 <_printf_common+0x26>
 8004c72:	3301      	adds	r3, #1
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	0699      	lsls	r1, r3, #26
 8004c7a:	bf42      	ittt	mi
 8004c7c:	6833      	ldrmi	r3, [r6, #0]
 8004c7e:	3302      	addmi	r3, #2
 8004c80:	6033      	strmi	r3, [r6, #0]
 8004c82:	6825      	ldr	r5, [r4, #0]
 8004c84:	f015 0506 	ands.w	r5, r5, #6
 8004c88:	d106      	bne.n	8004c98 <_printf_common+0x48>
 8004c8a:	f104 0a19 	add.w	sl, r4, #25
 8004c8e:	68e3      	ldr	r3, [r4, #12]
 8004c90:	6832      	ldr	r2, [r6, #0]
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	42ab      	cmp	r3, r5
 8004c96:	dc2b      	bgt.n	8004cf0 <_printf_common+0xa0>
 8004c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	3b00      	subs	r3, #0
 8004ca0:	bf18      	it	ne
 8004ca2:	2301      	movne	r3, #1
 8004ca4:	0692      	lsls	r2, r2, #26
 8004ca6:	d430      	bmi.n	8004d0a <_printf_common+0xba>
 8004ca8:	4641      	mov	r1, r8
 8004caa:	4638      	mov	r0, r7
 8004cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cb0:	47c8      	blx	r9
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d023      	beq.n	8004cfe <_printf_common+0xae>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	6922      	ldr	r2, [r4, #16]
 8004cba:	f003 0306 	and.w	r3, r3, #6
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	bf14      	ite	ne
 8004cc2:	2500      	movne	r5, #0
 8004cc4:	6833      	ldreq	r3, [r6, #0]
 8004cc6:	f04f 0600 	mov.w	r6, #0
 8004cca:	bf08      	it	eq
 8004ccc:	68e5      	ldreq	r5, [r4, #12]
 8004cce:	f104 041a 	add.w	r4, r4, #26
 8004cd2:	bf08      	it	eq
 8004cd4:	1aed      	subeq	r5, r5, r3
 8004cd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cda:	bf08      	it	eq
 8004cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bfc4      	itt	gt
 8004ce4:	1a9b      	subgt	r3, r3, r2
 8004ce6:	18ed      	addgt	r5, r5, r3
 8004ce8:	42b5      	cmp	r5, r6
 8004cea:	d11a      	bne.n	8004d22 <_printf_common+0xd2>
 8004cec:	2000      	movs	r0, #0
 8004cee:	e008      	b.n	8004d02 <_printf_common+0xb2>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	47c8      	blx	r9
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d103      	bne.n	8004d06 <_printf_common+0xb6>
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d06:	3501      	adds	r5, #1
 8004d08:	e7c1      	b.n	8004c8e <_printf_common+0x3e>
 8004d0a:	2030      	movs	r0, #48	@ 0x30
 8004d0c:	18e1      	adds	r1, r4, r3
 8004d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d18:	4422      	add	r2, r4
 8004d1a:	3302      	adds	r3, #2
 8004d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d20:	e7c2      	b.n	8004ca8 <_printf_common+0x58>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4622      	mov	r2, r4
 8004d26:	4641      	mov	r1, r8
 8004d28:	4638      	mov	r0, r7
 8004d2a:	47c8      	blx	r9
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d0e6      	beq.n	8004cfe <_printf_common+0xae>
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7d9      	b.n	8004ce8 <_printf_common+0x98>

08004d34 <_printf_i>:
 8004d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	7e0f      	ldrb	r7, [r1, #24]
 8004d3a:	4691      	mov	r9, r2
 8004d3c:	2f78      	cmp	r7, #120	@ 0x78
 8004d3e:	4680      	mov	r8, r0
 8004d40:	460c      	mov	r4, r1
 8004d42:	469a      	mov	sl, r3
 8004d44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d4a:	d807      	bhi.n	8004d5c <_printf_i+0x28>
 8004d4c:	2f62      	cmp	r7, #98	@ 0x62
 8004d4e:	d80a      	bhi.n	8004d66 <_printf_i+0x32>
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	f000 80d3 	beq.w	8004efc <_printf_i+0x1c8>
 8004d56:	2f58      	cmp	r7, #88	@ 0x58
 8004d58:	f000 80ba 	beq.w	8004ed0 <_printf_i+0x19c>
 8004d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d64:	e03a      	b.n	8004ddc <_printf_i+0xa8>
 8004d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d6a:	2b15      	cmp	r3, #21
 8004d6c:	d8f6      	bhi.n	8004d5c <_printf_i+0x28>
 8004d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d74 <_printf_i+0x40>)
 8004d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004d5d 	.word	0x08004d5d
 8004d80:	08004d5d 	.word	0x08004d5d
 8004d84:	08004d5d 	.word	0x08004d5d
 8004d88:	08004d5d 	.word	0x08004d5d
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004d5d 	.word	0x08004d5d
 8004d94:	08004d5d 	.word	0x08004d5d
 8004d98:	08004d5d 	.word	0x08004d5d
 8004d9c:	08004d5d 	.word	0x08004d5d
 8004da0:	08004ee3 	.word	0x08004ee3
 8004da4:	08004e0b 	.word	0x08004e0b
 8004da8:	08004e9d 	.word	0x08004e9d
 8004dac:	08004d5d 	.word	0x08004d5d
 8004db0:	08004d5d 	.word	0x08004d5d
 8004db4:	08004f05 	.word	0x08004f05
 8004db8:	08004d5d 	.word	0x08004d5d
 8004dbc:	08004e0b 	.word	0x08004e0b
 8004dc0:	08004d5d 	.word	0x08004d5d
 8004dc4:	08004d5d 	.word	0x08004d5d
 8004dc8:	08004ea5 	.word	0x08004ea5
 8004dcc:	6833      	ldr	r3, [r6, #0]
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6032      	str	r2, [r6, #0]
 8004dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e09e      	b.n	8004f1e <_printf_i+0x1ea>
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	6820      	ldr	r0, [r4, #0]
 8004de4:	1d19      	adds	r1, r3, #4
 8004de6:	6031      	str	r1, [r6, #0]
 8004de8:	0606      	lsls	r6, r0, #24
 8004dea:	d501      	bpl.n	8004df0 <_printf_i+0xbc>
 8004dec:	681d      	ldr	r5, [r3, #0]
 8004dee:	e003      	b.n	8004df8 <_printf_i+0xc4>
 8004df0:	0645      	lsls	r5, r0, #25
 8004df2:	d5fb      	bpl.n	8004dec <_printf_i+0xb8>
 8004df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004df8:	2d00      	cmp	r5, #0
 8004dfa:	da03      	bge.n	8004e04 <_printf_i+0xd0>
 8004dfc:	232d      	movs	r3, #45	@ 0x2d
 8004dfe:	426d      	negs	r5, r5
 8004e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e04:	230a      	movs	r3, #10
 8004e06:	4859      	ldr	r0, [pc, #356]	@ (8004f6c <_printf_i+0x238>)
 8004e08:	e011      	b.n	8004e2e <_printf_i+0xfa>
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	0608      	lsls	r0, r1, #24
 8004e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e14:	d402      	bmi.n	8004e1c <_printf_i+0xe8>
 8004e16:	0649      	lsls	r1, r1, #25
 8004e18:	bf48      	it	mi
 8004e1a:	b2ad      	uxthmi	r5, r5
 8004e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	bf14      	ite	ne
 8004e22:	230a      	movne	r3, #10
 8004e24:	2308      	moveq	r3, #8
 8004e26:	4851      	ldr	r0, [pc, #324]	@ (8004f6c <_printf_i+0x238>)
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e2e:	6866      	ldr	r6, [r4, #4]
 8004e30:	2e00      	cmp	r6, #0
 8004e32:	bfa8      	it	ge
 8004e34:	6821      	ldrge	r1, [r4, #0]
 8004e36:	60a6      	str	r6, [r4, #8]
 8004e38:	bfa4      	itt	ge
 8004e3a:	f021 0104 	bicge.w	r1, r1, #4
 8004e3e:	6021      	strge	r1, [r4, #0]
 8004e40:	b90d      	cbnz	r5, 8004e46 <_printf_i+0x112>
 8004e42:	2e00      	cmp	r6, #0
 8004e44:	d04b      	beq.n	8004ede <_printf_i+0x1aa>
 8004e46:	4616      	mov	r6, r2
 8004e48:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e4c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e50:	5dc7      	ldrb	r7, [r0, r7]
 8004e52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e56:	462f      	mov	r7, r5
 8004e58:	42bb      	cmp	r3, r7
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	d9f4      	bls.n	8004e48 <_printf_i+0x114>
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d10b      	bne.n	8004e7a <_printf_i+0x146>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	07df      	lsls	r7, r3, #31
 8004e66:	d508      	bpl.n	8004e7a <_printf_i+0x146>
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	6861      	ldr	r1, [r4, #4]
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	bfde      	ittt	le
 8004e70:	2330      	movle	r3, #48	@ 0x30
 8004e72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e7a:	1b92      	subs	r2, r2, r6
 8004e7c:	6122      	str	r2, [r4, #16]
 8004e7e:	464b      	mov	r3, r9
 8004e80:	4621      	mov	r1, r4
 8004e82:	4640      	mov	r0, r8
 8004e84:	f8cd a000 	str.w	sl, [sp]
 8004e88:	aa03      	add	r2, sp, #12
 8004e8a:	f7ff fee1 	bl	8004c50 <_printf_common>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d14a      	bne.n	8004f28 <_printf_i+0x1f4>
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295
 8004e96:	b004      	add	sp, #16
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	f043 0320 	orr.w	r3, r3, #32
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	2778      	movs	r7, #120	@ 0x78
 8004ea6:	4832      	ldr	r0, [pc, #200]	@ (8004f70 <_printf_i+0x23c>)
 8004ea8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	6831      	ldr	r1, [r6, #0]
 8004eb0:	061f      	lsls	r7, r3, #24
 8004eb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004eb6:	d402      	bmi.n	8004ebe <_printf_i+0x18a>
 8004eb8:	065f      	lsls	r7, r3, #25
 8004eba:	bf48      	it	mi
 8004ebc:	b2ad      	uxthmi	r5, r5
 8004ebe:	6031      	str	r1, [r6, #0]
 8004ec0:	07d9      	lsls	r1, r3, #31
 8004ec2:	bf44      	itt	mi
 8004ec4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec8:	6023      	strmi	r3, [r4, #0]
 8004eca:	b11d      	cbz	r5, 8004ed4 <_printf_i+0x1a0>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	e7ab      	b.n	8004e28 <_printf_i+0xf4>
 8004ed0:	4826      	ldr	r0, [pc, #152]	@ (8004f6c <_printf_i+0x238>)
 8004ed2:	e7e9      	b.n	8004ea8 <_printf_i+0x174>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f023 0320 	bic.w	r3, r3, #32
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	e7f6      	b.n	8004ecc <_printf_i+0x198>
 8004ede:	4616      	mov	r6, r2
 8004ee0:	e7bd      	b.n	8004e5e <_printf_i+0x12a>
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	6825      	ldr	r5, [r4, #0]
 8004ee6:	1d18      	adds	r0, r3, #4
 8004ee8:	6961      	ldr	r1, [r4, #20]
 8004eea:	6030      	str	r0, [r6, #0]
 8004eec:	062e      	lsls	r6, r5, #24
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	d501      	bpl.n	8004ef6 <_printf_i+0x1c2>
 8004ef2:	6019      	str	r1, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <_printf_i+0x1c8>
 8004ef6:	0668      	lsls	r0, r5, #25
 8004ef8:	d5fb      	bpl.n	8004ef2 <_printf_i+0x1be>
 8004efa:	8019      	strh	r1, [r3, #0]
 8004efc:	2300      	movs	r3, #0
 8004efe:	4616      	mov	r6, r2
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	e7bc      	b.n	8004e7e <_printf_i+0x14a>
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	2100      	movs	r1, #0
 8004f08:	1d1a      	adds	r2, r3, #4
 8004f0a:	6032      	str	r2, [r6, #0]
 8004f0c:	681e      	ldr	r6, [r3, #0]
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	4630      	mov	r0, r6
 8004f12:	f000 fc34 	bl	800577e <memchr>
 8004f16:	b108      	cbz	r0, 8004f1c <_printf_i+0x1e8>
 8004f18:	1b80      	subs	r0, r0, r6
 8004f1a:	6060      	str	r0, [r4, #4]
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	6123      	str	r3, [r4, #16]
 8004f20:	2300      	movs	r3, #0
 8004f22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f26:	e7aa      	b.n	8004e7e <_printf_i+0x14a>
 8004f28:	4632      	mov	r2, r6
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	47d0      	blx	sl
 8004f32:	3001      	adds	r0, #1
 8004f34:	d0ad      	beq.n	8004e92 <_printf_i+0x15e>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	079b      	lsls	r3, r3, #30
 8004f3a:	d413      	bmi.n	8004f64 <_printf_i+0x230>
 8004f3c:	68e0      	ldr	r0, [r4, #12]
 8004f3e:	9b03      	ldr	r3, [sp, #12]
 8004f40:	4298      	cmp	r0, r3
 8004f42:	bfb8      	it	lt
 8004f44:	4618      	movlt	r0, r3
 8004f46:	e7a6      	b.n	8004e96 <_printf_i+0x162>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	4640      	mov	r0, r8
 8004f50:	47d0      	blx	sl
 8004f52:	3001      	adds	r0, #1
 8004f54:	d09d      	beq.n	8004e92 <_printf_i+0x15e>
 8004f56:	3501      	adds	r5, #1
 8004f58:	68e3      	ldr	r3, [r4, #12]
 8004f5a:	9903      	ldr	r1, [sp, #12]
 8004f5c:	1a5b      	subs	r3, r3, r1
 8004f5e:	42ab      	cmp	r3, r5
 8004f60:	dcf2      	bgt.n	8004f48 <_printf_i+0x214>
 8004f62:	e7eb      	b.n	8004f3c <_printf_i+0x208>
 8004f64:	2500      	movs	r5, #0
 8004f66:	f104 0619 	add.w	r6, r4, #25
 8004f6a:	e7f5      	b.n	8004f58 <_printf_i+0x224>
 8004f6c:	08009752 	.word	0x08009752
 8004f70:	08009763 	.word	0x08009763

08004f74 <_scanf_float>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	688b      	ldr	r3, [r1, #8]
 8004f7e:	4617      	mov	r7, r2
 8004f80:	1e5a      	subs	r2, r3, #1
 8004f82:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004f86:	bf82      	ittt	hi
 8004f88:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004f8c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004f90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004f94:	460a      	mov	r2, r1
 8004f96:	f04f 0500 	mov.w	r5, #0
 8004f9a:	bf88      	it	hi
 8004f9c:	608b      	strhi	r3, [r1, #8]
 8004f9e:	680b      	ldr	r3, [r1, #0]
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004fa6:	f842 3b1c 	str.w	r3, [r2], #28
 8004faa:	460c      	mov	r4, r1
 8004fac:	bf98      	it	ls
 8004fae:	f04f 0b00 	movls.w	fp, #0
 8004fb2:	4616      	mov	r6, r2
 8004fb4:	46aa      	mov	sl, r5
 8004fb6:	46a9      	mov	r9, r5
 8004fb8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fbc:	9201      	str	r2, [sp, #4]
 8004fbe:	9502      	str	r5, [sp, #8]
 8004fc0:	68a2      	ldr	r2, [r4, #8]
 8004fc2:	b152      	cbz	r2, 8004fda <_scanf_float+0x66>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b4e      	cmp	r3, #78	@ 0x4e
 8004fca:	d865      	bhi.n	8005098 <_scanf_float+0x124>
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d83d      	bhi.n	800504c <_scanf_float+0xd8>
 8004fd0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004fd4:	b2c8      	uxtb	r0, r1
 8004fd6:	280e      	cmp	r0, #14
 8004fd8:	d93b      	bls.n	8005052 <_scanf_float+0xde>
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	d003      	beq.n	8004fe8 <_scanf_float+0x74>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fec:	f1ba 0f01 	cmp.w	sl, #1
 8004ff0:	f200 8118 	bhi.w	8005224 <_scanf_float+0x2b0>
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	429e      	cmp	r6, r3
 8004ff8:	f200 8109 	bhi.w	800520e <_scanf_float+0x29a>
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	b007      	add	sp, #28
 8005000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005004:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005008:	2a0d      	cmp	r2, #13
 800500a:	d8e6      	bhi.n	8004fda <_scanf_float+0x66>
 800500c:	a101      	add	r1, pc, #4	@ (adr r1, 8005014 <_scanf_float+0xa0>)
 800500e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005012:	bf00      	nop
 8005014:	0800515b 	.word	0x0800515b
 8005018:	08004fdb 	.word	0x08004fdb
 800501c:	08004fdb 	.word	0x08004fdb
 8005020:	08004fdb 	.word	0x08004fdb
 8005024:	080051bb 	.word	0x080051bb
 8005028:	08005193 	.word	0x08005193
 800502c:	08004fdb 	.word	0x08004fdb
 8005030:	08004fdb 	.word	0x08004fdb
 8005034:	08005169 	.word	0x08005169
 8005038:	08004fdb 	.word	0x08004fdb
 800503c:	08004fdb 	.word	0x08004fdb
 8005040:	08004fdb 	.word	0x08004fdb
 8005044:	08004fdb 	.word	0x08004fdb
 8005048:	08005121 	.word	0x08005121
 800504c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005050:	e7da      	b.n	8005008 <_scanf_float+0x94>
 8005052:	290e      	cmp	r1, #14
 8005054:	d8c1      	bhi.n	8004fda <_scanf_float+0x66>
 8005056:	a001      	add	r0, pc, #4	@ (adr r0, 800505c <_scanf_float+0xe8>)
 8005058:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800505c:	08005111 	.word	0x08005111
 8005060:	08004fdb 	.word	0x08004fdb
 8005064:	08005111 	.word	0x08005111
 8005068:	080051a7 	.word	0x080051a7
 800506c:	08004fdb 	.word	0x08004fdb
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050f7 	.word	0x080050f7
 8005078:	080050f7 	.word	0x080050f7
 800507c:	080050f7 	.word	0x080050f7
 8005080:	080050f7 	.word	0x080050f7
 8005084:	080050f7 	.word	0x080050f7
 8005088:	080050f7 	.word	0x080050f7
 800508c:	080050f7 	.word	0x080050f7
 8005090:	080050f7 	.word	0x080050f7
 8005094:	080050f7 	.word	0x080050f7
 8005098:	2b6e      	cmp	r3, #110	@ 0x6e
 800509a:	d809      	bhi.n	80050b0 <_scanf_float+0x13c>
 800509c:	2b60      	cmp	r3, #96	@ 0x60
 800509e:	d8b1      	bhi.n	8005004 <_scanf_float+0x90>
 80050a0:	2b54      	cmp	r3, #84	@ 0x54
 80050a2:	d07b      	beq.n	800519c <_scanf_float+0x228>
 80050a4:	2b59      	cmp	r3, #89	@ 0x59
 80050a6:	d198      	bne.n	8004fda <_scanf_float+0x66>
 80050a8:	2d07      	cmp	r5, #7
 80050aa:	d196      	bne.n	8004fda <_scanf_float+0x66>
 80050ac:	2508      	movs	r5, #8
 80050ae:	e02c      	b.n	800510a <_scanf_float+0x196>
 80050b0:	2b74      	cmp	r3, #116	@ 0x74
 80050b2:	d073      	beq.n	800519c <_scanf_float+0x228>
 80050b4:	2b79      	cmp	r3, #121	@ 0x79
 80050b6:	e7f6      	b.n	80050a6 <_scanf_float+0x132>
 80050b8:	6821      	ldr	r1, [r4, #0]
 80050ba:	05c8      	lsls	r0, r1, #23
 80050bc:	d51b      	bpl.n	80050f6 <_scanf_float+0x182>
 80050be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80050c2:	6021      	str	r1, [r4, #0]
 80050c4:	f109 0901 	add.w	r9, r9, #1
 80050c8:	f1bb 0f00 	cmp.w	fp, #0
 80050cc:	d003      	beq.n	80050d6 <_scanf_float+0x162>
 80050ce:	3201      	adds	r2, #1
 80050d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050d4:	60a2      	str	r2, [r4, #8]
 80050d6:	68a3      	ldr	r3, [r4, #8]
 80050d8:	3b01      	subs	r3, #1
 80050da:	60a3      	str	r3, [r4, #8]
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	3301      	adds	r3, #1
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	f340 8087 	ble.w	80051fc <_scanf_float+0x288>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	e764      	b.n	8004fc0 <_scanf_float+0x4c>
 80050f6:	eb1a 0105 	adds.w	r1, sl, r5
 80050fa:	f47f af6e 	bne.w	8004fda <_scanf_float+0x66>
 80050fe:	460d      	mov	r5, r1
 8005100:	468a      	mov	sl, r1
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005108:	6022      	str	r2, [r4, #0]
 800510a:	f806 3b01 	strb.w	r3, [r6], #1
 800510e:	e7e2      	b.n	80050d6 <_scanf_float+0x162>
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	0610      	lsls	r0, r2, #24
 8005114:	f57f af61 	bpl.w	8004fda <_scanf_float+0x66>
 8005118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800511c:	6022      	str	r2, [r4, #0]
 800511e:	e7f4      	b.n	800510a <_scanf_float+0x196>
 8005120:	f1ba 0f00 	cmp.w	sl, #0
 8005124:	d10e      	bne.n	8005144 <_scanf_float+0x1d0>
 8005126:	f1b9 0f00 	cmp.w	r9, #0
 800512a:	d10e      	bne.n	800514a <_scanf_float+0x1d6>
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005132:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005136:	d108      	bne.n	800514a <_scanf_float+0x1d6>
 8005138:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800513c:	f04f 0a01 	mov.w	sl, #1
 8005140:	6022      	str	r2, [r4, #0]
 8005142:	e7e2      	b.n	800510a <_scanf_float+0x196>
 8005144:	f1ba 0f02 	cmp.w	sl, #2
 8005148:	d055      	beq.n	80051f6 <_scanf_float+0x282>
 800514a:	2d01      	cmp	r5, #1
 800514c:	d002      	beq.n	8005154 <_scanf_float+0x1e0>
 800514e:	2d04      	cmp	r5, #4
 8005150:	f47f af43 	bne.w	8004fda <_scanf_float+0x66>
 8005154:	3501      	adds	r5, #1
 8005156:	b2ed      	uxtb	r5, r5
 8005158:	e7d7      	b.n	800510a <_scanf_float+0x196>
 800515a:	f1ba 0f01 	cmp.w	sl, #1
 800515e:	f47f af3c 	bne.w	8004fda <_scanf_float+0x66>
 8005162:	f04f 0a02 	mov.w	sl, #2
 8005166:	e7d0      	b.n	800510a <_scanf_float+0x196>
 8005168:	b97d      	cbnz	r5, 800518a <_scanf_float+0x216>
 800516a:	f1b9 0f00 	cmp.w	r9, #0
 800516e:	f47f af37 	bne.w	8004fe0 <_scanf_float+0x6c>
 8005172:	6822      	ldr	r2, [r4, #0]
 8005174:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005178:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800517c:	f040 8103 	bne.w	8005386 <_scanf_float+0x412>
 8005180:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005184:	2501      	movs	r5, #1
 8005186:	6022      	str	r2, [r4, #0]
 8005188:	e7bf      	b.n	800510a <_scanf_float+0x196>
 800518a:	2d03      	cmp	r5, #3
 800518c:	d0e2      	beq.n	8005154 <_scanf_float+0x1e0>
 800518e:	2d05      	cmp	r5, #5
 8005190:	e7de      	b.n	8005150 <_scanf_float+0x1dc>
 8005192:	2d02      	cmp	r5, #2
 8005194:	f47f af21 	bne.w	8004fda <_scanf_float+0x66>
 8005198:	2503      	movs	r5, #3
 800519a:	e7b6      	b.n	800510a <_scanf_float+0x196>
 800519c:	2d06      	cmp	r5, #6
 800519e:	f47f af1c 	bne.w	8004fda <_scanf_float+0x66>
 80051a2:	2507      	movs	r5, #7
 80051a4:	e7b1      	b.n	800510a <_scanf_float+0x196>
 80051a6:	6822      	ldr	r2, [r4, #0]
 80051a8:	0591      	lsls	r1, r2, #22
 80051aa:	f57f af16 	bpl.w	8004fda <_scanf_float+0x66>
 80051ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80051b2:	6022      	str	r2, [r4, #0]
 80051b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80051b8:	e7a7      	b.n	800510a <_scanf_float+0x196>
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80051c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80051c4:	d006      	beq.n	80051d4 <_scanf_float+0x260>
 80051c6:	0550      	lsls	r0, r2, #21
 80051c8:	f57f af07 	bpl.w	8004fda <_scanf_float+0x66>
 80051cc:	f1b9 0f00 	cmp.w	r9, #0
 80051d0:	f000 80d9 	beq.w	8005386 <_scanf_float+0x412>
 80051d4:	0591      	lsls	r1, r2, #22
 80051d6:	bf58      	it	pl
 80051d8:	9902      	ldrpl	r1, [sp, #8]
 80051da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80051de:	bf58      	it	pl
 80051e0:	eba9 0101 	subpl.w	r1, r9, r1
 80051e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80051e8:	f04f 0900 	mov.w	r9, #0
 80051ec:	bf58      	it	pl
 80051ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051f2:	6022      	str	r2, [r4, #0]
 80051f4:	e789      	b.n	800510a <_scanf_float+0x196>
 80051f6:	f04f 0a03 	mov.w	sl, #3
 80051fa:	e786      	b.n	800510a <_scanf_float+0x196>
 80051fc:	4639      	mov	r1, r7
 80051fe:	4640      	mov	r0, r8
 8005200:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005204:	4798      	blx	r3
 8005206:	2800      	cmp	r0, #0
 8005208:	f43f aeda 	beq.w	8004fc0 <_scanf_float+0x4c>
 800520c:	e6e5      	b.n	8004fda <_scanf_float+0x66>
 800520e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005212:	463a      	mov	r2, r7
 8005214:	4640      	mov	r0, r8
 8005216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800521a:	4798      	blx	r3
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	3b01      	subs	r3, #1
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	e6e7      	b.n	8004ff4 <_scanf_float+0x80>
 8005224:	1e6b      	subs	r3, r5, #1
 8005226:	2b06      	cmp	r3, #6
 8005228:	d824      	bhi.n	8005274 <_scanf_float+0x300>
 800522a:	2d02      	cmp	r5, #2
 800522c:	d836      	bhi.n	800529c <_scanf_float+0x328>
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	429e      	cmp	r6, r3
 8005232:	f67f aee3 	bls.w	8004ffc <_scanf_float+0x88>
 8005236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800523a:	463a      	mov	r2, r7
 800523c:	4640      	mov	r0, r8
 800523e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005242:	4798      	blx	r3
 8005244:	6923      	ldr	r3, [r4, #16]
 8005246:	3b01      	subs	r3, #1
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	e7f0      	b.n	800522e <_scanf_float+0x2ba>
 800524c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005250:	463a      	mov	r2, r7
 8005252:	4640      	mov	r0, r8
 8005254:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005258:	4798      	blx	r3
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	3b01      	subs	r3, #1
 800525e:	6123      	str	r3, [r4, #16]
 8005260:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005264:	fa5f fa8a 	uxtb.w	sl, sl
 8005268:	f1ba 0f02 	cmp.w	sl, #2
 800526c:	d1ee      	bne.n	800524c <_scanf_float+0x2d8>
 800526e:	3d03      	subs	r5, #3
 8005270:	b2ed      	uxtb	r5, r5
 8005272:	1b76      	subs	r6, r6, r5
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	05da      	lsls	r2, r3, #23
 8005278:	d530      	bpl.n	80052dc <_scanf_float+0x368>
 800527a:	055b      	lsls	r3, r3, #21
 800527c:	d511      	bpl.n	80052a2 <_scanf_float+0x32e>
 800527e:	9b01      	ldr	r3, [sp, #4]
 8005280:	429e      	cmp	r6, r3
 8005282:	f67f aebb 	bls.w	8004ffc <_scanf_float+0x88>
 8005286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800528a:	463a      	mov	r2, r7
 800528c:	4640      	mov	r0, r8
 800528e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005292:	4798      	blx	r3
 8005294:	6923      	ldr	r3, [r4, #16]
 8005296:	3b01      	subs	r3, #1
 8005298:	6123      	str	r3, [r4, #16]
 800529a:	e7f0      	b.n	800527e <_scanf_float+0x30a>
 800529c:	46aa      	mov	sl, r5
 800529e:	46b3      	mov	fp, r6
 80052a0:	e7de      	b.n	8005260 <_scanf_float+0x2ec>
 80052a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	2965      	cmp	r1, #101	@ 0x65
 80052aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80052ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	d00c      	beq.n	80052d0 <_scanf_float+0x35c>
 80052b6:	2945      	cmp	r1, #69	@ 0x45
 80052b8:	d00a      	beq.n	80052d0 <_scanf_float+0x35c>
 80052ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052be:	463a      	mov	r2, r7
 80052c0:	4640      	mov	r0, r8
 80052c2:	4798      	blx	r3
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	1eb5      	subs	r5, r6, #2
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	463a      	mov	r2, r7
 80052d2:	4640      	mov	r0, r8
 80052d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052d8:	4798      	blx	r3
 80052da:	462e      	mov	r6, r5
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	f012 0210 	ands.w	r2, r2, #16
 80052e2:	d001      	beq.n	80052e8 <_scanf_float+0x374>
 80052e4:	2000      	movs	r0, #0
 80052e6:	e68a      	b.n	8004ffe <_scanf_float+0x8a>
 80052e8:	7032      	strb	r2, [r6, #0]
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f4:	d11c      	bne.n	8005330 <_scanf_float+0x3bc>
 80052f6:	9b02      	ldr	r3, [sp, #8]
 80052f8:	454b      	cmp	r3, r9
 80052fa:	eba3 0209 	sub.w	r2, r3, r9
 80052fe:	d123      	bne.n	8005348 <_scanf_float+0x3d4>
 8005300:	2200      	movs	r2, #0
 8005302:	4640      	mov	r0, r8
 8005304:	9901      	ldr	r1, [sp, #4]
 8005306:	f002 fc3f 	bl	8007b88 <_strtod_r>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	6825      	ldr	r5, [r4, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f015 0f02 	tst.w	r5, #2
 8005314:	4606      	mov	r6, r0
 8005316:	460f      	mov	r7, r1
 8005318:	f103 0204 	add.w	r2, r3, #4
 800531c:	d01f      	beq.n	800535e <_scanf_float+0x3ea>
 800531e:	9903      	ldr	r1, [sp, #12]
 8005320:	600a      	str	r2, [r1, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	e9c3 6700 	strd	r6, r7, [r3]
 8005328:	68e3      	ldr	r3, [r4, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60e3      	str	r3, [r4, #12]
 800532e:	e7d9      	b.n	80052e4 <_scanf_float+0x370>
 8005330:	9b04      	ldr	r3, [sp, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0e4      	beq.n	8005300 <_scanf_float+0x38c>
 8005336:	9905      	ldr	r1, [sp, #20]
 8005338:	230a      	movs	r3, #10
 800533a:	4640      	mov	r0, r8
 800533c:	3101      	adds	r1, #1
 800533e:	f002 fca3 	bl	8007c88 <_strtol_r>
 8005342:	9b04      	ldr	r3, [sp, #16]
 8005344:	9e05      	ldr	r6, [sp, #20]
 8005346:	1ac2      	subs	r2, r0, r3
 8005348:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800534c:	429e      	cmp	r6, r3
 800534e:	bf28      	it	cs
 8005350:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005354:	4630      	mov	r0, r6
 8005356:	490d      	ldr	r1, [pc, #52]	@ (800538c <_scanf_float+0x418>)
 8005358:	f000 f8f0 	bl	800553c <siprintf>
 800535c:	e7d0      	b.n	8005300 <_scanf_float+0x38c>
 800535e:	076d      	lsls	r5, r5, #29
 8005360:	d4dd      	bmi.n	800531e <_scanf_float+0x3aa>
 8005362:	9d03      	ldr	r5, [sp, #12]
 8005364:	602a      	str	r2, [r5, #0]
 8005366:	681d      	ldr	r5, [r3, #0]
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	f7fb fb4e 	bl	8000a0c <__aeabi_dcmpun>
 8005370:	b120      	cbz	r0, 800537c <_scanf_float+0x408>
 8005372:	4807      	ldr	r0, [pc, #28]	@ (8005390 <_scanf_float+0x41c>)
 8005374:	f000 fa12 	bl	800579c <nanf>
 8005378:	6028      	str	r0, [r5, #0]
 800537a:	e7d5      	b.n	8005328 <_scanf_float+0x3b4>
 800537c:	4630      	mov	r0, r6
 800537e:	4639      	mov	r1, r7
 8005380:	f7fb fba2 	bl	8000ac8 <__aeabi_d2f>
 8005384:	e7f8      	b.n	8005378 <_scanf_float+0x404>
 8005386:	f04f 0900 	mov.w	r9, #0
 800538a:	e62d      	b.n	8004fe8 <_scanf_float+0x74>
 800538c:	08009774 	.word	0x08009774
 8005390:	08009b28 	.word	0x08009b28

08005394 <std>:
 8005394:	2300      	movs	r3, #0
 8005396:	b510      	push	{r4, lr}
 8005398:	4604      	mov	r4, r0
 800539a:	e9c0 3300 	strd	r3, r3, [r0]
 800539e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053a2:	6083      	str	r3, [r0, #8]
 80053a4:	8181      	strh	r1, [r0, #12]
 80053a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80053a8:	81c2      	strh	r2, [r0, #14]
 80053aa:	6183      	str	r3, [r0, #24]
 80053ac:	4619      	mov	r1, r3
 80053ae:	2208      	movs	r2, #8
 80053b0:	305c      	adds	r0, #92	@ 0x5c
 80053b2:	f000 f952 	bl	800565a <memset>
 80053b6:	4b0d      	ldr	r3, [pc, #52]	@ (80053ec <std+0x58>)
 80053b8:	6224      	str	r4, [r4, #32]
 80053ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80053bc:	4b0c      	ldr	r3, [pc, #48]	@ (80053f0 <std+0x5c>)
 80053be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053c0:	4b0c      	ldr	r3, [pc, #48]	@ (80053f4 <std+0x60>)
 80053c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053c4:	4b0c      	ldr	r3, [pc, #48]	@ (80053f8 <std+0x64>)
 80053c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80053c8:	4b0c      	ldr	r3, [pc, #48]	@ (80053fc <std+0x68>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d006      	beq.n	80053dc <std+0x48>
 80053ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053d2:	4294      	cmp	r4, r2
 80053d4:	d002      	beq.n	80053dc <std+0x48>
 80053d6:	33d0      	adds	r3, #208	@ 0xd0
 80053d8:	429c      	cmp	r4, r3
 80053da:	d105      	bne.n	80053e8 <std+0x54>
 80053dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e4:	f000 b9c8 	b.w	8005778 <__retarget_lock_init_recursive>
 80053e8:	bd10      	pop	{r4, pc}
 80053ea:	bf00      	nop
 80053ec:	080055d1 	.word	0x080055d1
 80053f0:	080055f7 	.word	0x080055f7
 80053f4:	0800562f 	.word	0x0800562f
 80053f8:	08005653 	.word	0x08005653
 80053fc:	20000524 	.word	0x20000524

08005400 <stdio_exit_handler>:
 8005400:	4a02      	ldr	r2, [pc, #8]	@ (800540c <stdio_exit_handler+0xc>)
 8005402:	4903      	ldr	r1, [pc, #12]	@ (8005410 <stdio_exit_handler+0x10>)
 8005404:	4803      	ldr	r0, [pc, #12]	@ (8005414 <stdio_exit_handler+0x14>)
 8005406:	f000 b869 	b.w	80054dc <_fwalk_sglue>
 800540a:	bf00      	nop
 800540c:	20000024 	.word	0x20000024
 8005410:	080088e9 	.word	0x080088e9
 8005414:	20000034 	.word	0x20000034

08005418 <cleanup_stdio>:
 8005418:	6841      	ldr	r1, [r0, #4]
 800541a:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <cleanup_stdio+0x34>)
 800541c:	b510      	push	{r4, lr}
 800541e:	4299      	cmp	r1, r3
 8005420:	4604      	mov	r4, r0
 8005422:	d001      	beq.n	8005428 <cleanup_stdio+0x10>
 8005424:	f003 fa60 	bl	80088e8 <_fflush_r>
 8005428:	68a1      	ldr	r1, [r4, #8]
 800542a:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <cleanup_stdio+0x38>)
 800542c:	4299      	cmp	r1, r3
 800542e:	d002      	beq.n	8005436 <cleanup_stdio+0x1e>
 8005430:	4620      	mov	r0, r4
 8005432:	f003 fa59 	bl	80088e8 <_fflush_r>
 8005436:	68e1      	ldr	r1, [r4, #12]
 8005438:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <cleanup_stdio+0x3c>)
 800543a:	4299      	cmp	r1, r3
 800543c:	d004      	beq.n	8005448 <cleanup_stdio+0x30>
 800543e:	4620      	mov	r0, r4
 8005440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005444:	f003 ba50 	b.w	80088e8 <_fflush_r>
 8005448:	bd10      	pop	{r4, pc}
 800544a:	bf00      	nop
 800544c:	20000524 	.word	0x20000524
 8005450:	2000058c 	.word	0x2000058c
 8005454:	200005f4 	.word	0x200005f4

08005458 <global_stdio_init.part.0>:
 8005458:	b510      	push	{r4, lr}
 800545a:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <global_stdio_init.part.0+0x30>)
 800545c:	4c0b      	ldr	r4, [pc, #44]	@ (800548c <global_stdio_init.part.0+0x34>)
 800545e:	4a0c      	ldr	r2, [pc, #48]	@ (8005490 <global_stdio_init.part.0+0x38>)
 8005460:	4620      	mov	r0, r4
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	2104      	movs	r1, #4
 8005466:	2200      	movs	r2, #0
 8005468:	f7ff ff94 	bl	8005394 <std>
 800546c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005470:	2201      	movs	r2, #1
 8005472:	2109      	movs	r1, #9
 8005474:	f7ff ff8e 	bl	8005394 <std>
 8005478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800547c:	2202      	movs	r2, #2
 800547e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005482:	2112      	movs	r1, #18
 8005484:	f7ff bf86 	b.w	8005394 <std>
 8005488:	2000065c 	.word	0x2000065c
 800548c:	20000524 	.word	0x20000524
 8005490:	08005401 	.word	0x08005401

08005494 <__sfp_lock_acquire>:
 8005494:	4801      	ldr	r0, [pc, #4]	@ (800549c <__sfp_lock_acquire+0x8>)
 8005496:	f000 b970 	b.w	800577a <__retarget_lock_acquire_recursive>
 800549a:	bf00      	nop
 800549c:	20000665 	.word	0x20000665

080054a0 <__sfp_lock_release>:
 80054a0:	4801      	ldr	r0, [pc, #4]	@ (80054a8 <__sfp_lock_release+0x8>)
 80054a2:	f000 b96b 	b.w	800577c <__retarget_lock_release_recursive>
 80054a6:	bf00      	nop
 80054a8:	20000665 	.word	0x20000665

080054ac <__sinit>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4604      	mov	r4, r0
 80054b0:	f7ff fff0 	bl	8005494 <__sfp_lock_acquire>
 80054b4:	6a23      	ldr	r3, [r4, #32]
 80054b6:	b11b      	cbz	r3, 80054c0 <__sinit+0x14>
 80054b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054bc:	f7ff bff0 	b.w	80054a0 <__sfp_lock_release>
 80054c0:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <__sinit+0x28>)
 80054c2:	6223      	str	r3, [r4, #32]
 80054c4:	4b04      	ldr	r3, [pc, #16]	@ (80054d8 <__sinit+0x2c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f5      	bne.n	80054b8 <__sinit+0xc>
 80054cc:	f7ff ffc4 	bl	8005458 <global_stdio_init.part.0>
 80054d0:	e7f2      	b.n	80054b8 <__sinit+0xc>
 80054d2:	bf00      	nop
 80054d4:	08005419 	.word	0x08005419
 80054d8:	2000065c 	.word	0x2000065c

080054dc <_fwalk_sglue>:
 80054dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e0:	4607      	mov	r7, r0
 80054e2:	4688      	mov	r8, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	2600      	movs	r6, #0
 80054e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054ec:	f1b9 0901 	subs.w	r9, r9, #1
 80054f0:	d505      	bpl.n	80054fe <_fwalk_sglue+0x22>
 80054f2:	6824      	ldr	r4, [r4, #0]
 80054f4:	2c00      	cmp	r4, #0
 80054f6:	d1f7      	bne.n	80054e8 <_fwalk_sglue+0xc>
 80054f8:	4630      	mov	r0, r6
 80054fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d907      	bls.n	8005514 <_fwalk_sglue+0x38>
 8005504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005508:	3301      	adds	r3, #1
 800550a:	d003      	beq.n	8005514 <_fwalk_sglue+0x38>
 800550c:	4629      	mov	r1, r5
 800550e:	4638      	mov	r0, r7
 8005510:	47c0      	blx	r8
 8005512:	4306      	orrs	r6, r0
 8005514:	3568      	adds	r5, #104	@ 0x68
 8005516:	e7e9      	b.n	80054ec <_fwalk_sglue+0x10>

08005518 <iprintf>:
 8005518:	b40f      	push	{r0, r1, r2, r3}
 800551a:	b507      	push	{r0, r1, r2, lr}
 800551c:	4906      	ldr	r1, [pc, #24]	@ (8005538 <iprintf+0x20>)
 800551e:	ab04      	add	r3, sp, #16
 8005520:	6808      	ldr	r0, [r1, #0]
 8005522:	f853 2b04 	ldr.w	r2, [r3], #4
 8005526:	6881      	ldr	r1, [r0, #8]
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	f002 fef9 	bl	8008320 <_vfiprintf_r>
 800552e:	b003      	add	sp, #12
 8005530:	f85d eb04 	ldr.w	lr, [sp], #4
 8005534:	b004      	add	sp, #16
 8005536:	4770      	bx	lr
 8005538:	20000030 	.word	0x20000030

0800553c <siprintf>:
 800553c:	b40e      	push	{r1, r2, r3}
 800553e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005542:	b500      	push	{lr}
 8005544:	b09c      	sub	sp, #112	@ 0x70
 8005546:	ab1d      	add	r3, sp, #116	@ 0x74
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	9107      	str	r1, [sp, #28]
 800554e:	9104      	str	r1, [sp, #16]
 8005550:	4808      	ldr	r0, [pc, #32]	@ (8005574 <siprintf+0x38>)
 8005552:	4909      	ldr	r1, [pc, #36]	@ (8005578 <siprintf+0x3c>)
 8005554:	f853 2b04 	ldr.w	r2, [r3], #4
 8005558:	9105      	str	r1, [sp, #20]
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	a902      	add	r1, sp, #8
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	f002 fbf0 	bl	8007d44 <_svfiprintf_r>
 8005564:	2200      	movs	r2, #0
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	b01c      	add	sp, #112	@ 0x70
 800556c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005570:	b003      	add	sp, #12
 8005572:	4770      	bx	lr
 8005574:	20000030 	.word	0x20000030
 8005578:	ffff0208 	.word	0xffff0208

0800557c <siscanf>:
 800557c:	b40e      	push	{r1, r2, r3}
 800557e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005582:	b530      	push	{r4, r5, lr}
 8005584:	b09c      	sub	sp, #112	@ 0x70
 8005586:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005588:	f854 5b04 	ldr.w	r5, [r4], #4
 800558c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005590:	9002      	str	r0, [sp, #8]
 8005592:	9006      	str	r0, [sp, #24]
 8005594:	f7fa fddc 	bl	8000150 <strlen>
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <siscanf+0x4c>)
 800559a:	9003      	str	r0, [sp, #12]
 800559c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800559e:	2300      	movs	r3, #0
 80055a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055a2:	9314      	str	r3, [sp, #80]	@ 0x50
 80055a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055a8:	9007      	str	r0, [sp, #28]
 80055aa:	4808      	ldr	r0, [pc, #32]	@ (80055cc <siscanf+0x50>)
 80055ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055b0:	462a      	mov	r2, r5
 80055b2:	4623      	mov	r3, r4
 80055b4:	a902      	add	r1, sp, #8
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	9401      	str	r4, [sp, #4]
 80055ba:	f002 fd17 	bl	8007fec <__ssvfiscanf_r>
 80055be:	b01c      	add	sp, #112	@ 0x70
 80055c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055c4:	b003      	add	sp, #12
 80055c6:	4770      	bx	lr
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	20000030 	.word	0x20000030

080055d0 <__sread>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	460c      	mov	r4, r1
 80055d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d8:	f000 f880 	bl	80056dc <_read_r>
 80055dc:	2800      	cmp	r0, #0
 80055de:	bfab      	itete	ge
 80055e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055e2:	89a3      	ldrhlt	r3, [r4, #12]
 80055e4:	181b      	addge	r3, r3, r0
 80055e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055ea:	bfac      	ite	ge
 80055ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055ee:	81a3      	strhlt	r3, [r4, #12]
 80055f0:	bd10      	pop	{r4, pc}

080055f2 <__seofread>:
 80055f2:	2000      	movs	r0, #0
 80055f4:	4770      	bx	lr

080055f6 <__swrite>:
 80055f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fa:	461f      	mov	r7, r3
 80055fc:	898b      	ldrh	r3, [r1, #12]
 80055fe:	4605      	mov	r5, r0
 8005600:	05db      	lsls	r3, r3, #23
 8005602:	460c      	mov	r4, r1
 8005604:	4616      	mov	r6, r2
 8005606:	d505      	bpl.n	8005614 <__swrite+0x1e>
 8005608:	2302      	movs	r3, #2
 800560a:	2200      	movs	r2, #0
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	f000 f852 	bl	80056b8 <_lseek_r>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	4632      	mov	r2, r6
 8005618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	4628      	mov	r0, r5
 8005620:	463b      	mov	r3, r7
 8005622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	f000 b869 	b.w	8005700 <_write_r>

0800562e <__sseek>:
 800562e:	b510      	push	{r4, lr}
 8005630:	460c      	mov	r4, r1
 8005632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005636:	f000 f83f 	bl	80056b8 <_lseek_r>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	bf15      	itete	ne
 8005640:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005642:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005646:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800564a:	81a3      	strheq	r3, [r4, #12]
 800564c:	bf18      	it	ne
 800564e:	81a3      	strhne	r3, [r4, #12]
 8005650:	bd10      	pop	{r4, pc}

08005652 <__sclose>:
 8005652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005656:	f000 b81f 	b.w	8005698 <_close_r>

0800565a <memset>:
 800565a:	4603      	mov	r3, r0
 800565c:	4402      	add	r2, r0
 800565e:	4293      	cmp	r3, r2
 8005660:	d100      	bne.n	8005664 <memset+0xa>
 8005662:	4770      	bx	lr
 8005664:	f803 1b01 	strb.w	r1, [r3], #1
 8005668:	e7f9      	b.n	800565e <memset+0x4>

0800566a <strncmp>:
 800566a:	b510      	push	{r4, lr}
 800566c:	b16a      	cbz	r2, 800568a <strncmp+0x20>
 800566e:	3901      	subs	r1, #1
 8005670:	1884      	adds	r4, r0, r2
 8005672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005676:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800567a:	429a      	cmp	r2, r3
 800567c:	d103      	bne.n	8005686 <strncmp+0x1c>
 800567e:	42a0      	cmp	r0, r4
 8005680:	d001      	beq.n	8005686 <strncmp+0x1c>
 8005682:	2a00      	cmp	r2, #0
 8005684:	d1f5      	bne.n	8005672 <strncmp+0x8>
 8005686:	1ad0      	subs	r0, r2, r3
 8005688:	bd10      	pop	{r4, pc}
 800568a:	4610      	mov	r0, r2
 800568c:	e7fc      	b.n	8005688 <strncmp+0x1e>
	...

08005690 <_localeconv_r>:
 8005690:	4800      	ldr	r0, [pc, #0]	@ (8005694 <_localeconv_r+0x4>)
 8005692:	4770      	bx	lr
 8005694:	20000170 	.word	0x20000170

08005698 <_close_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	2300      	movs	r3, #0
 800569c:	4d05      	ldr	r5, [pc, #20]	@ (80056b4 <_close_r+0x1c>)
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7fc fd51 	bl	800214a <_close>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_close_r+0x1a>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_close_r+0x1a>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20000660 	.word	0x20000660

080056b8 <_lseek_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4604      	mov	r4, r0
 80056bc:	4608      	mov	r0, r1
 80056be:	4611      	mov	r1, r2
 80056c0:	2200      	movs	r2, #0
 80056c2:	4d05      	ldr	r5, [pc, #20]	@ (80056d8 <_lseek_r+0x20>)
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f7fc fd63 	bl	8002192 <_lseek>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_lseek_r+0x1e>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_lseek_r+0x1e>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20000660 	.word	0x20000660

080056dc <_read_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4604      	mov	r4, r0
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	2200      	movs	r2, #0
 80056e6:	4d05      	ldr	r5, [pc, #20]	@ (80056fc <_read_r+0x20>)
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f7fc fd10 	bl	8002110 <_read>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_read_r+0x1e>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_read_r+0x1e>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000660 	.word	0x20000660

08005700 <_write_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4604      	mov	r4, r0
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	2200      	movs	r2, #0
 800570a:	4d05      	ldr	r5, [pc, #20]	@ (8005720 <_write_r+0x20>)
 800570c:	602a      	str	r2, [r5, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f7fb ff00 	bl	8001514 <_write>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_write_r+0x1e>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_write_r+0x1e>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	20000660 	.word	0x20000660

08005724 <__errno>:
 8005724:	4b01      	ldr	r3, [pc, #4]	@ (800572c <__errno+0x8>)
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000030 	.word	0x20000030

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	2600      	movs	r6, #0
 8005734:	4d0c      	ldr	r5, [pc, #48]	@ (8005768 <__libc_init_array+0x38>)
 8005736:	4c0d      	ldr	r4, [pc, #52]	@ (800576c <__libc_init_array+0x3c>)
 8005738:	1b64      	subs	r4, r4, r5
 800573a:	10a4      	asrs	r4, r4, #2
 800573c:	42a6      	cmp	r6, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	f003 ff52 	bl	80095e8 <_init>
 8005744:	2600      	movs	r6, #0
 8005746:	4d0a      	ldr	r5, [pc, #40]	@ (8005770 <__libc_init_array+0x40>)
 8005748:	4c0a      	ldr	r4, [pc, #40]	@ (8005774 <__libc_init_array+0x44>)
 800574a:	1b64      	subs	r4, r4, r5
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	42a6      	cmp	r6, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f855 3b04 	ldr.w	r3, [r5], #4
 8005758:	4798      	blx	r3
 800575a:	3601      	adds	r6, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005762:	4798      	blx	r3
 8005764:	3601      	adds	r6, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	08009b94 	.word	0x08009b94
 800576c:	08009b94 	.word	0x08009b94
 8005770:	08009b94 	.word	0x08009b94
 8005774:	08009b98 	.word	0x08009b98

08005778 <__retarget_lock_init_recursive>:
 8005778:	4770      	bx	lr

0800577a <__retarget_lock_acquire_recursive>:
 800577a:	4770      	bx	lr

0800577c <__retarget_lock_release_recursive>:
 800577c:	4770      	bx	lr

0800577e <memchr>:
 800577e:	4603      	mov	r3, r0
 8005780:	b510      	push	{r4, lr}
 8005782:	b2c9      	uxtb	r1, r1
 8005784:	4402      	add	r2, r0
 8005786:	4293      	cmp	r3, r2
 8005788:	4618      	mov	r0, r3
 800578a:	d101      	bne.n	8005790 <memchr+0x12>
 800578c:	2000      	movs	r0, #0
 800578e:	e003      	b.n	8005798 <memchr+0x1a>
 8005790:	7804      	ldrb	r4, [r0, #0]
 8005792:	3301      	adds	r3, #1
 8005794:	428c      	cmp	r4, r1
 8005796:	d1f6      	bne.n	8005786 <memchr+0x8>
 8005798:	bd10      	pop	{r4, pc}
	...

0800579c <nanf>:
 800579c:	4800      	ldr	r0, [pc, #0]	@ (80057a0 <nanf+0x4>)
 800579e:	4770      	bx	lr
 80057a0:	7fc00000 	.word	0x7fc00000

080057a4 <quorem>:
 80057a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a8:	6903      	ldr	r3, [r0, #16]
 80057aa:	690c      	ldr	r4, [r1, #16]
 80057ac:	4607      	mov	r7, r0
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	db7e      	blt.n	80058b0 <quorem+0x10c>
 80057b2:	3c01      	subs	r4, #1
 80057b4:	00a3      	lsls	r3, r4, #2
 80057b6:	f100 0514 	add.w	r5, r0, #20
 80057ba:	f101 0814 	add.w	r8, r1, #20
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ce:	3301      	adds	r3, #1
 80057d0:	429a      	cmp	r2, r3
 80057d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80057d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057da:	d32e      	bcc.n	800583a <quorem+0x96>
 80057dc:	f04f 0a00 	mov.w	sl, #0
 80057e0:	46c4      	mov	ip, r8
 80057e2:	46ae      	mov	lr, r5
 80057e4:	46d3      	mov	fp, sl
 80057e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80057ea:	b298      	uxth	r0, r3
 80057ec:	fb06 a000 	mla	r0, r6, r0, sl
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	0c02      	lsrs	r2, r0, #16
 80057f4:	fb06 2303 	mla	r3, r6, r3, r2
 80057f8:	f8de 2000 	ldr.w	r2, [lr]
 80057fc:	b280      	uxth	r0, r0
 80057fe:	b292      	uxth	r2, r2
 8005800:	1a12      	subs	r2, r2, r0
 8005802:	445a      	add	r2, fp
 8005804:	f8de 0000 	ldr.w	r0, [lr]
 8005808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800580c:	b29b      	uxth	r3, r3
 800580e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005812:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005816:	b292      	uxth	r2, r2
 8005818:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800581c:	45e1      	cmp	r9, ip
 800581e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005822:	f84e 2b04 	str.w	r2, [lr], #4
 8005826:	d2de      	bcs.n	80057e6 <quorem+0x42>
 8005828:	9b00      	ldr	r3, [sp, #0]
 800582a:	58eb      	ldr	r3, [r5, r3]
 800582c:	b92b      	cbnz	r3, 800583a <quorem+0x96>
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	3b04      	subs	r3, #4
 8005832:	429d      	cmp	r5, r3
 8005834:	461a      	mov	r2, r3
 8005836:	d32f      	bcc.n	8005898 <quorem+0xf4>
 8005838:	613c      	str	r4, [r7, #16]
 800583a:	4638      	mov	r0, r7
 800583c:	f001 f9c4 	bl	8006bc8 <__mcmp>
 8005840:	2800      	cmp	r0, #0
 8005842:	db25      	blt.n	8005890 <quorem+0xec>
 8005844:	4629      	mov	r1, r5
 8005846:	2000      	movs	r0, #0
 8005848:	f858 2b04 	ldr.w	r2, [r8], #4
 800584c:	f8d1 c000 	ldr.w	ip, [r1]
 8005850:	fa1f fe82 	uxth.w	lr, r2
 8005854:	fa1f f38c 	uxth.w	r3, ip
 8005858:	eba3 030e 	sub.w	r3, r3, lr
 800585c:	4403      	add	r3, r0
 800585e:	0c12      	lsrs	r2, r2, #16
 8005860:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005864:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005868:	b29b      	uxth	r3, r3
 800586a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800586e:	45c1      	cmp	r9, r8
 8005870:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005874:	f841 3b04 	str.w	r3, [r1], #4
 8005878:	d2e6      	bcs.n	8005848 <quorem+0xa4>
 800587a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800587e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005882:	b922      	cbnz	r2, 800588e <quorem+0xea>
 8005884:	3b04      	subs	r3, #4
 8005886:	429d      	cmp	r5, r3
 8005888:	461a      	mov	r2, r3
 800588a:	d30b      	bcc.n	80058a4 <quorem+0x100>
 800588c:	613c      	str	r4, [r7, #16]
 800588e:	3601      	adds	r6, #1
 8005890:	4630      	mov	r0, r6
 8005892:	b003      	add	sp, #12
 8005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	3b04      	subs	r3, #4
 800589c:	2a00      	cmp	r2, #0
 800589e:	d1cb      	bne.n	8005838 <quorem+0x94>
 80058a0:	3c01      	subs	r4, #1
 80058a2:	e7c6      	b.n	8005832 <quorem+0x8e>
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	3b04      	subs	r3, #4
 80058a8:	2a00      	cmp	r2, #0
 80058aa:	d1ef      	bne.n	800588c <quorem+0xe8>
 80058ac:	3c01      	subs	r4, #1
 80058ae:	e7ea      	b.n	8005886 <quorem+0xe2>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e7ee      	b.n	8005892 <quorem+0xee>
 80058b4:	0000      	movs	r0, r0
	...

080058b8 <_dtoa_r>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	4614      	mov	r4, r2
 80058be:	461d      	mov	r5, r3
 80058c0:	69c7      	ldr	r7, [r0, #28]
 80058c2:	b097      	sub	sp, #92	@ 0x5c
 80058c4:	4683      	mov	fp, r0
 80058c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80058ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80058cc:	b97f      	cbnz	r7, 80058ee <_dtoa_r+0x36>
 80058ce:	2010      	movs	r0, #16
 80058d0:	f000 fe02 	bl	80064d8 <malloc>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80058da:	b920      	cbnz	r0, 80058e6 <_dtoa_r+0x2e>
 80058dc:	21ef      	movs	r1, #239	@ 0xef
 80058de:	4ba8      	ldr	r3, [pc, #672]	@ (8005b80 <_dtoa_r+0x2c8>)
 80058e0:	48a8      	ldr	r0, [pc, #672]	@ (8005b84 <_dtoa_r+0x2cc>)
 80058e2:	f003 f96d 	bl	8008bc0 <__assert_func>
 80058e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80058ea:	6007      	str	r7, [r0, #0]
 80058ec:	60c7      	str	r7, [r0, #12]
 80058ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80058f2:	6819      	ldr	r1, [r3, #0]
 80058f4:	b159      	cbz	r1, 800590e <_dtoa_r+0x56>
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	2301      	movs	r3, #1
 80058fa:	4093      	lsls	r3, r2
 80058fc:	604a      	str	r2, [r1, #4]
 80058fe:	608b      	str	r3, [r1, #8]
 8005900:	4658      	mov	r0, fp
 8005902:	f000 fedf 	bl	80066c4 <_Bfree>
 8005906:	2200      	movs	r2, #0
 8005908:	f8db 301c 	ldr.w	r3, [fp, #28]
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	1e2b      	subs	r3, r5, #0
 8005910:	bfaf      	iteee	ge
 8005912:	2300      	movge	r3, #0
 8005914:	2201      	movlt	r2, #1
 8005916:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800591a:	9303      	strlt	r3, [sp, #12]
 800591c:	bfa8      	it	ge
 800591e:	6033      	strge	r3, [r6, #0]
 8005920:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005924:	4b98      	ldr	r3, [pc, #608]	@ (8005b88 <_dtoa_r+0x2d0>)
 8005926:	bfb8      	it	lt
 8005928:	6032      	strlt	r2, [r6, #0]
 800592a:	ea33 0308 	bics.w	r3, r3, r8
 800592e:	d112      	bne.n	8005956 <_dtoa_r+0x9e>
 8005930:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005934:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800593c:	4323      	orrs	r3, r4
 800593e:	f000 8550 	beq.w	80063e2 <_dtoa_r+0xb2a>
 8005942:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005944:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005b8c <_dtoa_r+0x2d4>
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8552 	beq.w	80063f2 <_dtoa_r+0xb3a>
 800594e:	f10a 0303 	add.w	r3, sl, #3
 8005952:	f000 bd4c 	b.w	80063ee <_dtoa_r+0xb36>
 8005956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800595a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800595e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005962:	2200      	movs	r2, #0
 8005964:	2300      	movs	r3, #0
 8005966:	f7fb f81f 	bl	80009a8 <__aeabi_dcmpeq>
 800596a:	4607      	mov	r7, r0
 800596c:	b158      	cbz	r0, 8005986 <_dtoa_r+0xce>
 800596e:	2301      	movs	r3, #1
 8005970:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005976:	b113      	cbz	r3, 800597e <_dtoa_r+0xc6>
 8005978:	4b85      	ldr	r3, [pc, #532]	@ (8005b90 <_dtoa_r+0x2d8>)
 800597a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005b94 <_dtoa_r+0x2dc>
 8005982:	f000 bd36 	b.w	80063f2 <_dtoa_r+0xb3a>
 8005986:	ab14      	add	r3, sp, #80	@ 0x50
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	ab15      	add	r3, sp, #84	@ 0x54
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	4658      	mov	r0, fp
 8005990:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005994:	f001 fa30 	bl	8006df8 <__d2b>
 8005998:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800599c:	4681      	mov	r9, r0
 800599e:	2e00      	cmp	r6, #0
 80059a0:	d077      	beq.n	8005a92 <_dtoa_r+0x1da>
 80059a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80059ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80059b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80059b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80059ba:	4619      	mov	r1, r3
 80059bc:	2200      	movs	r2, #0
 80059be:	4b76      	ldr	r3, [pc, #472]	@ (8005b98 <_dtoa_r+0x2e0>)
 80059c0:	f7fa fbd2 	bl	8000168 <__aeabi_dsub>
 80059c4:	a368      	add	r3, pc, #416	@ (adr r3, 8005b68 <_dtoa_r+0x2b0>)
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f7fa fd85 	bl	80004d8 <__aeabi_dmul>
 80059ce:	a368      	add	r3, pc, #416	@ (adr r3, 8005b70 <_dtoa_r+0x2b8>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fa fbca 	bl	800016c <__adddf3>
 80059d8:	4604      	mov	r4, r0
 80059da:	4630      	mov	r0, r6
 80059dc:	460d      	mov	r5, r1
 80059de:	f7fa fd11 	bl	8000404 <__aeabi_i2d>
 80059e2:	a365      	add	r3, pc, #404	@ (adr r3, 8005b78 <_dtoa_r+0x2c0>)
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f7fa fd76 	bl	80004d8 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fa fbba 	bl	800016c <__adddf3>
 80059f8:	4604      	mov	r4, r0
 80059fa:	460d      	mov	r5, r1
 80059fc:	f7fb f81c 	bl	8000a38 <__aeabi_d2iz>
 8005a00:	2200      	movs	r2, #0
 8005a02:	4607      	mov	r7, r0
 8005a04:	2300      	movs	r3, #0
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f7fa ffd7 	bl	80009bc <__aeabi_dcmplt>
 8005a0e:	b140      	cbz	r0, 8005a22 <_dtoa_r+0x16a>
 8005a10:	4638      	mov	r0, r7
 8005a12:	f7fa fcf7 	bl	8000404 <__aeabi_i2d>
 8005a16:	4622      	mov	r2, r4
 8005a18:	462b      	mov	r3, r5
 8005a1a:	f7fa ffc5 	bl	80009a8 <__aeabi_dcmpeq>
 8005a1e:	b900      	cbnz	r0, 8005a22 <_dtoa_r+0x16a>
 8005a20:	3f01      	subs	r7, #1
 8005a22:	2f16      	cmp	r7, #22
 8005a24:	d853      	bhi.n	8005ace <_dtoa_r+0x216>
 8005a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8005b9c <_dtoa_r+0x2e4>)
 8005a2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa ffc2 	bl	80009bc <__aeabi_dcmplt>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d04a      	beq.n	8005ad2 <_dtoa_r+0x21a>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	3f01      	subs	r7, #1
 8005a40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a44:	1b9b      	subs	r3, r3, r6
 8005a46:	1e5a      	subs	r2, r3, #1
 8005a48:	bf46      	itte	mi
 8005a4a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005a4e:	2300      	movmi	r3, #0
 8005a50:	f04f 0800 	movpl.w	r8, #0
 8005a54:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a56:	bf48      	it	mi
 8005a58:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005a5a:	2f00      	cmp	r7, #0
 8005a5c:	db3b      	blt.n	8005ad6 <_dtoa_r+0x21e>
 8005a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a60:	970e      	str	r7, [sp, #56]	@ 0x38
 8005a62:	443b      	add	r3, r7
 8005a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a66:	2300      	movs	r3, #0
 8005a68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a6c:	2b09      	cmp	r3, #9
 8005a6e:	d866      	bhi.n	8005b3e <_dtoa_r+0x286>
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	bfc4      	itt	gt
 8005a74:	3b04      	subgt	r3, #4
 8005a76:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005a78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a7a:	bfc8      	it	gt
 8005a7c:	2400      	movgt	r4, #0
 8005a7e:	f1a3 0302 	sub.w	r3, r3, #2
 8005a82:	bfd8      	it	le
 8005a84:	2401      	movle	r4, #1
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d864      	bhi.n	8005b54 <_dtoa_r+0x29c>
 8005a8a:	e8df f003 	tbb	[pc, r3]
 8005a8e:	382b      	.short	0x382b
 8005a90:	5636      	.short	0x5636
 8005a92:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005a96:	441e      	add	r6, r3
 8005a98:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	bfc1      	itttt	gt
 8005aa0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005aa4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005aa8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005aac:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ab0:	bfd6      	itet	le
 8005ab2:	f1c3 0320 	rsble	r3, r3, #32
 8005ab6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005aba:	fa04 f003 	lslle.w	r0, r4, r3
 8005abe:	f7fa fc91 	bl	80003e4 <__aeabi_ui2d>
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005ac8:	3e01      	subs	r6, #1
 8005aca:	9212      	str	r2, [sp, #72]	@ 0x48
 8005acc:	e775      	b.n	80059ba <_dtoa_r+0x102>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e7b6      	b.n	8005a40 <_dtoa_r+0x188>
 8005ad2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005ad4:	e7b5      	b.n	8005a42 <_dtoa_r+0x18a>
 8005ad6:	427b      	negs	r3, r7
 8005ad8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ada:	2300      	movs	r3, #0
 8005adc:	eba8 0807 	sub.w	r8, r8, r7
 8005ae0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ae2:	e7c2      	b.n	8005a6a <_dtoa_r+0x1b2>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ae8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dc35      	bgt.n	8005b5a <_dtoa_r+0x2a2>
 8005aee:	2301      	movs	r3, #1
 8005af0:	461a      	mov	r2, r3
 8005af2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005af6:	9221      	str	r2, [sp, #132]	@ 0x84
 8005af8:	e00b      	b.n	8005b12 <_dtoa_r+0x25a>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e7f3      	b.n	8005ae6 <_dtoa_r+0x22e>
 8005afe:	2300      	movs	r3, #0
 8005b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	9308      	str	r3, [sp, #32]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	9307      	str	r3, [sp, #28]
 8005b0e:	bfb8      	it	lt
 8005b10:	2301      	movlt	r3, #1
 8005b12:	2100      	movs	r1, #0
 8005b14:	2204      	movs	r2, #4
 8005b16:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b1a:	f102 0514 	add.w	r5, r2, #20
 8005b1e:	429d      	cmp	r5, r3
 8005b20:	d91f      	bls.n	8005b62 <_dtoa_r+0x2aa>
 8005b22:	6041      	str	r1, [r0, #4]
 8005b24:	4658      	mov	r0, fp
 8005b26:	f000 fd8d 	bl	8006644 <_Balloc>
 8005b2a:	4682      	mov	sl, r0
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d139      	bne.n	8005ba4 <_dtoa_r+0x2ec>
 8005b30:	4602      	mov	r2, r0
 8005b32:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba0 <_dtoa_r+0x2e8>)
 8005b38:	e6d2      	b.n	80058e0 <_dtoa_r+0x28>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7e0      	b.n	8005b00 <_dtoa_r+0x248>
 8005b3e:	2401      	movs	r4, #1
 8005b40:	2300      	movs	r3, #0
 8005b42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b44:	9320      	str	r3, [sp, #128]	@ 0x80
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005b50:	2312      	movs	r3, #18
 8005b52:	e7d0      	b.n	8005af6 <_dtoa_r+0x23e>
 8005b54:	2301      	movs	r3, #1
 8005b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b58:	e7f5      	b.n	8005b46 <_dtoa_r+0x28e>
 8005b5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005b60:	e7d7      	b.n	8005b12 <_dtoa_r+0x25a>
 8005b62:	3101      	adds	r1, #1
 8005b64:	0052      	lsls	r2, r2, #1
 8005b66:	e7d8      	b.n	8005b1a <_dtoa_r+0x262>
 8005b68:	636f4361 	.word	0x636f4361
 8005b6c:	3fd287a7 	.word	0x3fd287a7
 8005b70:	8b60c8b3 	.word	0x8b60c8b3
 8005b74:	3fc68a28 	.word	0x3fc68a28
 8005b78:	509f79fb 	.word	0x509f79fb
 8005b7c:	3fd34413 	.word	0x3fd34413
 8005b80:	08009786 	.word	0x08009786
 8005b84:	0800979d 	.word	0x0800979d
 8005b88:	7ff00000 	.word	0x7ff00000
 8005b8c:	08009782 	.word	0x08009782
 8005b90:	08009ae1 	.word	0x08009ae1
 8005b94:	08009ae0 	.word	0x08009ae0
 8005b98:	3ff80000 	.word	0x3ff80000
 8005b9c:	08009898 	.word	0x08009898
 8005ba0:	080097f5 	.word	0x080097f5
 8005ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ba8:	6018      	str	r0, [r3, #0]
 8005baa:	9b07      	ldr	r3, [sp, #28]
 8005bac:	2b0e      	cmp	r3, #14
 8005bae:	f200 80a4 	bhi.w	8005cfa <_dtoa_r+0x442>
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	f000 80a1 	beq.w	8005cfa <_dtoa_r+0x442>
 8005bb8:	2f00      	cmp	r7, #0
 8005bba:	dd33      	ble.n	8005c24 <_dtoa_r+0x36c>
 8005bbc:	4b86      	ldr	r3, [pc, #536]	@ (8005dd8 <_dtoa_r+0x520>)
 8005bbe:	f007 020f 	and.w	r2, r7, #15
 8005bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bc6:	05f8      	lsls	r0, r7, #23
 8005bc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bcc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005bd4:	d516      	bpl.n	8005c04 <_dtoa_r+0x34c>
 8005bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bda:	4b80      	ldr	r3, [pc, #512]	@ (8005ddc <_dtoa_r+0x524>)
 8005bdc:	2603      	movs	r6, #3
 8005bde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005be2:	f7fa fda3 	bl	800072c <__aeabi_ddiv>
 8005be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bea:	f004 040f 	and.w	r4, r4, #15
 8005bee:	4d7b      	ldr	r5, [pc, #492]	@ (8005ddc <_dtoa_r+0x524>)
 8005bf0:	b954      	cbnz	r4, 8005c08 <_dtoa_r+0x350>
 8005bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bfa:	f7fa fd97 	bl	800072c <__aeabi_ddiv>
 8005bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c02:	e028      	b.n	8005c56 <_dtoa_r+0x39e>
 8005c04:	2602      	movs	r6, #2
 8005c06:	e7f2      	b.n	8005bee <_dtoa_r+0x336>
 8005c08:	07e1      	lsls	r1, r4, #31
 8005c0a:	d508      	bpl.n	8005c1e <_dtoa_r+0x366>
 8005c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c14:	f7fa fc60 	bl	80004d8 <__aeabi_dmul>
 8005c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	1064      	asrs	r4, r4, #1
 8005c20:	3508      	adds	r5, #8
 8005c22:	e7e5      	b.n	8005bf0 <_dtoa_r+0x338>
 8005c24:	f000 80d2 	beq.w	8005dcc <_dtoa_r+0x514>
 8005c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c2c:	427c      	negs	r4, r7
 8005c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005dd8 <_dtoa_r+0x520>)
 8005c30:	f004 020f 	and.w	r2, r4, #15
 8005c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fc4c 	bl	80004d8 <__aeabi_dmul>
 8005c40:	2602      	movs	r6, #2
 8005c42:	2300      	movs	r3, #0
 8005c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c48:	4d64      	ldr	r5, [pc, #400]	@ (8005ddc <_dtoa_r+0x524>)
 8005c4a:	1124      	asrs	r4, r4, #4
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	f040 80b2 	bne.w	8005db6 <_dtoa_r+0x4fe>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1d3      	bne.n	8005bfe <_dtoa_r+0x346>
 8005c56:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80b7 	beq.w	8005dd0 <_dtoa_r+0x518>
 8005c62:	2200      	movs	r2, #0
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	4b5d      	ldr	r3, [pc, #372]	@ (8005de0 <_dtoa_r+0x528>)
 8005c6a:	f7fa fea7 	bl	80009bc <__aeabi_dcmplt>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f000 80ae 	beq.w	8005dd0 <_dtoa_r+0x518>
 8005c74:	9b07      	ldr	r3, [sp, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80aa 	beq.w	8005dd0 <_dtoa_r+0x518>
 8005c7c:	9b08      	ldr	r3, [sp, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dd37      	ble.n	8005cf2 <_dtoa_r+0x43a>
 8005c82:	1e7b      	subs	r3, r7, #1
 8005c84:	4620      	mov	r0, r4
 8005c86:	9304      	str	r3, [sp, #16]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4b55      	ldr	r3, [pc, #340]	@ (8005de4 <_dtoa_r+0x52c>)
 8005c8e:	f7fa fc23 	bl	80004d8 <__aeabi_dmul>
 8005c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c96:	9c08      	ldr	r4, [sp, #32]
 8005c98:	3601      	adds	r6, #1
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f7fa fbb2 	bl	8000404 <__aeabi_i2d>
 8005ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ca4:	f7fa fc18 	bl	80004d8 <__aeabi_dmul>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4b4f      	ldr	r3, [pc, #316]	@ (8005de8 <_dtoa_r+0x530>)
 8005cac:	f7fa fa5e 	bl	800016c <__adddf3>
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005cb6:	2c00      	cmp	r4, #0
 8005cb8:	f040 809a 	bne.w	8005df0 <_dtoa_r+0x538>
 8005cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8005dec <_dtoa_r+0x534>)
 8005cc4:	f7fa fa50 	bl	8000168 <__aeabi_dsub>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cd0:	462a      	mov	r2, r5
 8005cd2:	4633      	mov	r3, r6
 8005cd4:	f7fa fe90 	bl	80009f8 <__aeabi_dcmpgt>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f040 828e 	bne.w	80061fa <_dtoa_r+0x942>
 8005cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ce8:	f7fa fe68 	bl	80009bc <__aeabi_dcmplt>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f040 8127 	bne.w	8005f40 <_dtoa_r+0x688>
 8005cf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005cf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005cfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f2c0 8163 	blt.w	8005fc8 <_dtoa_r+0x710>
 8005d02:	2f0e      	cmp	r7, #14
 8005d04:	f300 8160 	bgt.w	8005fc8 <_dtoa_r+0x710>
 8005d08:	4b33      	ldr	r3, [pc, #204]	@ (8005dd8 <_dtoa_r+0x520>)
 8005d0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da03      	bge.n	8005d24 <_dtoa_r+0x46c>
 8005d1c:	9b07      	ldr	r3, [sp, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f340 8100 	ble.w	8005f24 <_dtoa_r+0x66c>
 8005d24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d28:	4656      	mov	r6, sl
 8005d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fcfb 	bl	800072c <__aeabi_ddiv>
 8005d36:	f7fa fe7f 	bl	8000a38 <__aeabi_d2iz>
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	f7fa fb62 	bl	8000404 <__aeabi_i2d>
 8005d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d44:	f7fa fbc8 	bl	80004d8 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa fa0a 	bl	8000168 <__aeabi_dsub>
 8005d54:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d58:	9d07      	ldr	r5, [sp, #28]
 8005d5a:	f806 4b01 	strb.w	r4, [r6], #1
 8005d5e:	eba6 040a 	sub.w	r4, r6, sl
 8005d62:	42a5      	cmp	r5, r4
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	f040 8116 	bne.w	8005f98 <_dtoa_r+0x6e0>
 8005d6c:	f7fa f9fe 	bl	800016c <__adddf3>
 8005d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d74:	4604      	mov	r4, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	f7fa fe3e 	bl	80009f8 <__aeabi_dcmpgt>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	f040 80f8 	bne.w	8005f72 <_dtoa_r+0x6ba>
 8005d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa fe0d 	bl	80009a8 <__aeabi_dcmpeq>
 8005d8e:	b118      	cbz	r0, 8005d98 <_dtoa_r+0x4e0>
 8005d90:	f018 0f01 	tst.w	r8, #1
 8005d94:	f040 80ed 	bne.w	8005f72 <_dtoa_r+0x6ba>
 8005d98:	4649      	mov	r1, r9
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	f000 fc92 	bl	80066c4 <_Bfree>
 8005da0:	2300      	movs	r3, #0
 8005da2:	7033      	strb	r3, [r6, #0]
 8005da4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005da6:	3701      	adds	r7, #1
 8005da8:	601f      	str	r7, [r3, #0]
 8005daa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8320 	beq.w	80063f2 <_dtoa_r+0xb3a>
 8005db2:	601e      	str	r6, [r3, #0]
 8005db4:	e31d      	b.n	80063f2 <_dtoa_r+0xb3a>
 8005db6:	07e2      	lsls	r2, r4, #31
 8005db8:	d505      	bpl.n	8005dc6 <_dtoa_r+0x50e>
 8005dba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dbe:	f7fa fb8b 	bl	80004d8 <__aeabi_dmul>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	1064      	asrs	r4, r4, #1
 8005dc8:	3508      	adds	r5, #8
 8005dca:	e73f      	b.n	8005c4c <_dtoa_r+0x394>
 8005dcc:	2602      	movs	r6, #2
 8005dce:	e742      	b.n	8005c56 <_dtoa_r+0x39e>
 8005dd0:	9c07      	ldr	r4, [sp, #28]
 8005dd2:	9704      	str	r7, [sp, #16]
 8005dd4:	e761      	b.n	8005c9a <_dtoa_r+0x3e2>
 8005dd6:	bf00      	nop
 8005dd8:	08009898 	.word	0x08009898
 8005ddc:	08009870 	.word	0x08009870
 8005de0:	3ff00000 	.word	0x3ff00000
 8005de4:	40240000 	.word	0x40240000
 8005de8:	401c0000 	.word	0x401c0000
 8005dec:	40140000 	.word	0x40140000
 8005df0:	4b70      	ldr	r3, [pc, #448]	@ (8005fb4 <_dtoa_r+0x6fc>)
 8005df2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005df4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005df8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dfc:	4454      	add	r4, sl
 8005dfe:	2900      	cmp	r1, #0
 8005e00:	d045      	beq.n	8005e8e <_dtoa_r+0x5d6>
 8005e02:	2000      	movs	r0, #0
 8005e04:	496c      	ldr	r1, [pc, #432]	@ (8005fb8 <_dtoa_r+0x700>)
 8005e06:	f7fa fc91 	bl	800072c <__aeabi_ddiv>
 8005e0a:	4633      	mov	r3, r6
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	f7fa f9ab 	bl	8000168 <__aeabi_dsub>
 8005e12:	4656      	mov	r6, sl
 8005e14:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e1c:	f7fa fe0c 	bl	8000a38 <__aeabi_d2iz>
 8005e20:	4605      	mov	r5, r0
 8005e22:	f7fa faef 	bl	8000404 <__aeabi_i2d>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2e:	f7fa f99b 	bl	8000168 <__aeabi_dsub>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	3530      	adds	r5, #48	@ 0x30
 8005e38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e40:	f806 5b01 	strb.w	r5, [r6], #1
 8005e44:	f7fa fdba 	bl	80009bc <__aeabi_dcmplt>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d163      	bne.n	8005f14 <_dtoa_r+0x65c>
 8005e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e50:	2000      	movs	r0, #0
 8005e52:	495a      	ldr	r1, [pc, #360]	@ (8005fbc <_dtoa_r+0x704>)
 8005e54:	f7fa f988 	bl	8000168 <__aeabi_dsub>
 8005e58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e5c:	f7fa fdae 	bl	80009bc <__aeabi_dcmplt>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	f040 8087 	bne.w	8005f74 <_dtoa_r+0x6bc>
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	f43f af43 	beq.w	8005cf2 <_dtoa_r+0x43a>
 8005e6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e70:	2200      	movs	r2, #0
 8005e72:	4b53      	ldr	r3, [pc, #332]	@ (8005fc0 <_dtoa_r+0x708>)
 8005e74:	f7fa fb30 	bl	80004d8 <__aeabi_dmul>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e82:	4b4f      	ldr	r3, [pc, #316]	@ (8005fc0 <_dtoa_r+0x708>)
 8005e84:	f7fa fb28 	bl	80004d8 <__aeabi_dmul>
 8005e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e8c:	e7c4      	b.n	8005e18 <_dtoa_r+0x560>
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7fa fb21 	bl	80004d8 <__aeabi_dmul>
 8005e96:	4656      	mov	r6, sl
 8005e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e9c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea2:	f7fa fdc9 	bl	8000a38 <__aeabi_d2iz>
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	f7fa faac 	bl	8000404 <__aeabi_i2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb4:	f7fa f958 	bl	8000168 <__aeabi_dsub>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	3530      	adds	r5, #48	@ 0x30
 8005ebe:	f806 5b01 	strb.w	r5, [r6], #1
 8005ec2:	42a6      	cmp	r6, r4
 8005ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	d124      	bne.n	8005f18 <_dtoa_r+0x660>
 8005ece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ed2:	4b39      	ldr	r3, [pc, #228]	@ (8005fb8 <_dtoa_r+0x700>)
 8005ed4:	f7fa f94a 	bl	800016c <__adddf3>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee0:	f7fa fd8a 	bl	80009f8 <__aeabi_dcmpgt>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d145      	bne.n	8005f74 <_dtoa_r+0x6bc>
 8005ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005eec:	2000      	movs	r0, #0
 8005eee:	4932      	ldr	r1, [pc, #200]	@ (8005fb8 <_dtoa_r+0x700>)
 8005ef0:	f7fa f93a 	bl	8000168 <__aeabi_dsub>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005efc:	f7fa fd5e 	bl	80009bc <__aeabi_dcmplt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f43f aef6 	beq.w	8005cf2 <_dtoa_r+0x43a>
 8005f06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005f08:	1e73      	subs	r3, r6, #1
 8005f0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f10:	2b30      	cmp	r3, #48	@ 0x30
 8005f12:	d0f8      	beq.n	8005f06 <_dtoa_r+0x64e>
 8005f14:	9f04      	ldr	r7, [sp, #16]
 8005f16:	e73f      	b.n	8005d98 <_dtoa_r+0x4e0>
 8005f18:	4b29      	ldr	r3, [pc, #164]	@ (8005fc0 <_dtoa_r+0x708>)
 8005f1a:	f7fa fadd 	bl	80004d8 <__aeabi_dmul>
 8005f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f22:	e7bc      	b.n	8005e9e <_dtoa_r+0x5e6>
 8005f24:	d10c      	bne.n	8005f40 <_dtoa_r+0x688>
 8005f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4b25      	ldr	r3, [pc, #148]	@ (8005fc4 <_dtoa_r+0x70c>)
 8005f2e:	f7fa fad3 	bl	80004d8 <__aeabi_dmul>
 8005f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f36:	f7fa fd55 	bl	80009e4 <__aeabi_dcmpge>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f000 815b 	beq.w	80061f6 <_dtoa_r+0x93e>
 8005f40:	2400      	movs	r4, #0
 8005f42:	4625      	mov	r5, r4
 8005f44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f46:	4656      	mov	r6, sl
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	9304      	str	r3, [sp, #16]
 8005f4c:	2700      	movs	r7, #0
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4658      	mov	r0, fp
 8005f52:	f000 fbb7 	bl	80066c4 <_Bfree>
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	d0dc      	beq.n	8005f14 <_dtoa_r+0x65c>
 8005f5a:	b12f      	cbz	r7, 8005f68 <_dtoa_r+0x6b0>
 8005f5c:	42af      	cmp	r7, r5
 8005f5e:	d003      	beq.n	8005f68 <_dtoa_r+0x6b0>
 8005f60:	4639      	mov	r1, r7
 8005f62:	4658      	mov	r0, fp
 8005f64:	f000 fbae 	bl	80066c4 <_Bfree>
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4658      	mov	r0, fp
 8005f6c:	f000 fbaa 	bl	80066c4 <_Bfree>
 8005f70:	e7d0      	b.n	8005f14 <_dtoa_r+0x65c>
 8005f72:	9704      	str	r7, [sp, #16]
 8005f74:	4633      	mov	r3, r6
 8005f76:	461e      	mov	r6, r3
 8005f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f7c:	2a39      	cmp	r2, #57	@ 0x39
 8005f7e:	d107      	bne.n	8005f90 <_dtoa_r+0x6d8>
 8005f80:	459a      	cmp	sl, r3
 8005f82:	d1f8      	bne.n	8005f76 <_dtoa_r+0x6be>
 8005f84:	9a04      	ldr	r2, [sp, #16]
 8005f86:	3201      	adds	r2, #1
 8005f88:	9204      	str	r2, [sp, #16]
 8005f8a:	2230      	movs	r2, #48	@ 0x30
 8005f8c:	f88a 2000 	strb.w	r2, [sl]
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	3201      	adds	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	e7bd      	b.n	8005f14 <_dtoa_r+0x65c>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <_dtoa_r+0x708>)
 8005f9c:	f7fa fa9c 	bl	80004d8 <__aeabi_dmul>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	f7fa fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f43f aebc 	beq.w	8005d2a <_dtoa_r+0x472>
 8005fb2:	e6f1      	b.n	8005d98 <_dtoa_r+0x4e0>
 8005fb4:	08009898 	.word	0x08009898
 8005fb8:	3fe00000 	.word	0x3fe00000
 8005fbc:	3ff00000 	.word	0x3ff00000
 8005fc0:	40240000 	.word	0x40240000
 8005fc4:	40140000 	.word	0x40140000
 8005fc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005fca:	2a00      	cmp	r2, #0
 8005fcc:	f000 80db 	beq.w	8006186 <_dtoa_r+0x8ce>
 8005fd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005fd2:	2a01      	cmp	r2, #1
 8005fd4:	f300 80bf 	bgt.w	8006156 <_dtoa_r+0x89e>
 8005fd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	f000 80b7 	beq.w	800614e <_dtoa_r+0x896>
 8005fe0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005fe4:	4646      	mov	r6, r8
 8005fe6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005fe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fea:	2101      	movs	r1, #1
 8005fec:	441a      	add	r2, r3
 8005fee:	4658      	mov	r0, fp
 8005ff0:	4498      	add	r8, r3
 8005ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ff4:	f000 fc64 	bl	80068c0 <__i2b>
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	b15e      	cbz	r6, 8006014 <_dtoa_r+0x75c>
 8005ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	dd08      	ble.n	8006014 <_dtoa_r+0x75c>
 8006002:	42b3      	cmp	r3, r6
 8006004:	bfa8      	it	ge
 8006006:	4633      	movge	r3, r6
 8006008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800600a:	eba8 0803 	sub.w	r8, r8, r3
 800600e:	1af6      	subs	r6, r6, r3
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	9309      	str	r3, [sp, #36]	@ 0x24
 8006014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006016:	b1f3      	cbz	r3, 8006056 <_dtoa_r+0x79e>
 8006018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80b7 	beq.w	800618e <_dtoa_r+0x8d6>
 8006020:	b18c      	cbz	r4, 8006046 <_dtoa_r+0x78e>
 8006022:	4629      	mov	r1, r5
 8006024:	4622      	mov	r2, r4
 8006026:	4658      	mov	r0, fp
 8006028:	f000 fd08 	bl	8006a3c <__pow5mult>
 800602c:	464a      	mov	r2, r9
 800602e:	4601      	mov	r1, r0
 8006030:	4605      	mov	r5, r0
 8006032:	4658      	mov	r0, fp
 8006034:	f000 fc5a 	bl	80068ec <__multiply>
 8006038:	4649      	mov	r1, r9
 800603a:	9004      	str	r0, [sp, #16]
 800603c:	4658      	mov	r0, fp
 800603e:	f000 fb41 	bl	80066c4 <_Bfree>
 8006042:	9b04      	ldr	r3, [sp, #16]
 8006044:	4699      	mov	r9, r3
 8006046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006048:	1b1a      	subs	r2, r3, r4
 800604a:	d004      	beq.n	8006056 <_dtoa_r+0x79e>
 800604c:	4649      	mov	r1, r9
 800604e:	4658      	mov	r0, fp
 8006050:	f000 fcf4 	bl	8006a3c <__pow5mult>
 8006054:	4681      	mov	r9, r0
 8006056:	2101      	movs	r1, #1
 8006058:	4658      	mov	r0, fp
 800605a:	f000 fc31 	bl	80068c0 <__i2b>
 800605e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006060:	4604      	mov	r4, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 81c9 	beq.w	80063fa <_dtoa_r+0xb42>
 8006068:	461a      	mov	r2, r3
 800606a:	4601      	mov	r1, r0
 800606c:	4658      	mov	r0, fp
 800606e:	f000 fce5 	bl	8006a3c <__pow5mult>
 8006072:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006074:	4604      	mov	r4, r0
 8006076:	2b01      	cmp	r3, #1
 8006078:	f300 808f 	bgt.w	800619a <_dtoa_r+0x8e2>
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 8087 	bne.w	8006192 <_dtoa_r+0x8da>
 8006084:	9b03      	ldr	r3, [sp, #12]
 8006086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 8083 	bne.w	8006196 <_dtoa_r+0x8de>
 8006090:	9b03      	ldr	r3, [sp, #12]
 8006092:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006096:	0d1b      	lsrs	r3, r3, #20
 8006098:	051b      	lsls	r3, r3, #20
 800609a:	b12b      	cbz	r3, 80060a8 <_dtoa_r+0x7f0>
 800609c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609e:	f108 0801 	add.w	r8, r8, #1
 80060a2:	3301      	adds	r3, #1
 80060a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060a6:	2301      	movs	r3, #1
 80060a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 81aa 	beq.w	8006406 <_dtoa_r+0xb4e>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060b8:	6918      	ldr	r0, [r3, #16]
 80060ba:	f000 fbb5 	bl	8006828 <__hi0bits>
 80060be:	f1c0 0020 	rsb	r0, r0, #32
 80060c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c4:	4418      	add	r0, r3
 80060c6:	f010 001f 	ands.w	r0, r0, #31
 80060ca:	d071      	beq.n	80061b0 <_dtoa_r+0x8f8>
 80060cc:	f1c0 0320 	rsb	r3, r0, #32
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	dd65      	ble.n	80061a0 <_dtoa_r+0x8e8>
 80060d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d6:	f1c0 001c 	rsb	r0, r0, #28
 80060da:	4403      	add	r3, r0
 80060dc:	4480      	add	r8, r0
 80060de:	4406      	add	r6, r0
 80060e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e2:	f1b8 0f00 	cmp.w	r8, #0
 80060e6:	dd05      	ble.n	80060f4 <_dtoa_r+0x83c>
 80060e8:	4649      	mov	r1, r9
 80060ea:	4642      	mov	r2, r8
 80060ec:	4658      	mov	r0, fp
 80060ee:	f000 fcff 	bl	8006af0 <__lshift>
 80060f2:	4681      	mov	r9, r0
 80060f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dd05      	ble.n	8006106 <_dtoa_r+0x84e>
 80060fa:	4621      	mov	r1, r4
 80060fc:	461a      	mov	r2, r3
 80060fe:	4658      	mov	r0, fp
 8006100:	f000 fcf6 	bl	8006af0 <__lshift>
 8006104:	4604      	mov	r4, r0
 8006106:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d053      	beq.n	80061b4 <_dtoa_r+0x8fc>
 800610c:	4621      	mov	r1, r4
 800610e:	4648      	mov	r0, r9
 8006110:	f000 fd5a 	bl	8006bc8 <__mcmp>
 8006114:	2800      	cmp	r0, #0
 8006116:	da4d      	bge.n	80061b4 <_dtoa_r+0x8fc>
 8006118:	1e7b      	subs	r3, r7, #1
 800611a:	4649      	mov	r1, r9
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	220a      	movs	r2, #10
 8006120:	2300      	movs	r3, #0
 8006122:	4658      	mov	r0, fp
 8006124:	f000 faf0 	bl	8006708 <__multadd>
 8006128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800612a:	4681      	mov	r9, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 816c 	beq.w	800640a <_dtoa_r+0xb52>
 8006132:	2300      	movs	r3, #0
 8006134:	4629      	mov	r1, r5
 8006136:	220a      	movs	r2, #10
 8006138:	4658      	mov	r0, fp
 800613a:	f000 fae5 	bl	8006708 <__multadd>
 800613e:	9b08      	ldr	r3, [sp, #32]
 8006140:	4605      	mov	r5, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	dc61      	bgt.n	800620a <_dtoa_r+0x952>
 8006146:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006148:	2b02      	cmp	r3, #2
 800614a:	dc3b      	bgt.n	80061c4 <_dtoa_r+0x90c>
 800614c:	e05d      	b.n	800620a <_dtoa_r+0x952>
 800614e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006150:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006154:	e746      	b.n	8005fe4 <_dtoa_r+0x72c>
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	1e5c      	subs	r4, r3, #1
 800615a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800615c:	42a3      	cmp	r3, r4
 800615e:	bfbf      	itttt	lt
 8006160:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006162:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006164:	1ae3      	sublt	r3, r4, r3
 8006166:	18d2      	addlt	r2, r2, r3
 8006168:	bfa8      	it	ge
 800616a:	1b1c      	subge	r4, r3, r4
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	bfbe      	ittt	lt
 8006170:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006172:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006174:	2400      	movlt	r4, #0
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfb5      	itete	lt
 800617a:	eba8 0603 	sublt.w	r6, r8, r3
 800617e:	4646      	movge	r6, r8
 8006180:	2300      	movlt	r3, #0
 8006182:	9b07      	ldrge	r3, [sp, #28]
 8006184:	e730      	b.n	8005fe8 <_dtoa_r+0x730>
 8006186:	4646      	mov	r6, r8
 8006188:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800618a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800618c:	e735      	b.n	8005ffa <_dtoa_r+0x742>
 800618e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006190:	e75c      	b.n	800604c <_dtoa_r+0x794>
 8006192:	2300      	movs	r3, #0
 8006194:	e788      	b.n	80060a8 <_dtoa_r+0x7f0>
 8006196:	9b02      	ldr	r3, [sp, #8]
 8006198:	e786      	b.n	80060a8 <_dtoa_r+0x7f0>
 800619a:	2300      	movs	r3, #0
 800619c:	930a      	str	r3, [sp, #40]	@ 0x28
 800619e:	e788      	b.n	80060b2 <_dtoa_r+0x7fa>
 80061a0:	d09f      	beq.n	80060e2 <_dtoa_r+0x82a>
 80061a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061a4:	331c      	adds	r3, #28
 80061a6:	441a      	add	r2, r3
 80061a8:	4498      	add	r8, r3
 80061aa:	441e      	add	r6, r3
 80061ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ae:	e798      	b.n	80060e2 <_dtoa_r+0x82a>
 80061b0:	4603      	mov	r3, r0
 80061b2:	e7f6      	b.n	80061a2 <_dtoa_r+0x8ea>
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	9704      	str	r7, [sp, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dc20      	bgt.n	80061fe <_dtoa_r+0x946>
 80061bc:	9308      	str	r3, [sp, #32]
 80061be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	dd1e      	ble.n	8006202 <_dtoa_r+0x94a>
 80061c4:	9b08      	ldr	r3, [sp, #32]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f47f aebc 	bne.w	8005f44 <_dtoa_r+0x68c>
 80061cc:	4621      	mov	r1, r4
 80061ce:	2205      	movs	r2, #5
 80061d0:	4658      	mov	r0, fp
 80061d2:	f000 fa99 	bl	8006708 <__multadd>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4604      	mov	r4, r0
 80061da:	4648      	mov	r0, r9
 80061dc:	f000 fcf4 	bl	8006bc8 <__mcmp>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f77f aeaf 	ble.w	8005f44 <_dtoa_r+0x68c>
 80061e6:	2331      	movs	r3, #49	@ 0x31
 80061e8:	4656      	mov	r6, sl
 80061ea:	f806 3b01 	strb.w	r3, [r6], #1
 80061ee:	9b04      	ldr	r3, [sp, #16]
 80061f0:	3301      	adds	r3, #1
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	e6aa      	b.n	8005f4c <_dtoa_r+0x694>
 80061f6:	9c07      	ldr	r4, [sp, #28]
 80061f8:	9704      	str	r7, [sp, #16]
 80061fa:	4625      	mov	r5, r4
 80061fc:	e7f3      	b.n	80061e6 <_dtoa_r+0x92e>
 80061fe:	9b07      	ldr	r3, [sp, #28]
 8006200:	9308      	str	r3, [sp, #32]
 8006202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8104 	beq.w	8006412 <_dtoa_r+0xb5a>
 800620a:	2e00      	cmp	r6, #0
 800620c:	dd05      	ble.n	800621a <_dtoa_r+0x962>
 800620e:	4629      	mov	r1, r5
 8006210:	4632      	mov	r2, r6
 8006212:	4658      	mov	r0, fp
 8006214:	f000 fc6c 	bl	8006af0 <__lshift>
 8006218:	4605      	mov	r5, r0
 800621a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	d05a      	beq.n	80062d6 <_dtoa_r+0xa1e>
 8006220:	4658      	mov	r0, fp
 8006222:	6869      	ldr	r1, [r5, #4]
 8006224:	f000 fa0e 	bl	8006644 <_Balloc>
 8006228:	4606      	mov	r6, r0
 800622a:	b928      	cbnz	r0, 8006238 <_dtoa_r+0x980>
 800622c:	4602      	mov	r2, r0
 800622e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006232:	4b83      	ldr	r3, [pc, #524]	@ (8006440 <_dtoa_r+0xb88>)
 8006234:	f7ff bb54 	b.w	80058e0 <_dtoa_r+0x28>
 8006238:	692a      	ldr	r2, [r5, #16]
 800623a:	f105 010c 	add.w	r1, r5, #12
 800623e:	3202      	adds	r2, #2
 8006240:	0092      	lsls	r2, r2, #2
 8006242:	300c      	adds	r0, #12
 8006244:	f002 fca8 	bl	8008b98 <memcpy>
 8006248:	2201      	movs	r2, #1
 800624a:	4631      	mov	r1, r6
 800624c:	4658      	mov	r0, fp
 800624e:	f000 fc4f 	bl	8006af0 <__lshift>
 8006252:	462f      	mov	r7, r5
 8006254:	4605      	mov	r5, r0
 8006256:	f10a 0301 	add.w	r3, sl, #1
 800625a:	9307      	str	r3, [sp, #28]
 800625c:	9b08      	ldr	r3, [sp, #32]
 800625e:	4453      	add	r3, sl
 8006260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006262:	9b02      	ldr	r3, [sp, #8]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	930a      	str	r3, [sp, #40]	@ 0x28
 800626a:	9b07      	ldr	r3, [sp, #28]
 800626c:	4621      	mov	r1, r4
 800626e:	3b01      	subs	r3, #1
 8006270:	4648      	mov	r0, r9
 8006272:	9302      	str	r3, [sp, #8]
 8006274:	f7ff fa96 	bl	80057a4 <quorem>
 8006278:	4639      	mov	r1, r7
 800627a:	9008      	str	r0, [sp, #32]
 800627c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006280:	4648      	mov	r0, r9
 8006282:	f000 fca1 	bl	8006bc8 <__mcmp>
 8006286:	462a      	mov	r2, r5
 8006288:	9009      	str	r0, [sp, #36]	@ 0x24
 800628a:	4621      	mov	r1, r4
 800628c:	4658      	mov	r0, fp
 800628e:	f000 fcb7 	bl	8006c00 <__mdiff>
 8006292:	68c2      	ldr	r2, [r0, #12]
 8006294:	4606      	mov	r6, r0
 8006296:	bb02      	cbnz	r2, 80062da <_dtoa_r+0xa22>
 8006298:	4601      	mov	r1, r0
 800629a:	4648      	mov	r0, r9
 800629c:	f000 fc94 	bl	8006bc8 <__mcmp>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4631      	mov	r1, r6
 80062a4:	4658      	mov	r0, fp
 80062a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80062a8:	f000 fa0c 	bl	80066c4 <_Bfree>
 80062ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062b0:	9e07      	ldr	r6, [sp, #28]
 80062b2:	ea43 0102 	orr.w	r1, r3, r2
 80062b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062b8:	4319      	orrs	r1, r3
 80062ba:	d110      	bne.n	80062de <_dtoa_r+0xa26>
 80062bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062c0:	d029      	beq.n	8006316 <_dtoa_r+0xa5e>
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dd02      	ble.n	80062ce <_dtoa_r+0xa16>
 80062c8:	9b08      	ldr	r3, [sp, #32]
 80062ca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80062ce:	9b02      	ldr	r3, [sp, #8]
 80062d0:	f883 8000 	strb.w	r8, [r3]
 80062d4:	e63b      	b.n	8005f4e <_dtoa_r+0x696>
 80062d6:	4628      	mov	r0, r5
 80062d8:	e7bb      	b.n	8006252 <_dtoa_r+0x99a>
 80062da:	2201      	movs	r2, #1
 80062dc:	e7e1      	b.n	80062a2 <_dtoa_r+0x9ea>
 80062de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	db04      	blt.n	80062ee <_dtoa_r+0xa36>
 80062e4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80062e6:	430b      	orrs	r3, r1
 80062e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ea:	430b      	orrs	r3, r1
 80062ec:	d120      	bne.n	8006330 <_dtoa_r+0xa78>
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	dded      	ble.n	80062ce <_dtoa_r+0xa16>
 80062f2:	4649      	mov	r1, r9
 80062f4:	2201      	movs	r2, #1
 80062f6:	4658      	mov	r0, fp
 80062f8:	f000 fbfa 	bl	8006af0 <__lshift>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4681      	mov	r9, r0
 8006300:	f000 fc62 	bl	8006bc8 <__mcmp>
 8006304:	2800      	cmp	r0, #0
 8006306:	dc03      	bgt.n	8006310 <_dtoa_r+0xa58>
 8006308:	d1e1      	bne.n	80062ce <_dtoa_r+0xa16>
 800630a:	f018 0f01 	tst.w	r8, #1
 800630e:	d0de      	beq.n	80062ce <_dtoa_r+0xa16>
 8006310:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006314:	d1d8      	bne.n	80062c8 <_dtoa_r+0xa10>
 8006316:	2339      	movs	r3, #57	@ 0x39
 8006318:	9a02      	ldr	r2, [sp, #8]
 800631a:	7013      	strb	r3, [r2, #0]
 800631c:	4633      	mov	r3, r6
 800631e:	461e      	mov	r6, r3
 8006320:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006324:	3b01      	subs	r3, #1
 8006326:	2a39      	cmp	r2, #57	@ 0x39
 8006328:	d052      	beq.n	80063d0 <_dtoa_r+0xb18>
 800632a:	3201      	adds	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e60e      	b.n	8005f4e <_dtoa_r+0x696>
 8006330:	2a00      	cmp	r2, #0
 8006332:	dd07      	ble.n	8006344 <_dtoa_r+0xa8c>
 8006334:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006338:	d0ed      	beq.n	8006316 <_dtoa_r+0xa5e>
 800633a:	9a02      	ldr	r2, [sp, #8]
 800633c:	f108 0301 	add.w	r3, r8, #1
 8006340:	7013      	strb	r3, [r2, #0]
 8006342:	e604      	b.n	8005f4e <_dtoa_r+0x696>
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	9a07      	ldr	r2, [sp, #28]
 8006348:	f803 8c01 	strb.w	r8, [r3, #-1]
 800634c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800634e:	4293      	cmp	r3, r2
 8006350:	d028      	beq.n	80063a4 <_dtoa_r+0xaec>
 8006352:	4649      	mov	r1, r9
 8006354:	2300      	movs	r3, #0
 8006356:	220a      	movs	r2, #10
 8006358:	4658      	mov	r0, fp
 800635a:	f000 f9d5 	bl	8006708 <__multadd>
 800635e:	42af      	cmp	r7, r5
 8006360:	4681      	mov	r9, r0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	f04f 020a 	mov.w	r2, #10
 800636a:	4639      	mov	r1, r7
 800636c:	4658      	mov	r0, fp
 800636e:	d107      	bne.n	8006380 <_dtoa_r+0xac8>
 8006370:	f000 f9ca 	bl	8006708 <__multadd>
 8006374:	4607      	mov	r7, r0
 8006376:	4605      	mov	r5, r0
 8006378:	9b07      	ldr	r3, [sp, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	9307      	str	r3, [sp, #28]
 800637e:	e774      	b.n	800626a <_dtoa_r+0x9b2>
 8006380:	f000 f9c2 	bl	8006708 <__multadd>
 8006384:	4629      	mov	r1, r5
 8006386:	4607      	mov	r7, r0
 8006388:	2300      	movs	r3, #0
 800638a:	220a      	movs	r2, #10
 800638c:	4658      	mov	r0, fp
 800638e:	f000 f9bb 	bl	8006708 <__multadd>
 8006392:	4605      	mov	r5, r0
 8006394:	e7f0      	b.n	8006378 <_dtoa_r+0xac0>
 8006396:	9b08      	ldr	r3, [sp, #32]
 8006398:	2700      	movs	r7, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	bfcc      	ite	gt
 800639e:	461e      	movgt	r6, r3
 80063a0:	2601      	movle	r6, #1
 80063a2:	4456      	add	r6, sl
 80063a4:	4649      	mov	r1, r9
 80063a6:	2201      	movs	r2, #1
 80063a8:	4658      	mov	r0, fp
 80063aa:	f000 fba1 	bl	8006af0 <__lshift>
 80063ae:	4621      	mov	r1, r4
 80063b0:	4681      	mov	r9, r0
 80063b2:	f000 fc09 	bl	8006bc8 <__mcmp>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	dcb0      	bgt.n	800631c <_dtoa_r+0xa64>
 80063ba:	d102      	bne.n	80063c2 <_dtoa_r+0xb0a>
 80063bc:	f018 0f01 	tst.w	r8, #1
 80063c0:	d1ac      	bne.n	800631c <_dtoa_r+0xa64>
 80063c2:	4633      	mov	r3, r6
 80063c4:	461e      	mov	r6, r3
 80063c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ca:	2a30      	cmp	r2, #48	@ 0x30
 80063cc:	d0fa      	beq.n	80063c4 <_dtoa_r+0xb0c>
 80063ce:	e5be      	b.n	8005f4e <_dtoa_r+0x696>
 80063d0:	459a      	cmp	sl, r3
 80063d2:	d1a4      	bne.n	800631e <_dtoa_r+0xa66>
 80063d4:	9b04      	ldr	r3, [sp, #16]
 80063d6:	3301      	adds	r3, #1
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	2331      	movs	r3, #49	@ 0x31
 80063dc:	f88a 3000 	strb.w	r3, [sl]
 80063e0:	e5b5      	b.n	8005f4e <_dtoa_r+0x696>
 80063e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80063e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006444 <_dtoa_r+0xb8c>
 80063e8:	b11b      	cbz	r3, 80063f2 <_dtoa_r+0xb3a>
 80063ea:	f10a 0308 	add.w	r3, sl, #8
 80063ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	4650      	mov	r0, sl
 80063f4:	b017      	add	sp, #92	@ 0x5c
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	f77f ae3d 	ble.w	800607c <_dtoa_r+0x7c4>
 8006402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006404:	930a      	str	r3, [sp, #40]	@ 0x28
 8006406:	2001      	movs	r0, #1
 8006408:	e65b      	b.n	80060c2 <_dtoa_r+0x80a>
 800640a:	9b08      	ldr	r3, [sp, #32]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f77f aed6 	ble.w	80061be <_dtoa_r+0x906>
 8006412:	4656      	mov	r6, sl
 8006414:	4621      	mov	r1, r4
 8006416:	4648      	mov	r0, r9
 8006418:	f7ff f9c4 	bl	80057a4 <quorem>
 800641c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006420:	9b08      	ldr	r3, [sp, #32]
 8006422:	f806 8b01 	strb.w	r8, [r6], #1
 8006426:	eba6 020a 	sub.w	r2, r6, sl
 800642a:	4293      	cmp	r3, r2
 800642c:	ddb3      	ble.n	8006396 <_dtoa_r+0xade>
 800642e:	4649      	mov	r1, r9
 8006430:	2300      	movs	r3, #0
 8006432:	220a      	movs	r2, #10
 8006434:	4658      	mov	r0, fp
 8006436:	f000 f967 	bl	8006708 <__multadd>
 800643a:	4681      	mov	r9, r0
 800643c:	e7ea      	b.n	8006414 <_dtoa_r+0xb5c>
 800643e:	bf00      	nop
 8006440:	080097f5 	.word	0x080097f5
 8006444:	08009779 	.word	0x08009779

08006448 <_free_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4605      	mov	r5, r0
 800644c:	2900      	cmp	r1, #0
 800644e:	d040      	beq.n	80064d2 <_free_r+0x8a>
 8006450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006454:	1f0c      	subs	r4, r1, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	bfb8      	it	lt
 800645a:	18e4      	addlt	r4, r4, r3
 800645c:	f000 f8e6 	bl	800662c <__malloc_lock>
 8006460:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <_free_r+0x8c>)
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	b933      	cbnz	r3, 8006474 <_free_r+0x2c>
 8006466:	6063      	str	r3, [r4, #4]
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	4628      	mov	r0, r5
 800646c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006470:	f000 b8e2 	b.w	8006638 <__malloc_unlock>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d908      	bls.n	800648a <_free_r+0x42>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	1821      	adds	r1, r4, r0
 800647c:	428b      	cmp	r3, r1
 800647e:	bf01      	itttt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	1809      	addeq	r1, r1, r0
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	e7ed      	b.n	8006466 <_free_r+0x1e>
 800648a:	461a      	mov	r2, r3
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b10b      	cbz	r3, 8006494 <_free_r+0x4c>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d9fa      	bls.n	800648a <_free_r+0x42>
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	1850      	adds	r0, r2, r1
 8006498:	42a0      	cmp	r0, r4
 800649a:	d10b      	bne.n	80064b4 <_free_r+0x6c>
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	4401      	add	r1, r0
 80064a0:	1850      	adds	r0, r2, r1
 80064a2:	4283      	cmp	r3, r0
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	d1e0      	bne.n	800646a <_free_r+0x22>
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4408      	add	r0, r1
 80064ae:	6010      	str	r0, [r2, #0]
 80064b0:	6053      	str	r3, [r2, #4]
 80064b2:	e7da      	b.n	800646a <_free_r+0x22>
 80064b4:	d902      	bls.n	80064bc <_free_r+0x74>
 80064b6:	230c      	movs	r3, #12
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	e7d6      	b.n	800646a <_free_r+0x22>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	1821      	adds	r1, r4, r0
 80064c0:	428b      	cmp	r3, r1
 80064c2:	bf01      	itttt	eq
 80064c4:	6819      	ldreq	r1, [r3, #0]
 80064c6:	685b      	ldreq	r3, [r3, #4]
 80064c8:	1809      	addeq	r1, r1, r0
 80064ca:	6021      	streq	r1, [r4, #0]
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	6054      	str	r4, [r2, #4]
 80064d0:	e7cb      	b.n	800646a <_free_r+0x22>
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	2000066c 	.word	0x2000066c

080064d8 <malloc>:
 80064d8:	4b02      	ldr	r3, [pc, #8]	@ (80064e4 <malloc+0xc>)
 80064da:	4601      	mov	r1, r0
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	f000 b825 	b.w	800652c <_malloc_r>
 80064e2:	bf00      	nop
 80064e4:	20000030 	.word	0x20000030

080064e8 <sbrk_aligned>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006528 <sbrk_aligned+0x40>)
 80064ec:	460c      	mov	r4, r1
 80064ee:	6831      	ldr	r1, [r6, #0]
 80064f0:	4605      	mov	r5, r0
 80064f2:	b911      	cbnz	r1, 80064fa <sbrk_aligned+0x12>
 80064f4:	f002 fb40 	bl	8008b78 <_sbrk_r>
 80064f8:	6030      	str	r0, [r6, #0]
 80064fa:	4621      	mov	r1, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	f002 fb3b 	bl	8008b78 <_sbrk_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d103      	bne.n	800650e <sbrk_aligned+0x26>
 8006506:	f04f 34ff 	mov.w	r4, #4294967295
 800650a:	4620      	mov	r0, r4
 800650c:	bd70      	pop	{r4, r5, r6, pc}
 800650e:	1cc4      	adds	r4, r0, #3
 8006510:	f024 0403 	bic.w	r4, r4, #3
 8006514:	42a0      	cmp	r0, r4
 8006516:	d0f8      	beq.n	800650a <sbrk_aligned+0x22>
 8006518:	1a21      	subs	r1, r4, r0
 800651a:	4628      	mov	r0, r5
 800651c:	f002 fb2c 	bl	8008b78 <_sbrk_r>
 8006520:	3001      	adds	r0, #1
 8006522:	d1f2      	bne.n	800650a <sbrk_aligned+0x22>
 8006524:	e7ef      	b.n	8006506 <sbrk_aligned+0x1e>
 8006526:	bf00      	nop
 8006528:	20000668 	.word	0x20000668

0800652c <_malloc_r>:
 800652c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006530:	1ccd      	adds	r5, r1, #3
 8006532:	f025 0503 	bic.w	r5, r5, #3
 8006536:	3508      	adds	r5, #8
 8006538:	2d0c      	cmp	r5, #12
 800653a:	bf38      	it	cc
 800653c:	250c      	movcc	r5, #12
 800653e:	2d00      	cmp	r5, #0
 8006540:	4606      	mov	r6, r0
 8006542:	db01      	blt.n	8006548 <_malloc_r+0x1c>
 8006544:	42a9      	cmp	r1, r5
 8006546:	d904      	bls.n	8006552 <_malloc_r+0x26>
 8006548:	230c      	movs	r3, #12
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	2000      	movs	r0, #0
 800654e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006628 <_malloc_r+0xfc>
 8006556:	f000 f869 	bl	800662c <__malloc_lock>
 800655a:	f8d8 3000 	ldr.w	r3, [r8]
 800655e:	461c      	mov	r4, r3
 8006560:	bb44      	cbnz	r4, 80065b4 <_malloc_r+0x88>
 8006562:	4629      	mov	r1, r5
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff ffbf 	bl	80064e8 <sbrk_aligned>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	4604      	mov	r4, r0
 800656e:	d158      	bne.n	8006622 <_malloc_r+0xf6>
 8006570:	f8d8 4000 	ldr.w	r4, [r8]
 8006574:	4627      	mov	r7, r4
 8006576:	2f00      	cmp	r7, #0
 8006578:	d143      	bne.n	8006602 <_malloc_r+0xd6>
 800657a:	2c00      	cmp	r4, #0
 800657c:	d04b      	beq.n	8006616 <_malloc_r+0xea>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	4639      	mov	r1, r7
 8006582:	4630      	mov	r0, r6
 8006584:	eb04 0903 	add.w	r9, r4, r3
 8006588:	f002 faf6 	bl	8008b78 <_sbrk_r>
 800658c:	4581      	cmp	r9, r0
 800658e:	d142      	bne.n	8006616 <_malloc_r+0xea>
 8006590:	6821      	ldr	r1, [r4, #0]
 8006592:	4630      	mov	r0, r6
 8006594:	1a6d      	subs	r5, r5, r1
 8006596:	4629      	mov	r1, r5
 8006598:	f7ff ffa6 	bl	80064e8 <sbrk_aligned>
 800659c:	3001      	adds	r0, #1
 800659e:	d03a      	beq.n	8006616 <_malloc_r+0xea>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	442b      	add	r3, r5
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	f8d8 3000 	ldr.w	r3, [r8]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	bb62      	cbnz	r2, 8006608 <_malloc_r+0xdc>
 80065ae:	f8c8 7000 	str.w	r7, [r8]
 80065b2:	e00f      	b.n	80065d4 <_malloc_r+0xa8>
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	1b52      	subs	r2, r2, r5
 80065b8:	d420      	bmi.n	80065fc <_malloc_r+0xd0>
 80065ba:	2a0b      	cmp	r2, #11
 80065bc:	d917      	bls.n	80065ee <_malloc_r+0xc2>
 80065be:	1961      	adds	r1, r4, r5
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	6025      	str	r5, [r4, #0]
 80065c4:	bf18      	it	ne
 80065c6:	6059      	strne	r1, [r3, #4]
 80065c8:	6863      	ldr	r3, [r4, #4]
 80065ca:	bf08      	it	eq
 80065cc:	f8c8 1000 	streq.w	r1, [r8]
 80065d0:	5162      	str	r2, [r4, r5]
 80065d2:	604b      	str	r3, [r1, #4]
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 f82f 	bl	8006638 <__malloc_unlock>
 80065da:	f104 000b 	add.w	r0, r4, #11
 80065de:	1d23      	adds	r3, r4, #4
 80065e0:	f020 0007 	bic.w	r0, r0, #7
 80065e4:	1ac2      	subs	r2, r0, r3
 80065e6:	bf1c      	itt	ne
 80065e8:	1a1b      	subne	r3, r3, r0
 80065ea:	50a3      	strne	r3, [r4, r2]
 80065ec:	e7af      	b.n	800654e <_malloc_r+0x22>
 80065ee:	6862      	ldr	r2, [r4, #4]
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	bf0c      	ite	eq
 80065f4:	f8c8 2000 	streq.w	r2, [r8]
 80065f8:	605a      	strne	r2, [r3, #4]
 80065fa:	e7eb      	b.n	80065d4 <_malloc_r+0xa8>
 80065fc:	4623      	mov	r3, r4
 80065fe:	6864      	ldr	r4, [r4, #4]
 8006600:	e7ae      	b.n	8006560 <_malloc_r+0x34>
 8006602:	463c      	mov	r4, r7
 8006604:	687f      	ldr	r7, [r7, #4]
 8006606:	e7b6      	b.n	8006576 <_malloc_r+0x4a>
 8006608:	461a      	mov	r2, r3
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	42a3      	cmp	r3, r4
 800660e:	d1fb      	bne.n	8006608 <_malloc_r+0xdc>
 8006610:	2300      	movs	r3, #0
 8006612:	6053      	str	r3, [r2, #4]
 8006614:	e7de      	b.n	80065d4 <_malloc_r+0xa8>
 8006616:	230c      	movs	r3, #12
 8006618:	4630      	mov	r0, r6
 800661a:	6033      	str	r3, [r6, #0]
 800661c:	f000 f80c 	bl	8006638 <__malloc_unlock>
 8006620:	e794      	b.n	800654c <_malloc_r+0x20>
 8006622:	6005      	str	r5, [r0, #0]
 8006624:	e7d6      	b.n	80065d4 <_malloc_r+0xa8>
 8006626:	bf00      	nop
 8006628:	2000066c 	.word	0x2000066c

0800662c <__malloc_lock>:
 800662c:	4801      	ldr	r0, [pc, #4]	@ (8006634 <__malloc_lock+0x8>)
 800662e:	f7ff b8a4 	b.w	800577a <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000664 	.word	0x20000664

08006638 <__malloc_unlock>:
 8006638:	4801      	ldr	r0, [pc, #4]	@ (8006640 <__malloc_unlock+0x8>)
 800663a:	f7ff b89f 	b.w	800577c <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000664 	.word	0x20000664

08006644 <_Balloc>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	69c6      	ldr	r6, [r0, #28]
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	b976      	cbnz	r6, 800666c <_Balloc+0x28>
 800664e:	2010      	movs	r0, #16
 8006650:	f7ff ff42 	bl	80064d8 <malloc>
 8006654:	4602      	mov	r2, r0
 8006656:	61e0      	str	r0, [r4, #28]
 8006658:	b920      	cbnz	r0, 8006664 <_Balloc+0x20>
 800665a:	216b      	movs	r1, #107	@ 0x6b
 800665c:	4b17      	ldr	r3, [pc, #92]	@ (80066bc <_Balloc+0x78>)
 800665e:	4818      	ldr	r0, [pc, #96]	@ (80066c0 <_Balloc+0x7c>)
 8006660:	f002 faae 	bl	8008bc0 <__assert_func>
 8006664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006668:	6006      	str	r6, [r0, #0]
 800666a:	60c6      	str	r6, [r0, #12]
 800666c:	69e6      	ldr	r6, [r4, #28]
 800666e:	68f3      	ldr	r3, [r6, #12]
 8006670:	b183      	cbz	r3, 8006694 <_Balloc+0x50>
 8006672:	69e3      	ldr	r3, [r4, #28]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800667a:	b9b8      	cbnz	r0, 80066ac <_Balloc+0x68>
 800667c:	2101      	movs	r1, #1
 800667e:	fa01 f605 	lsl.w	r6, r1, r5
 8006682:	1d72      	adds	r2, r6, #5
 8006684:	4620      	mov	r0, r4
 8006686:	0092      	lsls	r2, r2, #2
 8006688:	f002 fab8 	bl	8008bfc <_calloc_r>
 800668c:	b160      	cbz	r0, 80066a8 <_Balloc+0x64>
 800668e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006692:	e00e      	b.n	80066b2 <_Balloc+0x6e>
 8006694:	2221      	movs	r2, #33	@ 0x21
 8006696:	2104      	movs	r1, #4
 8006698:	4620      	mov	r0, r4
 800669a:	f002 faaf 	bl	8008bfc <_calloc_r>
 800669e:	69e3      	ldr	r3, [r4, #28]
 80066a0:	60f0      	str	r0, [r6, #12]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e4      	bne.n	8006672 <_Balloc+0x2e>
 80066a8:	2000      	movs	r0, #0
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
 80066ac:	6802      	ldr	r2, [r0, #0]
 80066ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066b2:	2300      	movs	r3, #0
 80066b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066b8:	e7f7      	b.n	80066aa <_Balloc+0x66>
 80066ba:	bf00      	nop
 80066bc:	08009786 	.word	0x08009786
 80066c0:	08009806 	.word	0x08009806

080066c4 <_Bfree>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	69c6      	ldr	r6, [r0, #28]
 80066c8:	4605      	mov	r5, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	b976      	cbnz	r6, 80066ec <_Bfree+0x28>
 80066ce:	2010      	movs	r0, #16
 80066d0:	f7ff ff02 	bl	80064d8 <malloc>
 80066d4:	4602      	mov	r2, r0
 80066d6:	61e8      	str	r0, [r5, #28]
 80066d8:	b920      	cbnz	r0, 80066e4 <_Bfree+0x20>
 80066da:	218f      	movs	r1, #143	@ 0x8f
 80066dc:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <_Bfree+0x3c>)
 80066de:	4809      	ldr	r0, [pc, #36]	@ (8006704 <_Bfree+0x40>)
 80066e0:	f002 fa6e 	bl	8008bc0 <__assert_func>
 80066e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066e8:	6006      	str	r6, [r0, #0]
 80066ea:	60c6      	str	r6, [r0, #12]
 80066ec:	b13c      	cbz	r4, 80066fe <_Bfree+0x3a>
 80066ee:	69eb      	ldr	r3, [r5, #28]
 80066f0:	6862      	ldr	r2, [r4, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066f8:	6021      	str	r1, [r4, #0]
 80066fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	08009786 	.word	0x08009786
 8006704:	08009806 	.word	0x08009806

08006708 <__multadd>:
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	4607      	mov	r7, r0
 800670e:	460c      	mov	r4, r1
 8006710:	461e      	mov	r6, r3
 8006712:	2000      	movs	r0, #0
 8006714:	690d      	ldr	r5, [r1, #16]
 8006716:	f101 0c14 	add.w	ip, r1, #20
 800671a:	f8dc 3000 	ldr.w	r3, [ip]
 800671e:	3001      	adds	r0, #1
 8006720:	b299      	uxth	r1, r3
 8006722:	fb02 6101 	mla	r1, r2, r1, r6
 8006726:	0c1e      	lsrs	r6, r3, #16
 8006728:	0c0b      	lsrs	r3, r1, #16
 800672a:	fb02 3306 	mla	r3, r2, r6, r3
 800672e:	b289      	uxth	r1, r1
 8006730:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006734:	4285      	cmp	r5, r0
 8006736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800673a:	f84c 1b04 	str.w	r1, [ip], #4
 800673e:	dcec      	bgt.n	800671a <__multadd+0x12>
 8006740:	b30e      	cbz	r6, 8006786 <__multadd+0x7e>
 8006742:	68a3      	ldr	r3, [r4, #8]
 8006744:	42ab      	cmp	r3, r5
 8006746:	dc19      	bgt.n	800677c <__multadd+0x74>
 8006748:	6861      	ldr	r1, [r4, #4]
 800674a:	4638      	mov	r0, r7
 800674c:	3101      	adds	r1, #1
 800674e:	f7ff ff79 	bl	8006644 <_Balloc>
 8006752:	4680      	mov	r8, r0
 8006754:	b928      	cbnz	r0, 8006762 <__multadd+0x5a>
 8006756:	4602      	mov	r2, r0
 8006758:	21ba      	movs	r1, #186	@ 0xba
 800675a:	4b0c      	ldr	r3, [pc, #48]	@ (800678c <__multadd+0x84>)
 800675c:	480c      	ldr	r0, [pc, #48]	@ (8006790 <__multadd+0x88>)
 800675e:	f002 fa2f 	bl	8008bc0 <__assert_func>
 8006762:	6922      	ldr	r2, [r4, #16]
 8006764:	f104 010c 	add.w	r1, r4, #12
 8006768:	3202      	adds	r2, #2
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	300c      	adds	r0, #12
 800676e:	f002 fa13 	bl	8008b98 <memcpy>
 8006772:	4621      	mov	r1, r4
 8006774:	4638      	mov	r0, r7
 8006776:	f7ff ffa5 	bl	80066c4 <_Bfree>
 800677a:	4644      	mov	r4, r8
 800677c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006780:	3501      	adds	r5, #1
 8006782:	615e      	str	r6, [r3, #20]
 8006784:	6125      	str	r5, [r4, #16]
 8006786:	4620      	mov	r0, r4
 8006788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800678c:	080097f5 	.word	0x080097f5
 8006790:	08009806 	.word	0x08009806

08006794 <__s2b>:
 8006794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006798:	4615      	mov	r5, r2
 800679a:	2209      	movs	r2, #9
 800679c:	461f      	mov	r7, r3
 800679e:	3308      	adds	r3, #8
 80067a0:	460c      	mov	r4, r1
 80067a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a6:	4606      	mov	r6, r0
 80067a8:	2201      	movs	r2, #1
 80067aa:	2100      	movs	r1, #0
 80067ac:	429a      	cmp	r2, r3
 80067ae:	db09      	blt.n	80067c4 <__s2b+0x30>
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7ff ff47 	bl	8006644 <_Balloc>
 80067b6:	b940      	cbnz	r0, 80067ca <__s2b+0x36>
 80067b8:	4602      	mov	r2, r0
 80067ba:	21d3      	movs	r1, #211	@ 0xd3
 80067bc:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <__s2b+0x8c>)
 80067be:	4819      	ldr	r0, [pc, #100]	@ (8006824 <__s2b+0x90>)
 80067c0:	f002 f9fe 	bl	8008bc0 <__assert_func>
 80067c4:	0052      	lsls	r2, r2, #1
 80067c6:	3101      	adds	r1, #1
 80067c8:	e7f0      	b.n	80067ac <__s2b+0x18>
 80067ca:	9b08      	ldr	r3, [sp, #32]
 80067cc:	2d09      	cmp	r5, #9
 80067ce:	6143      	str	r3, [r0, #20]
 80067d0:	f04f 0301 	mov.w	r3, #1
 80067d4:	6103      	str	r3, [r0, #16]
 80067d6:	dd16      	ble.n	8006806 <__s2b+0x72>
 80067d8:	f104 0909 	add.w	r9, r4, #9
 80067dc:	46c8      	mov	r8, r9
 80067de:	442c      	add	r4, r5
 80067e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80067e4:	4601      	mov	r1, r0
 80067e6:	220a      	movs	r2, #10
 80067e8:	4630      	mov	r0, r6
 80067ea:	3b30      	subs	r3, #48	@ 0x30
 80067ec:	f7ff ff8c 	bl	8006708 <__multadd>
 80067f0:	45a0      	cmp	r8, r4
 80067f2:	d1f5      	bne.n	80067e0 <__s2b+0x4c>
 80067f4:	f1a5 0408 	sub.w	r4, r5, #8
 80067f8:	444c      	add	r4, r9
 80067fa:	1b2d      	subs	r5, r5, r4
 80067fc:	1963      	adds	r3, r4, r5
 80067fe:	42bb      	cmp	r3, r7
 8006800:	db04      	blt.n	800680c <__s2b+0x78>
 8006802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006806:	2509      	movs	r5, #9
 8006808:	340a      	adds	r4, #10
 800680a:	e7f6      	b.n	80067fa <__s2b+0x66>
 800680c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006810:	4601      	mov	r1, r0
 8006812:	220a      	movs	r2, #10
 8006814:	4630      	mov	r0, r6
 8006816:	3b30      	subs	r3, #48	@ 0x30
 8006818:	f7ff ff76 	bl	8006708 <__multadd>
 800681c:	e7ee      	b.n	80067fc <__s2b+0x68>
 800681e:	bf00      	nop
 8006820:	080097f5 	.word	0x080097f5
 8006824:	08009806 	.word	0x08009806

08006828 <__hi0bits>:
 8006828:	4603      	mov	r3, r0
 800682a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800682e:	bf3a      	itte	cc
 8006830:	0403      	lslcc	r3, r0, #16
 8006832:	2010      	movcc	r0, #16
 8006834:	2000      	movcs	r0, #0
 8006836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800683a:	bf3c      	itt	cc
 800683c:	021b      	lslcc	r3, r3, #8
 800683e:	3008      	addcc	r0, #8
 8006840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006844:	bf3c      	itt	cc
 8006846:	011b      	lslcc	r3, r3, #4
 8006848:	3004      	addcc	r0, #4
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684e:	bf3c      	itt	cc
 8006850:	009b      	lslcc	r3, r3, #2
 8006852:	3002      	addcc	r0, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	db05      	blt.n	8006864 <__hi0bits+0x3c>
 8006858:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800685c:	f100 0001 	add.w	r0, r0, #1
 8006860:	bf08      	it	eq
 8006862:	2020      	moveq	r0, #32
 8006864:	4770      	bx	lr

08006866 <__lo0bits>:
 8006866:	6803      	ldr	r3, [r0, #0]
 8006868:	4602      	mov	r2, r0
 800686a:	f013 0007 	ands.w	r0, r3, #7
 800686e:	d00b      	beq.n	8006888 <__lo0bits+0x22>
 8006870:	07d9      	lsls	r1, r3, #31
 8006872:	d421      	bmi.n	80068b8 <__lo0bits+0x52>
 8006874:	0798      	lsls	r0, r3, #30
 8006876:	bf49      	itett	mi
 8006878:	085b      	lsrmi	r3, r3, #1
 800687a:	089b      	lsrpl	r3, r3, #2
 800687c:	2001      	movmi	r0, #1
 800687e:	6013      	strmi	r3, [r2, #0]
 8006880:	bf5c      	itt	pl
 8006882:	2002      	movpl	r0, #2
 8006884:	6013      	strpl	r3, [r2, #0]
 8006886:	4770      	bx	lr
 8006888:	b299      	uxth	r1, r3
 800688a:	b909      	cbnz	r1, 8006890 <__lo0bits+0x2a>
 800688c:	2010      	movs	r0, #16
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	b2d9      	uxtb	r1, r3
 8006892:	b909      	cbnz	r1, 8006898 <__lo0bits+0x32>
 8006894:	3008      	adds	r0, #8
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	0719      	lsls	r1, r3, #28
 800689a:	bf04      	itt	eq
 800689c:	091b      	lsreq	r3, r3, #4
 800689e:	3004      	addeq	r0, #4
 80068a0:	0799      	lsls	r1, r3, #30
 80068a2:	bf04      	itt	eq
 80068a4:	089b      	lsreq	r3, r3, #2
 80068a6:	3002      	addeq	r0, #2
 80068a8:	07d9      	lsls	r1, r3, #31
 80068aa:	d403      	bmi.n	80068b4 <__lo0bits+0x4e>
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	f100 0001 	add.w	r0, r0, #1
 80068b2:	d003      	beq.n	80068bc <__lo0bits+0x56>
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	4770      	bx	lr
 80068b8:	2000      	movs	r0, #0
 80068ba:	4770      	bx	lr
 80068bc:	2020      	movs	r0, #32
 80068be:	4770      	bx	lr

080068c0 <__i2b>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	460c      	mov	r4, r1
 80068c4:	2101      	movs	r1, #1
 80068c6:	f7ff febd 	bl	8006644 <_Balloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	b928      	cbnz	r0, 80068da <__i2b+0x1a>
 80068ce:	f240 1145 	movw	r1, #325	@ 0x145
 80068d2:	4b04      	ldr	r3, [pc, #16]	@ (80068e4 <__i2b+0x24>)
 80068d4:	4804      	ldr	r0, [pc, #16]	@ (80068e8 <__i2b+0x28>)
 80068d6:	f002 f973 	bl	8008bc0 <__assert_func>
 80068da:	2301      	movs	r3, #1
 80068dc:	6144      	str	r4, [r0, #20]
 80068de:	6103      	str	r3, [r0, #16]
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	080097f5 	.word	0x080097f5
 80068e8:	08009806 	.word	0x08009806

080068ec <__multiply>:
 80068ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	4614      	mov	r4, r2
 80068f2:	690a      	ldr	r2, [r1, #16]
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	460f      	mov	r7, r1
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bfa2      	ittt	ge
 80068fc:	4623      	movge	r3, r4
 80068fe:	460c      	movge	r4, r1
 8006900:	461f      	movge	r7, r3
 8006902:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006906:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800690a:	68a3      	ldr	r3, [r4, #8]
 800690c:	6861      	ldr	r1, [r4, #4]
 800690e:	eb0a 0609 	add.w	r6, sl, r9
 8006912:	42b3      	cmp	r3, r6
 8006914:	b085      	sub	sp, #20
 8006916:	bfb8      	it	lt
 8006918:	3101      	addlt	r1, #1
 800691a:	f7ff fe93 	bl	8006644 <_Balloc>
 800691e:	b930      	cbnz	r0, 800692e <__multiply+0x42>
 8006920:	4602      	mov	r2, r0
 8006922:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006926:	4b43      	ldr	r3, [pc, #268]	@ (8006a34 <__multiply+0x148>)
 8006928:	4843      	ldr	r0, [pc, #268]	@ (8006a38 <__multiply+0x14c>)
 800692a:	f002 f949 	bl	8008bc0 <__assert_func>
 800692e:	f100 0514 	add.w	r5, r0, #20
 8006932:	462b      	mov	r3, r5
 8006934:	2200      	movs	r2, #0
 8006936:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800693a:	4543      	cmp	r3, r8
 800693c:	d321      	bcc.n	8006982 <__multiply+0x96>
 800693e:	f107 0114 	add.w	r1, r7, #20
 8006942:	f104 0214 	add.w	r2, r4, #20
 8006946:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800694a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	1b13      	subs	r3, r2, r4
 8006952:	3b15      	subs	r3, #21
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	3304      	adds	r3, #4
 800695a:	f104 0715 	add.w	r7, r4, #21
 800695e:	42ba      	cmp	r2, r7
 8006960:	bf38      	it	cc
 8006962:	2304      	movcc	r3, #4
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	9b02      	ldr	r3, [sp, #8]
 8006968:	9103      	str	r1, [sp, #12]
 800696a:	428b      	cmp	r3, r1
 800696c:	d80c      	bhi.n	8006988 <__multiply+0x9c>
 800696e:	2e00      	cmp	r6, #0
 8006970:	dd03      	ble.n	800697a <__multiply+0x8e>
 8006972:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006976:	2b00      	cmp	r3, #0
 8006978:	d05a      	beq.n	8006a30 <__multiply+0x144>
 800697a:	6106      	str	r6, [r0, #16]
 800697c:	b005      	add	sp, #20
 800697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006982:	f843 2b04 	str.w	r2, [r3], #4
 8006986:	e7d8      	b.n	800693a <__multiply+0x4e>
 8006988:	f8b1 a000 	ldrh.w	sl, [r1]
 800698c:	f1ba 0f00 	cmp.w	sl, #0
 8006990:	d023      	beq.n	80069da <__multiply+0xee>
 8006992:	46a9      	mov	r9, r5
 8006994:	f04f 0c00 	mov.w	ip, #0
 8006998:	f104 0e14 	add.w	lr, r4, #20
 800699c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80069a0:	f8d9 3000 	ldr.w	r3, [r9]
 80069a4:	fa1f fb87 	uxth.w	fp, r7
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	fb0a 330b 	mla	r3, sl, fp, r3
 80069ae:	4463      	add	r3, ip
 80069b0:	f8d9 c000 	ldr.w	ip, [r9]
 80069b4:	0c3f      	lsrs	r7, r7, #16
 80069b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80069ba:	fb0a c707 	mla	r7, sl, r7, ip
 80069be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80069c8:	4572      	cmp	r2, lr
 80069ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80069ce:	f849 3b04 	str.w	r3, [r9], #4
 80069d2:	d8e3      	bhi.n	800699c <__multiply+0xb0>
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	f845 c003 	str.w	ip, [r5, r3]
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	3104      	adds	r1, #4
 80069de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80069e2:	f1b9 0f00 	cmp.w	r9, #0
 80069e6:	d021      	beq.n	8006a2c <__multiply+0x140>
 80069e8:	46ae      	mov	lr, r5
 80069ea:	f04f 0a00 	mov.w	sl, #0
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	f104 0c14 	add.w	ip, r4, #20
 80069f4:	f8bc b000 	ldrh.w	fp, [ip]
 80069f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	fb09 770b 	mla	r7, r9, fp, r7
 8006a02:	4457      	add	r7, sl
 8006a04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a08:	f84e 3b04 	str.w	r3, [lr], #4
 8006a0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a14:	f8be 3000 	ldrh.w	r3, [lr]
 8006a18:	4562      	cmp	r2, ip
 8006a1a:	fb09 330a 	mla	r3, r9, sl, r3
 8006a1e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a26:	d8e5      	bhi.n	80069f4 <__multiply+0x108>
 8006a28:	9f01      	ldr	r7, [sp, #4]
 8006a2a:	51eb      	str	r3, [r5, r7]
 8006a2c:	3504      	adds	r5, #4
 8006a2e:	e79a      	b.n	8006966 <__multiply+0x7a>
 8006a30:	3e01      	subs	r6, #1
 8006a32:	e79c      	b.n	800696e <__multiply+0x82>
 8006a34:	080097f5 	.word	0x080097f5
 8006a38:	08009806 	.word	0x08009806

08006a3c <__pow5mult>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	4615      	mov	r5, r2
 8006a42:	f012 0203 	ands.w	r2, r2, #3
 8006a46:	4607      	mov	r7, r0
 8006a48:	460e      	mov	r6, r1
 8006a4a:	d007      	beq.n	8006a5c <__pow5mult+0x20>
 8006a4c:	4c25      	ldr	r4, [pc, #148]	@ (8006ae4 <__pow5mult+0xa8>)
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	2300      	movs	r3, #0
 8006a52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a56:	f7ff fe57 	bl	8006708 <__multadd>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	10ad      	asrs	r5, r5, #2
 8006a5e:	d03d      	beq.n	8006adc <__pow5mult+0xa0>
 8006a60:	69fc      	ldr	r4, [r7, #28]
 8006a62:	b97c      	cbnz	r4, 8006a84 <__pow5mult+0x48>
 8006a64:	2010      	movs	r0, #16
 8006a66:	f7ff fd37 	bl	80064d8 <malloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	61f8      	str	r0, [r7, #28]
 8006a6e:	b928      	cbnz	r0, 8006a7c <__pow5mult+0x40>
 8006a70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006a74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae8 <__pow5mult+0xac>)
 8006a76:	481d      	ldr	r0, [pc, #116]	@ (8006aec <__pow5mult+0xb0>)
 8006a78:	f002 f8a2 	bl	8008bc0 <__assert_func>
 8006a7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a80:	6004      	str	r4, [r0, #0]
 8006a82:	60c4      	str	r4, [r0, #12]
 8006a84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006a88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a8c:	b94c      	cbnz	r4, 8006aa2 <__pow5mult+0x66>
 8006a8e:	f240 2171 	movw	r1, #625	@ 0x271
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7ff ff14 	bl	80068c0 <__i2b>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006aa0:	6003      	str	r3, [r0, #0]
 8006aa2:	f04f 0900 	mov.w	r9, #0
 8006aa6:	07eb      	lsls	r3, r5, #31
 8006aa8:	d50a      	bpl.n	8006ac0 <__pow5mult+0x84>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4622      	mov	r2, r4
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f7ff ff1c 	bl	80068ec <__multiply>
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f7ff fe03 	bl	80066c4 <_Bfree>
 8006abe:	4646      	mov	r6, r8
 8006ac0:	106d      	asrs	r5, r5, #1
 8006ac2:	d00b      	beq.n	8006adc <__pow5mult+0xa0>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	b938      	cbnz	r0, 8006ad8 <__pow5mult+0x9c>
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4621      	mov	r1, r4
 8006acc:	4638      	mov	r0, r7
 8006ace:	f7ff ff0d 	bl	80068ec <__multiply>
 8006ad2:	6020      	str	r0, [r4, #0]
 8006ad4:	f8c0 9000 	str.w	r9, [r0]
 8006ad8:	4604      	mov	r4, r0
 8006ada:	e7e4      	b.n	8006aa6 <__pow5mult+0x6a>
 8006adc:	4630      	mov	r0, r6
 8006ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae2:	bf00      	nop
 8006ae4:	08009860 	.word	0x08009860
 8006ae8:	08009786 	.word	0x08009786
 8006aec:	08009806 	.word	0x08009806

08006af0 <__lshift>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	460c      	mov	r4, r1
 8006af6:	4607      	mov	r7, r0
 8006af8:	4691      	mov	r9, r2
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	6849      	ldr	r1, [r1, #4]
 8006afe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b08:	f108 0601 	add.w	r6, r8, #1
 8006b0c:	42b3      	cmp	r3, r6
 8006b0e:	db0b      	blt.n	8006b28 <__lshift+0x38>
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff fd97 	bl	8006644 <_Balloc>
 8006b16:	4605      	mov	r5, r0
 8006b18:	b948      	cbnz	r0, 8006b2e <__lshift+0x3e>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b20:	4b27      	ldr	r3, [pc, #156]	@ (8006bc0 <__lshift+0xd0>)
 8006b22:	4828      	ldr	r0, [pc, #160]	@ (8006bc4 <__lshift+0xd4>)
 8006b24:	f002 f84c 	bl	8008bc0 <__assert_func>
 8006b28:	3101      	adds	r1, #1
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	e7ee      	b.n	8006b0c <__lshift+0x1c>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f100 0114 	add.w	r1, r0, #20
 8006b34:	f100 0210 	add.w	r2, r0, #16
 8006b38:	4618      	mov	r0, r3
 8006b3a:	4553      	cmp	r3, sl
 8006b3c:	db33      	blt.n	8006ba6 <__lshift+0xb6>
 8006b3e:	6920      	ldr	r0, [r4, #16]
 8006b40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b44:	f104 0314 	add.w	r3, r4, #20
 8006b48:	f019 091f 	ands.w	r9, r9, #31
 8006b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b54:	d02b      	beq.n	8006bae <__lshift+0xbe>
 8006b56:	468a      	mov	sl, r1
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f1c9 0e20 	rsb	lr, r9, #32
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	fa00 f009 	lsl.w	r0, r0, r9
 8006b64:	4310      	orrs	r0, r2
 8006b66:	f84a 0b04 	str.w	r0, [sl], #4
 8006b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b6e:	459c      	cmp	ip, r3
 8006b70:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b74:	d8f3      	bhi.n	8006b5e <__lshift+0x6e>
 8006b76:	ebac 0304 	sub.w	r3, ip, r4
 8006b7a:	3b15      	subs	r3, #21
 8006b7c:	f023 0303 	bic.w	r3, r3, #3
 8006b80:	3304      	adds	r3, #4
 8006b82:	f104 0015 	add.w	r0, r4, #21
 8006b86:	4584      	cmp	ip, r0
 8006b88:	bf38      	it	cc
 8006b8a:	2304      	movcc	r3, #4
 8006b8c:	50ca      	str	r2, [r1, r3]
 8006b8e:	b10a      	cbz	r2, 8006b94 <__lshift+0xa4>
 8006b90:	f108 0602 	add.w	r6, r8, #2
 8006b94:	3e01      	subs	r6, #1
 8006b96:	4638      	mov	r0, r7
 8006b98:	4621      	mov	r1, r4
 8006b9a:	612e      	str	r6, [r5, #16]
 8006b9c:	f7ff fd92 	bl	80066c4 <_Bfree>
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006baa:	3301      	adds	r3, #1
 8006bac:	e7c5      	b.n	8006b3a <__lshift+0x4a>
 8006bae:	3904      	subs	r1, #4
 8006bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb4:	459c      	cmp	ip, r3
 8006bb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bba:	d8f9      	bhi.n	8006bb0 <__lshift+0xc0>
 8006bbc:	e7ea      	b.n	8006b94 <__lshift+0xa4>
 8006bbe:	bf00      	nop
 8006bc0:	080097f5 	.word	0x080097f5
 8006bc4:	08009806 	.word	0x08009806

08006bc8 <__mcmp>:
 8006bc8:	4603      	mov	r3, r0
 8006bca:	690a      	ldr	r2, [r1, #16]
 8006bcc:	6900      	ldr	r0, [r0, #16]
 8006bce:	b530      	push	{r4, r5, lr}
 8006bd0:	1a80      	subs	r0, r0, r2
 8006bd2:	d10e      	bne.n	8006bf2 <__mcmp+0x2a>
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	3114      	adds	r1, #20
 8006bd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006bdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006be0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006be4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006be8:	4295      	cmp	r5, r2
 8006bea:	d003      	beq.n	8006bf4 <__mcmp+0x2c>
 8006bec:	d205      	bcs.n	8006bfa <__mcmp+0x32>
 8006bee:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d3f3      	bcc.n	8006be0 <__mcmp+0x18>
 8006bf8:	e7fb      	b.n	8006bf2 <__mcmp+0x2a>
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	e7f9      	b.n	8006bf2 <__mcmp+0x2a>
	...

08006c00 <__mdiff>:
 8006c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	4689      	mov	r9, r1
 8006c06:	4606      	mov	r6, r0
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4648      	mov	r0, r9
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	f7ff ffdb 	bl	8006bc8 <__mcmp>
 8006c12:	1e05      	subs	r5, r0, #0
 8006c14:	d112      	bne.n	8006c3c <__mdiff+0x3c>
 8006c16:	4629      	mov	r1, r5
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff fd13 	bl	8006644 <_Balloc>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	b928      	cbnz	r0, 8006c2e <__mdiff+0x2e>
 8006c22:	f240 2137 	movw	r1, #567	@ 0x237
 8006c26:	4b3e      	ldr	r3, [pc, #248]	@ (8006d20 <__mdiff+0x120>)
 8006c28:	483e      	ldr	r0, [pc, #248]	@ (8006d24 <__mdiff+0x124>)
 8006c2a:	f001 ffc9 	bl	8008bc0 <__assert_func>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c34:	4610      	mov	r0, r2
 8006c36:	b003      	add	sp, #12
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3c:	bfbc      	itt	lt
 8006c3e:	464b      	movlt	r3, r9
 8006c40:	46a1      	movlt	r9, r4
 8006c42:	4630      	mov	r0, r6
 8006c44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c48:	bfba      	itte	lt
 8006c4a:	461c      	movlt	r4, r3
 8006c4c:	2501      	movlt	r5, #1
 8006c4e:	2500      	movge	r5, #0
 8006c50:	f7ff fcf8 	bl	8006644 <_Balloc>
 8006c54:	4602      	mov	r2, r0
 8006c56:	b918      	cbnz	r0, 8006c60 <__mdiff+0x60>
 8006c58:	f240 2145 	movw	r1, #581	@ 0x245
 8006c5c:	4b30      	ldr	r3, [pc, #192]	@ (8006d20 <__mdiff+0x120>)
 8006c5e:	e7e3      	b.n	8006c28 <__mdiff+0x28>
 8006c60:	f100 0b14 	add.w	fp, r0, #20
 8006c64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c68:	f109 0310 	add.w	r3, r9, #16
 8006c6c:	60c5      	str	r5, [r0, #12]
 8006c6e:	f04f 0c00 	mov.w	ip, #0
 8006c72:	f109 0514 	add.w	r5, r9, #20
 8006c76:	46d9      	mov	r9, fp
 8006c78:	6926      	ldr	r6, [r4, #16]
 8006c7a:	f104 0e14 	add.w	lr, r4, #20
 8006c7e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006c82:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c92:	b281      	uxth	r1, r0
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	fa1f f38a 	uxth.w	r3, sl
 8006c9a:	1a5b      	subs	r3, r3, r1
 8006c9c:	0c00      	lsrs	r0, r0, #16
 8006c9e:	4463      	add	r3, ip
 8006ca0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ca4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cae:	4576      	cmp	r6, lr
 8006cb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cb4:	f849 3b04 	str.w	r3, [r9], #4
 8006cb8:	d8e6      	bhi.n	8006c88 <__mdiff+0x88>
 8006cba:	1b33      	subs	r3, r6, r4
 8006cbc:	3b15      	subs	r3, #21
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	3415      	adds	r4, #21
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	bf38      	it	cc
 8006cca:	2304      	movcc	r3, #4
 8006ccc:	441d      	add	r5, r3
 8006cce:	445b      	add	r3, fp
 8006cd0:	461e      	mov	r6, r3
 8006cd2:	462c      	mov	r4, r5
 8006cd4:	4544      	cmp	r4, r8
 8006cd6:	d30e      	bcc.n	8006cf6 <__mdiff+0xf6>
 8006cd8:	f108 0103 	add.w	r1, r8, #3
 8006cdc:	1b49      	subs	r1, r1, r5
 8006cde:	f021 0103 	bic.w	r1, r1, #3
 8006ce2:	3d03      	subs	r5, #3
 8006ce4:	45a8      	cmp	r8, r5
 8006ce6:	bf38      	it	cc
 8006ce8:	2100      	movcc	r1, #0
 8006cea:	440b      	add	r3, r1
 8006cec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cf0:	b199      	cbz	r1, 8006d1a <__mdiff+0x11a>
 8006cf2:	6117      	str	r7, [r2, #16]
 8006cf4:	e79e      	b.n	8006c34 <__mdiff+0x34>
 8006cf6:	46e6      	mov	lr, ip
 8006cf8:	f854 1b04 	ldr.w	r1, [r4], #4
 8006cfc:	fa1f fc81 	uxth.w	ip, r1
 8006d00:	44f4      	add	ip, lr
 8006d02:	0c08      	lsrs	r0, r1, #16
 8006d04:	4471      	add	r1, lr
 8006d06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d0a:	b289      	uxth	r1, r1
 8006d0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d14:	f846 1b04 	str.w	r1, [r6], #4
 8006d18:	e7dc      	b.n	8006cd4 <__mdiff+0xd4>
 8006d1a:	3f01      	subs	r7, #1
 8006d1c:	e7e6      	b.n	8006cec <__mdiff+0xec>
 8006d1e:	bf00      	nop
 8006d20:	080097f5 	.word	0x080097f5
 8006d24:	08009806 	.word	0x08009806

08006d28 <__ulp>:
 8006d28:	4b0e      	ldr	r3, [pc, #56]	@ (8006d64 <__ulp+0x3c>)
 8006d2a:	400b      	ands	r3, r1
 8006d2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dc08      	bgt.n	8006d46 <__ulp+0x1e>
 8006d34:	425b      	negs	r3, r3
 8006d36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006d3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d3e:	da04      	bge.n	8006d4a <__ulp+0x22>
 8006d40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006d44:	4113      	asrs	r3, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	e008      	b.n	8006d5c <__ulp+0x34>
 8006d4a:	f1a2 0314 	sub.w	r3, r2, #20
 8006d4e:	2b1e      	cmp	r3, #30
 8006d50:	bfd6      	itet	le
 8006d52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006d56:	2201      	movgt	r2, #1
 8006d58:	40da      	lsrle	r2, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	7ff00000 	.word	0x7ff00000

08006d68 <__b2d>:
 8006d68:	6902      	ldr	r2, [r0, #16]
 8006d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6c:	f100 0614 	add.w	r6, r0, #20
 8006d70:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006d74:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006d78:	4f1e      	ldr	r7, [pc, #120]	@ (8006df4 <__b2d+0x8c>)
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f7ff fd54 	bl	8006828 <__hi0bits>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f1c0 0020 	rsb	r0, r0, #32
 8006d86:	2b0a      	cmp	r3, #10
 8006d88:	f1a2 0504 	sub.w	r5, r2, #4
 8006d8c:	6008      	str	r0, [r1, #0]
 8006d8e:	dc12      	bgt.n	8006db6 <__b2d+0x4e>
 8006d90:	42ae      	cmp	r6, r5
 8006d92:	bf2c      	ite	cs
 8006d94:	2200      	movcs	r2, #0
 8006d96:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006d9a:	f1c3 0c0b 	rsb	ip, r3, #11
 8006d9e:	3315      	adds	r3, #21
 8006da0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006da4:	fa04 f303 	lsl.w	r3, r4, r3
 8006da8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006dac:	ea4e 0107 	orr.w	r1, lr, r7
 8006db0:	431a      	orrs	r2, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db6:	42ae      	cmp	r6, r5
 8006db8:	bf36      	itet	cc
 8006dba:	f1a2 0508 	subcc.w	r5, r2, #8
 8006dbe:	2200      	movcs	r2, #0
 8006dc0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006dc4:	3b0b      	subs	r3, #11
 8006dc6:	d012      	beq.n	8006dee <__b2d+0x86>
 8006dc8:	f1c3 0720 	rsb	r7, r3, #32
 8006dcc:	fa22 f107 	lsr.w	r1, r2, r7
 8006dd0:	409c      	lsls	r4, r3
 8006dd2:	430c      	orrs	r4, r1
 8006dd4:	42b5      	cmp	r5, r6
 8006dd6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006dda:	bf94      	ite	ls
 8006ddc:	2400      	movls	r4, #0
 8006dde:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006de2:	409a      	lsls	r2, r3
 8006de4:	40fc      	lsrs	r4, r7
 8006de6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006dea:	4322      	orrs	r2, r4
 8006dec:	e7e1      	b.n	8006db2 <__b2d+0x4a>
 8006dee:	ea44 0107 	orr.w	r1, r4, r7
 8006df2:	e7de      	b.n	8006db2 <__b2d+0x4a>
 8006df4:	3ff00000 	.word	0x3ff00000

08006df8 <__d2b>:
 8006df8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	4690      	mov	r8, r2
 8006e00:	4699      	mov	r9, r3
 8006e02:	9e08      	ldr	r6, [sp, #32]
 8006e04:	f7ff fc1e 	bl	8006644 <_Balloc>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	b930      	cbnz	r0, 8006e1a <__d2b+0x22>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e12:	4b23      	ldr	r3, [pc, #140]	@ (8006ea0 <__d2b+0xa8>)
 8006e14:	4823      	ldr	r0, [pc, #140]	@ (8006ea4 <__d2b+0xac>)
 8006e16:	f001 fed3 	bl	8008bc0 <__assert_func>
 8006e1a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e22:	b10d      	cbz	r5, 8006e28 <__d2b+0x30>
 8006e24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	f1b8 0300 	subs.w	r3, r8, #0
 8006e2e:	d024      	beq.n	8006e7a <__d2b+0x82>
 8006e30:	4668      	mov	r0, sp
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	f7ff fd17 	bl	8006866 <__lo0bits>
 8006e38:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e3c:	b1d8      	cbz	r0, 8006e76 <__d2b+0x7e>
 8006e3e:	f1c0 0320 	rsb	r3, r0, #32
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	430b      	orrs	r3, r1
 8006e48:	40c2      	lsrs	r2, r0
 8006e4a:	6163      	str	r3, [r4, #20]
 8006e4c:	9201      	str	r2, [sp, #4]
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf0c      	ite	eq
 8006e54:	2201      	moveq	r2, #1
 8006e56:	2202      	movne	r2, #2
 8006e58:	61a3      	str	r3, [r4, #24]
 8006e5a:	6122      	str	r2, [r4, #16]
 8006e5c:	b1ad      	cbz	r5, 8006e8a <__d2b+0x92>
 8006e5e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e62:	4405      	add	r5, r0
 8006e64:	6035      	str	r5, [r6, #0]
 8006e66:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6c:	6018      	str	r0, [r3, #0]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	b002      	add	sp, #8
 8006e72:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006e76:	6161      	str	r1, [r4, #20]
 8006e78:	e7e9      	b.n	8006e4e <__d2b+0x56>
 8006e7a:	a801      	add	r0, sp, #4
 8006e7c:	f7ff fcf3 	bl	8006866 <__lo0bits>
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	6163      	str	r3, [r4, #20]
 8006e86:	3020      	adds	r0, #32
 8006e88:	e7e7      	b.n	8006e5a <__d2b+0x62>
 8006e8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e92:	6030      	str	r0, [r6, #0]
 8006e94:	6918      	ldr	r0, [r3, #16]
 8006e96:	f7ff fcc7 	bl	8006828 <__hi0bits>
 8006e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e9e:	e7e4      	b.n	8006e6a <__d2b+0x72>
 8006ea0:	080097f5 	.word	0x080097f5
 8006ea4:	08009806 	.word	0x08009806

08006ea8 <__ratio>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	b085      	sub	sp, #20
 8006eae:	e9cd 1000 	strd	r1, r0, [sp]
 8006eb2:	a902      	add	r1, sp, #8
 8006eb4:	f7ff ff58 	bl	8006d68 <__b2d>
 8006eb8:	468b      	mov	fp, r1
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460f      	mov	r7, r1
 8006ebe:	9800      	ldr	r0, [sp, #0]
 8006ec0:	a903      	add	r1, sp, #12
 8006ec2:	f7ff ff51 	bl	8006d68 <__b2d>
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	4689      	mov	r9, r1
 8006ecc:	6919      	ldr	r1, [r3, #16]
 8006ece:	9b00      	ldr	r3, [sp, #0]
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	1ac9      	subs	r1, r1, r3
 8006ed8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bfcd      	iteet	gt
 8006ee6:	463a      	movgt	r2, r7
 8006ee8:	462a      	movle	r2, r5
 8006eea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006eee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006ef2:	bfd8      	it	le
 8006ef4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4622      	mov	r2, r4
 8006efc:	4659      	mov	r1, fp
 8006efe:	f7f9 fc15 	bl	800072c <__aeabi_ddiv>
 8006f02:	b005      	add	sp, #20
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f08 <__copybits>:
 8006f08:	3901      	subs	r1, #1
 8006f0a:	b570      	push	{r4, r5, r6, lr}
 8006f0c:	1149      	asrs	r1, r1, #5
 8006f0e:	6914      	ldr	r4, [r2, #16]
 8006f10:	3101      	adds	r1, #1
 8006f12:	f102 0314 	add.w	r3, r2, #20
 8006f16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f1e:	1f05      	subs	r5, r0, #4
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	d30c      	bcc.n	8006f3e <__copybits+0x36>
 8006f24:	1aa3      	subs	r3, r4, r2
 8006f26:	3b11      	subs	r3, #17
 8006f28:	f023 0303 	bic.w	r3, r3, #3
 8006f2c:	3211      	adds	r2, #17
 8006f2e:	42a2      	cmp	r2, r4
 8006f30:	bf88      	it	hi
 8006f32:	2300      	movhi	r3, #0
 8006f34:	4418      	add	r0, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	4288      	cmp	r0, r1
 8006f3a:	d305      	bcc.n	8006f48 <__copybits+0x40>
 8006f3c:	bd70      	pop	{r4, r5, r6, pc}
 8006f3e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f42:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f46:	e7eb      	b.n	8006f20 <__copybits+0x18>
 8006f48:	f840 3b04 	str.w	r3, [r0], #4
 8006f4c:	e7f4      	b.n	8006f38 <__copybits+0x30>

08006f4e <__any_on>:
 8006f4e:	f100 0214 	add.w	r2, r0, #20
 8006f52:	6900      	ldr	r0, [r0, #16]
 8006f54:	114b      	asrs	r3, r1, #5
 8006f56:	4298      	cmp	r0, r3
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	db11      	blt.n	8006f80 <__any_on+0x32>
 8006f5c:	dd0a      	ble.n	8006f74 <__any_on+0x26>
 8006f5e:	f011 011f 	ands.w	r1, r1, #31
 8006f62:	d007      	beq.n	8006f74 <__any_on+0x26>
 8006f64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f68:	fa24 f001 	lsr.w	r0, r4, r1
 8006f6c:	fa00 f101 	lsl.w	r1, r0, r1
 8006f70:	428c      	cmp	r4, r1
 8006f72:	d10b      	bne.n	8006f8c <__any_on+0x3e>
 8006f74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d803      	bhi.n	8006f84 <__any_on+0x36>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	bd10      	pop	{r4, pc}
 8006f80:	4603      	mov	r3, r0
 8006f82:	e7f7      	b.n	8006f74 <__any_on+0x26>
 8006f84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d0f5      	beq.n	8006f78 <__any_on+0x2a>
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	e7f6      	b.n	8006f7e <__any_on+0x30>

08006f90 <sulp>:
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	460f      	mov	r7, r1
 8006f96:	4690      	mov	r8, r2
 8006f98:	f7ff fec6 	bl	8006d28 <__ulp>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	f1b8 0f00 	cmp.w	r8, #0
 8006fa4:	d011      	beq.n	8006fca <sulp+0x3a>
 8006fa6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006faa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	dd0b      	ble.n	8006fca <sulp+0x3a>
 8006fb2:	2400      	movs	r4, #0
 8006fb4:	051b      	lsls	r3, r3, #20
 8006fb6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006fba:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	f7f9 fa89 	bl	80004d8 <__aeabi_dmul>
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	460d      	mov	r5, r1
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd2:	0000      	movs	r0, r0
 8006fd4:	0000      	movs	r0, r0
	...

08006fd8 <_strtod_l>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	b09f      	sub	sp, #124	@ 0x7c
 8006fde:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006fe6:	f04f 0a00 	mov.w	sl, #0
 8006fea:	f04f 0b00 	mov.w	fp, #0
 8006fee:	460a      	mov	r2, r1
 8006ff0:	9005      	str	r0, [sp, #20]
 8006ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ff4:	7811      	ldrb	r1, [r2, #0]
 8006ff6:	292b      	cmp	r1, #43	@ 0x2b
 8006ff8:	d048      	beq.n	800708c <_strtod_l+0xb4>
 8006ffa:	d836      	bhi.n	800706a <_strtod_l+0x92>
 8006ffc:	290d      	cmp	r1, #13
 8006ffe:	d830      	bhi.n	8007062 <_strtod_l+0x8a>
 8007000:	2908      	cmp	r1, #8
 8007002:	d830      	bhi.n	8007066 <_strtod_l+0x8e>
 8007004:	2900      	cmp	r1, #0
 8007006:	d039      	beq.n	800707c <_strtod_l+0xa4>
 8007008:	2200      	movs	r2, #0
 800700a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800700c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800700e:	782a      	ldrb	r2, [r5, #0]
 8007010:	2a30      	cmp	r2, #48	@ 0x30
 8007012:	f040 80b1 	bne.w	8007178 <_strtod_l+0x1a0>
 8007016:	786a      	ldrb	r2, [r5, #1]
 8007018:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800701c:	2a58      	cmp	r2, #88	@ 0x58
 800701e:	d16c      	bne.n	80070fa <_strtod_l+0x122>
 8007020:	9302      	str	r3, [sp, #8]
 8007022:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007024:	4a8e      	ldr	r2, [pc, #568]	@ (8007260 <_strtod_l+0x288>)
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	ab1a      	add	r3, sp, #104	@ 0x68
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	9805      	ldr	r0, [sp, #20]
 800702e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007030:	a919      	add	r1, sp, #100	@ 0x64
 8007032:	f001 fe5f 	bl	8008cf4 <__gethex>
 8007036:	f010 060f 	ands.w	r6, r0, #15
 800703a:	4604      	mov	r4, r0
 800703c:	d005      	beq.n	800704a <_strtod_l+0x72>
 800703e:	2e06      	cmp	r6, #6
 8007040:	d126      	bne.n	8007090 <_strtod_l+0xb8>
 8007042:	2300      	movs	r3, #0
 8007044:	3501      	adds	r5, #1
 8007046:	9519      	str	r5, [sp, #100]	@ 0x64
 8007048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800704a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800704c:	2b00      	cmp	r3, #0
 800704e:	f040 8584 	bne.w	8007b5a <_strtod_l+0xb82>
 8007052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007054:	b1bb      	cbz	r3, 8007086 <_strtod_l+0xae>
 8007056:	4650      	mov	r0, sl
 8007058:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800705c:	b01f      	add	sp, #124	@ 0x7c
 800705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007062:	2920      	cmp	r1, #32
 8007064:	d1d0      	bne.n	8007008 <_strtod_l+0x30>
 8007066:	3201      	adds	r2, #1
 8007068:	e7c3      	b.n	8006ff2 <_strtod_l+0x1a>
 800706a:	292d      	cmp	r1, #45	@ 0x2d
 800706c:	d1cc      	bne.n	8007008 <_strtod_l+0x30>
 800706e:	2101      	movs	r1, #1
 8007070:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007072:	1c51      	adds	r1, r2, #1
 8007074:	9119      	str	r1, [sp, #100]	@ 0x64
 8007076:	7852      	ldrb	r2, [r2, #1]
 8007078:	2a00      	cmp	r2, #0
 800707a:	d1c7      	bne.n	800700c <_strtod_l+0x34>
 800707c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800707e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007080:	2b00      	cmp	r3, #0
 8007082:	f040 8568 	bne.w	8007b56 <_strtod_l+0xb7e>
 8007086:	4650      	mov	r0, sl
 8007088:	4659      	mov	r1, fp
 800708a:	e7e7      	b.n	800705c <_strtod_l+0x84>
 800708c:	2100      	movs	r1, #0
 800708e:	e7ef      	b.n	8007070 <_strtod_l+0x98>
 8007090:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007092:	b13a      	cbz	r2, 80070a4 <_strtod_l+0xcc>
 8007094:	2135      	movs	r1, #53	@ 0x35
 8007096:	a81c      	add	r0, sp, #112	@ 0x70
 8007098:	f7ff ff36 	bl	8006f08 <__copybits>
 800709c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800709e:	9805      	ldr	r0, [sp, #20]
 80070a0:	f7ff fb10 	bl	80066c4 <_Bfree>
 80070a4:	3e01      	subs	r6, #1
 80070a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80070a8:	2e04      	cmp	r6, #4
 80070aa:	d806      	bhi.n	80070ba <_strtod_l+0xe2>
 80070ac:	e8df f006 	tbb	[pc, r6]
 80070b0:	201d0314 	.word	0x201d0314
 80070b4:	14          	.byte	0x14
 80070b5:	00          	.byte	0x00
 80070b6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80070ba:	05e1      	lsls	r1, r4, #23
 80070bc:	bf48      	it	mi
 80070be:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80070c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070c6:	0d1b      	lsrs	r3, r3, #20
 80070c8:	051b      	lsls	r3, r3, #20
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1bd      	bne.n	800704a <_strtod_l+0x72>
 80070ce:	f7fe fb29 	bl	8005724 <__errno>
 80070d2:	2322      	movs	r3, #34	@ 0x22
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	e7b8      	b.n	800704a <_strtod_l+0x72>
 80070d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80070dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80070e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80070e4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80070e8:	e7e7      	b.n	80070ba <_strtod_l+0xe2>
 80070ea:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007264 <_strtod_l+0x28c>
 80070ee:	e7e4      	b.n	80070ba <_strtod_l+0xe2>
 80070f0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80070f4:	f04f 3aff 	mov.w	sl, #4294967295
 80070f8:	e7df      	b.n	80070ba <_strtod_l+0xe2>
 80070fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b30      	cmp	r3, #48	@ 0x30
 8007104:	d0f9      	beq.n	80070fa <_strtod_l+0x122>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d09f      	beq.n	800704a <_strtod_l+0x72>
 800710a:	2301      	movs	r3, #1
 800710c:	9309      	str	r3, [sp, #36]	@ 0x24
 800710e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007110:	220a      	movs	r2, #10
 8007112:	930c      	str	r3, [sp, #48]	@ 0x30
 8007114:	2300      	movs	r3, #0
 8007116:	461f      	mov	r7, r3
 8007118:	9308      	str	r3, [sp, #32]
 800711a:	930a      	str	r3, [sp, #40]	@ 0x28
 800711c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800711e:	7805      	ldrb	r5, [r0, #0]
 8007120:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007124:	b2d9      	uxtb	r1, r3
 8007126:	2909      	cmp	r1, #9
 8007128:	d928      	bls.n	800717c <_strtod_l+0x1a4>
 800712a:	2201      	movs	r2, #1
 800712c:	494e      	ldr	r1, [pc, #312]	@ (8007268 <_strtod_l+0x290>)
 800712e:	f7fe fa9c 	bl	800566a <strncmp>
 8007132:	2800      	cmp	r0, #0
 8007134:	d032      	beq.n	800719c <_strtod_l+0x1c4>
 8007136:	2000      	movs	r0, #0
 8007138:	462a      	mov	r2, r5
 800713a:	4681      	mov	r9, r0
 800713c:	463d      	mov	r5, r7
 800713e:	4603      	mov	r3, r0
 8007140:	2a65      	cmp	r2, #101	@ 0x65
 8007142:	d001      	beq.n	8007148 <_strtod_l+0x170>
 8007144:	2a45      	cmp	r2, #69	@ 0x45
 8007146:	d114      	bne.n	8007172 <_strtod_l+0x19a>
 8007148:	b91d      	cbnz	r5, 8007152 <_strtod_l+0x17a>
 800714a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800714c:	4302      	orrs	r2, r0
 800714e:	d095      	beq.n	800707c <_strtod_l+0xa4>
 8007150:	2500      	movs	r5, #0
 8007152:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007154:	1c62      	adds	r2, r4, #1
 8007156:	9219      	str	r2, [sp, #100]	@ 0x64
 8007158:	7862      	ldrb	r2, [r4, #1]
 800715a:	2a2b      	cmp	r2, #43	@ 0x2b
 800715c:	d077      	beq.n	800724e <_strtod_l+0x276>
 800715e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007160:	d07b      	beq.n	800725a <_strtod_l+0x282>
 8007162:	f04f 0c00 	mov.w	ip, #0
 8007166:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800716a:	2909      	cmp	r1, #9
 800716c:	f240 8082 	bls.w	8007274 <_strtod_l+0x29c>
 8007170:	9419      	str	r4, [sp, #100]	@ 0x64
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	e0a2      	b.n	80072be <_strtod_l+0x2e6>
 8007178:	2300      	movs	r3, #0
 800717a:	e7c7      	b.n	800710c <_strtod_l+0x134>
 800717c:	2f08      	cmp	r7, #8
 800717e:	bfd5      	itete	le
 8007180:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007182:	9908      	ldrgt	r1, [sp, #32]
 8007184:	fb02 3301 	mlale	r3, r2, r1, r3
 8007188:	fb02 3301 	mlagt	r3, r2, r1, r3
 800718c:	f100 0001 	add.w	r0, r0, #1
 8007190:	bfd4      	ite	le
 8007192:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007194:	9308      	strgt	r3, [sp, #32]
 8007196:	3701      	adds	r7, #1
 8007198:	9019      	str	r0, [sp, #100]	@ 0x64
 800719a:	e7bf      	b.n	800711c <_strtod_l+0x144>
 800719c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80071a2:	785a      	ldrb	r2, [r3, #1]
 80071a4:	b37f      	cbz	r7, 8007206 <_strtod_l+0x22e>
 80071a6:	4681      	mov	r9, r0
 80071a8:	463d      	mov	r5, r7
 80071aa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80071ae:	2b09      	cmp	r3, #9
 80071b0:	d912      	bls.n	80071d8 <_strtod_l+0x200>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7c4      	b.n	8007140 <_strtod_l+0x168>
 80071b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071b8:	3001      	adds	r0, #1
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80071be:	785a      	ldrb	r2, [r3, #1]
 80071c0:	2a30      	cmp	r2, #48	@ 0x30
 80071c2:	d0f8      	beq.n	80071b6 <_strtod_l+0x1de>
 80071c4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	f200 84cb 	bhi.w	8007b64 <_strtod_l+0xb8c>
 80071ce:	4681      	mov	r9, r0
 80071d0:	2000      	movs	r0, #0
 80071d2:	4605      	mov	r5, r0
 80071d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80071d8:	3a30      	subs	r2, #48	@ 0x30
 80071da:	f100 0301 	add.w	r3, r0, #1
 80071de:	d02a      	beq.n	8007236 <_strtod_l+0x25e>
 80071e0:	4499      	add	r9, r3
 80071e2:	210a      	movs	r1, #10
 80071e4:	462b      	mov	r3, r5
 80071e6:	eb00 0c05 	add.w	ip, r0, r5
 80071ea:	4563      	cmp	r3, ip
 80071ec:	d10d      	bne.n	800720a <_strtod_l+0x232>
 80071ee:	1c69      	adds	r1, r5, #1
 80071f0:	4401      	add	r1, r0
 80071f2:	4428      	add	r0, r5
 80071f4:	2808      	cmp	r0, #8
 80071f6:	dc16      	bgt.n	8007226 <_strtod_l+0x24e>
 80071f8:	230a      	movs	r3, #10
 80071fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071fc:	fb03 2300 	mla	r3, r3, r0, r2
 8007200:	930a      	str	r3, [sp, #40]	@ 0x28
 8007202:	2300      	movs	r3, #0
 8007204:	e018      	b.n	8007238 <_strtod_l+0x260>
 8007206:	4638      	mov	r0, r7
 8007208:	e7da      	b.n	80071c0 <_strtod_l+0x1e8>
 800720a:	2b08      	cmp	r3, #8
 800720c:	f103 0301 	add.w	r3, r3, #1
 8007210:	dc03      	bgt.n	800721a <_strtod_l+0x242>
 8007212:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007214:	434e      	muls	r6, r1
 8007216:	960a      	str	r6, [sp, #40]	@ 0x28
 8007218:	e7e7      	b.n	80071ea <_strtod_l+0x212>
 800721a:	2b10      	cmp	r3, #16
 800721c:	bfde      	ittt	le
 800721e:	9e08      	ldrle	r6, [sp, #32]
 8007220:	434e      	mulle	r6, r1
 8007222:	9608      	strle	r6, [sp, #32]
 8007224:	e7e1      	b.n	80071ea <_strtod_l+0x212>
 8007226:	280f      	cmp	r0, #15
 8007228:	dceb      	bgt.n	8007202 <_strtod_l+0x22a>
 800722a:	230a      	movs	r3, #10
 800722c:	9808      	ldr	r0, [sp, #32]
 800722e:	fb03 2300 	mla	r3, r3, r0, r2
 8007232:	9308      	str	r3, [sp, #32]
 8007234:	e7e5      	b.n	8007202 <_strtod_l+0x22a>
 8007236:	4629      	mov	r1, r5
 8007238:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800723a:	460d      	mov	r5, r1
 800723c:	1c50      	adds	r0, r2, #1
 800723e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007240:	7852      	ldrb	r2, [r2, #1]
 8007242:	4618      	mov	r0, r3
 8007244:	e7b1      	b.n	80071aa <_strtod_l+0x1d2>
 8007246:	f04f 0900 	mov.w	r9, #0
 800724a:	2301      	movs	r3, #1
 800724c:	e77d      	b.n	800714a <_strtod_l+0x172>
 800724e:	f04f 0c00 	mov.w	ip, #0
 8007252:	1ca2      	adds	r2, r4, #2
 8007254:	9219      	str	r2, [sp, #100]	@ 0x64
 8007256:	78a2      	ldrb	r2, [r4, #2]
 8007258:	e785      	b.n	8007166 <_strtod_l+0x18e>
 800725a:	f04f 0c01 	mov.w	ip, #1
 800725e:	e7f8      	b.n	8007252 <_strtod_l+0x27a>
 8007260:	08009978 	.word	0x08009978
 8007264:	7ff00000 	.word	0x7ff00000
 8007268:	08009960 	.word	0x08009960
 800726c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800726e:	1c51      	adds	r1, r2, #1
 8007270:	9119      	str	r1, [sp, #100]	@ 0x64
 8007272:	7852      	ldrb	r2, [r2, #1]
 8007274:	2a30      	cmp	r2, #48	@ 0x30
 8007276:	d0f9      	beq.n	800726c <_strtod_l+0x294>
 8007278:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800727c:	2908      	cmp	r1, #8
 800727e:	f63f af78 	bhi.w	8007172 <_strtod_l+0x19a>
 8007282:	f04f 080a 	mov.w	r8, #10
 8007286:	3a30      	subs	r2, #48	@ 0x30
 8007288:	920e      	str	r2, [sp, #56]	@ 0x38
 800728a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800728c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800728e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007290:	1c56      	adds	r6, r2, #1
 8007292:	9619      	str	r6, [sp, #100]	@ 0x64
 8007294:	7852      	ldrb	r2, [r2, #1]
 8007296:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800729a:	f1be 0f09 	cmp.w	lr, #9
 800729e:	d939      	bls.n	8007314 <_strtod_l+0x33c>
 80072a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80072a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80072a6:	1a76      	subs	r6, r6, r1
 80072a8:	2e08      	cmp	r6, #8
 80072aa:	dc03      	bgt.n	80072b4 <_strtod_l+0x2dc>
 80072ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80072ae:	4588      	cmp	r8, r1
 80072b0:	bfa8      	it	ge
 80072b2:	4688      	movge	r8, r1
 80072b4:	f1bc 0f00 	cmp.w	ip, #0
 80072b8:	d001      	beq.n	80072be <_strtod_l+0x2e6>
 80072ba:	f1c8 0800 	rsb	r8, r8, #0
 80072be:	2d00      	cmp	r5, #0
 80072c0:	d14e      	bne.n	8007360 <_strtod_l+0x388>
 80072c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072c4:	4308      	orrs	r0, r1
 80072c6:	f47f aec0 	bne.w	800704a <_strtod_l+0x72>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f47f aed6 	bne.w	800707c <_strtod_l+0xa4>
 80072d0:	2a69      	cmp	r2, #105	@ 0x69
 80072d2:	d028      	beq.n	8007326 <_strtod_l+0x34e>
 80072d4:	dc25      	bgt.n	8007322 <_strtod_l+0x34a>
 80072d6:	2a49      	cmp	r2, #73	@ 0x49
 80072d8:	d025      	beq.n	8007326 <_strtod_l+0x34e>
 80072da:	2a4e      	cmp	r2, #78	@ 0x4e
 80072dc:	f47f aece 	bne.w	800707c <_strtod_l+0xa4>
 80072e0:	499a      	ldr	r1, [pc, #616]	@ (800754c <_strtod_l+0x574>)
 80072e2:	a819      	add	r0, sp, #100	@ 0x64
 80072e4:	f001 ff28 	bl	8009138 <__match>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f43f aec7 	beq.w	800707c <_strtod_l+0xa4>
 80072ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b28      	cmp	r3, #40	@ 0x28
 80072f4:	d12e      	bne.n	8007354 <_strtod_l+0x37c>
 80072f6:	4996      	ldr	r1, [pc, #600]	@ (8007550 <_strtod_l+0x578>)
 80072f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80072fa:	a819      	add	r0, sp, #100	@ 0x64
 80072fc:	f001 ff30 	bl	8009160 <__hexnan>
 8007300:	2805      	cmp	r0, #5
 8007302:	d127      	bne.n	8007354 <_strtod_l+0x37c>
 8007304:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007306:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800730a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800730e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007312:	e69a      	b.n	800704a <_strtod_l+0x72>
 8007314:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007316:	fb08 2101 	mla	r1, r8, r1, r2
 800731a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800731e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007320:	e7b5      	b.n	800728e <_strtod_l+0x2b6>
 8007322:	2a6e      	cmp	r2, #110	@ 0x6e
 8007324:	e7da      	b.n	80072dc <_strtod_l+0x304>
 8007326:	498b      	ldr	r1, [pc, #556]	@ (8007554 <_strtod_l+0x57c>)
 8007328:	a819      	add	r0, sp, #100	@ 0x64
 800732a:	f001 ff05 	bl	8009138 <__match>
 800732e:	2800      	cmp	r0, #0
 8007330:	f43f aea4 	beq.w	800707c <_strtod_l+0xa4>
 8007334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007336:	4988      	ldr	r1, [pc, #544]	@ (8007558 <_strtod_l+0x580>)
 8007338:	3b01      	subs	r3, #1
 800733a:	a819      	add	r0, sp, #100	@ 0x64
 800733c:	9319      	str	r3, [sp, #100]	@ 0x64
 800733e:	f001 fefb 	bl	8009138 <__match>
 8007342:	b910      	cbnz	r0, 800734a <_strtod_l+0x372>
 8007344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007346:	3301      	adds	r3, #1
 8007348:	9319      	str	r3, [sp, #100]	@ 0x64
 800734a:	f04f 0a00 	mov.w	sl, #0
 800734e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800755c <_strtod_l+0x584>
 8007352:	e67a      	b.n	800704a <_strtod_l+0x72>
 8007354:	4882      	ldr	r0, [pc, #520]	@ (8007560 <_strtod_l+0x588>)
 8007356:	f001 fc2d 	bl	8008bb4 <nan>
 800735a:	4682      	mov	sl, r0
 800735c:	468b      	mov	fp, r1
 800735e:	e674      	b.n	800704a <_strtod_l+0x72>
 8007360:	eba8 0309 	sub.w	r3, r8, r9
 8007364:	2f00      	cmp	r7, #0
 8007366:	bf08      	it	eq
 8007368:	462f      	moveq	r7, r5
 800736a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800736c:	2d10      	cmp	r5, #16
 800736e:	462c      	mov	r4, r5
 8007370:	9309      	str	r3, [sp, #36]	@ 0x24
 8007372:	bfa8      	it	ge
 8007374:	2410      	movge	r4, #16
 8007376:	f7f9 f835 	bl	80003e4 <__aeabi_ui2d>
 800737a:	2d09      	cmp	r5, #9
 800737c:	4682      	mov	sl, r0
 800737e:	468b      	mov	fp, r1
 8007380:	dc11      	bgt.n	80073a6 <_strtod_l+0x3ce>
 8007382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	f43f ae60 	beq.w	800704a <_strtod_l+0x72>
 800738a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738c:	dd76      	ble.n	800747c <_strtod_l+0x4a4>
 800738e:	2b16      	cmp	r3, #22
 8007390:	dc5d      	bgt.n	800744e <_strtod_l+0x476>
 8007392:	4974      	ldr	r1, [pc, #464]	@ (8007564 <_strtod_l+0x58c>)
 8007394:	4652      	mov	r2, sl
 8007396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800739a:	465b      	mov	r3, fp
 800739c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a0:	f7f9 f89a 	bl	80004d8 <__aeabi_dmul>
 80073a4:	e7d9      	b.n	800735a <_strtod_l+0x382>
 80073a6:	4b6f      	ldr	r3, [pc, #444]	@ (8007564 <_strtod_l+0x58c>)
 80073a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80073b0:	f7f9 f892 	bl	80004d8 <__aeabi_dmul>
 80073b4:	4682      	mov	sl, r0
 80073b6:	9808      	ldr	r0, [sp, #32]
 80073b8:	468b      	mov	fp, r1
 80073ba:	f7f9 f813 	bl	80003e4 <__aeabi_ui2d>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4650      	mov	r0, sl
 80073c4:	4659      	mov	r1, fp
 80073c6:	f7f8 fed1 	bl	800016c <__adddf3>
 80073ca:	2d0f      	cmp	r5, #15
 80073cc:	4682      	mov	sl, r0
 80073ce:	468b      	mov	fp, r1
 80073d0:	ddd7      	ble.n	8007382 <_strtod_l+0x3aa>
 80073d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d4:	1b2c      	subs	r4, r5, r4
 80073d6:	441c      	add	r4, r3
 80073d8:	2c00      	cmp	r4, #0
 80073da:	f340 8096 	ble.w	800750a <_strtod_l+0x532>
 80073de:	f014 030f 	ands.w	r3, r4, #15
 80073e2:	d00a      	beq.n	80073fa <_strtod_l+0x422>
 80073e4:	495f      	ldr	r1, [pc, #380]	@ (8007564 <_strtod_l+0x58c>)
 80073e6:	4652      	mov	r2, sl
 80073e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f0:	465b      	mov	r3, fp
 80073f2:	f7f9 f871 	bl	80004d8 <__aeabi_dmul>
 80073f6:	4682      	mov	sl, r0
 80073f8:	468b      	mov	fp, r1
 80073fa:	f034 040f 	bics.w	r4, r4, #15
 80073fe:	d073      	beq.n	80074e8 <_strtod_l+0x510>
 8007400:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007404:	dd48      	ble.n	8007498 <_strtod_l+0x4c0>
 8007406:	2400      	movs	r4, #0
 8007408:	46a0      	mov	r8, r4
 800740a:	46a1      	mov	r9, r4
 800740c:	940a      	str	r4, [sp, #40]	@ 0x28
 800740e:	2322      	movs	r3, #34	@ 0x22
 8007410:	f04f 0a00 	mov.w	sl, #0
 8007414:	9a05      	ldr	r2, [sp, #20]
 8007416:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800755c <_strtod_l+0x584>
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	f43f ae13 	beq.w	800704a <_strtod_l+0x72>
 8007424:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007426:	9805      	ldr	r0, [sp, #20]
 8007428:	f7ff f94c 	bl	80066c4 <_Bfree>
 800742c:	4649      	mov	r1, r9
 800742e:	9805      	ldr	r0, [sp, #20]
 8007430:	f7ff f948 	bl	80066c4 <_Bfree>
 8007434:	4641      	mov	r1, r8
 8007436:	9805      	ldr	r0, [sp, #20]
 8007438:	f7ff f944 	bl	80066c4 <_Bfree>
 800743c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800743e:	9805      	ldr	r0, [sp, #20]
 8007440:	f7ff f940 	bl	80066c4 <_Bfree>
 8007444:	4621      	mov	r1, r4
 8007446:	9805      	ldr	r0, [sp, #20]
 8007448:	f7ff f93c 	bl	80066c4 <_Bfree>
 800744c:	e5fd      	b.n	800704a <_strtod_l+0x72>
 800744e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007450:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007454:	4293      	cmp	r3, r2
 8007456:	dbbc      	blt.n	80073d2 <_strtod_l+0x3fa>
 8007458:	4c42      	ldr	r4, [pc, #264]	@ (8007564 <_strtod_l+0x58c>)
 800745a:	f1c5 050f 	rsb	r5, r5, #15
 800745e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007462:	4652      	mov	r2, sl
 8007464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007468:	465b      	mov	r3, fp
 800746a:	f7f9 f835 	bl	80004d8 <__aeabi_dmul>
 800746e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007470:	1b5d      	subs	r5, r3, r5
 8007472:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007476:	e9d4 2300 	ldrd	r2, r3, [r4]
 800747a:	e791      	b.n	80073a0 <_strtod_l+0x3c8>
 800747c:	3316      	adds	r3, #22
 800747e:	dba8      	blt.n	80073d2 <_strtod_l+0x3fa>
 8007480:	4b38      	ldr	r3, [pc, #224]	@ (8007564 <_strtod_l+0x58c>)
 8007482:	eba9 0808 	sub.w	r8, r9, r8
 8007486:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800748a:	4650      	mov	r0, sl
 800748c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007490:	4659      	mov	r1, fp
 8007492:	f7f9 f94b 	bl	800072c <__aeabi_ddiv>
 8007496:	e760      	b.n	800735a <_strtod_l+0x382>
 8007498:	4b33      	ldr	r3, [pc, #204]	@ (8007568 <_strtod_l+0x590>)
 800749a:	4650      	mov	r0, sl
 800749c:	9308      	str	r3, [sp, #32]
 800749e:	2300      	movs	r3, #0
 80074a0:	4659      	mov	r1, fp
 80074a2:	461e      	mov	r6, r3
 80074a4:	1124      	asrs	r4, r4, #4
 80074a6:	2c01      	cmp	r4, #1
 80074a8:	dc21      	bgt.n	80074ee <_strtod_l+0x516>
 80074aa:	b10b      	cbz	r3, 80074b0 <_strtod_l+0x4d8>
 80074ac:	4682      	mov	sl, r0
 80074ae:	468b      	mov	fp, r1
 80074b0:	492d      	ldr	r1, [pc, #180]	@ (8007568 <_strtod_l+0x590>)
 80074b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80074b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80074ba:	4652      	mov	r2, sl
 80074bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074c0:	465b      	mov	r3, fp
 80074c2:	f7f9 f809 	bl	80004d8 <__aeabi_dmul>
 80074c6:	4b25      	ldr	r3, [pc, #148]	@ (800755c <_strtod_l+0x584>)
 80074c8:	460a      	mov	r2, r1
 80074ca:	400b      	ands	r3, r1
 80074cc:	4927      	ldr	r1, [pc, #156]	@ (800756c <_strtod_l+0x594>)
 80074ce:	4682      	mov	sl, r0
 80074d0:	428b      	cmp	r3, r1
 80074d2:	d898      	bhi.n	8007406 <_strtod_l+0x42e>
 80074d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80074d8:	428b      	cmp	r3, r1
 80074da:	bf86      	itte	hi
 80074dc:	f04f 3aff 	movhi.w	sl, #4294967295
 80074e0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007570 <_strtod_l+0x598>
 80074e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80074e8:	2300      	movs	r3, #0
 80074ea:	9308      	str	r3, [sp, #32]
 80074ec:	e07a      	b.n	80075e4 <_strtod_l+0x60c>
 80074ee:	07e2      	lsls	r2, r4, #31
 80074f0:	d505      	bpl.n	80074fe <_strtod_l+0x526>
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f7f8 ffee 	bl	80004d8 <__aeabi_dmul>
 80074fc:	2301      	movs	r3, #1
 80074fe:	9a08      	ldr	r2, [sp, #32]
 8007500:	3601      	adds	r6, #1
 8007502:	3208      	adds	r2, #8
 8007504:	1064      	asrs	r4, r4, #1
 8007506:	9208      	str	r2, [sp, #32]
 8007508:	e7cd      	b.n	80074a6 <_strtod_l+0x4ce>
 800750a:	d0ed      	beq.n	80074e8 <_strtod_l+0x510>
 800750c:	4264      	negs	r4, r4
 800750e:	f014 020f 	ands.w	r2, r4, #15
 8007512:	d00a      	beq.n	800752a <_strtod_l+0x552>
 8007514:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <_strtod_l+0x58c>)
 8007516:	4650      	mov	r0, sl
 8007518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800751c:	4659      	mov	r1, fp
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f7f9 f903 	bl	800072c <__aeabi_ddiv>
 8007526:	4682      	mov	sl, r0
 8007528:	468b      	mov	fp, r1
 800752a:	1124      	asrs	r4, r4, #4
 800752c:	d0dc      	beq.n	80074e8 <_strtod_l+0x510>
 800752e:	2c1f      	cmp	r4, #31
 8007530:	dd20      	ble.n	8007574 <_strtod_l+0x59c>
 8007532:	2400      	movs	r4, #0
 8007534:	46a0      	mov	r8, r4
 8007536:	46a1      	mov	r9, r4
 8007538:	940a      	str	r4, [sp, #40]	@ 0x28
 800753a:	2322      	movs	r3, #34	@ 0x22
 800753c:	9a05      	ldr	r2, [sp, #20]
 800753e:	f04f 0a00 	mov.w	sl, #0
 8007542:	f04f 0b00 	mov.w	fp, #0
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	e768      	b.n	800741c <_strtod_l+0x444>
 800754a:	bf00      	nop
 800754c:	0800974f 	.word	0x0800974f
 8007550:	08009964 	.word	0x08009964
 8007554:	08009747 	.word	0x08009747
 8007558:	0800977c 	.word	0x0800977c
 800755c:	7ff00000 	.word	0x7ff00000
 8007560:	08009b28 	.word	0x08009b28
 8007564:	08009898 	.word	0x08009898
 8007568:	08009870 	.word	0x08009870
 800756c:	7ca00000 	.word	0x7ca00000
 8007570:	7fefffff 	.word	0x7fefffff
 8007574:	f014 0310 	ands.w	r3, r4, #16
 8007578:	bf18      	it	ne
 800757a:	236a      	movne	r3, #106	@ 0x6a
 800757c:	4650      	mov	r0, sl
 800757e:	9308      	str	r3, [sp, #32]
 8007580:	4659      	mov	r1, fp
 8007582:	2300      	movs	r3, #0
 8007584:	4ea9      	ldr	r6, [pc, #676]	@ (800782c <_strtod_l+0x854>)
 8007586:	07e2      	lsls	r2, r4, #31
 8007588:	d504      	bpl.n	8007594 <_strtod_l+0x5bc>
 800758a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800758e:	f7f8 ffa3 	bl	80004d8 <__aeabi_dmul>
 8007592:	2301      	movs	r3, #1
 8007594:	1064      	asrs	r4, r4, #1
 8007596:	f106 0608 	add.w	r6, r6, #8
 800759a:	d1f4      	bne.n	8007586 <_strtod_l+0x5ae>
 800759c:	b10b      	cbz	r3, 80075a2 <_strtod_l+0x5ca>
 800759e:	4682      	mov	sl, r0
 80075a0:	468b      	mov	fp, r1
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	b1b3      	cbz	r3, 80075d4 <_strtod_l+0x5fc>
 80075a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80075aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	4659      	mov	r1, fp
 80075b2:	dd0f      	ble.n	80075d4 <_strtod_l+0x5fc>
 80075b4:	2b1f      	cmp	r3, #31
 80075b6:	dd57      	ble.n	8007668 <_strtod_l+0x690>
 80075b8:	2b34      	cmp	r3, #52	@ 0x34
 80075ba:	bfd8      	it	le
 80075bc:	f04f 33ff 	movle.w	r3, #4294967295
 80075c0:	f04f 0a00 	mov.w	sl, #0
 80075c4:	bfcf      	iteee	gt
 80075c6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80075ca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80075ce:	4093      	lslle	r3, r2
 80075d0:	ea03 0b01 	andle.w	fp, r3, r1
 80075d4:	2200      	movs	r2, #0
 80075d6:	2300      	movs	r3, #0
 80075d8:	4650      	mov	r0, sl
 80075da:	4659      	mov	r1, fp
 80075dc:	f7f9 f9e4 	bl	80009a8 <__aeabi_dcmpeq>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d1a6      	bne.n	8007532 <_strtod_l+0x55a>
 80075e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075e6:	463a      	mov	r2, r7
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80075ec:	462b      	mov	r3, r5
 80075ee:	9805      	ldr	r0, [sp, #20]
 80075f0:	f7ff f8d0 	bl	8006794 <__s2b>
 80075f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f af05 	beq.w	8007406 <_strtod_l+0x42e>
 80075fc:	2400      	movs	r4, #0
 80075fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007600:	eba9 0308 	sub.w	r3, r9, r8
 8007604:	2a00      	cmp	r2, #0
 8007606:	bfa8      	it	ge
 8007608:	2300      	movge	r3, #0
 800760a:	46a0      	mov	r8, r4
 800760c:	9312      	str	r3, [sp, #72]	@ 0x48
 800760e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007612:	9316      	str	r3, [sp, #88]	@ 0x58
 8007614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007616:	9805      	ldr	r0, [sp, #20]
 8007618:	6859      	ldr	r1, [r3, #4]
 800761a:	f7ff f813 	bl	8006644 <_Balloc>
 800761e:	4681      	mov	r9, r0
 8007620:	2800      	cmp	r0, #0
 8007622:	f43f aef4 	beq.w	800740e <_strtod_l+0x436>
 8007626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007628:	300c      	adds	r0, #12
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	f103 010c 	add.w	r1, r3, #12
 8007630:	3202      	adds	r2, #2
 8007632:	0092      	lsls	r2, r2, #2
 8007634:	f001 fab0 	bl	8008b98 <memcpy>
 8007638:	ab1c      	add	r3, sp, #112	@ 0x70
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	4652      	mov	r2, sl
 8007642:	465b      	mov	r3, fp
 8007644:	9805      	ldr	r0, [sp, #20]
 8007646:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800764a:	f7ff fbd5 	bl	8006df8 <__d2b>
 800764e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007650:	2800      	cmp	r0, #0
 8007652:	f43f aedc 	beq.w	800740e <_strtod_l+0x436>
 8007656:	2101      	movs	r1, #1
 8007658:	9805      	ldr	r0, [sp, #20]
 800765a:	f7ff f931 	bl	80068c0 <__i2b>
 800765e:	4680      	mov	r8, r0
 8007660:	b948      	cbnz	r0, 8007676 <_strtod_l+0x69e>
 8007662:	f04f 0800 	mov.w	r8, #0
 8007666:	e6d2      	b.n	800740e <_strtod_l+0x436>
 8007668:	f04f 32ff 	mov.w	r2, #4294967295
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	ea03 0a0a 	and.w	sl, r3, sl
 8007674:	e7ae      	b.n	80075d4 <_strtod_l+0x5fc>
 8007676:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007678:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800767a:	2d00      	cmp	r5, #0
 800767c:	bfab      	itete	ge
 800767e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007680:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007682:	18ef      	addge	r7, r5, r3
 8007684:	1b5e      	sublt	r6, r3, r5
 8007686:	9b08      	ldr	r3, [sp, #32]
 8007688:	bfa8      	it	ge
 800768a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800768c:	eba5 0503 	sub.w	r5, r5, r3
 8007690:	4415      	add	r5, r2
 8007692:	4b67      	ldr	r3, [pc, #412]	@ (8007830 <_strtod_l+0x858>)
 8007694:	f105 35ff 	add.w	r5, r5, #4294967295
 8007698:	bfb8      	it	lt
 800769a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800769c:	429d      	cmp	r5, r3
 800769e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80076a2:	da50      	bge.n	8007746 <_strtod_l+0x76e>
 80076a4:	1b5b      	subs	r3, r3, r5
 80076a6:	2b1f      	cmp	r3, #31
 80076a8:	f04f 0101 	mov.w	r1, #1
 80076ac:	eba2 0203 	sub.w	r2, r2, r3
 80076b0:	dc3d      	bgt.n	800772e <_strtod_l+0x756>
 80076b2:	fa01 f303 	lsl.w	r3, r1, r3
 80076b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076b8:	2300      	movs	r3, #0
 80076ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80076bc:	18bd      	adds	r5, r7, r2
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	42af      	cmp	r7, r5
 80076c2:	4416      	add	r6, r2
 80076c4:	441e      	add	r6, r3
 80076c6:	463b      	mov	r3, r7
 80076c8:	bfa8      	it	ge
 80076ca:	462b      	movge	r3, r5
 80076cc:	42b3      	cmp	r3, r6
 80076ce:	bfa8      	it	ge
 80076d0:	4633      	movge	r3, r6
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bfc2      	ittt	gt
 80076d6:	1aed      	subgt	r5, r5, r3
 80076d8:	1af6      	subgt	r6, r6, r3
 80076da:	1aff      	subgt	r7, r7, r3
 80076dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dd16      	ble.n	8007710 <_strtod_l+0x738>
 80076e2:	4641      	mov	r1, r8
 80076e4:	461a      	mov	r2, r3
 80076e6:	9805      	ldr	r0, [sp, #20]
 80076e8:	f7ff f9a8 	bl	8006a3c <__pow5mult>
 80076ec:	4680      	mov	r8, r0
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d0b7      	beq.n	8007662 <_strtod_l+0x68a>
 80076f2:	4601      	mov	r1, r0
 80076f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80076f6:	9805      	ldr	r0, [sp, #20]
 80076f8:	f7ff f8f8 	bl	80068ec <__multiply>
 80076fc:	900e      	str	r0, [sp, #56]	@ 0x38
 80076fe:	2800      	cmp	r0, #0
 8007700:	f43f ae85 	beq.w	800740e <_strtod_l+0x436>
 8007704:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007706:	9805      	ldr	r0, [sp, #20]
 8007708:	f7fe ffdc 	bl	80066c4 <_Bfree>
 800770c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800770e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007710:	2d00      	cmp	r5, #0
 8007712:	dc1d      	bgt.n	8007750 <_strtod_l+0x778>
 8007714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd23      	ble.n	8007762 <_strtod_l+0x78a>
 800771a:	4649      	mov	r1, r9
 800771c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800771e:	9805      	ldr	r0, [sp, #20]
 8007720:	f7ff f98c 	bl	8006a3c <__pow5mult>
 8007724:	4681      	mov	r9, r0
 8007726:	b9e0      	cbnz	r0, 8007762 <_strtod_l+0x78a>
 8007728:	f04f 0900 	mov.w	r9, #0
 800772c:	e66f      	b.n	800740e <_strtod_l+0x436>
 800772e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007732:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007736:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800773a:	35e2      	adds	r5, #226	@ 0xe2
 800773c:	fa01 f305 	lsl.w	r3, r1, r5
 8007740:	9310      	str	r3, [sp, #64]	@ 0x40
 8007742:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007744:	e7ba      	b.n	80076bc <_strtod_l+0x6e4>
 8007746:	2300      	movs	r3, #0
 8007748:	9310      	str	r3, [sp, #64]	@ 0x40
 800774a:	2301      	movs	r3, #1
 800774c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800774e:	e7b5      	b.n	80076bc <_strtod_l+0x6e4>
 8007750:	462a      	mov	r2, r5
 8007752:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007754:	9805      	ldr	r0, [sp, #20]
 8007756:	f7ff f9cb 	bl	8006af0 <__lshift>
 800775a:	901a      	str	r0, [sp, #104]	@ 0x68
 800775c:	2800      	cmp	r0, #0
 800775e:	d1d9      	bne.n	8007714 <_strtod_l+0x73c>
 8007760:	e655      	b.n	800740e <_strtod_l+0x436>
 8007762:	2e00      	cmp	r6, #0
 8007764:	dd07      	ble.n	8007776 <_strtod_l+0x79e>
 8007766:	4649      	mov	r1, r9
 8007768:	4632      	mov	r2, r6
 800776a:	9805      	ldr	r0, [sp, #20]
 800776c:	f7ff f9c0 	bl	8006af0 <__lshift>
 8007770:	4681      	mov	r9, r0
 8007772:	2800      	cmp	r0, #0
 8007774:	d0d8      	beq.n	8007728 <_strtod_l+0x750>
 8007776:	2f00      	cmp	r7, #0
 8007778:	dd08      	ble.n	800778c <_strtod_l+0x7b4>
 800777a:	4641      	mov	r1, r8
 800777c:	463a      	mov	r2, r7
 800777e:	9805      	ldr	r0, [sp, #20]
 8007780:	f7ff f9b6 	bl	8006af0 <__lshift>
 8007784:	4680      	mov	r8, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f ae41 	beq.w	800740e <_strtod_l+0x436>
 800778c:	464a      	mov	r2, r9
 800778e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007790:	9805      	ldr	r0, [sp, #20]
 8007792:	f7ff fa35 	bl	8006c00 <__mdiff>
 8007796:	4604      	mov	r4, r0
 8007798:	2800      	cmp	r0, #0
 800779a:	f43f ae38 	beq.w	800740e <_strtod_l+0x436>
 800779e:	68c3      	ldr	r3, [r0, #12]
 80077a0:	4641      	mov	r1, r8
 80077a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077a4:	2300      	movs	r3, #0
 80077a6:	60c3      	str	r3, [r0, #12]
 80077a8:	f7ff fa0e 	bl	8006bc8 <__mcmp>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	da45      	bge.n	800783c <_strtod_l+0x864>
 80077b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077b2:	ea53 030a 	orrs.w	r3, r3, sl
 80077b6:	d16b      	bne.n	8007890 <_strtod_l+0x8b8>
 80077b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d167      	bne.n	8007890 <_strtod_l+0x8b8>
 80077c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077c4:	0d1b      	lsrs	r3, r3, #20
 80077c6:	051b      	lsls	r3, r3, #20
 80077c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80077cc:	d960      	bls.n	8007890 <_strtod_l+0x8b8>
 80077ce:	6963      	ldr	r3, [r4, #20]
 80077d0:	b913      	cbnz	r3, 80077d8 <_strtod_l+0x800>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	dd5b      	ble.n	8007890 <_strtod_l+0x8b8>
 80077d8:	4621      	mov	r1, r4
 80077da:	2201      	movs	r2, #1
 80077dc:	9805      	ldr	r0, [sp, #20]
 80077de:	f7ff f987 	bl	8006af0 <__lshift>
 80077e2:	4641      	mov	r1, r8
 80077e4:	4604      	mov	r4, r0
 80077e6:	f7ff f9ef 	bl	8006bc8 <__mcmp>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	dd50      	ble.n	8007890 <_strtod_l+0x8b8>
 80077ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077f2:	9a08      	ldr	r2, [sp, #32]
 80077f4:	0d1b      	lsrs	r3, r3, #20
 80077f6:	051b      	lsls	r3, r3, #20
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	d06a      	beq.n	80078d2 <_strtod_l+0x8fa>
 80077fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007800:	d867      	bhi.n	80078d2 <_strtod_l+0x8fa>
 8007802:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007806:	f67f ae98 	bls.w	800753a <_strtod_l+0x562>
 800780a:	4650      	mov	r0, sl
 800780c:	4659      	mov	r1, fp
 800780e:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <_strtod_l+0x85c>)
 8007810:	2200      	movs	r2, #0
 8007812:	f7f8 fe61 	bl	80004d8 <__aeabi_dmul>
 8007816:	4b08      	ldr	r3, [pc, #32]	@ (8007838 <_strtod_l+0x860>)
 8007818:	4682      	mov	sl, r0
 800781a:	400b      	ands	r3, r1
 800781c:	468b      	mov	fp, r1
 800781e:	2b00      	cmp	r3, #0
 8007820:	f47f ae00 	bne.w	8007424 <_strtod_l+0x44c>
 8007824:	2322      	movs	r3, #34	@ 0x22
 8007826:	9a05      	ldr	r2, [sp, #20]
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e5fb      	b.n	8007424 <_strtod_l+0x44c>
 800782c:	08009990 	.word	0x08009990
 8007830:	fffffc02 	.word	0xfffffc02
 8007834:	39500000 	.word	0x39500000
 8007838:	7ff00000 	.word	0x7ff00000
 800783c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007840:	d165      	bne.n	800790e <_strtod_l+0x936>
 8007842:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007848:	b35a      	cbz	r2, 80078a2 <_strtod_l+0x8ca>
 800784a:	4a99      	ldr	r2, [pc, #612]	@ (8007ab0 <_strtod_l+0xad8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d12b      	bne.n	80078a8 <_strtod_l+0x8d0>
 8007850:	9b08      	ldr	r3, [sp, #32]
 8007852:	4651      	mov	r1, sl
 8007854:	b303      	cbz	r3, 8007898 <_strtod_l+0x8c0>
 8007856:	465a      	mov	r2, fp
 8007858:	4b96      	ldr	r3, [pc, #600]	@ (8007ab4 <_strtod_l+0xadc>)
 800785a:	4013      	ands	r3, r2
 800785c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007860:	f04f 32ff 	mov.w	r2, #4294967295
 8007864:	d81b      	bhi.n	800789e <_strtod_l+0x8c6>
 8007866:	0d1b      	lsrs	r3, r3, #20
 8007868:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	4299      	cmp	r1, r3
 8007872:	d119      	bne.n	80078a8 <_strtod_l+0x8d0>
 8007874:	4b90      	ldr	r3, [pc, #576]	@ (8007ab8 <_strtod_l+0xae0>)
 8007876:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007878:	429a      	cmp	r2, r3
 800787a:	d102      	bne.n	8007882 <_strtod_l+0x8aa>
 800787c:	3101      	adds	r1, #1
 800787e:	f43f adc6 	beq.w	800740e <_strtod_l+0x436>
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	4b8b      	ldr	r3, [pc, #556]	@ (8007ab4 <_strtod_l+0xadc>)
 8007888:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800788a:	401a      	ands	r2, r3
 800788c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007890:	9b08      	ldr	r3, [sp, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1b9      	bne.n	800780a <_strtod_l+0x832>
 8007896:	e5c5      	b.n	8007424 <_strtod_l+0x44c>
 8007898:	f04f 33ff 	mov.w	r3, #4294967295
 800789c:	e7e8      	b.n	8007870 <_strtod_l+0x898>
 800789e:	4613      	mov	r3, r2
 80078a0:	e7e6      	b.n	8007870 <_strtod_l+0x898>
 80078a2:	ea53 030a 	orrs.w	r3, r3, sl
 80078a6:	d0a2      	beq.n	80077ee <_strtod_l+0x816>
 80078a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078aa:	b1db      	cbz	r3, 80078e4 <_strtod_l+0x90c>
 80078ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078ae:	4213      	tst	r3, r2
 80078b0:	d0ee      	beq.n	8007890 <_strtod_l+0x8b8>
 80078b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b4:	4650      	mov	r0, sl
 80078b6:	4659      	mov	r1, fp
 80078b8:	9a08      	ldr	r2, [sp, #32]
 80078ba:	b1bb      	cbz	r3, 80078ec <_strtod_l+0x914>
 80078bc:	f7ff fb68 	bl	8006f90 <sulp>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078c8:	f7f8 fc50 	bl	800016c <__adddf3>
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	e7de      	b.n	8007890 <_strtod_l+0x8b8>
 80078d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80078d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80078da:	f04f 3aff 	mov.w	sl, #4294967295
 80078de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80078e2:	e7d5      	b.n	8007890 <_strtod_l+0x8b8>
 80078e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078e6:	ea13 0f0a 	tst.w	r3, sl
 80078ea:	e7e1      	b.n	80078b0 <_strtod_l+0x8d8>
 80078ec:	f7ff fb50 	bl	8006f90 <sulp>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078f8:	f7f8 fc36 	bl	8000168 <__aeabi_dsub>
 80078fc:	2200      	movs	r2, #0
 80078fe:	2300      	movs	r3, #0
 8007900:	4682      	mov	sl, r0
 8007902:	468b      	mov	fp, r1
 8007904:	f7f9 f850 	bl	80009a8 <__aeabi_dcmpeq>
 8007908:	2800      	cmp	r0, #0
 800790a:	d0c1      	beq.n	8007890 <_strtod_l+0x8b8>
 800790c:	e615      	b.n	800753a <_strtod_l+0x562>
 800790e:	4641      	mov	r1, r8
 8007910:	4620      	mov	r0, r4
 8007912:	f7ff fac9 	bl	8006ea8 <__ratio>
 8007916:	2200      	movs	r2, #0
 8007918:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	f7f9 f856 	bl	80009d0 <__aeabi_dcmple>
 8007924:	2800      	cmp	r0, #0
 8007926:	d06d      	beq.n	8007a04 <_strtod_l+0xa2c>
 8007928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d178      	bne.n	8007a20 <_strtod_l+0xa48>
 800792e:	f1ba 0f00 	cmp.w	sl, #0
 8007932:	d156      	bne.n	80079e2 <_strtod_l+0xa0a>
 8007934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800793a:	2b00      	cmp	r3, #0
 800793c:	d158      	bne.n	80079f0 <_strtod_l+0xa18>
 800793e:	2200      	movs	r2, #0
 8007940:	4630      	mov	r0, r6
 8007942:	4639      	mov	r1, r7
 8007944:	4b5d      	ldr	r3, [pc, #372]	@ (8007abc <_strtod_l+0xae4>)
 8007946:	f7f9 f839 	bl	80009bc <__aeabi_dcmplt>
 800794a:	2800      	cmp	r0, #0
 800794c:	d157      	bne.n	80079fe <_strtod_l+0xa26>
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	2200      	movs	r2, #0
 8007954:	4b5a      	ldr	r3, [pc, #360]	@ (8007ac0 <_strtod_l+0xae8>)
 8007956:	f7f8 fdbf 	bl	80004d8 <__aeabi_dmul>
 800795a:	4606      	mov	r6, r0
 800795c:	460f      	mov	r7, r1
 800795e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007962:	9606      	str	r6, [sp, #24]
 8007964:	9307      	str	r3, [sp, #28]
 8007966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800796a:	4d52      	ldr	r5, [pc, #328]	@ (8007ab4 <_strtod_l+0xadc>)
 800796c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007972:	401d      	ands	r5, r3
 8007974:	4b53      	ldr	r3, [pc, #332]	@ (8007ac4 <_strtod_l+0xaec>)
 8007976:	429d      	cmp	r5, r3
 8007978:	f040 80aa 	bne.w	8007ad0 <_strtod_l+0xaf8>
 800797c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800797e:	4650      	mov	r0, sl
 8007980:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007984:	4659      	mov	r1, fp
 8007986:	f7ff f9cf 	bl	8006d28 <__ulp>
 800798a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800798e:	f7f8 fda3 	bl	80004d8 <__aeabi_dmul>
 8007992:	4652      	mov	r2, sl
 8007994:	465b      	mov	r3, fp
 8007996:	f7f8 fbe9 	bl	800016c <__adddf3>
 800799a:	460b      	mov	r3, r1
 800799c:	4945      	ldr	r1, [pc, #276]	@ (8007ab4 <_strtod_l+0xadc>)
 800799e:	4a4a      	ldr	r2, [pc, #296]	@ (8007ac8 <_strtod_l+0xaf0>)
 80079a0:	4019      	ands	r1, r3
 80079a2:	4291      	cmp	r1, r2
 80079a4:	4682      	mov	sl, r0
 80079a6:	d942      	bls.n	8007a2e <_strtod_l+0xa56>
 80079a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079aa:	4b43      	ldr	r3, [pc, #268]	@ (8007ab8 <_strtod_l+0xae0>)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d103      	bne.n	80079b8 <_strtod_l+0x9e0>
 80079b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079b2:	3301      	adds	r3, #1
 80079b4:	f43f ad2b 	beq.w	800740e <_strtod_l+0x436>
 80079b8:	f04f 3aff 	mov.w	sl, #4294967295
 80079bc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007ab8 <_strtod_l+0xae0>
 80079c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079c2:	9805      	ldr	r0, [sp, #20]
 80079c4:	f7fe fe7e 	bl	80066c4 <_Bfree>
 80079c8:	4649      	mov	r1, r9
 80079ca:	9805      	ldr	r0, [sp, #20]
 80079cc:	f7fe fe7a 	bl	80066c4 <_Bfree>
 80079d0:	4641      	mov	r1, r8
 80079d2:	9805      	ldr	r0, [sp, #20]
 80079d4:	f7fe fe76 	bl	80066c4 <_Bfree>
 80079d8:	4621      	mov	r1, r4
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	f7fe fe72 	bl	80066c4 <_Bfree>
 80079e0:	e618      	b.n	8007614 <_strtod_l+0x63c>
 80079e2:	f1ba 0f01 	cmp.w	sl, #1
 80079e6:	d103      	bne.n	80079f0 <_strtod_l+0xa18>
 80079e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f43f ada5 	beq.w	800753a <_strtod_l+0x562>
 80079f0:	2200      	movs	r2, #0
 80079f2:	4b36      	ldr	r3, [pc, #216]	@ (8007acc <_strtod_l+0xaf4>)
 80079f4:	2600      	movs	r6, #0
 80079f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80079fa:	4f30      	ldr	r7, [pc, #192]	@ (8007abc <_strtod_l+0xae4>)
 80079fc:	e7b3      	b.n	8007966 <_strtod_l+0x98e>
 80079fe:	2600      	movs	r6, #0
 8007a00:	4f2f      	ldr	r7, [pc, #188]	@ (8007ac0 <_strtod_l+0xae8>)
 8007a02:	e7ac      	b.n	800795e <_strtod_l+0x986>
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	4b2d      	ldr	r3, [pc, #180]	@ (8007ac0 <_strtod_l+0xae8>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f7f8 fd64 	bl	80004d8 <__aeabi_dmul>
 8007a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0a1      	beq.n	800795e <_strtod_l+0x986>
 8007a1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a1e:	e7a2      	b.n	8007966 <_strtod_l+0x98e>
 8007a20:	2200      	movs	r2, #0
 8007a22:	4b26      	ldr	r3, [pc, #152]	@ (8007abc <_strtod_l+0xae4>)
 8007a24:	4616      	mov	r6, r2
 8007a26:	461f      	mov	r7, r3
 8007a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a2c:	e79b      	b.n	8007966 <_strtod_l+0x98e>
 8007a2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1c1      	bne.n	80079c0 <_strtod_l+0x9e8>
 8007a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a40:	0d1b      	lsrs	r3, r3, #20
 8007a42:	051b      	lsls	r3, r3, #20
 8007a44:	429d      	cmp	r5, r3
 8007a46:	d1bb      	bne.n	80079c0 <_strtod_l+0x9e8>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f9 f8a4 	bl	8000b98 <__aeabi_d2lz>
 8007a50:	f7f8 fd14 	bl	800047c <__aeabi_l2d>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f8 fb84 	bl	8000168 <__aeabi_dsub>
 8007a60:	460b      	mov	r3, r1
 8007a62:	4602      	mov	r2, r0
 8007a64:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007a68:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a6e:	ea46 060a 	orr.w	r6, r6, sl
 8007a72:	431e      	orrs	r6, r3
 8007a74:	d069      	beq.n	8007b4a <_strtod_l+0xb72>
 8007a76:	a30a      	add	r3, pc, #40	@ (adr r3, 8007aa0 <_strtod_l+0xac8>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f8 ff9e 	bl	80009bc <__aeabi_dcmplt>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	f47f accf 	bne.w	8007424 <_strtod_l+0x44c>
 8007a86:	a308      	add	r3, pc, #32	@ (adr r3, 8007aa8 <_strtod_l+0xad0>)
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a90:	f7f8 ffb2 	bl	80009f8 <__aeabi_dcmpgt>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d093      	beq.n	80079c0 <_strtod_l+0x9e8>
 8007a98:	e4c4      	b.n	8007424 <_strtod_l+0x44c>
 8007a9a:	bf00      	nop
 8007a9c:	f3af 8000 	nop.w
 8007aa0:	94a03595 	.word	0x94a03595
 8007aa4:	3fdfffff 	.word	0x3fdfffff
 8007aa8:	35afe535 	.word	0x35afe535
 8007aac:	3fe00000 	.word	0x3fe00000
 8007ab0:	000fffff 	.word	0x000fffff
 8007ab4:	7ff00000 	.word	0x7ff00000
 8007ab8:	7fefffff 	.word	0x7fefffff
 8007abc:	3ff00000 	.word	0x3ff00000
 8007ac0:	3fe00000 	.word	0x3fe00000
 8007ac4:	7fe00000 	.word	0x7fe00000
 8007ac8:	7c9fffff 	.word	0x7c9fffff
 8007acc:	bff00000 	.word	0xbff00000
 8007ad0:	9b08      	ldr	r3, [sp, #32]
 8007ad2:	b323      	cbz	r3, 8007b1e <_strtod_l+0xb46>
 8007ad4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007ad8:	d821      	bhi.n	8007b1e <_strtod_l+0xb46>
 8007ada:	a327      	add	r3, pc, #156	@ (adr r3, 8007b78 <_strtod_l+0xba0>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f8 ff74 	bl	80009d0 <__aeabi_dcmple>
 8007ae8:	b1a0      	cbz	r0, 8007b14 <_strtod_l+0xb3c>
 8007aea:	4639      	mov	r1, r7
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7f8 ffcb 	bl	8000a88 <__aeabi_d2uiz>
 8007af2:	2801      	cmp	r0, #1
 8007af4:	bf38      	it	cc
 8007af6:	2001      	movcc	r0, #1
 8007af8:	f7f8 fc74 	bl	80003e4 <__aeabi_ui2d>
 8007afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	b9fb      	cbnz	r3, 8007b44 <_strtod_l+0xb6c>
 8007b04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b08:	9014      	str	r0, [sp, #80]	@ 0x50
 8007b0a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007b10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b16:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007b1a:	1b5b      	subs	r3, r3, r5
 8007b1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b22:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007b26:	f7ff f8ff 	bl	8006d28 <__ulp>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4650      	mov	r0, sl
 8007b30:	4659      	mov	r1, fp
 8007b32:	f7f8 fcd1 	bl	80004d8 <__aeabi_dmul>
 8007b36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b3a:	f7f8 fb17 	bl	800016c <__adddf3>
 8007b3e:	4682      	mov	sl, r0
 8007b40:	468b      	mov	fp, r1
 8007b42:	e776      	b.n	8007a32 <_strtod_l+0xa5a>
 8007b44:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007b48:	e7e0      	b.n	8007b0c <_strtod_l+0xb34>
 8007b4a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007b80 <_strtod_l+0xba8>)
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f7f8 ff34 	bl	80009bc <__aeabi_dcmplt>
 8007b54:	e79e      	b.n	8007a94 <_strtod_l+0xabc>
 8007b56:	2300      	movs	r3, #0
 8007b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b5c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	f7ff ba77 	b.w	8007052 <_strtod_l+0x7a>
 8007b64:	2a65      	cmp	r2, #101	@ 0x65
 8007b66:	f43f ab6e 	beq.w	8007246 <_strtod_l+0x26e>
 8007b6a:	2a45      	cmp	r2, #69	@ 0x45
 8007b6c:	f43f ab6b 	beq.w	8007246 <_strtod_l+0x26e>
 8007b70:	2301      	movs	r3, #1
 8007b72:	f7ff bba6 	b.w	80072c2 <_strtod_l+0x2ea>
 8007b76:	bf00      	nop
 8007b78:	ffc00000 	.word	0xffc00000
 8007b7c:	41dfffff 	.word	0x41dfffff
 8007b80:	94a03595 	.word	0x94a03595
 8007b84:	3fcfffff 	.word	0x3fcfffff

08007b88 <_strtod_r>:
 8007b88:	4b01      	ldr	r3, [pc, #4]	@ (8007b90 <_strtod_r+0x8>)
 8007b8a:	f7ff ba25 	b.w	8006fd8 <_strtod_l>
 8007b8e:	bf00      	nop
 8007b90:	20000080 	.word	0x20000080

08007b94 <_strtol_l.constprop.0>:
 8007b94:	2b24      	cmp	r3, #36	@ 0x24
 8007b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9a:	4686      	mov	lr, r0
 8007b9c:	4690      	mov	r8, r2
 8007b9e:	d801      	bhi.n	8007ba4 <_strtol_l.constprop.0+0x10>
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d106      	bne.n	8007bb2 <_strtol_l.constprop.0+0x1e>
 8007ba4:	f7fd fdbe 	bl	8005724 <__errno>
 8007ba8:	2316      	movs	r3, #22
 8007baa:	6003      	str	r3, [r0, #0]
 8007bac:	2000      	movs	r0, #0
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	460d      	mov	r5, r1
 8007bb4:	4833      	ldr	r0, [pc, #204]	@ (8007c84 <_strtol_l.constprop.0+0xf0>)
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bbc:	5d06      	ldrb	r6, [r0, r4]
 8007bbe:	f016 0608 	ands.w	r6, r6, #8
 8007bc2:	d1f8      	bne.n	8007bb6 <_strtol_l.constprop.0+0x22>
 8007bc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007bc6:	d12d      	bne.n	8007c24 <_strtol_l.constprop.0+0x90>
 8007bc8:	2601      	movs	r6, #1
 8007bca:	782c      	ldrb	r4, [r5, #0]
 8007bcc:	1c95      	adds	r5, r2, #2
 8007bce:	f033 0210 	bics.w	r2, r3, #16
 8007bd2:	d109      	bne.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007bd4:	2c30      	cmp	r4, #48	@ 0x30
 8007bd6:	d12a      	bne.n	8007c2e <_strtol_l.constprop.0+0x9a>
 8007bd8:	782a      	ldrb	r2, [r5, #0]
 8007bda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007bde:	2a58      	cmp	r2, #88	@ 0x58
 8007be0:	d125      	bne.n	8007c2e <_strtol_l.constprop.0+0x9a>
 8007be2:	2310      	movs	r3, #16
 8007be4:	786c      	ldrb	r4, [r5, #1]
 8007be6:	3502      	adds	r5, #2
 8007be8:	2200      	movs	r2, #0
 8007bea:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007bee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007bf2:	fbbc f9f3 	udiv	r9, ip, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007bfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007c00:	2f09      	cmp	r7, #9
 8007c02:	d81b      	bhi.n	8007c3c <_strtol_l.constprop.0+0xa8>
 8007c04:	463c      	mov	r4, r7
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	dd27      	ble.n	8007c5a <_strtol_l.constprop.0+0xc6>
 8007c0a:	1c57      	adds	r7, r2, #1
 8007c0c:	d007      	beq.n	8007c1e <_strtol_l.constprop.0+0x8a>
 8007c0e:	4581      	cmp	r9, r0
 8007c10:	d320      	bcc.n	8007c54 <_strtol_l.constprop.0+0xc0>
 8007c12:	d101      	bne.n	8007c18 <_strtol_l.constprop.0+0x84>
 8007c14:	45a2      	cmp	sl, r4
 8007c16:	db1d      	blt.n	8007c54 <_strtol_l.constprop.0+0xc0>
 8007c18:	2201      	movs	r2, #1
 8007c1a:	fb00 4003 	mla	r0, r0, r3, r4
 8007c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c22:	e7eb      	b.n	8007bfc <_strtol_l.constprop.0+0x68>
 8007c24:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c26:	bf04      	itt	eq
 8007c28:	782c      	ldrbeq	r4, [r5, #0]
 8007c2a:	1c95      	addeq	r5, r2, #2
 8007c2c:	e7cf      	b.n	8007bce <_strtol_l.constprop.0+0x3a>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1da      	bne.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007c32:	2c30      	cmp	r4, #48	@ 0x30
 8007c34:	bf0c      	ite	eq
 8007c36:	2308      	moveq	r3, #8
 8007c38:	230a      	movne	r3, #10
 8007c3a:	e7d5      	b.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007c3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007c40:	2f19      	cmp	r7, #25
 8007c42:	d801      	bhi.n	8007c48 <_strtol_l.constprop.0+0xb4>
 8007c44:	3c37      	subs	r4, #55	@ 0x37
 8007c46:	e7de      	b.n	8007c06 <_strtol_l.constprop.0+0x72>
 8007c48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007c4c:	2f19      	cmp	r7, #25
 8007c4e:	d804      	bhi.n	8007c5a <_strtol_l.constprop.0+0xc6>
 8007c50:	3c57      	subs	r4, #87	@ 0x57
 8007c52:	e7d8      	b.n	8007c06 <_strtol_l.constprop.0+0x72>
 8007c54:	f04f 32ff 	mov.w	r2, #4294967295
 8007c58:	e7e1      	b.n	8007c1e <_strtol_l.constprop.0+0x8a>
 8007c5a:	1c53      	adds	r3, r2, #1
 8007c5c:	d108      	bne.n	8007c70 <_strtol_l.constprop.0+0xdc>
 8007c5e:	2322      	movs	r3, #34	@ 0x22
 8007c60:	4660      	mov	r0, ip
 8007c62:	f8ce 3000 	str.w	r3, [lr]
 8007c66:	f1b8 0f00 	cmp.w	r8, #0
 8007c6a:	d0a0      	beq.n	8007bae <_strtol_l.constprop.0+0x1a>
 8007c6c:	1e69      	subs	r1, r5, #1
 8007c6e:	e006      	b.n	8007c7e <_strtol_l.constprop.0+0xea>
 8007c70:	b106      	cbz	r6, 8007c74 <_strtol_l.constprop.0+0xe0>
 8007c72:	4240      	negs	r0, r0
 8007c74:	f1b8 0f00 	cmp.w	r8, #0
 8007c78:	d099      	beq.n	8007bae <_strtol_l.constprop.0+0x1a>
 8007c7a:	2a00      	cmp	r2, #0
 8007c7c:	d1f6      	bne.n	8007c6c <_strtol_l.constprop.0+0xd8>
 8007c7e:	f8c8 1000 	str.w	r1, [r8]
 8007c82:	e794      	b.n	8007bae <_strtol_l.constprop.0+0x1a>
 8007c84:	080099b9 	.word	0x080099b9

08007c88 <_strtol_r>:
 8007c88:	f7ff bf84 	b.w	8007b94 <_strtol_l.constprop.0>

08007c8c <__ssputs_r>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	461f      	mov	r7, r3
 8007c92:	688e      	ldr	r6, [r1, #8]
 8007c94:	4682      	mov	sl, r0
 8007c96:	42be      	cmp	r6, r7
 8007c98:	460c      	mov	r4, r1
 8007c9a:	4690      	mov	r8, r2
 8007c9c:	680b      	ldr	r3, [r1, #0]
 8007c9e:	d82d      	bhi.n	8007cfc <__ssputs_r+0x70>
 8007ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ca4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ca8:	d026      	beq.n	8007cf8 <__ssputs_r+0x6c>
 8007caa:	6965      	ldr	r5, [r4, #20]
 8007cac:	6909      	ldr	r1, [r1, #16]
 8007cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb2:	eba3 0901 	sub.w	r9, r3, r1
 8007cb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cba:	1c7b      	adds	r3, r7, #1
 8007cbc:	444b      	add	r3, r9
 8007cbe:	106d      	asrs	r5, r5, #1
 8007cc0:	429d      	cmp	r5, r3
 8007cc2:	bf38      	it	cc
 8007cc4:	461d      	movcc	r5, r3
 8007cc6:	0553      	lsls	r3, r2, #21
 8007cc8:	d527      	bpl.n	8007d1a <__ssputs_r+0x8e>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f7fe fc2e 	bl	800652c <_malloc_r>
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	b360      	cbz	r0, 8007d2e <__ssputs_r+0xa2>
 8007cd4:	464a      	mov	r2, r9
 8007cd6:	6921      	ldr	r1, [r4, #16]
 8007cd8:	f000 ff5e 	bl	8008b98 <memcpy>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	6126      	str	r6, [r4, #16]
 8007cea:	444e      	add	r6, r9
 8007cec:	6026      	str	r6, [r4, #0]
 8007cee:	463e      	mov	r6, r7
 8007cf0:	6165      	str	r5, [r4, #20]
 8007cf2:	eba5 0509 	sub.w	r5, r5, r9
 8007cf6:	60a5      	str	r5, [r4, #8]
 8007cf8:	42be      	cmp	r6, r7
 8007cfa:	d900      	bls.n	8007cfe <__ssputs_r+0x72>
 8007cfc:	463e      	mov	r6, r7
 8007cfe:	4632      	mov	r2, r6
 8007d00:	4641      	mov	r1, r8
 8007d02:	6820      	ldr	r0, [r4, #0]
 8007d04:	f000 ff1e 	bl	8008b44 <memmove>
 8007d08:	2000      	movs	r0, #0
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	1b9b      	subs	r3, r3, r6
 8007d0e:	60a3      	str	r3, [r4, #8]
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	4433      	add	r3, r6
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1a:	462a      	mov	r2, r5
 8007d1c:	f001 facd 	bl	80092ba <_realloc_r>
 8007d20:	4606      	mov	r6, r0
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d1e0      	bne.n	8007ce8 <__ssputs_r+0x5c>
 8007d26:	4650      	mov	r0, sl
 8007d28:	6921      	ldr	r1, [r4, #16]
 8007d2a:	f7fe fb8d 	bl	8006448 <_free_r>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	f8ca 3000 	str.w	r3, [sl]
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d3e:	81a3      	strh	r3, [r4, #12]
 8007d40:	e7e9      	b.n	8007d16 <__ssputs_r+0x8a>
	...

08007d44 <_svfiprintf_r>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	4698      	mov	r8, r3
 8007d4a:	898b      	ldrh	r3, [r1, #12]
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	061b      	lsls	r3, r3, #24
 8007d50:	460d      	mov	r5, r1
 8007d52:	4614      	mov	r4, r2
 8007d54:	b09d      	sub	sp, #116	@ 0x74
 8007d56:	d510      	bpl.n	8007d7a <_svfiprintf_r+0x36>
 8007d58:	690b      	ldr	r3, [r1, #16]
 8007d5a:	b973      	cbnz	r3, 8007d7a <_svfiprintf_r+0x36>
 8007d5c:	2140      	movs	r1, #64	@ 0x40
 8007d5e:	f7fe fbe5 	bl	800652c <_malloc_r>
 8007d62:	6028      	str	r0, [r5, #0]
 8007d64:	6128      	str	r0, [r5, #16]
 8007d66:	b930      	cbnz	r0, 8007d76 <_svfiprintf_r+0x32>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	b01d      	add	sp, #116	@ 0x74
 8007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d76:	2340      	movs	r3, #64	@ 0x40
 8007d78:	616b      	str	r3, [r5, #20]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d7e:	2320      	movs	r3, #32
 8007d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d84:	2330      	movs	r3, #48	@ 0x30
 8007d86:	f04f 0901 	mov.w	r9, #1
 8007d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007f28 <_svfiprintf_r+0x1e4>
 8007d92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d96:	4623      	mov	r3, r4
 8007d98:	469a      	mov	sl, r3
 8007d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d9e:	b10a      	cbz	r2, 8007da4 <_svfiprintf_r+0x60>
 8007da0:	2a25      	cmp	r2, #37	@ 0x25
 8007da2:	d1f9      	bne.n	8007d98 <_svfiprintf_r+0x54>
 8007da4:	ebba 0b04 	subs.w	fp, sl, r4
 8007da8:	d00b      	beq.n	8007dc2 <_svfiprintf_r+0x7e>
 8007daa:	465b      	mov	r3, fp
 8007dac:	4622      	mov	r2, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff ff6b 	bl	8007c8c <__ssputs_r>
 8007db6:	3001      	adds	r0, #1
 8007db8:	f000 80a7 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dbe:	445a      	add	r2, fp
 8007dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 809f 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd6:	f10a 0a01 	add.w	sl, sl, #1
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9307      	str	r3, [sp, #28]
 8007dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007de4:	4654      	mov	r4, sl
 8007de6:	2205      	movs	r2, #5
 8007de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dec:	484e      	ldr	r0, [pc, #312]	@ (8007f28 <_svfiprintf_r+0x1e4>)
 8007dee:	f7fd fcc6 	bl	800577e <memchr>
 8007df2:	9a04      	ldr	r2, [sp, #16]
 8007df4:	b9d8      	cbnz	r0, 8007e2e <_svfiprintf_r+0xea>
 8007df6:	06d0      	lsls	r0, r2, #27
 8007df8:	bf44      	itt	mi
 8007dfa:	2320      	movmi	r3, #32
 8007dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e00:	0711      	lsls	r1, r2, #28
 8007e02:	bf44      	itt	mi
 8007e04:	232b      	movmi	r3, #43	@ 0x2b
 8007e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e10:	d015      	beq.n	8007e3e <_svfiprintf_r+0xfa>
 8007e12:	4654      	mov	r4, sl
 8007e14:	2000      	movs	r0, #0
 8007e16:	f04f 0c0a 	mov.w	ip, #10
 8007e1a:	9a07      	ldr	r2, [sp, #28]
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e22:	3b30      	subs	r3, #48	@ 0x30
 8007e24:	2b09      	cmp	r3, #9
 8007e26:	d94b      	bls.n	8007ec0 <_svfiprintf_r+0x17c>
 8007e28:	b1b0      	cbz	r0, 8007e58 <_svfiprintf_r+0x114>
 8007e2a:	9207      	str	r2, [sp, #28]
 8007e2c:	e014      	b.n	8007e58 <_svfiprintf_r+0x114>
 8007e2e:	eba0 0308 	sub.w	r3, r0, r8
 8007e32:	fa09 f303 	lsl.w	r3, r9, r3
 8007e36:	4313      	orrs	r3, r2
 8007e38:	46a2      	mov	sl, r4
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	e7d2      	b.n	8007de4 <_svfiprintf_r+0xa0>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	1d19      	adds	r1, r3, #4
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	9103      	str	r1, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bfbb      	ittet	lt
 8007e4a:	425b      	neglt	r3, r3
 8007e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e50:	9307      	strge	r3, [sp, #28]
 8007e52:	9307      	strlt	r3, [sp, #28]
 8007e54:	bfb8      	it	lt
 8007e56:	9204      	strlt	r2, [sp, #16]
 8007e58:	7823      	ldrb	r3, [r4, #0]
 8007e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e5c:	d10a      	bne.n	8007e74 <_svfiprintf_r+0x130>
 8007e5e:	7863      	ldrb	r3, [r4, #1]
 8007e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e62:	d132      	bne.n	8007eca <_svfiprintf_r+0x186>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	3402      	adds	r4, #2
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9203      	str	r2, [sp, #12]
 8007e6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007f2c <_svfiprintf_r+0x1e8>
 8007e78:	2203      	movs	r2, #3
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	7821      	ldrb	r1, [r4, #0]
 8007e7e:	f7fd fc7e 	bl	800577e <memchr>
 8007e82:	b138      	cbz	r0, 8007e94 <_svfiprintf_r+0x150>
 8007e84:	2240      	movs	r2, #64	@ 0x40
 8007e86:	9b04      	ldr	r3, [sp, #16]
 8007e88:	eba0 000a 	sub.w	r0, r0, sl
 8007e8c:	4082      	lsls	r2, r0
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	3401      	adds	r4, #1
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	2206      	movs	r2, #6
 8007e9a:	4825      	ldr	r0, [pc, #148]	@ (8007f30 <_svfiprintf_r+0x1ec>)
 8007e9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ea0:	f7fd fc6d 	bl	800577e <memchr>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d036      	beq.n	8007f16 <_svfiprintf_r+0x1d2>
 8007ea8:	4b22      	ldr	r3, [pc, #136]	@ (8007f34 <_svfiprintf_r+0x1f0>)
 8007eaa:	bb1b      	cbnz	r3, 8007ef4 <_svfiprintf_r+0x1b0>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eba:	4433      	add	r3, r6
 8007ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebe:	e76a      	b.n	8007d96 <_svfiprintf_r+0x52>
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec8:	e7a8      	b.n	8007e1c <_svfiprintf_r+0xd8>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f04f 0c0a 	mov.w	ip, #10
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	3401      	adds	r4, #1
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007edc:	3a30      	subs	r2, #48	@ 0x30
 8007ede:	2a09      	cmp	r2, #9
 8007ee0:	d903      	bls.n	8007eea <_svfiprintf_r+0x1a6>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c6      	beq.n	8007e74 <_svfiprintf_r+0x130>
 8007ee6:	9105      	str	r1, [sp, #20]
 8007ee8:	e7c4      	b.n	8007e74 <_svfiprintf_r+0x130>
 8007eea:	4604      	mov	r4, r0
 8007eec:	2301      	movs	r3, #1
 8007eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef2:	e7f0      	b.n	8007ed6 <_svfiprintf_r+0x192>
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4638      	mov	r0, r7
 8007efc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f38 <_svfiprintf_r+0x1f4>)
 8007efe:	a904      	add	r1, sp, #16
 8007f00:	f7fc fc7a 	bl	80047f8 <_printf_float>
 8007f04:	1c42      	adds	r2, r0, #1
 8007f06:	4606      	mov	r6, r0
 8007f08:	d1d6      	bne.n	8007eb8 <_svfiprintf_r+0x174>
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	065b      	lsls	r3, r3, #25
 8007f0e:	f53f af2d 	bmi.w	8007d6c <_svfiprintf_r+0x28>
 8007f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f14:	e72c      	b.n	8007d70 <_svfiprintf_r+0x2c>
 8007f16:	ab03      	add	r3, sp, #12
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <_svfiprintf_r+0x1f4>)
 8007f20:	a904      	add	r1, sp, #16
 8007f22:	f7fc ff07 	bl	8004d34 <_printf_i>
 8007f26:	e7ed      	b.n	8007f04 <_svfiprintf_r+0x1c0>
 8007f28:	08009ab9 	.word	0x08009ab9
 8007f2c:	08009abf 	.word	0x08009abf
 8007f30:	08009ac3 	.word	0x08009ac3
 8007f34:	080047f9 	.word	0x080047f9
 8007f38:	08007c8d 	.word	0x08007c8d

08007f3c <_sungetc_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	1c4b      	adds	r3, r1, #1
 8007f40:	4614      	mov	r4, r2
 8007f42:	d103      	bne.n	8007f4c <_sungetc_r+0x10>
 8007f44:	f04f 35ff 	mov.w	r5, #4294967295
 8007f48:	4628      	mov	r0, r5
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	8993      	ldrh	r3, [r2, #12]
 8007f4e:	b2cd      	uxtb	r5, r1
 8007f50:	f023 0320 	bic.w	r3, r3, #32
 8007f54:	8193      	strh	r3, [r2, #12]
 8007f56:	6853      	ldr	r3, [r2, #4]
 8007f58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007f5a:	b18a      	cbz	r2, 8007f80 <_sungetc_r+0x44>
 8007f5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	dd08      	ble.n	8007f74 <_sungetc_r+0x38>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	1e5a      	subs	r2, r3, #1
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007f6c:	6863      	ldr	r3, [r4, #4]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	e7e9      	b.n	8007f48 <_sungetc_r+0xc>
 8007f74:	4621      	mov	r1, r4
 8007f76:	f000 fd18 	bl	80089aa <__submore>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d0f1      	beq.n	8007f62 <_sungetc_r+0x26>
 8007f7e:	e7e1      	b.n	8007f44 <_sungetc_r+0x8>
 8007f80:	6921      	ldr	r1, [r4, #16]
 8007f82:	6822      	ldr	r2, [r4, #0]
 8007f84:	b141      	cbz	r1, 8007f98 <_sungetc_r+0x5c>
 8007f86:	4291      	cmp	r1, r2
 8007f88:	d206      	bcs.n	8007f98 <_sungetc_r+0x5c>
 8007f8a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007f8e:	42a9      	cmp	r1, r5
 8007f90:	d102      	bne.n	8007f98 <_sungetc_r+0x5c>
 8007f92:	3a01      	subs	r2, #1
 8007f94:	6022      	str	r2, [r4, #0]
 8007f96:	e7ea      	b.n	8007f6e <_sungetc_r+0x32>
 8007f98:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7de      	b.n	8007f70 <_sungetc_r+0x34>

08007fb2 <__ssrefill_r>:
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007fb8:	b169      	cbz	r1, 8007fd6 <__ssrefill_r+0x24>
 8007fba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fbe:	4299      	cmp	r1, r3
 8007fc0:	d001      	beq.n	8007fc6 <__ssrefill_r+0x14>
 8007fc2:	f7fe fa41 	bl	8006448 <_free_r>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fca:	6360      	str	r0, [r4, #52]	@ 0x34
 8007fcc:	6063      	str	r3, [r4, #4]
 8007fce:	b113      	cbz	r3, 8007fd6 <__ssrefill_r+0x24>
 8007fd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	6063      	str	r3, [r4, #4]
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f043 0320 	orr.w	r3, r3, #32
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	e7f3      	b.n	8007fd4 <__ssrefill_r+0x22>

08007fec <__ssvfiscanf_r>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007ffa:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007ffe:	49aa      	ldr	r1, [pc, #680]	@ (80082a8 <__ssvfiscanf_r+0x2bc>)
 8008000:	f10d 0804 	add.w	r8, sp, #4
 8008004:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008006:	49a9      	ldr	r1, [pc, #676]	@ (80082ac <__ssvfiscanf_r+0x2c0>)
 8008008:	4fa9      	ldr	r7, [pc, #676]	@ (80082b0 <__ssvfiscanf_r+0x2c4>)
 800800a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800800e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	7813      	ldrb	r3, [r2, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8159 	beq.w	80082cc <__ssvfiscanf_r+0x2e0>
 800801a:	5cf9      	ldrb	r1, [r7, r3]
 800801c:	1c55      	adds	r5, r2, #1
 800801e:	f011 0108 	ands.w	r1, r1, #8
 8008022:	d019      	beq.n	8008058 <__ssvfiscanf_r+0x6c>
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	dd0f      	ble.n	800804a <__ssvfiscanf_r+0x5e>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	5cba      	ldrb	r2, [r7, r2]
 8008030:	0712      	lsls	r2, r2, #28
 8008032:	d401      	bmi.n	8008038 <__ssvfiscanf_r+0x4c>
 8008034:	462a      	mov	r2, r5
 8008036:	e7ec      	b.n	8008012 <__ssvfiscanf_r+0x26>
 8008038:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800803a:	3301      	adds	r3, #1
 800803c:	3201      	adds	r2, #1
 800803e:	9245      	str	r2, [sp, #276]	@ 0x114
 8008040:	6862      	ldr	r2, [r4, #4]
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	3a01      	subs	r2, #1
 8008046:	6062      	str	r2, [r4, #4]
 8008048:	e7ec      	b.n	8008024 <__ssvfiscanf_r+0x38>
 800804a:	4621      	mov	r1, r4
 800804c:	4630      	mov	r0, r6
 800804e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008050:	4798      	blx	r3
 8008052:	2800      	cmp	r0, #0
 8008054:	d0e9      	beq.n	800802a <__ssvfiscanf_r+0x3e>
 8008056:	e7ed      	b.n	8008034 <__ssvfiscanf_r+0x48>
 8008058:	2b25      	cmp	r3, #37	@ 0x25
 800805a:	d012      	beq.n	8008082 <__ssvfiscanf_r+0x96>
 800805c:	4699      	mov	r9, r3
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f340 8094 	ble.w	800818e <__ssvfiscanf_r+0x1a2>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	7813      	ldrb	r3, [r2, #0]
 800806a:	454b      	cmp	r3, r9
 800806c:	f040 812e 	bne.w	80082cc <__ssvfiscanf_r+0x2e0>
 8008070:	6863      	ldr	r3, [r4, #4]
 8008072:	3201      	adds	r2, #1
 8008074:	3b01      	subs	r3, #1
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800807a:	6022      	str	r2, [r4, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	9345      	str	r3, [sp, #276]	@ 0x114
 8008080:	e7d8      	b.n	8008034 <__ssvfiscanf_r+0x48>
 8008082:	9141      	str	r1, [sp, #260]	@ 0x104
 8008084:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008086:	7853      	ldrb	r3, [r2, #1]
 8008088:	2b2a      	cmp	r3, #42	@ 0x2a
 800808a:	bf04      	itt	eq
 800808c:	2310      	moveq	r3, #16
 800808e:	1c95      	addeq	r5, r2, #2
 8008090:	f04f 020a 	mov.w	r2, #10
 8008094:	bf08      	it	eq
 8008096:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008098:	46a9      	mov	r9, r5
 800809a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800809e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d91e      	bls.n	80080e4 <__ssvfiscanf_r+0xf8>
 80080a6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80082b4 <__ssvfiscanf_r+0x2c8>
 80080aa:	2203      	movs	r2, #3
 80080ac:	4650      	mov	r0, sl
 80080ae:	f7fd fb66 	bl	800577e <memchr>
 80080b2:	b138      	cbz	r0, 80080c4 <__ssvfiscanf_r+0xd8>
 80080b4:	2301      	movs	r3, #1
 80080b6:	464d      	mov	r5, r9
 80080b8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80080ba:	eba0 000a 	sub.w	r0, r0, sl
 80080be:	4083      	lsls	r3, r0
 80080c0:	4313      	orrs	r3, r2
 80080c2:	9341      	str	r3, [sp, #260]	@ 0x104
 80080c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080c8:	2b78      	cmp	r3, #120	@ 0x78
 80080ca:	d806      	bhi.n	80080da <__ssvfiscanf_r+0xee>
 80080cc:	2b57      	cmp	r3, #87	@ 0x57
 80080ce:	d810      	bhi.n	80080f2 <__ssvfiscanf_r+0x106>
 80080d0:	2b25      	cmp	r3, #37	@ 0x25
 80080d2:	d0c3      	beq.n	800805c <__ssvfiscanf_r+0x70>
 80080d4:	d856      	bhi.n	8008184 <__ssvfiscanf_r+0x198>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d064      	beq.n	80081a4 <__ssvfiscanf_r+0x1b8>
 80080da:	2303      	movs	r3, #3
 80080dc:	9347      	str	r3, [sp, #284]	@ 0x11c
 80080de:	230a      	movs	r3, #10
 80080e0:	9342      	str	r3, [sp, #264]	@ 0x108
 80080e2:	e077      	b.n	80081d4 <__ssvfiscanf_r+0x1e8>
 80080e4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80080e6:	464d      	mov	r5, r9
 80080e8:	fb02 1103 	mla	r1, r2, r3, r1
 80080ec:	3930      	subs	r1, #48	@ 0x30
 80080ee:	9143      	str	r1, [sp, #268]	@ 0x10c
 80080f0:	e7d2      	b.n	8008098 <__ssvfiscanf_r+0xac>
 80080f2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80080f6:	2a20      	cmp	r2, #32
 80080f8:	d8ef      	bhi.n	80080da <__ssvfiscanf_r+0xee>
 80080fa:	a101      	add	r1, pc, #4	@ (adr r1, 8008100 <__ssvfiscanf_r+0x114>)
 80080fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008100:	080081b3 	.word	0x080081b3
 8008104:	080080db 	.word	0x080080db
 8008108:	080080db 	.word	0x080080db
 800810c:	0800820d 	.word	0x0800820d
 8008110:	080080db 	.word	0x080080db
 8008114:	080080db 	.word	0x080080db
 8008118:	080080db 	.word	0x080080db
 800811c:	080080db 	.word	0x080080db
 8008120:	080080db 	.word	0x080080db
 8008124:	080080db 	.word	0x080080db
 8008128:	080080db 	.word	0x080080db
 800812c:	08008223 	.word	0x08008223
 8008130:	08008209 	.word	0x08008209
 8008134:	0800818b 	.word	0x0800818b
 8008138:	0800818b 	.word	0x0800818b
 800813c:	0800818b 	.word	0x0800818b
 8008140:	080080db 	.word	0x080080db
 8008144:	080081c5 	.word	0x080081c5
 8008148:	080080db 	.word	0x080080db
 800814c:	080080db 	.word	0x080080db
 8008150:	080080db 	.word	0x080080db
 8008154:	080080db 	.word	0x080080db
 8008158:	08008233 	.word	0x08008233
 800815c:	080081cd 	.word	0x080081cd
 8008160:	080081ab 	.word	0x080081ab
 8008164:	080080db 	.word	0x080080db
 8008168:	080080db 	.word	0x080080db
 800816c:	0800822f 	.word	0x0800822f
 8008170:	080080db 	.word	0x080080db
 8008174:	08008209 	.word	0x08008209
 8008178:	080080db 	.word	0x080080db
 800817c:	080080db 	.word	0x080080db
 8008180:	080081b3 	.word	0x080081b3
 8008184:	3b45      	subs	r3, #69	@ 0x45
 8008186:	2b02      	cmp	r3, #2
 8008188:	d8a7      	bhi.n	80080da <__ssvfiscanf_r+0xee>
 800818a:	2305      	movs	r3, #5
 800818c:	e021      	b.n	80081d2 <__ssvfiscanf_r+0x1e6>
 800818e:	4621      	mov	r1, r4
 8008190:	4630      	mov	r0, r6
 8008192:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008194:	4798      	blx	r3
 8008196:	2800      	cmp	r0, #0
 8008198:	f43f af65 	beq.w	8008066 <__ssvfiscanf_r+0x7a>
 800819c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800819e:	2800      	cmp	r0, #0
 80081a0:	f040 808c 	bne.w	80082bc <__ssvfiscanf_r+0x2d0>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	e08c      	b.n	80082c4 <__ssvfiscanf_r+0x2d8>
 80081aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80081ac:	f042 0220 	orr.w	r2, r2, #32
 80081b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80081b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80081b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80081ba:	2210      	movs	r2, #16
 80081bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80081be:	9242      	str	r2, [sp, #264]	@ 0x108
 80081c0:	d902      	bls.n	80081c8 <__ssvfiscanf_r+0x1dc>
 80081c2:	e005      	b.n	80081d0 <__ssvfiscanf_r+0x1e4>
 80081c4:	2300      	movs	r3, #0
 80081c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80081c8:	2303      	movs	r3, #3
 80081ca:	e002      	b.n	80081d2 <__ssvfiscanf_r+0x1e6>
 80081cc:	2308      	movs	r3, #8
 80081ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80081d0:	2304      	movs	r3, #4
 80081d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80081d4:	6863      	ldr	r3, [r4, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd39      	ble.n	800824e <__ssvfiscanf_r+0x262>
 80081da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80081dc:	0659      	lsls	r1, r3, #25
 80081de:	d404      	bmi.n	80081ea <__ssvfiscanf_r+0x1fe>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	781a      	ldrb	r2, [r3, #0]
 80081e4:	5cba      	ldrb	r2, [r7, r2]
 80081e6:	0712      	lsls	r2, r2, #28
 80081e8:	d438      	bmi.n	800825c <__ssvfiscanf_r+0x270>
 80081ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	dc47      	bgt.n	8008280 <__ssvfiscanf_r+0x294>
 80081f0:	466b      	mov	r3, sp
 80081f2:	4622      	mov	r2, r4
 80081f4:	4630      	mov	r0, r6
 80081f6:	a941      	add	r1, sp, #260	@ 0x104
 80081f8:	f000 f9aa 	bl	8008550 <_scanf_chars>
 80081fc:	2801      	cmp	r0, #1
 80081fe:	d065      	beq.n	80082cc <__ssvfiscanf_r+0x2e0>
 8008200:	2802      	cmp	r0, #2
 8008202:	f47f af17 	bne.w	8008034 <__ssvfiscanf_r+0x48>
 8008206:	e7c9      	b.n	800819c <__ssvfiscanf_r+0x1b0>
 8008208:	220a      	movs	r2, #10
 800820a:	e7d7      	b.n	80081bc <__ssvfiscanf_r+0x1d0>
 800820c:	4629      	mov	r1, r5
 800820e:	4640      	mov	r0, r8
 8008210:	f000 fb92 	bl	8008938 <__sccl>
 8008214:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008216:	4605      	mov	r5, r0
 8008218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821c:	9341      	str	r3, [sp, #260]	@ 0x104
 800821e:	2301      	movs	r3, #1
 8008220:	e7d7      	b.n	80081d2 <__ssvfiscanf_r+0x1e6>
 8008222:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008228:	9341      	str	r3, [sp, #260]	@ 0x104
 800822a:	2300      	movs	r3, #0
 800822c:	e7d1      	b.n	80081d2 <__ssvfiscanf_r+0x1e6>
 800822e:	2302      	movs	r3, #2
 8008230:	e7cf      	b.n	80081d2 <__ssvfiscanf_r+0x1e6>
 8008232:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008234:	06c3      	lsls	r3, r0, #27
 8008236:	f53f aefd 	bmi.w	8008034 <__ssvfiscanf_r+0x48>
 800823a:	9b00      	ldr	r3, [sp, #0]
 800823c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800823e:	1d19      	adds	r1, r3, #4
 8008240:	9100      	str	r1, [sp, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	07c0      	lsls	r0, r0, #31
 8008246:	bf4c      	ite	mi
 8008248:	801a      	strhmi	r2, [r3, #0]
 800824a:	601a      	strpl	r2, [r3, #0]
 800824c:	e6f2      	b.n	8008034 <__ssvfiscanf_r+0x48>
 800824e:	4621      	mov	r1, r4
 8008250:	4630      	mov	r0, r6
 8008252:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008254:	4798      	blx	r3
 8008256:	2800      	cmp	r0, #0
 8008258:	d0bf      	beq.n	80081da <__ssvfiscanf_r+0x1ee>
 800825a:	e79f      	b.n	800819c <__ssvfiscanf_r+0x1b0>
 800825c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800825e:	3201      	adds	r2, #1
 8008260:	9245      	str	r2, [sp, #276]	@ 0x114
 8008262:	6862      	ldr	r2, [r4, #4]
 8008264:	3a01      	subs	r2, #1
 8008266:	2a00      	cmp	r2, #0
 8008268:	6062      	str	r2, [r4, #4]
 800826a:	dd02      	ble.n	8008272 <__ssvfiscanf_r+0x286>
 800826c:	3301      	adds	r3, #1
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	e7b6      	b.n	80081e0 <__ssvfiscanf_r+0x1f4>
 8008272:	4621      	mov	r1, r4
 8008274:	4630      	mov	r0, r6
 8008276:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008278:	4798      	blx	r3
 800827a:	2800      	cmp	r0, #0
 800827c:	d0b0      	beq.n	80081e0 <__ssvfiscanf_r+0x1f4>
 800827e:	e78d      	b.n	800819c <__ssvfiscanf_r+0x1b0>
 8008280:	2b04      	cmp	r3, #4
 8008282:	dc06      	bgt.n	8008292 <__ssvfiscanf_r+0x2a6>
 8008284:	466b      	mov	r3, sp
 8008286:	4622      	mov	r2, r4
 8008288:	4630      	mov	r0, r6
 800828a:	a941      	add	r1, sp, #260	@ 0x104
 800828c:	f000 f9ba 	bl	8008604 <_scanf_i>
 8008290:	e7b4      	b.n	80081fc <__ssvfiscanf_r+0x210>
 8008292:	4b09      	ldr	r3, [pc, #36]	@ (80082b8 <__ssvfiscanf_r+0x2cc>)
 8008294:	2b00      	cmp	r3, #0
 8008296:	f43f aecd 	beq.w	8008034 <__ssvfiscanf_r+0x48>
 800829a:	466b      	mov	r3, sp
 800829c:	4622      	mov	r2, r4
 800829e:	4630      	mov	r0, r6
 80082a0:	a941      	add	r1, sp, #260	@ 0x104
 80082a2:	f7fc fe67 	bl	8004f74 <_scanf_float>
 80082a6:	e7a9      	b.n	80081fc <__ssvfiscanf_r+0x210>
 80082a8:	08007f3d 	.word	0x08007f3d
 80082ac:	08007fb3 	.word	0x08007fb3
 80082b0:	080099b9 	.word	0x080099b9
 80082b4:	08009abf 	.word	0x08009abf
 80082b8:	08004f75 	.word	0x08004f75
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	065b      	lsls	r3, r3, #25
 80082c0:	f53f af70 	bmi.w	80081a4 <__ssvfiscanf_r+0x1b8>
 80082c4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80082c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80082ce:	e7f9      	b.n	80082c4 <__ssvfiscanf_r+0x2d8>

080082d0 <__sfputc_r>:
 80082d0:	6893      	ldr	r3, [r2, #8]
 80082d2:	b410      	push	{r4}
 80082d4:	3b01      	subs	r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	6093      	str	r3, [r2, #8]
 80082da:	da07      	bge.n	80082ec <__sfputc_r+0x1c>
 80082dc:	6994      	ldr	r4, [r2, #24]
 80082de:	42a3      	cmp	r3, r4
 80082e0:	db01      	blt.n	80082e6 <__sfputc_r+0x16>
 80082e2:	290a      	cmp	r1, #10
 80082e4:	d102      	bne.n	80082ec <__sfputc_r+0x1c>
 80082e6:	bc10      	pop	{r4}
 80082e8:	f000 bb97 	b.w	8008a1a <__swbuf_r>
 80082ec:	6813      	ldr	r3, [r2, #0]
 80082ee:	1c58      	adds	r0, r3, #1
 80082f0:	6010      	str	r0, [r2, #0]
 80082f2:	7019      	strb	r1, [r3, #0]
 80082f4:	4608      	mov	r0, r1
 80082f6:	bc10      	pop	{r4}
 80082f8:	4770      	bx	lr

080082fa <__sfputs_r>:
 80082fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fc:	4606      	mov	r6, r0
 80082fe:	460f      	mov	r7, r1
 8008300:	4614      	mov	r4, r2
 8008302:	18d5      	adds	r5, r2, r3
 8008304:	42ac      	cmp	r4, r5
 8008306:	d101      	bne.n	800830c <__sfputs_r+0x12>
 8008308:	2000      	movs	r0, #0
 800830a:	e007      	b.n	800831c <__sfputs_r+0x22>
 800830c:	463a      	mov	r2, r7
 800830e:	4630      	mov	r0, r6
 8008310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008314:	f7ff ffdc 	bl	80082d0 <__sfputc_r>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d1f3      	bne.n	8008304 <__sfputs_r+0xa>
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008320 <_vfiprintf_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	460d      	mov	r5, r1
 8008326:	4614      	mov	r4, r2
 8008328:	4698      	mov	r8, r3
 800832a:	4606      	mov	r6, r0
 800832c:	b09d      	sub	sp, #116	@ 0x74
 800832e:	b118      	cbz	r0, 8008338 <_vfiprintf_r+0x18>
 8008330:	6a03      	ldr	r3, [r0, #32]
 8008332:	b90b      	cbnz	r3, 8008338 <_vfiprintf_r+0x18>
 8008334:	f7fd f8ba 	bl	80054ac <__sinit>
 8008338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800833a:	07d9      	lsls	r1, r3, #31
 800833c:	d405      	bmi.n	800834a <_vfiprintf_r+0x2a>
 800833e:	89ab      	ldrh	r3, [r5, #12]
 8008340:	059a      	lsls	r2, r3, #22
 8008342:	d402      	bmi.n	800834a <_vfiprintf_r+0x2a>
 8008344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008346:	f7fd fa18 	bl	800577a <__retarget_lock_acquire_recursive>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	071b      	lsls	r3, r3, #28
 800834e:	d501      	bpl.n	8008354 <_vfiprintf_r+0x34>
 8008350:	692b      	ldr	r3, [r5, #16]
 8008352:	b99b      	cbnz	r3, 800837c <_vfiprintf_r+0x5c>
 8008354:	4629      	mov	r1, r5
 8008356:	4630      	mov	r0, r6
 8008358:	f000 fb9e 	bl	8008a98 <__swsetup_r>
 800835c:	b170      	cbz	r0, 800837c <_vfiprintf_r+0x5c>
 800835e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008360:	07dc      	lsls	r4, r3, #31
 8008362:	d504      	bpl.n	800836e <_vfiprintf_r+0x4e>
 8008364:	f04f 30ff 	mov.w	r0, #4294967295
 8008368:	b01d      	add	sp, #116	@ 0x74
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	0598      	lsls	r0, r3, #22
 8008372:	d4f7      	bmi.n	8008364 <_vfiprintf_r+0x44>
 8008374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008376:	f7fd fa01 	bl	800577c <__retarget_lock_release_recursive>
 800837a:	e7f3      	b.n	8008364 <_vfiprintf_r+0x44>
 800837c:	2300      	movs	r3, #0
 800837e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008380:	2320      	movs	r3, #32
 8008382:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008386:	2330      	movs	r3, #48	@ 0x30
 8008388:	f04f 0901 	mov.w	r9, #1
 800838c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008390:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800853c <_vfiprintf_r+0x21c>
 8008394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008398:	4623      	mov	r3, r4
 800839a:	469a      	mov	sl, r3
 800839c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a0:	b10a      	cbz	r2, 80083a6 <_vfiprintf_r+0x86>
 80083a2:	2a25      	cmp	r2, #37	@ 0x25
 80083a4:	d1f9      	bne.n	800839a <_vfiprintf_r+0x7a>
 80083a6:	ebba 0b04 	subs.w	fp, sl, r4
 80083aa:	d00b      	beq.n	80083c4 <_vfiprintf_r+0xa4>
 80083ac:	465b      	mov	r3, fp
 80083ae:	4622      	mov	r2, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7ff ffa1 	bl	80082fa <__sfputs_r>
 80083b8:	3001      	adds	r0, #1
 80083ba:	f000 80a7 	beq.w	800850c <_vfiprintf_r+0x1ec>
 80083be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083c0:	445a      	add	r2, fp
 80083c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083c4:	f89a 3000 	ldrb.w	r3, [sl]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 809f 	beq.w	800850c <_vfiprintf_r+0x1ec>
 80083ce:	2300      	movs	r3, #0
 80083d0:	f04f 32ff 	mov.w	r2, #4294967295
 80083d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d8:	f10a 0a01 	add.w	sl, sl, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	9307      	str	r3, [sp, #28]
 80083e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80083e6:	4654      	mov	r4, sl
 80083e8:	2205      	movs	r2, #5
 80083ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ee:	4853      	ldr	r0, [pc, #332]	@ (800853c <_vfiprintf_r+0x21c>)
 80083f0:	f7fd f9c5 	bl	800577e <memchr>
 80083f4:	9a04      	ldr	r2, [sp, #16]
 80083f6:	b9d8      	cbnz	r0, 8008430 <_vfiprintf_r+0x110>
 80083f8:	06d1      	lsls	r1, r2, #27
 80083fa:	bf44      	itt	mi
 80083fc:	2320      	movmi	r3, #32
 80083fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008402:	0713      	lsls	r3, r2, #28
 8008404:	bf44      	itt	mi
 8008406:	232b      	movmi	r3, #43	@ 0x2b
 8008408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800840c:	f89a 3000 	ldrb.w	r3, [sl]
 8008410:	2b2a      	cmp	r3, #42	@ 0x2a
 8008412:	d015      	beq.n	8008440 <_vfiprintf_r+0x120>
 8008414:	4654      	mov	r4, sl
 8008416:	2000      	movs	r0, #0
 8008418:	f04f 0c0a 	mov.w	ip, #10
 800841c:	9a07      	ldr	r2, [sp, #28]
 800841e:	4621      	mov	r1, r4
 8008420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008424:	3b30      	subs	r3, #48	@ 0x30
 8008426:	2b09      	cmp	r3, #9
 8008428:	d94b      	bls.n	80084c2 <_vfiprintf_r+0x1a2>
 800842a:	b1b0      	cbz	r0, 800845a <_vfiprintf_r+0x13a>
 800842c:	9207      	str	r2, [sp, #28]
 800842e:	e014      	b.n	800845a <_vfiprintf_r+0x13a>
 8008430:	eba0 0308 	sub.w	r3, r0, r8
 8008434:	fa09 f303 	lsl.w	r3, r9, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	46a2      	mov	sl, r4
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	e7d2      	b.n	80083e6 <_vfiprintf_r+0xc6>
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	1d19      	adds	r1, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	9103      	str	r1, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfbb      	ittet	lt
 800844c:	425b      	neglt	r3, r3
 800844e:	f042 0202 	orrlt.w	r2, r2, #2
 8008452:	9307      	strge	r3, [sp, #28]
 8008454:	9307      	strlt	r3, [sp, #28]
 8008456:	bfb8      	it	lt
 8008458:	9204      	strlt	r2, [sp, #16]
 800845a:	7823      	ldrb	r3, [r4, #0]
 800845c:	2b2e      	cmp	r3, #46	@ 0x2e
 800845e:	d10a      	bne.n	8008476 <_vfiprintf_r+0x156>
 8008460:	7863      	ldrb	r3, [r4, #1]
 8008462:	2b2a      	cmp	r3, #42	@ 0x2a
 8008464:	d132      	bne.n	80084cc <_vfiprintf_r+0x1ac>
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	3402      	adds	r4, #2
 800846a:	1d1a      	adds	r2, r3, #4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	9203      	str	r2, [sp, #12]
 8008470:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008540 <_vfiprintf_r+0x220>
 800847a:	2203      	movs	r2, #3
 800847c:	4650      	mov	r0, sl
 800847e:	7821      	ldrb	r1, [r4, #0]
 8008480:	f7fd f97d 	bl	800577e <memchr>
 8008484:	b138      	cbz	r0, 8008496 <_vfiprintf_r+0x176>
 8008486:	2240      	movs	r2, #64	@ 0x40
 8008488:	9b04      	ldr	r3, [sp, #16]
 800848a:	eba0 000a 	sub.w	r0, r0, sl
 800848e:	4082      	lsls	r2, r0
 8008490:	4313      	orrs	r3, r2
 8008492:	3401      	adds	r4, #1
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849a:	2206      	movs	r2, #6
 800849c:	4829      	ldr	r0, [pc, #164]	@ (8008544 <_vfiprintf_r+0x224>)
 800849e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084a2:	f7fd f96c 	bl	800577e <memchr>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d03f      	beq.n	800852a <_vfiprintf_r+0x20a>
 80084aa:	4b27      	ldr	r3, [pc, #156]	@ (8008548 <_vfiprintf_r+0x228>)
 80084ac:	bb1b      	cbnz	r3, 80084f6 <_vfiprintf_r+0x1d6>
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	3307      	adds	r3, #7
 80084b2:	f023 0307 	bic.w	r3, r3, #7
 80084b6:	3308      	adds	r3, #8
 80084b8:	9303      	str	r3, [sp, #12]
 80084ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084bc:	443b      	add	r3, r7
 80084be:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c0:	e76a      	b.n	8008398 <_vfiprintf_r+0x78>
 80084c2:	460c      	mov	r4, r1
 80084c4:	2001      	movs	r0, #1
 80084c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ca:	e7a8      	b.n	800841e <_vfiprintf_r+0xfe>
 80084cc:	2300      	movs	r3, #0
 80084ce:	f04f 0c0a 	mov.w	ip, #10
 80084d2:	4619      	mov	r1, r3
 80084d4:	3401      	adds	r4, #1
 80084d6:	9305      	str	r3, [sp, #20]
 80084d8:	4620      	mov	r0, r4
 80084da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084de:	3a30      	subs	r2, #48	@ 0x30
 80084e0:	2a09      	cmp	r2, #9
 80084e2:	d903      	bls.n	80084ec <_vfiprintf_r+0x1cc>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0c6      	beq.n	8008476 <_vfiprintf_r+0x156>
 80084e8:	9105      	str	r1, [sp, #20]
 80084ea:	e7c4      	b.n	8008476 <_vfiprintf_r+0x156>
 80084ec:	4604      	mov	r4, r0
 80084ee:	2301      	movs	r3, #1
 80084f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f4:	e7f0      	b.n	80084d8 <_vfiprintf_r+0x1b8>
 80084f6:	ab03      	add	r3, sp, #12
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	462a      	mov	r2, r5
 80084fc:	4630      	mov	r0, r6
 80084fe:	4b13      	ldr	r3, [pc, #76]	@ (800854c <_vfiprintf_r+0x22c>)
 8008500:	a904      	add	r1, sp, #16
 8008502:	f7fc f979 	bl	80047f8 <_printf_float>
 8008506:	4607      	mov	r7, r0
 8008508:	1c78      	adds	r0, r7, #1
 800850a:	d1d6      	bne.n	80084ba <_vfiprintf_r+0x19a>
 800850c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800850e:	07d9      	lsls	r1, r3, #31
 8008510:	d405      	bmi.n	800851e <_vfiprintf_r+0x1fe>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	059a      	lsls	r2, r3, #22
 8008516:	d402      	bmi.n	800851e <_vfiprintf_r+0x1fe>
 8008518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800851a:	f7fd f92f 	bl	800577c <__retarget_lock_release_recursive>
 800851e:	89ab      	ldrh	r3, [r5, #12]
 8008520:	065b      	lsls	r3, r3, #25
 8008522:	f53f af1f 	bmi.w	8008364 <_vfiprintf_r+0x44>
 8008526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008528:	e71e      	b.n	8008368 <_vfiprintf_r+0x48>
 800852a:	ab03      	add	r3, sp, #12
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	462a      	mov	r2, r5
 8008530:	4630      	mov	r0, r6
 8008532:	4b06      	ldr	r3, [pc, #24]	@ (800854c <_vfiprintf_r+0x22c>)
 8008534:	a904      	add	r1, sp, #16
 8008536:	f7fc fbfd 	bl	8004d34 <_printf_i>
 800853a:	e7e4      	b.n	8008506 <_vfiprintf_r+0x1e6>
 800853c:	08009ab9 	.word	0x08009ab9
 8008540:	08009abf 	.word	0x08009abf
 8008544:	08009ac3 	.word	0x08009ac3
 8008548:	080047f9 	.word	0x080047f9
 800854c:	080082fb 	.word	0x080082fb

08008550 <_scanf_chars>:
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008554:	4615      	mov	r5, r2
 8008556:	688a      	ldr	r2, [r1, #8]
 8008558:	4680      	mov	r8, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b932      	cbnz	r2, 800856c <_scanf_chars+0x1c>
 800855e:	698a      	ldr	r2, [r1, #24]
 8008560:	2a00      	cmp	r2, #0
 8008562:	bf14      	ite	ne
 8008564:	f04f 32ff 	movne.w	r2, #4294967295
 8008568:	2201      	moveq	r2, #1
 800856a:	608a      	str	r2, [r1, #8]
 800856c:	2700      	movs	r7, #0
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008600 <_scanf_chars+0xb0>
 8008574:	06d1      	lsls	r1, r2, #27
 8008576:	bf5f      	itttt	pl
 8008578:	681a      	ldrpl	r2, [r3, #0]
 800857a:	1d11      	addpl	r1, r2, #4
 800857c:	6019      	strpl	r1, [r3, #0]
 800857e:	6816      	ldrpl	r6, [r2, #0]
 8008580:	69a0      	ldr	r0, [r4, #24]
 8008582:	b188      	cbz	r0, 80085a8 <_scanf_chars+0x58>
 8008584:	2801      	cmp	r0, #1
 8008586:	d107      	bne.n	8008598 <_scanf_chars+0x48>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	6963      	ldr	r3, [r4, #20]
 800858e:	5c9b      	ldrb	r3, [r3, r2]
 8008590:	b953      	cbnz	r3, 80085a8 <_scanf_chars+0x58>
 8008592:	2f00      	cmp	r7, #0
 8008594:	d031      	beq.n	80085fa <_scanf_chars+0xaa>
 8008596:	e022      	b.n	80085de <_scanf_chars+0x8e>
 8008598:	2802      	cmp	r0, #2
 800859a:	d120      	bne.n	80085de <_scanf_chars+0x8e>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80085a4:	071b      	lsls	r3, r3, #28
 80085a6:	d41a      	bmi.n	80085de <_scanf_chars+0x8e>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	3701      	adds	r7, #1
 80085ac:	06da      	lsls	r2, r3, #27
 80085ae:	bf5e      	ittt	pl
 80085b0:	682b      	ldrpl	r3, [r5, #0]
 80085b2:	781b      	ldrbpl	r3, [r3, #0]
 80085b4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80085b8:	682a      	ldr	r2, [r5, #0]
 80085ba:	686b      	ldr	r3, [r5, #4]
 80085bc:	3201      	adds	r2, #1
 80085be:	602a      	str	r2, [r5, #0]
 80085c0:	68a2      	ldr	r2, [r4, #8]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	3a01      	subs	r2, #1
 80085c6:	606b      	str	r3, [r5, #4]
 80085c8:	60a2      	str	r2, [r4, #8]
 80085ca:	b142      	cbz	r2, 80085de <_scanf_chars+0x8e>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	dcd7      	bgt.n	8008580 <_scanf_chars+0x30>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4640      	mov	r0, r8
 80085d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085d8:	4798      	blx	r3
 80085da:	2800      	cmp	r0, #0
 80085dc:	d0d0      	beq.n	8008580 <_scanf_chars+0x30>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	f013 0310 	ands.w	r3, r3, #16
 80085e4:	d105      	bne.n	80085f2 <_scanf_chars+0xa2>
 80085e6:	68e2      	ldr	r2, [r4, #12]
 80085e8:	3201      	adds	r2, #1
 80085ea:	60e2      	str	r2, [r4, #12]
 80085ec:	69a2      	ldr	r2, [r4, #24]
 80085ee:	b102      	cbz	r2, 80085f2 <_scanf_chars+0xa2>
 80085f0:	7033      	strb	r3, [r6, #0]
 80085f2:	2000      	movs	r0, #0
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	443b      	add	r3, r7
 80085f8:	6123      	str	r3, [r4, #16]
 80085fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fe:	bf00      	nop
 8008600:	080099b9 	.word	0x080099b9

08008604 <_scanf_i>:
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	460c      	mov	r4, r1
 800860a:	4698      	mov	r8, r3
 800860c:	4b72      	ldr	r3, [pc, #456]	@ (80087d8 <_scanf_i+0x1d4>)
 800860e:	b087      	sub	sp, #28
 8008610:	4682      	mov	sl, r0
 8008612:	4616      	mov	r6, r2
 8008614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008618:	ab03      	add	r3, sp, #12
 800861a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800861e:	4b6f      	ldr	r3, [pc, #444]	@ (80087dc <_scanf_i+0x1d8>)
 8008620:	69a1      	ldr	r1, [r4, #24]
 8008622:	4a6f      	ldr	r2, [pc, #444]	@ (80087e0 <_scanf_i+0x1dc>)
 8008624:	4627      	mov	r7, r4
 8008626:	2903      	cmp	r1, #3
 8008628:	bf08      	it	eq
 800862a:	461a      	moveq	r2, r3
 800862c:	68a3      	ldr	r3, [r4, #8]
 800862e:	9201      	str	r2, [sp, #4]
 8008630:	1e5a      	subs	r2, r3, #1
 8008632:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008636:	bf81      	itttt	hi
 8008638:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800863c:	eb03 0905 	addhi.w	r9, r3, r5
 8008640:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008644:	60a3      	strhi	r3, [r4, #8]
 8008646:	f857 3b1c 	ldr.w	r3, [r7], #28
 800864a:	bf98      	it	ls
 800864c:	f04f 0900 	movls.w	r9, #0
 8008650:	463d      	mov	r5, r7
 8008652:	f04f 0b00 	mov.w	fp, #0
 8008656:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	6831      	ldr	r1, [r6, #0]
 800865e:	ab03      	add	r3, sp, #12
 8008660:	2202      	movs	r2, #2
 8008662:	7809      	ldrb	r1, [r1, #0]
 8008664:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008668:	f7fd f889 	bl	800577e <memchr>
 800866c:	b328      	cbz	r0, 80086ba <_scanf_i+0xb6>
 800866e:	f1bb 0f01 	cmp.w	fp, #1
 8008672:	d159      	bne.n	8008728 <_scanf_i+0x124>
 8008674:	6862      	ldr	r2, [r4, #4]
 8008676:	b92a      	cbnz	r2, 8008684 <_scanf_i+0x80>
 8008678:	2108      	movs	r1, #8
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	6061      	str	r1, [r4, #4]
 800867e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008682:	6022      	str	r2, [r4, #0]
 8008684:	6822      	ldr	r2, [r4, #0]
 8008686:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800868a:	6022      	str	r2, [r4, #0]
 800868c:	68a2      	ldr	r2, [r4, #8]
 800868e:	1e51      	subs	r1, r2, #1
 8008690:	60a1      	str	r1, [r4, #8]
 8008692:	b192      	cbz	r2, 80086ba <_scanf_i+0xb6>
 8008694:	6832      	ldr	r2, [r6, #0]
 8008696:	1c51      	adds	r1, r2, #1
 8008698:	6031      	str	r1, [r6, #0]
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	f805 2b01 	strb.w	r2, [r5], #1
 80086a0:	6872      	ldr	r2, [r6, #4]
 80086a2:	3a01      	subs	r2, #1
 80086a4:	2a00      	cmp	r2, #0
 80086a6:	6072      	str	r2, [r6, #4]
 80086a8:	dc07      	bgt.n	80086ba <_scanf_i+0xb6>
 80086aa:	4631      	mov	r1, r6
 80086ac:	4650      	mov	r0, sl
 80086ae:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80086b2:	4790      	blx	r2
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f040 8085 	bne.w	80087c4 <_scanf_i+0x1c0>
 80086ba:	f10b 0b01 	add.w	fp, fp, #1
 80086be:	f1bb 0f03 	cmp.w	fp, #3
 80086c2:	d1cb      	bne.n	800865c <_scanf_i+0x58>
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	b90b      	cbnz	r3, 80086cc <_scanf_i+0xc8>
 80086c8:	230a      	movs	r3, #10
 80086ca:	6063      	str	r3, [r4, #4]
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	4945      	ldr	r1, [pc, #276]	@ (80087e4 <_scanf_i+0x1e0>)
 80086d0:	6960      	ldr	r0, [r4, #20]
 80086d2:	1ac9      	subs	r1, r1, r3
 80086d4:	f000 f930 	bl	8008938 <__sccl>
 80086d8:	f04f 0b00 	mov.w	fp, #0
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d03d      	beq.n	8008760 <_scanf_i+0x15c>
 80086e4:	6831      	ldr	r1, [r6, #0]
 80086e6:	6960      	ldr	r0, [r4, #20]
 80086e8:	f891 c000 	ldrb.w	ip, [r1]
 80086ec:	f810 000c 	ldrb.w	r0, [r0, ip]
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d035      	beq.n	8008760 <_scanf_i+0x15c>
 80086f4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80086f8:	d124      	bne.n	8008744 <_scanf_i+0x140>
 80086fa:	0510      	lsls	r0, r2, #20
 80086fc:	d522      	bpl.n	8008744 <_scanf_i+0x140>
 80086fe:	f10b 0b01 	add.w	fp, fp, #1
 8008702:	f1b9 0f00 	cmp.w	r9, #0
 8008706:	d003      	beq.n	8008710 <_scanf_i+0x10c>
 8008708:	3301      	adds	r3, #1
 800870a:	f109 39ff 	add.w	r9, r9, #4294967295
 800870e:	60a3      	str	r3, [r4, #8]
 8008710:	6873      	ldr	r3, [r6, #4]
 8008712:	3b01      	subs	r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	6073      	str	r3, [r6, #4]
 8008718:	dd1b      	ble.n	8008752 <_scanf_i+0x14e>
 800871a:	6833      	ldr	r3, [r6, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	6033      	str	r3, [r6, #0]
 8008720:	68a3      	ldr	r3, [r4, #8]
 8008722:	3b01      	subs	r3, #1
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	e7d9      	b.n	80086dc <_scanf_i+0xd8>
 8008728:	f1bb 0f02 	cmp.w	fp, #2
 800872c:	d1ae      	bne.n	800868c <_scanf_i+0x88>
 800872e:	6822      	ldr	r2, [r4, #0]
 8008730:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008734:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008738:	d1bf      	bne.n	80086ba <_scanf_i+0xb6>
 800873a:	2110      	movs	r1, #16
 800873c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008740:	6061      	str	r1, [r4, #4]
 8008742:	e7a2      	b.n	800868a <_scanf_i+0x86>
 8008744:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008748:	6022      	str	r2, [r4, #0]
 800874a:	780b      	ldrb	r3, [r1, #0]
 800874c:	f805 3b01 	strb.w	r3, [r5], #1
 8008750:	e7de      	b.n	8008710 <_scanf_i+0x10c>
 8008752:	4631      	mov	r1, r6
 8008754:	4650      	mov	r0, sl
 8008756:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800875a:	4798      	blx	r3
 800875c:	2800      	cmp	r0, #0
 800875e:	d0df      	beq.n	8008720 <_scanf_i+0x11c>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	05d9      	lsls	r1, r3, #23
 8008764:	d50d      	bpl.n	8008782 <_scanf_i+0x17e>
 8008766:	42bd      	cmp	r5, r7
 8008768:	d909      	bls.n	800877e <_scanf_i+0x17a>
 800876a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800876e:	4632      	mov	r2, r6
 8008770:	4650      	mov	r0, sl
 8008772:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008776:	f105 39ff 	add.w	r9, r5, #4294967295
 800877a:	4798      	blx	r3
 800877c:	464d      	mov	r5, r9
 800877e:	42bd      	cmp	r5, r7
 8008780:	d028      	beq.n	80087d4 <_scanf_i+0x1d0>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	f012 0210 	ands.w	r2, r2, #16
 8008788:	d113      	bne.n	80087b2 <_scanf_i+0x1ae>
 800878a:	702a      	strb	r2, [r5, #0]
 800878c:	4639      	mov	r1, r7
 800878e:	6863      	ldr	r3, [r4, #4]
 8008790:	4650      	mov	r0, sl
 8008792:	9e01      	ldr	r6, [sp, #4]
 8008794:	47b0      	blx	r6
 8008796:	f8d8 3000 	ldr.w	r3, [r8]
 800879a:	6821      	ldr	r1, [r4, #0]
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	f8c8 2000 	str.w	r2, [r8]
 80087a2:	f011 0f20 	tst.w	r1, #32
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	d00f      	beq.n	80087ca <_scanf_i+0x1c6>
 80087aa:	6018      	str	r0, [r3, #0]
 80087ac:	68e3      	ldr	r3, [r4, #12]
 80087ae:	3301      	adds	r3, #1
 80087b0:	60e3      	str	r3, [r4, #12]
 80087b2:	2000      	movs	r0, #0
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	1bed      	subs	r5, r5, r7
 80087b8:	445d      	add	r5, fp
 80087ba:	442b      	add	r3, r5
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	b007      	add	sp, #28
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c4:	f04f 0b00 	mov.w	fp, #0
 80087c8:	e7ca      	b.n	8008760 <_scanf_i+0x15c>
 80087ca:	07ca      	lsls	r2, r1, #31
 80087cc:	bf4c      	ite	mi
 80087ce:	8018      	strhmi	r0, [r3, #0]
 80087d0:	6018      	strpl	r0, [r3, #0]
 80087d2:	e7eb      	b.n	80087ac <_scanf_i+0x1a8>
 80087d4:	2001      	movs	r0, #1
 80087d6:	e7f2      	b.n	80087be <_scanf_i+0x1ba>
 80087d8:	080096c8 	.word	0x080096c8
 80087dc:	08007c89 	.word	0x08007c89
 80087e0:	080093f5 	.word	0x080093f5
 80087e4:	08009ada 	.word	0x08009ada

080087e8 <__sflush_r>:
 80087e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	0716      	lsls	r6, r2, #28
 80087f0:	4605      	mov	r5, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	d454      	bmi.n	80088a0 <__sflush_r+0xb8>
 80087f6:	684b      	ldr	r3, [r1, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dc02      	bgt.n	8008802 <__sflush_r+0x1a>
 80087fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dd48      	ble.n	8008894 <__sflush_r+0xac>
 8008802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008804:	2e00      	cmp	r6, #0
 8008806:	d045      	beq.n	8008894 <__sflush_r+0xac>
 8008808:	2300      	movs	r3, #0
 800880a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800880e:	682f      	ldr	r7, [r5, #0]
 8008810:	6a21      	ldr	r1, [r4, #32]
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	d030      	beq.n	8008878 <__sflush_r+0x90>
 8008816:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	0759      	lsls	r1, r3, #29
 800881c:	d505      	bpl.n	800882a <__sflush_r+0x42>
 800881e:	6863      	ldr	r3, [r4, #4]
 8008820:	1ad2      	subs	r2, r2, r3
 8008822:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008824:	b10b      	cbz	r3, 800882a <__sflush_r+0x42>
 8008826:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	2300      	movs	r3, #0
 800882c:	4628      	mov	r0, r5
 800882e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008830:	6a21      	ldr	r1, [r4, #32]
 8008832:	47b0      	blx	r6
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	d106      	bne.n	8008848 <__sflush_r+0x60>
 800883a:	6829      	ldr	r1, [r5, #0]
 800883c:	291d      	cmp	r1, #29
 800883e:	d82b      	bhi.n	8008898 <__sflush_r+0xb0>
 8008840:	4a28      	ldr	r2, [pc, #160]	@ (80088e4 <__sflush_r+0xfc>)
 8008842:	410a      	asrs	r2, r1
 8008844:	07d6      	lsls	r6, r2, #31
 8008846:	d427      	bmi.n	8008898 <__sflush_r+0xb0>
 8008848:	2200      	movs	r2, #0
 800884a:	6062      	str	r2, [r4, #4]
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	04d9      	lsls	r1, r3, #19
 8008850:	6022      	str	r2, [r4, #0]
 8008852:	d504      	bpl.n	800885e <__sflush_r+0x76>
 8008854:	1c42      	adds	r2, r0, #1
 8008856:	d101      	bne.n	800885c <__sflush_r+0x74>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b903      	cbnz	r3, 800885e <__sflush_r+0x76>
 800885c:	6560      	str	r0, [r4, #84]	@ 0x54
 800885e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008860:	602f      	str	r7, [r5, #0]
 8008862:	b1b9      	cbz	r1, 8008894 <__sflush_r+0xac>
 8008864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <__sflush_r+0x8a>
 800886c:	4628      	mov	r0, r5
 800886e:	f7fd fdeb 	bl	8006448 <_free_r>
 8008872:	2300      	movs	r3, #0
 8008874:	6363      	str	r3, [r4, #52]	@ 0x34
 8008876:	e00d      	b.n	8008894 <__sflush_r+0xac>
 8008878:	2301      	movs	r3, #1
 800887a:	4628      	mov	r0, r5
 800887c:	47b0      	blx	r6
 800887e:	4602      	mov	r2, r0
 8008880:	1c50      	adds	r0, r2, #1
 8008882:	d1c9      	bne.n	8008818 <__sflush_r+0x30>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0c6      	beq.n	8008818 <__sflush_r+0x30>
 800888a:	2b1d      	cmp	r3, #29
 800888c:	d001      	beq.n	8008892 <__sflush_r+0xaa>
 800888e:	2b16      	cmp	r3, #22
 8008890:	d11d      	bne.n	80088ce <__sflush_r+0xe6>
 8008892:	602f      	str	r7, [r5, #0]
 8008894:	2000      	movs	r0, #0
 8008896:	e021      	b.n	80088dc <__sflush_r+0xf4>
 8008898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800889c:	b21b      	sxth	r3, r3
 800889e:	e01a      	b.n	80088d6 <__sflush_r+0xee>
 80088a0:	690f      	ldr	r7, [r1, #16]
 80088a2:	2f00      	cmp	r7, #0
 80088a4:	d0f6      	beq.n	8008894 <__sflush_r+0xac>
 80088a6:	0793      	lsls	r3, r2, #30
 80088a8:	bf18      	it	ne
 80088aa:	2300      	movne	r3, #0
 80088ac:	680e      	ldr	r6, [r1, #0]
 80088ae:	bf08      	it	eq
 80088b0:	694b      	ldreq	r3, [r1, #20]
 80088b2:	1bf6      	subs	r6, r6, r7
 80088b4:	600f      	str	r7, [r1, #0]
 80088b6:	608b      	str	r3, [r1, #8]
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	ddeb      	ble.n	8008894 <__sflush_r+0xac>
 80088bc:	4633      	mov	r3, r6
 80088be:	463a      	mov	r2, r7
 80088c0:	4628      	mov	r0, r5
 80088c2:	6a21      	ldr	r1, [r4, #32]
 80088c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80088c8:	47e0      	blx	ip
 80088ca:	2800      	cmp	r0, #0
 80088cc:	dc07      	bgt.n	80088de <__sflush_r+0xf6>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088de:	4407      	add	r7, r0
 80088e0:	1a36      	subs	r6, r6, r0
 80088e2:	e7e9      	b.n	80088b8 <__sflush_r+0xd0>
 80088e4:	dfbffffe 	.word	0xdfbffffe

080088e8 <_fflush_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	690b      	ldr	r3, [r1, #16]
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	b913      	cbnz	r3, 80088f8 <_fflush_r+0x10>
 80088f2:	2500      	movs	r5, #0
 80088f4:	4628      	mov	r0, r5
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	b118      	cbz	r0, 8008902 <_fflush_r+0x1a>
 80088fa:	6a03      	ldr	r3, [r0, #32]
 80088fc:	b90b      	cbnz	r3, 8008902 <_fflush_r+0x1a>
 80088fe:	f7fc fdd5 	bl	80054ac <__sinit>
 8008902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f3      	beq.n	80088f2 <_fflush_r+0xa>
 800890a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d404      	bmi.n	800891a <_fflush_r+0x32>
 8008910:	0599      	lsls	r1, r3, #22
 8008912:	d402      	bmi.n	800891a <_fflush_r+0x32>
 8008914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008916:	f7fc ff30 	bl	800577a <__retarget_lock_acquire_recursive>
 800891a:	4628      	mov	r0, r5
 800891c:	4621      	mov	r1, r4
 800891e:	f7ff ff63 	bl	80087e8 <__sflush_r>
 8008922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008924:	4605      	mov	r5, r0
 8008926:	07da      	lsls	r2, r3, #31
 8008928:	d4e4      	bmi.n	80088f4 <_fflush_r+0xc>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d4e1      	bmi.n	80088f4 <_fflush_r+0xc>
 8008930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008932:	f7fc ff23 	bl	800577c <__retarget_lock_release_recursive>
 8008936:	e7dd      	b.n	80088f4 <_fflush_r+0xc>

08008938 <__sccl>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	780b      	ldrb	r3, [r1, #0]
 800893c:	4604      	mov	r4, r0
 800893e:	2b5e      	cmp	r3, #94	@ 0x5e
 8008940:	bf0b      	itete	eq
 8008942:	784b      	ldrbeq	r3, [r1, #1]
 8008944:	1c4a      	addne	r2, r1, #1
 8008946:	1c8a      	addeq	r2, r1, #2
 8008948:	2100      	movne	r1, #0
 800894a:	bf08      	it	eq
 800894c:	2101      	moveq	r1, #1
 800894e:	3801      	subs	r0, #1
 8008950:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008954:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008958:	42a8      	cmp	r0, r5
 800895a:	d1fb      	bne.n	8008954 <__sccl+0x1c>
 800895c:	b90b      	cbnz	r3, 8008962 <__sccl+0x2a>
 800895e:	1e50      	subs	r0, r2, #1
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	f081 0101 	eor.w	r1, r1, #1
 8008966:	4610      	mov	r0, r2
 8008968:	54e1      	strb	r1, [r4, r3]
 800896a:	4602      	mov	r2, r0
 800896c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008970:	2d2d      	cmp	r5, #45	@ 0x2d
 8008972:	d005      	beq.n	8008980 <__sccl+0x48>
 8008974:	2d5d      	cmp	r5, #93	@ 0x5d
 8008976:	d016      	beq.n	80089a6 <__sccl+0x6e>
 8008978:	2d00      	cmp	r5, #0
 800897a:	d0f1      	beq.n	8008960 <__sccl+0x28>
 800897c:	462b      	mov	r3, r5
 800897e:	e7f2      	b.n	8008966 <__sccl+0x2e>
 8008980:	7846      	ldrb	r6, [r0, #1]
 8008982:	2e5d      	cmp	r6, #93	@ 0x5d
 8008984:	d0fa      	beq.n	800897c <__sccl+0x44>
 8008986:	42b3      	cmp	r3, r6
 8008988:	dcf8      	bgt.n	800897c <__sccl+0x44>
 800898a:	461a      	mov	r2, r3
 800898c:	3002      	adds	r0, #2
 800898e:	3201      	adds	r2, #1
 8008990:	4296      	cmp	r6, r2
 8008992:	54a1      	strb	r1, [r4, r2]
 8008994:	dcfb      	bgt.n	800898e <__sccl+0x56>
 8008996:	1af2      	subs	r2, r6, r3
 8008998:	3a01      	subs	r2, #1
 800899a:	42b3      	cmp	r3, r6
 800899c:	bfa8      	it	ge
 800899e:	2200      	movge	r2, #0
 80089a0:	1c5d      	adds	r5, r3, #1
 80089a2:	18ab      	adds	r3, r5, r2
 80089a4:	e7e1      	b.n	800896a <__sccl+0x32>
 80089a6:	4610      	mov	r0, r2
 80089a8:	e7da      	b.n	8008960 <__sccl+0x28>

080089aa <__submore>:
 80089aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80089b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b6:	4299      	cmp	r1, r3
 80089b8:	d11b      	bne.n	80089f2 <__submore+0x48>
 80089ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089be:	f7fd fdb5 	bl	800652c <_malloc_r>
 80089c2:	b918      	cbnz	r0, 80089cc <__submore+0x22>
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80089d2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80089d6:	6360      	str	r0, [r4, #52]	@ 0x34
 80089d8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80089dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80089e0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80089e4:	7043      	strb	r3, [r0, #1]
 80089e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80089ea:	7003      	strb	r3, [r0, #0]
 80089ec:	6020      	str	r0, [r4, #0]
 80089ee:	2000      	movs	r0, #0
 80089f0:	e7ea      	b.n	80089c8 <__submore+0x1e>
 80089f2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80089f4:	0077      	lsls	r7, r6, #1
 80089f6:	463a      	mov	r2, r7
 80089f8:	f000 fc5f 	bl	80092ba <_realloc_r>
 80089fc:	4605      	mov	r5, r0
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0e0      	beq.n	80089c4 <__submore+0x1a>
 8008a02:	eb00 0806 	add.w	r8, r0, r6
 8008a06:	4601      	mov	r1, r0
 8008a08:	4632      	mov	r2, r6
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	f000 f8c4 	bl	8008b98 <memcpy>
 8008a10:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008a14:	f8c4 8000 	str.w	r8, [r4]
 8008a18:	e7e9      	b.n	80089ee <__submore+0x44>

08008a1a <__swbuf_r>:
 8008a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1c:	460e      	mov	r6, r1
 8008a1e:	4614      	mov	r4, r2
 8008a20:	4605      	mov	r5, r0
 8008a22:	b118      	cbz	r0, 8008a2c <__swbuf_r+0x12>
 8008a24:	6a03      	ldr	r3, [r0, #32]
 8008a26:	b90b      	cbnz	r3, 8008a2c <__swbuf_r+0x12>
 8008a28:	f7fc fd40 	bl	80054ac <__sinit>
 8008a2c:	69a3      	ldr	r3, [r4, #24]
 8008a2e:	60a3      	str	r3, [r4, #8]
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	071a      	lsls	r2, r3, #28
 8008a34:	d501      	bpl.n	8008a3a <__swbuf_r+0x20>
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	b943      	cbnz	r3, 8008a4c <__swbuf_r+0x32>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f000 f82b 	bl	8008a98 <__swsetup_r>
 8008a42:	b118      	cbz	r0, 8008a4c <__swbuf_r+0x32>
 8008a44:	f04f 37ff 	mov.w	r7, #4294967295
 8008a48:	4638      	mov	r0, r7
 8008a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	6922      	ldr	r2, [r4, #16]
 8008a50:	b2f6      	uxtb	r6, r6
 8008a52:	1a98      	subs	r0, r3, r2
 8008a54:	6963      	ldr	r3, [r4, #20]
 8008a56:	4637      	mov	r7, r6
 8008a58:	4283      	cmp	r3, r0
 8008a5a:	dc05      	bgt.n	8008a68 <__swbuf_r+0x4e>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7ff ff42 	bl	80088e8 <_fflush_r>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d1ed      	bne.n	8008a44 <__swbuf_r+0x2a>
 8008a68:	68a3      	ldr	r3, [r4, #8]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	60a3      	str	r3, [r4, #8]
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	701e      	strb	r6, [r3, #0]
 8008a76:	6962      	ldr	r2, [r4, #20]
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d004      	beq.n	8008a88 <__swbuf_r+0x6e>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	07db      	lsls	r3, r3, #31
 8008a82:	d5e1      	bpl.n	8008a48 <__swbuf_r+0x2e>
 8008a84:	2e0a      	cmp	r6, #10
 8008a86:	d1df      	bne.n	8008a48 <__swbuf_r+0x2e>
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff ff2c 	bl	80088e8 <_fflush_r>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d0d9      	beq.n	8008a48 <__swbuf_r+0x2e>
 8008a94:	e7d6      	b.n	8008a44 <__swbuf_r+0x2a>
	...

08008a98 <__swsetup_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4b29      	ldr	r3, [pc, #164]	@ (8008b40 <__swsetup_r+0xa8>)
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	b118      	cbz	r0, 8008aac <__swsetup_r+0x14>
 8008aa4:	6a03      	ldr	r3, [r0, #32]
 8008aa6:	b90b      	cbnz	r3, 8008aac <__swsetup_r+0x14>
 8008aa8:	f7fc fd00 	bl	80054ac <__sinit>
 8008aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab0:	0719      	lsls	r1, r3, #28
 8008ab2:	d422      	bmi.n	8008afa <__swsetup_r+0x62>
 8008ab4:	06da      	lsls	r2, r3, #27
 8008ab6:	d407      	bmi.n	8008ac8 <__swsetup_r+0x30>
 8008ab8:	2209      	movs	r2, #9
 8008aba:	602a      	str	r2, [r5, #0]
 8008abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	e033      	b.n	8008b30 <__swsetup_r+0x98>
 8008ac8:	0758      	lsls	r0, r3, #29
 8008aca:	d512      	bpl.n	8008af2 <__swsetup_r+0x5a>
 8008acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ace:	b141      	cbz	r1, 8008ae2 <__swsetup_r+0x4a>
 8008ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ad4:	4299      	cmp	r1, r3
 8008ad6:	d002      	beq.n	8008ade <__swsetup_r+0x46>
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f7fd fcb5 	bl	8006448 <_free_r>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	2300      	movs	r3, #0
 8008aec:	6063      	str	r3, [r4, #4]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f043 0308 	orr.w	r3, r3, #8
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	b94b      	cbnz	r3, 8008b12 <__swsetup_r+0x7a>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b08:	d003      	beq.n	8008b12 <__swsetup_r+0x7a>
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 fcb8 	bl	8009482 <__smakebuf_r>
 8008b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b16:	f013 0201 	ands.w	r2, r3, #1
 8008b1a:	d00a      	beq.n	8008b32 <__swsetup_r+0x9a>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	60a2      	str	r2, [r4, #8]
 8008b20:	6962      	ldr	r2, [r4, #20]
 8008b22:	4252      	negs	r2, r2
 8008b24:	61a2      	str	r2, [r4, #24]
 8008b26:	6922      	ldr	r2, [r4, #16]
 8008b28:	b942      	cbnz	r2, 8008b3c <__swsetup_r+0xa4>
 8008b2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b2e:	d1c5      	bne.n	8008abc <__swsetup_r+0x24>
 8008b30:	bd38      	pop	{r3, r4, r5, pc}
 8008b32:	0799      	lsls	r1, r3, #30
 8008b34:	bf58      	it	pl
 8008b36:	6962      	ldrpl	r2, [r4, #20]
 8008b38:	60a2      	str	r2, [r4, #8]
 8008b3a:	e7f4      	b.n	8008b26 <__swsetup_r+0x8e>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e7f7      	b.n	8008b30 <__swsetup_r+0x98>
 8008b40:	20000030 	.word	0x20000030

08008b44 <memmove>:
 8008b44:	4288      	cmp	r0, r1
 8008b46:	b510      	push	{r4, lr}
 8008b48:	eb01 0402 	add.w	r4, r1, r2
 8008b4c:	d902      	bls.n	8008b54 <memmove+0x10>
 8008b4e:	4284      	cmp	r4, r0
 8008b50:	4623      	mov	r3, r4
 8008b52:	d807      	bhi.n	8008b64 <memmove+0x20>
 8008b54:	1e43      	subs	r3, r0, #1
 8008b56:	42a1      	cmp	r1, r4
 8008b58:	d008      	beq.n	8008b6c <memmove+0x28>
 8008b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b62:	e7f8      	b.n	8008b56 <memmove+0x12>
 8008b64:	4601      	mov	r1, r0
 8008b66:	4402      	add	r2, r0
 8008b68:	428a      	cmp	r2, r1
 8008b6a:	d100      	bne.n	8008b6e <memmove+0x2a>
 8008b6c:	bd10      	pop	{r4, pc}
 8008b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b76:	e7f7      	b.n	8008b68 <memmove+0x24>

08008b78 <_sbrk_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4d05      	ldr	r5, [pc, #20]	@ (8008b94 <_sbrk_r+0x1c>)
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f7f9 fb12 	bl	80021ac <_sbrk>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_sbrk_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_sbrk_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20000660 	.word	0x20000660

08008b98 <memcpy>:
 8008b98:	440a      	add	r2, r1
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba0:	d100      	bne.n	8008ba4 <memcpy+0xc>
 8008ba2:	4770      	bx	lr
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008baa:	4291      	cmp	r1, r2
 8008bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bb0:	d1f9      	bne.n	8008ba6 <memcpy+0xe>
 8008bb2:	bd10      	pop	{r4, pc}

08008bb4 <nan>:
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	4901      	ldr	r1, [pc, #4]	@ (8008bbc <nan+0x8>)
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	7ff80000 	.word	0x7ff80000

08008bc0 <__assert_func>:
 8008bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4b09      	ldr	r3, [pc, #36]	@ (8008bec <__assert_func+0x2c>)
 8008bc8:	4605      	mov	r5, r0
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68d8      	ldr	r0, [r3, #12]
 8008bce:	b954      	cbnz	r4, 8008be6 <__assert_func+0x26>
 8008bd0:	4b07      	ldr	r3, [pc, #28]	@ (8008bf0 <__assert_func+0x30>)
 8008bd2:	461c      	mov	r4, r3
 8008bd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bd8:	9100      	str	r1, [sp, #0]
 8008bda:	462b      	mov	r3, r5
 8008bdc:	4905      	ldr	r1, [pc, #20]	@ (8008bf4 <__assert_func+0x34>)
 8008bde:	f000 fc19 	bl	8009414 <fiprintf>
 8008be2:	f000 fcad 	bl	8009540 <abort>
 8008be6:	4b04      	ldr	r3, [pc, #16]	@ (8008bf8 <__assert_func+0x38>)
 8008be8:	e7f4      	b.n	8008bd4 <__assert_func+0x14>
 8008bea:	bf00      	nop
 8008bec:	20000030 	.word	0x20000030
 8008bf0:	08009b28 	.word	0x08009b28
 8008bf4:	08009afa 	.word	0x08009afa
 8008bf8:	08009aed 	.word	0x08009aed

08008bfc <_calloc_r>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	fba1 5402 	umull	r5, r4, r1, r2
 8008c02:	b93c      	cbnz	r4, 8008c14 <_calloc_r+0x18>
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7fd fc91 	bl	800652c <_malloc_r>
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	b928      	cbnz	r0, 8008c1a <_calloc_r+0x1e>
 8008c0e:	2600      	movs	r6, #0
 8008c10:	4630      	mov	r0, r6
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	220c      	movs	r2, #12
 8008c16:	6002      	str	r2, [r0, #0]
 8008c18:	e7f9      	b.n	8008c0e <_calloc_r+0x12>
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f7fc fd1c 	bl	800565a <memset>
 8008c22:	e7f5      	b.n	8008c10 <_calloc_r+0x14>

08008c24 <rshift>:
 8008c24:	6903      	ldr	r3, [r0, #16]
 8008c26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c2e:	f100 0414 	add.w	r4, r0, #20
 8008c32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c36:	dd46      	ble.n	8008cc6 <rshift+0xa2>
 8008c38:	f011 011f 	ands.w	r1, r1, #31
 8008c3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c44:	d10c      	bne.n	8008c60 <rshift+0x3c>
 8008c46:	4629      	mov	r1, r5
 8008c48:	f100 0710 	add.w	r7, r0, #16
 8008c4c:	42b1      	cmp	r1, r6
 8008c4e:	d335      	bcc.n	8008cbc <rshift+0x98>
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	1eea      	subs	r2, r5, #3
 8008c56:	4296      	cmp	r6, r2
 8008c58:	bf38      	it	cc
 8008c5a:	2300      	movcc	r3, #0
 8008c5c:	4423      	add	r3, r4
 8008c5e:	e015      	b.n	8008c8c <rshift+0x68>
 8008c60:	46a1      	mov	r9, r4
 8008c62:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c66:	f1c1 0820 	rsb	r8, r1, #32
 8008c6a:	40cf      	lsrs	r7, r1
 8008c6c:	f105 0e04 	add.w	lr, r5, #4
 8008c70:	4576      	cmp	r6, lr
 8008c72:	46f4      	mov	ip, lr
 8008c74:	d816      	bhi.n	8008ca4 <rshift+0x80>
 8008c76:	1a9a      	subs	r2, r3, r2
 8008c78:	0092      	lsls	r2, r2, #2
 8008c7a:	3a04      	subs	r2, #4
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	42ae      	cmp	r6, r5
 8008c80:	bf38      	it	cc
 8008c82:	2200      	movcc	r2, #0
 8008c84:	18a3      	adds	r3, r4, r2
 8008c86:	50a7      	str	r7, [r4, r2]
 8008c88:	b107      	cbz	r7, 8008c8c <rshift+0x68>
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	eba3 0204 	sub.w	r2, r3, r4
 8008c92:	bf08      	it	eq
 8008c94:	2300      	moveq	r3, #0
 8008c96:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c9a:	6102      	str	r2, [r0, #16]
 8008c9c:	bf08      	it	eq
 8008c9e:	6143      	streq	r3, [r0, #20]
 8008ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ca4:	f8dc c000 	ldr.w	ip, [ip]
 8008ca8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cac:	ea4c 0707 	orr.w	r7, ip, r7
 8008cb0:	f849 7b04 	str.w	r7, [r9], #4
 8008cb4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cb8:	40cf      	lsrs	r7, r1
 8008cba:	e7d9      	b.n	8008c70 <rshift+0x4c>
 8008cbc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cc0:	f847 cf04 	str.w	ip, [r7, #4]!
 8008cc4:	e7c2      	b.n	8008c4c <rshift+0x28>
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	e7e0      	b.n	8008c8c <rshift+0x68>

08008cca <__hexdig_fun>:
 8008cca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008cce:	2b09      	cmp	r3, #9
 8008cd0:	d802      	bhi.n	8008cd8 <__hexdig_fun+0xe>
 8008cd2:	3820      	subs	r0, #32
 8008cd4:	b2c0      	uxtb	r0, r0
 8008cd6:	4770      	bx	lr
 8008cd8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008cdc:	2b05      	cmp	r3, #5
 8008cde:	d801      	bhi.n	8008ce4 <__hexdig_fun+0x1a>
 8008ce0:	3847      	subs	r0, #71	@ 0x47
 8008ce2:	e7f7      	b.n	8008cd4 <__hexdig_fun+0xa>
 8008ce4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008ce8:	2b05      	cmp	r3, #5
 8008cea:	d801      	bhi.n	8008cf0 <__hexdig_fun+0x26>
 8008cec:	3827      	subs	r0, #39	@ 0x27
 8008cee:	e7f1      	b.n	8008cd4 <__hexdig_fun+0xa>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	4770      	bx	lr

08008cf4 <__gethex>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	468a      	mov	sl, r1
 8008cfa:	4690      	mov	r8, r2
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	9302      	str	r3, [sp, #8]
 8008d00:	680b      	ldr	r3, [r1, #0]
 8008d02:	9001      	str	r0, [sp, #4]
 8008d04:	1c9c      	adds	r4, r3, #2
 8008d06:	46a1      	mov	r9, r4
 8008d08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d0c:	2830      	cmp	r0, #48	@ 0x30
 8008d0e:	d0fa      	beq.n	8008d06 <__gethex+0x12>
 8008d10:	eba9 0303 	sub.w	r3, r9, r3
 8008d14:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d18:	f7ff ffd7 	bl	8008cca <__hexdig_fun>
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d168      	bne.n	8008df4 <__gethex+0x100>
 8008d22:	2201      	movs	r2, #1
 8008d24:	4648      	mov	r0, r9
 8008d26:	499f      	ldr	r1, [pc, #636]	@ (8008fa4 <__gethex+0x2b0>)
 8008d28:	f7fc fc9f 	bl	800566a <strncmp>
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d167      	bne.n	8008e02 <__gethex+0x10e>
 8008d32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008d36:	4626      	mov	r6, r4
 8008d38:	f7ff ffc7 	bl	8008cca <__hexdig_fun>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d062      	beq.n	8008e06 <__gethex+0x112>
 8008d40:	4623      	mov	r3, r4
 8008d42:	7818      	ldrb	r0, [r3, #0]
 8008d44:	4699      	mov	r9, r3
 8008d46:	2830      	cmp	r0, #48	@ 0x30
 8008d48:	f103 0301 	add.w	r3, r3, #1
 8008d4c:	d0f9      	beq.n	8008d42 <__gethex+0x4e>
 8008d4e:	f7ff ffbc 	bl	8008cca <__hexdig_fun>
 8008d52:	fab0 f580 	clz	r5, r0
 8008d56:	f04f 0b01 	mov.w	fp, #1
 8008d5a:	096d      	lsrs	r5, r5, #5
 8008d5c:	464a      	mov	r2, r9
 8008d5e:	4616      	mov	r6, r2
 8008d60:	7830      	ldrb	r0, [r6, #0]
 8008d62:	3201      	adds	r2, #1
 8008d64:	f7ff ffb1 	bl	8008cca <__hexdig_fun>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d1f8      	bne.n	8008d5e <__gethex+0x6a>
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	4630      	mov	r0, r6
 8008d70:	498c      	ldr	r1, [pc, #560]	@ (8008fa4 <__gethex+0x2b0>)
 8008d72:	f7fc fc7a 	bl	800566a <strncmp>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d13f      	bne.n	8008dfa <__gethex+0x106>
 8008d7a:	b944      	cbnz	r4, 8008d8e <__gethex+0x9a>
 8008d7c:	1c74      	adds	r4, r6, #1
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4616      	mov	r6, r2
 8008d82:	7830      	ldrb	r0, [r6, #0]
 8008d84:	3201      	adds	r2, #1
 8008d86:	f7ff ffa0 	bl	8008cca <__hexdig_fun>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d1f8      	bne.n	8008d80 <__gethex+0x8c>
 8008d8e:	1ba4      	subs	r4, r4, r6
 8008d90:	00a7      	lsls	r7, r4, #2
 8008d92:	7833      	ldrb	r3, [r6, #0]
 8008d94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008d98:	2b50      	cmp	r3, #80	@ 0x50
 8008d9a:	d13e      	bne.n	8008e1a <__gethex+0x126>
 8008d9c:	7873      	ldrb	r3, [r6, #1]
 8008d9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008da0:	d033      	beq.n	8008e0a <__gethex+0x116>
 8008da2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008da4:	d034      	beq.n	8008e10 <__gethex+0x11c>
 8008da6:	2400      	movs	r4, #0
 8008da8:	1c71      	adds	r1, r6, #1
 8008daa:	7808      	ldrb	r0, [r1, #0]
 8008dac:	f7ff ff8d 	bl	8008cca <__hexdig_fun>
 8008db0:	1e43      	subs	r3, r0, #1
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b18      	cmp	r3, #24
 8008db6:	d830      	bhi.n	8008e1a <__gethex+0x126>
 8008db8:	f1a0 0210 	sub.w	r2, r0, #16
 8008dbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008dc0:	f7ff ff83 	bl	8008cca <__hexdig_fun>
 8008dc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008dc8:	fa5f fc8c 	uxtb.w	ip, ip
 8008dcc:	f1bc 0f18 	cmp.w	ip, #24
 8008dd0:	f04f 030a 	mov.w	r3, #10
 8008dd4:	d91e      	bls.n	8008e14 <__gethex+0x120>
 8008dd6:	b104      	cbz	r4, 8008dda <__gethex+0xe6>
 8008dd8:	4252      	negs	r2, r2
 8008dda:	4417      	add	r7, r2
 8008ddc:	f8ca 1000 	str.w	r1, [sl]
 8008de0:	b1ed      	cbz	r5, 8008e1e <__gethex+0x12a>
 8008de2:	f1bb 0f00 	cmp.w	fp, #0
 8008de6:	bf0c      	ite	eq
 8008de8:	2506      	moveq	r5, #6
 8008dea:	2500      	movne	r5, #0
 8008dec:	4628      	mov	r0, r5
 8008dee:	b005      	add	sp, #20
 8008df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df4:	2500      	movs	r5, #0
 8008df6:	462c      	mov	r4, r5
 8008df8:	e7b0      	b.n	8008d5c <__gethex+0x68>
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	d1c7      	bne.n	8008d8e <__gethex+0x9a>
 8008dfe:	4627      	mov	r7, r4
 8008e00:	e7c7      	b.n	8008d92 <__gethex+0x9e>
 8008e02:	464e      	mov	r6, r9
 8008e04:	462f      	mov	r7, r5
 8008e06:	2501      	movs	r5, #1
 8008e08:	e7c3      	b.n	8008d92 <__gethex+0x9e>
 8008e0a:	2400      	movs	r4, #0
 8008e0c:	1cb1      	adds	r1, r6, #2
 8008e0e:	e7cc      	b.n	8008daa <__gethex+0xb6>
 8008e10:	2401      	movs	r4, #1
 8008e12:	e7fb      	b.n	8008e0c <__gethex+0x118>
 8008e14:	fb03 0002 	mla	r0, r3, r2, r0
 8008e18:	e7ce      	b.n	8008db8 <__gethex+0xc4>
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	e7de      	b.n	8008ddc <__gethex+0xe8>
 8008e1e:	4629      	mov	r1, r5
 8008e20:	eba6 0309 	sub.w	r3, r6, r9
 8008e24:	3b01      	subs	r3, #1
 8008e26:	2b07      	cmp	r3, #7
 8008e28:	dc0a      	bgt.n	8008e40 <__gethex+0x14c>
 8008e2a:	9801      	ldr	r0, [sp, #4]
 8008e2c:	f7fd fc0a 	bl	8006644 <_Balloc>
 8008e30:	4604      	mov	r4, r0
 8008e32:	b940      	cbnz	r0, 8008e46 <__gethex+0x152>
 8008e34:	4602      	mov	r2, r0
 8008e36:	21e4      	movs	r1, #228	@ 0xe4
 8008e38:	4b5b      	ldr	r3, [pc, #364]	@ (8008fa8 <__gethex+0x2b4>)
 8008e3a:	485c      	ldr	r0, [pc, #368]	@ (8008fac <__gethex+0x2b8>)
 8008e3c:	f7ff fec0 	bl	8008bc0 <__assert_func>
 8008e40:	3101      	adds	r1, #1
 8008e42:	105b      	asrs	r3, r3, #1
 8008e44:	e7ef      	b.n	8008e26 <__gethex+0x132>
 8008e46:	2300      	movs	r3, #0
 8008e48:	f100 0a14 	add.w	sl, r0, #20
 8008e4c:	4655      	mov	r5, sl
 8008e4e:	469b      	mov	fp, r3
 8008e50:	45b1      	cmp	r9, r6
 8008e52:	d337      	bcc.n	8008ec4 <__gethex+0x1d0>
 8008e54:	f845 bb04 	str.w	fp, [r5], #4
 8008e58:	eba5 050a 	sub.w	r5, r5, sl
 8008e5c:	10ad      	asrs	r5, r5, #2
 8008e5e:	6125      	str	r5, [r4, #16]
 8008e60:	4658      	mov	r0, fp
 8008e62:	f7fd fce1 	bl	8006828 <__hi0bits>
 8008e66:	016d      	lsls	r5, r5, #5
 8008e68:	f8d8 6000 	ldr.w	r6, [r8]
 8008e6c:	1a2d      	subs	r5, r5, r0
 8008e6e:	42b5      	cmp	r5, r6
 8008e70:	dd54      	ble.n	8008f1c <__gethex+0x228>
 8008e72:	1bad      	subs	r5, r5, r6
 8008e74:	4629      	mov	r1, r5
 8008e76:	4620      	mov	r0, r4
 8008e78:	f7fe f869 	bl	8006f4e <__any_on>
 8008e7c:	4681      	mov	r9, r0
 8008e7e:	b178      	cbz	r0, 8008ea0 <__gethex+0x1ac>
 8008e80:	f04f 0901 	mov.w	r9, #1
 8008e84:	1e6b      	subs	r3, r5, #1
 8008e86:	1159      	asrs	r1, r3, #5
 8008e88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e8c:	f003 021f 	and.w	r2, r3, #31
 8008e90:	fa09 f202 	lsl.w	r2, r9, r2
 8008e94:	420a      	tst	r2, r1
 8008e96:	d003      	beq.n	8008ea0 <__gethex+0x1ac>
 8008e98:	454b      	cmp	r3, r9
 8008e9a:	dc36      	bgt.n	8008f0a <__gethex+0x216>
 8008e9c:	f04f 0902 	mov.w	r9, #2
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7ff febe 	bl	8008c24 <rshift>
 8008ea8:	442f      	add	r7, r5
 8008eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008eae:	42bb      	cmp	r3, r7
 8008eb0:	da42      	bge.n	8008f38 <__gethex+0x244>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	9801      	ldr	r0, [sp, #4]
 8008eb6:	f7fd fc05 	bl	80066c4 <_Bfree>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ebe:	25a3      	movs	r5, #163	@ 0xa3
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	e793      	b.n	8008dec <__gethex+0xf8>
 8008ec4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ec8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008eca:	d012      	beq.n	8008ef2 <__gethex+0x1fe>
 8008ecc:	2b20      	cmp	r3, #32
 8008ece:	d104      	bne.n	8008eda <__gethex+0x1e6>
 8008ed0:	f845 bb04 	str.w	fp, [r5], #4
 8008ed4:	f04f 0b00 	mov.w	fp, #0
 8008ed8:	465b      	mov	r3, fp
 8008eda:	7830      	ldrb	r0, [r6, #0]
 8008edc:	9303      	str	r3, [sp, #12]
 8008ede:	f7ff fef4 	bl	8008cca <__hexdig_fun>
 8008ee2:	9b03      	ldr	r3, [sp, #12]
 8008ee4:	f000 000f 	and.w	r0, r0, #15
 8008ee8:	4098      	lsls	r0, r3
 8008eea:	ea4b 0b00 	orr.w	fp, fp, r0
 8008eee:	3304      	adds	r3, #4
 8008ef0:	e7ae      	b.n	8008e50 <__gethex+0x15c>
 8008ef2:	45b1      	cmp	r9, r6
 8008ef4:	d8ea      	bhi.n	8008ecc <__gethex+0x1d8>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4630      	mov	r0, r6
 8008efa:	492a      	ldr	r1, [pc, #168]	@ (8008fa4 <__gethex+0x2b0>)
 8008efc:	9303      	str	r3, [sp, #12]
 8008efe:	f7fc fbb4 	bl	800566a <strncmp>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d1e1      	bne.n	8008ecc <__gethex+0x1d8>
 8008f08:	e7a2      	b.n	8008e50 <__gethex+0x15c>
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	1ea9      	subs	r1, r5, #2
 8008f0e:	f7fe f81e 	bl	8006f4e <__any_on>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d0c2      	beq.n	8008e9c <__gethex+0x1a8>
 8008f16:	f04f 0903 	mov.w	r9, #3
 8008f1a:	e7c1      	b.n	8008ea0 <__gethex+0x1ac>
 8008f1c:	da09      	bge.n	8008f32 <__gethex+0x23e>
 8008f1e:	1b75      	subs	r5, r6, r5
 8008f20:	4621      	mov	r1, r4
 8008f22:	462a      	mov	r2, r5
 8008f24:	9801      	ldr	r0, [sp, #4]
 8008f26:	f7fd fde3 	bl	8006af0 <__lshift>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	1b7f      	subs	r7, r7, r5
 8008f2e:	f100 0a14 	add.w	sl, r0, #20
 8008f32:	f04f 0900 	mov.w	r9, #0
 8008f36:	e7b8      	b.n	8008eaa <__gethex+0x1b6>
 8008f38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f3c:	42bd      	cmp	r5, r7
 8008f3e:	dd6f      	ble.n	8009020 <__gethex+0x32c>
 8008f40:	1bed      	subs	r5, r5, r7
 8008f42:	42ae      	cmp	r6, r5
 8008f44:	dc34      	bgt.n	8008fb0 <__gethex+0x2bc>
 8008f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d022      	beq.n	8008f94 <__gethex+0x2a0>
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d024      	beq.n	8008f9c <__gethex+0x2a8>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d115      	bne.n	8008f82 <__gethex+0x28e>
 8008f56:	42ae      	cmp	r6, r5
 8008f58:	d113      	bne.n	8008f82 <__gethex+0x28e>
 8008f5a:	2e01      	cmp	r6, #1
 8008f5c:	d10b      	bne.n	8008f76 <__gethex+0x282>
 8008f5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f62:	9a02      	ldr	r2, [sp, #8]
 8008f64:	2562      	movs	r5, #98	@ 0x62
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	6123      	str	r3, [r4, #16]
 8008f6c:	f8ca 3000 	str.w	r3, [sl]
 8008f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f72:	601c      	str	r4, [r3, #0]
 8008f74:	e73a      	b.n	8008dec <__gethex+0xf8>
 8008f76:	4620      	mov	r0, r4
 8008f78:	1e71      	subs	r1, r6, #1
 8008f7a:	f7fd ffe8 	bl	8006f4e <__any_on>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d1ed      	bne.n	8008f5e <__gethex+0x26a>
 8008f82:	4621      	mov	r1, r4
 8008f84:	9801      	ldr	r0, [sp, #4]
 8008f86:	f7fd fb9d 	bl	80066c4 <_Bfree>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f8e:	2550      	movs	r5, #80	@ 0x50
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	e72b      	b.n	8008dec <__gethex+0xf8>
 8008f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f3      	bne.n	8008f82 <__gethex+0x28e>
 8008f9a:	e7e0      	b.n	8008f5e <__gethex+0x26a>
 8008f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1dd      	bne.n	8008f5e <__gethex+0x26a>
 8008fa2:	e7ee      	b.n	8008f82 <__gethex+0x28e>
 8008fa4:	08009960 	.word	0x08009960
 8008fa8:	080097f5 	.word	0x080097f5
 8008fac:	08009b29 	.word	0x08009b29
 8008fb0:	1e6f      	subs	r7, r5, #1
 8008fb2:	f1b9 0f00 	cmp.w	r9, #0
 8008fb6:	d130      	bne.n	800901a <__gethex+0x326>
 8008fb8:	b127      	cbz	r7, 8008fc4 <__gethex+0x2d0>
 8008fba:	4639      	mov	r1, r7
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f7fd ffc6 	bl	8006f4e <__any_on>
 8008fc2:	4681      	mov	r9, r0
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	1b76      	subs	r6, r6, r5
 8008fca:	2502      	movs	r5, #2
 8008fcc:	117a      	asrs	r2, r7, #5
 8008fce:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008fd2:	f007 071f 	and.w	r7, r7, #31
 8008fd6:	40bb      	lsls	r3, r7
 8008fd8:	4213      	tst	r3, r2
 8008fda:	4620      	mov	r0, r4
 8008fdc:	bf18      	it	ne
 8008fde:	f049 0902 	orrne.w	r9, r9, #2
 8008fe2:	f7ff fe1f 	bl	8008c24 <rshift>
 8008fe6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008fea:	f1b9 0f00 	cmp.w	r9, #0
 8008fee:	d047      	beq.n	8009080 <__gethex+0x38c>
 8008ff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d015      	beq.n	8009024 <__gethex+0x330>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d017      	beq.n	800902c <__gethex+0x338>
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d109      	bne.n	8009014 <__gethex+0x320>
 8009000:	f019 0f02 	tst.w	r9, #2
 8009004:	d006      	beq.n	8009014 <__gethex+0x320>
 8009006:	f8da 3000 	ldr.w	r3, [sl]
 800900a:	ea49 0903 	orr.w	r9, r9, r3
 800900e:	f019 0f01 	tst.w	r9, #1
 8009012:	d10e      	bne.n	8009032 <__gethex+0x33e>
 8009014:	f045 0510 	orr.w	r5, r5, #16
 8009018:	e032      	b.n	8009080 <__gethex+0x38c>
 800901a:	f04f 0901 	mov.w	r9, #1
 800901e:	e7d1      	b.n	8008fc4 <__gethex+0x2d0>
 8009020:	2501      	movs	r5, #1
 8009022:	e7e2      	b.n	8008fea <__gethex+0x2f6>
 8009024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009026:	f1c3 0301 	rsb	r3, r3, #1
 800902a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800902c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0f0      	beq.n	8009014 <__gethex+0x320>
 8009032:	f04f 0c00 	mov.w	ip, #0
 8009036:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800903a:	f104 0314 	add.w	r3, r4, #20
 800903e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009042:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009046:	4618      	mov	r0, r3
 8009048:	f853 2b04 	ldr.w	r2, [r3], #4
 800904c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009050:	d01b      	beq.n	800908a <__gethex+0x396>
 8009052:	3201      	adds	r2, #1
 8009054:	6002      	str	r2, [r0, #0]
 8009056:	2d02      	cmp	r5, #2
 8009058:	f104 0314 	add.w	r3, r4, #20
 800905c:	d13c      	bne.n	80090d8 <__gethex+0x3e4>
 800905e:	f8d8 2000 	ldr.w	r2, [r8]
 8009062:	3a01      	subs	r2, #1
 8009064:	42b2      	cmp	r2, r6
 8009066:	d109      	bne.n	800907c <__gethex+0x388>
 8009068:	2201      	movs	r2, #1
 800906a:	1171      	asrs	r1, r6, #5
 800906c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009070:	f006 061f 	and.w	r6, r6, #31
 8009074:	fa02 f606 	lsl.w	r6, r2, r6
 8009078:	421e      	tst	r6, r3
 800907a:	d13a      	bne.n	80090f2 <__gethex+0x3fe>
 800907c:	f045 0520 	orr.w	r5, r5, #32
 8009080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009082:	601c      	str	r4, [r3, #0]
 8009084:	9b02      	ldr	r3, [sp, #8]
 8009086:	601f      	str	r7, [r3, #0]
 8009088:	e6b0      	b.n	8008dec <__gethex+0xf8>
 800908a:	4299      	cmp	r1, r3
 800908c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009090:	d8d9      	bhi.n	8009046 <__gethex+0x352>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	459b      	cmp	fp, r3
 8009096:	db17      	blt.n	80090c8 <__gethex+0x3d4>
 8009098:	6861      	ldr	r1, [r4, #4]
 800909a:	9801      	ldr	r0, [sp, #4]
 800909c:	3101      	adds	r1, #1
 800909e:	f7fd fad1 	bl	8006644 <_Balloc>
 80090a2:	4681      	mov	r9, r0
 80090a4:	b918      	cbnz	r0, 80090ae <__gethex+0x3ba>
 80090a6:	4602      	mov	r2, r0
 80090a8:	2184      	movs	r1, #132	@ 0x84
 80090aa:	4b19      	ldr	r3, [pc, #100]	@ (8009110 <__gethex+0x41c>)
 80090ac:	e6c5      	b.n	8008e3a <__gethex+0x146>
 80090ae:	6922      	ldr	r2, [r4, #16]
 80090b0:	f104 010c 	add.w	r1, r4, #12
 80090b4:	3202      	adds	r2, #2
 80090b6:	0092      	lsls	r2, r2, #2
 80090b8:	300c      	adds	r0, #12
 80090ba:	f7ff fd6d 	bl	8008b98 <memcpy>
 80090be:	4621      	mov	r1, r4
 80090c0:	9801      	ldr	r0, [sp, #4]
 80090c2:	f7fd faff 	bl	80066c4 <_Bfree>
 80090c6:	464c      	mov	r4, r9
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	6122      	str	r2, [r4, #16]
 80090ce:	2201      	movs	r2, #1
 80090d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090d4:	615a      	str	r2, [r3, #20]
 80090d6:	e7be      	b.n	8009056 <__gethex+0x362>
 80090d8:	6922      	ldr	r2, [r4, #16]
 80090da:	455a      	cmp	r2, fp
 80090dc:	dd0b      	ble.n	80090f6 <__gethex+0x402>
 80090de:	2101      	movs	r1, #1
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff fd9f 	bl	8008c24 <rshift>
 80090e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ea:	3701      	adds	r7, #1
 80090ec:	42bb      	cmp	r3, r7
 80090ee:	f6ff aee0 	blt.w	8008eb2 <__gethex+0x1be>
 80090f2:	2501      	movs	r5, #1
 80090f4:	e7c2      	b.n	800907c <__gethex+0x388>
 80090f6:	f016 061f 	ands.w	r6, r6, #31
 80090fa:	d0fa      	beq.n	80090f2 <__gethex+0x3fe>
 80090fc:	4453      	add	r3, sl
 80090fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009102:	f7fd fb91 	bl	8006828 <__hi0bits>
 8009106:	f1c6 0620 	rsb	r6, r6, #32
 800910a:	42b0      	cmp	r0, r6
 800910c:	dbe7      	blt.n	80090de <__gethex+0x3ea>
 800910e:	e7f0      	b.n	80090f2 <__gethex+0x3fe>
 8009110:	080097f5 	.word	0x080097f5

08009114 <L_shift>:
 8009114:	f1c2 0208 	rsb	r2, r2, #8
 8009118:	0092      	lsls	r2, r2, #2
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	f1c2 0620 	rsb	r6, r2, #32
 8009120:	6843      	ldr	r3, [r0, #4]
 8009122:	6804      	ldr	r4, [r0, #0]
 8009124:	fa03 f506 	lsl.w	r5, r3, r6
 8009128:	432c      	orrs	r4, r5
 800912a:	40d3      	lsrs	r3, r2
 800912c:	6004      	str	r4, [r0, #0]
 800912e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009132:	4288      	cmp	r0, r1
 8009134:	d3f4      	bcc.n	8009120 <L_shift+0xc>
 8009136:	bd70      	pop	{r4, r5, r6, pc}

08009138 <__match>:
 8009138:	b530      	push	{r4, r5, lr}
 800913a:	6803      	ldr	r3, [r0, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009142:	b914      	cbnz	r4, 800914a <__match+0x12>
 8009144:	6003      	str	r3, [r0, #0]
 8009146:	2001      	movs	r0, #1
 8009148:	bd30      	pop	{r4, r5, pc}
 800914a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800914e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009152:	2d19      	cmp	r5, #25
 8009154:	bf98      	it	ls
 8009156:	3220      	addls	r2, #32
 8009158:	42a2      	cmp	r2, r4
 800915a:	d0f0      	beq.n	800913e <__match+0x6>
 800915c:	2000      	movs	r0, #0
 800915e:	e7f3      	b.n	8009148 <__match+0x10>

08009160 <__hexnan>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	2500      	movs	r5, #0
 8009166:	680b      	ldr	r3, [r1, #0]
 8009168:	4682      	mov	sl, r0
 800916a:	115e      	asrs	r6, r3, #5
 800916c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009170:	f013 031f 	ands.w	r3, r3, #31
 8009174:	bf18      	it	ne
 8009176:	3604      	addne	r6, #4
 8009178:	1f37      	subs	r7, r6, #4
 800917a:	4690      	mov	r8, r2
 800917c:	46b9      	mov	r9, r7
 800917e:	463c      	mov	r4, r7
 8009180:	46ab      	mov	fp, r5
 8009182:	b087      	sub	sp, #28
 8009184:	6801      	ldr	r1, [r0, #0]
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	f846 5c04 	str.w	r5, [r6, #-4]
 800918c:	9502      	str	r5, [sp, #8]
 800918e:	784a      	ldrb	r2, [r1, #1]
 8009190:	1c4b      	adds	r3, r1, #1
 8009192:	9303      	str	r3, [sp, #12]
 8009194:	b342      	cbz	r2, 80091e8 <__hexnan+0x88>
 8009196:	4610      	mov	r0, r2
 8009198:	9105      	str	r1, [sp, #20]
 800919a:	9204      	str	r2, [sp, #16]
 800919c:	f7ff fd95 	bl	8008cca <__hexdig_fun>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d151      	bne.n	8009248 <__hexnan+0xe8>
 80091a4:	9a04      	ldr	r2, [sp, #16]
 80091a6:	9905      	ldr	r1, [sp, #20]
 80091a8:	2a20      	cmp	r2, #32
 80091aa:	d818      	bhi.n	80091de <__hexnan+0x7e>
 80091ac:	9b02      	ldr	r3, [sp, #8]
 80091ae:	459b      	cmp	fp, r3
 80091b0:	dd13      	ble.n	80091da <__hexnan+0x7a>
 80091b2:	454c      	cmp	r4, r9
 80091b4:	d206      	bcs.n	80091c4 <__hexnan+0x64>
 80091b6:	2d07      	cmp	r5, #7
 80091b8:	dc04      	bgt.n	80091c4 <__hexnan+0x64>
 80091ba:	462a      	mov	r2, r5
 80091bc:	4649      	mov	r1, r9
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff ffa8 	bl	8009114 <L_shift>
 80091c4:	4544      	cmp	r4, r8
 80091c6:	d952      	bls.n	800926e <__hexnan+0x10e>
 80091c8:	2300      	movs	r3, #0
 80091ca:	f1a4 0904 	sub.w	r9, r4, #4
 80091ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80091d2:	461d      	mov	r5, r3
 80091d4:	464c      	mov	r4, r9
 80091d6:	f8cd b008 	str.w	fp, [sp, #8]
 80091da:	9903      	ldr	r1, [sp, #12]
 80091dc:	e7d7      	b.n	800918e <__hexnan+0x2e>
 80091de:	2a29      	cmp	r2, #41	@ 0x29
 80091e0:	d157      	bne.n	8009292 <__hexnan+0x132>
 80091e2:	3102      	adds	r1, #2
 80091e4:	f8ca 1000 	str.w	r1, [sl]
 80091e8:	f1bb 0f00 	cmp.w	fp, #0
 80091ec:	d051      	beq.n	8009292 <__hexnan+0x132>
 80091ee:	454c      	cmp	r4, r9
 80091f0:	d206      	bcs.n	8009200 <__hexnan+0xa0>
 80091f2:	2d07      	cmp	r5, #7
 80091f4:	dc04      	bgt.n	8009200 <__hexnan+0xa0>
 80091f6:	462a      	mov	r2, r5
 80091f8:	4649      	mov	r1, r9
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff ff8a 	bl	8009114 <L_shift>
 8009200:	4544      	cmp	r4, r8
 8009202:	d936      	bls.n	8009272 <__hexnan+0x112>
 8009204:	4623      	mov	r3, r4
 8009206:	f1a8 0204 	sub.w	r2, r8, #4
 800920a:	f853 1b04 	ldr.w	r1, [r3], #4
 800920e:	429f      	cmp	r7, r3
 8009210:	f842 1f04 	str.w	r1, [r2, #4]!
 8009214:	d2f9      	bcs.n	800920a <__hexnan+0xaa>
 8009216:	1b3b      	subs	r3, r7, r4
 8009218:	f023 0303 	bic.w	r3, r3, #3
 800921c:	3304      	adds	r3, #4
 800921e:	3401      	adds	r4, #1
 8009220:	3e03      	subs	r6, #3
 8009222:	42b4      	cmp	r4, r6
 8009224:	bf88      	it	hi
 8009226:	2304      	movhi	r3, #4
 8009228:	2200      	movs	r2, #0
 800922a:	4443      	add	r3, r8
 800922c:	f843 2b04 	str.w	r2, [r3], #4
 8009230:	429f      	cmp	r7, r3
 8009232:	d2fb      	bcs.n	800922c <__hexnan+0xcc>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	b91b      	cbnz	r3, 8009240 <__hexnan+0xe0>
 8009238:	4547      	cmp	r7, r8
 800923a:	d128      	bne.n	800928e <__hexnan+0x12e>
 800923c:	2301      	movs	r3, #1
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	2005      	movs	r0, #5
 8009242:	b007      	add	sp, #28
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	3501      	adds	r5, #1
 800924a:	2d08      	cmp	r5, #8
 800924c:	f10b 0b01 	add.w	fp, fp, #1
 8009250:	dd06      	ble.n	8009260 <__hexnan+0x100>
 8009252:	4544      	cmp	r4, r8
 8009254:	d9c1      	bls.n	80091da <__hexnan+0x7a>
 8009256:	2300      	movs	r3, #0
 8009258:	2501      	movs	r5, #1
 800925a:	f844 3c04 	str.w	r3, [r4, #-4]
 800925e:	3c04      	subs	r4, #4
 8009260:	6822      	ldr	r2, [r4, #0]
 8009262:	f000 000f 	and.w	r0, r0, #15
 8009266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800926a:	6020      	str	r0, [r4, #0]
 800926c:	e7b5      	b.n	80091da <__hexnan+0x7a>
 800926e:	2508      	movs	r5, #8
 8009270:	e7b3      	b.n	80091da <__hexnan+0x7a>
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0dd      	beq.n	8009234 <__hexnan+0xd4>
 8009278:	f04f 32ff 	mov.w	r2, #4294967295
 800927c:	f1c3 0320 	rsb	r3, r3, #32
 8009280:	40da      	lsrs	r2, r3
 8009282:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009286:	4013      	ands	r3, r2
 8009288:	f846 3c04 	str.w	r3, [r6, #-4]
 800928c:	e7d2      	b.n	8009234 <__hexnan+0xd4>
 800928e:	3f04      	subs	r7, #4
 8009290:	e7d0      	b.n	8009234 <__hexnan+0xd4>
 8009292:	2004      	movs	r0, #4
 8009294:	e7d5      	b.n	8009242 <__hexnan+0xe2>

08009296 <__ascii_mbtowc>:
 8009296:	b082      	sub	sp, #8
 8009298:	b901      	cbnz	r1, 800929c <__ascii_mbtowc+0x6>
 800929a:	a901      	add	r1, sp, #4
 800929c:	b142      	cbz	r2, 80092b0 <__ascii_mbtowc+0x1a>
 800929e:	b14b      	cbz	r3, 80092b4 <__ascii_mbtowc+0x1e>
 80092a0:	7813      	ldrb	r3, [r2, #0]
 80092a2:	600b      	str	r3, [r1, #0]
 80092a4:	7812      	ldrb	r2, [r2, #0]
 80092a6:	1e10      	subs	r0, r2, #0
 80092a8:	bf18      	it	ne
 80092aa:	2001      	movne	r0, #1
 80092ac:	b002      	add	sp, #8
 80092ae:	4770      	bx	lr
 80092b0:	4610      	mov	r0, r2
 80092b2:	e7fb      	b.n	80092ac <__ascii_mbtowc+0x16>
 80092b4:	f06f 0001 	mvn.w	r0, #1
 80092b8:	e7f8      	b.n	80092ac <__ascii_mbtowc+0x16>

080092ba <_realloc_r>:
 80092ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	4680      	mov	r8, r0
 80092c0:	4615      	mov	r5, r2
 80092c2:	460c      	mov	r4, r1
 80092c4:	b921      	cbnz	r1, 80092d0 <_realloc_r+0x16>
 80092c6:	4611      	mov	r1, r2
 80092c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092cc:	f7fd b92e 	b.w	800652c <_malloc_r>
 80092d0:	b92a      	cbnz	r2, 80092de <_realloc_r+0x24>
 80092d2:	f7fd f8b9 	bl	8006448 <_free_r>
 80092d6:	2400      	movs	r4, #0
 80092d8:	4620      	mov	r0, r4
 80092da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092de:	f000 f936 	bl	800954e <_malloc_usable_size_r>
 80092e2:	4285      	cmp	r5, r0
 80092e4:	4606      	mov	r6, r0
 80092e6:	d802      	bhi.n	80092ee <_realloc_r+0x34>
 80092e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092ec:	d8f4      	bhi.n	80092d8 <_realloc_r+0x1e>
 80092ee:	4629      	mov	r1, r5
 80092f0:	4640      	mov	r0, r8
 80092f2:	f7fd f91b 	bl	800652c <_malloc_r>
 80092f6:	4607      	mov	r7, r0
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d0ec      	beq.n	80092d6 <_realloc_r+0x1c>
 80092fc:	42b5      	cmp	r5, r6
 80092fe:	462a      	mov	r2, r5
 8009300:	4621      	mov	r1, r4
 8009302:	bf28      	it	cs
 8009304:	4632      	movcs	r2, r6
 8009306:	f7ff fc47 	bl	8008b98 <memcpy>
 800930a:	4621      	mov	r1, r4
 800930c:	4640      	mov	r0, r8
 800930e:	f7fd f89b 	bl	8006448 <_free_r>
 8009312:	463c      	mov	r4, r7
 8009314:	e7e0      	b.n	80092d8 <_realloc_r+0x1e>
	...

08009318 <_strtoul_l.constprop.0>:
 8009318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800931c:	4686      	mov	lr, r0
 800931e:	460d      	mov	r5, r1
 8009320:	4e33      	ldr	r6, [pc, #204]	@ (80093f0 <_strtoul_l.constprop.0+0xd8>)
 8009322:	4628      	mov	r0, r5
 8009324:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009328:	5d37      	ldrb	r7, [r6, r4]
 800932a:	f017 0708 	ands.w	r7, r7, #8
 800932e:	d1f8      	bne.n	8009322 <_strtoul_l.constprop.0+0xa>
 8009330:	2c2d      	cmp	r4, #45	@ 0x2d
 8009332:	d12f      	bne.n	8009394 <_strtoul_l.constprop.0+0x7c>
 8009334:	2701      	movs	r7, #1
 8009336:	782c      	ldrb	r4, [r5, #0]
 8009338:	1c85      	adds	r5, r0, #2
 800933a:	f033 0010 	bics.w	r0, r3, #16
 800933e:	d109      	bne.n	8009354 <_strtoul_l.constprop.0+0x3c>
 8009340:	2c30      	cmp	r4, #48	@ 0x30
 8009342:	d12c      	bne.n	800939e <_strtoul_l.constprop.0+0x86>
 8009344:	7828      	ldrb	r0, [r5, #0]
 8009346:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800934a:	2858      	cmp	r0, #88	@ 0x58
 800934c:	d127      	bne.n	800939e <_strtoul_l.constprop.0+0x86>
 800934e:	2310      	movs	r3, #16
 8009350:	786c      	ldrb	r4, [r5, #1]
 8009352:	3502      	adds	r5, #2
 8009354:	f04f 38ff 	mov.w	r8, #4294967295
 8009358:	fbb8 f8f3 	udiv	r8, r8, r3
 800935c:	2600      	movs	r6, #0
 800935e:	fb03 f908 	mul.w	r9, r3, r8
 8009362:	4630      	mov	r0, r6
 8009364:	ea6f 0909 	mvn.w	r9, r9
 8009368:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800936c:	f1bc 0f09 	cmp.w	ip, #9
 8009370:	d81c      	bhi.n	80093ac <_strtoul_l.constprop.0+0x94>
 8009372:	4664      	mov	r4, ip
 8009374:	42a3      	cmp	r3, r4
 8009376:	dd2a      	ble.n	80093ce <_strtoul_l.constprop.0+0xb6>
 8009378:	f1b6 3fff 	cmp.w	r6, #4294967295
 800937c:	d007      	beq.n	800938e <_strtoul_l.constprop.0+0x76>
 800937e:	4580      	cmp	r8, r0
 8009380:	d322      	bcc.n	80093c8 <_strtoul_l.constprop.0+0xb0>
 8009382:	d101      	bne.n	8009388 <_strtoul_l.constprop.0+0x70>
 8009384:	45a1      	cmp	r9, r4
 8009386:	db1f      	blt.n	80093c8 <_strtoul_l.constprop.0+0xb0>
 8009388:	2601      	movs	r6, #1
 800938a:	fb00 4003 	mla	r0, r0, r3, r4
 800938e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009392:	e7e9      	b.n	8009368 <_strtoul_l.constprop.0+0x50>
 8009394:	2c2b      	cmp	r4, #43	@ 0x2b
 8009396:	bf04      	itt	eq
 8009398:	782c      	ldrbeq	r4, [r5, #0]
 800939a:	1c85      	addeq	r5, r0, #2
 800939c:	e7cd      	b.n	800933a <_strtoul_l.constprop.0+0x22>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1d8      	bne.n	8009354 <_strtoul_l.constprop.0+0x3c>
 80093a2:	2c30      	cmp	r4, #48	@ 0x30
 80093a4:	bf0c      	ite	eq
 80093a6:	2308      	moveq	r3, #8
 80093a8:	230a      	movne	r3, #10
 80093aa:	e7d3      	b.n	8009354 <_strtoul_l.constprop.0+0x3c>
 80093ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80093b0:	f1bc 0f19 	cmp.w	ip, #25
 80093b4:	d801      	bhi.n	80093ba <_strtoul_l.constprop.0+0xa2>
 80093b6:	3c37      	subs	r4, #55	@ 0x37
 80093b8:	e7dc      	b.n	8009374 <_strtoul_l.constprop.0+0x5c>
 80093ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80093be:	f1bc 0f19 	cmp.w	ip, #25
 80093c2:	d804      	bhi.n	80093ce <_strtoul_l.constprop.0+0xb6>
 80093c4:	3c57      	subs	r4, #87	@ 0x57
 80093c6:	e7d5      	b.n	8009374 <_strtoul_l.constprop.0+0x5c>
 80093c8:	f04f 36ff 	mov.w	r6, #4294967295
 80093cc:	e7df      	b.n	800938e <_strtoul_l.constprop.0+0x76>
 80093ce:	1c73      	adds	r3, r6, #1
 80093d0:	d106      	bne.n	80093e0 <_strtoul_l.constprop.0+0xc8>
 80093d2:	2322      	movs	r3, #34	@ 0x22
 80093d4:	4630      	mov	r0, r6
 80093d6:	f8ce 3000 	str.w	r3, [lr]
 80093da:	b932      	cbnz	r2, 80093ea <_strtoul_l.constprop.0+0xd2>
 80093dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e0:	b107      	cbz	r7, 80093e4 <_strtoul_l.constprop.0+0xcc>
 80093e2:	4240      	negs	r0, r0
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	d0f9      	beq.n	80093dc <_strtoul_l.constprop.0+0xc4>
 80093e8:	b106      	cbz	r6, 80093ec <_strtoul_l.constprop.0+0xd4>
 80093ea:	1e69      	subs	r1, r5, #1
 80093ec:	6011      	str	r1, [r2, #0]
 80093ee:	e7f5      	b.n	80093dc <_strtoul_l.constprop.0+0xc4>
 80093f0:	080099b9 	.word	0x080099b9

080093f4 <_strtoul_r>:
 80093f4:	f7ff bf90 	b.w	8009318 <_strtoul_l.constprop.0>

080093f8 <__ascii_wctomb>:
 80093f8:	4603      	mov	r3, r0
 80093fa:	4608      	mov	r0, r1
 80093fc:	b141      	cbz	r1, 8009410 <__ascii_wctomb+0x18>
 80093fe:	2aff      	cmp	r2, #255	@ 0xff
 8009400:	d904      	bls.n	800940c <__ascii_wctomb+0x14>
 8009402:	228a      	movs	r2, #138	@ 0x8a
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	4770      	bx	lr
 800940c:	2001      	movs	r0, #1
 800940e:	700a      	strb	r2, [r1, #0]
 8009410:	4770      	bx	lr
	...

08009414 <fiprintf>:
 8009414:	b40e      	push	{r1, r2, r3}
 8009416:	b503      	push	{r0, r1, lr}
 8009418:	4601      	mov	r1, r0
 800941a:	ab03      	add	r3, sp, #12
 800941c:	4805      	ldr	r0, [pc, #20]	@ (8009434 <fiprintf+0x20>)
 800941e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009422:	6800      	ldr	r0, [r0, #0]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	f7fe ff7b 	bl	8008320 <_vfiprintf_r>
 800942a:	b002      	add	sp, #8
 800942c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009430:	b003      	add	sp, #12
 8009432:	4770      	bx	lr
 8009434:	20000030 	.word	0x20000030

08009438 <__swhatbuf_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	4615      	mov	r5, r2
 8009442:	2900      	cmp	r1, #0
 8009444:	461e      	mov	r6, r3
 8009446:	b096      	sub	sp, #88	@ 0x58
 8009448:	da0c      	bge.n	8009464 <__swhatbuf_r+0x2c>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	2100      	movs	r1, #0
 800944e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009452:	bf14      	ite	ne
 8009454:	2340      	movne	r3, #64	@ 0x40
 8009456:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800945a:	2000      	movs	r0, #0
 800945c:	6031      	str	r1, [r6, #0]
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	b016      	add	sp, #88	@ 0x58
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	466a      	mov	r2, sp
 8009466:	f000 f849 	bl	80094fc <_fstat_r>
 800946a:	2800      	cmp	r0, #0
 800946c:	dbed      	blt.n	800944a <__swhatbuf_r+0x12>
 800946e:	9901      	ldr	r1, [sp, #4]
 8009470:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009474:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009478:	4259      	negs	r1, r3
 800947a:	4159      	adcs	r1, r3
 800947c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009480:	e7eb      	b.n	800945a <__swhatbuf_r+0x22>

08009482 <__smakebuf_r>:
 8009482:	898b      	ldrh	r3, [r1, #12]
 8009484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009486:	079d      	lsls	r5, r3, #30
 8009488:	4606      	mov	r6, r0
 800948a:	460c      	mov	r4, r1
 800948c:	d507      	bpl.n	800949e <__smakebuf_r+0x1c>
 800948e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	2301      	movs	r3, #1
 8009498:	6163      	str	r3, [r4, #20]
 800949a:	b003      	add	sp, #12
 800949c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800949e:	466a      	mov	r2, sp
 80094a0:	ab01      	add	r3, sp, #4
 80094a2:	f7ff ffc9 	bl	8009438 <__swhatbuf_r>
 80094a6:	9f00      	ldr	r7, [sp, #0]
 80094a8:	4605      	mov	r5, r0
 80094aa:	4639      	mov	r1, r7
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7fd f83d 	bl	800652c <_malloc_r>
 80094b2:	b948      	cbnz	r0, 80094c8 <__smakebuf_r+0x46>
 80094b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b8:	059a      	lsls	r2, r3, #22
 80094ba:	d4ee      	bmi.n	800949a <__smakebuf_r+0x18>
 80094bc:	f023 0303 	bic.w	r3, r3, #3
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e7e2      	b.n	800948e <__smakebuf_r+0xc>
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	9b01      	ldr	r3, [sp, #4]
 80094d6:	6020      	str	r0, [r4, #0]
 80094d8:	b15b      	cbz	r3, 80094f2 <__smakebuf_r+0x70>
 80094da:	4630      	mov	r0, r6
 80094dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e0:	f000 f81e 	bl	8009520 <_isatty_r>
 80094e4:	b128      	cbz	r0, 80094f2 <__smakebuf_r+0x70>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	f043 0301 	orr.w	r3, r3, #1
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	431d      	orrs	r5, r3
 80094f6:	81a5      	strh	r5, [r4, #12]
 80094f8:	e7cf      	b.n	800949a <__smakebuf_r+0x18>
	...

080094fc <_fstat_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	2300      	movs	r3, #0
 8009500:	4d06      	ldr	r5, [pc, #24]	@ (800951c <_fstat_r+0x20>)
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	f7f8 fe29 	bl	8002160 <_fstat>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d102      	bne.n	8009518 <_fstat_r+0x1c>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b103      	cbz	r3, 8009518 <_fstat_r+0x1c>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	20000660 	.word	0x20000660

08009520 <_isatty_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	2300      	movs	r3, #0
 8009524:	4d05      	ldr	r5, [pc, #20]	@ (800953c <_isatty_r+0x1c>)
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f8 fe27 	bl	800217e <_isatty>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_isatty_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_isatty_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000660 	.word	0x20000660

08009540 <abort>:
 8009540:	2006      	movs	r0, #6
 8009542:	b508      	push	{r3, lr}
 8009544:	f000 f834 	bl	80095b0 <raise>
 8009548:	2001      	movs	r0, #1
 800954a:	f7f8 fdd6 	bl	80020fa <_exit>

0800954e <_malloc_usable_size_r>:
 800954e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009552:	1f18      	subs	r0, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfbc      	itt	lt
 8009558:	580b      	ldrlt	r3, [r1, r0]
 800955a:	18c0      	addlt	r0, r0, r3
 800955c:	4770      	bx	lr

0800955e <_raise_r>:
 800955e:	291f      	cmp	r1, #31
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4605      	mov	r5, r0
 8009564:	460c      	mov	r4, r1
 8009566:	d904      	bls.n	8009572 <_raise_r+0x14>
 8009568:	2316      	movs	r3, #22
 800956a:	6003      	str	r3, [r0, #0]
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	bd38      	pop	{r3, r4, r5, pc}
 8009572:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009574:	b112      	cbz	r2, 800957c <_raise_r+0x1e>
 8009576:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800957a:	b94b      	cbnz	r3, 8009590 <_raise_r+0x32>
 800957c:	4628      	mov	r0, r5
 800957e:	f000 f831 	bl	80095e4 <_getpid_r>
 8009582:	4622      	mov	r2, r4
 8009584:	4601      	mov	r1, r0
 8009586:	4628      	mov	r0, r5
 8009588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958c:	f000 b818 	b.w	80095c0 <_kill_r>
 8009590:	2b01      	cmp	r3, #1
 8009592:	d00a      	beq.n	80095aa <_raise_r+0x4c>
 8009594:	1c59      	adds	r1, r3, #1
 8009596:	d103      	bne.n	80095a0 <_raise_r+0x42>
 8009598:	2316      	movs	r3, #22
 800959a:	6003      	str	r3, [r0, #0]
 800959c:	2001      	movs	r0, #1
 800959e:	e7e7      	b.n	8009570 <_raise_r+0x12>
 80095a0:	2100      	movs	r1, #0
 80095a2:	4620      	mov	r0, r4
 80095a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095a8:	4798      	blx	r3
 80095aa:	2000      	movs	r0, #0
 80095ac:	e7e0      	b.n	8009570 <_raise_r+0x12>
	...

080095b0 <raise>:
 80095b0:	4b02      	ldr	r3, [pc, #8]	@ (80095bc <raise+0xc>)
 80095b2:	4601      	mov	r1, r0
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	f7ff bfd2 	b.w	800955e <_raise_r>
 80095ba:	bf00      	nop
 80095bc:	20000030 	.word	0x20000030

080095c0 <_kill_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	2300      	movs	r3, #0
 80095c4:	4d06      	ldr	r5, [pc, #24]	@ (80095e0 <_kill_r+0x20>)
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	4611      	mov	r1, r2
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	f7f8 fd84 	bl	80020da <_kill>
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	d102      	bne.n	80095dc <_kill_r+0x1c>
 80095d6:	682b      	ldr	r3, [r5, #0]
 80095d8:	b103      	cbz	r3, 80095dc <_kill_r+0x1c>
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	bf00      	nop
 80095e0:	20000660 	.word	0x20000660

080095e4 <_getpid_r>:
 80095e4:	f7f8 bd72 	b.w	80020cc <_getpid>

080095e8 <_init>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr

080095f4 <_fini>:
 80095f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f6:	bf00      	nop
 80095f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fa:	bc08      	pop	{r3}
 80095fc:	469e      	mov	lr, r3
 80095fe:	4770      	bx	lr
