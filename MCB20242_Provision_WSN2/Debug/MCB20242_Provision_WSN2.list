
MCB20242_Provision_WSN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009070  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08009180  08009180  0000a180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800967c  0800967c  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009684  08009684  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  0000a684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800968c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001dc  08009868  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08009868  0000b430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdad  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002386  00000000  00000000  00016fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00019338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000913  00000000  00000000  00019f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000385c  00000000  00000000  0001a83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd16  00000000  00000000  0001e097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088947  00000000  00000000  0002ddad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b66f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004738  00000000  00000000  000b6738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000bae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009168 	.word	0x08009168

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009168 	.word	0x08009168

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b99e 	b.w	8000ebc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83c 	bl	8000c04 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460d      	mov	r5, r1
 8000ba2:	f7ff ff0b 	bl	80009bc <__aeabi_dcmplt>
 8000ba6:	b928      	cbnz	r0, 8000bb4 <__aeabi_d2lz+0x1c>
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4629      	mov	r1, r5
 8000bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb0:	f000 b80a 	b.w	8000bc8 <__aeabi_d2ulz>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bba:	f000 f805 	bl	8000bc8 <__aeabi_d2ulz>
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc4:	bd38      	pop	{r3, r4, r5, pc}
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2ulz>:
 8000bc8:	b5d0      	push	{r4, r6, r7, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <__aeabi_d2ulz+0x34>)
 8000bce:	4606      	mov	r6, r0
 8000bd0:	460f      	mov	r7, r1
 8000bd2:	f7ff fc81 	bl	80004d8 <__aeabi_dmul>
 8000bd6:	f7ff ff57 	bl	8000a88 <__aeabi_d2uiz>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	f7ff fc02 	bl	80003e4 <__aeabi_ui2d>
 8000be0:	2200      	movs	r2, #0
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <__aeabi_d2ulz+0x38>)
 8000be4:	f7ff fc78 	bl	80004d8 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4630      	mov	r0, r6
 8000bee:	4639      	mov	r1, r7
 8000bf0:	f7ff faba 	bl	8000168 <__aeabi_dsub>
 8000bf4:	f7ff ff48 	bl	8000a88 <__aeabi_d2uiz>
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfc:	3df00000 	.word	0x3df00000
 8000c00:	41f00000 	.word	0x41f00000

08000c04 <__udivmoddi4>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	9d08      	ldr	r5, [sp, #32]
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d14e      	bne.n	8000cae <__udivmoddi4+0xaa>
 8000c10:	4694      	mov	ip, r2
 8000c12:	458c      	cmp	ip, r1
 8000c14:	4686      	mov	lr, r0
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	d962      	bls.n	8000ce2 <__udivmoddi4+0xde>
 8000c1c:	b14a      	cbz	r2, 8000c32 <__udivmoddi4+0x2e>
 8000c1e:	f1c2 0320 	rsb	r3, r2, #32
 8000c22:	4091      	lsls	r1, r2
 8000c24:	fa20 f303 	lsr.w	r3, r0, r3
 8000c28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	fa1f f68c 	uxth.w	r6, ip
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb04 f106 	mul.w	r1, r4, r6
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x64>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5a:	f080 8110 	bcs.w	8000e7e <__udivmoddi4+0x27a>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 810d 	bls.w	8000e7e <__udivmoddi4+0x27a>
 8000c64:	3c02      	subs	r4, #2
 8000c66:	4463      	add	r3, ip
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x94>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	f080 80fa 	bcs.w	8000e82 <__udivmoddi4+0x27e>
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	f240 80f7 	bls.w	8000e82 <__udivmoddi4+0x27e>
 8000c94:	4463      	add	r3, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	2100      	movs	r1, #0
 8000c9a:	1b9b      	subs	r3, r3, r6
 8000c9c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa6>
 8000ca2:	40d3      	lsrs	r3, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xba>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb4>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa6>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x150>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xcc>
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	f0c0 80ee 	bcc.w	8000eac <__udivmoddi4+0x2a8>
 8000cd0:	1a86      	subs	r6, r0, r2
 8000cd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d0e6      	beq.n	8000caa <__udivmoddi4+0xa6>
 8000cdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce0:	e7e3      	b.n	8000caa <__udivmoddi4+0xa6>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	f040 808f 	bne.w	8000e06 <__udivmoddi4+0x202>
 8000ce8:	eba1 040c 	sub.w	r4, r1, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x11c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x11a>
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <__udivmoddi4+0x2b0>
 8000d1e:	4626      	mov	r6, r4
 8000d20:	1a1c      	subs	r4, r3, r0
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	429f      	cmp	r7, r3
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x148>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x146>
 8000d44:	429f      	cmp	r7, r3
 8000d46:	f200 80ae 	bhi.w	8000ea6 <__udivmoddi4+0x2a2>
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	1bdb      	subs	r3, r3, r7
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x9c>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa24 f607 	lsr.w	r6, r4, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	fb09 6618 	mls	r6, r9, r8, r6
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	408c      	lsls	r4, r1
 8000d7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	431c      	orrs	r4, r3
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d90a      	bls.n	8000daa <__udivmoddi4+0x1a6>
 8000d94:	eb1c 0303 	adds.w	r3, ip, r3
 8000d98:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d9c:	f080 8081 	bcs.w	8000ea2 <__udivmoddi4+0x29e>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	d97e      	bls.n	8000ea2 <__udivmoddi4+0x29e>
 8000da4:	f1a8 0802 	sub.w	r8, r8, #2
 8000da8:	4463      	add	r3, ip
 8000daa:	1a1e      	subs	r6, r3, r0
 8000dac:	fbb6 f3f9 	udiv	r3, r6, r9
 8000db0:	fb09 6613 	mls	r6, r9, r3, r6
 8000db4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x1d0>
 8000dc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dca:	d266      	bcs.n	8000e9a <__udivmoddi4+0x296>
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d964      	bls.n	8000e9a <__udivmoddi4+0x296>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	4464      	add	r4, ip
 8000dd4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dd8:	fba0 8302 	umull	r8, r3, r0, r2
 8000ddc:	eba4 040e 	sub.w	r4, r4, lr
 8000de0:	429c      	cmp	r4, r3
 8000de2:	46c6      	mov	lr, r8
 8000de4:	461e      	mov	r6, r3
 8000de6:	d350      	bcc.n	8000e8a <__udivmoddi4+0x286>
 8000de8:	d04d      	beq.n	8000e86 <__udivmoddi4+0x282>
 8000dea:	b155      	cbz	r5, 8000e02 <__udivmoddi4+0x1fe>
 8000dec:	ebba 030e 	subs.w	r3, sl, lr
 8000df0:	eb64 0406 	sbc.w	r4, r4, r6
 8000df4:	fa04 f707 	lsl.w	r7, r4, r7
 8000df8:	40cb      	lsrs	r3, r1
 8000dfa:	431f      	orrs	r7, r3
 8000dfc:	40cc      	lsrs	r4, r1
 8000dfe:	e9c5 7400 	strd	r7, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e751      	b.n	8000caa <__udivmoddi4+0xa6>
 8000e06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0a:	f1c2 0320 	rsb	r3, r2, #32
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e20:	fb08 1110 	mls	r1, r8, r0, r1
 8000e24:	4094      	lsls	r4, r2
 8000e26:	431c      	orrs	r4, r3
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x248>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29a>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29a>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e52:	fb08 3311 	mls	r3, r8, r1, r3
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x272>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x292>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x292>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f2      	b.n	8000c68 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e708      	b.n	8000c98 <__udivmoddi4+0x94>
 8000e86:	45c2      	cmp	sl, r8
 8000e88:	d2af      	bcs.n	8000dea <__udivmoddi4+0x1e6>
 8000e8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e8e:	eb63 060c 	sbc.w	r6, r3, ip
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a9      	b.n	8000dea <__udivmoddi4+0x1e6>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x272>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e79a      	b.n	8000dd4 <__udivmoddi4+0x1d0>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x248>
 8000ea2:	46b0      	mov	r8, r6
 8000ea4:	e781      	b.n	8000daa <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74f      	b.n	8000d4c <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e711      	b.n	8000cd8 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e732      	b.n	8000d20 <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6958      	ldr	r0, [r3, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	f001 faaa 	bl	8002444 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	f107 010f 	add.w	r1, r7, #15
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	2201      	movs	r2, #1
 8000f00:	f002 fa6b 	bl	80033da <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f04:	bf00      	nop
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fe6a 	bl	8003be6 <HAL_SPI_GetState>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d1f6      	bne.n	8000f06 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6998      	ldr	r0, [r3, #24]
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	2201      	movs	r2, #1
 8000f28:	f002 fb9b 	bl	8003662 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f2c:	bf00      	nop
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fe56 	bl	8003be6 <HAL_SPI_GetState>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d1f6      	bne.n	8000f2e <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6958      	ldr	r0, [r3, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4619      	mov	r1, r3
 8000f52:	f001 fa77 	bl	8002444 <HAL_GPIO_WritePin>
	return rxByte;
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6958      	ldr	r0, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f001 fa5a 	bl	8002444 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6998      	ldr	r0, [r3, #24]
 8000f96:	f107 010f 	add.w	r1, r7, #15
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f002 fa1b 	bl	80033da <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fa4:	bf00      	nop
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fe1a 	bl	8003be6 <HAL_SPI_GetState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1f6      	bne.n	8000fa6 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6998      	ldr	r0, [r3, #24]
 8000fbe:	1cb9      	adds	r1, r7, #2
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f002 fa08 	bl	80033da <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fca:	bf00      	nop
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fe07 	bl	8003be6 <HAL_SPI_GetState>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d1f6      	bne.n	8000fcc <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6958      	ldr	r0, [r3, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f001 fa28 	bl	8002444 <HAL_GPIO_WritePin>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <lora_init>:



uint8_t lora_init(lora_t * module){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6858      	ldr	r0, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f001 fa15 	bl	8002444 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f000 ff5c 	bl	8001ed8 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6858      	ldr	r0, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	f001 fa07 	bl	8002444 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f000 ff4e 	bl	8001ed8 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 800103c:	2142      	movs	r1, #66	@ 0x42
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff3e 	bl	8000ec0 <lora_read_reg>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d001      	beq.n	8001052 <lora_init+0x56>
		return 1;
 800104e:	2301      	movs	r3, #1
 8001050:	e052      	b.n	80010f8 <lora_init+0xfc>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	2101      	movs	r1, #1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff82 	bl	8000f60 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <lora_init+0x104>)
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f95e 	bl	800132c <lora_set_frequency>
	lora_set_bandwidth(module, BANDWIDTH[module->bandwidth]);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	795b      	ldrb	r3, [r3, #5]
 8001074:	461a      	mov	r2, r3
 8001076:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <lora_init+0x108>)
 8001078:	5c9b      	ldrb	r3, [r3, r2]
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f99b 	bl	80013b8 <lora_set_bandwidth>
	lora_set_gain(module,module->powergain);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f9b7 	bl	80013fc <lora_set_gain>
	lora_set_spreading_factor(module, module->spreadingfactor);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	79db      	ldrb	r3, [r3, #7]
 8001092:	4619      	mov	r1, r3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f9d5 	bl	8001444 <lora_set_spreading_factor>
	lora_set_coding_rate(module, module->codingrate);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a1b      	ldrb	r3, [r3, #8]
 800109e:	4619      	mov	r1, r3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f9fb 	bl	800149c <lora_set_coding_rate>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210e      	movs	r1, #14
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff58 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	210f      	movs	r1, #15
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff53 	bl	8000f60 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 80010ba:	210c      	movs	r1, #12
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff feff 	bl	8000ec0 <lora_read_reg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f043 0303 	orr.w	r3, r3, #3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	210c      	movs	r1, #12
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff44 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 80010d8:	2204      	movs	r2, #4
 80010da:	2126      	movs	r1, #38	@ 0x26
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff3f 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 80010e2:	228f      	movs	r2, #143	@ 0x8f
 80010e4:	2109      	movs	r1, #9
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff3a 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 80010ec:	2281      	movs	r2, #129	@ 0x81
 80010ee:	2101      	movs	r1, #1
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff35 	bl	8000f60 <lora_write_reg>
	return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	080091c8 	.word	0x080091c8
 8001104:	080091e8 	.word	0x080091e8

08001108 <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 8001114:	2112      	movs	r1, #18
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fed2 	bl	8000ec0 <lora_read_reg>
 800111c:	4603      	mov	r3, r0
 800111e:	60bb      	str	r3, [r7, #8]
//	lora_read_reg(module, REG_MODEM_CONFIG_1);
//	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	2112      	movs	r1, #18
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff19 	bl	8000f60 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01d      	beq.n	8001174 <lora_prasePacket+0x6c>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <lora_prasePacket+0x6c>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 8001142:	2113      	movs	r1, #19
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff febb 	bl	8000ec0 <lora_read_reg>
 800114a:	4603      	mov	r3, r0
 800114c:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 800114e:	2110      	movs	r1, #16
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff feb5 	bl	8000ec0 <lora_read_reg>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	210d      	movs	r1, #13
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff feff 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8001162:	2281      	movs	r2, #129	@ 0x81
 8001164:	2101      	movs	r1, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fefa 	bl	8000f60 <lora_write_reg>
		packetIndex = 0;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <lora_prasePacket+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e010      	b.n	8001196 <lora_prasePacket+0x8e>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001174:	2101      	movs	r1, #1
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fea2 	bl	8000ec0 <lora_read_reg>
 800117c:	4603      	mov	r3, r0
 800117e:	2b86      	cmp	r3, #134	@ 0x86
 8001180:	d009      	beq.n	8001196 <lora_prasePacket+0x8e>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210d      	movs	r1, #13
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff feea 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800118c:	2286      	movs	r2, #134	@ 0x86
 800118e:	2101      	movs	r1, #1
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fee5 	bl	8000f60 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <lora_prasePacket+0x9e>
		return -1;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	e000      	b.n	80011a8 <lora_prasePacket+0xa0>
	}
	return packetLength;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001f8 	.word	0x200001f8

080011b4 <lora_available>:

uint8_t lora_available(lora_t * module){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 80011bc:	2113      	movs	r1, #19
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fe7e 	bl	8000ec0 <lora_read_reg>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <lora_available+0x24>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001f8 	.word	0x200001f8

080011dc <lora_read>:

uint8_t lora_read(lora_t * module){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffe5 	bl	80011b4 <lora_available>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <lora_read+0x18>
		return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e00a      	b.n	800120a <lora_read+0x2e>
	packetIndex++;
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <lora_read+0x38>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <lora_read+0x38>)
 80011fe:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fe5c 	bl	8000ec0 <lora_read_reg>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200001f8 	.word	0x200001f8

08001218 <lora_begin_packet>:

uint8_t lora_begin_packet(lora_t * module){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	//int ret;
	if ((lora_read_reg(module, REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8001220:	2101      	movs	r1, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fe4c 	bl	8000ec0 <lora_read_reg>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d101      	bne.n	8001236 <lora_begin_packet+0x1e>
    return 1;
 8001232:	2301      	movs	r3, #1
 8001234:	e014      	b.n	8001260 <lora_begin_packet+0x48>
  }
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001236:	2281      	movs	r2, #129	@ 0x81
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe90 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 8001240:	2272      	movs	r2, #114	@ 0x72
 8001242:	211d      	movs	r1, #29
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe8b 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	210d      	movs	r1, #13
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe86 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module, REG_PAYLOAD_LENGTH, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2122      	movs	r1, #34	@ 0x22
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fe81 	bl	8000f60 <lora_write_reg>
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <lora_tx>:

void lora_tx(lora_t * module, uint8_t * buf, uint8_t size){
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	71fb      	strb	r3, [r7, #7]
	int currentLength = lora_read_reg(module, REG_PAYLOAD_LENGTH);
 8001276:	2122      	movs	r1, #34	@ 0x22
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff fe21 	bl	8000ec0 <lora_read_reg>
 800127e:	4603      	mov	r3, r0
 8001280:	613b      	str	r3, [r7, #16]
  if ((currentLength + size > MAX_PKT_LENGTH)){
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4413      	add	r3, r2
 8001288:	2bff      	cmp	r3, #255	@ 0xff
 800128a:	dd03      	ble.n	8001294 <lora_tx+0x2c>
    size = MAX_PKT_LENGTH - currentLength;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	71fb      	strb	r3, [r7, #7]
  }

  for (int i = 0; i < size; i++) {
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00b      	b.n	80012b2 <lora_tx+0x4a>
    lora_write_reg(module, REG_FIFO, buf[i]);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fe5a 	bl	8000f60 <lora_write_reg>
  for (int i = 0; i < size; i++) {
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbef      	blt.n	800129a <lora_tx+0x32>
  }
  lora_write_reg(module, REG_PAYLOAD_LENGTH, currentLength + size);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	2122      	movs	r1, #34	@ 0x22
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff fe49 	bl	8000f60 <lora_write_reg>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <lora_end_packet>:

uint8_t lora_end_packet(lora_t * module){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 80012de:	2364      	movs	r3, #100	@ 0x64
 80012e0:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80012e2:	2283      	movs	r2, #131	@ 0x83
 80012e4:	2101      	movs	r1, #1
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fe3a 	bl	8000f60 <lora_write_reg>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80012ec:	e00a      	b.n	8001304 <lora_end_packet+0x2e>
		if(--timeout==0){
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d104      	bne.n	8001304 <lora_end_packet+0x2e>
			HAL_Delay(1);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f000 fdec 	bl	8001ed8 <HAL_Delay>
			return 1;
 8001300:	2301      	movs	r3, #1
 8001302:	e00e      	b.n	8001322 <lora_end_packet+0x4c>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001304:	2112      	movs	r1, #18
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fdda 	bl	8000ec0 <lora_read_reg>
 800130c:	4603      	mov	r3, r0
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0eb      	beq.n	80012ee <lora_end_packet+0x18>
		}
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001316:	2208      	movs	r2, #8
 8001318:	2112      	movs	r1, #18
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe20 	bl	8000f60 <lora_write_reg>
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <lora_set_frequency>:

void lora_set_frequency(lora_t * module, uint64_t freq){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8001338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133c:	f04f 0000 	mov.w	r0, #0
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	04d9      	lsls	r1, r3, #19
 8001346:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800134a:	04d0      	lsls	r0, r2, #19
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <lora_set_frequency+0x88>)
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	f7ff fc09 	bl	8000b68 <__aeabi_uldivmod>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 800135e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	0c02      	lsrs	r2, r0, #16
 800136c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001370:	0c0b      	lsrs	r3, r1, #16
 8001372:	b2d3      	uxtb	r3, r2
 8001374:	461a      	mov	r2, r3
 8001376:	2106      	movs	r1, #6
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fdf1 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 800137e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	0a02      	lsrs	r2, r0, #8
 800138c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001390:	0a0b      	lsrs	r3, r1, #8
 8001392:	b2d3      	uxtb	r3, r2
 8001394:	461a      	mov	r2, r3
 8001396:	2107      	movs	r1, #7
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fde1 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800139e:	7c3b      	ldrb	r3, [r7, #16]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2108      	movs	r1, #8
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff fddb 	bl	8000f60 <lora_write_reg>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	01e84800 	.word	0x01e84800

080013b8 <lora_set_bandwidth>:
void lora_set_bandwidth(lora_t * module, uint8_t bandwidth){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
	uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 80013c4:	211d      	movs	r1, #29
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fd7a 	bl	8000ec0 <lora_read_reg>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
	modem_config_1 &= 0x0F;                // Xóa các bit 7-4
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	73fb      	strb	r3, [r7, #15]
	modem_config_1 |= (bandwidth << 4);    // Thiết lập bandwidth
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	461a      	mov	r2, r3
 80013ec:	211d      	movs	r1, #29
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fdb6 	bl	8000f60 <lora_write_reg>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <lora_set_gain>:
void lora_set_gain(lora_t * module, uint8_t power_gain){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
    // Đọc giá trị hiện tại của thanh ghi REG_PA_CONFIG
    uint8_t pa_config = lora_read_reg(module, REG_PA_CONFIG);
 8001408:	2109      	movs	r1, #9
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fd58 	bl	8000ec0 <lora_read_reg>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit liên quan đến công suất phát (bit 0-3)
    pa_config &= 0xF0;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	73fb      	strb	r3, [r7, #15]
    // Gán giá trị power_gain trực tiếp vào các bit 0-3
    pa_config |= (power_gain & 0x0F);  // Chỉ lấy phần liên quan đến các bit 0-3
 800141c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	b25a      	sxtb	r2, r3
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị mới vào thanh ghi REG_PA_CONFIG
    lora_write_reg(module, REG_PA_CONFIG, pa_config);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	461a      	mov	r2, r3
 8001434:	2109      	movs	r1, #9
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fd92 	bl	8000f60 <lora_write_reg>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <lora_set_spreading_factor>:
void lora_set_spreading_factor(lora_t *module, uint8_t spreading_factor) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị spreading factor có hợp lệ không
    if (spreading_factor < SF_7) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b06      	cmp	r3, #6
 8001454:	d801      	bhi.n	800145a <lora_set_spreading_factor+0x16>
        // Nếu SF < 7 thì set = 7
    	spreading_factor =7;
 8001456:	2307      	movs	r3, #7
 8001458:	70fb      	strb	r3, [r7, #3]
    }
    if (spreading_factor > SF_12) {
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d901      	bls.n	8001464 <lora_set_spreading_factor+0x20>
        // Nếu SF > 7 thì set = 12
    	spreading_factor =12;
 8001460:	230c      	movs	r3, #12
 8001462:	70fb      	strb	r3, [r7, #3]
        }
    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_2
    uint8_t modem_config_2 = lora_read_reg(module, REG_MODEM_CONFIG_2);
 8001464:	211e      	movs	r1, #30
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fd2a 	bl	8000ec0 <lora_read_reg>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit 7-4 (liên quan đến SF) để chuẩn bị ghi giá trị mới
    modem_config_2 &= 0x0F;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	73fb      	strb	r3, [r7, #15]
    // Thiết lập giá trị spreading factor mới
    modem_config_2 |= (spreading_factor << 4);
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	b25a      	sxtb	r2, r3
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị vào REG_MODEM_CONFIG_2
    lora_write_reg(module, REG_MODEM_CONFIG_2, modem_config_2);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	461a      	mov	r2, r3
 800148c:	211e      	movs	r1, #30
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fd66 	bl	8000f60 <lora_write_reg>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <lora_set_coding_rate>:
void lora_set_coding_rate(lora_t *module, uint8_t coding_rate) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị coding rate < 1 thì set = 1
    if (coding_rate < CR_4_5) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <lora_set_coding_rate+0x16>
        coding_rate =1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	70fb      	strb	r3, [r7, #3]
    }
    // Kiểm tra giá trị coding rate > 1 thì set = 4
       if (coding_rate > CR_4_8) {
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d901      	bls.n	80014bc <lora_set_coding_rate+0x20>
           coding_rate = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	70fb      	strb	r3, [r7, #3]
       }
    HAL_Delay(1); // Thêm độ trễ để ổn định trước khi thực hiện bất kỳ tác vụ nào
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 fd0b 	bl	8001ed8 <HAL_Delay>

    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_1
    uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 80014c2:	211d      	movs	r1, #29
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fcfb 	bl	8000ec0 <lora_read_reg>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi để đảm bảo đọc hoàn tất
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 fd02 	bl	8001ed8 <HAL_Delay>

    // Xóa các bit 3-1 (liên quan đến CR) để chuẩn bị ghi giá trị mới
    modem_config_1 &= 0xF1;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	f023 030e 	bic.w	r3, r3, #14
 80014da:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi cập nhật giá trị trong bộ nhớ tạm
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 fcfb 	bl	8001ed8 <HAL_Delay>

    // Thiết lập giá trị coding rate mới (CR nằm ở bit 3-1)
    modem_config_1 |= (coding_rate << 1);
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi chuẩn bị giá trị mới
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 fcf0 	bl	8001ed8 <HAL_Delay>

    // Ghi lại giá trị vào REG_MODEM_CONFIG_1
    lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	461a      	mov	r2, r3
 80014fc:	211d      	movs	r1, #29
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fd2e 	bl	8000f60 <lora_write_reg>
    HAL_Delay(1); // Đợi để đảm bảo quá trình ghi vào thanh ghi hoàn tất
 8001504:	2001      	movs	r0, #1
 8001506:	f000 fce7 	bl	8001ed8 <HAL_Delay>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <_write>:

UART_HandleTypeDef huart3;


/* USER CODE BEGIN PV */
int _write(int fd, char * ptr, int len) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart3, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	b29a      	uxth	r2, r3
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <_write+0x28>)
 800152c:	f002 fcc3 	bl	8003eb6 <HAL_UART_Transmit>
  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000268 	.word	0x20000268

08001540 <lora_Init>:
char data_receive[80];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lora_Init(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	//cấu hình lora
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <lora_Init+0x70>)
 8001546:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <lora_Init+0x74>)
 8001548:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <lora_Init+0x70>)
 800154c:	2201      	movs	r2, #1
 800154e:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;				// NSS pin to which port is connected
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <lora_Init+0x70>)
 8001552:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <lora_Init+0x78>)
 8001554:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;					// NSS pin to which pin is connected
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <lora_Init+0x70>)
 8001558:	2210      	movs	r2, #16
 800155a:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;			// RESET pin to which port is connected
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <lora_Init+0x70>)
 800155e:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <lora_Init+0x74>)
 8001560:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;			// RESET pin to which pin is connected
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <lora_Init+0x70>)
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <lora_Init+0x70>)
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <lora_Init+0x7c>)
 800156c:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <lora_Init+0x80>)
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <lora_Init+0x70>)
 8001572:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;								// 433MHZ Frequency
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <lora_Init+0x80>)
 8001576:	2200      	movs	r2, #0
 8001578:	711a      	strb	r2, [r3, #4]
	//lora.frequency = FREQ_865MHZ;								// 865MHZ Frequency
	//lora.frequency = FREQ_866MHZ;								// 866MHZ Frequency
	//lora.frequency = FREQ_867MHZ;								// 867MHZ Frequency
	lora.bandwidth = BW_125KHz;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <lora_Init+0x80>)
 800157c:	2207      	movs	r2, #7
 800157e:	715a      	strb	r2, [r3, #5]
	lora.powergain = POWER_20db;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <lora_Init+0x80>)
 8001582:	22ff      	movs	r2, #255	@ 0xff
 8001584:	719a      	strb	r2, [r3, #6]
	lora.spreadingfactor = SF_7;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <lora_Init+0x80>)
 8001588:	2207      	movs	r2, #7
 800158a:	71da      	strb	r2, [r3, #7]
	lora.codingrate = CR_4_5;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <lora_Init+0x80>)
 800158e:	2201      	movs	r2, #1
 8001590:	721a      	strb	r2, [r3, #8]


	while(lora_init(&lora)){										// Initialize the lora module
 8001592:	e003      	b.n	800159c <lora_Init+0x5c>
		HAL_Delay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f000 fc9e 	bl	8001ed8 <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <lora_Init+0x80>)
 800159e:	f7ff fd2d 	bl	8000ffc <lora_init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f5      	bne.n	8001594 <lora_Init+0x54>
	}

}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002b0 	.word	0x200002b0
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40010800 	.word	0x40010800
 80015bc:	20000210 	.word	0x20000210
 80015c0:	200002cc 	.word	0x200002cc

080015c4 <send_broadcast>:

char dataBroadcast[] = "PROV";
void send_broadcast(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	lora_begin_packet(&lora);
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <send_broadcast+0x28>)
 80015ca:	f7ff fe25 	bl	8001218 <lora_begin_packet>
	lora_tx(&lora, (uint8_t*)dataBroadcast, strlen(dataBroadcast));
 80015ce:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <send_broadcast+0x2c>)
 80015d0:	f7fe fdbe 	bl	8000150 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4905      	ldr	r1, [pc, #20]	@ (80015f0 <send_broadcast+0x2c>)
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <send_broadcast+0x28>)
 80015de:	f7ff fe43 	bl	8001268 <lora_tx>
	lora_end_packet(&lora);
 80015e2:	4802      	ldr	r0, [pc, #8]	@ (80015ec <send_broadcast+0x28>)
 80015e4:	f7ff fe77 	bl	80012d6 <lora_end_packet>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002cc 	.word	0x200002cc
 80015f0:	20000000 	.word	0x20000000

080015f4 <search_Node>:
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
    lora_end_packet(&lora);
    printf("Send STT to %d: %s\r\n", node_id, buf);
}

int search_Node(){
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b093      	sub	sp, #76	@ 0x4c
 80015f8:	af00      	add	r7, sp, #0
	send_broadcast();
 80015fa:	f7ff ffe3 	bl	80015c4 <send_broadcast>
	char buf[60];
	uint32_t timeStart = HAL_GetTick();
 80015fe:	f000 fc61 	bl	8001ec4 <HAL_GetTick>
 8001602:	6438      	str	r0, [r7, #64]	@ 0x40
	while (HAL_GetTick() - timeStart <= SEARCH_NODE_TIMEOUT){
 8001604:	e043      	b.n	800168e <search_Node+0x9a>
		uint8_t ret = lora_prasePacket(&lora);
 8001606:	4828      	ldr	r0, [pc, #160]	@ (80016a8 <search_Node+0xb4>)
 8001608:	f7ff fd7e 	bl	8001108 <lora_prasePacket>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		uint8_t i = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (ret) {
 8001618:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800161c:	2b00      	cmp	r3, #0
 800161e:	d036      	beq.n	800168e <search_Node+0x9a>
		i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		while (lora_available(&lora) && i < sizeof(buf) - 1) {
 8001626:	e00f      	b.n	8001648 <search_Node+0x54>
			buf[i++] = lora_read(&lora);
 8001628:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 8001632:	461c      	mov	r4, r3
 8001634:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <search_Node+0xb4>)
 8001636:	f7ff fdd1 	bl	80011dc <lora_read>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001642:	443b      	add	r3, r7
 8001644:	f803 2c48 	strb.w	r2, [r3, #-72]
		while (lora_available(&lora) && i < sizeof(buf) - 1) {
 8001648:	4817      	ldr	r0, [pc, #92]	@ (80016a8 <search_Node+0xb4>)
 800164a:	f7ff fdb3 	bl	80011b4 <lora_available>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <search_Node+0x68>
 8001654:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001658:	2b3a      	cmp	r3, #58	@ 0x3a
 800165a:	d9e5      	bls.n	8001628 <search_Node+0x34>
		}
		buf[i] = '\0';
 800165c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001660:	3348      	adds	r3, #72	@ 0x48
 8001662:	443b      	add	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	f803 2c48 	strb.w	r2, [r3, #-72]

		if (strncmp(buf, "ACK", 3) == 0) {
 800166a:	463b      	mov	r3, r7
 800166c:	2203      	movs	r2, #3
 800166e:	490f      	ldr	r1, [pc, #60]	@ (80016ac <search_Node+0xb8>)
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fdba 	bl	80051ea <strncmp>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <search_Node+0x9a>
			sscanf(buf + 4, "%d", &node_id);
 800167c:	463b      	mov	r3, r7
 800167e:	3304      	adds	r3, #4
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <search_Node+0xbc>)
 8001682:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <search_Node+0xc0>)
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fd39 	bl	80050fc <siscanf>

			return 1;
 800168a:	2301      	movs	r3, #1
 800168c:	e008      	b.n	80016a0 <search_Node+0xac>
	while (HAL_GetTick() - timeStart <= SEARCH_NODE_TIMEOUT){
 800168e:	f000 fc19 	bl	8001ec4 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800169c:	d9b3      	bls.n	8001606 <search_Node+0x12>
			}
		}
	}
	return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	374c      	adds	r7, #76	@ 0x4c
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	200002cc 	.word	0x200002cc
 80016ac:	080091a4 	.word	0x080091a4
 80016b0:	200002d8 	.word	0x200002d8
 80016b4:	080091a8 	.word	0x080091a8

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f000 fba9 	bl	8001e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 f83b 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 f913 	bl	80018f0 <MX_GPIO_Init>
  MX_RTC_Init();
 80016ca:	f000 f895 	bl	80017f8 <MX_RTC_Init>
  MX_SPI1_Init();
 80016ce:	f000 f8af 	bl	8001830 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80016d2:	f000 f8e3 	bl	800189c <MX_USART3_UART_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016dc:	4816      	ldr	r0, [pc, #88]	@ (8001738 <main+0x80>)
 80016de:	f000 feb1 	bl	8002444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016e8:	4813      	ldr	r0, [pc, #76]	@ (8001738 <main+0x80>)
 80016ea:	f000 feab 	bl	8002444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f4:	4810      	ldr	r0, [pc, #64]	@ (8001738 <main+0x80>)
 80016f6:	f000 fea5 	bl	8002444 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 2 */
  lora_Init();
 80016fa:	f7ff ff21 	bl	8001540 <lora_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE BEGIN 3 */
	  uint32_t timeSearch = HAL_GetTick();
 80016fe:	f000 fbe1 	bl	8001ec4 <HAL_GetTick>
 8001702:	6038      	str	r0, [r7, #0]
	  while (HAL_GetTick() - timeSearch <= 5000){
 8001704:	e001      	b.n	800170a <main+0x52>
		  search_Node();
 8001706:	f7ff ff75 	bl	80015f4 <search_Node>
	  while (HAL_GetTick() - timeSearch <= 5000){
 800170a:	f000 fbdb 	bl	8001ec4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d9f4      	bls.n	8001706 <main+0x4e>
	  }

	  for (int i = 0; i <= TIME_CYCLE_GET; i ++){
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	e006      	b.n	8001730 <main+0x78>
		  HAL_Delay(1000);
 8001722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001726:	f000 fbd7 	bl	8001ed8 <HAL_Delay>
	  for (int i = 0; i <= TIME_CYCLE_GET; i ++){
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3301      	adds	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	ddf5      	ble.n	8001722 <main+0x6a>
  {
 8001736:	e7e2      	b.n	80016fe <main+0x46>
 8001738:	40010800 	.word	0x40010800

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	@ 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001746:	2228      	movs	r2, #40	@ 0x28
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fd45 	bl	80051da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800176c:	2309      	movs	r3, #9
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177a:	2301      	movs	r3, #1
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800177e:	2301      	movs	r3, #1
 8001780:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800178a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800178c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fe9a 	bl	80024d0 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80017a2:	f000 f91b 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2102      	movs	r1, #2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 f906 	bl	80029d4 <HAL_RCC_ClockConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017ce:	f000 f905 	bl	80019dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017d2:	2301      	movs	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 fa86 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80017ea:	f000 f8f7 	bl	80019dc <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3750      	adds	r7, #80	@ 0x50
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <MX_RTC_Init+0x30>)
 80017fe:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <MX_RTC_Init+0x34>)
 8001800:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_RTC_Init+0x30>)
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <MX_RTC_Init+0x30>)
 800180c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001810:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_RTC_Init+0x30>)
 8001814:	f001 fbd8 	bl	8002fc8 <HAL_RTC_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800181e:	f000 f8dd 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001fc 	.word	0x200001fc
 800182c:	40002800 	.word	0x40002800

08001830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001836:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <MX_SPI1_Init+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <MX_SPI1_Init+0x64>)
 800183c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_SPI1_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_SPI1_Init+0x64>)
 800185c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001864:	2210      	movs	r2, #16
 8001866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MX_SPI1_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_SPI1_Init+0x64>)
 800187c:	220a      	movs	r2, #10
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001882:	f001 fd26 	bl	80032d2 <HAL_SPI_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800188c:	f000 f8a6 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000210 	.word	0x20000210
 8001898:	40013000 	.word	0x40013000

0800189c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <MX_USART3_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018d4:	f002 fa9f 	bl	8003e16 <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f000 f87d 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000268 	.word	0x20000268
 80018ec:	40004800 	.word	0x40004800

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001904:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <MX_GPIO_Init+0xdc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a30      	ldr	r2, [pc, #192]	@ (80019cc <MX_GPIO_Init+0xdc>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b2e      	ldr	r3, [pc, #184]	@ (80019cc <MX_GPIO_Init+0xdc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b2b      	ldr	r3, [pc, #172]	@ (80019cc <MX_GPIO_Init+0xdc>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a2a      	ldr	r2, [pc, #168]	@ (80019cc <MX_GPIO_Init+0xdc>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b28      	ldr	r3, [pc, #160]	@ (80019cc <MX_GPIO_Init+0xdc>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <MX_GPIO_Init+0xdc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a24      	ldr	r2, [pc, #144]	@ (80019cc <MX_GPIO_Init+0xdc>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <MX_GPIO_Init+0xdc>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Data_DHT_Pin|NSS_Pin|Led_6_Pin|Led_5_Pin|Led_4_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f640 6114 	movw	r1, #3604	@ 0xe14
 8001952:	481f      	ldr	r0, [pc, #124]	@ (80019d0 <MX_GPIO_Init+0xe0>)
 8001954:	f000 fd76 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2102      	movs	r1, #2
 800195c:	481d      	ldr	r0, [pc, #116]	@ (80019d4 <MX_GPIO_Init+0xe4>)
 800195e:	f000 fd71 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Data_DHT_Pin NSS_Pin Led_5_Pin Led_4_Pin */
  GPIO_InitStruct.Pin = Data_DHT_Pin|NSS_Pin|Led_6_Pin|Led_5_Pin|Led_4_Pin;
 8001962:	f640 6314 	movw	r3, #3604	@ 0xe14
 8001966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2302      	movs	r3, #2
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4619      	mov	r1, r3
 800197a:	4815      	ldr	r0, [pc, #84]	@ (80019d0 <MX_GPIO_Init+0xe0>)
 800197c:	f000 fbde 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_GPIO_Init+0xe8>)
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <MX_GPIO_Init+0xe4>)
 8001994:	f000 fbd2 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <MX_GPIO_Init+0xe4>)
 80019b0:	f000 fbc4 	bl	800213c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	2006      	movs	r0, #6
 80019ba:	f000 fb88 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019be:	2006      	movs	r0, #6
 80019c0:	f000 fba1 	bl	8002106 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010800 	.word	0x40010800
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	10110000 	.word	0x10110000

080019dc <Error_Handler>:
//				HAL_UART_Transmit(&huart3, (uint8_t *)data_receive, strlen(data_receive),1000);
//
//	}
//}
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <Error_Handler+0x8>

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_MspInit+0x5c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_MspInit+0x5c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_MspInit+0x5c>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <HAL_MspInit+0x5c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <HAL_MspInit+0x5c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <HAL_MspInit+0x5c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_MspInit+0x60>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <HAL_MspInit+0x60>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000

08001a4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <HAL_RTC_MspInit+0x5c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d120      	bne.n	8001aa0 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001a5e:	f000 fd2b 	bl	80024b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_RTC_MspInit+0x60>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_RTC_MspInit+0x60>)
 8001a68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_RTC_MspInit+0x60>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <HAL_RTC_MspInit+0x64>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 fb22 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f000 fb3b 	bl	8002106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2029      	movs	r0, #41	@ 0x29
 8001a96:	f000 fb1a 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a9a:	2029      	movs	r0, #41	@ 0x29
 8001a9c:	f000 fb33 	bl	8002106 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40002800 	.word	0x40002800
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	4242043c 	.word	0x4242043c

08001ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	@ (8001b3c <HAL_SPI_MspInit+0x88>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12f      	bne.n	8001b34 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001ada:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b04:	23a0      	movs	r3, #160	@ 0xa0
 8001b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	480b      	ldr	r0, [pc, #44]	@ (8001b44 <HAL_SPI_MspInit+0x90>)
 8001b18:	f000 fb10 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b1c:	2340      	movs	r3, #64	@ 0x40
 8001b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_SPI_MspInit+0x90>)
 8001b30:	f000 fb04 	bl	800213c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd4 <HAL_UART_MspInit+0x8c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d131      	bne.n	8001bcc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_UART_MspInit+0x90>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd8 <HAL_UART_MspInit+0x90>)
 8001b6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b72:	61d3      	str	r3, [r2, #28]
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_UART_MspInit+0x90>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_UART_MspInit+0x90>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <HAL_UART_MspInit+0x90>)
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_UART_MspInit+0x90>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	@ (8001bdc <HAL_UART_MspInit+0x94>)
 8001bae:	f000 fac5 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <HAL_UART_MspInit+0x94>)
 8001bc8:	f000 fab8 	bl	800213c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40004800 	.word	0x40004800
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010c00 	.word	0x40010c00

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <NMI_Handler+0x4>

08001be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f936 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <RTC_IRQHandler+0x10>)
 8001c3e:	f001 faff 	bl	8003240 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200001fc 	.word	0x200001fc

08001c4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f000 fc0f 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <RTC_Alarm_IRQHandler+0x10>)
 8001c62:	f001 fa3d 	bl	80030e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200001fc 	.word	0x200001fc

08001c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return 1;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <_kill>:

int _kill(int pid, int sig)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c88:	f003 fb0c 	bl	80052a4 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2216      	movs	r2, #22
 8001c90:	601a      	str	r2, [r3, #0]
  return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_exit>:

void _exit (int status)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffe7 	bl	8001c7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <_exit+0x12>

08001cb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e00a      	b.n	8001cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc6:	f3af 8000 	nop.w
 8001cca:	4601      	mov	r1, r0
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60ba      	str	r2, [r7, #8]
 8001cd2:	b2ca      	uxtb	r2, r1
 8001cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf0      	blt.n	8001cc6 <_read+0x12>
  }

  return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d14:	605a      	str	r2, [r3, #4]
  return 0;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <_isatty>:

int _isatty(int file)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
	...

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f003 fa90 	bl	80052a4 <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 }
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20005000 	.word	0x20005000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	200002dc 	.word	0x200002dc
 8001db8:	20000430 	.word	0x20000430

08001dbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc8:	f7ff fff8 	bl	8001dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dcc:	480b      	ldr	r0, [pc, #44]	@ (8001dfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dce:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001de4:	4c09      	ldr	r4, [pc, #36]	@ (8001e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df2:	f003 fa5d 	bl	80052b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001df6:	f7ff fc5f 	bl	80016b8 <main>
  bx lr
 8001dfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e00:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e04:	0800968c 	.word	0x0800968c
  ldr r2, =_sbss
 8001e08:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e0c:	20000430 	.word	0x20000430

08001e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC1_2_IRQHandler>
	...

08001e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_Init+0x28>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	@ (8001e3c <HAL_Init+0x28>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f947 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	200f      	movs	r0, #15
 8001e2c:	f000 f808 	bl	8001e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fdda 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000

08001e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_InitTick+0x54>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_InitTick+0x58>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f95f 	bl	8002122 <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00e      	b.n	8001e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d80a      	bhi.n	8001e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f000 f927 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e80:	4a06      	ldr	r2, [pc, #24]	@ (8001e9c <HAL_InitTick+0x5c>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e000      	b.n	8001e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_IncTick+0x1c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_IncTick+0x20>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a03      	ldr	r2, [pc, #12]	@ (8001ec0 <HAL_IncTick+0x20>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000010 	.word	0x20000010
 8001ec0:	200002e0 	.word	0x200002e0

08001ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	@ (8001ed4 <HAL_GetTick+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	200002e0 	.word	0x200002e0

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d005      	beq.n	8001efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_Delay+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efe:	bf00      	nop
 8001f00:	f7ff ffe0 	bl	8001ec4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8f7      	bhi.n	8001f00 <HAL_Delay+0x28>
  {
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000010 	.word	0x20000010

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4906      	ldr	r1, [pc, #24]	@ (8001fb8 <__NVIC_EnableIRQ+0x34>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff90 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff2d 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff42 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff90 	bl	8002010 <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5f 	bl	8001fbc <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff35 	bl	8001f84 <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b08b      	sub	sp, #44	@ 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e169      	b.n	8002424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002150:	2201      	movs	r2, #1
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 8158 	bne.w	800241e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a9a      	ldr	r2, [pc, #616]	@ (80023dc <HAL_GPIO_Init+0x2a0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d05e      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 8002178:	4a98      	ldr	r2, [pc, #608]	@ (80023dc <HAL_GPIO_Init+0x2a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d875      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 800217e:	4a98      	ldr	r2, [pc, #608]	@ (80023e0 <HAL_GPIO_Init+0x2a4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d058      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 8002184:	4a96      	ldr	r2, [pc, #600]	@ (80023e0 <HAL_GPIO_Init+0x2a4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d86f      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 800218a:	4a96      	ldr	r2, [pc, #600]	@ (80023e4 <HAL_GPIO_Init+0x2a8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d052      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 8002190:	4a94      	ldr	r2, [pc, #592]	@ (80023e4 <HAL_GPIO_Init+0x2a8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d869      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 8002196:	4a94      	ldr	r2, [pc, #592]	@ (80023e8 <HAL_GPIO_Init+0x2ac>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d04c      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 800219c:	4a92      	ldr	r2, [pc, #584]	@ (80023e8 <HAL_GPIO_Init+0x2ac>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d863      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 80021a2:	4a92      	ldr	r2, [pc, #584]	@ (80023ec <HAL_GPIO_Init+0x2b0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d046      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 80021a8:	4a90      	ldr	r2, [pc, #576]	@ (80023ec <HAL_GPIO_Init+0x2b0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d85d      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d82a      	bhi.n	8002208 <HAL_GPIO_Init+0xcc>
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d859      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 80021b6:	a201      	add	r2, pc, #4	@ (adr r2, 80021bc <HAL_GPIO_Init+0x80>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	08002237 	.word	0x08002237
 80021c0:	08002211 	.word	0x08002211
 80021c4:	08002223 	.word	0x08002223
 80021c8:	08002265 	.word	0x08002265
 80021cc:	0800226b 	.word	0x0800226b
 80021d0:	0800226b 	.word	0x0800226b
 80021d4:	0800226b 	.word	0x0800226b
 80021d8:	0800226b 	.word	0x0800226b
 80021dc:	0800226b 	.word	0x0800226b
 80021e0:	0800226b 	.word	0x0800226b
 80021e4:	0800226b 	.word	0x0800226b
 80021e8:	0800226b 	.word	0x0800226b
 80021ec:	0800226b 	.word	0x0800226b
 80021f0:	0800226b 	.word	0x0800226b
 80021f4:	0800226b 	.word	0x0800226b
 80021f8:	0800226b 	.word	0x0800226b
 80021fc:	0800226b 	.word	0x0800226b
 8002200:	08002219 	.word	0x08002219
 8002204:	0800222d 	.word	0x0800222d
 8002208:	4a79      	ldr	r2, [pc, #484]	@ (80023f0 <HAL_GPIO_Init+0x2b4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800220e:	e02c      	b.n	800226a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e029      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	3304      	adds	r3, #4
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e024      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	3308      	adds	r3, #8
 8002228:	623b      	str	r3, [r7, #32]
          break;
 800222a:	e01f      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	330c      	adds	r3, #12
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e01a      	b.n	800226c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223e:	2304      	movs	r3, #4
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e013      	b.n	800226c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800224c:	2308      	movs	r3, #8
 800224e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	611a      	str	r2, [r3, #16]
          break;
 8002256:	e009      	b.n	800226c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	615a      	str	r2, [r3, #20]
          break;
 8002262:	e003      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x130>
          break;
 800226a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2bff      	cmp	r3, #255	@ 0xff
 8002270:	d801      	bhi.n	8002276 <HAL_GPIO_Init+0x13a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	e001      	b.n	800227a <HAL_GPIO_Init+0x13e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2bff      	cmp	r3, #255	@ 0xff
 8002280:	d802      	bhi.n	8002288 <HAL_GPIO_Init+0x14c>
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	e002      	b.n	800228e <HAL_GPIO_Init+0x152>
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	3b08      	subs	r3, #8
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	210f      	movs	r1, #15
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	401a      	ands	r2, r3
 80022a0:	6a39      	ldr	r1, [r7, #32]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	431a      	orrs	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80b1 	beq.w	800241e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022bc:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_GPIO_Init+0x2b8>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a4c      	ldr	r2, [pc, #304]	@ (80023f4 <HAL_GPIO_Init+0x2b8>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_GPIO_Init+0x2b8>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d4:	4a48      	ldr	r2, [pc, #288]	@ (80023f8 <HAL_GPIO_Init+0x2bc>)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a40      	ldr	r2, [pc, #256]	@ (80023fc <HAL_GPIO_Init+0x2c0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_GPIO_Init+0x1ec>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3f      	ldr	r2, [pc, #252]	@ (8002400 <HAL_GPIO_Init+0x2c4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00d      	beq.n	8002324 <HAL_GPIO_Init+0x1e8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3e      	ldr	r2, [pc, #248]	@ (8002404 <HAL_GPIO_Init+0x2c8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <HAL_GPIO_Init+0x1e4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3d      	ldr	r2, [pc, #244]	@ (8002408 <HAL_GPIO_Init+0x2cc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_GPIO_Init+0x1e0>
 8002318:	2303      	movs	r3, #3
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 800231c:	2304      	movs	r3, #4
 800231e:	e004      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 8002320:	2302      	movs	r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 8002328:	2300      	movs	r3, #0
 800232a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800233a:	492f      	ldr	r1, [pc, #188]	@ (80023f8 <HAL_GPIO_Init+0x2bc>)
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002354:	4b2d      	ldr	r3, [pc, #180]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	492c      	ldr	r1, [pc, #176]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002362:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	4928      	ldr	r1, [pc, #160]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 800236c:	4013      	ands	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800237c:	4b23      	ldr	r3, [pc, #140]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4922      	ldr	r1, [pc, #136]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	43db      	mvns	r3, r3
 8002392:	491e      	ldr	r1, [pc, #120]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 8002394:	4013      	ands	r3, r2
 8002396:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023a4:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4918      	ldr	r1, [pc, #96]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4914      	ldr	r1, [pc, #80]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d021      	beq.n	8002410 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023cc:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	490e      	ldr	r1, [pc, #56]	@ (800240c <HAL_GPIO_Init+0x2d0>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e021      	b.n	800241e <HAL_GPIO_Init+0x2e2>
 80023da:	bf00      	nop
 80023dc:	10320000 	.word	0x10320000
 80023e0:	10310000 	.word	0x10310000
 80023e4:	10220000 	.word	0x10220000
 80023e8:	10210000 	.word	0x10210000
 80023ec:	10120000 	.word	0x10120000
 80023f0:	10110000 	.word	0x10110000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40010800 	.word	0x40010800
 8002400:	40010c00 	.word	0x40010c00
 8002404:	40011000 	.word	0x40011000
 8002408:	40011400 	.word	0x40011400
 800240c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_GPIO_Init+0x304>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	43db      	mvns	r3, r3
 8002418:	4909      	ldr	r1, [pc, #36]	@ (8002440 <HAL_GPIO_Init+0x304>)
 800241a:	4013      	ands	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f ae8e 	bne.w	8002150 <HAL_GPIO_Init+0x14>
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	372c      	adds	r7, #44	@ 0x2c
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	611a      	str	r2, [r3, #16]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800247e:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800248a:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f806 	bl	80024a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40010400 	.word	0x40010400

080024a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_PWR_EnableBkUpAccess+0x14>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	420e0020 	.word	0x420e0020

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e272      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8087 	beq.w	80025fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f0:	4b92      	ldr	r3, [pc, #584]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d00c      	beq.n	8002516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024fc:	4b8f      	ldr	r3, [pc, #572]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d112      	bne.n	800252e <HAL_RCC_OscConfig+0x5e>
 8002508:	4b8c      	ldr	r3, [pc, #560]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002514:	d10b      	bne.n	800252e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	4b89      	ldr	r3, [pc, #548]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d06c      	beq.n	80025fc <HAL_RCC_OscConfig+0x12c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d168      	bne.n	80025fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e24c      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x76>
 8002538:	4b80      	ldr	r3, [pc, #512]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7f      	ldr	r2, [pc, #508]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e02e      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b7b      	ldr	r3, [pc, #492]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7a      	ldr	r2, [pc, #488]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b78      	ldr	r3, [pc, #480]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a77      	ldr	r2, [pc, #476]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0xbc>
 8002572:	4b72      	ldr	r3, [pc, #456]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a71      	ldr	r2, [pc, #452]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6e      	ldr	r2, [pc, #440]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 800258c:	4b6b      	ldr	r3, [pc, #428]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6a      	ldr	r2, [pc, #424]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b68      	ldr	r3, [pc, #416]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a67      	ldr	r2, [pc, #412]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fc8a 	bl	8001ec4 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff fc86 	bl	8001ec4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	@ 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e200      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe4>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7ff fc76 	bl	8001ec4 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff fc72 	bl	8001ec4 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1ec      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b53      	ldr	r3, [pc, #332]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x10c>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d063      	beq.n	80026d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260a:	4b4c      	ldr	r3, [pc, #304]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002616:	4b49      	ldr	r3, [pc, #292]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x18c>
 8002622:	4b46      	ldr	r3, [pc, #280]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x176>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1c0      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4939      	ldr	r1, [pc, #228]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_RCC_OscConfig+0x270>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7ff fc2b 	bl	8001ec4 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7ff fc27 	bl	8001ec4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1a1      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4927      	ldr	r1, [pc, #156]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b26      	ldr	r3, [pc, #152]	@ (8002740 <HAL_RCC_OscConfig+0x270>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fc0a 	bl	8001ec4 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b4:	f7ff fc06 	bl	8001ec4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e180      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d03a      	beq.n	8002754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d019      	beq.n	800271a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff fbea 	bl	8001ec4 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff fbe6 	bl	8001ec4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e160      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002712:	2001      	movs	r0, #1
 8002714:	f000 face 	bl	8002cb4 <RCC_Delay>
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7ff fbd0 	bl	8001ec4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002726:	e00f      	b.n	8002748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7ff fbcc 	bl	8001ec4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d908      	bls.n	8002748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e146      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	42420000 	.word	0x42420000
 8002744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	4b92      	ldr	r3, [pc, #584]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e9      	bne.n	8002728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a6 	beq.w	80028ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b8b      	ldr	r3, [pc, #556]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b88      	ldr	r3, [pc, #544]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a87      	ldr	r2, [pc, #540]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277c:	61d3      	str	r3, [r2, #28]
 800277e:	4b85      	ldr	r3, [pc, #532]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b82      	ldr	r3, [pc, #520]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b7f      	ldr	r3, [pc, #508]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7e      	ldr	r2, [pc, #504]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7ff fb8d 	bl	8001ec4 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7ff fb89 	bl	8001ec4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	@ 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e103      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b75      	ldr	r3, [pc, #468]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x312>
 80027d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e02d      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x334>
 80027ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a69      	ldr	r2, [pc, #420]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a66      	ldr	r2, [pc, #408]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	e01c      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x356>
 800280c:	4b61      	ldr	r3, [pc, #388]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a60      	ldr	r2, [pc, #384]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	4b5e      	ldr	r3, [pc, #376]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a5d      	ldr	r2, [pc, #372]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 8002826:	4b5b      	ldr	r3, [pc, #364]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a5a      	ldr	r2, [pc, #360]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6213      	str	r3, [r2, #32]
 8002832:	4b58      	ldr	r3, [pc, #352]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a57      	ldr	r2, [pc, #348]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7ff fb3d 	bl	8001ec4 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7ff fb39 	bl	8001ec4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0b1      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	4b4b      	ldr	r3, [pc, #300]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ee      	beq.n	800284e <HAL_RCC_OscConfig+0x37e>
 8002870:	e014      	b.n	800289c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7ff fb27 	bl	8001ec4 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7ff fb23 	bl	8001ec4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e09b      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	4b40      	ldr	r3, [pc, #256]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ee      	bne.n	800287a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d061      	beq.n	8002988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d146      	bne.n	800295a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b33      	ldr	r3, [pc, #204]	@ (800299c <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7ff faf7 	bl	8001ec4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7ff faf3 	bl	8001ec4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e06d      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4921      	ldr	r1, [pc, #132]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002914:	4b1f      	ldr	r3, [pc, #124]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a19      	ldr	r1, [r3, #32]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	430b      	orrs	r3, r1
 8002926:	491b      	ldr	r1, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x4cc>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7ff fac7 	bl	8001ec4 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7ff fac3 	bl	8001ec4 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e03d      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x46a>
 8002958:	e035      	b.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_RCC_OscConfig+0x4cc>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff fab0 	bl	8001ec4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7ff faac 	bl	8001ec4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e026      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x498>
 8002986:	e01e      	b.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e019      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_OscConfig+0x500>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4965      	ldr	r1, [pc, #404]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a58      	ldr	r2, [pc, #352]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac4:	f7ff f9fe 	bl	8001ec4 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7ff f9fa 	bl	8001ec4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4922      	ldr	r1, [pc, #136]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f95c 	bl	8001e40 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	080091f4 	.word	0x080091f4
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x36>
 8002bd6:	e027      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bda:	613b      	str	r3, [r7, #16]
      break;
 8002bdc:	e027      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bf6:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e004      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	613b      	str	r3, [r7, #16]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	613b      	str	r3, [r7, #16]
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	693b      	ldr	r3, [r7, #16]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	007a1200 	.word	0x007a1200
 8002c44:	0800920c 	.word	0x0800920c
 8002c48:	0800921c 	.word	0x0800921c
 8002c4c:	003d0900 	.word	0x003d0900

08002c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c54:	4b02      	ldr	r3, [pc, #8]	@ (8002c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000008 	.word	0x20000008

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff2 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	@ (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08009204 	.word	0x08009204

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffde 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0adb      	lsrs	r3, r3, #11
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	@ (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08009204 	.word	0x08009204

08002cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <RCC_Delay+0x34>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <RCC_Delay+0x38>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a5b      	lsrs	r3, r3, #9
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cd0:	bf00      	nop
  }
  while (Delay --);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	60fa      	str	r2, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <RCC_Delay+0x1c>
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d07d      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d10:	4b4f      	ldr	r3, [pc, #316]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a4b      	ldr	r2, [pc, #300]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	61d3      	str	r3, [r2, #28]
 8002d28:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b46      	ldr	r3, [pc, #280]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d118      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d44:	4b43      	ldr	r3, [pc, #268]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a42      	ldr	r2, [pc, #264]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d50:	f7ff f8b8 	bl	8001ec4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	e008      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7ff f8b4 	bl	8001ec4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e06d      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d76:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02e      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d027      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d94:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002daa:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d014      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7ff f883 	bl	8001ec4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7ff f87f 	bl	8001ec4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e036      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4917      	ldr	r1, [pc, #92]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e14:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	490b      	ldr	r1, [pc, #44]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e32:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4904      	ldr	r1, [pc, #16]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42420440 	.word	0x42420440

08002e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	f200 808a 	bhi.w	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d045      	beq.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d075      	beq.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e92:	e082      	b.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e94:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e9a:	4b45      	ldr	r3, [pc, #276]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d07b      	beq.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0c9b      	lsrs	r3, r3, #18
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	4a41      	ldr	r2, [pc, #260]	@ (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d015      	beq.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0c5b      	lsrs	r3, r3, #17
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ed8:	4a38      	ldr	r2, [pc, #224]	@ (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e004      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f00:	d102      	bne.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	61bb      	str	r3, [r7, #24]
      break;
 8002f06:	e04a      	b.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
      break;
 8002f16:	e042      	b.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002f18:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f28:	d108      	bne.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e01f      	b.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f46:	d109      	bne.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002f48:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002f54:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e00f      	b.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f66:	d11c      	bne.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f74:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f78:	61bb      	str	r3, [r7, #24]
      break;
 8002f7a:	e012      	b.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f7e:	f7ff fe85 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0b9b      	lsrs	r3, r3, #14
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	61bb      	str	r3, [r7, #24]
      break;
 8002f98:	e004      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e002      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002fa2:	bf00      	nop
    }
  }
  return (frequency);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08009220 	.word	0x08009220
 8002fb8:	08009230 	.word	0x08009230
 8002fbc:	007a1200 	.word	0x007a1200
 8002fc0:	003d0900 	.word	0x003d0900
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab

08002fc8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07a      	b.n	80030d4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7c5b      	ldrb	r3, [r3, #17]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe fd2c 	bl	8001a4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8a3 	bl	8003146 <HAL_RTC_WaitForSynchro>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d004      	beq.n	8003010 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e061      	b.n	80030d4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f8c5 	bl	80031a0 <RTC_EnterInitMode>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2204      	movs	r2, #4
 8003020:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e056      	b.n	80030d4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0207 	bic.w	r2, r2, #7
 8003034:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800303e:	4b27      	ldr	r3, [pc, #156]	@ (80030dc <HAL_RTC_Init+0x114>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4a26      	ldr	r2, [pc, #152]	@ (80030dc <HAL_RTC_Init+0x114>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RTC_Init+0x114>)
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4921      	ldr	r1, [pc, #132]	@ (80030dc <HAL_RTC_Init+0x114>)
 8003058:	4313      	orrs	r3, r2
 800305a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d003      	beq.n	800306e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e00e      	b.n	800308c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800306e:	2001      	movs	r0, #1
 8003070:	f7ff fef4 	bl	8002e5c <HAL_RCCEx_GetPeriphCLKFreq>
 8003074:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2204      	movs	r2, #4
 8003080:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e026      	b.n	80030d4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	0c1a      	lsrs	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f002 020f 	and.w	r2, r2, #15
 8003098:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	b292      	uxth	r2, r2
 80030a2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8a3 	bl	80031f0 <RTC_ExitInitMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2204      	movs	r2, #4
 80030b4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00c      	b.n	80030d4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40006c00 	.word	0x40006c00

080030e0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f815 	bl	8003134 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0202 	bic.w	r2, r2, #2
 8003118:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800311a:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RTC_AlarmIRQHandler+0x50>)
 800311c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003120:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	745a      	strb	r2, [r3, #17]
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40010400 	.word	0x40010400

08003134 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e01d      	b.n	8003198 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0208 	bic.w	r2, r2, #8
 800316a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800316c:	f7fe feaa 	bl	8001ec4 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003172:	e009      	b.n	8003188 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003174:	f7fe fea6 	bl	8001ec4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003182:	d901      	bls.n	8003188 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e007      	b.n	8003198 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ee      	beq.n	8003174 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80031ac:	f7fe fe8a 	bl	8001ec4 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031b2:	e009      	b.n	80031c8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80031b4:	f7fe fe86 	bl	8001ec4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031c2:	d901      	bls.n	80031c8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e00f      	b.n	80031e8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0210 	orr.w	r2, r2, #16
 80031e4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0210 	bic.w	r2, r2, #16
 800320a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800320c:	f7fe fe5a 	bl	8001ec4 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003212:	e009      	b.n	8003228 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003214:	f7fe fe56 	bl	8001ec4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003222:	d901      	bls.n	8003228 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e007      	b.n	8003238 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0ee      	beq.n	8003214 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d027      	beq.n	80032a6 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f824 	bl	80032c0 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0204 	mvn.w	r2, #4
 8003280:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	745a      	strb	r2, [r3, #17]
 8003288:	e005      	b.n	8003296 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f80f 	bl	80032ae <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	605a      	str	r2, [r3, #4]
    }
  }
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e076      	b.n	80033d2 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032f4:	d009      	beq.n	800330a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	61da      	str	r2, [r3, #28]
 80032fc:	e005      	b.n	800330a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fe fbc5 	bl	8001ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003340:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338e:	ea42 0103 	orr.w	r1, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	0c1a      	lsrs	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f002 0204 	and.w	r2, r2, #4
 80033b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b088      	sub	sp, #32
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ea:	f7fe fd6b 	bl	8001ec4 <HAL_GetTick>
 80033ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d001      	beq.n	8003404 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
 8003402:	e12a      	b.n	800365a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_SPI_Transmit+0x36>
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e122      	b.n	800365a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_SPI_Transmit+0x48>
 800341e:	2302      	movs	r3, #2
 8003420:	e11b      	b.n	800365a <HAL_SPI_Transmit+0x280>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2203      	movs	r2, #3
 800342e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003470:	d10f      	bne.n	8003492 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003490:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d007      	beq.n	80034b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b8:	d152      	bne.n	8003560 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_SPI_Transmit+0xee>
 80034c2:	8b7b      	ldrh	r3, [r7, #26]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d145      	bne.n	8003554 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034ec:	e032      	b.n	8003554 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d112      	bne.n	8003522 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003520:	e018      	b.n	8003554 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003522:	f7fe fccf 	bl	8001ec4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d803      	bhi.n	800353a <HAL_SPI_Transmit+0x160>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d102      	bne.n	8003540 <HAL_SPI_Transmit+0x166>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e082      	b.n	800365a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1c7      	bne.n	80034ee <HAL_SPI_Transmit+0x114>
 800355e:	e053      	b.n	8003608 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_SPI_Transmit+0x194>
 8003568:	8b7b      	ldrh	r3, [r7, #26]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d147      	bne.n	80035fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003594:	e033      	b.n	80035fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d113      	bne.n	80035cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035ca:	e018      	b.n	80035fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035cc:	f7fe fc7a 	bl	8001ec4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d803      	bhi.n	80035e4 <HAL_SPI_Transmit+0x20a>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d102      	bne.n	80035ea <HAL_SPI_Transmit+0x210>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e02d      	b.n	800365a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1c6      	bne.n	8003596 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	6839      	ldr	r1, [r7, #0]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fbd1 	bl	8003db4 <SPI_EndRxTxTransaction>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003658:	2300      	movs	r3, #0
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b088      	sub	sp, #32
 8003666:	af02      	add	r7, sp, #8
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	e104      	b.n	800388c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800368a:	d112      	bne.n	80036b2 <HAL_SPI_Receive+0x50>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10e      	bne.n	80036b2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2204      	movs	r2, #4
 8003698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f8f3 	bl	8003894 <HAL_SPI_TransmitReceive>
 80036ae:	4603      	mov	r3, r0
 80036b0:	e0ec      	b.n	800388c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b2:	f7fe fc07 	bl	8001ec4 <HAL_GetTick>
 80036b6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_SPI_Receive+0x62>
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0e1      	b.n	800388c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_SPI_Receive+0x74>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0da      	b.n	800388c <HAL_SPI_Receive+0x22a>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2204      	movs	r2, #4
 80036e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003724:	d10f      	bne.n	8003746 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d007      	beq.n	8003764 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d170      	bne.n	800384e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800376c:	e035      	b.n	80037da <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d115      	bne.n	80037a8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f103 020c 	add.w	r2, r3, #12
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037a6:	e018      	b.n	80037da <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a8:	f7fe fb8c 	bl	8001ec4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d803      	bhi.n	80037c0 <HAL_SPI_Receive+0x15e>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d102      	bne.n	80037c6 <HAL_SPI_Receive+0x164>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e058      	b.n	800388c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1c4      	bne.n	800376e <HAL_SPI_Receive+0x10c>
 80037e4:	e038      	b.n	8003858 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d113      	bne.n	800381c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fe:	b292      	uxth	r2, r2
 8003800:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	1c9a      	adds	r2, r3, #2
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800381a:	e018      	b.n	800384e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381c:	f7fe fb52 	bl	8001ec4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d803      	bhi.n	8003834 <HAL_SPI_Receive+0x1d2>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d102      	bne.n	800383a <HAL_SPI_Receive+0x1d8>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e01e      	b.n	800388c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1c6      	bne.n	80037e6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fa57 	bl	8003d10 <SPI_EndRxTransaction>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800388a:	2300      	movs	r3, #0
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038a2:	2301      	movs	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a6:	f7fe fb0d 	bl	8001ec4 <HAL_GetTick>
 80038aa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038b2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d00c      	beq.n	80038de <HAL_SPI_TransmitReceive+0x4a>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ca:	d106      	bne.n	80038da <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <HAL_SPI_TransmitReceive+0x46>
 80038d4:	7ffb      	ldrb	r3, [r7, #31]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d001      	beq.n	80038de <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	e17f      	b.n	8003bde <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x5c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x5c>
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e174      	b.n	8003bde <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x6e>
 80038fe:	2302      	movs	r3, #2
 8003900:	e16d      	b.n	8003bde <HAL_SPI_TransmitReceive+0x34a>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b04      	cmp	r3, #4
 8003914:	d003      	beq.n	800391e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2205      	movs	r2, #5
 800391a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	887a      	ldrh	r2, [r7, #2]
 800392e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395e:	2b40      	cmp	r3, #64	@ 0x40
 8003960:	d007      	beq.n	8003972 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397a:	d17e      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_SPI_TransmitReceive+0xf6>
 8003984:	8afb      	ldrh	r3, [r7, #22]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d16c      	bne.n	8003a64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	e059      	b.n	8003a64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d11b      	bne.n	80039f6 <HAL_SPI_TransmitReceive+0x162>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d016      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x162>
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d113      	bne.n	80039f6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d119      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x1a4>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d014      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a34:	2301      	movs	r3, #1
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a38:	f7fe fa44 	bl	8001ec4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d80d      	bhi.n	8003a64 <HAL_SPI_TransmitReceive+0x1d0>
 8003a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d009      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0bc      	b.n	8003bde <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1a0      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x11c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d19b      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x11c>
 8003a78:	e082      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x1f4>
 8003a82:	8afb      	ldrh	r3, [r7, #22]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d171      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aae:	e05d      	b.n	8003b6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d11c      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x264>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x264>
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d114      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	7812      	ldrb	r2, [r2, #0]
 8003ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d119      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x2a6>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d014      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b36:	2301      	movs	r3, #1
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b3a:	f7fe f9c3 	bl	8001ec4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d803      	bhi.n	8003b52 <HAL_SPI_TransmitReceive+0x2be>
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_TransmitReceive+0x2c4>
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e038      	b.n	8003bde <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d19c      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x21c>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d197      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f915 	bl	8003db4 <SPI_EndRxTxTransaction>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e01d      	b.n	8003bde <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	@ 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bf4:	b2db      	uxtb	r3, r3
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c10:	f7fe f958 	bl	8001ec4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c20:	f7fe f950 	bl	8001ec4 <HAL_GetTick>
 8003c24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c26:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	0d1b      	lsrs	r3, r3, #20
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c36:	e054      	b.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d050      	beq.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c40:	f7fe f940 	bl	8001ec4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d902      	bls.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d13d      	bne.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c6e:	d111      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c78:	d004      	beq.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c82:	d107      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9c:	d10f      	bne.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e017      	b.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d19b      	bne.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000008 	.word	0x20000008

08003d10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d24:	d111      	bne.n	8003d4a <SPI_EndRxTransaction+0x3a>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d2e:	d004      	beq.n	8003d3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d38:	d107      	bne.n	8003d4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d48:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d52:	d117      	bne.n	8003d84 <SPI_EndRxTransaction+0x74>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	d112      	bne.n	8003d84 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2101      	movs	r1, #1
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff ff49 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01a      	beq.n	8003daa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e013      	b.n	8003dac <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2180      	movs	r1, #128	@ 0x80
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7ff ff36 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e000      	b.n	8003dac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	2102      	movs	r1, #2
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff ff18 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e013      	b.n	8003e0e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2180      	movs	r1, #128	@ 0x80
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7ff ff05 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e000      	b.n	8003e0e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e042      	b.n	8003eae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fd fe83 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2224      	movs	r2, #36	@ 0x24
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f972 	bl	8004144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b08a      	sub	sp, #40	@ 0x28
 8003eba:	af02      	add	r7, sp, #8
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d175      	bne.n	8003fc2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_UART_Transmit+0x2c>
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06e      	b.n	8003fc4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2221      	movs	r2, #33	@ 0x21
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd ffe6 	bl	8001ec4 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0e:	d108      	bne.n	8003f22 <HAL_UART_Transmit+0x6c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e003      	b.n	8003f2a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f2a:	e02e      	b.n	8003f8a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2180      	movs	r1, #128	@ 0x80
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f848 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e03a      	b.n	8003fc4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f62:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	3302      	adds	r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e007      	b.n	8003f7c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1cb      	bne.n	8003f2c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2140      	movs	r1, #64	@ 0x40
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f814 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e006      	b.n	8003fc4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	e03b      	b.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d037      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fd ff6d 	bl	8001ec4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e03a      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d023      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b80      	cmp	r3, #128	@ 0x80
 8004012:	d020      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d01d      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d116      	bne.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f81d 	bl	800407e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2208      	movs	r2, #8
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e00f      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d0b4      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407e:	b480      	push	{r7}
 8004080:	b095      	sub	sp, #84	@ 0x54
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d119      	bne.n	800412a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	60bb      	str	r3, [r7, #8]
   return(result);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0310 	bic.w	r3, r3, #16
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004116:	61ba      	str	r2, [r7, #24]
 8004118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	613b      	str	r3, [r7, #16]
   return(result);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004138:	bf00      	nop
 800413a:	3754      	adds	r7, #84	@ 0x54
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
	...

08004144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800417e:	f023 030c 	bic.w	r3, r3, #12
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	430b      	orrs	r3, r1
 800418a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004258 <UART_SetConfig+0x114>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041ac:	f7fe fd6e 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	e002      	b.n	80041ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7fe fd56 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 80041b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009a      	lsls	r2, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	4a22      	ldr	r2, [pc, #136]	@ (800425c <UART_SetConfig+0x118>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	0119      	lsls	r1, r3, #4
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009a      	lsls	r2, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f0:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <UART_SetConfig+0x118>)
 80041f2:	fba3 0302 	umull	r0, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2064      	movs	r0, #100	@ 0x64
 80041fa:	fb00 f303 	mul.w	r3, r0, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	3332      	adds	r3, #50	@ 0x32
 8004204:	4a15      	ldr	r2, [pc, #84]	@ (800425c <UART_SetConfig+0x118>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004210:	4419      	add	r1, r3
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <UART_SetConfig+0x118>)
 800422a:	fba3 0302 	umull	r0, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2064      	movs	r0, #100	@ 0x64
 8004232:	fb00 f303 	mul.w	r3, r0, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	3332      	adds	r3, #50	@ 0x32
 800423c:	4a07      	ldr	r2, [pc, #28]	@ (800425c <UART_SetConfig+0x118>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	440a      	add	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40013800 	.word	0x40013800
 800425c:	51eb851f 	.word	0x51eb851f

08004260 <__cvt>:
 8004260:	2b00      	cmp	r3, #0
 8004262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004266:	461d      	mov	r5, r3
 8004268:	bfbb      	ittet	lt
 800426a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800426e:	461d      	movlt	r5, r3
 8004270:	2300      	movge	r3, #0
 8004272:	232d      	movlt	r3, #45	@ 0x2d
 8004274:	b088      	sub	sp, #32
 8004276:	4614      	mov	r4, r2
 8004278:	bfb8      	it	lt
 800427a:	4614      	movlt	r4, r2
 800427c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800427e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004280:	7013      	strb	r3, [r2, #0]
 8004282:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004284:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004288:	f023 0820 	bic.w	r8, r3, #32
 800428c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004290:	d005      	beq.n	800429e <__cvt+0x3e>
 8004292:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004296:	d100      	bne.n	800429a <__cvt+0x3a>
 8004298:	3601      	adds	r6, #1
 800429a:	2302      	movs	r3, #2
 800429c:	e000      	b.n	80042a0 <__cvt+0x40>
 800429e:	2303      	movs	r3, #3
 80042a0:	aa07      	add	r2, sp, #28
 80042a2:	9204      	str	r2, [sp, #16]
 80042a4:	aa06      	add	r2, sp, #24
 80042a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042aa:	e9cd 3600 	strd	r3, r6, [sp]
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	f001 f8c1 	bl	8005438 <_dtoa_r>
 80042b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80042ba:	4607      	mov	r7, r0
 80042bc:	d119      	bne.n	80042f2 <__cvt+0x92>
 80042be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80042c0:	07db      	lsls	r3, r3, #31
 80042c2:	d50e      	bpl.n	80042e2 <__cvt+0x82>
 80042c4:	eb00 0906 	add.w	r9, r0, r6
 80042c8:	2200      	movs	r2, #0
 80042ca:	2300      	movs	r3, #0
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fc fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80042d4:	b108      	cbz	r0, 80042da <__cvt+0x7a>
 80042d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80042da:	2230      	movs	r2, #48	@ 0x30
 80042dc:	9b07      	ldr	r3, [sp, #28]
 80042de:	454b      	cmp	r3, r9
 80042e0:	d31e      	bcc.n	8004320 <__cvt+0xc0>
 80042e2:	4638      	mov	r0, r7
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80042e8:	1bdb      	subs	r3, r3, r7
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	b008      	add	sp, #32
 80042ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042f6:	eb00 0906 	add.w	r9, r0, r6
 80042fa:	d1e5      	bne.n	80042c8 <__cvt+0x68>
 80042fc:	7803      	ldrb	r3, [r0, #0]
 80042fe:	2b30      	cmp	r3, #48	@ 0x30
 8004300:	d10a      	bne.n	8004318 <__cvt+0xb8>
 8004302:	2200      	movs	r2, #0
 8004304:	2300      	movs	r3, #0
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fc fb4d 	bl	80009a8 <__aeabi_dcmpeq>
 800430e:	b918      	cbnz	r0, 8004318 <__cvt+0xb8>
 8004310:	f1c6 0601 	rsb	r6, r6, #1
 8004314:	f8ca 6000 	str.w	r6, [sl]
 8004318:	f8da 3000 	ldr.w	r3, [sl]
 800431c:	4499      	add	r9, r3
 800431e:	e7d3      	b.n	80042c8 <__cvt+0x68>
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	9107      	str	r1, [sp, #28]
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e7d9      	b.n	80042dc <__cvt+0x7c>

08004328 <__exponent>:
 8004328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800432a:	2900      	cmp	r1, #0
 800432c:	bfb6      	itet	lt
 800432e:	232d      	movlt	r3, #45	@ 0x2d
 8004330:	232b      	movge	r3, #43	@ 0x2b
 8004332:	4249      	neglt	r1, r1
 8004334:	2909      	cmp	r1, #9
 8004336:	7002      	strb	r2, [r0, #0]
 8004338:	7043      	strb	r3, [r0, #1]
 800433a:	dd29      	ble.n	8004390 <__exponent+0x68>
 800433c:	f10d 0307 	add.w	r3, sp, #7
 8004340:	461d      	mov	r5, r3
 8004342:	270a      	movs	r7, #10
 8004344:	fbb1 f6f7 	udiv	r6, r1, r7
 8004348:	461a      	mov	r2, r3
 800434a:	fb07 1416 	mls	r4, r7, r6, r1
 800434e:	3430      	adds	r4, #48	@ 0x30
 8004350:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004354:	460c      	mov	r4, r1
 8004356:	2c63      	cmp	r4, #99	@ 0x63
 8004358:	4631      	mov	r1, r6
 800435a:	f103 33ff 	add.w	r3, r3, #4294967295
 800435e:	dcf1      	bgt.n	8004344 <__exponent+0x1c>
 8004360:	3130      	adds	r1, #48	@ 0x30
 8004362:	1e94      	subs	r4, r2, #2
 8004364:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004368:	4623      	mov	r3, r4
 800436a:	1c41      	adds	r1, r0, #1
 800436c:	42ab      	cmp	r3, r5
 800436e:	d30a      	bcc.n	8004386 <__exponent+0x5e>
 8004370:	f10d 0309 	add.w	r3, sp, #9
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	42ac      	cmp	r4, r5
 8004378:	bf88      	it	hi
 800437a:	2300      	movhi	r3, #0
 800437c:	3302      	adds	r3, #2
 800437e:	4403      	add	r3, r0
 8004380:	1a18      	subs	r0, r3, r0
 8004382:	b003      	add	sp, #12
 8004384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004386:	f813 6b01 	ldrb.w	r6, [r3], #1
 800438a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800438e:	e7ed      	b.n	800436c <__exponent+0x44>
 8004390:	2330      	movs	r3, #48	@ 0x30
 8004392:	3130      	adds	r1, #48	@ 0x30
 8004394:	7083      	strb	r3, [r0, #2]
 8004396:	70c1      	strb	r1, [r0, #3]
 8004398:	1d03      	adds	r3, r0, #4
 800439a:	e7f1      	b.n	8004380 <__exponent+0x58>

0800439c <_printf_float>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	b091      	sub	sp, #68	@ 0x44
 80043a2:	460c      	mov	r4, r1
 80043a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80043a8:	4616      	mov	r6, r2
 80043aa:	461f      	mov	r7, r3
 80043ac:	4605      	mov	r5, r0
 80043ae:	f000 ff2f 	bl	8005210 <_localeconv_r>
 80043b2:	6803      	ldr	r3, [r0, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	9308      	str	r3, [sp, #32]
 80043b8:	f7fb feca 	bl	8000150 <strlen>
 80043bc:	2300      	movs	r3, #0
 80043be:	930e      	str	r3, [sp, #56]	@ 0x38
 80043c0:	f8d8 3000 	ldr.w	r3, [r8]
 80043c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80043c6:	3307      	adds	r3, #7
 80043c8:	f023 0307 	bic.w	r3, r3, #7
 80043cc:	f103 0208 	add.w	r2, r3, #8
 80043d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043d4:	f8d4 b000 	ldr.w	fp, [r4]
 80043d8:	f8c8 2000 	str.w	r2, [r8]
 80043dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80043e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80043ea:	f04f 32ff 	mov.w	r2, #4294967295
 80043ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80043f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80043f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004668 <_printf_float+0x2cc>)
 80043f8:	f7fc fb08 	bl	8000a0c <__aeabi_dcmpun>
 80043fc:	bb70      	cbnz	r0, 800445c <_printf_float+0xc0>
 80043fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	4b98      	ldr	r3, [pc, #608]	@ (8004668 <_printf_float+0x2cc>)
 8004408:	f7fc fae2 	bl	80009d0 <__aeabi_dcmple>
 800440c:	bb30      	cbnz	r0, 800445c <_printf_float+0xc0>
 800440e:	2200      	movs	r2, #0
 8004410:	2300      	movs	r3, #0
 8004412:	4640      	mov	r0, r8
 8004414:	4649      	mov	r1, r9
 8004416:	f7fc fad1 	bl	80009bc <__aeabi_dcmplt>
 800441a:	b110      	cbz	r0, 8004422 <_printf_float+0x86>
 800441c:	232d      	movs	r3, #45	@ 0x2d
 800441e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004422:	4a92      	ldr	r2, [pc, #584]	@ (800466c <_printf_float+0x2d0>)
 8004424:	4b92      	ldr	r3, [pc, #584]	@ (8004670 <_printf_float+0x2d4>)
 8004426:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800442a:	bf94      	ite	ls
 800442c:	4690      	movls	r8, r2
 800442e:	4698      	movhi	r8, r3
 8004430:	2303      	movs	r3, #3
 8004432:	f04f 0900 	mov.w	r9, #0
 8004436:	6123      	str	r3, [r4, #16]
 8004438:	f02b 0304 	bic.w	r3, fp, #4
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	4633      	mov	r3, r6
 8004440:	4621      	mov	r1, r4
 8004442:	4628      	mov	r0, r5
 8004444:	9700      	str	r7, [sp, #0]
 8004446:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004448:	f000 f9d4 	bl	80047f4 <_printf_common>
 800444c:	3001      	adds	r0, #1
 800444e:	f040 8090 	bne.w	8004572 <_printf_float+0x1d6>
 8004452:	f04f 30ff 	mov.w	r0, #4294967295
 8004456:	b011      	add	sp, #68	@ 0x44
 8004458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	4640      	mov	r0, r8
 8004462:	4649      	mov	r1, r9
 8004464:	f7fc fad2 	bl	8000a0c <__aeabi_dcmpun>
 8004468:	b148      	cbz	r0, 800447e <_printf_float+0xe2>
 800446a:	464b      	mov	r3, r9
 800446c:	2b00      	cmp	r3, #0
 800446e:	bfb8      	it	lt
 8004470:	232d      	movlt	r3, #45	@ 0x2d
 8004472:	4a80      	ldr	r2, [pc, #512]	@ (8004674 <_printf_float+0x2d8>)
 8004474:	bfb8      	it	lt
 8004476:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800447a:	4b7f      	ldr	r3, [pc, #508]	@ (8004678 <_printf_float+0x2dc>)
 800447c:	e7d3      	b.n	8004426 <_printf_float+0x8a>
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	d13f      	bne.n	8004508 <_printf_float+0x16c>
 8004488:	2306      	movs	r3, #6
 800448a:	6063      	str	r3, [r4, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	9206      	str	r2, [sp, #24]
 8004496:	aa0e      	add	r2, sp, #56	@ 0x38
 8004498:	e9cd a204 	strd	sl, r2, [sp, #16]
 800449c:	aa0d      	add	r2, sp, #52	@ 0x34
 800449e:	9203      	str	r2, [sp, #12]
 80044a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80044a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	4642      	mov	r2, r8
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	4628      	mov	r0, r5
 80044b0:	464b      	mov	r3, r9
 80044b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80044b4:	f7ff fed4 	bl	8004260 <__cvt>
 80044b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80044ba:	4680      	mov	r8, r0
 80044bc:	2947      	cmp	r1, #71	@ 0x47
 80044be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80044c0:	d128      	bne.n	8004514 <_printf_float+0x178>
 80044c2:	1cc8      	adds	r0, r1, #3
 80044c4:	db02      	blt.n	80044cc <_printf_float+0x130>
 80044c6:	6863      	ldr	r3, [r4, #4]
 80044c8:	4299      	cmp	r1, r3
 80044ca:	dd40      	ble.n	800454e <_printf_float+0x1b2>
 80044cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80044d0:	fa5f fa8a 	uxtb.w	sl, sl
 80044d4:	4652      	mov	r2, sl
 80044d6:	3901      	subs	r1, #1
 80044d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80044dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80044de:	f7ff ff23 	bl	8004328 <__exponent>
 80044e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80044e4:	4681      	mov	r9, r0
 80044e6:	1813      	adds	r3, r2, r0
 80044e8:	2a01      	cmp	r2, #1
 80044ea:	6123      	str	r3, [r4, #16]
 80044ec:	dc02      	bgt.n	80044f4 <_printf_float+0x158>
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	07d2      	lsls	r2, r2, #31
 80044f2:	d501      	bpl.n	80044f8 <_printf_float+0x15c>
 80044f4:	3301      	adds	r3, #1
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d09e      	beq.n	800443e <_printf_float+0xa2>
 8004500:	232d      	movs	r3, #45	@ 0x2d
 8004502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004506:	e79a      	b.n	800443e <_printf_float+0xa2>
 8004508:	2947      	cmp	r1, #71	@ 0x47
 800450a:	d1bf      	bne.n	800448c <_printf_float+0xf0>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1bd      	bne.n	800448c <_printf_float+0xf0>
 8004510:	2301      	movs	r3, #1
 8004512:	e7ba      	b.n	800448a <_printf_float+0xee>
 8004514:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004518:	d9dc      	bls.n	80044d4 <_printf_float+0x138>
 800451a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800451e:	d118      	bne.n	8004552 <_printf_float+0x1b6>
 8004520:	2900      	cmp	r1, #0
 8004522:	6863      	ldr	r3, [r4, #4]
 8004524:	dd0b      	ble.n	800453e <_printf_float+0x1a2>
 8004526:	6121      	str	r1, [r4, #16]
 8004528:	b913      	cbnz	r3, 8004530 <_printf_float+0x194>
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	07d0      	lsls	r0, r2, #31
 800452e:	d502      	bpl.n	8004536 <_printf_float+0x19a>
 8004530:	3301      	adds	r3, #1
 8004532:	440b      	add	r3, r1
 8004534:	6123      	str	r3, [r4, #16]
 8004536:	f04f 0900 	mov.w	r9, #0
 800453a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800453c:	e7dc      	b.n	80044f8 <_printf_float+0x15c>
 800453e:	b913      	cbnz	r3, 8004546 <_printf_float+0x1aa>
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	07d2      	lsls	r2, r2, #31
 8004544:	d501      	bpl.n	800454a <_printf_float+0x1ae>
 8004546:	3302      	adds	r3, #2
 8004548:	e7f4      	b.n	8004534 <_printf_float+0x198>
 800454a:	2301      	movs	r3, #1
 800454c:	e7f2      	b.n	8004534 <_printf_float+0x198>
 800454e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004554:	4299      	cmp	r1, r3
 8004556:	db05      	blt.n	8004564 <_printf_float+0x1c8>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	6121      	str	r1, [r4, #16]
 800455c:	07d8      	lsls	r0, r3, #31
 800455e:	d5ea      	bpl.n	8004536 <_printf_float+0x19a>
 8004560:	1c4b      	adds	r3, r1, #1
 8004562:	e7e7      	b.n	8004534 <_printf_float+0x198>
 8004564:	2900      	cmp	r1, #0
 8004566:	bfcc      	ite	gt
 8004568:	2201      	movgt	r2, #1
 800456a:	f1c1 0202 	rsble	r2, r1, #2
 800456e:	4413      	add	r3, r2
 8004570:	e7e0      	b.n	8004534 <_printf_float+0x198>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	055a      	lsls	r2, r3, #21
 8004576:	d407      	bmi.n	8004588 <_printf_float+0x1ec>
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	4642      	mov	r2, r8
 800457c:	4631      	mov	r1, r6
 800457e:	4628      	mov	r0, r5
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	d12b      	bne.n	80045de <_printf_float+0x242>
 8004586:	e764      	b.n	8004452 <_printf_float+0xb6>
 8004588:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800458c:	f240 80dc 	bls.w	8004748 <_printf_float+0x3ac>
 8004590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004594:	2200      	movs	r2, #0
 8004596:	2300      	movs	r3, #0
 8004598:	f7fc fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800459c:	2800      	cmp	r0, #0
 800459e:	d033      	beq.n	8004608 <_printf_float+0x26c>
 80045a0:	2301      	movs	r3, #1
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	4a35      	ldr	r2, [pc, #212]	@ (800467c <_printf_float+0x2e0>)
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f af51 	beq.w	8004452 <_printf_float+0xb6>
 80045b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80045b4:	4543      	cmp	r3, r8
 80045b6:	db02      	blt.n	80045be <_printf_float+0x222>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	07d8      	lsls	r0, r3, #31
 80045bc:	d50f      	bpl.n	80045de <_printf_float+0x242>
 80045be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b8      	blx	r7
 80045c8:	3001      	adds	r0, #1
 80045ca:	f43f af42 	beq.w	8004452 <_printf_float+0xb6>
 80045ce:	f04f 0900 	mov.w	r9, #0
 80045d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80045d6:	f104 0a1a 	add.w	sl, r4, #26
 80045da:	45c8      	cmp	r8, r9
 80045dc:	dc09      	bgt.n	80045f2 <_printf_float+0x256>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	079b      	lsls	r3, r3, #30
 80045e2:	f100 8102 	bmi.w	80047ea <_printf_float+0x44e>
 80045e6:	68e0      	ldr	r0, [r4, #12]
 80045e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045ea:	4298      	cmp	r0, r3
 80045ec:	bfb8      	it	lt
 80045ee:	4618      	movlt	r0, r3
 80045f0:	e731      	b.n	8004456 <_printf_float+0xba>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4652      	mov	r2, sl
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	f43f af28 	beq.w	8004452 <_printf_float+0xb6>
 8004602:	f109 0901 	add.w	r9, r9, #1
 8004606:	e7e8      	b.n	80045da <_printf_float+0x23e>
 8004608:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800460a:	2b00      	cmp	r3, #0
 800460c:	dc38      	bgt.n	8004680 <_printf_float+0x2e4>
 800460e:	2301      	movs	r3, #1
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	4a19      	ldr	r2, [pc, #100]	@ (800467c <_printf_float+0x2e0>)
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f af1a 	beq.w	8004452 <_printf_float+0xb6>
 800461e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004622:	ea59 0303 	orrs.w	r3, r9, r3
 8004626:	d102      	bne.n	800462e <_printf_float+0x292>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07d9      	lsls	r1, r3, #31
 800462c:	d5d7      	bpl.n	80045de <_printf_float+0x242>
 800462e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	f43f af0a 	beq.w	8004452 <_printf_float+0xb6>
 800463e:	f04f 0a00 	mov.w	sl, #0
 8004642:	f104 0b1a 	add.w	fp, r4, #26
 8004646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004648:	425b      	negs	r3, r3
 800464a:	4553      	cmp	r3, sl
 800464c:	dc01      	bgt.n	8004652 <_printf_float+0x2b6>
 800464e:	464b      	mov	r3, r9
 8004650:	e793      	b.n	800457a <_printf_float+0x1de>
 8004652:	2301      	movs	r3, #1
 8004654:	465a      	mov	r2, fp
 8004656:	4631      	mov	r1, r6
 8004658:	4628      	mov	r0, r5
 800465a:	47b8      	blx	r7
 800465c:	3001      	adds	r0, #1
 800465e:	f43f aef8 	beq.w	8004452 <_printf_float+0xb6>
 8004662:	f10a 0a01 	add.w	sl, sl, #1
 8004666:	e7ee      	b.n	8004646 <_printf_float+0x2aa>
 8004668:	7fefffff 	.word	0x7fefffff
 800466c:	08009232 	.word	0x08009232
 8004670:	08009236 	.word	0x08009236
 8004674:	0800923a 	.word	0x0800923a
 8004678:	0800923e 	.word	0x0800923e
 800467c:	080095d0 	.word	0x080095d0
 8004680:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004682:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004686:	4553      	cmp	r3, sl
 8004688:	bfa8      	it	ge
 800468a:	4653      	movge	r3, sl
 800468c:	2b00      	cmp	r3, #0
 800468e:	4699      	mov	r9, r3
 8004690:	dc36      	bgt.n	8004700 <_printf_float+0x364>
 8004692:	f04f 0b00 	mov.w	fp, #0
 8004696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469a:	f104 021a 	add.w	r2, r4, #26
 800469e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80046a2:	eba3 0309 	sub.w	r3, r3, r9
 80046a6:	455b      	cmp	r3, fp
 80046a8:	dc31      	bgt.n	800470e <_printf_float+0x372>
 80046aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046ac:	459a      	cmp	sl, r3
 80046ae:	dc3a      	bgt.n	8004726 <_printf_float+0x38a>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	07da      	lsls	r2, r3, #31
 80046b4:	d437      	bmi.n	8004726 <_printf_float+0x38a>
 80046b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046b8:	ebaa 0903 	sub.w	r9, sl, r3
 80046bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046be:	ebaa 0303 	sub.w	r3, sl, r3
 80046c2:	4599      	cmp	r9, r3
 80046c4:	bfa8      	it	ge
 80046c6:	4699      	movge	r9, r3
 80046c8:	f1b9 0f00 	cmp.w	r9, #0
 80046cc:	dc33      	bgt.n	8004736 <_printf_float+0x39a>
 80046ce:	f04f 0800 	mov.w	r8, #0
 80046d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046d6:	f104 0b1a 	add.w	fp, r4, #26
 80046da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046dc:	ebaa 0303 	sub.w	r3, sl, r3
 80046e0:	eba3 0309 	sub.w	r3, r3, r9
 80046e4:	4543      	cmp	r3, r8
 80046e6:	f77f af7a 	ble.w	80045de <_printf_float+0x242>
 80046ea:	2301      	movs	r3, #1
 80046ec:	465a      	mov	r2, fp
 80046ee:	4631      	mov	r1, r6
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b8      	blx	r7
 80046f4:	3001      	adds	r0, #1
 80046f6:	f43f aeac 	beq.w	8004452 <_printf_float+0xb6>
 80046fa:	f108 0801 	add.w	r8, r8, #1
 80046fe:	e7ec      	b.n	80046da <_printf_float+0x33e>
 8004700:	4642      	mov	r2, r8
 8004702:	4631      	mov	r1, r6
 8004704:	4628      	mov	r0, r5
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	d1c2      	bne.n	8004692 <_printf_float+0x2f6>
 800470c:	e6a1      	b.n	8004452 <_printf_float+0xb6>
 800470e:	2301      	movs	r3, #1
 8004710:	4631      	mov	r1, r6
 8004712:	4628      	mov	r0, r5
 8004714:	920a      	str	r2, [sp, #40]	@ 0x28
 8004716:	47b8      	blx	r7
 8004718:	3001      	adds	r0, #1
 800471a:	f43f ae9a 	beq.w	8004452 <_printf_float+0xb6>
 800471e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004720:	f10b 0b01 	add.w	fp, fp, #1
 8004724:	e7bb      	b.n	800469e <_printf_float+0x302>
 8004726:	4631      	mov	r1, r6
 8004728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800472c:	4628      	mov	r0, r5
 800472e:	47b8      	blx	r7
 8004730:	3001      	adds	r0, #1
 8004732:	d1c0      	bne.n	80046b6 <_printf_float+0x31a>
 8004734:	e68d      	b.n	8004452 <_printf_float+0xb6>
 8004736:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004738:	464b      	mov	r3, r9
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	4442      	add	r2, r8
 8004740:	47b8      	blx	r7
 8004742:	3001      	adds	r0, #1
 8004744:	d1c3      	bne.n	80046ce <_printf_float+0x332>
 8004746:	e684      	b.n	8004452 <_printf_float+0xb6>
 8004748:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800474c:	f1ba 0f01 	cmp.w	sl, #1
 8004750:	dc01      	bgt.n	8004756 <_printf_float+0x3ba>
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d536      	bpl.n	80047c4 <_printf_float+0x428>
 8004756:	2301      	movs	r3, #1
 8004758:	4642      	mov	r2, r8
 800475a:	4631      	mov	r1, r6
 800475c:	4628      	mov	r0, r5
 800475e:	47b8      	blx	r7
 8004760:	3001      	adds	r0, #1
 8004762:	f43f ae76 	beq.w	8004452 <_printf_float+0xb6>
 8004766:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	f43f ae6e 	beq.w	8004452 <_printf_float+0xb6>
 8004776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800477a:	2200      	movs	r2, #0
 800477c:	2300      	movs	r3, #0
 800477e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004782:	f7fc f911 	bl	80009a8 <__aeabi_dcmpeq>
 8004786:	b9c0      	cbnz	r0, 80047ba <_printf_float+0x41e>
 8004788:	4653      	mov	r3, sl
 800478a:	f108 0201 	add.w	r2, r8, #1
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	d10c      	bne.n	80047b2 <_printf_float+0x416>
 8004798:	e65b      	b.n	8004452 <_printf_float+0xb6>
 800479a:	2301      	movs	r3, #1
 800479c:	465a      	mov	r2, fp
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	f43f ae54 	beq.w	8004452 <_printf_float+0xb6>
 80047aa:	f108 0801 	add.w	r8, r8, #1
 80047ae:	45d0      	cmp	r8, sl
 80047b0:	dbf3      	blt.n	800479a <_printf_float+0x3fe>
 80047b2:	464b      	mov	r3, r9
 80047b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80047b8:	e6e0      	b.n	800457c <_printf_float+0x1e0>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	f104 0b1a 	add.w	fp, r4, #26
 80047c2:	e7f4      	b.n	80047ae <_printf_float+0x412>
 80047c4:	2301      	movs	r3, #1
 80047c6:	4642      	mov	r2, r8
 80047c8:	e7e1      	b.n	800478e <_printf_float+0x3f2>
 80047ca:	2301      	movs	r3, #1
 80047cc:	464a      	mov	r2, r9
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b8      	blx	r7
 80047d4:	3001      	adds	r0, #1
 80047d6:	f43f ae3c 	beq.w	8004452 <_printf_float+0xb6>
 80047da:	f108 0801 	add.w	r8, r8, #1
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80047e2:	1a5b      	subs	r3, r3, r1
 80047e4:	4543      	cmp	r3, r8
 80047e6:	dcf0      	bgt.n	80047ca <_printf_float+0x42e>
 80047e8:	e6fd      	b.n	80045e6 <_printf_float+0x24a>
 80047ea:	f04f 0800 	mov.w	r8, #0
 80047ee:	f104 0919 	add.w	r9, r4, #25
 80047f2:	e7f4      	b.n	80047de <_printf_float+0x442>

080047f4 <_printf_common>:
 80047f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f8:	4616      	mov	r6, r2
 80047fa:	4698      	mov	r8, r3
 80047fc:	688a      	ldr	r2, [r1, #8]
 80047fe:	690b      	ldr	r3, [r1, #16]
 8004800:	4607      	mov	r7, r0
 8004802:	4293      	cmp	r3, r2
 8004804:	bfb8      	it	lt
 8004806:	4613      	movlt	r3, r2
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800480e:	460c      	mov	r4, r1
 8004810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004814:	b10a      	cbz	r2, 800481a <_printf_common+0x26>
 8004816:	3301      	adds	r3, #1
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	0699      	lsls	r1, r3, #26
 800481e:	bf42      	ittt	mi
 8004820:	6833      	ldrmi	r3, [r6, #0]
 8004822:	3302      	addmi	r3, #2
 8004824:	6033      	strmi	r3, [r6, #0]
 8004826:	6825      	ldr	r5, [r4, #0]
 8004828:	f015 0506 	ands.w	r5, r5, #6
 800482c:	d106      	bne.n	800483c <_printf_common+0x48>
 800482e:	f104 0a19 	add.w	sl, r4, #25
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	6832      	ldr	r2, [r6, #0]
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	42ab      	cmp	r3, r5
 800483a:	dc2b      	bgt.n	8004894 <_printf_common+0xa0>
 800483c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004840:	6822      	ldr	r2, [r4, #0]
 8004842:	3b00      	subs	r3, #0
 8004844:	bf18      	it	ne
 8004846:	2301      	movne	r3, #1
 8004848:	0692      	lsls	r2, r2, #26
 800484a:	d430      	bmi.n	80048ae <_printf_common+0xba>
 800484c:	4641      	mov	r1, r8
 800484e:	4638      	mov	r0, r7
 8004850:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004854:	47c8      	blx	r9
 8004856:	3001      	adds	r0, #1
 8004858:	d023      	beq.n	80048a2 <_printf_common+0xae>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	6922      	ldr	r2, [r4, #16]
 800485e:	f003 0306 	and.w	r3, r3, #6
 8004862:	2b04      	cmp	r3, #4
 8004864:	bf14      	ite	ne
 8004866:	2500      	movne	r5, #0
 8004868:	6833      	ldreq	r3, [r6, #0]
 800486a:	f04f 0600 	mov.w	r6, #0
 800486e:	bf08      	it	eq
 8004870:	68e5      	ldreq	r5, [r4, #12]
 8004872:	f104 041a 	add.w	r4, r4, #26
 8004876:	bf08      	it	eq
 8004878:	1aed      	subeq	r5, r5, r3
 800487a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800487e:	bf08      	it	eq
 8004880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004884:	4293      	cmp	r3, r2
 8004886:	bfc4      	itt	gt
 8004888:	1a9b      	subgt	r3, r3, r2
 800488a:	18ed      	addgt	r5, r5, r3
 800488c:	42b5      	cmp	r5, r6
 800488e:	d11a      	bne.n	80048c6 <_printf_common+0xd2>
 8004890:	2000      	movs	r0, #0
 8004892:	e008      	b.n	80048a6 <_printf_common+0xb2>
 8004894:	2301      	movs	r3, #1
 8004896:	4652      	mov	r2, sl
 8004898:	4641      	mov	r1, r8
 800489a:	4638      	mov	r0, r7
 800489c:	47c8      	blx	r9
 800489e:	3001      	adds	r0, #1
 80048a0:	d103      	bne.n	80048aa <_printf_common+0xb6>
 80048a2:	f04f 30ff 	mov.w	r0, #4294967295
 80048a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048aa:	3501      	adds	r5, #1
 80048ac:	e7c1      	b.n	8004832 <_printf_common+0x3e>
 80048ae:	2030      	movs	r0, #48	@ 0x30
 80048b0:	18e1      	adds	r1, r4, r3
 80048b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048bc:	4422      	add	r2, r4
 80048be:	3302      	adds	r3, #2
 80048c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048c4:	e7c2      	b.n	800484c <_printf_common+0x58>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4622      	mov	r2, r4
 80048ca:	4641      	mov	r1, r8
 80048cc:	4638      	mov	r0, r7
 80048ce:	47c8      	blx	r9
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0e6      	beq.n	80048a2 <_printf_common+0xae>
 80048d4:	3601      	adds	r6, #1
 80048d6:	e7d9      	b.n	800488c <_printf_common+0x98>

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	7e0f      	ldrb	r7, [r1, #24]
 80048de:	4691      	mov	r9, r2
 80048e0:	2f78      	cmp	r7, #120	@ 0x78
 80048e2:	4680      	mov	r8, r0
 80048e4:	460c      	mov	r4, r1
 80048e6:	469a      	mov	sl, r3
 80048e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	@ 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d3 	beq.w	8004aa0 <_printf_i+0x1c8>
 80048fa:	2f58      	cmp	r7, #88	@ 0x58
 80048fc:	f000 80ba 	beq.w	8004a74 <_printf_i+0x19c>
 8004900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a101      	add	r1, pc, #4	@ (adr r1, 8004918 <_printf_i+0x40>)
 8004914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a87 	.word	0x08004a87
 8004948:	080049af 	.word	0x080049af
 800494c:	08004a41 	.word	0x08004a41
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004aa9 	.word	0x08004aa9
 800495c:	08004901 	.word	0x08004901
 8004960:	080049af 	.word	0x080049af
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a49 	.word	0x08004a49
 8004970:	6833      	ldr	r3, [r6, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6032      	str	r2, [r6, #0]
 8004978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e09e      	b.n	8004ac2 <_printf_i+0x1ea>
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	6031      	str	r1, [r6, #0]
 800498c:	0606      	lsls	r6, r0, #24
 800498e:	d501      	bpl.n	8004994 <_printf_i+0xbc>
 8004990:	681d      	ldr	r5, [r3, #0]
 8004992:	e003      	b.n	800499c <_printf_i+0xc4>
 8004994:	0645      	lsls	r5, r0, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0xb8>
 8004998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800499c:	2d00      	cmp	r5, #0
 800499e:	da03      	bge.n	80049a8 <_printf_i+0xd0>
 80049a0:	232d      	movs	r3, #45	@ 0x2d
 80049a2:	426d      	negs	r5, r5
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049a8:	230a      	movs	r3, #10
 80049aa:	4859      	ldr	r0, [pc, #356]	@ (8004b10 <_printf_i+0x238>)
 80049ac:	e011      	b.n	80049d2 <_printf_i+0xfa>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	0608      	lsls	r0, r1, #24
 80049b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80049b8:	d402      	bmi.n	80049c0 <_printf_i+0xe8>
 80049ba:	0649      	lsls	r1, r1, #25
 80049bc:	bf48      	it	mi
 80049be:	b2ad      	uxthmi	r5, r5
 80049c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	bf14      	ite	ne
 80049c6:	230a      	movne	r3, #10
 80049c8:	2308      	moveq	r3, #8
 80049ca:	4851      	ldr	r0, [pc, #324]	@ (8004b10 <_printf_i+0x238>)
 80049cc:	2100      	movs	r1, #0
 80049ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049d2:	6866      	ldr	r6, [r4, #4]
 80049d4:	2e00      	cmp	r6, #0
 80049d6:	bfa8      	it	ge
 80049d8:	6821      	ldrge	r1, [r4, #0]
 80049da:	60a6      	str	r6, [r4, #8]
 80049dc:	bfa4      	itt	ge
 80049de:	f021 0104 	bicge.w	r1, r1, #4
 80049e2:	6021      	strge	r1, [r4, #0]
 80049e4:	b90d      	cbnz	r5, 80049ea <_printf_i+0x112>
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	d04b      	beq.n	8004a82 <_printf_i+0x1aa>
 80049ea:	4616      	mov	r6, r2
 80049ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80049f0:	fb03 5711 	mls	r7, r3, r1, r5
 80049f4:	5dc7      	ldrb	r7, [r0, r7]
 80049f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049fa:	462f      	mov	r7, r5
 80049fc:	42bb      	cmp	r3, r7
 80049fe:	460d      	mov	r5, r1
 8004a00:	d9f4      	bls.n	80049ec <_printf_i+0x114>
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d10b      	bne.n	8004a1e <_printf_i+0x146>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	07df      	lsls	r7, r3, #31
 8004a0a:	d508      	bpl.n	8004a1e <_printf_i+0x146>
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	6861      	ldr	r1, [r4, #4]
 8004a10:	4299      	cmp	r1, r3
 8004a12:	bfde      	ittt	le
 8004a14:	2330      	movle	r3, #48	@ 0x30
 8004a16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a1e:	1b92      	subs	r2, r2, r6
 8004a20:	6122      	str	r2, [r4, #16]
 8004a22:	464b      	mov	r3, r9
 8004a24:	4621      	mov	r1, r4
 8004a26:	4640      	mov	r0, r8
 8004a28:	f8cd a000 	str.w	sl, [sp]
 8004a2c:	aa03      	add	r2, sp, #12
 8004a2e:	f7ff fee1 	bl	80047f4 <_printf_common>
 8004a32:	3001      	adds	r0, #1
 8004a34:	d14a      	bne.n	8004acc <_printf_i+0x1f4>
 8004a36:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3a:	b004      	add	sp, #16
 8004a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f043 0320 	orr.w	r3, r3, #32
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	2778      	movs	r7, #120	@ 0x78
 8004a4a:	4832      	ldr	r0, [pc, #200]	@ (8004b14 <_printf_i+0x23c>)
 8004a4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	6831      	ldr	r1, [r6, #0]
 8004a54:	061f      	lsls	r7, r3, #24
 8004a56:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a5a:	d402      	bmi.n	8004a62 <_printf_i+0x18a>
 8004a5c:	065f      	lsls	r7, r3, #25
 8004a5e:	bf48      	it	mi
 8004a60:	b2ad      	uxthmi	r5, r5
 8004a62:	6031      	str	r1, [r6, #0]
 8004a64:	07d9      	lsls	r1, r3, #31
 8004a66:	bf44      	itt	mi
 8004a68:	f043 0320 	orrmi.w	r3, r3, #32
 8004a6c:	6023      	strmi	r3, [r4, #0]
 8004a6e:	b11d      	cbz	r5, 8004a78 <_printf_i+0x1a0>
 8004a70:	2310      	movs	r3, #16
 8004a72:	e7ab      	b.n	80049cc <_printf_i+0xf4>
 8004a74:	4826      	ldr	r0, [pc, #152]	@ (8004b10 <_printf_i+0x238>)
 8004a76:	e7e9      	b.n	8004a4c <_printf_i+0x174>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	f023 0320 	bic.w	r3, r3, #32
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	e7f6      	b.n	8004a70 <_printf_i+0x198>
 8004a82:	4616      	mov	r6, r2
 8004a84:	e7bd      	b.n	8004a02 <_printf_i+0x12a>
 8004a86:	6833      	ldr	r3, [r6, #0]
 8004a88:	6825      	ldr	r5, [r4, #0]
 8004a8a:	1d18      	adds	r0, r3, #4
 8004a8c:	6961      	ldr	r1, [r4, #20]
 8004a8e:	6030      	str	r0, [r6, #0]
 8004a90:	062e      	lsls	r6, r5, #24
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	d501      	bpl.n	8004a9a <_printf_i+0x1c2>
 8004a96:	6019      	str	r1, [r3, #0]
 8004a98:	e002      	b.n	8004aa0 <_printf_i+0x1c8>
 8004a9a:	0668      	lsls	r0, r5, #25
 8004a9c:	d5fb      	bpl.n	8004a96 <_printf_i+0x1be>
 8004a9e:	8019      	strh	r1, [r3, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	e7bc      	b.n	8004a22 <_printf_i+0x14a>
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	2100      	movs	r1, #0
 8004aac:	1d1a      	adds	r2, r3, #4
 8004aae:	6032      	str	r2, [r6, #0]
 8004ab0:	681e      	ldr	r6, [r3, #0]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 fc22 	bl	80052fe <memchr>
 8004aba:	b108      	cbz	r0, 8004ac0 <_printf_i+0x1e8>
 8004abc:	1b80      	subs	r0, r0, r6
 8004abe:	6060      	str	r0, [r4, #4]
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aca:	e7aa      	b.n	8004a22 <_printf_i+0x14a>
 8004acc:	4632      	mov	r2, r6
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	47d0      	blx	sl
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d0ad      	beq.n	8004a36 <_printf_i+0x15e>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	079b      	lsls	r3, r3, #30
 8004ade:	d413      	bmi.n	8004b08 <_printf_i+0x230>
 8004ae0:	68e0      	ldr	r0, [r4, #12]
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	bfb8      	it	lt
 8004ae8:	4618      	movlt	r0, r3
 8004aea:	e7a6      	b.n	8004a3a <_printf_i+0x162>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4632      	mov	r2, r6
 8004af0:	4649      	mov	r1, r9
 8004af2:	4640      	mov	r0, r8
 8004af4:	47d0      	blx	sl
 8004af6:	3001      	adds	r0, #1
 8004af8:	d09d      	beq.n	8004a36 <_printf_i+0x15e>
 8004afa:	3501      	adds	r5, #1
 8004afc:	68e3      	ldr	r3, [r4, #12]
 8004afe:	9903      	ldr	r1, [sp, #12]
 8004b00:	1a5b      	subs	r3, r3, r1
 8004b02:	42ab      	cmp	r3, r5
 8004b04:	dcf2      	bgt.n	8004aec <_printf_i+0x214>
 8004b06:	e7eb      	b.n	8004ae0 <_printf_i+0x208>
 8004b08:	2500      	movs	r5, #0
 8004b0a:	f104 0619 	add.w	r6, r4, #25
 8004b0e:	e7f5      	b.n	8004afc <_printf_i+0x224>
 8004b10:	08009242 	.word	0x08009242
 8004b14:	08009253 	.word	0x08009253

08004b18 <_scanf_float>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	9303      	str	r3, [sp, #12]
 8004b20:	688b      	ldr	r3, [r1, #8]
 8004b22:	4617      	mov	r7, r2
 8004b24:	1e5a      	subs	r2, r3, #1
 8004b26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004b2a:	bf82      	ittt	hi
 8004b2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004b30:	eb03 0b05 	addhi.w	fp, r3, r5
 8004b34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004b38:	460a      	mov	r2, r1
 8004b3a:	f04f 0500 	mov.w	r5, #0
 8004b3e:	bf88      	it	hi
 8004b40:	608b      	strhi	r3, [r1, #8]
 8004b42:	680b      	ldr	r3, [r1, #0]
 8004b44:	4680      	mov	r8, r0
 8004b46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004b4a:	f842 3b1c 	str.w	r3, [r2], #28
 8004b4e:	460c      	mov	r4, r1
 8004b50:	bf98      	it	ls
 8004b52:	f04f 0b00 	movls.w	fp, #0
 8004b56:	4616      	mov	r6, r2
 8004b58:	46aa      	mov	sl, r5
 8004b5a:	46a9      	mov	r9, r5
 8004b5c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004b60:	9201      	str	r2, [sp, #4]
 8004b62:	9502      	str	r5, [sp, #8]
 8004b64:	68a2      	ldr	r2, [r4, #8]
 8004b66:	b152      	cbz	r2, 8004b7e <_scanf_float+0x66>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004b6e:	d865      	bhi.n	8004c3c <_scanf_float+0x124>
 8004b70:	2b40      	cmp	r3, #64	@ 0x40
 8004b72:	d83d      	bhi.n	8004bf0 <_scanf_float+0xd8>
 8004b74:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004b78:	b2c8      	uxtb	r0, r1
 8004b7a:	280e      	cmp	r0, #14
 8004b7c:	d93b      	bls.n	8004bf6 <_scanf_float+0xde>
 8004b7e:	f1b9 0f00 	cmp.w	r9, #0
 8004b82:	d003      	beq.n	8004b8c <_scanf_float+0x74>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b90:	f1ba 0f01 	cmp.w	sl, #1
 8004b94:	f200 8118 	bhi.w	8004dc8 <_scanf_float+0x2b0>
 8004b98:	9b01      	ldr	r3, [sp, #4]
 8004b9a:	429e      	cmp	r6, r3
 8004b9c:	f200 8109 	bhi.w	8004db2 <_scanf_float+0x29a>
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	b007      	add	sp, #28
 8004ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004bac:	2a0d      	cmp	r2, #13
 8004bae:	d8e6      	bhi.n	8004b7e <_scanf_float+0x66>
 8004bb0:	a101      	add	r1, pc, #4	@ (adr r1, 8004bb8 <_scanf_float+0xa0>)
 8004bb2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004cff 	.word	0x08004cff
 8004bbc:	08004b7f 	.word	0x08004b7f
 8004bc0:	08004b7f 	.word	0x08004b7f
 8004bc4:	08004b7f 	.word	0x08004b7f
 8004bc8:	08004d5f 	.word	0x08004d5f
 8004bcc:	08004d37 	.word	0x08004d37
 8004bd0:	08004b7f 	.word	0x08004b7f
 8004bd4:	08004b7f 	.word	0x08004b7f
 8004bd8:	08004d0d 	.word	0x08004d0d
 8004bdc:	08004b7f 	.word	0x08004b7f
 8004be0:	08004b7f 	.word	0x08004b7f
 8004be4:	08004b7f 	.word	0x08004b7f
 8004be8:	08004b7f 	.word	0x08004b7f
 8004bec:	08004cc5 	.word	0x08004cc5
 8004bf0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004bf4:	e7da      	b.n	8004bac <_scanf_float+0x94>
 8004bf6:	290e      	cmp	r1, #14
 8004bf8:	d8c1      	bhi.n	8004b7e <_scanf_float+0x66>
 8004bfa:	a001      	add	r0, pc, #4	@ (adr r0, 8004c00 <_scanf_float+0xe8>)
 8004bfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c00:	08004cb5 	.word	0x08004cb5
 8004c04:	08004b7f 	.word	0x08004b7f
 8004c08:	08004cb5 	.word	0x08004cb5
 8004c0c:	08004d4b 	.word	0x08004d4b
 8004c10:	08004b7f 	.word	0x08004b7f
 8004c14:	08004c5d 	.word	0x08004c5d
 8004c18:	08004c9b 	.word	0x08004c9b
 8004c1c:	08004c9b 	.word	0x08004c9b
 8004c20:	08004c9b 	.word	0x08004c9b
 8004c24:	08004c9b 	.word	0x08004c9b
 8004c28:	08004c9b 	.word	0x08004c9b
 8004c2c:	08004c9b 	.word	0x08004c9b
 8004c30:	08004c9b 	.word	0x08004c9b
 8004c34:	08004c9b 	.word	0x08004c9b
 8004c38:	08004c9b 	.word	0x08004c9b
 8004c3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004c3e:	d809      	bhi.n	8004c54 <_scanf_float+0x13c>
 8004c40:	2b60      	cmp	r3, #96	@ 0x60
 8004c42:	d8b1      	bhi.n	8004ba8 <_scanf_float+0x90>
 8004c44:	2b54      	cmp	r3, #84	@ 0x54
 8004c46:	d07b      	beq.n	8004d40 <_scanf_float+0x228>
 8004c48:	2b59      	cmp	r3, #89	@ 0x59
 8004c4a:	d198      	bne.n	8004b7e <_scanf_float+0x66>
 8004c4c:	2d07      	cmp	r5, #7
 8004c4e:	d196      	bne.n	8004b7e <_scanf_float+0x66>
 8004c50:	2508      	movs	r5, #8
 8004c52:	e02c      	b.n	8004cae <_scanf_float+0x196>
 8004c54:	2b74      	cmp	r3, #116	@ 0x74
 8004c56:	d073      	beq.n	8004d40 <_scanf_float+0x228>
 8004c58:	2b79      	cmp	r3, #121	@ 0x79
 8004c5a:	e7f6      	b.n	8004c4a <_scanf_float+0x132>
 8004c5c:	6821      	ldr	r1, [r4, #0]
 8004c5e:	05c8      	lsls	r0, r1, #23
 8004c60:	d51b      	bpl.n	8004c9a <_scanf_float+0x182>
 8004c62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004c66:	6021      	str	r1, [r4, #0]
 8004c68:	f109 0901 	add.w	r9, r9, #1
 8004c6c:	f1bb 0f00 	cmp.w	fp, #0
 8004c70:	d003      	beq.n	8004c7a <_scanf_float+0x162>
 8004c72:	3201      	adds	r2, #1
 8004c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c78:	60a2      	str	r2, [r4, #8]
 8004c7a:	68a3      	ldr	r3, [r4, #8]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	60a3      	str	r3, [r4, #8]
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	3301      	adds	r3, #1
 8004c84:	6123      	str	r3, [r4, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	f340 8087 	ble.w	8004da0 <_scanf_float+0x288>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	e764      	b.n	8004b64 <_scanf_float+0x4c>
 8004c9a:	eb1a 0105 	adds.w	r1, sl, r5
 8004c9e:	f47f af6e 	bne.w	8004b7e <_scanf_float+0x66>
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	468a      	mov	sl, r1
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004cac:	6022      	str	r2, [r4, #0]
 8004cae:	f806 3b01 	strb.w	r3, [r6], #1
 8004cb2:	e7e2      	b.n	8004c7a <_scanf_float+0x162>
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	0610      	lsls	r0, r2, #24
 8004cb8:	f57f af61 	bpl.w	8004b7e <_scanf_float+0x66>
 8004cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cc0:	6022      	str	r2, [r4, #0]
 8004cc2:	e7f4      	b.n	8004cae <_scanf_float+0x196>
 8004cc4:	f1ba 0f00 	cmp.w	sl, #0
 8004cc8:	d10e      	bne.n	8004ce8 <_scanf_float+0x1d0>
 8004cca:	f1b9 0f00 	cmp.w	r9, #0
 8004cce:	d10e      	bne.n	8004cee <_scanf_float+0x1d6>
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004cd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004cda:	d108      	bne.n	8004cee <_scanf_float+0x1d6>
 8004cdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ce0:	f04f 0a01 	mov.w	sl, #1
 8004ce4:	6022      	str	r2, [r4, #0]
 8004ce6:	e7e2      	b.n	8004cae <_scanf_float+0x196>
 8004ce8:	f1ba 0f02 	cmp.w	sl, #2
 8004cec:	d055      	beq.n	8004d9a <_scanf_float+0x282>
 8004cee:	2d01      	cmp	r5, #1
 8004cf0:	d002      	beq.n	8004cf8 <_scanf_float+0x1e0>
 8004cf2:	2d04      	cmp	r5, #4
 8004cf4:	f47f af43 	bne.w	8004b7e <_scanf_float+0x66>
 8004cf8:	3501      	adds	r5, #1
 8004cfa:	b2ed      	uxtb	r5, r5
 8004cfc:	e7d7      	b.n	8004cae <_scanf_float+0x196>
 8004cfe:	f1ba 0f01 	cmp.w	sl, #1
 8004d02:	f47f af3c 	bne.w	8004b7e <_scanf_float+0x66>
 8004d06:	f04f 0a02 	mov.w	sl, #2
 8004d0a:	e7d0      	b.n	8004cae <_scanf_float+0x196>
 8004d0c:	b97d      	cbnz	r5, 8004d2e <_scanf_float+0x216>
 8004d0e:	f1b9 0f00 	cmp.w	r9, #0
 8004d12:	f47f af37 	bne.w	8004b84 <_scanf_float+0x6c>
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004d1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004d20:	f040 8103 	bne.w	8004f2a <_scanf_float+0x412>
 8004d24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004d28:	2501      	movs	r5, #1
 8004d2a:	6022      	str	r2, [r4, #0]
 8004d2c:	e7bf      	b.n	8004cae <_scanf_float+0x196>
 8004d2e:	2d03      	cmp	r5, #3
 8004d30:	d0e2      	beq.n	8004cf8 <_scanf_float+0x1e0>
 8004d32:	2d05      	cmp	r5, #5
 8004d34:	e7de      	b.n	8004cf4 <_scanf_float+0x1dc>
 8004d36:	2d02      	cmp	r5, #2
 8004d38:	f47f af21 	bne.w	8004b7e <_scanf_float+0x66>
 8004d3c:	2503      	movs	r5, #3
 8004d3e:	e7b6      	b.n	8004cae <_scanf_float+0x196>
 8004d40:	2d06      	cmp	r5, #6
 8004d42:	f47f af1c 	bne.w	8004b7e <_scanf_float+0x66>
 8004d46:	2507      	movs	r5, #7
 8004d48:	e7b1      	b.n	8004cae <_scanf_float+0x196>
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	0591      	lsls	r1, r2, #22
 8004d4e:	f57f af16 	bpl.w	8004b7e <_scanf_float+0x66>
 8004d52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004d56:	6022      	str	r2, [r4, #0]
 8004d58:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d5c:	e7a7      	b.n	8004cae <_scanf_float+0x196>
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004d64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004d68:	d006      	beq.n	8004d78 <_scanf_float+0x260>
 8004d6a:	0550      	lsls	r0, r2, #21
 8004d6c:	f57f af07 	bpl.w	8004b7e <_scanf_float+0x66>
 8004d70:	f1b9 0f00 	cmp.w	r9, #0
 8004d74:	f000 80d9 	beq.w	8004f2a <_scanf_float+0x412>
 8004d78:	0591      	lsls	r1, r2, #22
 8004d7a:	bf58      	it	pl
 8004d7c:	9902      	ldrpl	r1, [sp, #8]
 8004d7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004d82:	bf58      	it	pl
 8004d84:	eba9 0101 	subpl.w	r1, r9, r1
 8004d88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004d8c:	f04f 0900 	mov.w	r9, #0
 8004d90:	bf58      	it	pl
 8004d92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004d96:	6022      	str	r2, [r4, #0]
 8004d98:	e789      	b.n	8004cae <_scanf_float+0x196>
 8004d9a:	f04f 0a03 	mov.w	sl, #3
 8004d9e:	e786      	b.n	8004cae <_scanf_float+0x196>
 8004da0:	4639      	mov	r1, r7
 8004da2:	4640      	mov	r0, r8
 8004da4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004da8:	4798      	blx	r3
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f43f aeda 	beq.w	8004b64 <_scanf_float+0x4c>
 8004db0:	e6e5      	b.n	8004b7e <_scanf_float+0x66>
 8004db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004db6:	463a      	mov	r2, r7
 8004db8:	4640      	mov	r0, r8
 8004dba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dbe:	4798      	blx	r3
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	e6e7      	b.n	8004b98 <_scanf_float+0x80>
 8004dc8:	1e6b      	subs	r3, r5, #1
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d824      	bhi.n	8004e18 <_scanf_float+0x300>
 8004dce:	2d02      	cmp	r5, #2
 8004dd0:	d836      	bhi.n	8004e40 <_scanf_float+0x328>
 8004dd2:	9b01      	ldr	r3, [sp, #4]
 8004dd4:	429e      	cmp	r6, r3
 8004dd6:	f67f aee3 	bls.w	8004ba0 <_scanf_float+0x88>
 8004dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004dde:	463a      	mov	r2, r7
 8004de0:	4640      	mov	r0, r8
 8004de2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004de6:	4798      	blx	r3
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	e7f0      	b.n	8004dd2 <_scanf_float+0x2ba>
 8004df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004df4:	463a      	mov	r2, r7
 8004df6:	4640      	mov	r0, r8
 8004df8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004dfc:	4798      	blx	r3
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	6123      	str	r3, [r4, #16]
 8004e04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e08:	fa5f fa8a 	uxtb.w	sl, sl
 8004e0c:	f1ba 0f02 	cmp.w	sl, #2
 8004e10:	d1ee      	bne.n	8004df0 <_scanf_float+0x2d8>
 8004e12:	3d03      	subs	r5, #3
 8004e14:	b2ed      	uxtb	r5, r5
 8004e16:	1b76      	subs	r6, r6, r5
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	05da      	lsls	r2, r3, #23
 8004e1c:	d530      	bpl.n	8004e80 <_scanf_float+0x368>
 8004e1e:	055b      	lsls	r3, r3, #21
 8004e20:	d511      	bpl.n	8004e46 <_scanf_float+0x32e>
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	429e      	cmp	r6, r3
 8004e26:	f67f aebb 	bls.w	8004ba0 <_scanf_float+0x88>
 8004e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e2e:	463a      	mov	r2, r7
 8004e30:	4640      	mov	r0, r8
 8004e32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e36:	4798      	blx	r3
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	e7f0      	b.n	8004e22 <_scanf_float+0x30a>
 8004e40:	46aa      	mov	sl, r5
 8004e42:	46b3      	mov	fp, r6
 8004e44:	e7de      	b.n	8004e04 <_scanf_float+0x2ec>
 8004e46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	2965      	cmp	r1, #101	@ 0x65
 8004e4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e52:	f106 35ff 	add.w	r5, r6, #4294967295
 8004e56:	6123      	str	r3, [r4, #16]
 8004e58:	d00c      	beq.n	8004e74 <_scanf_float+0x35c>
 8004e5a:	2945      	cmp	r1, #69	@ 0x45
 8004e5c:	d00a      	beq.n	8004e74 <_scanf_float+0x35c>
 8004e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e62:	463a      	mov	r2, r7
 8004e64:	4640      	mov	r0, r8
 8004e66:	4798      	blx	r3
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	1eb5      	subs	r5, r6, #2
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	463a      	mov	r2, r7
 8004e76:	4640      	mov	r0, r8
 8004e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e7c:	4798      	blx	r3
 8004e7e:	462e      	mov	r6, r5
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	f012 0210 	ands.w	r2, r2, #16
 8004e86:	d001      	beq.n	8004e8c <_scanf_float+0x374>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e68a      	b.n	8004ba2 <_scanf_float+0x8a>
 8004e8c:	7032      	strb	r2, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e98:	d11c      	bne.n	8004ed4 <_scanf_float+0x3bc>
 8004e9a:	9b02      	ldr	r3, [sp, #8]
 8004e9c:	454b      	cmp	r3, r9
 8004e9e:	eba3 0209 	sub.w	r2, r3, r9
 8004ea2:	d123      	bne.n	8004eec <_scanf_float+0x3d4>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	9901      	ldr	r1, [sp, #4]
 8004eaa:	f002 fc2d 	bl	8007708 <_strtod_r>
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	6825      	ldr	r5, [r4, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f015 0f02 	tst.w	r5, #2
 8004eb8:	4606      	mov	r6, r0
 8004eba:	460f      	mov	r7, r1
 8004ebc:	f103 0204 	add.w	r2, r3, #4
 8004ec0:	d01f      	beq.n	8004f02 <_scanf_float+0x3ea>
 8004ec2:	9903      	ldr	r1, [sp, #12]
 8004ec4:	600a      	str	r2, [r1, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	e9c3 6700 	strd	r6, r7, [r3]
 8004ecc:	68e3      	ldr	r3, [r4, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60e3      	str	r3, [r4, #12]
 8004ed2:	e7d9      	b.n	8004e88 <_scanf_float+0x370>
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0e4      	beq.n	8004ea4 <_scanf_float+0x38c>
 8004eda:	9905      	ldr	r1, [sp, #20]
 8004edc:	230a      	movs	r3, #10
 8004ede:	4640      	mov	r0, r8
 8004ee0:	3101      	adds	r1, #1
 8004ee2:	f002 fc91 	bl	8007808 <_strtol_r>
 8004ee6:	9b04      	ldr	r3, [sp, #16]
 8004ee8:	9e05      	ldr	r6, [sp, #20]
 8004eea:	1ac2      	subs	r2, r0, r3
 8004eec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004ef0:	429e      	cmp	r6, r3
 8004ef2:	bf28      	it	cs
 8004ef4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004ef8:	4630      	mov	r0, r6
 8004efa:	490d      	ldr	r1, [pc, #52]	@ (8004f30 <_scanf_float+0x418>)
 8004efc:	f000 f8de 	bl	80050bc <siprintf>
 8004f00:	e7d0      	b.n	8004ea4 <_scanf_float+0x38c>
 8004f02:	076d      	lsls	r5, r5, #29
 8004f04:	d4dd      	bmi.n	8004ec2 <_scanf_float+0x3aa>
 8004f06:	9d03      	ldr	r5, [sp, #12]
 8004f08:	602a      	str	r2, [r5, #0]
 8004f0a:	681d      	ldr	r5, [r3, #0]
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	f7fb fd7c 	bl	8000a0c <__aeabi_dcmpun>
 8004f14:	b120      	cbz	r0, 8004f20 <_scanf_float+0x408>
 8004f16:	4807      	ldr	r0, [pc, #28]	@ (8004f34 <_scanf_float+0x41c>)
 8004f18:	f000 fa00 	bl	800531c <nanf>
 8004f1c:	6028      	str	r0, [r5, #0]
 8004f1e:	e7d5      	b.n	8004ecc <_scanf_float+0x3b4>
 8004f20:	4630      	mov	r0, r6
 8004f22:	4639      	mov	r1, r7
 8004f24:	f7fb fdd0 	bl	8000ac8 <__aeabi_d2f>
 8004f28:	e7f8      	b.n	8004f1c <_scanf_float+0x404>
 8004f2a:	f04f 0900 	mov.w	r9, #0
 8004f2e:	e62d      	b.n	8004b8c <_scanf_float+0x74>
 8004f30:	08009264 	.word	0x08009264
 8004f34:	08009618 	.word	0x08009618

08004f38 <std>:
 8004f38:	2300      	movs	r3, #0
 8004f3a:	b510      	push	{r4, lr}
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f46:	6083      	str	r3, [r0, #8]
 8004f48:	8181      	strh	r1, [r0, #12]
 8004f4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f4c:	81c2      	strh	r2, [r0, #14]
 8004f4e:	6183      	str	r3, [r0, #24]
 8004f50:	4619      	mov	r1, r3
 8004f52:	2208      	movs	r2, #8
 8004f54:	305c      	adds	r0, #92	@ 0x5c
 8004f56:	f000 f940 	bl	80051da <memset>
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <std+0x58>)
 8004f5c:	6224      	str	r4, [r4, #32]
 8004f5e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f60:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <std+0x5c>)
 8004f62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f64:	4b0c      	ldr	r3, [pc, #48]	@ (8004f98 <std+0x60>)
 8004f66:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f68:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <std+0x64>)
 8004f6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <std+0x68>)
 8004f6e:	429c      	cmp	r4, r3
 8004f70:	d006      	beq.n	8004f80 <std+0x48>
 8004f72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f76:	4294      	cmp	r4, r2
 8004f78:	d002      	beq.n	8004f80 <std+0x48>
 8004f7a:	33d0      	adds	r3, #208	@ 0xd0
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d105      	bne.n	8004f8c <std+0x54>
 8004f80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f88:	f000 b9b6 	b.w	80052f8 <__retarget_lock_init_recursive>
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	bf00      	nop
 8004f90:	08005151 	.word	0x08005151
 8004f94:	08005177 	.word	0x08005177
 8004f98:	080051af 	.word	0x080051af
 8004f9c:	080051d3 	.word	0x080051d3
 8004fa0:	200002e4 	.word	0x200002e4

08004fa4 <stdio_exit_handler>:
 8004fa4:	4a02      	ldr	r2, [pc, #8]	@ (8004fb0 <stdio_exit_handler+0xc>)
 8004fa6:	4903      	ldr	r1, [pc, #12]	@ (8004fb4 <stdio_exit_handler+0x10>)
 8004fa8:	4803      	ldr	r0, [pc, #12]	@ (8004fb8 <stdio_exit_handler+0x14>)
 8004faa:	f000 b869 	b.w	8005080 <_fwalk_sglue>
 8004fae:	bf00      	nop
 8004fb0:	20000014 	.word	0x20000014
 8004fb4:	08008469 	.word	0x08008469
 8004fb8:	20000024 	.word	0x20000024

08004fbc <cleanup_stdio>:
 8004fbc:	6841      	ldr	r1, [r0, #4]
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <cleanup_stdio+0x34>)
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4299      	cmp	r1, r3
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	d001      	beq.n	8004fcc <cleanup_stdio+0x10>
 8004fc8:	f003 fa4e 	bl	8008468 <_fflush_r>
 8004fcc:	68a1      	ldr	r1, [r4, #8]
 8004fce:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <cleanup_stdio+0x38>)
 8004fd0:	4299      	cmp	r1, r3
 8004fd2:	d002      	beq.n	8004fda <cleanup_stdio+0x1e>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f003 fa47 	bl	8008468 <_fflush_r>
 8004fda:	68e1      	ldr	r1, [r4, #12]
 8004fdc:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <cleanup_stdio+0x3c>)
 8004fde:	4299      	cmp	r1, r3
 8004fe0:	d004      	beq.n	8004fec <cleanup_stdio+0x30>
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe8:	f003 ba3e 	b.w	8008468 <_fflush_r>
 8004fec:	bd10      	pop	{r4, pc}
 8004fee:	bf00      	nop
 8004ff0:	200002e4 	.word	0x200002e4
 8004ff4:	2000034c 	.word	0x2000034c
 8004ff8:	200003b4 	.word	0x200003b4

08004ffc <global_stdio_init.part.0>:
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <global_stdio_init.part.0+0x30>)
 8005000:	4c0b      	ldr	r4, [pc, #44]	@ (8005030 <global_stdio_init.part.0+0x34>)
 8005002:	4a0c      	ldr	r2, [pc, #48]	@ (8005034 <global_stdio_init.part.0+0x38>)
 8005004:	4620      	mov	r0, r4
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	2104      	movs	r1, #4
 800500a:	2200      	movs	r2, #0
 800500c:	f7ff ff94 	bl	8004f38 <std>
 8005010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005014:	2201      	movs	r2, #1
 8005016:	2109      	movs	r1, #9
 8005018:	f7ff ff8e 	bl	8004f38 <std>
 800501c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005020:	2202      	movs	r2, #2
 8005022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005026:	2112      	movs	r1, #18
 8005028:	f7ff bf86 	b.w	8004f38 <std>
 800502c:	2000041c 	.word	0x2000041c
 8005030:	200002e4 	.word	0x200002e4
 8005034:	08004fa5 	.word	0x08004fa5

08005038 <__sfp_lock_acquire>:
 8005038:	4801      	ldr	r0, [pc, #4]	@ (8005040 <__sfp_lock_acquire+0x8>)
 800503a:	f000 b95e 	b.w	80052fa <__retarget_lock_acquire_recursive>
 800503e:	bf00      	nop
 8005040:	20000425 	.word	0x20000425

08005044 <__sfp_lock_release>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__sfp_lock_release+0x8>)
 8005046:	f000 b959 	b.w	80052fc <__retarget_lock_release_recursive>
 800504a:	bf00      	nop
 800504c:	20000425 	.word	0x20000425

08005050 <__sinit>:
 8005050:	b510      	push	{r4, lr}
 8005052:	4604      	mov	r4, r0
 8005054:	f7ff fff0 	bl	8005038 <__sfp_lock_acquire>
 8005058:	6a23      	ldr	r3, [r4, #32]
 800505a:	b11b      	cbz	r3, 8005064 <__sinit+0x14>
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	f7ff bff0 	b.w	8005044 <__sfp_lock_release>
 8005064:	4b04      	ldr	r3, [pc, #16]	@ (8005078 <__sinit+0x28>)
 8005066:	6223      	str	r3, [r4, #32]
 8005068:	4b04      	ldr	r3, [pc, #16]	@ (800507c <__sinit+0x2c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f5      	bne.n	800505c <__sinit+0xc>
 8005070:	f7ff ffc4 	bl	8004ffc <global_stdio_init.part.0>
 8005074:	e7f2      	b.n	800505c <__sinit+0xc>
 8005076:	bf00      	nop
 8005078:	08004fbd 	.word	0x08004fbd
 800507c:	2000041c 	.word	0x2000041c

08005080 <_fwalk_sglue>:
 8005080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005084:	4607      	mov	r7, r0
 8005086:	4688      	mov	r8, r1
 8005088:	4614      	mov	r4, r2
 800508a:	2600      	movs	r6, #0
 800508c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005090:	f1b9 0901 	subs.w	r9, r9, #1
 8005094:	d505      	bpl.n	80050a2 <_fwalk_sglue+0x22>
 8005096:	6824      	ldr	r4, [r4, #0]
 8005098:	2c00      	cmp	r4, #0
 800509a:	d1f7      	bne.n	800508c <_fwalk_sglue+0xc>
 800509c:	4630      	mov	r0, r6
 800509e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050a2:	89ab      	ldrh	r3, [r5, #12]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d907      	bls.n	80050b8 <_fwalk_sglue+0x38>
 80050a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050ac:	3301      	adds	r3, #1
 80050ae:	d003      	beq.n	80050b8 <_fwalk_sglue+0x38>
 80050b0:	4629      	mov	r1, r5
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c0      	blx	r8
 80050b6:	4306      	orrs	r6, r0
 80050b8:	3568      	adds	r5, #104	@ 0x68
 80050ba:	e7e9      	b.n	8005090 <_fwalk_sglue+0x10>

080050bc <siprintf>:
 80050bc:	b40e      	push	{r1, r2, r3}
 80050be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050c2:	b500      	push	{lr}
 80050c4:	b09c      	sub	sp, #112	@ 0x70
 80050c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80050c8:	9002      	str	r0, [sp, #8]
 80050ca:	9006      	str	r0, [sp, #24]
 80050cc:	9107      	str	r1, [sp, #28]
 80050ce:	9104      	str	r1, [sp, #16]
 80050d0:	4808      	ldr	r0, [pc, #32]	@ (80050f4 <siprintf+0x38>)
 80050d2:	4909      	ldr	r1, [pc, #36]	@ (80050f8 <siprintf+0x3c>)
 80050d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d8:	9105      	str	r1, [sp, #20]
 80050da:	6800      	ldr	r0, [r0, #0]
 80050dc:	a902      	add	r1, sp, #8
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	f002 fbf0 	bl	80078c4 <_svfiprintf_r>
 80050e4:	2200      	movs	r2, #0
 80050e6:	9b02      	ldr	r3, [sp, #8]
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	b01c      	add	sp, #112	@ 0x70
 80050ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80050f0:	b003      	add	sp, #12
 80050f2:	4770      	bx	lr
 80050f4:	20000020 	.word	0x20000020
 80050f8:	ffff0208 	.word	0xffff0208

080050fc <siscanf>:
 80050fc:	b40e      	push	{r1, r2, r3}
 80050fe:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005102:	b530      	push	{r4, r5, lr}
 8005104:	b09c      	sub	sp, #112	@ 0x70
 8005106:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005108:	f854 5b04 	ldr.w	r5, [r4], #4
 800510c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005110:	9002      	str	r0, [sp, #8]
 8005112:	9006      	str	r0, [sp, #24]
 8005114:	f7fb f81c 	bl	8000150 <strlen>
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <siscanf+0x4c>)
 800511a:	9003      	str	r0, [sp, #12]
 800511c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800511e:	2300      	movs	r3, #0
 8005120:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005122:	9314      	str	r3, [sp, #80]	@ 0x50
 8005124:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005128:	9007      	str	r0, [sp, #28]
 800512a:	4808      	ldr	r0, [pc, #32]	@ (800514c <siscanf+0x50>)
 800512c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005130:	462a      	mov	r2, r5
 8005132:	4623      	mov	r3, r4
 8005134:	a902      	add	r1, sp, #8
 8005136:	6800      	ldr	r0, [r0, #0]
 8005138:	9401      	str	r4, [sp, #4]
 800513a:	f002 fd17 	bl	8007b6c <__ssvfiscanf_r>
 800513e:	b01c      	add	sp, #112	@ 0x70
 8005140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005144:	b003      	add	sp, #12
 8005146:	4770      	bx	lr
 8005148:	08005173 	.word	0x08005173
 800514c:	20000020 	.word	0x20000020

08005150 <__sread>:
 8005150:	b510      	push	{r4, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005158:	f000 f880 	bl	800525c <_read_r>
 800515c:	2800      	cmp	r0, #0
 800515e:	bfab      	itete	ge
 8005160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005162:	89a3      	ldrhlt	r3, [r4, #12]
 8005164:	181b      	addge	r3, r3, r0
 8005166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800516a:	bfac      	ite	ge
 800516c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800516e:	81a3      	strhlt	r3, [r4, #12]
 8005170:	bd10      	pop	{r4, pc}

08005172 <__seofread>:
 8005172:	2000      	movs	r0, #0
 8005174:	4770      	bx	lr

08005176 <__swrite>:
 8005176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517a:	461f      	mov	r7, r3
 800517c:	898b      	ldrh	r3, [r1, #12]
 800517e:	4605      	mov	r5, r0
 8005180:	05db      	lsls	r3, r3, #23
 8005182:	460c      	mov	r4, r1
 8005184:	4616      	mov	r6, r2
 8005186:	d505      	bpl.n	8005194 <__swrite+0x1e>
 8005188:	2302      	movs	r3, #2
 800518a:	2200      	movs	r2, #0
 800518c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005190:	f000 f852 	bl	8005238 <_lseek_r>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	4632      	mov	r2, r6
 8005198:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	4628      	mov	r0, r5
 80051a0:	463b      	mov	r3, r7
 80051a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051aa:	f000 b869 	b.w	8005280 <_write_r>

080051ae <__sseek>:
 80051ae:	b510      	push	{r4, lr}
 80051b0:	460c      	mov	r4, r1
 80051b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b6:	f000 f83f 	bl	8005238 <_lseek_r>
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	bf15      	itete	ne
 80051c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051ca:	81a3      	strheq	r3, [r4, #12]
 80051cc:	bf18      	it	ne
 80051ce:	81a3      	strhne	r3, [r4, #12]
 80051d0:	bd10      	pop	{r4, pc}

080051d2 <__sclose>:
 80051d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d6:	f000 b81f 	b.w	8005218 <_close_r>

080051da <memset>:
 80051da:	4603      	mov	r3, r0
 80051dc:	4402      	add	r2, r0
 80051de:	4293      	cmp	r3, r2
 80051e0:	d100      	bne.n	80051e4 <memset+0xa>
 80051e2:	4770      	bx	lr
 80051e4:	f803 1b01 	strb.w	r1, [r3], #1
 80051e8:	e7f9      	b.n	80051de <memset+0x4>

080051ea <strncmp>:
 80051ea:	b510      	push	{r4, lr}
 80051ec:	b16a      	cbz	r2, 800520a <strncmp+0x20>
 80051ee:	3901      	subs	r1, #1
 80051f0:	1884      	adds	r4, r0, r2
 80051f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d103      	bne.n	8005206 <strncmp+0x1c>
 80051fe:	42a0      	cmp	r0, r4
 8005200:	d001      	beq.n	8005206 <strncmp+0x1c>
 8005202:	2a00      	cmp	r2, #0
 8005204:	d1f5      	bne.n	80051f2 <strncmp+0x8>
 8005206:	1ad0      	subs	r0, r2, r3
 8005208:	bd10      	pop	{r4, pc}
 800520a:	4610      	mov	r0, r2
 800520c:	e7fc      	b.n	8005208 <strncmp+0x1e>
	...

08005210 <_localeconv_r>:
 8005210:	4800      	ldr	r0, [pc, #0]	@ (8005214 <_localeconv_r+0x4>)
 8005212:	4770      	bx	lr
 8005214:	20000160 	.word	0x20000160

08005218 <_close_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	2300      	movs	r3, #0
 800521c:	4d05      	ldr	r5, [pc, #20]	@ (8005234 <_close_r+0x1c>)
 800521e:	4604      	mov	r4, r0
 8005220:	4608      	mov	r0, r1
 8005222:	602b      	str	r3, [r5, #0]
 8005224:	f7fc fd63 	bl	8001cee <_close>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_close_r+0x1a>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_close_r+0x1a>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20000420 	.word	0x20000420

08005238 <_lseek_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	4611      	mov	r1, r2
 8005240:	2200      	movs	r2, #0
 8005242:	4d05      	ldr	r5, [pc, #20]	@ (8005258 <_lseek_r+0x20>)
 8005244:	602a      	str	r2, [r5, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f7fc fd75 	bl	8001d36 <_lseek>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_lseek_r+0x1e>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_lseek_r+0x1e>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	20000420 	.word	0x20000420

0800525c <_read_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	4611      	mov	r1, r2
 8005264:	2200      	movs	r2, #0
 8005266:	4d05      	ldr	r5, [pc, #20]	@ (800527c <_read_r+0x20>)
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fc fd22 	bl	8001cb4 <_read>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_read_r+0x1e>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_read_r+0x1e>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20000420 	.word	0x20000420

08005280 <_write_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4604      	mov	r4, r0
 8005284:	4608      	mov	r0, r1
 8005286:	4611      	mov	r1, r2
 8005288:	2200      	movs	r2, #0
 800528a:	4d05      	ldr	r5, [pc, #20]	@ (80052a0 <_write_r+0x20>)
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f7fc f940 	bl	8001514 <_write>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_write_r+0x1e>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_write_r+0x1e>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20000420 	.word	0x20000420

080052a4 <__errno>:
 80052a4:	4b01      	ldr	r3, [pc, #4]	@ (80052ac <__errno+0x8>)
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000020 	.word	0x20000020

080052b0 <__libc_init_array>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	2600      	movs	r6, #0
 80052b4:	4d0c      	ldr	r5, [pc, #48]	@ (80052e8 <__libc_init_array+0x38>)
 80052b6:	4c0d      	ldr	r4, [pc, #52]	@ (80052ec <__libc_init_array+0x3c>)
 80052b8:	1b64      	subs	r4, r4, r5
 80052ba:	10a4      	asrs	r4, r4, #2
 80052bc:	42a6      	cmp	r6, r4
 80052be:	d109      	bne.n	80052d4 <__libc_init_array+0x24>
 80052c0:	f003 ff52 	bl	8009168 <_init>
 80052c4:	2600      	movs	r6, #0
 80052c6:	4d0a      	ldr	r5, [pc, #40]	@ (80052f0 <__libc_init_array+0x40>)
 80052c8:	4c0a      	ldr	r4, [pc, #40]	@ (80052f4 <__libc_init_array+0x44>)
 80052ca:	1b64      	subs	r4, r4, r5
 80052cc:	10a4      	asrs	r4, r4, #2
 80052ce:	42a6      	cmp	r6, r4
 80052d0:	d105      	bne.n	80052de <__libc_init_array+0x2e>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d8:	4798      	blx	r3
 80052da:	3601      	adds	r6, #1
 80052dc:	e7ee      	b.n	80052bc <__libc_init_array+0xc>
 80052de:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e2:	4798      	blx	r3
 80052e4:	3601      	adds	r6, #1
 80052e6:	e7f2      	b.n	80052ce <__libc_init_array+0x1e>
 80052e8:	08009684 	.word	0x08009684
 80052ec:	08009684 	.word	0x08009684
 80052f0:	08009684 	.word	0x08009684
 80052f4:	08009688 	.word	0x08009688

080052f8 <__retarget_lock_init_recursive>:
 80052f8:	4770      	bx	lr

080052fa <__retarget_lock_acquire_recursive>:
 80052fa:	4770      	bx	lr

080052fc <__retarget_lock_release_recursive>:
 80052fc:	4770      	bx	lr

080052fe <memchr>:
 80052fe:	4603      	mov	r3, r0
 8005300:	b510      	push	{r4, lr}
 8005302:	b2c9      	uxtb	r1, r1
 8005304:	4402      	add	r2, r0
 8005306:	4293      	cmp	r3, r2
 8005308:	4618      	mov	r0, r3
 800530a:	d101      	bne.n	8005310 <memchr+0x12>
 800530c:	2000      	movs	r0, #0
 800530e:	e003      	b.n	8005318 <memchr+0x1a>
 8005310:	7804      	ldrb	r4, [r0, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	428c      	cmp	r4, r1
 8005316:	d1f6      	bne.n	8005306 <memchr+0x8>
 8005318:	bd10      	pop	{r4, pc}
	...

0800531c <nanf>:
 800531c:	4800      	ldr	r0, [pc, #0]	@ (8005320 <nanf+0x4>)
 800531e:	4770      	bx	lr
 8005320:	7fc00000 	.word	0x7fc00000

08005324 <quorem>:
 8005324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	6903      	ldr	r3, [r0, #16]
 800532a:	690c      	ldr	r4, [r1, #16]
 800532c:	4607      	mov	r7, r0
 800532e:	42a3      	cmp	r3, r4
 8005330:	db7e      	blt.n	8005430 <quorem+0x10c>
 8005332:	3c01      	subs	r4, #1
 8005334:	00a3      	lsls	r3, r4, #2
 8005336:	f100 0514 	add.w	r5, r0, #20
 800533a:	f101 0814 	add.w	r8, r1, #20
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800534a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800534e:	3301      	adds	r3, #1
 8005350:	429a      	cmp	r2, r3
 8005352:	fbb2 f6f3 	udiv	r6, r2, r3
 8005356:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800535a:	d32e      	bcc.n	80053ba <quorem+0x96>
 800535c:	f04f 0a00 	mov.w	sl, #0
 8005360:	46c4      	mov	ip, r8
 8005362:	46ae      	mov	lr, r5
 8005364:	46d3      	mov	fp, sl
 8005366:	f85c 3b04 	ldr.w	r3, [ip], #4
 800536a:	b298      	uxth	r0, r3
 800536c:	fb06 a000 	mla	r0, r6, r0, sl
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	0c02      	lsrs	r2, r0, #16
 8005374:	fb06 2303 	mla	r3, r6, r3, r2
 8005378:	f8de 2000 	ldr.w	r2, [lr]
 800537c:	b280      	uxth	r0, r0
 800537e:	b292      	uxth	r2, r2
 8005380:	1a12      	subs	r2, r2, r0
 8005382:	445a      	add	r2, fp
 8005384:	f8de 0000 	ldr.w	r0, [lr]
 8005388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800538c:	b29b      	uxth	r3, r3
 800538e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005392:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005396:	b292      	uxth	r2, r2
 8005398:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800539c:	45e1      	cmp	r9, ip
 800539e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80053a2:	f84e 2b04 	str.w	r2, [lr], #4
 80053a6:	d2de      	bcs.n	8005366 <quorem+0x42>
 80053a8:	9b00      	ldr	r3, [sp, #0]
 80053aa:	58eb      	ldr	r3, [r5, r3]
 80053ac:	b92b      	cbnz	r3, 80053ba <quorem+0x96>
 80053ae:	9b01      	ldr	r3, [sp, #4]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	429d      	cmp	r5, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	d32f      	bcc.n	8005418 <quorem+0xf4>
 80053b8:	613c      	str	r4, [r7, #16]
 80053ba:	4638      	mov	r0, r7
 80053bc:	f001 f9c4 	bl	8006748 <__mcmp>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	db25      	blt.n	8005410 <quorem+0xec>
 80053c4:	4629      	mov	r1, r5
 80053c6:	2000      	movs	r0, #0
 80053c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80053cc:	f8d1 c000 	ldr.w	ip, [r1]
 80053d0:	fa1f fe82 	uxth.w	lr, r2
 80053d4:	fa1f f38c 	uxth.w	r3, ip
 80053d8:	eba3 030e 	sub.w	r3, r3, lr
 80053dc:	4403      	add	r3, r0
 80053de:	0c12      	lsrs	r2, r2, #16
 80053e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053ee:	45c1      	cmp	r9, r8
 80053f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053f4:	f841 3b04 	str.w	r3, [r1], #4
 80053f8:	d2e6      	bcs.n	80053c8 <quorem+0xa4>
 80053fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005402:	b922      	cbnz	r2, 800540e <quorem+0xea>
 8005404:	3b04      	subs	r3, #4
 8005406:	429d      	cmp	r5, r3
 8005408:	461a      	mov	r2, r3
 800540a:	d30b      	bcc.n	8005424 <quorem+0x100>
 800540c:	613c      	str	r4, [r7, #16]
 800540e:	3601      	adds	r6, #1
 8005410:	4630      	mov	r0, r6
 8005412:	b003      	add	sp, #12
 8005414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	3b04      	subs	r3, #4
 800541c:	2a00      	cmp	r2, #0
 800541e:	d1cb      	bne.n	80053b8 <quorem+0x94>
 8005420:	3c01      	subs	r4, #1
 8005422:	e7c6      	b.n	80053b2 <quorem+0x8e>
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	3b04      	subs	r3, #4
 8005428:	2a00      	cmp	r2, #0
 800542a:	d1ef      	bne.n	800540c <quorem+0xe8>
 800542c:	3c01      	subs	r4, #1
 800542e:	e7ea      	b.n	8005406 <quorem+0xe2>
 8005430:	2000      	movs	r0, #0
 8005432:	e7ee      	b.n	8005412 <quorem+0xee>
 8005434:	0000      	movs	r0, r0
	...

08005438 <_dtoa_r>:
 8005438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543c:	4614      	mov	r4, r2
 800543e:	461d      	mov	r5, r3
 8005440:	69c7      	ldr	r7, [r0, #28]
 8005442:	b097      	sub	sp, #92	@ 0x5c
 8005444:	4683      	mov	fp, r0
 8005446:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800544a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800544c:	b97f      	cbnz	r7, 800546e <_dtoa_r+0x36>
 800544e:	2010      	movs	r0, #16
 8005450:	f000 fe02 	bl	8006058 <malloc>
 8005454:	4602      	mov	r2, r0
 8005456:	f8cb 001c 	str.w	r0, [fp, #28]
 800545a:	b920      	cbnz	r0, 8005466 <_dtoa_r+0x2e>
 800545c:	21ef      	movs	r1, #239	@ 0xef
 800545e:	4ba8      	ldr	r3, [pc, #672]	@ (8005700 <_dtoa_r+0x2c8>)
 8005460:	48a8      	ldr	r0, [pc, #672]	@ (8005704 <_dtoa_r+0x2cc>)
 8005462:	f003 f96d 	bl	8008740 <__assert_func>
 8005466:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800546a:	6007      	str	r7, [r0, #0]
 800546c:	60c7      	str	r7, [r0, #12]
 800546e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	b159      	cbz	r1, 800548e <_dtoa_r+0x56>
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	2301      	movs	r3, #1
 800547a:	4093      	lsls	r3, r2
 800547c:	604a      	str	r2, [r1, #4]
 800547e:	608b      	str	r3, [r1, #8]
 8005480:	4658      	mov	r0, fp
 8005482:	f000 fedf 	bl	8006244 <_Bfree>
 8005486:	2200      	movs	r2, #0
 8005488:	f8db 301c 	ldr.w	r3, [fp, #28]
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	1e2b      	subs	r3, r5, #0
 8005490:	bfaf      	iteee	ge
 8005492:	2300      	movge	r3, #0
 8005494:	2201      	movlt	r2, #1
 8005496:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800549a:	9303      	strlt	r3, [sp, #12]
 800549c:	bfa8      	it	ge
 800549e:	6033      	strge	r3, [r6, #0]
 80054a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80054a4:	4b98      	ldr	r3, [pc, #608]	@ (8005708 <_dtoa_r+0x2d0>)
 80054a6:	bfb8      	it	lt
 80054a8:	6032      	strlt	r2, [r6, #0]
 80054aa:	ea33 0308 	bics.w	r3, r3, r8
 80054ae:	d112      	bne.n	80054d6 <_dtoa_r+0x9e>
 80054b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80054b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80054bc:	4323      	orrs	r3, r4
 80054be:	f000 8550 	beq.w	8005f62 <_dtoa_r+0xb2a>
 80054c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800570c <_dtoa_r+0x2d4>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8552 	beq.w	8005f72 <_dtoa_r+0xb3a>
 80054ce:	f10a 0303 	add.w	r3, sl, #3
 80054d2:	f000 bd4c 	b.w	8005f6e <_dtoa_r+0xb36>
 80054d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80054de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	f7fb fa5f 	bl	80009a8 <__aeabi_dcmpeq>
 80054ea:	4607      	mov	r7, r0
 80054ec:	b158      	cbz	r0, 8005506 <_dtoa_r+0xce>
 80054ee:	2301      	movs	r3, #1
 80054f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054f6:	b113      	cbz	r3, 80054fe <_dtoa_r+0xc6>
 80054f8:	4b85      	ldr	r3, [pc, #532]	@ (8005710 <_dtoa_r+0x2d8>)
 80054fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005714 <_dtoa_r+0x2dc>
 8005502:	f000 bd36 	b.w	8005f72 <_dtoa_r+0xb3a>
 8005506:	ab14      	add	r3, sp, #80	@ 0x50
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	ab15      	add	r3, sp, #84	@ 0x54
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4658      	mov	r0, fp
 8005510:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005514:	f001 fa30 	bl	8006978 <__d2b>
 8005518:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800551c:	4681      	mov	r9, r0
 800551e:	2e00      	cmp	r6, #0
 8005520:	d077      	beq.n	8005612 <_dtoa_r+0x1da>
 8005522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005528:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800552c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005530:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005534:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005538:	9712      	str	r7, [sp, #72]	@ 0x48
 800553a:	4619      	mov	r1, r3
 800553c:	2200      	movs	r2, #0
 800553e:	4b76      	ldr	r3, [pc, #472]	@ (8005718 <_dtoa_r+0x2e0>)
 8005540:	f7fa fe12 	bl	8000168 <__aeabi_dsub>
 8005544:	a368      	add	r3, pc, #416	@ (adr r3, 80056e8 <_dtoa_r+0x2b0>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
 800554e:	a368      	add	r3, pc, #416	@ (adr r3, 80056f0 <_dtoa_r+0x2b8>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fa fe0a 	bl	800016c <__adddf3>
 8005558:	4604      	mov	r4, r0
 800555a:	4630      	mov	r0, r6
 800555c:	460d      	mov	r5, r1
 800555e:	f7fa ff51 	bl	8000404 <__aeabi_i2d>
 8005562:	a365      	add	r3, pc, #404	@ (adr r3, 80056f8 <_dtoa_r+0x2c0>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fa ffb6 	bl	80004d8 <__aeabi_dmul>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4620      	mov	r0, r4
 8005572:	4629      	mov	r1, r5
 8005574:	f7fa fdfa 	bl	800016c <__adddf3>
 8005578:	4604      	mov	r4, r0
 800557a:	460d      	mov	r5, r1
 800557c:	f7fb fa5c 	bl	8000a38 <__aeabi_d2iz>
 8005580:	2200      	movs	r2, #0
 8005582:	4607      	mov	r7, r0
 8005584:	2300      	movs	r3, #0
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fb fa17 	bl	80009bc <__aeabi_dcmplt>
 800558e:	b140      	cbz	r0, 80055a2 <_dtoa_r+0x16a>
 8005590:	4638      	mov	r0, r7
 8005592:	f7fa ff37 	bl	8000404 <__aeabi_i2d>
 8005596:	4622      	mov	r2, r4
 8005598:	462b      	mov	r3, r5
 800559a:	f7fb fa05 	bl	80009a8 <__aeabi_dcmpeq>
 800559e:	b900      	cbnz	r0, 80055a2 <_dtoa_r+0x16a>
 80055a0:	3f01      	subs	r7, #1
 80055a2:	2f16      	cmp	r7, #22
 80055a4:	d853      	bhi.n	800564e <_dtoa_r+0x216>
 80055a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055aa:	4b5c      	ldr	r3, [pc, #368]	@ (800571c <_dtoa_r+0x2e4>)
 80055ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f7fb fa02 	bl	80009bc <__aeabi_dcmplt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d04a      	beq.n	8005652 <_dtoa_r+0x21a>
 80055bc:	2300      	movs	r3, #0
 80055be:	3f01      	subs	r7, #1
 80055c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055c4:	1b9b      	subs	r3, r3, r6
 80055c6:	1e5a      	subs	r2, r3, #1
 80055c8:	bf46      	itte	mi
 80055ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80055ce:	2300      	movmi	r3, #0
 80055d0:	f04f 0800 	movpl.w	r8, #0
 80055d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055d6:	bf48      	it	mi
 80055d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80055da:	2f00      	cmp	r7, #0
 80055dc:	db3b      	blt.n	8005656 <_dtoa_r+0x21e>
 80055de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80055e2:	443b      	add	r3, r7
 80055e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055e6:	2300      	movs	r3, #0
 80055e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	d866      	bhi.n	80056be <_dtoa_r+0x286>
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	bfc4      	itt	gt
 80055f4:	3b04      	subgt	r3, #4
 80055f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80055f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055fa:	bfc8      	it	gt
 80055fc:	2400      	movgt	r4, #0
 80055fe:	f1a3 0302 	sub.w	r3, r3, #2
 8005602:	bfd8      	it	le
 8005604:	2401      	movle	r4, #1
 8005606:	2b03      	cmp	r3, #3
 8005608:	d864      	bhi.n	80056d4 <_dtoa_r+0x29c>
 800560a:	e8df f003 	tbb	[pc, r3]
 800560e:	382b      	.short	0x382b
 8005610:	5636      	.short	0x5636
 8005612:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005616:	441e      	add	r6, r3
 8005618:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800561c:	2b20      	cmp	r3, #32
 800561e:	bfc1      	itttt	gt
 8005620:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005624:	fa08 f803 	lslgt.w	r8, r8, r3
 8005628:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800562c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005630:	bfd6      	itet	le
 8005632:	f1c3 0320 	rsble	r3, r3, #32
 8005636:	ea48 0003 	orrgt.w	r0, r8, r3
 800563a:	fa04 f003 	lslle.w	r0, r4, r3
 800563e:	f7fa fed1 	bl	80003e4 <__aeabi_ui2d>
 8005642:	2201      	movs	r2, #1
 8005644:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005648:	3e01      	subs	r6, #1
 800564a:	9212      	str	r2, [sp, #72]	@ 0x48
 800564c:	e775      	b.n	800553a <_dtoa_r+0x102>
 800564e:	2301      	movs	r3, #1
 8005650:	e7b6      	b.n	80055c0 <_dtoa_r+0x188>
 8005652:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005654:	e7b5      	b.n	80055c2 <_dtoa_r+0x18a>
 8005656:	427b      	negs	r3, r7
 8005658:	930a      	str	r3, [sp, #40]	@ 0x28
 800565a:	2300      	movs	r3, #0
 800565c:	eba8 0807 	sub.w	r8, r8, r7
 8005660:	930e      	str	r3, [sp, #56]	@ 0x38
 8005662:	e7c2      	b.n	80055ea <_dtoa_r+0x1b2>
 8005664:	2300      	movs	r3, #0
 8005666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005668:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800566a:	2b00      	cmp	r3, #0
 800566c:	dc35      	bgt.n	80056da <_dtoa_r+0x2a2>
 800566e:	2301      	movs	r3, #1
 8005670:	461a      	mov	r2, r3
 8005672:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005676:	9221      	str	r2, [sp, #132]	@ 0x84
 8005678:	e00b      	b.n	8005692 <_dtoa_r+0x25a>
 800567a:	2301      	movs	r3, #1
 800567c:	e7f3      	b.n	8005666 <_dtoa_r+0x22e>
 800567e:	2300      	movs	r3, #0
 8005680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005682:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	9308      	str	r3, [sp, #32]
 8005688:	3301      	adds	r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	9307      	str	r3, [sp, #28]
 800568e:	bfb8      	it	lt
 8005690:	2301      	movlt	r3, #1
 8005692:	2100      	movs	r1, #0
 8005694:	2204      	movs	r2, #4
 8005696:	f8db 001c 	ldr.w	r0, [fp, #28]
 800569a:	f102 0514 	add.w	r5, r2, #20
 800569e:	429d      	cmp	r5, r3
 80056a0:	d91f      	bls.n	80056e2 <_dtoa_r+0x2aa>
 80056a2:	6041      	str	r1, [r0, #4]
 80056a4:	4658      	mov	r0, fp
 80056a6:	f000 fd8d 	bl	80061c4 <_Balloc>
 80056aa:	4682      	mov	sl, r0
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d139      	bne.n	8005724 <_dtoa_r+0x2ec>
 80056b0:	4602      	mov	r2, r0
 80056b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80056b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <_dtoa_r+0x2e8>)
 80056b8:	e6d2      	b.n	8005460 <_dtoa_r+0x28>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e7e0      	b.n	8005680 <_dtoa_r+0x248>
 80056be:	2401      	movs	r4, #1
 80056c0:	2300      	movs	r3, #0
 80056c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80056c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	2200      	movs	r2, #0
 80056cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80056d0:	2312      	movs	r3, #18
 80056d2:	e7d0      	b.n	8005676 <_dtoa_r+0x23e>
 80056d4:	2301      	movs	r3, #1
 80056d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056d8:	e7f5      	b.n	80056c6 <_dtoa_r+0x28e>
 80056da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80056e0:	e7d7      	b.n	8005692 <_dtoa_r+0x25a>
 80056e2:	3101      	adds	r1, #1
 80056e4:	0052      	lsls	r2, r2, #1
 80056e6:	e7d8      	b.n	800569a <_dtoa_r+0x262>
 80056e8:	636f4361 	.word	0x636f4361
 80056ec:	3fd287a7 	.word	0x3fd287a7
 80056f0:	8b60c8b3 	.word	0x8b60c8b3
 80056f4:	3fc68a28 	.word	0x3fc68a28
 80056f8:	509f79fb 	.word	0x509f79fb
 80056fc:	3fd34413 	.word	0x3fd34413
 8005700:	08009276 	.word	0x08009276
 8005704:	0800928d 	.word	0x0800928d
 8005708:	7ff00000 	.word	0x7ff00000
 800570c:	08009272 	.word	0x08009272
 8005710:	080095d1 	.word	0x080095d1
 8005714:	080095d0 	.word	0x080095d0
 8005718:	3ff80000 	.word	0x3ff80000
 800571c:	08009388 	.word	0x08009388
 8005720:	080092e5 	.word	0x080092e5
 8005724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005728:	6018      	str	r0, [r3, #0]
 800572a:	9b07      	ldr	r3, [sp, #28]
 800572c:	2b0e      	cmp	r3, #14
 800572e:	f200 80a4 	bhi.w	800587a <_dtoa_r+0x442>
 8005732:	2c00      	cmp	r4, #0
 8005734:	f000 80a1 	beq.w	800587a <_dtoa_r+0x442>
 8005738:	2f00      	cmp	r7, #0
 800573a:	dd33      	ble.n	80057a4 <_dtoa_r+0x36c>
 800573c:	4b86      	ldr	r3, [pc, #536]	@ (8005958 <_dtoa_r+0x520>)
 800573e:	f007 020f 	and.w	r2, r7, #15
 8005742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005746:	05f8      	lsls	r0, r7, #23
 8005748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800574c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005750:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005754:	d516      	bpl.n	8005784 <_dtoa_r+0x34c>
 8005756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800575a:	4b80      	ldr	r3, [pc, #512]	@ (800595c <_dtoa_r+0x524>)
 800575c:	2603      	movs	r6, #3
 800575e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005762:	f7fa ffe3 	bl	800072c <__aeabi_ddiv>
 8005766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800576a:	f004 040f 	and.w	r4, r4, #15
 800576e:	4d7b      	ldr	r5, [pc, #492]	@ (800595c <_dtoa_r+0x524>)
 8005770:	b954      	cbnz	r4, 8005788 <_dtoa_r+0x350>
 8005772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800577a:	f7fa ffd7 	bl	800072c <__aeabi_ddiv>
 800577e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005782:	e028      	b.n	80057d6 <_dtoa_r+0x39e>
 8005784:	2602      	movs	r6, #2
 8005786:	e7f2      	b.n	800576e <_dtoa_r+0x336>
 8005788:	07e1      	lsls	r1, r4, #31
 800578a:	d508      	bpl.n	800579e <_dtoa_r+0x366>
 800578c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005794:	f7fa fea0 	bl	80004d8 <__aeabi_dmul>
 8005798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800579c:	3601      	adds	r6, #1
 800579e:	1064      	asrs	r4, r4, #1
 80057a0:	3508      	adds	r5, #8
 80057a2:	e7e5      	b.n	8005770 <_dtoa_r+0x338>
 80057a4:	f000 80d2 	beq.w	800594c <_dtoa_r+0x514>
 80057a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057ac:	427c      	negs	r4, r7
 80057ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005958 <_dtoa_r+0x520>)
 80057b0:	f004 020f 	and.w	r2, r4, #15
 80057b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	f7fa fe8c 	bl	80004d8 <__aeabi_dmul>
 80057c0:	2602      	movs	r6, #2
 80057c2:	2300      	movs	r3, #0
 80057c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c8:	4d64      	ldr	r5, [pc, #400]	@ (800595c <_dtoa_r+0x524>)
 80057ca:	1124      	asrs	r4, r4, #4
 80057cc:	2c00      	cmp	r4, #0
 80057ce:	f040 80b2 	bne.w	8005936 <_dtoa_r+0x4fe>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1d3      	bne.n	800577e <_dtoa_r+0x346>
 80057d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80057da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80b7 	beq.w	8005950 <_dtoa_r+0x518>
 80057e2:	2200      	movs	r2, #0
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	4b5d      	ldr	r3, [pc, #372]	@ (8005960 <_dtoa_r+0x528>)
 80057ea:	f7fb f8e7 	bl	80009bc <__aeabi_dcmplt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f000 80ae 	beq.w	8005950 <_dtoa_r+0x518>
 80057f4:	9b07      	ldr	r3, [sp, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80aa 	beq.w	8005950 <_dtoa_r+0x518>
 80057fc:	9b08      	ldr	r3, [sp, #32]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	dd37      	ble.n	8005872 <_dtoa_r+0x43a>
 8005802:	1e7b      	subs	r3, r7, #1
 8005804:	4620      	mov	r0, r4
 8005806:	9304      	str	r3, [sp, #16]
 8005808:	2200      	movs	r2, #0
 800580a:	4629      	mov	r1, r5
 800580c:	4b55      	ldr	r3, [pc, #340]	@ (8005964 <_dtoa_r+0x52c>)
 800580e:	f7fa fe63 	bl	80004d8 <__aeabi_dmul>
 8005812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005816:	9c08      	ldr	r4, [sp, #32]
 8005818:	3601      	adds	r6, #1
 800581a:	4630      	mov	r0, r6
 800581c:	f7fa fdf2 	bl	8000404 <__aeabi_i2d>
 8005820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005824:	f7fa fe58 	bl	80004d8 <__aeabi_dmul>
 8005828:	2200      	movs	r2, #0
 800582a:	4b4f      	ldr	r3, [pc, #316]	@ (8005968 <_dtoa_r+0x530>)
 800582c:	f7fa fc9e 	bl	800016c <__adddf3>
 8005830:	4605      	mov	r5, r0
 8005832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005836:	2c00      	cmp	r4, #0
 8005838:	f040 809a 	bne.w	8005970 <_dtoa_r+0x538>
 800583c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005840:	2200      	movs	r2, #0
 8005842:	4b4a      	ldr	r3, [pc, #296]	@ (800596c <_dtoa_r+0x534>)
 8005844:	f7fa fc90 	bl	8000168 <__aeabi_dsub>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005850:	462a      	mov	r2, r5
 8005852:	4633      	mov	r3, r6
 8005854:	f7fb f8d0 	bl	80009f8 <__aeabi_dcmpgt>
 8005858:	2800      	cmp	r0, #0
 800585a:	f040 828e 	bne.w	8005d7a <_dtoa_r+0x942>
 800585e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005862:	462a      	mov	r2, r5
 8005864:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005868:	f7fb f8a8 	bl	80009bc <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 8127 	bne.w	8005ac0 <_dtoa_r+0x688>
 8005872:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800587a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800587c:	2b00      	cmp	r3, #0
 800587e:	f2c0 8163 	blt.w	8005b48 <_dtoa_r+0x710>
 8005882:	2f0e      	cmp	r7, #14
 8005884:	f300 8160 	bgt.w	8005b48 <_dtoa_r+0x710>
 8005888:	4b33      	ldr	r3, [pc, #204]	@ (8005958 <_dtoa_r+0x520>)
 800588a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800588e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005892:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005896:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005898:	2b00      	cmp	r3, #0
 800589a:	da03      	bge.n	80058a4 <_dtoa_r+0x46c>
 800589c:	9b07      	ldr	r3, [sp, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f340 8100 	ble.w	8005aa4 <_dtoa_r+0x66c>
 80058a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80058a8:	4656      	mov	r6, sl
 80058aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fa ff3b 	bl	800072c <__aeabi_ddiv>
 80058b6:	f7fb f8bf 	bl	8000a38 <__aeabi_d2iz>
 80058ba:	4680      	mov	r8, r0
 80058bc:	f7fa fda2 	bl	8000404 <__aeabi_i2d>
 80058c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058c4:	f7fa fe08 	bl	80004d8 <__aeabi_dmul>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4620      	mov	r0, r4
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7fa fc4a 	bl	8000168 <__aeabi_dsub>
 80058d4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80058d8:	9d07      	ldr	r5, [sp, #28]
 80058da:	f806 4b01 	strb.w	r4, [r6], #1
 80058de:	eba6 040a 	sub.w	r4, r6, sl
 80058e2:	42a5      	cmp	r5, r4
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	f040 8116 	bne.w	8005b18 <_dtoa_r+0x6e0>
 80058ec:	f7fa fc3e 	bl	800016c <__adddf3>
 80058f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058f4:	4604      	mov	r4, r0
 80058f6:	460d      	mov	r5, r1
 80058f8:	f7fb f87e 	bl	80009f8 <__aeabi_dcmpgt>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f040 80f8 	bne.w	8005af2 <_dtoa_r+0x6ba>
 8005902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005906:	4620      	mov	r0, r4
 8005908:	4629      	mov	r1, r5
 800590a:	f7fb f84d 	bl	80009a8 <__aeabi_dcmpeq>
 800590e:	b118      	cbz	r0, 8005918 <_dtoa_r+0x4e0>
 8005910:	f018 0f01 	tst.w	r8, #1
 8005914:	f040 80ed 	bne.w	8005af2 <_dtoa_r+0x6ba>
 8005918:	4649      	mov	r1, r9
 800591a:	4658      	mov	r0, fp
 800591c:	f000 fc92 	bl	8006244 <_Bfree>
 8005920:	2300      	movs	r3, #0
 8005922:	7033      	strb	r3, [r6, #0]
 8005924:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005926:	3701      	adds	r7, #1
 8005928:	601f      	str	r7, [r3, #0]
 800592a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8320 	beq.w	8005f72 <_dtoa_r+0xb3a>
 8005932:	601e      	str	r6, [r3, #0]
 8005934:	e31d      	b.n	8005f72 <_dtoa_r+0xb3a>
 8005936:	07e2      	lsls	r2, r4, #31
 8005938:	d505      	bpl.n	8005946 <_dtoa_r+0x50e>
 800593a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800593e:	f7fa fdcb 	bl	80004d8 <__aeabi_dmul>
 8005942:	2301      	movs	r3, #1
 8005944:	3601      	adds	r6, #1
 8005946:	1064      	asrs	r4, r4, #1
 8005948:	3508      	adds	r5, #8
 800594a:	e73f      	b.n	80057cc <_dtoa_r+0x394>
 800594c:	2602      	movs	r6, #2
 800594e:	e742      	b.n	80057d6 <_dtoa_r+0x39e>
 8005950:	9c07      	ldr	r4, [sp, #28]
 8005952:	9704      	str	r7, [sp, #16]
 8005954:	e761      	b.n	800581a <_dtoa_r+0x3e2>
 8005956:	bf00      	nop
 8005958:	08009388 	.word	0x08009388
 800595c:	08009360 	.word	0x08009360
 8005960:	3ff00000 	.word	0x3ff00000
 8005964:	40240000 	.word	0x40240000
 8005968:	401c0000 	.word	0x401c0000
 800596c:	40140000 	.word	0x40140000
 8005970:	4b70      	ldr	r3, [pc, #448]	@ (8005b34 <_dtoa_r+0x6fc>)
 8005972:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800597c:	4454      	add	r4, sl
 800597e:	2900      	cmp	r1, #0
 8005980:	d045      	beq.n	8005a0e <_dtoa_r+0x5d6>
 8005982:	2000      	movs	r0, #0
 8005984:	496c      	ldr	r1, [pc, #432]	@ (8005b38 <_dtoa_r+0x700>)
 8005986:	f7fa fed1 	bl	800072c <__aeabi_ddiv>
 800598a:	4633      	mov	r3, r6
 800598c:	462a      	mov	r2, r5
 800598e:	f7fa fbeb 	bl	8000168 <__aeabi_dsub>
 8005992:	4656      	mov	r6, sl
 8005994:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599c:	f7fb f84c 	bl	8000a38 <__aeabi_d2iz>
 80059a0:	4605      	mov	r5, r0
 80059a2:	f7fa fd2f 	bl	8000404 <__aeabi_i2d>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ae:	f7fa fbdb 	bl	8000168 <__aeabi_dsub>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	3530      	adds	r5, #48	@ 0x30
 80059b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059c0:	f806 5b01 	strb.w	r5, [r6], #1
 80059c4:	f7fa fffa 	bl	80009bc <__aeabi_dcmplt>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d163      	bne.n	8005a94 <_dtoa_r+0x65c>
 80059cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059d0:	2000      	movs	r0, #0
 80059d2:	495a      	ldr	r1, [pc, #360]	@ (8005b3c <_dtoa_r+0x704>)
 80059d4:	f7fa fbc8 	bl	8000168 <__aeabi_dsub>
 80059d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059dc:	f7fa ffee 	bl	80009bc <__aeabi_dcmplt>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	f040 8087 	bne.w	8005af4 <_dtoa_r+0x6bc>
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	f43f af43 	beq.w	8005872 <_dtoa_r+0x43a>
 80059ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059f0:	2200      	movs	r2, #0
 80059f2:	4b53      	ldr	r3, [pc, #332]	@ (8005b40 <_dtoa_r+0x708>)
 80059f4:	f7fa fd70 	bl	80004d8 <__aeabi_dmul>
 80059f8:	2200      	movs	r2, #0
 80059fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a02:	4b4f      	ldr	r3, [pc, #316]	@ (8005b40 <_dtoa_r+0x708>)
 8005a04:	f7fa fd68 	bl	80004d8 <__aeabi_dmul>
 8005a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a0c:	e7c4      	b.n	8005998 <_dtoa_r+0x560>
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	f7fa fd61 	bl	80004d8 <__aeabi_dmul>
 8005a16:	4656      	mov	r6, sl
 8005a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a22:	f7fb f809 	bl	8000a38 <__aeabi_d2iz>
 8005a26:	4605      	mov	r5, r0
 8005a28:	f7fa fcec 	bl	8000404 <__aeabi_i2d>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a34:	f7fa fb98 	bl	8000168 <__aeabi_dsub>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	3530      	adds	r5, #48	@ 0x30
 8005a3e:	f806 5b01 	strb.w	r5, [r6], #1
 8005a42:	42a6      	cmp	r6, r4
 8005a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	d124      	bne.n	8005a98 <_dtoa_r+0x660>
 8005a4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a52:	4b39      	ldr	r3, [pc, #228]	@ (8005b38 <_dtoa_r+0x700>)
 8005a54:	f7fa fb8a 	bl	800016c <__adddf3>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a60:	f7fa ffca 	bl	80009f8 <__aeabi_dcmpgt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d145      	bne.n	8005af4 <_dtoa_r+0x6bc>
 8005a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	4932      	ldr	r1, [pc, #200]	@ (8005b38 <_dtoa_r+0x700>)
 8005a70:	f7fa fb7a 	bl	8000168 <__aeabi_dsub>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a7c:	f7fa ff9e 	bl	80009bc <__aeabi_dcmplt>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f43f aef6 	beq.w	8005872 <_dtoa_r+0x43a>
 8005a86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a88:	1e73      	subs	r3, r6, #1
 8005a8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a90:	2b30      	cmp	r3, #48	@ 0x30
 8005a92:	d0f8      	beq.n	8005a86 <_dtoa_r+0x64e>
 8005a94:	9f04      	ldr	r7, [sp, #16]
 8005a96:	e73f      	b.n	8005918 <_dtoa_r+0x4e0>
 8005a98:	4b29      	ldr	r3, [pc, #164]	@ (8005b40 <_dtoa_r+0x708>)
 8005a9a:	f7fa fd1d 	bl	80004d8 <__aeabi_dmul>
 8005a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aa2:	e7bc      	b.n	8005a1e <_dtoa_r+0x5e6>
 8005aa4:	d10c      	bne.n	8005ac0 <_dtoa_r+0x688>
 8005aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	4b25      	ldr	r3, [pc, #148]	@ (8005b44 <_dtoa_r+0x70c>)
 8005aae:	f7fa fd13 	bl	80004d8 <__aeabi_dmul>
 8005ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ab6:	f7fa ff95 	bl	80009e4 <__aeabi_dcmpge>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f000 815b 	beq.w	8005d76 <_dtoa_r+0x93e>
 8005ac0:	2400      	movs	r4, #0
 8005ac2:	4625      	mov	r5, r4
 8005ac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ac6:	4656      	mov	r6, sl
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	9304      	str	r3, [sp, #16]
 8005acc:	2700      	movs	r7, #0
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4658      	mov	r0, fp
 8005ad2:	f000 fbb7 	bl	8006244 <_Bfree>
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	d0dc      	beq.n	8005a94 <_dtoa_r+0x65c>
 8005ada:	b12f      	cbz	r7, 8005ae8 <_dtoa_r+0x6b0>
 8005adc:	42af      	cmp	r7, r5
 8005ade:	d003      	beq.n	8005ae8 <_dtoa_r+0x6b0>
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	4658      	mov	r0, fp
 8005ae4:	f000 fbae 	bl	8006244 <_Bfree>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4658      	mov	r0, fp
 8005aec:	f000 fbaa 	bl	8006244 <_Bfree>
 8005af0:	e7d0      	b.n	8005a94 <_dtoa_r+0x65c>
 8005af2:	9704      	str	r7, [sp, #16]
 8005af4:	4633      	mov	r3, r6
 8005af6:	461e      	mov	r6, r3
 8005af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005afc:	2a39      	cmp	r2, #57	@ 0x39
 8005afe:	d107      	bne.n	8005b10 <_dtoa_r+0x6d8>
 8005b00:	459a      	cmp	sl, r3
 8005b02:	d1f8      	bne.n	8005af6 <_dtoa_r+0x6be>
 8005b04:	9a04      	ldr	r2, [sp, #16]
 8005b06:	3201      	adds	r2, #1
 8005b08:	9204      	str	r2, [sp, #16]
 8005b0a:	2230      	movs	r2, #48	@ 0x30
 8005b0c:	f88a 2000 	strb.w	r2, [sl]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	3201      	adds	r2, #1
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	e7bd      	b.n	8005a94 <_dtoa_r+0x65c>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4b09      	ldr	r3, [pc, #36]	@ (8005b40 <_dtoa_r+0x708>)
 8005b1c:	f7fa fcdc 	bl	80004d8 <__aeabi_dmul>
 8005b20:	2200      	movs	r2, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	4604      	mov	r4, r0
 8005b26:	460d      	mov	r5, r1
 8005b28:	f7fa ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f43f aebc 	beq.w	80058aa <_dtoa_r+0x472>
 8005b32:	e6f1      	b.n	8005918 <_dtoa_r+0x4e0>
 8005b34:	08009388 	.word	0x08009388
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	3ff00000 	.word	0x3ff00000
 8005b40:	40240000 	.word	0x40240000
 8005b44:	40140000 	.word	0x40140000
 8005b48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	f000 80db 	beq.w	8005d06 <_dtoa_r+0x8ce>
 8005b50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b52:	2a01      	cmp	r2, #1
 8005b54:	f300 80bf 	bgt.w	8005cd6 <_dtoa_r+0x89e>
 8005b58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	f000 80b7 	beq.w	8005cce <_dtoa_r+0x896>
 8005b60:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b64:	4646      	mov	r6, r8
 8005b66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	441a      	add	r2, r3
 8005b6e:	4658      	mov	r0, fp
 8005b70:	4498      	add	r8, r3
 8005b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b74:	f000 fc64 	bl	8006440 <__i2b>
 8005b78:	4605      	mov	r5, r0
 8005b7a:	b15e      	cbz	r6, 8005b94 <_dtoa_r+0x75c>
 8005b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dd08      	ble.n	8005b94 <_dtoa_r+0x75c>
 8005b82:	42b3      	cmp	r3, r6
 8005b84:	bfa8      	it	ge
 8005b86:	4633      	movge	r3, r6
 8005b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b8a:	eba8 0803 	sub.w	r8, r8, r3
 8005b8e:	1af6      	subs	r6, r6, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b96:	b1f3      	cbz	r3, 8005bd6 <_dtoa_r+0x79e>
 8005b98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80b7 	beq.w	8005d0e <_dtoa_r+0x8d6>
 8005ba0:	b18c      	cbz	r4, 8005bc6 <_dtoa_r+0x78e>
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	4658      	mov	r0, fp
 8005ba8:	f000 fd08 	bl	80065bc <__pow5mult>
 8005bac:	464a      	mov	r2, r9
 8005bae:	4601      	mov	r1, r0
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f000 fc5a 	bl	800646c <__multiply>
 8005bb8:	4649      	mov	r1, r9
 8005bba:	9004      	str	r0, [sp, #16]
 8005bbc:	4658      	mov	r0, fp
 8005bbe:	f000 fb41 	bl	8006244 <_Bfree>
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	4699      	mov	r9, r3
 8005bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bc8:	1b1a      	subs	r2, r3, r4
 8005bca:	d004      	beq.n	8005bd6 <_dtoa_r+0x79e>
 8005bcc:	4649      	mov	r1, r9
 8005bce:	4658      	mov	r0, fp
 8005bd0:	f000 fcf4 	bl	80065bc <__pow5mult>
 8005bd4:	4681      	mov	r9, r0
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4658      	mov	r0, fp
 8005bda:	f000 fc31 	bl	8006440 <__i2b>
 8005bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005be0:	4604      	mov	r4, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 81c9 	beq.w	8005f7a <_dtoa_r+0xb42>
 8005be8:	461a      	mov	r2, r3
 8005bea:	4601      	mov	r1, r0
 8005bec:	4658      	mov	r0, fp
 8005bee:	f000 fce5 	bl	80065bc <__pow5mult>
 8005bf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	f300 808f 	bgt.w	8005d1a <_dtoa_r+0x8e2>
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 8087 	bne.w	8005d12 <_dtoa_r+0x8da>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f040 8083 	bne.w	8005d16 <_dtoa_r+0x8de>
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c16:	0d1b      	lsrs	r3, r3, #20
 8005c18:	051b      	lsls	r3, r3, #20
 8005c1a:	b12b      	cbz	r3, 8005c28 <_dtoa_r+0x7f0>
 8005c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1e:	f108 0801 	add.w	r8, r8, #1
 8005c22:	3301      	adds	r3, #1
 8005c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c26:	2301      	movs	r3, #1
 8005c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 81aa 	beq.w	8005f86 <_dtoa_r+0xb4e>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c38:	6918      	ldr	r0, [r3, #16]
 8005c3a:	f000 fbb5 	bl	80063a8 <__hi0bits>
 8005c3e:	f1c0 0020 	rsb	r0, r0, #32
 8005c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c44:	4418      	add	r0, r3
 8005c46:	f010 001f 	ands.w	r0, r0, #31
 8005c4a:	d071      	beq.n	8005d30 <_dtoa_r+0x8f8>
 8005c4c:	f1c0 0320 	rsb	r3, r0, #32
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	dd65      	ble.n	8005d20 <_dtoa_r+0x8e8>
 8005c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c56:	f1c0 001c 	rsb	r0, r0, #28
 8005c5a:	4403      	add	r3, r0
 8005c5c:	4480      	add	r8, r0
 8005c5e:	4406      	add	r6, r0
 8005c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c62:	f1b8 0f00 	cmp.w	r8, #0
 8005c66:	dd05      	ble.n	8005c74 <_dtoa_r+0x83c>
 8005c68:	4649      	mov	r1, r9
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	4658      	mov	r0, fp
 8005c6e:	f000 fcff 	bl	8006670 <__lshift>
 8005c72:	4681      	mov	r9, r0
 8005c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dd05      	ble.n	8005c86 <_dtoa_r+0x84e>
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4658      	mov	r0, fp
 8005c80:	f000 fcf6 	bl	8006670 <__lshift>
 8005c84:	4604      	mov	r4, r0
 8005c86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d053      	beq.n	8005d34 <_dtoa_r+0x8fc>
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4648      	mov	r0, r9
 8005c90:	f000 fd5a 	bl	8006748 <__mcmp>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	da4d      	bge.n	8005d34 <_dtoa_r+0x8fc>
 8005c98:	1e7b      	subs	r3, r7, #1
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	220a      	movs	r2, #10
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4658      	mov	r0, fp
 8005ca4:	f000 faf0 	bl	8006288 <__multadd>
 8005ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005caa:	4681      	mov	r9, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 816c 	beq.w	8005f8a <_dtoa_r+0xb52>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	4658      	mov	r0, fp
 8005cba:	f000 fae5 	bl	8006288 <__multadd>
 8005cbe:	9b08      	ldr	r3, [sp, #32]
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dc61      	bgt.n	8005d8a <_dtoa_r+0x952>
 8005cc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	dc3b      	bgt.n	8005d44 <_dtoa_r+0x90c>
 8005ccc:	e05d      	b.n	8005d8a <_dtoa_r+0x952>
 8005cce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cd0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005cd4:	e746      	b.n	8005b64 <_dtoa_r+0x72c>
 8005cd6:	9b07      	ldr	r3, [sp, #28]
 8005cd8:	1e5c      	subs	r4, r3, #1
 8005cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	bfbf      	itttt	lt
 8005ce0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ce2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005ce4:	1ae3      	sublt	r3, r4, r3
 8005ce6:	18d2      	addlt	r2, r2, r3
 8005ce8:	bfa8      	it	ge
 8005cea:	1b1c      	subge	r4, r3, r4
 8005cec:	9b07      	ldr	r3, [sp, #28]
 8005cee:	bfbe      	ittt	lt
 8005cf0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005cf2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005cf4:	2400      	movlt	r4, #0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfb5      	itete	lt
 8005cfa:	eba8 0603 	sublt.w	r6, r8, r3
 8005cfe:	4646      	movge	r6, r8
 8005d00:	2300      	movlt	r3, #0
 8005d02:	9b07      	ldrge	r3, [sp, #28]
 8005d04:	e730      	b.n	8005b68 <_dtoa_r+0x730>
 8005d06:	4646      	mov	r6, r8
 8005d08:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d0a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005d0c:	e735      	b.n	8005b7a <_dtoa_r+0x742>
 8005d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d10:	e75c      	b.n	8005bcc <_dtoa_r+0x794>
 8005d12:	2300      	movs	r3, #0
 8005d14:	e788      	b.n	8005c28 <_dtoa_r+0x7f0>
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	e786      	b.n	8005c28 <_dtoa_r+0x7f0>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d1e:	e788      	b.n	8005c32 <_dtoa_r+0x7fa>
 8005d20:	d09f      	beq.n	8005c62 <_dtoa_r+0x82a>
 8005d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d24:	331c      	adds	r3, #28
 8005d26:	441a      	add	r2, r3
 8005d28:	4498      	add	r8, r3
 8005d2a:	441e      	add	r6, r3
 8005d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d2e:	e798      	b.n	8005c62 <_dtoa_r+0x82a>
 8005d30:	4603      	mov	r3, r0
 8005d32:	e7f6      	b.n	8005d22 <_dtoa_r+0x8ea>
 8005d34:	9b07      	ldr	r3, [sp, #28]
 8005d36:	9704      	str	r7, [sp, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dc20      	bgt.n	8005d7e <_dtoa_r+0x946>
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	dd1e      	ble.n	8005d82 <_dtoa_r+0x94a>
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f47f aebc 	bne.w	8005ac4 <_dtoa_r+0x68c>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	2205      	movs	r2, #5
 8005d50:	4658      	mov	r0, fp
 8005d52:	f000 fa99 	bl	8006288 <__multadd>
 8005d56:	4601      	mov	r1, r0
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4648      	mov	r0, r9
 8005d5c:	f000 fcf4 	bl	8006748 <__mcmp>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	f77f aeaf 	ble.w	8005ac4 <_dtoa_r+0x68c>
 8005d66:	2331      	movs	r3, #49	@ 0x31
 8005d68:	4656      	mov	r6, sl
 8005d6a:	f806 3b01 	strb.w	r3, [r6], #1
 8005d6e:	9b04      	ldr	r3, [sp, #16]
 8005d70:	3301      	adds	r3, #1
 8005d72:	9304      	str	r3, [sp, #16]
 8005d74:	e6aa      	b.n	8005acc <_dtoa_r+0x694>
 8005d76:	9c07      	ldr	r4, [sp, #28]
 8005d78:	9704      	str	r7, [sp, #16]
 8005d7a:	4625      	mov	r5, r4
 8005d7c:	e7f3      	b.n	8005d66 <_dtoa_r+0x92e>
 8005d7e:	9b07      	ldr	r3, [sp, #28]
 8005d80:	9308      	str	r3, [sp, #32]
 8005d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8104 	beq.w	8005f92 <_dtoa_r+0xb5a>
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	dd05      	ble.n	8005d9a <_dtoa_r+0x962>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4632      	mov	r2, r6
 8005d92:	4658      	mov	r0, fp
 8005d94:	f000 fc6c 	bl	8006670 <__lshift>
 8005d98:	4605      	mov	r5, r0
 8005d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d05a      	beq.n	8005e56 <_dtoa_r+0xa1e>
 8005da0:	4658      	mov	r0, fp
 8005da2:	6869      	ldr	r1, [r5, #4]
 8005da4:	f000 fa0e 	bl	80061c4 <_Balloc>
 8005da8:	4606      	mov	r6, r0
 8005daa:	b928      	cbnz	r0, 8005db8 <_dtoa_r+0x980>
 8005dac:	4602      	mov	r2, r0
 8005dae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005db2:	4b83      	ldr	r3, [pc, #524]	@ (8005fc0 <_dtoa_r+0xb88>)
 8005db4:	f7ff bb54 	b.w	8005460 <_dtoa_r+0x28>
 8005db8:	692a      	ldr	r2, [r5, #16]
 8005dba:	f105 010c 	add.w	r1, r5, #12
 8005dbe:	3202      	adds	r2, #2
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	300c      	adds	r0, #12
 8005dc4:	f002 fca8 	bl	8008718 <memcpy>
 8005dc8:	2201      	movs	r2, #1
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4658      	mov	r0, fp
 8005dce:	f000 fc4f 	bl	8006670 <__lshift>
 8005dd2:	462f      	mov	r7, r5
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	f10a 0301 	add.w	r3, sl, #1
 8005dda:	9307      	str	r3, [sp, #28]
 8005ddc:	9b08      	ldr	r3, [sp, #32]
 8005dde:	4453      	add	r3, sl
 8005de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005de2:	9b02      	ldr	r3, [sp, #8]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dea:	9b07      	ldr	r3, [sp, #28]
 8005dec:	4621      	mov	r1, r4
 8005dee:	3b01      	subs	r3, #1
 8005df0:	4648      	mov	r0, r9
 8005df2:	9302      	str	r3, [sp, #8]
 8005df4:	f7ff fa96 	bl	8005324 <quorem>
 8005df8:	4639      	mov	r1, r7
 8005dfa:	9008      	str	r0, [sp, #32]
 8005dfc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e00:	4648      	mov	r0, r9
 8005e02:	f000 fca1 	bl	8006748 <__mcmp>
 8005e06:	462a      	mov	r2, r5
 8005e08:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f000 fcb7 	bl	8006780 <__mdiff>
 8005e12:	68c2      	ldr	r2, [r0, #12]
 8005e14:	4606      	mov	r6, r0
 8005e16:	bb02      	cbnz	r2, 8005e5a <_dtoa_r+0xa22>
 8005e18:	4601      	mov	r1, r0
 8005e1a:	4648      	mov	r0, r9
 8005e1c:	f000 fc94 	bl	8006748 <__mcmp>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4631      	mov	r1, r6
 8005e24:	4658      	mov	r0, fp
 8005e26:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e28:	f000 fa0c 	bl	8006244 <_Bfree>
 8005e2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e30:	9e07      	ldr	r6, [sp, #28]
 8005e32:	ea43 0102 	orr.w	r1, r3, r2
 8005e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e38:	4319      	orrs	r1, r3
 8005e3a:	d110      	bne.n	8005e5e <_dtoa_r+0xa26>
 8005e3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e40:	d029      	beq.n	8005e96 <_dtoa_r+0xa5e>
 8005e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dd02      	ble.n	8005e4e <_dtoa_r+0xa16>
 8005e48:	9b08      	ldr	r3, [sp, #32]
 8005e4a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005e4e:	9b02      	ldr	r3, [sp, #8]
 8005e50:	f883 8000 	strb.w	r8, [r3]
 8005e54:	e63b      	b.n	8005ace <_dtoa_r+0x696>
 8005e56:	4628      	mov	r0, r5
 8005e58:	e7bb      	b.n	8005dd2 <_dtoa_r+0x99a>
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	e7e1      	b.n	8005e22 <_dtoa_r+0x9ea>
 8005e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	db04      	blt.n	8005e6e <_dtoa_r+0xa36>
 8005e64:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005e66:	430b      	orrs	r3, r1
 8005e68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	d120      	bne.n	8005eb0 <_dtoa_r+0xa78>
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	dded      	ble.n	8005e4e <_dtoa_r+0xa16>
 8005e72:	4649      	mov	r1, r9
 8005e74:	2201      	movs	r2, #1
 8005e76:	4658      	mov	r0, fp
 8005e78:	f000 fbfa 	bl	8006670 <__lshift>
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4681      	mov	r9, r0
 8005e80:	f000 fc62 	bl	8006748 <__mcmp>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	dc03      	bgt.n	8005e90 <_dtoa_r+0xa58>
 8005e88:	d1e1      	bne.n	8005e4e <_dtoa_r+0xa16>
 8005e8a:	f018 0f01 	tst.w	r8, #1
 8005e8e:	d0de      	beq.n	8005e4e <_dtoa_r+0xa16>
 8005e90:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e94:	d1d8      	bne.n	8005e48 <_dtoa_r+0xa10>
 8005e96:	2339      	movs	r3, #57	@ 0x39
 8005e98:	9a02      	ldr	r2, [sp, #8]
 8005e9a:	7013      	strb	r3, [r2, #0]
 8005e9c:	4633      	mov	r3, r6
 8005e9e:	461e      	mov	r6, r3
 8005ea0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	2a39      	cmp	r2, #57	@ 0x39
 8005ea8:	d052      	beq.n	8005f50 <_dtoa_r+0xb18>
 8005eaa:	3201      	adds	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e60e      	b.n	8005ace <_dtoa_r+0x696>
 8005eb0:	2a00      	cmp	r2, #0
 8005eb2:	dd07      	ble.n	8005ec4 <_dtoa_r+0xa8c>
 8005eb4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005eb8:	d0ed      	beq.n	8005e96 <_dtoa_r+0xa5e>
 8005eba:	9a02      	ldr	r2, [sp, #8]
 8005ebc:	f108 0301 	add.w	r3, r8, #1
 8005ec0:	7013      	strb	r3, [r2, #0]
 8005ec2:	e604      	b.n	8005ace <_dtoa_r+0x696>
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	9a07      	ldr	r2, [sp, #28]
 8005ec8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005ecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d028      	beq.n	8005f24 <_dtoa_r+0xaec>
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	220a      	movs	r2, #10
 8005ed8:	4658      	mov	r0, fp
 8005eda:	f000 f9d5 	bl	8006288 <__multadd>
 8005ede:	42af      	cmp	r7, r5
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	f04f 020a 	mov.w	r2, #10
 8005eea:	4639      	mov	r1, r7
 8005eec:	4658      	mov	r0, fp
 8005eee:	d107      	bne.n	8005f00 <_dtoa_r+0xac8>
 8005ef0:	f000 f9ca 	bl	8006288 <__multadd>
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	9b07      	ldr	r3, [sp, #28]
 8005efa:	3301      	adds	r3, #1
 8005efc:	9307      	str	r3, [sp, #28]
 8005efe:	e774      	b.n	8005dea <_dtoa_r+0x9b2>
 8005f00:	f000 f9c2 	bl	8006288 <__multadd>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4607      	mov	r7, r0
 8005f08:	2300      	movs	r3, #0
 8005f0a:	220a      	movs	r2, #10
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	f000 f9bb 	bl	8006288 <__multadd>
 8005f12:	4605      	mov	r5, r0
 8005f14:	e7f0      	b.n	8005ef8 <_dtoa_r+0xac0>
 8005f16:	9b08      	ldr	r3, [sp, #32]
 8005f18:	2700      	movs	r7, #0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfcc      	ite	gt
 8005f1e:	461e      	movgt	r6, r3
 8005f20:	2601      	movle	r6, #1
 8005f22:	4456      	add	r6, sl
 8005f24:	4649      	mov	r1, r9
 8005f26:	2201      	movs	r2, #1
 8005f28:	4658      	mov	r0, fp
 8005f2a:	f000 fba1 	bl	8006670 <__lshift>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4681      	mov	r9, r0
 8005f32:	f000 fc09 	bl	8006748 <__mcmp>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	dcb0      	bgt.n	8005e9c <_dtoa_r+0xa64>
 8005f3a:	d102      	bne.n	8005f42 <_dtoa_r+0xb0a>
 8005f3c:	f018 0f01 	tst.w	r8, #1
 8005f40:	d1ac      	bne.n	8005e9c <_dtoa_r+0xa64>
 8005f42:	4633      	mov	r3, r6
 8005f44:	461e      	mov	r6, r3
 8005f46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f4a:	2a30      	cmp	r2, #48	@ 0x30
 8005f4c:	d0fa      	beq.n	8005f44 <_dtoa_r+0xb0c>
 8005f4e:	e5be      	b.n	8005ace <_dtoa_r+0x696>
 8005f50:	459a      	cmp	sl, r3
 8005f52:	d1a4      	bne.n	8005e9e <_dtoa_r+0xa66>
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	3301      	adds	r3, #1
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	2331      	movs	r3, #49	@ 0x31
 8005f5c:	f88a 3000 	strb.w	r3, [sl]
 8005f60:	e5b5      	b.n	8005ace <_dtoa_r+0x696>
 8005f62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f64:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005fc4 <_dtoa_r+0xb8c>
 8005f68:	b11b      	cbz	r3, 8005f72 <_dtoa_r+0xb3a>
 8005f6a:	f10a 0308 	add.w	r3, sl, #8
 8005f6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	4650      	mov	r0, sl
 8005f74:	b017      	add	sp, #92	@ 0x5c
 8005f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	f77f ae3d 	ble.w	8005bfc <_dtoa_r+0x7c4>
 8005f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f86:	2001      	movs	r0, #1
 8005f88:	e65b      	b.n	8005c42 <_dtoa_r+0x80a>
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f77f aed6 	ble.w	8005d3e <_dtoa_r+0x906>
 8005f92:	4656      	mov	r6, sl
 8005f94:	4621      	mov	r1, r4
 8005f96:	4648      	mov	r0, r9
 8005f98:	f7ff f9c4 	bl	8005324 <quorem>
 8005f9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005fa0:	9b08      	ldr	r3, [sp, #32]
 8005fa2:	f806 8b01 	strb.w	r8, [r6], #1
 8005fa6:	eba6 020a 	sub.w	r2, r6, sl
 8005faa:	4293      	cmp	r3, r2
 8005fac:	ddb3      	ble.n	8005f16 <_dtoa_r+0xade>
 8005fae:	4649      	mov	r1, r9
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	220a      	movs	r2, #10
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	f000 f967 	bl	8006288 <__multadd>
 8005fba:	4681      	mov	r9, r0
 8005fbc:	e7ea      	b.n	8005f94 <_dtoa_r+0xb5c>
 8005fbe:	bf00      	nop
 8005fc0:	080092e5 	.word	0x080092e5
 8005fc4:	08009269 	.word	0x08009269

08005fc8 <_free_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4605      	mov	r5, r0
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d040      	beq.n	8006052 <_free_r+0x8a>
 8005fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd4:	1f0c      	subs	r4, r1, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfb8      	it	lt
 8005fda:	18e4      	addlt	r4, r4, r3
 8005fdc:	f000 f8e6 	bl	80061ac <__malloc_lock>
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8006054 <_free_r+0x8c>)
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	b933      	cbnz	r3, 8005ff4 <_free_r+0x2c>
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	6014      	str	r4, [r2, #0]
 8005fea:	4628      	mov	r0, r5
 8005fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ff0:	f000 b8e2 	b.w	80061b8 <__malloc_unlock>
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	d908      	bls.n	800600a <_free_r+0x42>
 8005ff8:	6820      	ldr	r0, [r4, #0]
 8005ffa:	1821      	adds	r1, r4, r0
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	bf01      	itttt	eq
 8006000:	6819      	ldreq	r1, [r3, #0]
 8006002:	685b      	ldreq	r3, [r3, #4]
 8006004:	1809      	addeq	r1, r1, r0
 8006006:	6021      	streq	r1, [r4, #0]
 8006008:	e7ed      	b.n	8005fe6 <_free_r+0x1e>
 800600a:	461a      	mov	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b10b      	cbz	r3, 8006014 <_free_r+0x4c>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d9fa      	bls.n	800600a <_free_r+0x42>
 8006014:	6811      	ldr	r1, [r2, #0]
 8006016:	1850      	adds	r0, r2, r1
 8006018:	42a0      	cmp	r0, r4
 800601a:	d10b      	bne.n	8006034 <_free_r+0x6c>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	4401      	add	r1, r0
 8006020:	1850      	adds	r0, r2, r1
 8006022:	4283      	cmp	r3, r0
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	d1e0      	bne.n	8005fea <_free_r+0x22>
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4408      	add	r0, r1
 800602e:	6010      	str	r0, [r2, #0]
 8006030:	6053      	str	r3, [r2, #4]
 8006032:	e7da      	b.n	8005fea <_free_r+0x22>
 8006034:	d902      	bls.n	800603c <_free_r+0x74>
 8006036:	230c      	movs	r3, #12
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	e7d6      	b.n	8005fea <_free_r+0x22>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	1821      	adds	r1, r4, r0
 8006040:	428b      	cmp	r3, r1
 8006042:	bf01      	itttt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	1809      	addeq	r1, r1, r0
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	6063      	str	r3, [r4, #4]
 800604e:	6054      	str	r4, [r2, #4]
 8006050:	e7cb      	b.n	8005fea <_free_r+0x22>
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	2000042c 	.word	0x2000042c

08006058 <malloc>:
 8006058:	4b02      	ldr	r3, [pc, #8]	@ (8006064 <malloc+0xc>)
 800605a:	4601      	mov	r1, r0
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	f000 b825 	b.w	80060ac <_malloc_r>
 8006062:	bf00      	nop
 8006064:	20000020 	.word	0x20000020

08006068 <sbrk_aligned>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4e0f      	ldr	r6, [pc, #60]	@ (80060a8 <sbrk_aligned+0x40>)
 800606c:	460c      	mov	r4, r1
 800606e:	6831      	ldr	r1, [r6, #0]
 8006070:	4605      	mov	r5, r0
 8006072:	b911      	cbnz	r1, 800607a <sbrk_aligned+0x12>
 8006074:	f002 fb40 	bl	80086f8 <_sbrk_r>
 8006078:	6030      	str	r0, [r6, #0]
 800607a:	4621      	mov	r1, r4
 800607c:	4628      	mov	r0, r5
 800607e:	f002 fb3b 	bl	80086f8 <_sbrk_r>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d103      	bne.n	800608e <sbrk_aligned+0x26>
 8006086:	f04f 34ff 	mov.w	r4, #4294967295
 800608a:	4620      	mov	r0, r4
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d0f8      	beq.n	800608a <sbrk_aligned+0x22>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4628      	mov	r0, r5
 800609c:	f002 fb2c 	bl	80086f8 <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d1f2      	bne.n	800608a <sbrk_aligned+0x22>
 80060a4:	e7ef      	b.n	8006086 <sbrk_aligned+0x1e>
 80060a6:	bf00      	nop
 80060a8:	20000428 	.word	0x20000428

080060ac <_malloc_r>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	1ccd      	adds	r5, r1, #3
 80060b2:	f025 0503 	bic.w	r5, r5, #3
 80060b6:	3508      	adds	r5, #8
 80060b8:	2d0c      	cmp	r5, #12
 80060ba:	bf38      	it	cc
 80060bc:	250c      	movcc	r5, #12
 80060be:	2d00      	cmp	r5, #0
 80060c0:	4606      	mov	r6, r0
 80060c2:	db01      	blt.n	80060c8 <_malloc_r+0x1c>
 80060c4:	42a9      	cmp	r1, r5
 80060c6:	d904      	bls.n	80060d2 <_malloc_r+0x26>
 80060c8:	230c      	movs	r3, #12
 80060ca:	6033      	str	r3, [r6, #0]
 80060cc:	2000      	movs	r0, #0
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061a8 <_malloc_r+0xfc>
 80060d6:	f000 f869 	bl	80061ac <__malloc_lock>
 80060da:	f8d8 3000 	ldr.w	r3, [r8]
 80060de:	461c      	mov	r4, r3
 80060e0:	bb44      	cbnz	r4, 8006134 <_malloc_r+0x88>
 80060e2:	4629      	mov	r1, r5
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff ffbf 	bl	8006068 <sbrk_aligned>
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	4604      	mov	r4, r0
 80060ee:	d158      	bne.n	80061a2 <_malloc_r+0xf6>
 80060f0:	f8d8 4000 	ldr.w	r4, [r8]
 80060f4:	4627      	mov	r7, r4
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	d143      	bne.n	8006182 <_malloc_r+0xd6>
 80060fa:	2c00      	cmp	r4, #0
 80060fc:	d04b      	beq.n	8006196 <_malloc_r+0xea>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	4639      	mov	r1, r7
 8006102:	4630      	mov	r0, r6
 8006104:	eb04 0903 	add.w	r9, r4, r3
 8006108:	f002 faf6 	bl	80086f8 <_sbrk_r>
 800610c:	4581      	cmp	r9, r0
 800610e:	d142      	bne.n	8006196 <_malloc_r+0xea>
 8006110:	6821      	ldr	r1, [r4, #0]
 8006112:	4630      	mov	r0, r6
 8006114:	1a6d      	subs	r5, r5, r1
 8006116:	4629      	mov	r1, r5
 8006118:	f7ff ffa6 	bl	8006068 <sbrk_aligned>
 800611c:	3001      	adds	r0, #1
 800611e:	d03a      	beq.n	8006196 <_malloc_r+0xea>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	442b      	add	r3, r5
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	f8d8 3000 	ldr.w	r3, [r8]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	bb62      	cbnz	r2, 8006188 <_malloc_r+0xdc>
 800612e:	f8c8 7000 	str.w	r7, [r8]
 8006132:	e00f      	b.n	8006154 <_malloc_r+0xa8>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	1b52      	subs	r2, r2, r5
 8006138:	d420      	bmi.n	800617c <_malloc_r+0xd0>
 800613a:	2a0b      	cmp	r2, #11
 800613c:	d917      	bls.n	800616e <_malloc_r+0xc2>
 800613e:	1961      	adds	r1, r4, r5
 8006140:	42a3      	cmp	r3, r4
 8006142:	6025      	str	r5, [r4, #0]
 8006144:	bf18      	it	ne
 8006146:	6059      	strne	r1, [r3, #4]
 8006148:	6863      	ldr	r3, [r4, #4]
 800614a:	bf08      	it	eq
 800614c:	f8c8 1000 	streq.w	r1, [r8]
 8006150:	5162      	str	r2, [r4, r5]
 8006152:	604b      	str	r3, [r1, #4]
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f82f 	bl	80061b8 <__malloc_unlock>
 800615a:	f104 000b 	add.w	r0, r4, #11
 800615e:	1d23      	adds	r3, r4, #4
 8006160:	f020 0007 	bic.w	r0, r0, #7
 8006164:	1ac2      	subs	r2, r0, r3
 8006166:	bf1c      	itt	ne
 8006168:	1a1b      	subne	r3, r3, r0
 800616a:	50a3      	strne	r3, [r4, r2]
 800616c:	e7af      	b.n	80060ce <_malloc_r+0x22>
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	42a3      	cmp	r3, r4
 8006172:	bf0c      	ite	eq
 8006174:	f8c8 2000 	streq.w	r2, [r8]
 8006178:	605a      	strne	r2, [r3, #4]
 800617a:	e7eb      	b.n	8006154 <_malloc_r+0xa8>
 800617c:	4623      	mov	r3, r4
 800617e:	6864      	ldr	r4, [r4, #4]
 8006180:	e7ae      	b.n	80060e0 <_malloc_r+0x34>
 8006182:	463c      	mov	r4, r7
 8006184:	687f      	ldr	r7, [r7, #4]
 8006186:	e7b6      	b.n	80060f6 <_malloc_r+0x4a>
 8006188:	461a      	mov	r2, r3
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	42a3      	cmp	r3, r4
 800618e:	d1fb      	bne.n	8006188 <_malloc_r+0xdc>
 8006190:	2300      	movs	r3, #0
 8006192:	6053      	str	r3, [r2, #4]
 8006194:	e7de      	b.n	8006154 <_malloc_r+0xa8>
 8006196:	230c      	movs	r3, #12
 8006198:	4630      	mov	r0, r6
 800619a:	6033      	str	r3, [r6, #0]
 800619c:	f000 f80c 	bl	80061b8 <__malloc_unlock>
 80061a0:	e794      	b.n	80060cc <_malloc_r+0x20>
 80061a2:	6005      	str	r5, [r0, #0]
 80061a4:	e7d6      	b.n	8006154 <_malloc_r+0xa8>
 80061a6:	bf00      	nop
 80061a8:	2000042c 	.word	0x2000042c

080061ac <__malloc_lock>:
 80061ac:	4801      	ldr	r0, [pc, #4]	@ (80061b4 <__malloc_lock+0x8>)
 80061ae:	f7ff b8a4 	b.w	80052fa <__retarget_lock_acquire_recursive>
 80061b2:	bf00      	nop
 80061b4:	20000424 	.word	0x20000424

080061b8 <__malloc_unlock>:
 80061b8:	4801      	ldr	r0, [pc, #4]	@ (80061c0 <__malloc_unlock+0x8>)
 80061ba:	f7ff b89f 	b.w	80052fc <__retarget_lock_release_recursive>
 80061be:	bf00      	nop
 80061c0:	20000424 	.word	0x20000424

080061c4 <_Balloc>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	69c6      	ldr	r6, [r0, #28]
 80061c8:	4604      	mov	r4, r0
 80061ca:	460d      	mov	r5, r1
 80061cc:	b976      	cbnz	r6, 80061ec <_Balloc+0x28>
 80061ce:	2010      	movs	r0, #16
 80061d0:	f7ff ff42 	bl	8006058 <malloc>
 80061d4:	4602      	mov	r2, r0
 80061d6:	61e0      	str	r0, [r4, #28]
 80061d8:	b920      	cbnz	r0, 80061e4 <_Balloc+0x20>
 80061da:	216b      	movs	r1, #107	@ 0x6b
 80061dc:	4b17      	ldr	r3, [pc, #92]	@ (800623c <_Balloc+0x78>)
 80061de:	4818      	ldr	r0, [pc, #96]	@ (8006240 <_Balloc+0x7c>)
 80061e0:	f002 faae 	bl	8008740 <__assert_func>
 80061e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061e8:	6006      	str	r6, [r0, #0]
 80061ea:	60c6      	str	r6, [r0, #12]
 80061ec:	69e6      	ldr	r6, [r4, #28]
 80061ee:	68f3      	ldr	r3, [r6, #12]
 80061f0:	b183      	cbz	r3, 8006214 <_Balloc+0x50>
 80061f2:	69e3      	ldr	r3, [r4, #28]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061fa:	b9b8      	cbnz	r0, 800622c <_Balloc+0x68>
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f605 	lsl.w	r6, r1, r5
 8006202:	1d72      	adds	r2, r6, #5
 8006204:	4620      	mov	r0, r4
 8006206:	0092      	lsls	r2, r2, #2
 8006208:	f002 fab8 	bl	800877c <_calloc_r>
 800620c:	b160      	cbz	r0, 8006228 <_Balloc+0x64>
 800620e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006212:	e00e      	b.n	8006232 <_Balloc+0x6e>
 8006214:	2221      	movs	r2, #33	@ 0x21
 8006216:	2104      	movs	r1, #4
 8006218:	4620      	mov	r0, r4
 800621a:	f002 faaf 	bl	800877c <_calloc_r>
 800621e:	69e3      	ldr	r3, [r4, #28]
 8006220:	60f0      	str	r0, [r6, #12]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e4      	bne.n	80061f2 <_Balloc+0x2e>
 8006228:	2000      	movs	r0, #0
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	6802      	ldr	r2, [r0, #0]
 800622e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006232:	2300      	movs	r3, #0
 8006234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006238:	e7f7      	b.n	800622a <_Balloc+0x66>
 800623a:	bf00      	nop
 800623c:	08009276 	.word	0x08009276
 8006240:	080092f6 	.word	0x080092f6

08006244 <_Bfree>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	69c6      	ldr	r6, [r0, #28]
 8006248:	4605      	mov	r5, r0
 800624a:	460c      	mov	r4, r1
 800624c:	b976      	cbnz	r6, 800626c <_Bfree+0x28>
 800624e:	2010      	movs	r0, #16
 8006250:	f7ff ff02 	bl	8006058 <malloc>
 8006254:	4602      	mov	r2, r0
 8006256:	61e8      	str	r0, [r5, #28]
 8006258:	b920      	cbnz	r0, 8006264 <_Bfree+0x20>
 800625a:	218f      	movs	r1, #143	@ 0x8f
 800625c:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <_Bfree+0x3c>)
 800625e:	4809      	ldr	r0, [pc, #36]	@ (8006284 <_Bfree+0x40>)
 8006260:	f002 fa6e 	bl	8008740 <__assert_func>
 8006264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006268:	6006      	str	r6, [r0, #0]
 800626a:	60c6      	str	r6, [r0, #12]
 800626c:	b13c      	cbz	r4, 800627e <_Bfree+0x3a>
 800626e:	69eb      	ldr	r3, [r5, #28]
 8006270:	6862      	ldr	r2, [r4, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006278:	6021      	str	r1, [r4, #0]
 800627a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	08009276 	.word	0x08009276
 8006284:	080092f6 	.word	0x080092f6

08006288 <__multadd>:
 8006288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628c:	4607      	mov	r7, r0
 800628e:	460c      	mov	r4, r1
 8006290:	461e      	mov	r6, r3
 8006292:	2000      	movs	r0, #0
 8006294:	690d      	ldr	r5, [r1, #16]
 8006296:	f101 0c14 	add.w	ip, r1, #20
 800629a:	f8dc 3000 	ldr.w	r3, [ip]
 800629e:	3001      	adds	r0, #1
 80062a0:	b299      	uxth	r1, r3
 80062a2:	fb02 6101 	mla	r1, r2, r1, r6
 80062a6:	0c1e      	lsrs	r6, r3, #16
 80062a8:	0c0b      	lsrs	r3, r1, #16
 80062aa:	fb02 3306 	mla	r3, r2, r6, r3
 80062ae:	b289      	uxth	r1, r1
 80062b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062b4:	4285      	cmp	r5, r0
 80062b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062ba:	f84c 1b04 	str.w	r1, [ip], #4
 80062be:	dcec      	bgt.n	800629a <__multadd+0x12>
 80062c0:	b30e      	cbz	r6, 8006306 <__multadd+0x7e>
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	42ab      	cmp	r3, r5
 80062c6:	dc19      	bgt.n	80062fc <__multadd+0x74>
 80062c8:	6861      	ldr	r1, [r4, #4]
 80062ca:	4638      	mov	r0, r7
 80062cc:	3101      	adds	r1, #1
 80062ce:	f7ff ff79 	bl	80061c4 <_Balloc>
 80062d2:	4680      	mov	r8, r0
 80062d4:	b928      	cbnz	r0, 80062e2 <__multadd+0x5a>
 80062d6:	4602      	mov	r2, r0
 80062d8:	21ba      	movs	r1, #186	@ 0xba
 80062da:	4b0c      	ldr	r3, [pc, #48]	@ (800630c <__multadd+0x84>)
 80062dc:	480c      	ldr	r0, [pc, #48]	@ (8006310 <__multadd+0x88>)
 80062de:	f002 fa2f 	bl	8008740 <__assert_func>
 80062e2:	6922      	ldr	r2, [r4, #16]
 80062e4:	f104 010c 	add.w	r1, r4, #12
 80062e8:	3202      	adds	r2, #2
 80062ea:	0092      	lsls	r2, r2, #2
 80062ec:	300c      	adds	r0, #12
 80062ee:	f002 fa13 	bl	8008718 <memcpy>
 80062f2:	4621      	mov	r1, r4
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff ffa5 	bl	8006244 <_Bfree>
 80062fa:	4644      	mov	r4, r8
 80062fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006300:	3501      	adds	r5, #1
 8006302:	615e      	str	r6, [r3, #20]
 8006304:	6125      	str	r5, [r4, #16]
 8006306:	4620      	mov	r0, r4
 8006308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800630c:	080092e5 	.word	0x080092e5
 8006310:	080092f6 	.word	0x080092f6

08006314 <__s2b>:
 8006314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006318:	4615      	mov	r5, r2
 800631a:	2209      	movs	r2, #9
 800631c:	461f      	mov	r7, r3
 800631e:	3308      	adds	r3, #8
 8006320:	460c      	mov	r4, r1
 8006322:	fb93 f3f2 	sdiv	r3, r3, r2
 8006326:	4606      	mov	r6, r0
 8006328:	2201      	movs	r2, #1
 800632a:	2100      	movs	r1, #0
 800632c:	429a      	cmp	r2, r3
 800632e:	db09      	blt.n	8006344 <__s2b+0x30>
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ff47 	bl	80061c4 <_Balloc>
 8006336:	b940      	cbnz	r0, 800634a <__s2b+0x36>
 8006338:	4602      	mov	r2, r0
 800633a:	21d3      	movs	r1, #211	@ 0xd3
 800633c:	4b18      	ldr	r3, [pc, #96]	@ (80063a0 <__s2b+0x8c>)
 800633e:	4819      	ldr	r0, [pc, #100]	@ (80063a4 <__s2b+0x90>)
 8006340:	f002 f9fe 	bl	8008740 <__assert_func>
 8006344:	0052      	lsls	r2, r2, #1
 8006346:	3101      	adds	r1, #1
 8006348:	e7f0      	b.n	800632c <__s2b+0x18>
 800634a:	9b08      	ldr	r3, [sp, #32]
 800634c:	2d09      	cmp	r5, #9
 800634e:	6143      	str	r3, [r0, #20]
 8006350:	f04f 0301 	mov.w	r3, #1
 8006354:	6103      	str	r3, [r0, #16]
 8006356:	dd16      	ble.n	8006386 <__s2b+0x72>
 8006358:	f104 0909 	add.w	r9, r4, #9
 800635c:	46c8      	mov	r8, r9
 800635e:	442c      	add	r4, r5
 8006360:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006364:	4601      	mov	r1, r0
 8006366:	220a      	movs	r2, #10
 8006368:	4630      	mov	r0, r6
 800636a:	3b30      	subs	r3, #48	@ 0x30
 800636c:	f7ff ff8c 	bl	8006288 <__multadd>
 8006370:	45a0      	cmp	r8, r4
 8006372:	d1f5      	bne.n	8006360 <__s2b+0x4c>
 8006374:	f1a5 0408 	sub.w	r4, r5, #8
 8006378:	444c      	add	r4, r9
 800637a:	1b2d      	subs	r5, r5, r4
 800637c:	1963      	adds	r3, r4, r5
 800637e:	42bb      	cmp	r3, r7
 8006380:	db04      	blt.n	800638c <__s2b+0x78>
 8006382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006386:	2509      	movs	r5, #9
 8006388:	340a      	adds	r4, #10
 800638a:	e7f6      	b.n	800637a <__s2b+0x66>
 800638c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006390:	4601      	mov	r1, r0
 8006392:	220a      	movs	r2, #10
 8006394:	4630      	mov	r0, r6
 8006396:	3b30      	subs	r3, #48	@ 0x30
 8006398:	f7ff ff76 	bl	8006288 <__multadd>
 800639c:	e7ee      	b.n	800637c <__s2b+0x68>
 800639e:	bf00      	nop
 80063a0:	080092e5 	.word	0x080092e5
 80063a4:	080092f6 	.word	0x080092f6

080063a8 <__hi0bits>:
 80063a8:	4603      	mov	r3, r0
 80063aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063ae:	bf3a      	itte	cc
 80063b0:	0403      	lslcc	r3, r0, #16
 80063b2:	2010      	movcc	r0, #16
 80063b4:	2000      	movcs	r0, #0
 80063b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063ba:	bf3c      	itt	cc
 80063bc:	021b      	lslcc	r3, r3, #8
 80063be:	3008      	addcc	r0, #8
 80063c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063c4:	bf3c      	itt	cc
 80063c6:	011b      	lslcc	r3, r3, #4
 80063c8:	3004      	addcc	r0, #4
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ce:	bf3c      	itt	cc
 80063d0:	009b      	lslcc	r3, r3, #2
 80063d2:	3002      	addcc	r0, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db05      	blt.n	80063e4 <__hi0bits+0x3c>
 80063d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063dc:	f100 0001 	add.w	r0, r0, #1
 80063e0:	bf08      	it	eq
 80063e2:	2020      	moveq	r0, #32
 80063e4:	4770      	bx	lr

080063e6 <__lo0bits>:
 80063e6:	6803      	ldr	r3, [r0, #0]
 80063e8:	4602      	mov	r2, r0
 80063ea:	f013 0007 	ands.w	r0, r3, #7
 80063ee:	d00b      	beq.n	8006408 <__lo0bits+0x22>
 80063f0:	07d9      	lsls	r1, r3, #31
 80063f2:	d421      	bmi.n	8006438 <__lo0bits+0x52>
 80063f4:	0798      	lsls	r0, r3, #30
 80063f6:	bf49      	itett	mi
 80063f8:	085b      	lsrmi	r3, r3, #1
 80063fa:	089b      	lsrpl	r3, r3, #2
 80063fc:	2001      	movmi	r0, #1
 80063fe:	6013      	strmi	r3, [r2, #0]
 8006400:	bf5c      	itt	pl
 8006402:	2002      	movpl	r0, #2
 8006404:	6013      	strpl	r3, [r2, #0]
 8006406:	4770      	bx	lr
 8006408:	b299      	uxth	r1, r3
 800640a:	b909      	cbnz	r1, 8006410 <__lo0bits+0x2a>
 800640c:	2010      	movs	r0, #16
 800640e:	0c1b      	lsrs	r3, r3, #16
 8006410:	b2d9      	uxtb	r1, r3
 8006412:	b909      	cbnz	r1, 8006418 <__lo0bits+0x32>
 8006414:	3008      	adds	r0, #8
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	0719      	lsls	r1, r3, #28
 800641a:	bf04      	itt	eq
 800641c:	091b      	lsreq	r3, r3, #4
 800641e:	3004      	addeq	r0, #4
 8006420:	0799      	lsls	r1, r3, #30
 8006422:	bf04      	itt	eq
 8006424:	089b      	lsreq	r3, r3, #2
 8006426:	3002      	addeq	r0, #2
 8006428:	07d9      	lsls	r1, r3, #31
 800642a:	d403      	bmi.n	8006434 <__lo0bits+0x4e>
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	f100 0001 	add.w	r0, r0, #1
 8006432:	d003      	beq.n	800643c <__lo0bits+0x56>
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	4770      	bx	lr
 8006438:	2000      	movs	r0, #0
 800643a:	4770      	bx	lr
 800643c:	2020      	movs	r0, #32
 800643e:	4770      	bx	lr

08006440 <__i2b>:
 8006440:	b510      	push	{r4, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	2101      	movs	r1, #1
 8006446:	f7ff febd 	bl	80061c4 <_Balloc>
 800644a:	4602      	mov	r2, r0
 800644c:	b928      	cbnz	r0, 800645a <__i2b+0x1a>
 800644e:	f240 1145 	movw	r1, #325	@ 0x145
 8006452:	4b04      	ldr	r3, [pc, #16]	@ (8006464 <__i2b+0x24>)
 8006454:	4804      	ldr	r0, [pc, #16]	@ (8006468 <__i2b+0x28>)
 8006456:	f002 f973 	bl	8008740 <__assert_func>
 800645a:	2301      	movs	r3, #1
 800645c:	6144      	str	r4, [r0, #20]
 800645e:	6103      	str	r3, [r0, #16]
 8006460:	bd10      	pop	{r4, pc}
 8006462:	bf00      	nop
 8006464:	080092e5 	.word	0x080092e5
 8006468:	080092f6 	.word	0x080092f6

0800646c <__multiply>:
 800646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	4614      	mov	r4, r2
 8006472:	690a      	ldr	r2, [r1, #16]
 8006474:	6923      	ldr	r3, [r4, #16]
 8006476:	460f      	mov	r7, r1
 8006478:	429a      	cmp	r2, r3
 800647a:	bfa2      	ittt	ge
 800647c:	4623      	movge	r3, r4
 800647e:	460c      	movge	r4, r1
 8006480:	461f      	movge	r7, r3
 8006482:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006486:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	6861      	ldr	r1, [r4, #4]
 800648e:	eb0a 0609 	add.w	r6, sl, r9
 8006492:	42b3      	cmp	r3, r6
 8006494:	b085      	sub	sp, #20
 8006496:	bfb8      	it	lt
 8006498:	3101      	addlt	r1, #1
 800649a:	f7ff fe93 	bl	80061c4 <_Balloc>
 800649e:	b930      	cbnz	r0, 80064ae <__multiply+0x42>
 80064a0:	4602      	mov	r2, r0
 80064a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064a6:	4b43      	ldr	r3, [pc, #268]	@ (80065b4 <__multiply+0x148>)
 80064a8:	4843      	ldr	r0, [pc, #268]	@ (80065b8 <__multiply+0x14c>)
 80064aa:	f002 f949 	bl	8008740 <__assert_func>
 80064ae:	f100 0514 	add.w	r5, r0, #20
 80064b2:	462b      	mov	r3, r5
 80064b4:	2200      	movs	r2, #0
 80064b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064ba:	4543      	cmp	r3, r8
 80064bc:	d321      	bcc.n	8006502 <__multiply+0x96>
 80064be:	f107 0114 	add.w	r1, r7, #20
 80064c2:	f104 0214 	add.w	r2, r4, #20
 80064c6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80064ca:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80064ce:	9302      	str	r3, [sp, #8]
 80064d0:	1b13      	subs	r3, r2, r4
 80064d2:	3b15      	subs	r3, #21
 80064d4:	f023 0303 	bic.w	r3, r3, #3
 80064d8:	3304      	adds	r3, #4
 80064da:	f104 0715 	add.w	r7, r4, #21
 80064de:	42ba      	cmp	r2, r7
 80064e0:	bf38      	it	cc
 80064e2:	2304      	movcc	r3, #4
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	9103      	str	r1, [sp, #12]
 80064ea:	428b      	cmp	r3, r1
 80064ec:	d80c      	bhi.n	8006508 <__multiply+0x9c>
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	dd03      	ble.n	80064fa <__multiply+0x8e>
 80064f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d05a      	beq.n	80065b0 <__multiply+0x144>
 80064fa:	6106      	str	r6, [r0, #16]
 80064fc:	b005      	add	sp, #20
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	f843 2b04 	str.w	r2, [r3], #4
 8006506:	e7d8      	b.n	80064ba <__multiply+0x4e>
 8006508:	f8b1 a000 	ldrh.w	sl, [r1]
 800650c:	f1ba 0f00 	cmp.w	sl, #0
 8006510:	d023      	beq.n	800655a <__multiply+0xee>
 8006512:	46a9      	mov	r9, r5
 8006514:	f04f 0c00 	mov.w	ip, #0
 8006518:	f104 0e14 	add.w	lr, r4, #20
 800651c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006520:	f8d9 3000 	ldr.w	r3, [r9]
 8006524:	fa1f fb87 	uxth.w	fp, r7
 8006528:	b29b      	uxth	r3, r3
 800652a:	fb0a 330b 	mla	r3, sl, fp, r3
 800652e:	4463      	add	r3, ip
 8006530:	f8d9 c000 	ldr.w	ip, [r9]
 8006534:	0c3f      	lsrs	r7, r7, #16
 8006536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800653a:	fb0a c707 	mla	r7, sl, r7, ip
 800653e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006548:	4572      	cmp	r2, lr
 800654a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800654e:	f849 3b04 	str.w	r3, [r9], #4
 8006552:	d8e3      	bhi.n	800651c <__multiply+0xb0>
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	f845 c003 	str.w	ip, [r5, r3]
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	3104      	adds	r1, #4
 800655e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006562:	f1b9 0f00 	cmp.w	r9, #0
 8006566:	d021      	beq.n	80065ac <__multiply+0x140>
 8006568:	46ae      	mov	lr, r5
 800656a:	f04f 0a00 	mov.w	sl, #0
 800656e:	682b      	ldr	r3, [r5, #0]
 8006570:	f104 0c14 	add.w	ip, r4, #20
 8006574:	f8bc b000 	ldrh.w	fp, [ip]
 8006578:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800657c:	b29b      	uxth	r3, r3
 800657e:	fb09 770b 	mla	r7, r9, fp, r7
 8006582:	4457      	add	r7, sl
 8006584:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006588:	f84e 3b04 	str.w	r3, [lr], #4
 800658c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006590:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006594:	f8be 3000 	ldrh.w	r3, [lr]
 8006598:	4562      	cmp	r2, ip
 800659a:	fb09 330a 	mla	r3, r9, sl, r3
 800659e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80065a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065a6:	d8e5      	bhi.n	8006574 <__multiply+0x108>
 80065a8:	9f01      	ldr	r7, [sp, #4]
 80065aa:	51eb      	str	r3, [r5, r7]
 80065ac:	3504      	adds	r5, #4
 80065ae:	e79a      	b.n	80064e6 <__multiply+0x7a>
 80065b0:	3e01      	subs	r6, #1
 80065b2:	e79c      	b.n	80064ee <__multiply+0x82>
 80065b4:	080092e5 	.word	0x080092e5
 80065b8:	080092f6 	.word	0x080092f6

080065bc <__pow5mult>:
 80065bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	4615      	mov	r5, r2
 80065c2:	f012 0203 	ands.w	r2, r2, #3
 80065c6:	4607      	mov	r7, r0
 80065c8:	460e      	mov	r6, r1
 80065ca:	d007      	beq.n	80065dc <__pow5mult+0x20>
 80065cc:	4c25      	ldr	r4, [pc, #148]	@ (8006664 <__pow5mult+0xa8>)
 80065ce:	3a01      	subs	r2, #1
 80065d0:	2300      	movs	r3, #0
 80065d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065d6:	f7ff fe57 	bl	8006288 <__multadd>
 80065da:	4606      	mov	r6, r0
 80065dc:	10ad      	asrs	r5, r5, #2
 80065de:	d03d      	beq.n	800665c <__pow5mult+0xa0>
 80065e0:	69fc      	ldr	r4, [r7, #28]
 80065e2:	b97c      	cbnz	r4, 8006604 <__pow5mult+0x48>
 80065e4:	2010      	movs	r0, #16
 80065e6:	f7ff fd37 	bl	8006058 <malloc>
 80065ea:	4602      	mov	r2, r0
 80065ec:	61f8      	str	r0, [r7, #28]
 80065ee:	b928      	cbnz	r0, 80065fc <__pow5mult+0x40>
 80065f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80065f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006668 <__pow5mult+0xac>)
 80065f6:	481d      	ldr	r0, [pc, #116]	@ (800666c <__pow5mult+0xb0>)
 80065f8:	f002 f8a2 	bl	8008740 <__assert_func>
 80065fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006600:	6004      	str	r4, [r0, #0]
 8006602:	60c4      	str	r4, [r0, #12]
 8006604:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800660c:	b94c      	cbnz	r4, 8006622 <__pow5mult+0x66>
 800660e:	f240 2171 	movw	r1, #625	@ 0x271
 8006612:	4638      	mov	r0, r7
 8006614:	f7ff ff14 	bl	8006440 <__i2b>
 8006618:	2300      	movs	r3, #0
 800661a:	4604      	mov	r4, r0
 800661c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006620:	6003      	str	r3, [r0, #0]
 8006622:	f04f 0900 	mov.w	r9, #0
 8006626:	07eb      	lsls	r3, r5, #31
 8006628:	d50a      	bpl.n	8006640 <__pow5mult+0x84>
 800662a:	4631      	mov	r1, r6
 800662c:	4622      	mov	r2, r4
 800662e:	4638      	mov	r0, r7
 8006630:	f7ff ff1c 	bl	800646c <__multiply>
 8006634:	4680      	mov	r8, r0
 8006636:	4631      	mov	r1, r6
 8006638:	4638      	mov	r0, r7
 800663a:	f7ff fe03 	bl	8006244 <_Bfree>
 800663e:	4646      	mov	r6, r8
 8006640:	106d      	asrs	r5, r5, #1
 8006642:	d00b      	beq.n	800665c <__pow5mult+0xa0>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	b938      	cbnz	r0, 8006658 <__pow5mult+0x9c>
 8006648:	4622      	mov	r2, r4
 800664a:	4621      	mov	r1, r4
 800664c:	4638      	mov	r0, r7
 800664e:	f7ff ff0d 	bl	800646c <__multiply>
 8006652:	6020      	str	r0, [r4, #0]
 8006654:	f8c0 9000 	str.w	r9, [r0]
 8006658:	4604      	mov	r4, r0
 800665a:	e7e4      	b.n	8006626 <__pow5mult+0x6a>
 800665c:	4630      	mov	r0, r6
 800665e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006662:	bf00      	nop
 8006664:	08009350 	.word	0x08009350
 8006668:	08009276 	.word	0x08009276
 800666c:	080092f6 	.word	0x080092f6

08006670 <__lshift>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	460c      	mov	r4, r1
 8006676:	4607      	mov	r7, r0
 8006678:	4691      	mov	r9, r2
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	6849      	ldr	r1, [r1, #4]
 800667e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006688:	f108 0601 	add.w	r6, r8, #1
 800668c:	42b3      	cmp	r3, r6
 800668e:	db0b      	blt.n	80066a8 <__lshift+0x38>
 8006690:	4638      	mov	r0, r7
 8006692:	f7ff fd97 	bl	80061c4 <_Balloc>
 8006696:	4605      	mov	r5, r0
 8006698:	b948      	cbnz	r0, 80066ae <__lshift+0x3e>
 800669a:	4602      	mov	r2, r0
 800669c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066a0:	4b27      	ldr	r3, [pc, #156]	@ (8006740 <__lshift+0xd0>)
 80066a2:	4828      	ldr	r0, [pc, #160]	@ (8006744 <__lshift+0xd4>)
 80066a4:	f002 f84c 	bl	8008740 <__assert_func>
 80066a8:	3101      	adds	r1, #1
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	e7ee      	b.n	800668c <__lshift+0x1c>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f100 0114 	add.w	r1, r0, #20
 80066b4:	f100 0210 	add.w	r2, r0, #16
 80066b8:	4618      	mov	r0, r3
 80066ba:	4553      	cmp	r3, sl
 80066bc:	db33      	blt.n	8006726 <__lshift+0xb6>
 80066be:	6920      	ldr	r0, [r4, #16]
 80066c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066c4:	f104 0314 	add.w	r3, r4, #20
 80066c8:	f019 091f 	ands.w	r9, r9, #31
 80066cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066d4:	d02b      	beq.n	800672e <__lshift+0xbe>
 80066d6:	468a      	mov	sl, r1
 80066d8:	2200      	movs	r2, #0
 80066da:	f1c9 0e20 	rsb	lr, r9, #32
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	fa00 f009 	lsl.w	r0, r0, r9
 80066e4:	4310      	orrs	r0, r2
 80066e6:	f84a 0b04 	str.w	r0, [sl], #4
 80066ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ee:	459c      	cmp	ip, r3
 80066f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80066f4:	d8f3      	bhi.n	80066de <__lshift+0x6e>
 80066f6:	ebac 0304 	sub.w	r3, ip, r4
 80066fa:	3b15      	subs	r3, #21
 80066fc:	f023 0303 	bic.w	r3, r3, #3
 8006700:	3304      	adds	r3, #4
 8006702:	f104 0015 	add.w	r0, r4, #21
 8006706:	4584      	cmp	ip, r0
 8006708:	bf38      	it	cc
 800670a:	2304      	movcc	r3, #4
 800670c:	50ca      	str	r2, [r1, r3]
 800670e:	b10a      	cbz	r2, 8006714 <__lshift+0xa4>
 8006710:	f108 0602 	add.w	r6, r8, #2
 8006714:	3e01      	subs	r6, #1
 8006716:	4638      	mov	r0, r7
 8006718:	4621      	mov	r1, r4
 800671a:	612e      	str	r6, [r5, #16]
 800671c:	f7ff fd92 	bl	8006244 <_Bfree>
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006726:	f842 0f04 	str.w	r0, [r2, #4]!
 800672a:	3301      	adds	r3, #1
 800672c:	e7c5      	b.n	80066ba <__lshift+0x4a>
 800672e:	3904      	subs	r1, #4
 8006730:	f853 2b04 	ldr.w	r2, [r3], #4
 8006734:	459c      	cmp	ip, r3
 8006736:	f841 2f04 	str.w	r2, [r1, #4]!
 800673a:	d8f9      	bhi.n	8006730 <__lshift+0xc0>
 800673c:	e7ea      	b.n	8006714 <__lshift+0xa4>
 800673e:	bf00      	nop
 8006740:	080092e5 	.word	0x080092e5
 8006744:	080092f6 	.word	0x080092f6

08006748 <__mcmp>:
 8006748:	4603      	mov	r3, r0
 800674a:	690a      	ldr	r2, [r1, #16]
 800674c:	6900      	ldr	r0, [r0, #16]
 800674e:	b530      	push	{r4, r5, lr}
 8006750:	1a80      	subs	r0, r0, r2
 8006752:	d10e      	bne.n	8006772 <__mcmp+0x2a>
 8006754:	3314      	adds	r3, #20
 8006756:	3114      	adds	r1, #20
 8006758:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800675c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006768:	4295      	cmp	r5, r2
 800676a:	d003      	beq.n	8006774 <__mcmp+0x2c>
 800676c:	d205      	bcs.n	800677a <__mcmp+0x32>
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
 8006772:	bd30      	pop	{r4, r5, pc}
 8006774:	42a3      	cmp	r3, r4
 8006776:	d3f3      	bcc.n	8006760 <__mcmp+0x18>
 8006778:	e7fb      	b.n	8006772 <__mcmp+0x2a>
 800677a:	2001      	movs	r0, #1
 800677c:	e7f9      	b.n	8006772 <__mcmp+0x2a>
	...

08006780 <__mdiff>:
 8006780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	4689      	mov	r9, r1
 8006786:	4606      	mov	r6, r0
 8006788:	4611      	mov	r1, r2
 800678a:	4648      	mov	r0, r9
 800678c:	4614      	mov	r4, r2
 800678e:	f7ff ffdb 	bl	8006748 <__mcmp>
 8006792:	1e05      	subs	r5, r0, #0
 8006794:	d112      	bne.n	80067bc <__mdiff+0x3c>
 8006796:	4629      	mov	r1, r5
 8006798:	4630      	mov	r0, r6
 800679a:	f7ff fd13 	bl	80061c4 <_Balloc>
 800679e:	4602      	mov	r2, r0
 80067a0:	b928      	cbnz	r0, 80067ae <__mdiff+0x2e>
 80067a2:	f240 2137 	movw	r1, #567	@ 0x237
 80067a6:	4b3e      	ldr	r3, [pc, #248]	@ (80068a0 <__mdiff+0x120>)
 80067a8:	483e      	ldr	r0, [pc, #248]	@ (80068a4 <__mdiff+0x124>)
 80067aa:	f001 ffc9 	bl	8008740 <__assert_func>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067b4:	4610      	mov	r0, r2
 80067b6:	b003      	add	sp, #12
 80067b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067bc:	bfbc      	itt	lt
 80067be:	464b      	movlt	r3, r9
 80067c0:	46a1      	movlt	r9, r4
 80067c2:	4630      	mov	r0, r6
 80067c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067c8:	bfba      	itte	lt
 80067ca:	461c      	movlt	r4, r3
 80067cc:	2501      	movlt	r5, #1
 80067ce:	2500      	movge	r5, #0
 80067d0:	f7ff fcf8 	bl	80061c4 <_Balloc>
 80067d4:	4602      	mov	r2, r0
 80067d6:	b918      	cbnz	r0, 80067e0 <__mdiff+0x60>
 80067d8:	f240 2145 	movw	r1, #581	@ 0x245
 80067dc:	4b30      	ldr	r3, [pc, #192]	@ (80068a0 <__mdiff+0x120>)
 80067de:	e7e3      	b.n	80067a8 <__mdiff+0x28>
 80067e0:	f100 0b14 	add.w	fp, r0, #20
 80067e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067e8:	f109 0310 	add.w	r3, r9, #16
 80067ec:	60c5      	str	r5, [r0, #12]
 80067ee:	f04f 0c00 	mov.w	ip, #0
 80067f2:	f109 0514 	add.w	r5, r9, #20
 80067f6:	46d9      	mov	r9, fp
 80067f8:	6926      	ldr	r6, [r4, #16]
 80067fa:	f104 0e14 	add.w	lr, r4, #20
 80067fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006802:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	9b01      	ldr	r3, [sp, #4]
 800680a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800680e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006812:	b281      	uxth	r1, r0
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	fa1f f38a 	uxth.w	r3, sl
 800681a:	1a5b      	subs	r3, r3, r1
 800681c:	0c00      	lsrs	r0, r0, #16
 800681e:	4463      	add	r3, ip
 8006820:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006824:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800682e:	4576      	cmp	r6, lr
 8006830:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006834:	f849 3b04 	str.w	r3, [r9], #4
 8006838:	d8e6      	bhi.n	8006808 <__mdiff+0x88>
 800683a:	1b33      	subs	r3, r6, r4
 800683c:	3b15      	subs	r3, #21
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	3415      	adds	r4, #21
 8006844:	3304      	adds	r3, #4
 8006846:	42a6      	cmp	r6, r4
 8006848:	bf38      	it	cc
 800684a:	2304      	movcc	r3, #4
 800684c:	441d      	add	r5, r3
 800684e:	445b      	add	r3, fp
 8006850:	461e      	mov	r6, r3
 8006852:	462c      	mov	r4, r5
 8006854:	4544      	cmp	r4, r8
 8006856:	d30e      	bcc.n	8006876 <__mdiff+0xf6>
 8006858:	f108 0103 	add.w	r1, r8, #3
 800685c:	1b49      	subs	r1, r1, r5
 800685e:	f021 0103 	bic.w	r1, r1, #3
 8006862:	3d03      	subs	r5, #3
 8006864:	45a8      	cmp	r8, r5
 8006866:	bf38      	it	cc
 8006868:	2100      	movcc	r1, #0
 800686a:	440b      	add	r3, r1
 800686c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006870:	b199      	cbz	r1, 800689a <__mdiff+0x11a>
 8006872:	6117      	str	r7, [r2, #16]
 8006874:	e79e      	b.n	80067b4 <__mdiff+0x34>
 8006876:	46e6      	mov	lr, ip
 8006878:	f854 1b04 	ldr.w	r1, [r4], #4
 800687c:	fa1f fc81 	uxth.w	ip, r1
 8006880:	44f4      	add	ip, lr
 8006882:	0c08      	lsrs	r0, r1, #16
 8006884:	4471      	add	r1, lr
 8006886:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800688a:	b289      	uxth	r1, r1
 800688c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006890:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006894:	f846 1b04 	str.w	r1, [r6], #4
 8006898:	e7dc      	b.n	8006854 <__mdiff+0xd4>
 800689a:	3f01      	subs	r7, #1
 800689c:	e7e6      	b.n	800686c <__mdiff+0xec>
 800689e:	bf00      	nop
 80068a0:	080092e5 	.word	0x080092e5
 80068a4:	080092f6 	.word	0x080092f6

080068a8 <__ulp>:
 80068a8:	4b0e      	ldr	r3, [pc, #56]	@ (80068e4 <__ulp+0x3c>)
 80068aa:	400b      	ands	r3, r1
 80068ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dc08      	bgt.n	80068c6 <__ulp+0x1e>
 80068b4:	425b      	negs	r3, r3
 80068b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80068ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80068be:	da04      	bge.n	80068ca <__ulp+0x22>
 80068c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80068c4:	4113      	asrs	r3, r2
 80068c6:	2200      	movs	r2, #0
 80068c8:	e008      	b.n	80068dc <__ulp+0x34>
 80068ca:	f1a2 0314 	sub.w	r3, r2, #20
 80068ce:	2b1e      	cmp	r3, #30
 80068d0:	bfd6      	itet	le
 80068d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80068d6:	2201      	movgt	r2, #1
 80068d8:	40da      	lsrle	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	7ff00000 	.word	0x7ff00000

080068e8 <__b2d>:
 80068e8:	6902      	ldr	r2, [r0, #16]
 80068ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ec:	f100 0614 	add.w	r6, r0, #20
 80068f0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80068f4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80068f8:	4f1e      	ldr	r7, [pc, #120]	@ (8006974 <__b2d+0x8c>)
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff fd54 	bl	80063a8 <__hi0bits>
 8006900:	4603      	mov	r3, r0
 8006902:	f1c0 0020 	rsb	r0, r0, #32
 8006906:	2b0a      	cmp	r3, #10
 8006908:	f1a2 0504 	sub.w	r5, r2, #4
 800690c:	6008      	str	r0, [r1, #0]
 800690e:	dc12      	bgt.n	8006936 <__b2d+0x4e>
 8006910:	42ae      	cmp	r6, r5
 8006912:	bf2c      	ite	cs
 8006914:	2200      	movcs	r2, #0
 8006916:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800691a:	f1c3 0c0b 	rsb	ip, r3, #11
 800691e:	3315      	adds	r3, #21
 8006920:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006924:	fa04 f303 	lsl.w	r3, r4, r3
 8006928:	fa22 f20c 	lsr.w	r2, r2, ip
 800692c:	ea4e 0107 	orr.w	r1, lr, r7
 8006930:	431a      	orrs	r2, r3
 8006932:	4610      	mov	r0, r2
 8006934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006936:	42ae      	cmp	r6, r5
 8006938:	bf36      	itet	cc
 800693a:	f1a2 0508 	subcc.w	r5, r2, #8
 800693e:	2200      	movcs	r2, #0
 8006940:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006944:	3b0b      	subs	r3, #11
 8006946:	d012      	beq.n	800696e <__b2d+0x86>
 8006948:	f1c3 0720 	rsb	r7, r3, #32
 800694c:	fa22 f107 	lsr.w	r1, r2, r7
 8006950:	409c      	lsls	r4, r3
 8006952:	430c      	orrs	r4, r1
 8006954:	42b5      	cmp	r5, r6
 8006956:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800695a:	bf94      	ite	ls
 800695c:	2400      	movls	r4, #0
 800695e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006962:	409a      	lsls	r2, r3
 8006964:	40fc      	lsrs	r4, r7
 8006966:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800696a:	4322      	orrs	r2, r4
 800696c:	e7e1      	b.n	8006932 <__b2d+0x4a>
 800696e:	ea44 0107 	orr.w	r1, r4, r7
 8006972:	e7de      	b.n	8006932 <__b2d+0x4a>
 8006974:	3ff00000 	.word	0x3ff00000

08006978 <__d2b>:
 8006978:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800697c:	2101      	movs	r1, #1
 800697e:	4690      	mov	r8, r2
 8006980:	4699      	mov	r9, r3
 8006982:	9e08      	ldr	r6, [sp, #32]
 8006984:	f7ff fc1e 	bl	80061c4 <_Balloc>
 8006988:	4604      	mov	r4, r0
 800698a:	b930      	cbnz	r0, 800699a <__d2b+0x22>
 800698c:	4602      	mov	r2, r0
 800698e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006992:	4b23      	ldr	r3, [pc, #140]	@ (8006a20 <__d2b+0xa8>)
 8006994:	4823      	ldr	r0, [pc, #140]	@ (8006a24 <__d2b+0xac>)
 8006996:	f001 fed3 	bl	8008740 <__assert_func>
 800699a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800699e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069a2:	b10d      	cbz	r5, 80069a8 <__d2b+0x30>
 80069a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	f1b8 0300 	subs.w	r3, r8, #0
 80069ae:	d024      	beq.n	80069fa <__d2b+0x82>
 80069b0:	4668      	mov	r0, sp
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	f7ff fd17 	bl	80063e6 <__lo0bits>
 80069b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069bc:	b1d8      	cbz	r0, 80069f6 <__d2b+0x7e>
 80069be:	f1c0 0320 	rsb	r3, r0, #32
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	430b      	orrs	r3, r1
 80069c8:	40c2      	lsrs	r2, r0
 80069ca:	6163      	str	r3, [r4, #20]
 80069cc:	9201      	str	r2, [sp, #4]
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bf0c      	ite	eq
 80069d4:	2201      	moveq	r2, #1
 80069d6:	2202      	movne	r2, #2
 80069d8:	61a3      	str	r3, [r4, #24]
 80069da:	6122      	str	r2, [r4, #16]
 80069dc:	b1ad      	cbz	r5, 8006a0a <__d2b+0x92>
 80069de:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80069e2:	4405      	add	r5, r0
 80069e4:	6035      	str	r5, [r6, #0]
 80069e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	6018      	str	r0, [r3, #0]
 80069ee:	4620      	mov	r0, r4
 80069f0:	b002      	add	sp, #8
 80069f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80069f6:	6161      	str	r1, [r4, #20]
 80069f8:	e7e9      	b.n	80069ce <__d2b+0x56>
 80069fa:	a801      	add	r0, sp, #4
 80069fc:	f7ff fcf3 	bl	80063e6 <__lo0bits>
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	6163      	str	r3, [r4, #20]
 8006a06:	3020      	adds	r0, #32
 8006a08:	e7e7      	b.n	80069da <__d2b+0x62>
 8006a0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a12:	6030      	str	r0, [r6, #0]
 8006a14:	6918      	ldr	r0, [r3, #16]
 8006a16:	f7ff fcc7 	bl	80063a8 <__hi0bits>
 8006a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a1e:	e7e4      	b.n	80069ea <__d2b+0x72>
 8006a20:	080092e5 	.word	0x080092e5
 8006a24:	080092f6 	.word	0x080092f6

08006a28 <__ratio>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	e9cd 1000 	strd	r1, r0, [sp]
 8006a32:	a902      	add	r1, sp, #8
 8006a34:	f7ff ff58 	bl	80068e8 <__b2d>
 8006a38:	468b      	mov	fp, r1
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	9800      	ldr	r0, [sp, #0]
 8006a40:	a903      	add	r1, sp, #12
 8006a42:	f7ff ff51 	bl	80068e8 <__b2d>
 8006a46:	460d      	mov	r5, r1
 8006a48:	9b01      	ldr	r3, [sp, #4]
 8006a4a:	4689      	mov	r9, r1
 8006a4c:	6919      	ldr	r1, [r3, #16]
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	4604      	mov	r4, r0
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	4630      	mov	r0, r6
 8006a56:	1ac9      	subs	r1, r1, r3
 8006a58:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bfcd      	iteet	gt
 8006a66:	463a      	movgt	r2, r7
 8006a68:	462a      	movle	r2, r5
 8006a6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a6e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006a72:	bfd8      	it	le
 8006a74:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006a78:	464b      	mov	r3, r9
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	f7f9 fe55 	bl	800072c <__aeabi_ddiv>
 8006a82:	b005      	add	sp, #20
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a88 <__copybits>:
 8006a88:	3901      	subs	r1, #1
 8006a8a:	b570      	push	{r4, r5, r6, lr}
 8006a8c:	1149      	asrs	r1, r1, #5
 8006a8e:	6914      	ldr	r4, [r2, #16]
 8006a90:	3101      	adds	r1, #1
 8006a92:	f102 0314 	add.w	r3, r2, #20
 8006a96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a9e:	1f05      	subs	r5, r0, #4
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d30c      	bcc.n	8006abe <__copybits+0x36>
 8006aa4:	1aa3      	subs	r3, r4, r2
 8006aa6:	3b11      	subs	r3, #17
 8006aa8:	f023 0303 	bic.w	r3, r3, #3
 8006aac:	3211      	adds	r2, #17
 8006aae:	42a2      	cmp	r2, r4
 8006ab0:	bf88      	it	hi
 8006ab2:	2300      	movhi	r3, #0
 8006ab4:	4418      	add	r0, r3
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	4288      	cmp	r0, r1
 8006aba:	d305      	bcc.n	8006ac8 <__copybits+0x40>
 8006abc:	bd70      	pop	{r4, r5, r6, pc}
 8006abe:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ac2:	f845 6f04 	str.w	r6, [r5, #4]!
 8006ac6:	e7eb      	b.n	8006aa0 <__copybits+0x18>
 8006ac8:	f840 3b04 	str.w	r3, [r0], #4
 8006acc:	e7f4      	b.n	8006ab8 <__copybits+0x30>

08006ace <__any_on>:
 8006ace:	f100 0214 	add.w	r2, r0, #20
 8006ad2:	6900      	ldr	r0, [r0, #16]
 8006ad4:	114b      	asrs	r3, r1, #5
 8006ad6:	4298      	cmp	r0, r3
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	db11      	blt.n	8006b00 <__any_on+0x32>
 8006adc:	dd0a      	ble.n	8006af4 <__any_on+0x26>
 8006ade:	f011 011f 	ands.w	r1, r1, #31
 8006ae2:	d007      	beq.n	8006af4 <__any_on+0x26>
 8006ae4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ae8:	fa24 f001 	lsr.w	r0, r4, r1
 8006aec:	fa00 f101 	lsl.w	r1, r0, r1
 8006af0:	428c      	cmp	r4, r1
 8006af2:	d10b      	bne.n	8006b0c <__any_on+0x3e>
 8006af4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d803      	bhi.n	8006b04 <__any_on+0x36>
 8006afc:	2000      	movs	r0, #0
 8006afe:	bd10      	pop	{r4, pc}
 8006b00:	4603      	mov	r3, r0
 8006b02:	e7f7      	b.n	8006af4 <__any_on+0x26>
 8006b04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	d0f5      	beq.n	8006af8 <__any_on+0x2a>
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	e7f6      	b.n	8006afe <__any_on+0x30>

08006b10 <sulp>:
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	460f      	mov	r7, r1
 8006b16:	4690      	mov	r8, r2
 8006b18:	f7ff fec6 	bl	80068a8 <__ulp>
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	460d      	mov	r5, r1
 8006b20:	f1b8 0f00 	cmp.w	r8, #0
 8006b24:	d011      	beq.n	8006b4a <sulp+0x3a>
 8006b26:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006b2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dd0b      	ble.n	8006b4a <sulp+0x3a>
 8006b32:	2400      	movs	r4, #0
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b3a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006b3e:	4622      	mov	r2, r4
 8006b40:	462b      	mov	r3, r5
 8006b42:	f7f9 fcc9 	bl	80004d8 <__aeabi_dmul>
 8006b46:	4604      	mov	r4, r0
 8006b48:	460d      	mov	r5, r1
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b52:	0000      	movs	r0, r0
 8006b54:	0000      	movs	r0, r0
	...

08006b58 <_strtod_l>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	b09f      	sub	sp, #124	@ 0x7c
 8006b5e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b60:	2200      	movs	r2, #0
 8006b62:	460c      	mov	r4, r1
 8006b64:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b66:	f04f 0a00 	mov.w	sl, #0
 8006b6a:	f04f 0b00 	mov.w	fp, #0
 8006b6e:	460a      	mov	r2, r1
 8006b70:	9005      	str	r0, [sp, #20]
 8006b72:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b74:	7811      	ldrb	r1, [r2, #0]
 8006b76:	292b      	cmp	r1, #43	@ 0x2b
 8006b78:	d048      	beq.n	8006c0c <_strtod_l+0xb4>
 8006b7a:	d836      	bhi.n	8006bea <_strtod_l+0x92>
 8006b7c:	290d      	cmp	r1, #13
 8006b7e:	d830      	bhi.n	8006be2 <_strtod_l+0x8a>
 8006b80:	2908      	cmp	r1, #8
 8006b82:	d830      	bhi.n	8006be6 <_strtod_l+0x8e>
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d039      	beq.n	8006bfc <_strtod_l+0xa4>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b8e:	782a      	ldrb	r2, [r5, #0]
 8006b90:	2a30      	cmp	r2, #48	@ 0x30
 8006b92:	f040 80b1 	bne.w	8006cf8 <_strtod_l+0x1a0>
 8006b96:	786a      	ldrb	r2, [r5, #1]
 8006b98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b9c:	2a58      	cmp	r2, #88	@ 0x58
 8006b9e:	d16c      	bne.n	8006c7a <_strtod_l+0x122>
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba4:	4a8e      	ldr	r2, [pc, #568]	@ (8006de0 <_strtod_l+0x288>)
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	ab1a      	add	r3, sp, #104	@ 0x68
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	9805      	ldr	r0, [sp, #20]
 8006bae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006bb0:	a919      	add	r1, sp, #100	@ 0x64
 8006bb2:	f001 fe5f 	bl	8008874 <__gethex>
 8006bb6:	f010 060f 	ands.w	r6, r0, #15
 8006bba:	4604      	mov	r4, r0
 8006bbc:	d005      	beq.n	8006bca <_strtod_l+0x72>
 8006bbe:	2e06      	cmp	r6, #6
 8006bc0:	d126      	bne.n	8006c10 <_strtod_l+0xb8>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 8584 	bne.w	80076da <_strtod_l+0xb82>
 8006bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bd4:	b1bb      	cbz	r3, 8006c06 <_strtod_l+0xae>
 8006bd6:	4650      	mov	r0, sl
 8006bd8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006bdc:	b01f      	add	sp, #124	@ 0x7c
 8006bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	2920      	cmp	r1, #32
 8006be4:	d1d0      	bne.n	8006b88 <_strtod_l+0x30>
 8006be6:	3201      	adds	r2, #1
 8006be8:	e7c3      	b.n	8006b72 <_strtod_l+0x1a>
 8006bea:	292d      	cmp	r1, #45	@ 0x2d
 8006bec:	d1cc      	bne.n	8006b88 <_strtod_l+0x30>
 8006bee:	2101      	movs	r1, #1
 8006bf0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006bf2:	1c51      	adds	r1, r2, #1
 8006bf4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006bf6:	7852      	ldrb	r2, [r2, #1]
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	d1c7      	bne.n	8006b8c <_strtod_l+0x34>
 8006bfc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bfe:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 8568 	bne.w	80076d6 <_strtod_l+0xb7e>
 8006c06:	4650      	mov	r0, sl
 8006c08:	4659      	mov	r1, fp
 8006c0a:	e7e7      	b.n	8006bdc <_strtod_l+0x84>
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	e7ef      	b.n	8006bf0 <_strtod_l+0x98>
 8006c10:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c12:	b13a      	cbz	r2, 8006c24 <_strtod_l+0xcc>
 8006c14:	2135      	movs	r1, #53	@ 0x35
 8006c16:	a81c      	add	r0, sp, #112	@ 0x70
 8006c18:	f7ff ff36 	bl	8006a88 <__copybits>
 8006c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c1e:	9805      	ldr	r0, [sp, #20]
 8006c20:	f7ff fb10 	bl	8006244 <_Bfree>
 8006c24:	3e01      	subs	r6, #1
 8006c26:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c28:	2e04      	cmp	r6, #4
 8006c2a:	d806      	bhi.n	8006c3a <_strtod_l+0xe2>
 8006c2c:	e8df f006 	tbb	[pc, r6]
 8006c30:	201d0314 	.word	0x201d0314
 8006c34:	14          	.byte	0x14
 8006c35:	00          	.byte	0x00
 8006c36:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c3a:	05e1      	lsls	r1, r4, #23
 8006c3c:	bf48      	it	mi
 8006c3e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006c42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c46:	0d1b      	lsrs	r3, r3, #20
 8006c48:	051b      	lsls	r3, r3, #20
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1bd      	bne.n	8006bca <_strtod_l+0x72>
 8006c4e:	f7fe fb29 	bl	80052a4 <__errno>
 8006c52:	2322      	movs	r3, #34	@ 0x22
 8006c54:	6003      	str	r3, [r0, #0]
 8006c56:	e7b8      	b.n	8006bca <_strtod_l+0x72>
 8006c58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c64:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c68:	e7e7      	b.n	8006c3a <_strtod_l+0xe2>
 8006c6a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006de4 <_strtod_l+0x28c>
 8006c6e:	e7e4      	b.n	8006c3a <_strtod_l+0xe2>
 8006c70:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c74:	f04f 3aff 	mov.w	sl, #4294967295
 8006c78:	e7df      	b.n	8006c3a <_strtod_l+0xe2>
 8006c7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b30      	cmp	r3, #48	@ 0x30
 8006c84:	d0f9      	beq.n	8006c7a <_strtod_l+0x122>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d09f      	beq.n	8006bca <_strtod_l+0x72>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c90:	220a      	movs	r2, #10
 8006c92:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c94:	2300      	movs	r3, #0
 8006c96:	461f      	mov	r7, r3
 8006c98:	9308      	str	r3, [sp, #32]
 8006c9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c9c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c9e:	7805      	ldrb	r5, [r0, #0]
 8006ca0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006ca4:	b2d9      	uxtb	r1, r3
 8006ca6:	2909      	cmp	r1, #9
 8006ca8:	d928      	bls.n	8006cfc <_strtod_l+0x1a4>
 8006caa:	2201      	movs	r2, #1
 8006cac:	494e      	ldr	r1, [pc, #312]	@ (8006de8 <_strtod_l+0x290>)
 8006cae:	f7fe fa9c 	bl	80051ea <strncmp>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d032      	beq.n	8006d1c <_strtod_l+0x1c4>
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4681      	mov	r9, r0
 8006cbc:	463d      	mov	r5, r7
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2a65      	cmp	r2, #101	@ 0x65
 8006cc2:	d001      	beq.n	8006cc8 <_strtod_l+0x170>
 8006cc4:	2a45      	cmp	r2, #69	@ 0x45
 8006cc6:	d114      	bne.n	8006cf2 <_strtod_l+0x19a>
 8006cc8:	b91d      	cbnz	r5, 8006cd2 <_strtod_l+0x17a>
 8006cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ccc:	4302      	orrs	r2, r0
 8006cce:	d095      	beq.n	8006bfc <_strtod_l+0xa4>
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006cd4:	1c62      	adds	r2, r4, #1
 8006cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cd8:	7862      	ldrb	r2, [r4, #1]
 8006cda:	2a2b      	cmp	r2, #43	@ 0x2b
 8006cdc:	d077      	beq.n	8006dce <_strtod_l+0x276>
 8006cde:	2a2d      	cmp	r2, #45	@ 0x2d
 8006ce0:	d07b      	beq.n	8006dda <_strtod_l+0x282>
 8006ce2:	f04f 0c00 	mov.w	ip, #0
 8006ce6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006cea:	2909      	cmp	r1, #9
 8006cec:	f240 8082 	bls.w	8006df4 <_strtod_l+0x29c>
 8006cf0:	9419      	str	r4, [sp, #100]	@ 0x64
 8006cf2:	f04f 0800 	mov.w	r8, #0
 8006cf6:	e0a2      	b.n	8006e3e <_strtod_l+0x2e6>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e7c7      	b.n	8006c8c <_strtod_l+0x134>
 8006cfc:	2f08      	cmp	r7, #8
 8006cfe:	bfd5      	itete	le
 8006d00:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006d02:	9908      	ldrgt	r1, [sp, #32]
 8006d04:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d08:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d0c:	f100 0001 	add.w	r0, r0, #1
 8006d10:	bfd4      	ite	le
 8006d12:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d14:	9308      	strgt	r3, [sp, #32]
 8006d16:	3701      	adds	r7, #1
 8006d18:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d1a:	e7bf      	b.n	8006c9c <_strtod_l+0x144>
 8006d1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d22:	785a      	ldrb	r2, [r3, #1]
 8006d24:	b37f      	cbz	r7, 8006d86 <_strtod_l+0x22e>
 8006d26:	4681      	mov	r9, r0
 8006d28:	463d      	mov	r5, r7
 8006d2a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d2e:	2b09      	cmp	r3, #9
 8006d30:	d912      	bls.n	8006d58 <_strtod_l+0x200>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e7c4      	b.n	8006cc0 <_strtod_l+0x168>
 8006d36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d38:	3001      	adds	r0, #1
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d3e:	785a      	ldrb	r2, [r3, #1]
 8006d40:	2a30      	cmp	r2, #48	@ 0x30
 8006d42:	d0f8      	beq.n	8006d36 <_strtod_l+0x1de>
 8006d44:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	f200 84cb 	bhi.w	80076e4 <_strtod_l+0xb8c>
 8006d4e:	4681      	mov	r9, r0
 8006d50:	2000      	movs	r0, #0
 8006d52:	4605      	mov	r5, r0
 8006d54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d56:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d58:	3a30      	subs	r2, #48	@ 0x30
 8006d5a:	f100 0301 	add.w	r3, r0, #1
 8006d5e:	d02a      	beq.n	8006db6 <_strtod_l+0x25e>
 8006d60:	4499      	add	r9, r3
 8006d62:	210a      	movs	r1, #10
 8006d64:	462b      	mov	r3, r5
 8006d66:	eb00 0c05 	add.w	ip, r0, r5
 8006d6a:	4563      	cmp	r3, ip
 8006d6c:	d10d      	bne.n	8006d8a <_strtod_l+0x232>
 8006d6e:	1c69      	adds	r1, r5, #1
 8006d70:	4401      	add	r1, r0
 8006d72:	4428      	add	r0, r5
 8006d74:	2808      	cmp	r0, #8
 8006d76:	dc16      	bgt.n	8006da6 <_strtod_l+0x24e>
 8006d78:	230a      	movs	r3, #10
 8006d7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d7c:	fb03 2300 	mla	r3, r3, r0, r2
 8006d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d82:	2300      	movs	r3, #0
 8006d84:	e018      	b.n	8006db8 <_strtod_l+0x260>
 8006d86:	4638      	mov	r0, r7
 8006d88:	e7da      	b.n	8006d40 <_strtod_l+0x1e8>
 8006d8a:	2b08      	cmp	r3, #8
 8006d8c:	f103 0301 	add.w	r3, r3, #1
 8006d90:	dc03      	bgt.n	8006d9a <_strtod_l+0x242>
 8006d92:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d94:	434e      	muls	r6, r1
 8006d96:	960a      	str	r6, [sp, #40]	@ 0x28
 8006d98:	e7e7      	b.n	8006d6a <_strtod_l+0x212>
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	bfde      	ittt	le
 8006d9e:	9e08      	ldrle	r6, [sp, #32]
 8006da0:	434e      	mulle	r6, r1
 8006da2:	9608      	strle	r6, [sp, #32]
 8006da4:	e7e1      	b.n	8006d6a <_strtod_l+0x212>
 8006da6:	280f      	cmp	r0, #15
 8006da8:	dceb      	bgt.n	8006d82 <_strtod_l+0x22a>
 8006daa:	230a      	movs	r3, #10
 8006dac:	9808      	ldr	r0, [sp, #32]
 8006dae:	fb03 2300 	mla	r3, r3, r0, r2
 8006db2:	9308      	str	r3, [sp, #32]
 8006db4:	e7e5      	b.n	8006d82 <_strtod_l+0x22a>
 8006db6:	4629      	mov	r1, r5
 8006db8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dba:	460d      	mov	r5, r1
 8006dbc:	1c50      	adds	r0, r2, #1
 8006dbe:	9019      	str	r0, [sp, #100]	@ 0x64
 8006dc0:	7852      	ldrb	r2, [r2, #1]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	e7b1      	b.n	8006d2a <_strtod_l+0x1d2>
 8006dc6:	f04f 0900 	mov.w	r9, #0
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e77d      	b.n	8006cca <_strtod_l+0x172>
 8006dce:	f04f 0c00 	mov.w	ip, #0
 8006dd2:	1ca2      	adds	r2, r4, #2
 8006dd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dd6:	78a2      	ldrb	r2, [r4, #2]
 8006dd8:	e785      	b.n	8006ce6 <_strtod_l+0x18e>
 8006dda:	f04f 0c01 	mov.w	ip, #1
 8006dde:	e7f8      	b.n	8006dd2 <_strtod_l+0x27a>
 8006de0:	08009468 	.word	0x08009468
 8006de4:	7ff00000 	.word	0x7ff00000
 8006de8:	08009450 	.word	0x08009450
 8006dec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dee:	1c51      	adds	r1, r2, #1
 8006df0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006df2:	7852      	ldrb	r2, [r2, #1]
 8006df4:	2a30      	cmp	r2, #48	@ 0x30
 8006df6:	d0f9      	beq.n	8006dec <_strtod_l+0x294>
 8006df8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006dfc:	2908      	cmp	r1, #8
 8006dfe:	f63f af78 	bhi.w	8006cf2 <_strtod_l+0x19a>
 8006e02:	f04f 080a 	mov.w	r8, #10
 8006e06:	3a30      	subs	r2, #48	@ 0x30
 8006e08:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006e0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e10:	1c56      	adds	r6, r2, #1
 8006e12:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e14:	7852      	ldrb	r2, [r2, #1]
 8006e16:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e1a:	f1be 0f09 	cmp.w	lr, #9
 8006e1e:	d939      	bls.n	8006e94 <_strtod_l+0x33c>
 8006e20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e26:	1a76      	subs	r6, r6, r1
 8006e28:	2e08      	cmp	r6, #8
 8006e2a:	dc03      	bgt.n	8006e34 <_strtod_l+0x2dc>
 8006e2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e2e:	4588      	cmp	r8, r1
 8006e30:	bfa8      	it	ge
 8006e32:	4688      	movge	r8, r1
 8006e34:	f1bc 0f00 	cmp.w	ip, #0
 8006e38:	d001      	beq.n	8006e3e <_strtod_l+0x2e6>
 8006e3a:	f1c8 0800 	rsb	r8, r8, #0
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	d14e      	bne.n	8006ee0 <_strtod_l+0x388>
 8006e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e44:	4308      	orrs	r0, r1
 8006e46:	f47f aec0 	bne.w	8006bca <_strtod_l+0x72>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f47f aed6 	bne.w	8006bfc <_strtod_l+0xa4>
 8006e50:	2a69      	cmp	r2, #105	@ 0x69
 8006e52:	d028      	beq.n	8006ea6 <_strtod_l+0x34e>
 8006e54:	dc25      	bgt.n	8006ea2 <_strtod_l+0x34a>
 8006e56:	2a49      	cmp	r2, #73	@ 0x49
 8006e58:	d025      	beq.n	8006ea6 <_strtod_l+0x34e>
 8006e5a:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e5c:	f47f aece 	bne.w	8006bfc <_strtod_l+0xa4>
 8006e60:	499a      	ldr	r1, [pc, #616]	@ (80070cc <_strtod_l+0x574>)
 8006e62:	a819      	add	r0, sp, #100	@ 0x64
 8006e64:	f001 ff28 	bl	8008cb8 <__match>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f43f aec7 	beq.w	8006bfc <_strtod_l+0xa4>
 8006e6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b28      	cmp	r3, #40	@ 0x28
 8006e74:	d12e      	bne.n	8006ed4 <_strtod_l+0x37c>
 8006e76:	4996      	ldr	r1, [pc, #600]	@ (80070d0 <_strtod_l+0x578>)
 8006e78:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e7a:	a819      	add	r0, sp, #100	@ 0x64
 8006e7c:	f001 ff30 	bl	8008ce0 <__hexnan>
 8006e80:	2805      	cmp	r0, #5
 8006e82:	d127      	bne.n	8006ed4 <_strtod_l+0x37c>
 8006e84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e86:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e8a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e8e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e92:	e69a      	b.n	8006bca <_strtod_l+0x72>
 8006e94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e96:	fb08 2101 	mla	r1, r8, r1, r2
 8006e9a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ea0:	e7b5      	b.n	8006e0e <_strtod_l+0x2b6>
 8006ea2:	2a6e      	cmp	r2, #110	@ 0x6e
 8006ea4:	e7da      	b.n	8006e5c <_strtod_l+0x304>
 8006ea6:	498b      	ldr	r1, [pc, #556]	@ (80070d4 <_strtod_l+0x57c>)
 8006ea8:	a819      	add	r0, sp, #100	@ 0x64
 8006eaa:	f001 ff05 	bl	8008cb8 <__match>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f aea4 	beq.w	8006bfc <_strtod_l+0xa4>
 8006eb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eb6:	4988      	ldr	r1, [pc, #544]	@ (80070d8 <_strtod_l+0x580>)
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	a819      	add	r0, sp, #100	@ 0x64
 8006ebc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ebe:	f001 fefb 	bl	8008cb8 <__match>
 8006ec2:	b910      	cbnz	r0, 8006eca <_strtod_l+0x372>
 8006ec4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006eca:	f04f 0a00 	mov.w	sl, #0
 8006ece:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80070dc <_strtod_l+0x584>
 8006ed2:	e67a      	b.n	8006bca <_strtod_l+0x72>
 8006ed4:	4882      	ldr	r0, [pc, #520]	@ (80070e0 <_strtod_l+0x588>)
 8006ed6:	f001 fc2d 	bl	8008734 <nan>
 8006eda:	4682      	mov	sl, r0
 8006edc:	468b      	mov	fp, r1
 8006ede:	e674      	b.n	8006bca <_strtod_l+0x72>
 8006ee0:	eba8 0309 	sub.w	r3, r8, r9
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	bf08      	it	eq
 8006ee8:	462f      	moveq	r7, r5
 8006eea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006eec:	2d10      	cmp	r5, #16
 8006eee:	462c      	mov	r4, r5
 8006ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef2:	bfa8      	it	ge
 8006ef4:	2410      	movge	r4, #16
 8006ef6:	f7f9 fa75 	bl	80003e4 <__aeabi_ui2d>
 8006efa:	2d09      	cmp	r5, #9
 8006efc:	4682      	mov	sl, r0
 8006efe:	468b      	mov	fp, r1
 8006f00:	dc11      	bgt.n	8006f26 <_strtod_l+0x3ce>
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f43f ae60 	beq.w	8006bca <_strtod_l+0x72>
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	dd76      	ble.n	8006ffc <_strtod_l+0x4a4>
 8006f0e:	2b16      	cmp	r3, #22
 8006f10:	dc5d      	bgt.n	8006fce <_strtod_l+0x476>
 8006f12:	4974      	ldr	r1, [pc, #464]	@ (80070e4 <_strtod_l+0x58c>)
 8006f14:	4652      	mov	r2, sl
 8006f16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f1a:	465b      	mov	r3, fp
 8006f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f20:	f7f9 fada 	bl	80004d8 <__aeabi_dmul>
 8006f24:	e7d9      	b.n	8006eda <_strtod_l+0x382>
 8006f26:	4b6f      	ldr	r3, [pc, #444]	@ (80070e4 <_strtod_l+0x58c>)
 8006f28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f30:	f7f9 fad2 	bl	80004d8 <__aeabi_dmul>
 8006f34:	4682      	mov	sl, r0
 8006f36:	9808      	ldr	r0, [sp, #32]
 8006f38:	468b      	mov	fp, r1
 8006f3a:	f7f9 fa53 	bl	80003e4 <__aeabi_ui2d>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4650      	mov	r0, sl
 8006f44:	4659      	mov	r1, fp
 8006f46:	f7f9 f911 	bl	800016c <__adddf3>
 8006f4a:	2d0f      	cmp	r5, #15
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	468b      	mov	fp, r1
 8006f50:	ddd7      	ble.n	8006f02 <_strtod_l+0x3aa>
 8006f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f54:	1b2c      	subs	r4, r5, r4
 8006f56:	441c      	add	r4, r3
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	f340 8096 	ble.w	800708a <_strtod_l+0x532>
 8006f5e:	f014 030f 	ands.w	r3, r4, #15
 8006f62:	d00a      	beq.n	8006f7a <_strtod_l+0x422>
 8006f64:	495f      	ldr	r1, [pc, #380]	@ (80070e4 <_strtod_l+0x58c>)
 8006f66:	4652      	mov	r2, sl
 8006f68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f70:	465b      	mov	r3, fp
 8006f72:	f7f9 fab1 	bl	80004d8 <__aeabi_dmul>
 8006f76:	4682      	mov	sl, r0
 8006f78:	468b      	mov	fp, r1
 8006f7a:	f034 040f 	bics.w	r4, r4, #15
 8006f7e:	d073      	beq.n	8007068 <_strtod_l+0x510>
 8006f80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f84:	dd48      	ble.n	8007018 <_strtod_l+0x4c0>
 8006f86:	2400      	movs	r4, #0
 8006f88:	46a0      	mov	r8, r4
 8006f8a:	46a1      	mov	r9, r4
 8006f8c:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f8e:	2322      	movs	r3, #34	@ 0x22
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	9a05      	ldr	r2, [sp, #20]
 8006f96:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80070dc <_strtod_l+0x584>
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f43f ae13 	beq.w	8006bca <_strtod_l+0x72>
 8006fa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fa6:	9805      	ldr	r0, [sp, #20]
 8006fa8:	f7ff f94c 	bl	8006244 <_Bfree>
 8006fac:	4649      	mov	r1, r9
 8006fae:	9805      	ldr	r0, [sp, #20]
 8006fb0:	f7ff f948 	bl	8006244 <_Bfree>
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	9805      	ldr	r0, [sp, #20]
 8006fb8:	f7ff f944 	bl	8006244 <_Bfree>
 8006fbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fbe:	9805      	ldr	r0, [sp, #20]
 8006fc0:	f7ff f940 	bl	8006244 <_Bfree>
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	9805      	ldr	r0, [sp, #20]
 8006fc8:	f7ff f93c 	bl	8006244 <_Bfree>
 8006fcc:	e5fd      	b.n	8006bca <_strtod_l+0x72>
 8006fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	dbbc      	blt.n	8006f52 <_strtod_l+0x3fa>
 8006fd8:	4c42      	ldr	r4, [pc, #264]	@ (80070e4 <_strtod_l+0x58c>)
 8006fda:	f1c5 050f 	rsb	r5, r5, #15
 8006fde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe8:	465b      	mov	r3, fp
 8006fea:	f7f9 fa75 	bl	80004d8 <__aeabi_dmul>
 8006fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff0:	1b5d      	subs	r5, r3, r5
 8006ff2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ff6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ffa:	e791      	b.n	8006f20 <_strtod_l+0x3c8>
 8006ffc:	3316      	adds	r3, #22
 8006ffe:	dba8      	blt.n	8006f52 <_strtod_l+0x3fa>
 8007000:	4b38      	ldr	r3, [pc, #224]	@ (80070e4 <_strtod_l+0x58c>)
 8007002:	eba9 0808 	sub.w	r8, r9, r8
 8007006:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800700a:	4650      	mov	r0, sl
 800700c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007010:	4659      	mov	r1, fp
 8007012:	f7f9 fb8b 	bl	800072c <__aeabi_ddiv>
 8007016:	e760      	b.n	8006eda <_strtod_l+0x382>
 8007018:	4b33      	ldr	r3, [pc, #204]	@ (80070e8 <_strtod_l+0x590>)
 800701a:	4650      	mov	r0, sl
 800701c:	9308      	str	r3, [sp, #32]
 800701e:	2300      	movs	r3, #0
 8007020:	4659      	mov	r1, fp
 8007022:	461e      	mov	r6, r3
 8007024:	1124      	asrs	r4, r4, #4
 8007026:	2c01      	cmp	r4, #1
 8007028:	dc21      	bgt.n	800706e <_strtod_l+0x516>
 800702a:	b10b      	cbz	r3, 8007030 <_strtod_l+0x4d8>
 800702c:	4682      	mov	sl, r0
 800702e:	468b      	mov	fp, r1
 8007030:	492d      	ldr	r1, [pc, #180]	@ (80070e8 <_strtod_l+0x590>)
 8007032:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007036:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800703a:	4652      	mov	r2, sl
 800703c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007040:	465b      	mov	r3, fp
 8007042:	f7f9 fa49 	bl	80004d8 <__aeabi_dmul>
 8007046:	4b25      	ldr	r3, [pc, #148]	@ (80070dc <_strtod_l+0x584>)
 8007048:	460a      	mov	r2, r1
 800704a:	400b      	ands	r3, r1
 800704c:	4927      	ldr	r1, [pc, #156]	@ (80070ec <_strtod_l+0x594>)
 800704e:	4682      	mov	sl, r0
 8007050:	428b      	cmp	r3, r1
 8007052:	d898      	bhi.n	8006f86 <_strtod_l+0x42e>
 8007054:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007058:	428b      	cmp	r3, r1
 800705a:	bf86      	itte	hi
 800705c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007060:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80070f0 <_strtod_l+0x598>
 8007064:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007068:	2300      	movs	r3, #0
 800706a:	9308      	str	r3, [sp, #32]
 800706c:	e07a      	b.n	8007164 <_strtod_l+0x60c>
 800706e:	07e2      	lsls	r2, r4, #31
 8007070:	d505      	bpl.n	800707e <_strtod_l+0x526>
 8007072:	9b08      	ldr	r3, [sp, #32]
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f7f9 fa2e 	bl	80004d8 <__aeabi_dmul>
 800707c:	2301      	movs	r3, #1
 800707e:	9a08      	ldr	r2, [sp, #32]
 8007080:	3601      	adds	r6, #1
 8007082:	3208      	adds	r2, #8
 8007084:	1064      	asrs	r4, r4, #1
 8007086:	9208      	str	r2, [sp, #32]
 8007088:	e7cd      	b.n	8007026 <_strtod_l+0x4ce>
 800708a:	d0ed      	beq.n	8007068 <_strtod_l+0x510>
 800708c:	4264      	negs	r4, r4
 800708e:	f014 020f 	ands.w	r2, r4, #15
 8007092:	d00a      	beq.n	80070aa <_strtod_l+0x552>
 8007094:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <_strtod_l+0x58c>)
 8007096:	4650      	mov	r0, sl
 8007098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800709c:	4659      	mov	r1, fp
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 fb43 	bl	800072c <__aeabi_ddiv>
 80070a6:	4682      	mov	sl, r0
 80070a8:	468b      	mov	fp, r1
 80070aa:	1124      	asrs	r4, r4, #4
 80070ac:	d0dc      	beq.n	8007068 <_strtod_l+0x510>
 80070ae:	2c1f      	cmp	r4, #31
 80070b0:	dd20      	ble.n	80070f4 <_strtod_l+0x59c>
 80070b2:	2400      	movs	r4, #0
 80070b4:	46a0      	mov	r8, r4
 80070b6:	46a1      	mov	r9, r4
 80070b8:	940a      	str	r4, [sp, #40]	@ 0x28
 80070ba:	2322      	movs	r3, #34	@ 0x22
 80070bc:	9a05      	ldr	r2, [sp, #20]
 80070be:	f04f 0a00 	mov.w	sl, #0
 80070c2:	f04f 0b00 	mov.w	fp, #0
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	e768      	b.n	8006f9c <_strtod_l+0x444>
 80070ca:	bf00      	nop
 80070cc:	0800923f 	.word	0x0800923f
 80070d0:	08009454 	.word	0x08009454
 80070d4:	08009237 	.word	0x08009237
 80070d8:	0800926c 	.word	0x0800926c
 80070dc:	7ff00000 	.word	0x7ff00000
 80070e0:	08009618 	.word	0x08009618
 80070e4:	08009388 	.word	0x08009388
 80070e8:	08009360 	.word	0x08009360
 80070ec:	7ca00000 	.word	0x7ca00000
 80070f0:	7fefffff 	.word	0x7fefffff
 80070f4:	f014 0310 	ands.w	r3, r4, #16
 80070f8:	bf18      	it	ne
 80070fa:	236a      	movne	r3, #106	@ 0x6a
 80070fc:	4650      	mov	r0, sl
 80070fe:	9308      	str	r3, [sp, #32]
 8007100:	4659      	mov	r1, fp
 8007102:	2300      	movs	r3, #0
 8007104:	4ea9      	ldr	r6, [pc, #676]	@ (80073ac <_strtod_l+0x854>)
 8007106:	07e2      	lsls	r2, r4, #31
 8007108:	d504      	bpl.n	8007114 <_strtod_l+0x5bc>
 800710a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800710e:	f7f9 f9e3 	bl	80004d8 <__aeabi_dmul>
 8007112:	2301      	movs	r3, #1
 8007114:	1064      	asrs	r4, r4, #1
 8007116:	f106 0608 	add.w	r6, r6, #8
 800711a:	d1f4      	bne.n	8007106 <_strtod_l+0x5ae>
 800711c:	b10b      	cbz	r3, 8007122 <_strtod_l+0x5ca>
 800711e:	4682      	mov	sl, r0
 8007120:	468b      	mov	fp, r1
 8007122:	9b08      	ldr	r3, [sp, #32]
 8007124:	b1b3      	cbz	r3, 8007154 <_strtod_l+0x5fc>
 8007126:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800712a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800712e:	2b00      	cmp	r3, #0
 8007130:	4659      	mov	r1, fp
 8007132:	dd0f      	ble.n	8007154 <_strtod_l+0x5fc>
 8007134:	2b1f      	cmp	r3, #31
 8007136:	dd57      	ble.n	80071e8 <_strtod_l+0x690>
 8007138:	2b34      	cmp	r3, #52	@ 0x34
 800713a:	bfd8      	it	le
 800713c:	f04f 33ff 	movle.w	r3, #4294967295
 8007140:	f04f 0a00 	mov.w	sl, #0
 8007144:	bfcf      	iteee	gt
 8007146:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800714a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800714e:	4093      	lslle	r3, r2
 8007150:	ea03 0b01 	andle.w	fp, r3, r1
 8007154:	2200      	movs	r2, #0
 8007156:	2300      	movs	r3, #0
 8007158:	4650      	mov	r0, sl
 800715a:	4659      	mov	r1, fp
 800715c:	f7f9 fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8007160:	2800      	cmp	r0, #0
 8007162:	d1a6      	bne.n	80070b2 <_strtod_l+0x55a>
 8007164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007166:	463a      	mov	r2, r7
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800716c:	462b      	mov	r3, r5
 800716e:	9805      	ldr	r0, [sp, #20]
 8007170:	f7ff f8d0 	bl	8006314 <__s2b>
 8007174:	900a      	str	r0, [sp, #40]	@ 0x28
 8007176:	2800      	cmp	r0, #0
 8007178:	f43f af05 	beq.w	8006f86 <_strtod_l+0x42e>
 800717c:	2400      	movs	r4, #0
 800717e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007180:	eba9 0308 	sub.w	r3, r9, r8
 8007184:	2a00      	cmp	r2, #0
 8007186:	bfa8      	it	ge
 8007188:	2300      	movge	r3, #0
 800718a:	46a0      	mov	r8, r4
 800718c:	9312      	str	r3, [sp, #72]	@ 0x48
 800718e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007192:	9316      	str	r3, [sp, #88]	@ 0x58
 8007194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007196:	9805      	ldr	r0, [sp, #20]
 8007198:	6859      	ldr	r1, [r3, #4]
 800719a:	f7ff f813 	bl	80061c4 <_Balloc>
 800719e:	4681      	mov	r9, r0
 80071a0:	2800      	cmp	r0, #0
 80071a2:	f43f aef4 	beq.w	8006f8e <_strtod_l+0x436>
 80071a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a8:	300c      	adds	r0, #12
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	f103 010c 	add.w	r1, r3, #12
 80071b0:	3202      	adds	r2, #2
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	f001 fab0 	bl	8008718 <memcpy>
 80071b8:	ab1c      	add	r3, sp, #112	@ 0x70
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4652      	mov	r2, sl
 80071c2:	465b      	mov	r3, fp
 80071c4:	9805      	ldr	r0, [sp, #20]
 80071c6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80071ca:	f7ff fbd5 	bl	8006978 <__d2b>
 80071ce:	901a      	str	r0, [sp, #104]	@ 0x68
 80071d0:	2800      	cmp	r0, #0
 80071d2:	f43f aedc 	beq.w	8006f8e <_strtod_l+0x436>
 80071d6:	2101      	movs	r1, #1
 80071d8:	9805      	ldr	r0, [sp, #20]
 80071da:	f7ff f931 	bl	8006440 <__i2b>
 80071de:	4680      	mov	r8, r0
 80071e0:	b948      	cbnz	r0, 80071f6 <_strtod_l+0x69e>
 80071e2:	f04f 0800 	mov.w	r8, #0
 80071e6:	e6d2      	b.n	8006f8e <_strtod_l+0x436>
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	ea03 0a0a 	and.w	sl, r3, sl
 80071f4:	e7ae      	b.n	8007154 <_strtod_l+0x5fc>
 80071f6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80071f8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	bfab      	itete	ge
 80071fe:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007200:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007202:	18ef      	addge	r7, r5, r3
 8007204:	1b5e      	sublt	r6, r3, r5
 8007206:	9b08      	ldr	r3, [sp, #32]
 8007208:	bfa8      	it	ge
 800720a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800720c:	eba5 0503 	sub.w	r5, r5, r3
 8007210:	4415      	add	r5, r2
 8007212:	4b67      	ldr	r3, [pc, #412]	@ (80073b0 <_strtod_l+0x858>)
 8007214:	f105 35ff 	add.w	r5, r5, #4294967295
 8007218:	bfb8      	it	lt
 800721a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800721c:	429d      	cmp	r5, r3
 800721e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007222:	da50      	bge.n	80072c6 <_strtod_l+0x76e>
 8007224:	1b5b      	subs	r3, r3, r5
 8007226:	2b1f      	cmp	r3, #31
 8007228:	f04f 0101 	mov.w	r1, #1
 800722c:	eba2 0203 	sub.w	r2, r2, r3
 8007230:	dc3d      	bgt.n	80072ae <_strtod_l+0x756>
 8007232:	fa01 f303 	lsl.w	r3, r1, r3
 8007236:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007238:	2300      	movs	r3, #0
 800723a:	9310      	str	r3, [sp, #64]	@ 0x40
 800723c:	18bd      	adds	r5, r7, r2
 800723e:	9b08      	ldr	r3, [sp, #32]
 8007240:	42af      	cmp	r7, r5
 8007242:	4416      	add	r6, r2
 8007244:	441e      	add	r6, r3
 8007246:	463b      	mov	r3, r7
 8007248:	bfa8      	it	ge
 800724a:	462b      	movge	r3, r5
 800724c:	42b3      	cmp	r3, r6
 800724e:	bfa8      	it	ge
 8007250:	4633      	movge	r3, r6
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfc2      	ittt	gt
 8007256:	1aed      	subgt	r5, r5, r3
 8007258:	1af6      	subgt	r6, r6, r3
 800725a:	1aff      	subgt	r7, r7, r3
 800725c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800725e:	2b00      	cmp	r3, #0
 8007260:	dd16      	ble.n	8007290 <_strtod_l+0x738>
 8007262:	4641      	mov	r1, r8
 8007264:	461a      	mov	r2, r3
 8007266:	9805      	ldr	r0, [sp, #20]
 8007268:	f7ff f9a8 	bl	80065bc <__pow5mult>
 800726c:	4680      	mov	r8, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	d0b7      	beq.n	80071e2 <_strtod_l+0x68a>
 8007272:	4601      	mov	r1, r0
 8007274:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007276:	9805      	ldr	r0, [sp, #20]
 8007278:	f7ff f8f8 	bl	800646c <__multiply>
 800727c:	900e      	str	r0, [sp, #56]	@ 0x38
 800727e:	2800      	cmp	r0, #0
 8007280:	f43f ae85 	beq.w	8006f8e <_strtod_l+0x436>
 8007284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007286:	9805      	ldr	r0, [sp, #20]
 8007288:	f7fe ffdc 	bl	8006244 <_Bfree>
 800728c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800728e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007290:	2d00      	cmp	r5, #0
 8007292:	dc1d      	bgt.n	80072d0 <_strtod_l+0x778>
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	dd23      	ble.n	80072e2 <_strtod_l+0x78a>
 800729a:	4649      	mov	r1, r9
 800729c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800729e:	9805      	ldr	r0, [sp, #20]
 80072a0:	f7ff f98c 	bl	80065bc <__pow5mult>
 80072a4:	4681      	mov	r9, r0
 80072a6:	b9e0      	cbnz	r0, 80072e2 <_strtod_l+0x78a>
 80072a8:	f04f 0900 	mov.w	r9, #0
 80072ac:	e66f      	b.n	8006f8e <_strtod_l+0x436>
 80072ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80072b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80072b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80072ba:	35e2      	adds	r5, #226	@ 0xe2
 80072bc:	fa01 f305 	lsl.w	r3, r1, r5
 80072c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80072c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80072c4:	e7ba      	b.n	800723c <_strtod_l+0x6e4>
 80072c6:	2300      	movs	r3, #0
 80072c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80072ca:	2301      	movs	r3, #1
 80072cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072ce:	e7b5      	b.n	800723c <_strtod_l+0x6e4>
 80072d0:	462a      	mov	r2, r5
 80072d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072d4:	9805      	ldr	r0, [sp, #20]
 80072d6:	f7ff f9cb 	bl	8006670 <__lshift>
 80072da:	901a      	str	r0, [sp, #104]	@ 0x68
 80072dc:	2800      	cmp	r0, #0
 80072de:	d1d9      	bne.n	8007294 <_strtod_l+0x73c>
 80072e0:	e655      	b.n	8006f8e <_strtod_l+0x436>
 80072e2:	2e00      	cmp	r6, #0
 80072e4:	dd07      	ble.n	80072f6 <_strtod_l+0x79e>
 80072e6:	4649      	mov	r1, r9
 80072e8:	4632      	mov	r2, r6
 80072ea:	9805      	ldr	r0, [sp, #20]
 80072ec:	f7ff f9c0 	bl	8006670 <__lshift>
 80072f0:	4681      	mov	r9, r0
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d0d8      	beq.n	80072a8 <_strtod_l+0x750>
 80072f6:	2f00      	cmp	r7, #0
 80072f8:	dd08      	ble.n	800730c <_strtod_l+0x7b4>
 80072fa:	4641      	mov	r1, r8
 80072fc:	463a      	mov	r2, r7
 80072fe:	9805      	ldr	r0, [sp, #20]
 8007300:	f7ff f9b6 	bl	8006670 <__lshift>
 8007304:	4680      	mov	r8, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f ae41 	beq.w	8006f8e <_strtod_l+0x436>
 800730c:	464a      	mov	r2, r9
 800730e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007310:	9805      	ldr	r0, [sp, #20]
 8007312:	f7ff fa35 	bl	8006780 <__mdiff>
 8007316:	4604      	mov	r4, r0
 8007318:	2800      	cmp	r0, #0
 800731a:	f43f ae38 	beq.w	8006f8e <_strtod_l+0x436>
 800731e:	68c3      	ldr	r3, [r0, #12]
 8007320:	4641      	mov	r1, r8
 8007322:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007324:	2300      	movs	r3, #0
 8007326:	60c3      	str	r3, [r0, #12]
 8007328:	f7ff fa0e 	bl	8006748 <__mcmp>
 800732c:	2800      	cmp	r0, #0
 800732e:	da45      	bge.n	80073bc <_strtod_l+0x864>
 8007330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007332:	ea53 030a 	orrs.w	r3, r3, sl
 8007336:	d16b      	bne.n	8007410 <_strtod_l+0x8b8>
 8007338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800733c:	2b00      	cmp	r3, #0
 800733e:	d167      	bne.n	8007410 <_strtod_l+0x8b8>
 8007340:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007344:	0d1b      	lsrs	r3, r3, #20
 8007346:	051b      	lsls	r3, r3, #20
 8007348:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800734c:	d960      	bls.n	8007410 <_strtod_l+0x8b8>
 800734e:	6963      	ldr	r3, [r4, #20]
 8007350:	b913      	cbnz	r3, 8007358 <_strtod_l+0x800>
 8007352:	6923      	ldr	r3, [r4, #16]
 8007354:	2b01      	cmp	r3, #1
 8007356:	dd5b      	ble.n	8007410 <_strtod_l+0x8b8>
 8007358:	4621      	mov	r1, r4
 800735a:	2201      	movs	r2, #1
 800735c:	9805      	ldr	r0, [sp, #20]
 800735e:	f7ff f987 	bl	8006670 <__lshift>
 8007362:	4641      	mov	r1, r8
 8007364:	4604      	mov	r4, r0
 8007366:	f7ff f9ef 	bl	8006748 <__mcmp>
 800736a:	2800      	cmp	r0, #0
 800736c:	dd50      	ble.n	8007410 <_strtod_l+0x8b8>
 800736e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007372:	9a08      	ldr	r2, [sp, #32]
 8007374:	0d1b      	lsrs	r3, r3, #20
 8007376:	051b      	lsls	r3, r3, #20
 8007378:	2a00      	cmp	r2, #0
 800737a:	d06a      	beq.n	8007452 <_strtod_l+0x8fa>
 800737c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007380:	d867      	bhi.n	8007452 <_strtod_l+0x8fa>
 8007382:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007386:	f67f ae98 	bls.w	80070ba <_strtod_l+0x562>
 800738a:	4650      	mov	r0, sl
 800738c:	4659      	mov	r1, fp
 800738e:	4b09      	ldr	r3, [pc, #36]	@ (80073b4 <_strtod_l+0x85c>)
 8007390:	2200      	movs	r2, #0
 8007392:	f7f9 f8a1 	bl	80004d8 <__aeabi_dmul>
 8007396:	4b08      	ldr	r3, [pc, #32]	@ (80073b8 <_strtod_l+0x860>)
 8007398:	4682      	mov	sl, r0
 800739a:	400b      	ands	r3, r1
 800739c:	468b      	mov	fp, r1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f47f ae00 	bne.w	8006fa4 <_strtod_l+0x44c>
 80073a4:	2322      	movs	r3, #34	@ 0x22
 80073a6:	9a05      	ldr	r2, [sp, #20]
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e5fb      	b.n	8006fa4 <_strtod_l+0x44c>
 80073ac:	08009480 	.word	0x08009480
 80073b0:	fffffc02 	.word	0xfffffc02
 80073b4:	39500000 	.word	0x39500000
 80073b8:	7ff00000 	.word	0x7ff00000
 80073bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80073c0:	d165      	bne.n	800748e <_strtod_l+0x936>
 80073c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073c8:	b35a      	cbz	r2, 8007422 <_strtod_l+0x8ca>
 80073ca:	4a99      	ldr	r2, [pc, #612]	@ (8007630 <_strtod_l+0xad8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d12b      	bne.n	8007428 <_strtod_l+0x8d0>
 80073d0:	9b08      	ldr	r3, [sp, #32]
 80073d2:	4651      	mov	r1, sl
 80073d4:	b303      	cbz	r3, 8007418 <_strtod_l+0x8c0>
 80073d6:	465a      	mov	r2, fp
 80073d8:	4b96      	ldr	r3, [pc, #600]	@ (8007634 <_strtod_l+0xadc>)
 80073da:	4013      	ands	r3, r2
 80073dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295
 80073e4:	d81b      	bhi.n	800741e <_strtod_l+0x8c6>
 80073e6:	0d1b      	lsrs	r3, r3, #20
 80073e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d119      	bne.n	8007428 <_strtod_l+0x8d0>
 80073f4:	4b90      	ldr	r3, [pc, #576]	@ (8007638 <_strtod_l+0xae0>)
 80073f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d102      	bne.n	8007402 <_strtod_l+0x8aa>
 80073fc:	3101      	adds	r1, #1
 80073fe:	f43f adc6 	beq.w	8006f8e <_strtod_l+0x436>
 8007402:	f04f 0a00 	mov.w	sl, #0
 8007406:	4b8b      	ldr	r3, [pc, #556]	@ (8007634 <_strtod_l+0xadc>)
 8007408:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800740a:	401a      	ands	r2, r3
 800740c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007410:	9b08      	ldr	r3, [sp, #32]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1b9      	bne.n	800738a <_strtod_l+0x832>
 8007416:	e5c5      	b.n	8006fa4 <_strtod_l+0x44c>
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	e7e8      	b.n	80073f0 <_strtod_l+0x898>
 800741e:	4613      	mov	r3, r2
 8007420:	e7e6      	b.n	80073f0 <_strtod_l+0x898>
 8007422:	ea53 030a 	orrs.w	r3, r3, sl
 8007426:	d0a2      	beq.n	800736e <_strtod_l+0x816>
 8007428:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800742a:	b1db      	cbz	r3, 8007464 <_strtod_l+0x90c>
 800742c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800742e:	4213      	tst	r3, r2
 8007430:	d0ee      	beq.n	8007410 <_strtod_l+0x8b8>
 8007432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007434:	4650      	mov	r0, sl
 8007436:	4659      	mov	r1, fp
 8007438:	9a08      	ldr	r2, [sp, #32]
 800743a:	b1bb      	cbz	r3, 800746c <_strtod_l+0x914>
 800743c:	f7ff fb68 	bl	8006b10 <sulp>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007448:	f7f8 fe90 	bl	800016c <__adddf3>
 800744c:	4682      	mov	sl, r0
 800744e:	468b      	mov	fp, r1
 8007450:	e7de      	b.n	8007410 <_strtod_l+0x8b8>
 8007452:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007456:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800745a:	f04f 3aff 	mov.w	sl, #4294967295
 800745e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007462:	e7d5      	b.n	8007410 <_strtod_l+0x8b8>
 8007464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007466:	ea13 0f0a 	tst.w	r3, sl
 800746a:	e7e1      	b.n	8007430 <_strtod_l+0x8d8>
 800746c:	f7ff fb50 	bl	8006b10 <sulp>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007478:	f7f8 fe76 	bl	8000168 <__aeabi_dsub>
 800747c:	2200      	movs	r2, #0
 800747e:	2300      	movs	r3, #0
 8007480:	4682      	mov	sl, r0
 8007482:	468b      	mov	fp, r1
 8007484:	f7f9 fa90 	bl	80009a8 <__aeabi_dcmpeq>
 8007488:	2800      	cmp	r0, #0
 800748a:	d0c1      	beq.n	8007410 <_strtod_l+0x8b8>
 800748c:	e615      	b.n	80070ba <_strtod_l+0x562>
 800748e:	4641      	mov	r1, r8
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff fac9 	bl	8006a28 <__ratio>
 8007496:	2200      	movs	r2, #0
 8007498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800749c:	4606      	mov	r6, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	f7f9 fa96 	bl	80009d0 <__aeabi_dcmple>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d06d      	beq.n	8007584 <_strtod_l+0xa2c>
 80074a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d178      	bne.n	80075a0 <_strtod_l+0xa48>
 80074ae:	f1ba 0f00 	cmp.w	sl, #0
 80074b2:	d156      	bne.n	8007562 <_strtod_l+0xa0a>
 80074b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d158      	bne.n	8007570 <_strtod_l+0xa18>
 80074be:	2200      	movs	r2, #0
 80074c0:	4630      	mov	r0, r6
 80074c2:	4639      	mov	r1, r7
 80074c4:	4b5d      	ldr	r3, [pc, #372]	@ (800763c <_strtod_l+0xae4>)
 80074c6:	f7f9 fa79 	bl	80009bc <__aeabi_dcmplt>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d157      	bne.n	800757e <_strtod_l+0xa26>
 80074ce:	4630      	mov	r0, r6
 80074d0:	4639      	mov	r1, r7
 80074d2:	2200      	movs	r2, #0
 80074d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007640 <_strtod_l+0xae8>)
 80074d6:	f7f8 ffff 	bl	80004d8 <__aeabi_dmul>
 80074da:	4606      	mov	r6, r0
 80074dc:	460f      	mov	r7, r1
 80074de:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80074e2:	9606      	str	r6, [sp, #24]
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074ea:	4d52      	ldr	r5, [pc, #328]	@ (8007634 <_strtod_l+0xadc>)
 80074ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80074f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f2:	401d      	ands	r5, r3
 80074f4:	4b53      	ldr	r3, [pc, #332]	@ (8007644 <_strtod_l+0xaec>)
 80074f6:	429d      	cmp	r5, r3
 80074f8:	f040 80aa 	bne.w	8007650 <_strtod_l+0xaf8>
 80074fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074fe:	4650      	mov	r0, sl
 8007500:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007504:	4659      	mov	r1, fp
 8007506:	f7ff f9cf 	bl	80068a8 <__ulp>
 800750a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800750e:	f7f8 ffe3 	bl	80004d8 <__aeabi_dmul>
 8007512:	4652      	mov	r2, sl
 8007514:	465b      	mov	r3, fp
 8007516:	f7f8 fe29 	bl	800016c <__adddf3>
 800751a:	460b      	mov	r3, r1
 800751c:	4945      	ldr	r1, [pc, #276]	@ (8007634 <_strtod_l+0xadc>)
 800751e:	4a4a      	ldr	r2, [pc, #296]	@ (8007648 <_strtod_l+0xaf0>)
 8007520:	4019      	ands	r1, r3
 8007522:	4291      	cmp	r1, r2
 8007524:	4682      	mov	sl, r0
 8007526:	d942      	bls.n	80075ae <_strtod_l+0xa56>
 8007528:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800752a:	4b43      	ldr	r3, [pc, #268]	@ (8007638 <_strtod_l+0xae0>)
 800752c:	429a      	cmp	r2, r3
 800752e:	d103      	bne.n	8007538 <_strtod_l+0x9e0>
 8007530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007532:	3301      	adds	r3, #1
 8007534:	f43f ad2b 	beq.w	8006f8e <_strtod_l+0x436>
 8007538:	f04f 3aff 	mov.w	sl, #4294967295
 800753c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007638 <_strtod_l+0xae0>
 8007540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007542:	9805      	ldr	r0, [sp, #20]
 8007544:	f7fe fe7e 	bl	8006244 <_Bfree>
 8007548:	4649      	mov	r1, r9
 800754a:	9805      	ldr	r0, [sp, #20]
 800754c:	f7fe fe7a 	bl	8006244 <_Bfree>
 8007550:	4641      	mov	r1, r8
 8007552:	9805      	ldr	r0, [sp, #20]
 8007554:	f7fe fe76 	bl	8006244 <_Bfree>
 8007558:	4621      	mov	r1, r4
 800755a:	9805      	ldr	r0, [sp, #20]
 800755c:	f7fe fe72 	bl	8006244 <_Bfree>
 8007560:	e618      	b.n	8007194 <_strtod_l+0x63c>
 8007562:	f1ba 0f01 	cmp.w	sl, #1
 8007566:	d103      	bne.n	8007570 <_strtod_l+0xa18>
 8007568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800756a:	2b00      	cmp	r3, #0
 800756c:	f43f ada5 	beq.w	80070ba <_strtod_l+0x562>
 8007570:	2200      	movs	r2, #0
 8007572:	4b36      	ldr	r3, [pc, #216]	@ (800764c <_strtod_l+0xaf4>)
 8007574:	2600      	movs	r6, #0
 8007576:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800757a:	4f30      	ldr	r7, [pc, #192]	@ (800763c <_strtod_l+0xae4>)
 800757c:	e7b3      	b.n	80074e6 <_strtod_l+0x98e>
 800757e:	2600      	movs	r6, #0
 8007580:	4f2f      	ldr	r7, [pc, #188]	@ (8007640 <_strtod_l+0xae8>)
 8007582:	e7ac      	b.n	80074de <_strtod_l+0x986>
 8007584:	4630      	mov	r0, r6
 8007586:	4639      	mov	r1, r7
 8007588:	4b2d      	ldr	r3, [pc, #180]	@ (8007640 <_strtod_l+0xae8>)
 800758a:	2200      	movs	r2, #0
 800758c:	f7f8 ffa4 	bl	80004d8 <__aeabi_dmul>
 8007590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007592:	4606      	mov	r6, r0
 8007594:	460f      	mov	r7, r1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0a1      	beq.n	80074de <_strtod_l+0x986>
 800759a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800759e:	e7a2      	b.n	80074e6 <_strtod_l+0x98e>
 80075a0:	2200      	movs	r2, #0
 80075a2:	4b26      	ldr	r3, [pc, #152]	@ (800763c <_strtod_l+0xae4>)
 80075a4:	4616      	mov	r6, r2
 80075a6:	461f      	mov	r7, r3
 80075a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075ac:	e79b      	b.n	80074e6 <_strtod_l+0x98e>
 80075ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1c1      	bne.n	8007540 <_strtod_l+0x9e8>
 80075bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075c0:	0d1b      	lsrs	r3, r3, #20
 80075c2:	051b      	lsls	r3, r3, #20
 80075c4:	429d      	cmp	r5, r3
 80075c6:	d1bb      	bne.n	8007540 <_strtod_l+0x9e8>
 80075c8:	4630      	mov	r0, r6
 80075ca:	4639      	mov	r1, r7
 80075cc:	f7f9 fae4 	bl	8000b98 <__aeabi_d2lz>
 80075d0:	f7f8 ff54 	bl	800047c <__aeabi_l2d>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4630      	mov	r0, r6
 80075da:	4639      	mov	r1, r7
 80075dc:	f7f8 fdc4 	bl	8000168 <__aeabi_dsub>
 80075e0:	460b      	mov	r3, r1
 80075e2:	4602      	mov	r2, r0
 80075e4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80075e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80075ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ee:	ea46 060a 	orr.w	r6, r6, sl
 80075f2:	431e      	orrs	r6, r3
 80075f4:	d069      	beq.n	80076ca <_strtod_l+0xb72>
 80075f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007620 <_strtod_l+0xac8>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f9 f9de 	bl	80009bc <__aeabi_dcmplt>
 8007600:	2800      	cmp	r0, #0
 8007602:	f47f accf 	bne.w	8006fa4 <_strtod_l+0x44c>
 8007606:	a308      	add	r3, pc, #32	@ (adr r3, 8007628 <_strtod_l+0xad0>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007610:	f7f9 f9f2 	bl	80009f8 <__aeabi_dcmpgt>
 8007614:	2800      	cmp	r0, #0
 8007616:	d093      	beq.n	8007540 <_strtod_l+0x9e8>
 8007618:	e4c4      	b.n	8006fa4 <_strtod_l+0x44c>
 800761a:	bf00      	nop
 800761c:	f3af 8000 	nop.w
 8007620:	94a03595 	.word	0x94a03595
 8007624:	3fdfffff 	.word	0x3fdfffff
 8007628:	35afe535 	.word	0x35afe535
 800762c:	3fe00000 	.word	0x3fe00000
 8007630:	000fffff 	.word	0x000fffff
 8007634:	7ff00000 	.word	0x7ff00000
 8007638:	7fefffff 	.word	0x7fefffff
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	3fe00000 	.word	0x3fe00000
 8007644:	7fe00000 	.word	0x7fe00000
 8007648:	7c9fffff 	.word	0x7c9fffff
 800764c:	bff00000 	.word	0xbff00000
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	b323      	cbz	r3, 800769e <_strtod_l+0xb46>
 8007654:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007658:	d821      	bhi.n	800769e <_strtod_l+0xb46>
 800765a:	a327      	add	r3, pc, #156	@ (adr r3, 80076f8 <_strtod_l+0xba0>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f7f9 f9b4 	bl	80009d0 <__aeabi_dcmple>
 8007668:	b1a0      	cbz	r0, 8007694 <_strtod_l+0xb3c>
 800766a:	4639      	mov	r1, r7
 800766c:	4630      	mov	r0, r6
 800766e:	f7f9 fa0b 	bl	8000a88 <__aeabi_d2uiz>
 8007672:	2801      	cmp	r0, #1
 8007674:	bf38      	it	cc
 8007676:	2001      	movcc	r0, #1
 8007678:	f7f8 feb4 	bl	80003e4 <__aeabi_ui2d>
 800767c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767e:	4606      	mov	r6, r0
 8007680:	460f      	mov	r7, r1
 8007682:	b9fb      	cbnz	r3, 80076c4 <_strtod_l+0xb6c>
 8007684:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007688:	9014      	str	r0, [sp, #80]	@ 0x50
 800768a:	9315      	str	r3, [sp, #84]	@ 0x54
 800768c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007690:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007694:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007696:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800769a:	1b5b      	subs	r3, r3, r5
 800769c:	9311      	str	r3, [sp, #68]	@ 0x44
 800769e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076a2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80076a6:	f7ff f8ff 	bl	80068a8 <__ulp>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4650      	mov	r0, sl
 80076b0:	4659      	mov	r1, fp
 80076b2:	f7f8 ff11 	bl	80004d8 <__aeabi_dmul>
 80076b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80076ba:	f7f8 fd57 	bl	800016c <__adddf3>
 80076be:	4682      	mov	sl, r0
 80076c0:	468b      	mov	fp, r1
 80076c2:	e776      	b.n	80075b2 <_strtod_l+0xa5a>
 80076c4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80076c8:	e7e0      	b.n	800768c <_strtod_l+0xb34>
 80076ca:	a30d      	add	r3, pc, #52	@ (adr r3, 8007700 <_strtod_l+0xba8>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f7f9 f974 	bl	80009bc <__aeabi_dcmplt>
 80076d4:	e79e      	b.n	8007614 <_strtod_l+0xabc>
 80076d6:	2300      	movs	r3, #0
 80076d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076dc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	f7ff ba77 	b.w	8006bd2 <_strtod_l+0x7a>
 80076e4:	2a65      	cmp	r2, #101	@ 0x65
 80076e6:	f43f ab6e 	beq.w	8006dc6 <_strtod_l+0x26e>
 80076ea:	2a45      	cmp	r2, #69	@ 0x45
 80076ec:	f43f ab6b 	beq.w	8006dc6 <_strtod_l+0x26e>
 80076f0:	2301      	movs	r3, #1
 80076f2:	f7ff bba6 	b.w	8006e42 <_strtod_l+0x2ea>
 80076f6:	bf00      	nop
 80076f8:	ffc00000 	.word	0xffc00000
 80076fc:	41dfffff 	.word	0x41dfffff
 8007700:	94a03595 	.word	0x94a03595
 8007704:	3fcfffff 	.word	0x3fcfffff

08007708 <_strtod_r>:
 8007708:	4b01      	ldr	r3, [pc, #4]	@ (8007710 <_strtod_r+0x8>)
 800770a:	f7ff ba25 	b.w	8006b58 <_strtod_l>
 800770e:	bf00      	nop
 8007710:	20000070 	.word	0x20000070

08007714 <_strtol_l.constprop.0>:
 8007714:	2b24      	cmp	r3, #36	@ 0x24
 8007716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771a:	4686      	mov	lr, r0
 800771c:	4690      	mov	r8, r2
 800771e:	d801      	bhi.n	8007724 <_strtol_l.constprop.0+0x10>
 8007720:	2b01      	cmp	r3, #1
 8007722:	d106      	bne.n	8007732 <_strtol_l.constprop.0+0x1e>
 8007724:	f7fd fdbe 	bl	80052a4 <__errno>
 8007728:	2316      	movs	r3, #22
 800772a:	6003      	str	r3, [r0, #0]
 800772c:	2000      	movs	r0, #0
 800772e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007732:	460d      	mov	r5, r1
 8007734:	4833      	ldr	r0, [pc, #204]	@ (8007804 <_strtol_l.constprop.0+0xf0>)
 8007736:	462a      	mov	r2, r5
 8007738:	f815 4b01 	ldrb.w	r4, [r5], #1
 800773c:	5d06      	ldrb	r6, [r0, r4]
 800773e:	f016 0608 	ands.w	r6, r6, #8
 8007742:	d1f8      	bne.n	8007736 <_strtol_l.constprop.0+0x22>
 8007744:	2c2d      	cmp	r4, #45	@ 0x2d
 8007746:	d12d      	bne.n	80077a4 <_strtol_l.constprop.0+0x90>
 8007748:	2601      	movs	r6, #1
 800774a:	782c      	ldrb	r4, [r5, #0]
 800774c:	1c95      	adds	r5, r2, #2
 800774e:	f033 0210 	bics.w	r2, r3, #16
 8007752:	d109      	bne.n	8007768 <_strtol_l.constprop.0+0x54>
 8007754:	2c30      	cmp	r4, #48	@ 0x30
 8007756:	d12a      	bne.n	80077ae <_strtol_l.constprop.0+0x9a>
 8007758:	782a      	ldrb	r2, [r5, #0]
 800775a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800775e:	2a58      	cmp	r2, #88	@ 0x58
 8007760:	d125      	bne.n	80077ae <_strtol_l.constprop.0+0x9a>
 8007762:	2310      	movs	r3, #16
 8007764:	786c      	ldrb	r4, [r5, #1]
 8007766:	3502      	adds	r5, #2
 8007768:	2200      	movs	r2, #0
 800776a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800776e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007772:	fbbc f9f3 	udiv	r9, ip, r3
 8007776:	4610      	mov	r0, r2
 8007778:	fb03 ca19 	mls	sl, r3, r9, ip
 800777c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007780:	2f09      	cmp	r7, #9
 8007782:	d81b      	bhi.n	80077bc <_strtol_l.constprop.0+0xa8>
 8007784:	463c      	mov	r4, r7
 8007786:	42a3      	cmp	r3, r4
 8007788:	dd27      	ble.n	80077da <_strtol_l.constprop.0+0xc6>
 800778a:	1c57      	adds	r7, r2, #1
 800778c:	d007      	beq.n	800779e <_strtol_l.constprop.0+0x8a>
 800778e:	4581      	cmp	r9, r0
 8007790:	d320      	bcc.n	80077d4 <_strtol_l.constprop.0+0xc0>
 8007792:	d101      	bne.n	8007798 <_strtol_l.constprop.0+0x84>
 8007794:	45a2      	cmp	sl, r4
 8007796:	db1d      	blt.n	80077d4 <_strtol_l.constprop.0+0xc0>
 8007798:	2201      	movs	r2, #1
 800779a:	fb00 4003 	mla	r0, r0, r3, r4
 800779e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077a2:	e7eb      	b.n	800777c <_strtol_l.constprop.0+0x68>
 80077a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80077a6:	bf04      	itt	eq
 80077a8:	782c      	ldrbeq	r4, [r5, #0]
 80077aa:	1c95      	addeq	r5, r2, #2
 80077ac:	e7cf      	b.n	800774e <_strtol_l.constprop.0+0x3a>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1da      	bne.n	8007768 <_strtol_l.constprop.0+0x54>
 80077b2:	2c30      	cmp	r4, #48	@ 0x30
 80077b4:	bf0c      	ite	eq
 80077b6:	2308      	moveq	r3, #8
 80077b8:	230a      	movne	r3, #10
 80077ba:	e7d5      	b.n	8007768 <_strtol_l.constprop.0+0x54>
 80077bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80077c0:	2f19      	cmp	r7, #25
 80077c2:	d801      	bhi.n	80077c8 <_strtol_l.constprop.0+0xb4>
 80077c4:	3c37      	subs	r4, #55	@ 0x37
 80077c6:	e7de      	b.n	8007786 <_strtol_l.constprop.0+0x72>
 80077c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80077cc:	2f19      	cmp	r7, #25
 80077ce:	d804      	bhi.n	80077da <_strtol_l.constprop.0+0xc6>
 80077d0:	3c57      	subs	r4, #87	@ 0x57
 80077d2:	e7d8      	b.n	8007786 <_strtol_l.constprop.0+0x72>
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	e7e1      	b.n	800779e <_strtol_l.constprop.0+0x8a>
 80077da:	1c53      	adds	r3, r2, #1
 80077dc:	d108      	bne.n	80077f0 <_strtol_l.constprop.0+0xdc>
 80077de:	2322      	movs	r3, #34	@ 0x22
 80077e0:	4660      	mov	r0, ip
 80077e2:	f8ce 3000 	str.w	r3, [lr]
 80077e6:	f1b8 0f00 	cmp.w	r8, #0
 80077ea:	d0a0      	beq.n	800772e <_strtol_l.constprop.0+0x1a>
 80077ec:	1e69      	subs	r1, r5, #1
 80077ee:	e006      	b.n	80077fe <_strtol_l.constprop.0+0xea>
 80077f0:	b106      	cbz	r6, 80077f4 <_strtol_l.constprop.0+0xe0>
 80077f2:	4240      	negs	r0, r0
 80077f4:	f1b8 0f00 	cmp.w	r8, #0
 80077f8:	d099      	beq.n	800772e <_strtol_l.constprop.0+0x1a>
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	d1f6      	bne.n	80077ec <_strtol_l.constprop.0+0xd8>
 80077fe:	f8c8 1000 	str.w	r1, [r8]
 8007802:	e794      	b.n	800772e <_strtol_l.constprop.0+0x1a>
 8007804:	080094a9 	.word	0x080094a9

08007808 <_strtol_r>:
 8007808:	f7ff bf84 	b.w	8007714 <_strtol_l.constprop.0>

0800780c <__ssputs_r>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	461f      	mov	r7, r3
 8007812:	688e      	ldr	r6, [r1, #8]
 8007814:	4682      	mov	sl, r0
 8007816:	42be      	cmp	r6, r7
 8007818:	460c      	mov	r4, r1
 800781a:	4690      	mov	r8, r2
 800781c:	680b      	ldr	r3, [r1, #0]
 800781e:	d82d      	bhi.n	800787c <__ssputs_r+0x70>
 8007820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007824:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007828:	d026      	beq.n	8007878 <__ssputs_r+0x6c>
 800782a:	6965      	ldr	r5, [r4, #20]
 800782c:	6909      	ldr	r1, [r1, #16]
 800782e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007832:	eba3 0901 	sub.w	r9, r3, r1
 8007836:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800783a:	1c7b      	adds	r3, r7, #1
 800783c:	444b      	add	r3, r9
 800783e:	106d      	asrs	r5, r5, #1
 8007840:	429d      	cmp	r5, r3
 8007842:	bf38      	it	cc
 8007844:	461d      	movcc	r5, r3
 8007846:	0553      	lsls	r3, r2, #21
 8007848:	d527      	bpl.n	800789a <__ssputs_r+0x8e>
 800784a:	4629      	mov	r1, r5
 800784c:	f7fe fc2e 	bl	80060ac <_malloc_r>
 8007850:	4606      	mov	r6, r0
 8007852:	b360      	cbz	r0, 80078ae <__ssputs_r+0xa2>
 8007854:	464a      	mov	r2, r9
 8007856:	6921      	ldr	r1, [r4, #16]
 8007858:	f000 ff5e 	bl	8008718 <memcpy>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007866:	81a3      	strh	r3, [r4, #12]
 8007868:	6126      	str	r6, [r4, #16]
 800786a:	444e      	add	r6, r9
 800786c:	6026      	str	r6, [r4, #0]
 800786e:	463e      	mov	r6, r7
 8007870:	6165      	str	r5, [r4, #20]
 8007872:	eba5 0509 	sub.w	r5, r5, r9
 8007876:	60a5      	str	r5, [r4, #8]
 8007878:	42be      	cmp	r6, r7
 800787a:	d900      	bls.n	800787e <__ssputs_r+0x72>
 800787c:	463e      	mov	r6, r7
 800787e:	4632      	mov	r2, r6
 8007880:	4641      	mov	r1, r8
 8007882:	6820      	ldr	r0, [r4, #0]
 8007884:	f000 ff1e 	bl	80086c4 <memmove>
 8007888:	2000      	movs	r0, #0
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	1b9b      	subs	r3, r3, r6
 800788e:	60a3      	str	r3, [r4, #8]
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	4433      	add	r3, r6
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	462a      	mov	r2, r5
 800789c:	f001 facd 	bl	8008e3a <_realloc_r>
 80078a0:	4606      	mov	r6, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d1e0      	bne.n	8007868 <__ssputs_r+0x5c>
 80078a6:	4650      	mov	r0, sl
 80078a8:	6921      	ldr	r1, [r4, #16]
 80078aa:	f7fe fb8d 	bl	8005fc8 <_free_r>
 80078ae:	230c      	movs	r3, #12
 80078b0:	f8ca 3000 	str.w	r3, [sl]
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078be:	81a3      	strh	r3, [r4, #12]
 80078c0:	e7e9      	b.n	8007896 <__ssputs_r+0x8a>
	...

080078c4 <_svfiprintf_r>:
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	4698      	mov	r8, r3
 80078ca:	898b      	ldrh	r3, [r1, #12]
 80078cc:	4607      	mov	r7, r0
 80078ce:	061b      	lsls	r3, r3, #24
 80078d0:	460d      	mov	r5, r1
 80078d2:	4614      	mov	r4, r2
 80078d4:	b09d      	sub	sp, #116	@ 0x74
 80078d6:	d510      	bpl.n	80078fa <_svfiprintf_r+0x36>
 80078d8:	690b      	ldr	r3, [r1, #16]
 80078da:	b973      	cbnz	r3, 80078fa <_svfiprintf_r+0x36>
 80078dc:	2140      	movs	r1, #64	@ 0x40
 80078de:	f7fe fbe5 	bl	80060ac <_malloc_r>
 80078e2:	6028      	str	r0, [r5, #0]
 80078e4:	6128      	str	r0, [r5, #16]
 80078e6:	b930      	cbnz	r0, 80078f6 <_svfiprintf_r+0x32>
 80078e8:	230c      	movs	r3, #12
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	b01d      	add	sp, #116	@ 0x74
 80078f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f6:	2340      	movs	r3, #64	@ 0x40
 80078f8:	616b      	str	r3, [r5, #20]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078fe:	2320      	movs	r3, #32
 8007900:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007904:	2330      	movs	r3, #48	@ 0x30
 8007906:	f04f 0901 	mov.w	r9, #1
 800790a:	f8cd 800c 	str.w	r8, [sp, #12]
 800790e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007aa8 <_svfiprintf_r+0x1e4>
 8007912:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007916:	4623      	mov	r3, r4
 8007918:	469a      	mov	sl, r3
 800791a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800791e:	b10a      	cbz	r2, 8007924 <_svfiprintf_r+0x60>
 8007920:	2a25      	cmp	r2, #37	@ 0x25
 8007922:	d1f9      	bne.n	8007918 <_svfiprintf_r+0x54>
 8007924:	ebba 0b04 	subs.w	fp, sl, r4
 8007928:	d00b      	beq.n	8007942 <_svfiprintf_r+0x7e>
 800792a:	465b      	mov	r3, fp
 800792c:	4622      	mov	r2, r4
 800792e:	4629      	mov	r1, r5
 8007930:	4638      	mov	r0, r7
 8007932:	f7ff ff6b 	bl	800780c <__ssputs_r>
 8007936:	3001      	adds	r0, #1
 8007938:	f000 80a7 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 800793c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800793e:	445a      	add	r2, fp
 8007940:	9209      	str	r2, [sp, #36]	@ 0x24
 8007942:	f89a 3000 	ldrb.w	r3, [sl]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 809f 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 800794c:	2300      	movs	r3, #0
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007956:	f10a 0a01 	add.w	sl, sl, #1
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007962:	931a      	str	r3, [sp, #104]	@ 0x68
 8007964:	4654      	mov	r4, sl
 8007966:	2205      	movs	r2, #5
 8007968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796c:	484e      	ldr	r0, [pc, #312]	@ (8007aa8 <_svfiprintf_r+0x1e4>)
 800796e:	f7fd fcc6 	bl	80052fe <memchr>
 8007972:	9a04      	ldr	r2, [sp, #16]
 8007974:	b9d8      	cbnz	r0, 80079ae <_svfiprintf_r+0xea>
 8007976:	06d0      	lsls	r0, r2, #27
 8007978:	bf44      	itt	mi
 800797a:	2320      	movmi	r3, #32
 800797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007980:	0711      	lsls	r1, r2, #28
 8007982:	bf44      	itt	mi
 8007984:	232b      	movmi	r3, #43	@ 0x2b
 8007986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800798a:	f89a 3000 	ldrb.w	r3, [sl]
 800798e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007990:	d015      	beq.n	80079be <_svfiprintf_r+0xfa>
 8007992:	4654      	mov	r4, sl
 8007994:	2000      	movs	r0, #0
 8007996:	f04f 0c0a 	mov.w	ip, #10
 800799a:	9a07      	ldr	r2, [sp, #28]
 800799c:	4621      	mov	r1, r4
 800799e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a2:	3b30      	subs	r3, #48	@ 0x30
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d94b      	bls.n	8007a40 <_svfiprintf_r+0x17c>
 80079a8:	b1b0      	cbz	r0, 80079d8 <_svfiprintf_r+0x114>
 80079aa:	9207      	str	r2, [sp, #28]
 80079ac:	e014      	b.n	80079d8 <_svfiprintf_r+0x114>
 80079ae:	eba0 0308 	sub.w	r3, r0, r8
 80079b2:	fa09 f303 	lsl.w	r3, r9, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	46a2      	mov	sl, r4
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	e7d2      	b.n	8007964 <_svfiprintf_r+0xa0>
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	1d19      	adds	r1, r3, #4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	9103      	str	r1, [sp, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfbb      	ittet	lt
 80079ca:	425b      	neglt	r3, r3
 80079cc:	f042 0202 	orrlt.w	r2, r2, #2
 80079d0:	9307      	strge	r3, [sp, #28]
 80079d2:	9307      	strlt	r3, [sp, #28]
 80079d4:	bfb8      	it	lt
 80079d6:	9204      	strlt	r2, [sp, #16]
 80079d8:	7823      	ldrb	r3, [r4, #0]
 80079da:	2b2e      	cmp	r3, #46	@ 0x2e
 80079dc:	d10a      	bne.n	80079f4 <_svfiprintf_r+0x130>
 80079de:	7863      	ldrb	r3, [r4, #1]
 80079e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e2:	d132      	bne.n	8007a4a <_svfiprintf_r+0x186>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	3402      	adds	r4, #2
 80079e8:	1d1a      	adds	r2, r3, #4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	9203      	str	r2, [sp, #12]
 80079ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007aac <_svfiprintf_r+0x1e8>
 80079f8:	2203      	movs	r2, #3
 80079fa:	4650      	mov	r0, sl
 80079fc:	7821      	ldrb	r1, [r4, #0]
 80079fe:	f7fd fc7e 	bl	80052fe <memchr>
 8007a02:	b138      	cbz	r0, 8007a14 <_svfiprintf_r+0x150>
 8007a04:	2240      	movs	r2, #64	@ 0x40
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	eba0 000a 	sub.w	r0, r0, sl
 8007a0c:	4082      	lsls	r2, r0
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	3401      	adds	r4, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a18:	2206      	movs	r2, #6
 8007a1a:	4825      	ldr	r0, [pc, #148]	@ (8007ab0 <_svfiprintf_r+0x1ec>)
 8007a1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a20:	f7fd fc6d 	bl	80052fe <memchr>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d036      	beq.n	8007a96 <_svfiprintf_r+0x1d2>
 8007a28:	4b22      	ldr	r3, [pc, #136]	@ (8007ab4 <_svfiprintf_r+0x1f0>)
 8007a2a:	bb1b      	cbnz	r3, 8007a74 <_svfiprintf_r+0x1b0>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	3307      	adds	r3, #7
 8007a30:	f023 0307 	bic.w	r3, r3, #7
 8007a34:	3308      	adds	r3, #8
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3a:	4433      	add	r3, r6
 8007a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3e:	e76a      	b.n	8007916 <_svfiprintf_r+0x52>
 8007a40:	460c      	mov	r4, r1
 8007a42:	2001      	movs	r0, #1
 8007a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a48:	e7a8      	b.n	800799c <_svfiprintf_r+0xd8>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f04f 0c0a 	mov.w	ip, #10
 8007a50:	4619      	mov	r1, r3
 8007a52:	3401      	adds	r4, #1
 8007a54:	9305      	str	r3, [sp, #20]
 8007a56:	4620      	mov	r0, r4
 8007a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a5c:	3a30      	subs	r2, #48	@ 0x30
 8007a5e:	2a09      	cmp	r2, #9
 8007a60:	d903      	bls.n	8007a6a <_svfiprintf_r+0x1a6>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0c6      	beq.n	80079f4 <_svfiprintf_r+0x130>
 8007a66:	9105      	str	r1, [sp, #20]
 8007a68:	e7c4      	b.n	80079f4 <_svfiprintf_r+0x130>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a72:	e7f0      	b.n	8007a56 <_svfiprintf_r+0x192>
 8007a74:	ab03      	add	r3, sp, #12
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab8 <_svfiprintf_r+0x1f4>)
 8007a7e:	a904      	add	r1, sp, #16
 8007a80:	f7fc fc8c 	bl	800439c <_printf_float>
 8007a84:	1c42      	adds	r2, r0, #1
 8007a86:	4606      	mov	r6, r0
 8007a88:	d1d6      	bne.n	8007a38 <_svfiprintf_r+0x174>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	065b      	lsls	r3, r3, #25
 8007a8e:	f53f af2d 	bmi.w	80078ec <_svfiprintf_r+0x28>
 8007a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a94:	e72c      	b.n	80078f0 <_svfiprintf_r+0x2c>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	4b06      	ldr	r3, [pc, #24]	@ (8007ab8 <_svfiprintf_r+0x1f4>)
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	f7fc ff19 	bl	80048d8 <_printf_i>
 8007aa6:	e7ed      	b.n	8007a84 <_svfiprintf_r+0x1c0>
 8007aa8:	080095a9 	.word	0x080095a9
 8007aac:	080095af 	.word	0x080095af
 8007ab0:	080095b3 	.word	0x080095b3
 8007ab4:	0800439d 	.word	0x0800439d
 8007ab8:	0800780d 	.word	0x0800780d

08007abc <_sungetc_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	1c4b      	adds	r3, r1, #1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	d103      	bne.n	8007acc <_sungetc_r+0x10>
 8007ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ac8:	4628      	mov	r0, r5
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	8993      	ldrh	r3, [r2, #12]
 8007ace:	b2cd      	uxtb	r5, r1
 8007ad0:	f023 0320 	bic.w	r3, r3, #32
 8007ad4:	8193      	strh	r3, [r2, #12]
 8007ad6:	6853      	ldr	r3, [r2, #4]
 8007ad8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ada:	b18a      	cbz	r2, 8007b00 <_sungetc_r+0x44>
 8007adc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	dd08      	ble.n	8007af4 <_sungetc_r+0x38>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	6022      	str	r2, [r4, #0]
 8007ae8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007aec:	6863      	ldr	r3, [r4, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	e7e9      	b.n	8007ac8 <_sungetc_r+0xc>
 8007af4:	4621      	mov	r1, r4
 8007af6:	f000 fd18 	bl	800852a <__submore>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d0f1      	beq.n	8007ae2 <_sungetc_r+0x26>
 8007afe:	e7e1      	b.n	8007ac4 <_sungetc_r+0x8>
 8007b00:	6921      	ldr	r1, [r4, #16]
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	b141      	cbz	r1, 8007b18 <_sungetc_r+0x5c>
 8007b06:	4291      	cmp	r1, r2
 8007b08:	d206      	bcs.n	8007b18 <_sungetc_r+0x5c>
 8007b0a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007b0e:	42a9      	cmp	r1, r5
 8007b10:	d102      	bne.n	8007b18 <_sungetc_r+0x5c>
 8007b12:	3a01      	subs	r2, #1
 8007b14:	6022      	str	r2, [r4, #0]
 8007b16:	e7ea      	b.n	8007aee <_sungetc_r+0x32>
 8007b18:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007b1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b20:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b22:	2303      	movs	r3, #3
 8007b24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007b26:	4623      	mov	r3, r4
 8007b28:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e7de      	b.n	8007af0 <_sungetc_r+0x34>

08007b32 <__ssrefill_r>:
 8007b32:	b510      	push	{r4, lr}
 8007b34:	460c      	mov	r4, r1
 8007b36:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007b38:	b169      	cbz	r1, 8007b56 <__ssrefill_r+0x24>
 8007b3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b3e:	4299      	cmp	r1, r3
 8007b40:	d001      	beq.n	8007b46 <__ssrefill_r+0x14>
 8007b42:	f7fe fa41 	bl	8005fc8 <_free_r>
 8007b46:	2000      	movs	r0, #0
 8007b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b4a:	6360      	str	r0, [r4, #52]	@ 0x34
 8007b4c:	6063      	str	r3, [r4, #4]
 8007b4e:	b113      	cbz	r3, 8007b56 <__ssrefill_r+0x24>
 8007b50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	bd10      	pop	{r4, pc}
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f043 0320 	orr.w	r3, r3, #32
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7f3      	b.n	8007b54 <__ssrefill_r+0x22>

08007b6c <__ssvfiscanf_r>:
 8007b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b70:	460c      	mov	r4, r1
 8007b72:	2100      	movs	r1, #0
 8007b74:	4606      	mov	r6, r0
 8007b76:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007b7a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007b7e:	49aa      	ldr	r1, [pc, #680]	@ (8007e28 <__ssvfiscanf_r+0x2bc>)
 8007b80:	f10d 0804 	add.w	r8, sp, #4
 8007b84:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007b86:	49a9      	ldr	r1, [pc, #676]	@ (8007e2c <__ssvfiscanf_r+0x2c0>)
 8007b88:	4fa9      	ldr	r7, [pc, #676]	@ (8007e30 <__ssvfiscanf_r+0x2c4>)
 8007b8a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007b8e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	7813      	ldrb	r3, [r2, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8159 	beq.w	8007e4c <__ssvfiscanf_r+0x2e0>
 8007b9a:	5cf9      	ldrb	r1, [r7, r3]
 8007b9c:	1c55      	adds	r5, r2, #1
 8007b9e:	f011 0108 	ands.w	r1, r1, #8
 8007ba2:	d019      	beq.n	8007bd8 <__ssvfiscanf_r+0x6c>
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dd0f      	ble.n	8007bca <__ssvfiscanf_r+0x5e>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	5cba      	ldrb	r2, [r7, r2]
 8007bb0:	0712      	lsls	r2, r2, #28
 8007bb2:	d401      	bmi.n	8007bb8 <__ssvfiscanf_r+0x4c>
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	e7ec      	b.n	8007b92 <__ssvfiscanf_r+0x26>
 8007bb8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007bba:	3301      	adds	r3, #1
 8007bbc:	3201      	adds	r2, #1
 8007bbe:	9245      	str	r2, [sp, #276]	@ 0x114
 8007bc0:	6862      	ldr	r2, [r4, #4]
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	3a01      	subs	r2, #1
 8007bc6:	6062      	str	r2, [r4, #4]
 8007bc8:	e7ec      	b.n	8007ba4 <__ssvfiscanf_r+0x38>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4630      	mov	r0, r6
 8007bce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007bd0:	4798      	blx	r3
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d0e9      	beq.n	8007baa <__ssvfiscanf_r+0x3e>
 8007bd6:	e7ed      	b.n	8007bb4 <__ssvfiscanf_r+0x48>
 8007bd8:	2b25      	cmp	r3, #37	@ 0x25
 8007bda:	d012      	beq.n	8007c02 <__ssvfiscanf_r+0x96>
 8007bdc:	4699      	mov	r9, r3
 8007bde:	6863      	ldr	r3, [r4, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f340 8094 	ble.w	8007d0e <__ssvfiscanf_r+0x1a2>
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	7813      	ldrb	r3, [r2, #0]
 8007bea:	454b      	cmp	r3, r9
 8007bec:	f040 812e 	bne.w	8007e4c <__ssvfiscanf_r+0x2e0>
 8007bf0:	6863      	ldr	r3, [r4, #4]
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	6063      	str	r3, [r4, #4]
 8007bf8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007bfa:	6022      	str	r2, [r4, #0]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	9345      	str	r3, [sp, #276]	@ 0x114
 8007c00:	e7d8      	b.n	8007bb4 <__ssvfiscanf_r+0x48>
 8007c02:	9141      	str	r1, [sp, #260]	@ 0x104
 8007c04:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007c06:	7853      	ldrb	r3, [r2, #1]
 8007c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c0a:	bf04      	itt	eq
 8007c0c:	2310      	moveq	r3, #16
 8007c0e:	1c95      	addeq	r5, r2, #2
 8007c10:	f04f 020a 	mov.w	r2, #10
 8007c14:	bf08      	it	eq
 8007c16:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007c18:	46a9      	mov	r9, r5
 8007c1a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007c1e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d91e      	bls.n	8007c64 <__ssvfiscanf_r+0xf8>
 8007c26:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8007e34 <__ssvfiscanf_r+0x2c8>
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	4650      	mov	r0, sl
 8007c2e:	f7fd fb66 	bl	80052fe <memchr>
 8007c32:	b138      	cbz	r0, 8007c44 <__ssvfiscanf_r+0xd8>
 8007c34:	2301      	movs	r3, #1
 8007c36:	464d      	mov	r5, r9
 8007c38:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007c3a:	eba0 000a 	sub.w	r0, r0, sl
 8007c3e:	4083      	lsls	r3, r0
 8007c40:	4313      	orrs	r3, r2
 8007c42:	9341      	str	r3, [sp, #260]	@ 0x104
 8007c44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c48:	2b78      	cmp	r3, #120	@ 0x78
 8007c4a:	d806      	bhi.n	8007c5a <__ssvfiscanf_r+0xee>
 8007c4c:	2b57      	cmp	r3, #87	@ 0x57
 8007c4e:	d810      	bhi.n	8007c72 <__ssvfiscanf_r+0x106>
 8007c50:	2b25      	cmp	r3, #37	@ 0x25
 8007c52:	d0c3      	beq.n	8007bdc <__ssvfiscanf_r+0x70>
 8007c54:	d856      	bhi.n	8007d04 <__ssvfiscanf_r+0x198>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d064      	beq.n	8007d24 <__ssvfiscanf_r+0x1b8>
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007c5e:	230a      	movs	r3, #10
 8007c60:	9342      	str	r3, [sp, #264]	@ 0x108
 8007c62:	e077      	b.n	8007d54 <__ssvfiscanf_r+0x1e8>
 8007c64:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007c66:	464d      	mov	r5, r9
 8007c68:	fb02 1103 	mla	r1, r2, r3, r1
 8007c6c:	3930      	subs	r1, #48	@ 0x30
 8007c6e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007c70:	e7d2      	b.n	8007c18 <__ssvfiscanf_r+0xac>
 8007c72:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007c76:	2a20      	cmp	r2, #32
 8007c78:	d8ef      	bhi.n	8007c5a <__ssvfiscanf_r+0xee>
 8007c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8007c80 <__ssvfiscanf_r+0x114>)
 8007c7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c80:	08007d33 	.word	0x08007d33
 8007c84:	08007c5b 	.word	0x08007c5b
 8007c88:	08007c5b 	.word	0x08007c5b
 8007c8c:	08007d8d 	.word	0x08007d8d
 8007c90:	08007c5b 	.word	0x08007c5b
 8007c94:	08007c5b 	.word	0x08007c5b
 8007c98:	08007c5b 	.word	0x08007c5b
 8007c9c:	08007c5b 	.word	0x08007c5b
 8007ca0:	08007c5b 	.word	0x08007c5b
 8007ca4:	08007c5b 	.word	0x08007c5b
 8007ca8:	08007c5b 	.word	0x08007c5b
 8007cac:	08007da3 	.word	0x08007da3
 8007cb0:	08007d89 	.word	0x08007d89
 8007cb4:	08007d0b 	.word	0x08007d0b
 8007cb8:	08007d0b 	.word	0x08007d0b
 8007cbc:	08007d0b 	.word	0x08007d0b
 8007cc0:	08007c5b 	.word	0x08007c5b
 8007cc4:	08007d45 	.word	0x08007d45
 8007cc8:	08007c5b 	.word	0x08007c5b
 8007ccc:	08007c5b 	.word	0x08007c5b
 8007cd0:	08007c5b 	.word	0x08007c5b
 8007cd4:	08007c5b 	.word	0x08007c5b
 8007cd8:	08007db3 	.word	0x08007db3
 8007cdc:	08007d4d 	.word	0x08007d4d
 8007ce0:	08007d2b 	.word	0x08007d2b
 8007ce4:	08007c5b 	.word	0x08007c5b
 8007ce8:	08007c5b 	.word	0x08007c5b
 8007cec:	08007daf 	.word	0x08007daf
 8007cf0:	08007c5b 	.word	0x08007c5b
 8007cf4:	08007d89 	.word	0x08007d89
 8007cf8:	08007c5b 	.word	0x08007c5b
 8007cfc:	08007c5b 	.word	0x08007c5b
 8007d00:	08007d33 	.word	0x08007d33
 8007d04:	3b45      	subs	r3, #69	@ 0x45
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d8a7      	bhi.n	8007c5a <__ssvfiscanf_r+0xee>
 8007d0a:	2305      	movs	r3, #5
 8007d0c:	e021      	b.n	8007d52 <__ssvfiscanf_r+0x1e6>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4630      	mov	r0, r6
 8007d12:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007d14:	4798      	blx	r3
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f43f af65 	beq.w	8007be6 <__ssvfiscanf_r+0x7a>
 8007d1c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f040 808c 	bne.w	8007e3c <__ssvfiscanf_r+0x2d0>
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e08c      	b.n	8007e44 <__ssvfiscanf_r+0x2d8>
 8007d2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007d2c:	f042 0220 	orr.w	r2, r2, #32
 8007d30:	9241      	str	r2, [sp, #260]	@ 0x104
 8007d32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d38:	9241      	str	r2, [sp, #260]	@ 0x104
 8007d3a:	2210      	movs	r2, #16
 8007d3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d3e:	9242      	str	r2, [sp, #264]	@ 0x108
 8007d40:	d902      	bls.n	8007d48 <__ssvfiscanf_r+0x1dc>
 8007d42:	e005      	b.n	8007d50 <__ssvfiscanf_r+0x1e4>
 8007d44:	2300      	movs	r3, #0
 8007d46:	9342      	str	r3, [sp, #264]	@ 0x108
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e002      	b.n	8007d52 <__ssvfiscanf_r+0x1e6>
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007d50:	2304      	movs	r3, #4
 8007d52:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd39      	ble.n	8007dce <__ssvfiscanf_r+0x262>
 8007d5a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007d5c:	0659      	lsls	r1, r3, #25
 8007d5e:	d404      	bmi.n	8007d6a <__ssvfiscanf_r+0x1fe>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	5cba      	ldrb	r2, [r7, r2]
 8007d66:	0712      	lsls	r2, r2, #28
 8007d68:	d438      	bmi.n	8007ddc <__ssvfiscanf_r+0x270>
 8007d6a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	dc47      	bgt.n	8007e00 <__ssvfiscanf_r+0x294>
 8007d70:	466b      	mov	r3, sp
 8007d72:	4622      	mov	r2, r4
 8007d74:	4630      	mov	r0, r6
 8007d76:	a941      	add	r1, sp, #260	@ 0x104
 8007d78:	f000 f9aa 	bl	80080d0 <_scanf_chars>
 8007d7c:	2801      	cmp	r0, #1
 8007d7e:	d065      	beq.n	8007e4c <__ssvfiscanf_r+0x2e0>
 8007d80:	2802      	cmp	r0, #2
 8007d82:	f47f af17 	bne.w	8007bb4 <__ssvfiscanf_r+0x48>
 8007d86:	e7c9      	b.n	8007d1c <__ssvfiscanf_r+0x1b0>
 8007d88:	220a      	movs	r2, #10
 8007d8a:	e7d7      	b.n	8007d3c <__ssvfiscanf_r+0x1d0>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f000 fb92 	bl	80084b8 <__sccl>
 8007d94:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007d96:	4605      	mov	r5, r0
 8007d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9c:	9341      	str	r3, [sp, #260]	@ 0x104
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e7d7      	b.n	8007d52 <__ssvfiscanf_r+0x1e6>
 8007da2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da8:	9341      	str	r3, [sp, #260]	@ 0x104
 8007daa:	2300      	movs	r3, #0
 8007dac:	e7d1      	b.n	8007d52 <__ssvfiscanf_r+0x1e6>
 8007dae:	2302      	movs	r3, #2
 8007db0:	e7cf      	b.n	8007d52 <__ssvfiscanf_r+0x1e6>
 8007db2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007db4:	06c3      	lsls	r3, r0, #27
 8007db6:	f53f aefd 	bmi.w	8007bb4 <__ssvfiscanf_r+0x48>
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007dbe:	1d19      	adds	r1, r3, #4
 8007dc0:	9100      	str	r1, [sp, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	07c0      	lsls	r0, r0, #31
 8007dc6:	bf4c      	ite	mi
 8007dc8:	801a      	strhmi	r2, [r3, #0]
 8007dca:	601a      	strpl	r2, [r3, #0]
 8007dcc:	e6f2      	b.n	8007bb4 <__ssvfiscanf_r+0x48>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007dd4:	4798      	blx	r3
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0bf      	beq.n	8007d5a <__ssvfiscanf_r+0x1ee>
 8007dda:	e79f      	b.n	8007d1c <__ssvfiscanf_r+0x1b0>
 8007ddc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007dde:	3201      	adds	r2, #1
 8007de0:	9245      	str	r2, [sp, #276]	@ 0x114
 8007de2:	6862      	ldr	r2, [r4, #4]
 8007de4:	3a01      	subs	r2, #1
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	6062      	str	r2, [r4, #4]
 8007dea:	dd02      	ble.n	8007df2 <__ssvfiscanf_r+0x286>
 8007dec:	3301      	adds	r3, #1
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	e7b6      	b.n	8007d60 <__ssvfiscanf_r+0x1f4>
 8007df2:	4621      	mov	r1, r4
 8007df4:	4630      	mov	r0, r6
 8007df6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007df8:	4798      	blx	r3
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d0b0      	beq.n	8007d60 <__ssvfiscanf_r+0x1f4>
 8007dfe:	e78d      	b.n	8007d1c <__ssvfiscanf_r+0x1b0>
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	dc06      	bgt.n	8007e12 <__ssvfiscanf_r+0x2a6>
 8007e04:	466b      	mov	r3, sp
 8007e06:	4622      	mov	r2, r4
 8007e08:	4630      	mov	r0, r6
 8007e0a:	a941      	add	r1, sp, #260	@ 0x104
 8007e0c:	f000 f9ba 	bl	8008184 <_scanf_i>
 8007e10:	e7b4      	b.n	8007d7c <__ssvfiscanf_r+0x210>
 8007e12:	4b09      	ldr	r3, [pc, #36]	@ (8007e38 <__ssvfiscanf_r+0x2cc>)
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f43f aecd 	beq.w	8007bb4 <__ssvfiscanf_r+0x48>
 8007e1a:	466b      	mov	r3, sp
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4630      	mov	r0, r6
 8007e20:	a941      	add	r1, sp, #260	@ 0x104
 8007e22:	f7fc fe79 	bl	8004b18 <_scanf_float>
 8007e26:	e7a9      	b.n	8007d7c <__ssvfiscanf_r+0x210>
 8007e28:	08007abd 	.word	0x08007abd
 8007e2c:	08007b33 	.word	0x08007b33
 8007e30:	080094a9 	.word	0x080094a9
 8007e34:	080095af 	.word	0x080095af
 8007e38:	08004b19 	.word	0x08004b19
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	065b      	lsls	r3, r3, #25
 8007e40:	f53f af70 	bmi.w	8007d24 <__ssvfiscanf_r+0x1b8>
 8007e44:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007e4e:	e7f9      	b.n	8007e44 <__ssvfiscanf_r+0x2d8>

08007e50 <__sfputc_r>:
 8007e50:	6893      	ldr	r3, [r2, #8]
 8007e52:	b410      	push	{r4}
 8007e54:	3b01      	subs	r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	6093      	str	r3, [r2, #8]
 8007e5a:	da07      	bge.n	8007e6c <__sfputc_r+0x1c>
 8007e5c:	6994      	ldr	r4, [r2, #24]
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	db01      	blt.n	8007e66 <__sfputc_r+0x16>
 8007e62:	290a      	cmp	r1, #10
 8007e64:	d102      	bne.n	8007e6c <__sfputc_r+0x1c>
 8007e66:	bc10      	pop	{r4}
 8007e68:	f000 bb97 	b.w	800859a <__swbuf_r>
 8007e6c:	6813      	ldr	r3, [r2, #0]
 8007e6e:	1c58      	adds	r0, r3, #1
 8007e70:	6010      	str	r0, [r2, #0]
 8007e72:	7019      	strb	r1, [r3, #0]
 8007e74:	4608      	mov	r0, r1
 8007e76:	bc10      	pop	{r4}
 8007e78:	4770      	bx	lr

08007e7a <__sfputs_r>:
 8007e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	460f      	mov	r7, r1
 8007e80:	4614      	mov	r4, r2
 8007e82:	18d5      	adds	r5, r2, r3
 8007e84:	42ac      	cmp	r4, r5
 8007e86:	d101      	bne.n	8007e8c <__sfputs_r+0x12>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e007      	b.n	8007e9c <__sfputs_r+0x22>
 8007e8c:	463a      	mov	r2, r7
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e94:	f7ff ffdc 	bl	8007e50 <__sfputc_r>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d1f3      	bne.n	8007e84 <__sfputs_r+0xa>
 8007e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ea0 <_vfiprintf_r>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	4698      	mov	r8, r3
 8007eaa:	4606      	mov	r6, r0
 8007eac:	b09d      	sub	sp, #116	@ 0x74
 8007eae:	b118      	cbz	r0, 8007eb8 <_vfiprintf_r+0x18>
 8007eb0:	6a03      	ldr	r3, [r0, #32]
 8007eb2:	b90b      	cbnz	r3, 8007eb8 <_vfiprintf_r+0x18>
 8007eb4:	f7fd f8cc 	bl	8005050 <__sinit>
 8007eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eba:	07d9      	lsls	r1, r3, #31
 8007ebc:	d405      	bmi.n	8007eca <_vfiprintf_r+0x2a>
 8007ebe:	89ab      	ldrh	r3, [r5, #12]
 8007ec0:	059a      	lsls	r2, r3, #22
 8007ec2:	d402      	bmi.n	8007eca <_vfiprintf_r+0x2a>
 8007ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ec6:	f7fd fa18 	bl	80052fa <__retarget_lock_acquire_recursive>
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	071b      	lsls	r3, r3, #28
 8007ece:	d501      	bpl.n	8007ed4 <_vfiprintf_r+0x34>
 8007ed0:	692b      	ldr	r3, [r5, #16]
 8007ed2:	b99b      	cbnz	r3, 8007efc <_vfiprintf_r+0x5c>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f000 fb9e 	bl	8008618 <__swsetup_r>
 8007edc:	b170      	cbz	r0, 8007efc <_vfiprintf_r+0x5c>
 8007ede:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ee0:	07dc      	lsls	r4, r3, #31
 8007ee2:	d504      	bpl.n	8007eee <_vfiprintf_r+0x4e>
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	b01d      	add	sp, #116	@ 0x74
 8007eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	0598      	lsls	r0, r3, #22
 8007ef2:	d4f7      	bmi.n	8007ee4 <_vfiprintf_r+0x44>
 8007ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ef6:	f7fd fa01 	bl	80052fc <__retarget_lock_release_recursive>
 8007efa:	e7f3      	b.n	8007ee4 <_vfiprintf_r+0x44>
 8007efc:	2300      	movs	r3, #0
 8007efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f00:	2320      	movs	r3, #32
 8007f02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f06:	2330      	movs	r3, #48	@ 0x30
 8007f08:	f04f 0901 	mov.w	r9, #1
 8007f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80080bc <_vfiprintf_r+0x21c>
 8007f14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f18:	4623      	mov	r3, r4
 8007f1a:	469a      	mov	sl, r3
 8007f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f20:	b10a      	cbz	r2, 8007f26 <_vfiprintf_r+0x86>
 8007f22:	2a25      	cmp	r2, #37	@ 0x25
 8007f24:	d1f9      	bne.n	8007f1a <_vfiprintf_r+0x7a>
 8007f26:	ebba 0b04 	subs.w	fp, sl, r4
 8007f2a:	d00b      	beq.n	8007f44 <_vfiprintf_r+0xa4>
 8007f2c:	465b      	mov	r3, fp
 8007f2e:	4622      	mov	r2, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ffa1 	bl	8007e7a <__sfputs_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f000 80a7 	beq.w	800808c <_vfiprintf_r+0x1ec>
 8007f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f40:	445a      	add	r2, fp
 8007f42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f44:	f89a 3000 	ldrb.w	r3, [sl]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 809f 	beq.w	800808c <_vfiprintf_r+0x1ec>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295
 8007f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f58:	f10a 0a01 	add.w	sl, sl, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f64:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f66:	4654      	mov	r4, sl
 8007f68:	2205      	movs	r2, #5
 8007f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6e:	4853      	ldr	r0, [pc, #332]	@ (80080bc <_vfiprintf_r+0x21c>)
 8007f70:	f7fd f9c5 	bl	80052fe <memchr>
 8007f74:	9a04      	ldr	r2, [sp, #16]
 8007f76:	b9d8      	cbnz	r0, 8007fb0 <_vfiprintf_r+0x110>
 8007f78:	06d1      	lsls	r1, r2, #27
 8007f7a:	bf44      	itt	mi
 8007f7c:	2320      	movmi	r3, #32
 8007f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f82:	0713      	lsls	r3, r2, #28
 8007f84:	bf44      	itt	mi
 8007f86:	232b      	movmi	r3, #43	@ 0x2b
 8007f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f92:	d015      	beq.n	8007fc0 <_vfiprintf_r+0x120>
 8007f94:	4654      	mov	r4, sl
 8007f96:	2000      	movs	r0, #0
 8007f98:	f04f 0c0a 	mov.w	ip, #10
 8007f9c:	9a07      	ldr	r2, [sp, #28]
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa4:	3b30      	subs	r3, #48	@ 0x30
 8007fa6:	2b09      	cmp	r3, #9
 8007fa8:	d94b      	bls.n	8008042 <_vfiprintf_r+0x1a2>
 8007faa:	b1b0      	cbz	r0, 8007fda <_vfiprintf_r+0x13a>
 8007fac:	9207      	str	r2, [sp, #28]
 8007fae:	e014      	b.n	8007fda <_vfiprintf_r+0x13a>
 8007fb0:	eba0 0308 	sub.w	r3, r0, r8
 8007fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	46a2      	mov	sl, r4
 8007fbc:	9304      	str	r3, [sp, #16]
 8007fbe:	e7d2      	b.n	8007f66 <_vfiprintf_r+0xc6>
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	1d19      	adds	r1, r3, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	9103      	str	r1, [sp, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bfbb      	ittet	lt
 8007fcc:	425b      	neglt	r3, r3
 8007fce:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd2:	9307      	strge	r3, [sp, #28]
 8007fd4:	9307      	strlt	r3, [sp, #28]
 8007fd6:	bfb8      	it	lt
 8007fd8:	9204      	strlt	r2, [sp, #16]
 8007fda:	7823      	ldrb	r3, [r4, #0]
 8007fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fde:	d10a      	bne.n	8007ff6 <_vfiprintf_r+0x156>
 8007fe0:	7863      	ldrb	r3, [r4, #1]
 8007fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fe4:	d132      	bne.n	800804c <_vfiprintf_r+0x1ac>
 8007fe6:	9b03      	ldr	r3, [sp, #12]
 8007fe8:	3402      	adds	r4, #2
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	9203      	str	r2, [sp, #12]
 8007ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ff4:	9305      	str	r3, [sp, #20]
 8007ff6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80080c0 <_vfiprintf_r+0x220>
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	4650      	mov	r0, sl
 8007ffe:	7821      	ldrb	r1, [r4, #0]
 8008000:	f7fd f97d 	bl	80052fe <memchr>
 8008004:	b138      	cbz	r0, 8008016 <_vfiprintf_r+0x176>
 8008006:	2240      	movs	r2, #64	@ 0x40
 8008008:	9b04      	ldr	r3, [sp, #16]
 800800a:	eba0 000a 	sub.w	r0, r0, sl
 800800e:	4082      	lsls	r2, r0
 8008010:	4313      	orrs	r3, r2
 8008012:	3401      	adds	r4, #1
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801a:	2206      	movs	r2, #6
 800801c:	4829      	ldr	r0, [pc, #164]	@ (80080c4 <_vfiprintf_r+0x224>)
 800801e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008022:	f7fd f96c 	bl	80052fe <memchr>
 8008026:	2800      	cmp	r0, #0
 8008028:	d03f      	beq.n	80080aa <_vfiprintf_r+0x20a>
 800802a:	4b27      	ldr	r3, [pc, #156]	@ (80080c8 <_vfiprintf_r+0x228>)
 800802c:	bb1b      	cbnz	r3, 8008076 <_vfiprintf_r+0x1d6>
 800802e:	9b03      	ldr	r3, [sp, #12]
 8008030:	3307      	adds	r3, #7
 8008032:	f023 0307 	bic.w	r3, r3, #7
 8008036:	3308      	adds	r3, #8
 8008038:	9303      	str	r3, [sp, #12]
 800803a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803c:	443b      	add	r3, r7
 800803e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008040:	e76a      	b.n	8007f18 <_vfiprintf_r+0x78>
 8008042:	460c      	mov	r4, r1
 8008044:	2001      	movs	r0, #1
 8008046:	fb0c 3202 	mla	r2, ip, r2, r3
 800804a:	e7a8      	b.n	8007f9e <_vfiprintf_r+0xfe>
 800804c:	2300      	movs	r3, #0
 800804e:	f04f 0c0a 	mov.w	ip, #10
 8008052:	4619      	mov	r1, r3
 8008054:	3401      	adds	r4, #1
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	4620      	mov	r0, r4
 800805a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800805e:	3a30      	subs	r2, #48	@ 0x30
 8008060:	2a09      	cmp	r2, #9
 8008062:	d903      	bls.n	800806c <_vfiprintf_r+0x1cc>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0c6      	beq.n	8007ff6 <_vfiprintf_r+0x156>
 8008068:	9105      	str	r1, [sp, #20]
 800806a:	e7c4      	b.n	8007ff6 <_vfiprintf_r+0x156>
 800806c:	4604      	mov	r4, r0
 800806e:	2301      	movs	r3, #1
 8008070:	fb0c 2101 	mla	r1, ip, r1, r2
 8008074:	e7f0      	b.n	8008058 <_vfiprintf_r+0x1b8>
 8008076:	ab03      	add	r3, sp, #12
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	462a      	mov	r2, r5
 800807c:	4630      	mov	r0, r6
 800807e:	4b13      	ldr	r3, [pc, #76]	@ (80080cc <_vfiprintf_r+0x22c>)
 8008080:	a904      	add	r1, sp, #16
 8008082:	f7fc f98b 	bl	800439c <_printf_float>
 8008086:	4607      	mov	r7, r0
 8008088:	1c78      	adds	r0, r7, #1
 800808a:	d1d6      	bne.n	800803a <_vfiprintf_r+0x19a>
 800808c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800808e:	07d9      	lsls	r1, r3, #31
 8008090:	d405      	bmi.n	800809e <_vfiprintf_r+0x1fe>
 8008092:	89ab      	ldrh	r3, [r5, #12]
 8008094:	059a      	lsls	r2, r3, #22
 8008096:	d402      	bmi.n	800809e <_vfiprintf_r+0x1fe>
 8008098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800809a:	f7fd f92f 	bl	80052fc <__retarget_lock_release_recursive>
 800809e:	89ab      	ldrh	r3, [r5, #12]
 80080a0:	065b      	lsls	r3, r3, #25
 80080a2:	f53f af1f 	bmi.w	8007ee4 <_vfiprintf_r+0x44>
 80080a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080a8:	e71e      	b.n	8007ee8 <_vfiprintf_r+0x48>
 80080aa:	ab03      	add	r3, sp, #12
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	462a      	mov	r2, r5
 80080b0:	4630      	mov	r0, r6
 80080b2:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <_vfiprintf_r+0x22c>)
 80080b4:	a904      	add	r1, sp, #16
 80080b6:	f7fc fc0f 	bl	80048d8 <_printf_i>
 80080ba:	e7e4      	b.n	8008086 <_vfiprintf_r+0x1e6>
 80080bc:	080095a9 	.word	0x080095a9
 80080c0:	080095af 	.word	0x080095af
 80080c4:	080095b3 	.word	0x080095b3
 80080c8:	0800439d 	.word	0x0800439d
 80080cc:	08007e7b 	.word	0x08007e7b

080080d0 <_scanf_chars>:
 80080d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d4:	4615      	mov	r5, r2
 80080d6:	688a      	ldr	r2, [r1, #8]
 80080d8:	4680      	mov	r8, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	b932      	cbnz	r2, 80080ec <_scanf_chars+0x1c>
 80080de:	698a      	ldr	r2, [r1, #24]
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	bf14      	ite	ne
 80080e4:	f04f 32ff 	movne.w	r2, #4294967295
 80080e8:	2201      	moveq	r2, #1
 80080ea:	608a      	str	r2, [r1, #8]
 80080ec:	2700      	movs	r7, #0
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008180 <_scanf_chars+0xb0>
 80080f4:	06d1      	lsls	r1, r2, #27
 80080f6:	bf5f      	itttt	pl
 80080f8:	681a      	ldrpl	r2, [r3, #0]
 80080fa:	1d11      	addpl	r1, r2, #4
 80080fc:	6019      	strpl	r1, [r3, #0]
 80080fe:	6816      	ldrpl	r6, [r2, #0]
 8008100:	69a0      	ldr	r0, [r4, #24]
 8008102:	b188      	cbz	r0, 8008128 <_scanf_chars+0x58>
 8008104:	2801      	cmp	r0, #1
 8008106:	d107      	bne.n	8008118 <_scanf_chars+0x48>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	6963      	ldr	r3, [r4, #20]
 800810e:	5c9b      	ldrb	r3, [r3, r2]
 8008110:	b953      	cbnz	r3, 8008128 <_scanf_chars+0x58>
 8008112:	2f00      	cmp	r7, #0
 8008114:	d031      	beq.n	800817a <_scanf_chars+0xaa>
 8008116:	e022      	b.n	800815e <_scanf_chars+0x8e>
 8008118:	2802      	cmp	r0, #2
 800811a:	d120      	bne.n	800815e <_scanf_chars+0x8e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008124:	071b      	lsls	r3, r3, #28
 8008126:	d41a      	bmi.n	800815e <_scanf_chars+0x8e>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	3701      	adds	r7, #1
 800812c:	06da      	lsls	r2, r3, #27
 800812e:	bf5e      	ittt	pl
 8008130:	682b      	ldrpl	r3, [r5, #0]
 8008132:	781b      	ldrbpl	r3, [r3, #0]
 8008134:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008138:	682a      	ldr	r2, [r5, #0]
 800813a:	686b      	ldr	r3, [r5, #4]
 800813c:	3201      	adds	r2, #1
 800813e:	602a      	str	r2, [r5, #0]
 8008140:	68a2      	ldr	r2, [r4, #8]
 8008142:	3b01      	subs	r3, #1
 8008144:	3a01      	subs	r2, #1
 8008146:	606b      	str	r3, [r5, #4]
 8008148:	60a2      	str	r2, [r4, #8]
 800814a:	b142      	cbz	r2, 800815e <_scanf_chars+0x8e>
 800814c:	2b00      	cmp	r3, #0
 800814e:	dcd7      	bgt.n	8008100 <_scanf_chars+0x30>
 8008150:	4629      	mov	r1, r5
 8008152:	4640      	mov	r0, r8
 8008154:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008158:	4798      	blx	r3
 800815a:	2800      	cmp	r0, #0
 800815c:	d0d0      	beq.n	8008100 <_scanf_chars+0x30>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	f013 0310 	ands.w	r3, r3, #16
 8008164:	d105      	bne.n	8008172 <_scanf_chars+0xa2>
 8008166:	68e2      	ldr	r2, [r4, #12]
 8008168:	3201      	adds	r2, #1
 800816a:	60e2      	str	r2, [r4, #12]
 800816c:	69a2      	ldr	r2, [r4, #24]
 800816e:	b102      	cbz	r2, 8008172 <_scanf_chars+0xa2>
 8008170:	7033      	strb	r3, [r6, #0]
 8008172:	2000      	movs	r0, #0
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	443b      	add	r3, r7
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800817e:	bf00      	nop
 8008180:	080094a9 	.word	0x080094a9

08008184 <_scanf_i>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	460c      	mov	r4, r1
 800818a:	4698      	mov	r8, r3
 800818c:	4b72      	ldr	r3, [pc, #456]	@ (8008358 <_scanf_i+0x1d4>)
 800818e:	b087      	sub	sp, #28
 8008190:	4682      	mov	sl, r0
 8008192:	4616      	mov	r6, r2
 8008194:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008198:	ab03      	add	r3, sp, #12
 800819a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800819e:	4b6f      	ldr	r3, [pc, #444]	@ (800835c <_scanf_i+0x1d8>)
 80081a0:	69a1      	ldr	r1, [r4, #24]
 80081a2:	4a6f      	ldr	r2, [pc, #444]	@ (8008360 <_scanf_i+0x1dc>)
 80081a4:	4627      	mov	r7, r4
 80081a6:	2903      	cmp	r1, #3
 80081a8:	bf08      	it	eq
 80081aa:	461a      	moveq	r2, r3
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80081b6:	bf81      	itttt	hi
 80081b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80081bc:	eb03 0905 	addhi.w	r9, r3, r5
 80081c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081c4:	60a3      	strhi	r3, [r4, #8]
 80081c6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80081ca:	bf98      	it	ls
 80081cc:	f04f 0900 	movls.w	r9, #0
 80081d0:	463d      	mov	r5, r7
 80081d2:	f04f 0b00 	mov.w	fp, #0
 80081d6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	6831      	ldr	r1, [r6, #0]
 80081de:	ab03      	add	r3, sp, #12
 80081e0:	2202      	movs	r2, #2
 80081e2:	7809      	ldrb	r1, [r1, #0]
 80081e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80081e8:	f7fd f889 	bl	80052fe <memchr>
 80081ec:	b328      	cbz	r0, 800823a <_scanf_i+0xb6>
 80081ee:	f1bb 0f01 	cmp.w	fp, #1
 80081f2:	d159      	bne.n	80082a8 <_scanf_i+0x124>
 80081f4:	6862      	ldr	r2, [r4, #4]
 80081f6:	b92a      	cbnz	r2, 8008204 <_scanf_i+0x80>
 80081f8:	2108      	movs	r1, #8
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	6061      	str	r1, [r4, #4]
 80081fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800820a:	6022      	str	r2, [r4, #0]
 800820c:	68a2      	ldr	r2, [r4, #8]
 800820e:	1e51      	subs	r1, r2, #1
 8008210:	60a1      	str	r1, [r4, #8]
 8008212:	b192      	cbz	r2, 800823a <_scanf_i+0xb6>
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	1c51      	adds	r1, r2, #1
 8008218:	6031      	str	r1, [r6, #0]
 800821a:	7812      	ldrb	r2, [r2, #0]
 800821c:	f805 2b01 	strb.w	r2, [r5], #1
 8008220:	6872      	ldr	r2, [r6, #4]
 8008222:	3a01      	subs	r2, #1
 8008224:	2a00      	cmp	r2, #0
 8008226:	6072      	str	r2, [r6, #4]
 8008228:	dc07      	bgt.n	800823a <_scanf_i+0xb6>
 800822a:	4631      	mov	r1, r6
 800822c:	4650      	mov	r0, sl
 800822e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008232:	4790      	blx	r2
 8008234:	2800      	cmp	r0, #0
 8008236:	f040 8085 	bne.w	8008344 <_scanf_i+0x1c0>
 800823a:	f10b 0b01 	add.w	fp, fp, #1
 800823e:	f1bb 0f03 	cmp.w	fp, #3
 8008242:	d1cb      	bne.n	80081dc <_scanf_i+0x58>
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	b90b      	cbnz	r3, 800824c <_scanf_i+0xc8>
 8008248:	230a      	movs	r3, #10
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	4945      	ldr	r1, [pc, #276]	@ (8008364 <_scanf_i+0x1e0>)
 8008250:	6960      	ldr	r0, [r4, #20]
 8008252:	1ac9      	subs	r1, r1, r3
 8008254:	f000 f930 	bl	80084b8 <__sccl>
 8008258:	f04f 0b00 	mov.w	fp, #0
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	6822      	ldr	r2, [r4, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d03d      	beq.n	80082e0 <_scanf_i+0x15c>
 8008264:	6831      	ldr	r1, [r6, #0]
 8008266:	6960      	ldr	r0, [r4, #20]
 8008268:	f891 c000 	ldrb.w	ip, [r1]
 800826c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008270:	2800      	cmp	r0, #0
 8008272:	d035      	beq.n	80082e0 <_scanf_i+0x15c>
 8008274:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008278:	d124      	bne.n	80082c4 <_scanf_i+0x140>
 800827a:	0510      	lsls	r0, r2, #20
 800827c:	d522      	bpl.n	80082c4 <_scanf_i+0x140>
 800827e:	f10b 0b01 	add.w	fp, fp, #1
 8008282:	f1b9 0f00 	cmp.w	r9, #0
 8008286:	d003      	beq.n	8008290 <_scanf_i+0x10c>
 8008288:	3301      	adds	r3, #1
 800828a:	f109 39ff 	add.w	r9, r9, #4294967295
 800828e:	60a3      	str	r3, [r4, #8]
 8008290:	6873      	ldr	r3, [r6, #4]
 8008292:	3b01      	subs	r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	6073      	str	r3, [r6, #4]
 8008298:	dd1b      	ble.n	80082d2 <_scanf_i+0x14e>
 800829a:	6833      	ldr	r3, [r6, #0]
 800829c:	3301      	adds	r3, #1
 800829e:	6033      	str	r3, [r6, #0]
 80082a0:	68a3      	ldr	r3, [r4, #8]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	60a3      	str	r3, [r4, #8]
 80082a6:	e7d9      	b.n	800825c <_scanf_i+0xd8>
 80082a8:	f1bb 0f02 	cmp.w	fp, #2
 80082ac:	d1ae      	bne.n	800820c <_scanf_i+0x88>
 80082ae:	6822      	ldr	r2, [r4, #0]
 80082b0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80082b4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80082b8:	d1bf      	bne.n	800823a <_scanf_i+0xb6>
 80082ba:	2110      	movs	r1, #16
 80082bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082c0:	6061      	str	r1, [r4, #4]
 80082c2:	e7a2      	b.n	800820a <_scanf_i+0x86>
 80082c4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80082c8:	6022      	str	r2, [r4, #0]
 80082ca:	780b      	ldrb	r3, [r1, #0]
 80082cc:	f805 3b01 	strb.w	r3, [r5], #1
 80082d0:	e7de      	b.n	8008290 <_scanf_i+0x10c>
 80082d2:	4631      	mov	r1, r6
 80082d4:	4650      	mov	r0, sl
 80082d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80082da:	4798      	blx	r3
 80082dc:	2800      	cmp	r0, #0
 80082de:	d0df      	beq.n	80082a0 <_scanf_i+0x11c>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	05d9      	lsls	r1, r3, #23
 80082e4:	d50d      	bpl.n	8008302 <_scanf_i+0x17e>
 80082e6:	42bd      	cmp	r5, r7
 80082e8:	d909      	bls.n	80082fe <_scanf_i+0x17a>
 80082ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80082ee:	4632      	mov	r2, r6
 80082f0:	4650      	mov	r0, sl
 80082f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80082fa:	4798      	blx	r3
 80082fc:	464d      	mov	r5, r9
 80082fe:	42bd      	cmp	r5, r7
 8008300:	d028      	beq.n	8008354 <_scanf_i+0x1d0>
 8008302:	6822      	ldr	r2, [r4, #0]
 8008304:	f012 0210 	ands.w	r2, r2, #16
 8008308:	d113      	bne.n	8008332 <_scanf_i+0x1ae>
 800830a:	702a      	strb	r2, [r5, #0]
 800830c:	4639      	mov	r1, r7
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	4650      	mov	r0, sl
 8008312:	9e01      	ldr	r6, [sp, #4]
 8008314:	47b0      	blx	r6
 8008316:	f8d8 3000 	ldr.w	r3, [r8]
 800831a:	6821      	ldr	r1, [r4, #0]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	f8c8 2000 	str.w	r2, [r8]
 8008322:	f011 0f20 	tst.w	r1, #32
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	d00f      	beq.n	800834a <_scanf_i+0x1c6>
 800832a:	6018      	str	r0, [r3, #0]
 800832c:	68e3      	ldr	r3, [r4, #12]
 800832e:	3301      	adds	r3, #1
 8008330:	60e3      	str	r3, [r4, #12]
 8008332:	2000      	movs	r0, #0
 8008334:	6923      	ldr	r3, [r4, #16]
 8008336:	1bed      	subs	r5, r5, r7
 8008338:	445d      	add	r5, fp
 800833a:	442b      	add	r3, r5
 800833c:	6123      	str	r3, [r4, #16]
 800833e:	b007      	add	sp, #28
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008344:	f04f 0b00 	mov.w	fp, #0
 8008348:	e7ca      	b.n	80082e0 <_scanf_i+0x15c>
 800834a:	07ca      	lsls	r2, r1, #31
 800834c:	bf4c      	ite	mi
 800834e:	8018      	strhmi	r0, [r3, #0]
 8008350:	6018      	strpl	r0, [r3, #0]
 8008352:	e7eb      	b.n	800832c <_scanf_i+0x1a8>
 8008354:	2001      	movs	r0, #1
 8008356:	e7f2      	b.n	800833e <_scanf_i+0x1ba>
 8008358:	080091b8 	.word	0x080091b8
 800835c:	08007809 	.word	0x08007809
 8008360:	08008f75 	.word	0x08008f75
 8008364:	080095ca 	.word	0x080095ca

08008368 <__sflush_r>:
 8008368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	0716      	lsls	r6, r2, #28
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	d454      	bmi.n	8008420 <__sflush_r+0xb8>
 8008376:	684b      	ldr	r3, [r1, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	dc02      	bgt.n	8008382 <__sflush_r+0x1a>
 800837c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	dd48      	ble.n	8008414 <__sflush_r+0xac>
 8008382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008384:	2e00      	cmp	r6, #0
 8008386:	d045      	beq.n	8008414 <__sflush_r+0xac>
 8008388:	2300      	movs	r3, #0
 800838a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800838e:	682f      	ldr	r7, [r5, #0]
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	d030      	beq.n	80083f8 <__sflush_r+0x90>
 8008396:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	0759      	lsls	r1, r3, #29
 800839c:	d505      	bpl.n	80083aa <__sflush_r+0x42>
 800839e:	6863      	ldr	r3, [r4, #4]
 80083a0:	1ad2      	subs	r2, r2, r3
 80083a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083a4:	b10b      	cbz	r3, 80083aa <__sflush_r+0x42>
 80083a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083a8:	1ad2      	subs	r2, r2, r3
 80083aa:	2300      	movs	r3, #0
 80083ac:	4628      	mov	r0, r5
 80083ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083b0:	6a21      	ldr	r1, [r4, #32]
 80083b2:	47b0      	blx	r6
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	d106      	bne.n	80083c8 <__sflush_r+0x60>
 80083ba:	6829      	ldr	r1, [r5, #0]
 80083bc:	291d      	cmp	r1, #29
 80083be:	d82b      	bhi.n	8008418 <__sflush_r+0xb0>
 80083c0:	4a28      	ldr	r2, [pc, #160]	@ (8008464 <__sflush_r+0xfc>)
 80083c2:	410a      	asrs	r2, r1
 80083c4:	07d6      	lsls	r6, r2, #31
 80083c6:	d427      	bmi.n	8008418 <__sflush_r+0xb0>
 80083c8:	2200      	movs	r2, #0
 80083ca:	6062      	str	r2, [r4, #4]
 80083cc:	6922      	ldr	r2, [r4, #16]
 80083ce:	04d9      	lsls	r1, r3, #19
 80083d0:	6022      	str	r2, [r4, #0]
 80083d2:	d504      	bpl.n	80083de <__sflush_r+0x76>
 80083d4:	1c42      	adds	r2, r0, #1
 80083d6:	d101      	bne.n	80083dc <__sflush_r+0x74>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b903      	cbnz	r3, 80083de <__sflush_r+0x76>
 80083dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80083de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083e0:	602f      	str	r7, [r5, #0]
 80083e2:	b1b9      	cbz	r1, 8008414 <__sflush_r+0xac>
 80083e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e8:	4299      	cmp	r1, r3
 80083ea:	d002      	beq.n	80083f2 <__sflush_r+0x8a>
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7fd fdeb 	bl	8005fc8 <_free_r>
 80083f2:	2300      	movs	r3, #0
 80083f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f6:	e00d      	b.n	8008414 <__sflush_r+0xac>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4628      	mov	r0, r5
 80083fc:	47b0      	blx	r6
 80083fe:	4602      	mov	r2, r0
 8008400:	1c50      	adds	r0, r2, #1
 8008402:	d1c9      	bne.n	8008398 <__sflush_r+0x30>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0c6      	beq.n	8008398 <__sflush_r+0x30>
 800840a:	2b1d      	cmp	r3, #29
 800840c:	d001      	beq.n	8008412 <__sflush_r+0xaa>
 800840e:	2b16      	cmp	r3, #22
 8008410:	d11d      	bne.n	800844e <__sflush_r+0xe6>
 8008412:	602f      	str	r7, [r5, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	e021      	b.n	800845c <__sflush_r+0xf4>
 8008418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800841c:	b21b      	sxth	r3, r3
 800841e:	e01a      	b.n	8008456 <__sflush_r+0xee>
 8008420:	690f      	ldr	r7, [r1, #16]
 8008422:	2f00      	cmp	r7, #0
 8008424:	d0f6      	beq.n	8008414 <__sflush_r+0xac>
 8008426:	0793      	lsls	r3, r2, #30
 8008428:	bf18      	it	ne
 800842a:	2300      	movne	r3, #0
 800842c:	680e      	ldr	r6, [r1, #0]
 800842e:	bf08      	it	eq
 8008430:	694b      	ldreq	r3, [r1, #20]
 8008432:	1bf6      	subs	r6, r6, r7
 8008434:	600f      	str	r7, [r1, #0]
 8008436:	608b      	str	r3, [r1, #8]
 8008438:	2e00      	cmp	r6, #0
 800843a:	ddeb      	ble.n	8008414 <__sflush_r+0xac>
 800843c:	4633      	mov	r3, r6
 800843e:	463a      	mov	r2, r7
 8008440:	4628      	mov	r0, r5
 8008442:	6a21      	ldr	r1, [r4, #32]
 8008444:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008448:	47e0      	blx	ip
 800844a:	2800      	cmp	r0, #0
 800844c:	dc07      	bgt.n	800845e <__sflush_r+0xf6>
 800844e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008456:	f04f 30ff 	mov.w	r0, #4294967295
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845e:	4407      	add	r7, r0
 8008460:	1a36      	subs	r6, r6, r0
 8008462:	e7e9      	b.n	8008438 <__sflush_r+0xd0>
 8008464:	dfbffffe 	.word	0xdfbffffe

08008468 <_fflush_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	690b      	ldr	r3, [r1, #16]
 800846c:	4605      	mov	r5, r0
 800846e:	460c      	mov	r4, r1
 8008470:	b913      	cbnz	r3, 8008478 <_fflush_r+0x10>
 8008472:	2500      	movs	r5, #0
 8008474:	4628      	mov	r0, r5
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	b118      	cbz	r0, 8008482 <_fflush_r+0x1a>
 800847a:	6a03      	ldr	r3, [r0, #32]
 800847c:	b90b      	cbnz	r3, 8008482 <_fflush_r+0x1a>
 800847e:	f7fc fde7 	bl	8005050 <__sinit>
 8008482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f3      	beq.n	8008472 <_fflush_r+0xa>
 800848a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800848c:	07d0      	lsls	r0, r2, #31
 800848e:	d404      	bmi.n	800849a <_fflush_r+0x32>
 8008490:	0599      	lsls	r1, r3, #22
 8008492:	d402      	bmi.n	800849a <_fflush_r+0x32>
 8008494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008496:	f7fc ff30 	bl	80052fa <__retarget_lock_acquire_recursive>
 800849a:	4628      	mov	r0, r5
 800849c:	4621      	mov	r1, r4
 800849e:	f7ff ff63 	bl	8008368 <__sflush_r>
 80084a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084a4:	4605      	mov	r5, r0
 80084a6:	07da      	lsls	r2, r3, #31
 80084a8:	d4e4      	bmi.n	8008474 <_fflush_r+0xc>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	059b      	lsls	r3, r3, #22
 80084ae:	d4e1      	bmi.n	8008474 <_fflush_r+0xc>
 80084b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084b2:	f7fc ff23 	bl	80052fc <__retarget_lock_release_recursive>
 80084b6:	e7dd      	b.n	8008474 <_fflush_r+0xc>

080084b8 <__sccl>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	780b      	ldrb	r3, [r1, #0]
 80084bc:	4604      	mov	r4, r0
 80084be:	2b5e      	cmp	r3, #94	@ 0x5e
 80084c0:	bf0b      	itete	eq
 80084c2:	784b      	ldrbeq	r3, [r1, #1]
 80084c4:	1c4a      	addne	r2, r1, #1
 80084c6:	1c8a      	addeq	r2, r1, #2
 80084c8:	2100      	movne	r1, #0
 80084ca:	bf08      	it	eq
 80084cc:	2101      	moveq	r1, #1
 80084ce:	3801      	subs	r0, #1
 80084d0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80084d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80084d8:	42a8      	cmp	r0, r5
 80084da:	d1fb      	bne.n	80084d4 <__sccl+0x1c>
 80084dc:	b90b      	cbnz	r3, 80084e2 <__sccl+0x2a>
 80084de:	1e50      	subs	r0, r2, #1
 80084e0:	bd70      	pop	{r4, r5, r6, pc}
 80084e2:	f081 0101 	eor.w	r1, r1, #1
 80084e6:	4610      	mov	r0, r2
 80084e8:	54e1      	strb	r1, [r4, r3]
 80084ea:	4602      	mov	r2, r0
 80084ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80084f0:	2d2d      	cmp	r5, #45	@ 0x2d
 80084f2:	d005      	beq.n	8008500 <__sccl+0x48>
 80084f4:	2d5d      	cmp	r5, #93	@ 0x5d
 80084f6:	d016      	beq.n	8008526 <__sccl+0x6e>
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	d0f1      	beq.n	80084e0 <__sccl+0x28>
 80084fc:	462b      	mov	r3, r5
 80084fe:	e7f2      	b.n	80084e6 <__sccl+0x2e>
 8008500:	7846      	ldrb	r6, [r0, #1]
 8008502:	2e5d      	cmp	r6, #93	@ 0x5d
 8008504:	d0fa      	beq.n	80084fc <__sccl+0x44>
 8008506:	42b3      	cmp	r3, r6
 8008508:	dcf8      	bgt.n	80084fc <__sccl+0x44>
 800850a:	461a      	mov	r2, r3
 800850c:	3002      	adds	r0, #2
 800850e:	3201      	adds	r2, #1
 8008510:	4296      	cmp	r6, r2
 8008512:	54a1      	strb	r1, [r4, r2]
 8008514:	dcfb      	bgt.n	800850e <__sccl+0x56>
 8008516:	1af2      	subs	r2, r6, r3
 8008518:	3a01      	subs	r2, #1
 800851a:	42b3      	cmp	r3, r6
 800851c:	bfa8      	it	ge
 800851e:	2200      	movge	r2, #0
 8008520:	1c5d      	adds	r5, r3, #1
 8008522:	18ab      	adds	r3, r5, r2
 8008524:	e7e1      	b.n	80084ea <__sccl+0x32>
 8008526:	4610      	mov	r0, r2
 8008528:	e7da      	b.n	80084e0 <__sccl+0x28>

0800852a <__submore>:
 800852a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852e:	460c      	mov	r4, r1
 8008530:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008536:	4299      	cmp	r1, r3
 8008538:	d11b      	bne.n	8008572 <__submore+0x48>
 800853a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800853e:	f7fd fdb5 	bl	80060ac <_malloc_r>
 8008542:	b918      	cbnz	r0, 800854c <__submore+0x22>
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800854c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008550:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008552:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008556:	6360      	str	r0, [r4, #52]	@ 0x34
 8008558:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800855c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008560:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008564:	7043      	strb	r3, [r0, #1]
 8008566:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800856a:	7003      	strb	r3, [r0, #0]
 800856c:	6020      	str	r0, [r4, #0]
 800856e:	2000      	movs	r0, #0
 8008570:	e7ea      	b.n	8008548 <__submore+0x1e>
 8008572:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008574:	0077      	lsls	r7, r6, #1
 8008576:	463a      	mov	r2, r7
 8008578:	f000 fc5f 	bl	8008e3a <_realloc_r>
 800857c:	4605      	mov	r5, r0
 800857e:	2800      	cmp	r0, #0
 8008580:	d0e0      	beq.n	8008544 <__submore+0x1a>
 8008582:	eb00 0806 	add.w	r8, r0, r6
 8008586:	4601      	mov	r1, r0
 8008588:	4632      	mov	r2, r6
 800858a:	4640      	mov	r0, r8
 800858c:	f000 f8c4 	bl	8008718 <memcpy>
 8008590:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008594:	f8c4 8000 	str.w	r8, [r4]
 8008598:	e7e9      	b.n	800856e <__submore+0x44>

0800859a <__swbuf_r>:
 800859a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859c:	460e      	mov	r6, r1
 800859e:	4614      	mov	r4, r2
 80085a0:	4605      	mov	r5, r0
 80085a2:	b118      	cbz	r0, 80085ac <__swbuf_r+0x12>
 80085a4:	6a03      	ldr	r3, [r0, #32]
 80085a6:	b90b      	cbnz	r3, 80085ac <__swbuf_r+0x12>
 80085a8:	f7fc fd52 	bl	8005050 <__sinit>
 80085ac:	69a3      	ldr	r3, [r4, #24]
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	071a      	lsls	r2, r3, #28
 80085b4:	d501      	bpl.n	80085ba <__swbuf_r+0x20>
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	b943      	cbnz	r3, 80085cc <__swbuf_r+0x32>
 80085ba:	4621      	mov	r1, r4
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 f82b 	bl	8008618 <__swsetup_r>
 80085c2:	b118      	cbz	r0, 80085cc <__swbuf_r+0x32>
 80085c4:	f04f 37ff 	mov.w	r7, #4294967295
 80085c8:	4638      	mov	r0, r7
 80085ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	6922      	ldr	r2, [r4, #16]
 80085d0:	b2f6      	uxtb	r6, r6
 80085d2:	1a98      	subs	r0, r3, r2
 80085d4:	6963      	ldr	r3, [r4, #20]
 80085d6:	4637      	mov	r7, r6
 80085d8:	4283      	cmp	r3, r0
 80085da:	dc05      	bgt.n	80085e8 <__swbuf_r+0x4e>
 80085dc:	4621      	mov	r1, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	f7ff ff42 	bl	8008468 <_fflush_r>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d1ed      	bne.n	80085c4 <__swbuf_r+0x2a>
 80085e8:	68a3      	ldr	r3, [r4, #8]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	60a3      	str	r3, [r4, #8]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	6022      	str	r2, [r4, #0]
 80085f4:	701e      	strb	r6, [r3, #0]
 80085f6:	6962      	ldr	r2, [r4, #20]
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d004      	beq.n	8008608 <__swbuf_r+0x6e>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	07db      	lsls	r3, r3, #31
 8008602:	d5e1      	bpl.n	80085c8 <__swbuf_r+0x2e>
 8008604:	2e0a      	cmp	r6, #10
 8008606:	d1df      	bne.n	80085c8 <__swbuf_r+0x2e>
 8008608:	4621      	mov	r1, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f7ff ff2c 	bl	8008468 <_fflush_r>
 8008610:	2800      	cmp	r0, #0
 8008612:	d0d9      	beq.n	80085c8 <__swbuf_r+0x2e>
 8008614:	e7d6      	b.n	80085c4 <__swbuf_r+0x2a>
	...

08008618 <__swsetup_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4b29      	ldr	r3, [pc, #164]	@ (80086c0 <__swsetup_r+0xa8>)
 800861c:	4605      	mov	r5, r0
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	460c      	mov	r4, r1
 8008622:	b118      	cbz	r0, 800862c <__swsetup_r+0x14>
 8008624:	6a03      	ldr	r3, [r0, #32]
 8008626:	b90b      	cbnz	r3, 800862c <__swsetup_r+0x14>
 8008628:	f7fc fd12 	bl	8005050 <__sinit>
 800862c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008630:	0719      	lsls	r1, r3, #28
 8008632:	d422      	bmi.n	800867a <__swsetup_r+0x62>
 8008634:	06da      	lsls	r2, r3, #27
 8008636:	d407      	bmi.n	8008648 <__swsetup_r+0x30>
 8008638:	2209      	movs	r2, #9
 800863a:	602a      	str	r2, [r5, #0]
 800863c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	e033      	b.n	80086b0 <__swsetup_r+0x98>
 8008648:	0758      	lsls	r0, r3, #29
 800864a:	d512      	bpl.n	8008672 <__swsetup_r+0x5a>
 800864c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800864e:	b141      	cbz	r1, 8008662 <__swsetup_r+0x4a>
 8008650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008654:	4299      	cmp	r1, r3
 8008656:	d002      	beq.n	800865e <__swsetup_r+0x46>
 8008658:	4628      	mov	r0, r5
 800865a:	f7fd fcb5 	bl	8005fc8 <_free_r>
 800865e:	2300      	movs	r3, #0
 8008660:	6363      	str	r3, [r4, #52]	@ 0x34
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	2300      	movs	r3, #0
 800866c:	6063      	str	r3, [r4, #4]
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f043 0308 	orr.w	r3, r3, #8
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	b94b      	cbnz	r3, 8008692 <__swsetup_r+0x7a>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008688:	d003      	beq.n	8008692 <__swsetup_r+0x7a>
 800868a:	4621      	mov	r1, r4
 800868c:	4628      	mov	r0, r5
 800868e:	f000 fcb8 	bl	8009002 <__smakebuf_r>
 8008692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008696:	f013 0201 	ands.w	r2, r3, #1
 800869a:	d00a      	beq.n	80086b2 <__swsetup_r+0x9a>
 800869c:	2200      	movs	r2, #0
 800869e:	60a2      	str	r2, [r4, #8]
 80086a0:	6962      	ldr	r2, [r4, #20]
 80086a2:	4252      	negs	r2, r2
 80086a4:	61a2      	str	r2, [r4, #24]
 80086a6:	6922      	ldr	r2, [r4, #16]
 80086a8:	b942      	cbnz	r2, 80086bc <__swsetup_r+0xa4>
 80086aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086ae:	d1c5      	bne.n	800863c <__swsetup_r+0x24>
 80086b0:	bd38      	pop	{r3, r4, r5, pc}
 80086b2:	0799      	lsls	r1, r3, #30
 80086b4:	bf58      	it	pl
 80086b6:	6962      	ldrpl	r2, [r4, #20]
 80086b8:	60a2      	str	r2, [r4, #8]
 80086ba:	e7f4      	b.n	80086a6 <__swsetup_r+0x8e>
 80086bc:	2000      	movs	r0, #0
 80086be:	e7f7      	b.n	80086b0 <__swsetup_r+0x98>
 80086c0:	20000020 	.word	0x20000020

080086c4 <memmove>:
 80086c4:	4288      	cmp	r0, r1
 80086c6:	b510      	push	{r4, lr}
 80086c8:	eb01 0402 	add.w	r4, r1, r2
 80086cc:	d902      	bls.n	80086d4 <memmove+0x10>
 80086ce:	4284      	cmp	r4, r0
 80086d0:	4623      	mov	r3, r4
 80086d2:	d807      	bhi.n	80086e4 <memmove+0x20>
 80086d4:	1e43      	subs	r3, r0, #1
 80086d6:	42a1      	cmp	r1, r4
 80086d8:	d008      	beq.n	80086ec <memmove+0x28>
 80086da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086e2:	e7f8      	b.n	80086d6 <memmove+0x12>
 80086e4:	4601      	mov	r1, r0
 80086e6:	4402      	add	r2, r0
 80086e8:	428a      	cmp	r2, r1
 80086ea:	d100      	bne.n	80086ee <memmove+0x2a>
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086f6:	e7f7      	b.n	80086e8 <memmove+0x24>

080086f8 <_sbrk_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	2300      	movs	r3, #0
 80086fc:	4d05      	ldr	r5, [pc, #20]	@ (8008714 <_sbrk_r+0x1c>)
 80086fe:	4604      	mov	r4, r0
 8008700:	4608      	mov	r0, r1
 8008702:	602b      	str	r3, [r5, #0]
 8008704:	f7f9 fb24 	bl	8001d50 <_sbrk>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_sbrk_r+0x1a>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_sbrk_r+0x1a>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	20000420 	.word	0x20000420

08008718 <memcpy>:
 8008718:	440a      	add	r2, r1
 800871a:	4291      	cmp	r1, r2
 800871c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008720:	d100      	bne.n	8008724 <memcpy+0xc>
 8008722:	4770      	bx	lr
 8008724:	b510      	push	{r4, lr}
 8008726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800872a:	4291      	cmp	r1, r2
 800872c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008730:	d1f9      	bne.n	8008726 <memcpy+0xe>
 8008732:	bd10      	pop	{r4, pc}

08008734 <nan>:
 8008734:	2000      	movs	r0, #0
 8008736:	4901      	ldr	r1, [pc, #4]	@ (800873c <nan+0x8>)
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	7ff80000 	.word	0x7ff80000

08008740 <__assert_func>:
 8008740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008742:	4614      	mov	r4, r2
 8008744:	461a      	mov	r2, r3
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <__assert_func+0x2c>)
 8008748:	4605      	mov	r5, r0
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68d8      	ldr	r0, [r3, #12]
 800874e:	b954      	cbnz	r4, 8008766 <__assert_func+0x26>
 8008750:	4b07      	ldr	r3, [pc, #28]	@ (8008770 <__assert_func+0x30>)
 8008752:	461c      	mov	r4, r3
 8008754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008758:	9100      	str	r1, [sp, #0]
 800875a:	462b      	mov	r3, r5
 800875c:	4905      	ldr	r1, [pc, #20]	@ (8008774 <__assert_func+0x34>)
 800875e:	f000 fc19 	bl	8008f94 <fiprintf>
 8008762:	f000 fcad 	bl	80090c0 <abort>
 8008766:	4b04      	ldr	r3, [pc, #16]	@ (8008778 <__assert_func+0x38>)
 8008768:	e7f4      	b.n	8008754 <__assert_func+0x14>
 800876a:	bf00      	nop
 800876c:	20000020 	.word	0x20000020
 8008770:	08009618 	.word	0x08009618
 8008774:	080095ea 	.word	0x080095ea
 8008778:	080095dd 	.word	0x080095dd

0800877c <_calloc_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	fba1 5402 	umull	r5, r4, r1, r2
 8008782:	b93c      	cbnz	r4, 8008794 <_calloc_r+0x18>
 8008784:	4629      	mov	r1, r5
 8008786:	f7fd fc91 	bl	80060ac <_malloc_r>
 800878a:	4606      	mov	r6, r0
 800878c:	b928      	cbnz	r0, 800879a <_calloc_r+0x1e>
 800878e:	2600      	movs	r6, #0
 8008790:	4630      	mov	r0, r6
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	220c      	movs	r2, #12
 8008796:	6002      	str	r2, [r0, #0]
 8008798:	e7f9      	b.n	800878e <_calloc_r+0x12>
 800879a:	462a      	mov	r2, r5
 800879c:	4621      	mov	r1, r4
 800879e:	f7fc fd1c 	bl	80051da <memset>
 80087a2:	e7f5      	b.n	8008790 <_calloc_r+0x14>

080087a4 <rshift>:
 80087a4:	6903      	ldr	r3, [r0, #16]
 80087a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80087ae:	f100 0414 	add.w	r4, r0, #20
 80087b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087b6:	dd46      	ble.n	8008846 <rshift+0xa2>
 80087b8:	f011 011f 	ands.w	r1, r1, #31
 80087bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087c4:	d10c      	bne.n	80087e0 <rshift+0x3c>
 80087c6:	4629      	mov	r1, r5
 80087c8:	f100 0710 	add.w	r7, r0, #16
 80087cc:	42b1      	cmp	r1, r6
 80087ce:	d335      	bcc.n	800883c <rshift+0x98>
 80087d0:	1a9b      	subs	r3, r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	1eea      	subs	r2, r5, #3
 80087d6:	4296      	cmp	r6, r2
 80087d8:	bf38      	it	cc
 80087da:	2300      	movcc	r3, #0
 80087dc:	4423      	add	r3, r4
 80087de:	e015      	b.n	800880c <rshift+0x68>
 80087e0:	46a1      	mov	r9, r4
 80087e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087e6:	f1c1 0820 	rsb	r8, r1, #32
 80087ea:	40cf      	lsrs	r7, r1
 80087ec:	f105 0e04 	add.w	lr, r5, #4
 80087f0:	4576      	cmp	r6, lr
 80087f2:	46f4      	mov	ip, lr
 80087f4:	d816      	bhi.n	8008824 <rshift+0x80>
 80087f6:	1a9a      	subs	r2, r3, r2
 80087f8:	0092      	lsls	r2, r2, #2
 80087fa:	3a04      	subs	r2, #4
 80087fc:	3501      	adds	r5, #1
 80087fe:	42ae      	cmp	r6, r5
 8008800:	bf38      	it	cc
 8008802:	2200      	movcc	r2, #0
 8008804:	18a3      	adds	r3, r4, r2
 8008806:	50a7      	str	r7, [r4, r2]
 8008808:	b107      	cbz	r7, 800880c <rshift+0x68>
 800880a:	3304      	adds	r3, #4
 800880c:	42a3      	cmp	r3, r4
 800880e:	eba3 0204 	sub.w	r2, r3, r4
 8008812:	bf08      	it	eq
 8008814:	2300      	moveq	r3, #0
 8008816:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800881a:	6102      	str	r2, [r0, #16]
 800881c:	bf08      	it	eq
 800881e:	6143      	streq	r3, [r0, #20]
 8008820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008824:	f8dc c000 	ldr.w	ip, [ip]
 8008828:	fa0c fc08 	lsl.w	ip, ip, r8
 800882c:	ea4c 0707 	orr.w	r7, ip, r7
 8008830:	f849 7b04 	str.w	r7, [r9], #4
 8008834:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008838:	40cf      	lsrs	r7, r1
 800883a:	e7d9      	b.n	80087f0 <rshift+0x4c>
 800883c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008840:	f847 cf04 	str.w	ip, [r7, #4]!
 8008844:	e7c2      	b.n	80087cc <rshift+0x28>
 8008846:	4623      	mov	r3, r4
 8008848:	e7e0      	b.n	800880c <rshift+0x68>

0800884a <__hexdig_fun>:
 800884a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800884e:	2b09      	cmp	r3, #9
 8008850:	d802      	bhi.n	8008858 <__hexdig_fun+0xe>
 8008852:	3820      	subs	r0, #32
 8008854:	b2c0      	uxtb	r0, r0
 8008856:	4770      	bx	lr
 8008858:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800885c:	2b05      	cmp	r3, #5
 800885e:	d801      	bhi.n	8008864 <__hexdig_fun+0x1a>
 8008860:	3847      	subs	r0, #71	@ 0x47
 8008862:	e7f7      	b.n	8008854 <__hexdig_fun+0xa>
 8008864:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008868:	2b05      	cmp	r3, #5
 800886a:	d801      	bhi.n	8008870 <__hexdig_fun+0x26>
 800886c:	3827      	subs	r0, #39	@ 0x27
 800886e:	e7f1      	b.n	8008854 <__hexdig_fun+0xa>
 8008870:	2000      	movs	r0, #0
 8008872:	4770      	bx	lr

08008874 <__gethex>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	468a      	mov	sl, r1
 800887a:	4690      	mov	r8, r2
 800887c:	b085      	sub	sp, #20
 800887e:	9302      	str	r3, [sp, #8]
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	9001      	str	r0, [sp, #4]
 8008884:	1c9c      	adds	r4, r3, #2
 8008886:	46a1      	mov	r9, r4
 8008888:	f814 0b01 	ldrb.w	r0, [r4], #1
 800888c:	2830      	cmp	r0, #48	@ 0x30
 800888e:	d0fa      	beq.n	8008886 <__gethex+0x12>
 8008890:	eba9 0303 	sub.w	r3, r9, r3
 8008894:	f1a3 0b02 	sub.w	fp, r3, #2
 8008898:	f7ff ffd7 	bl	800884a <__hexdig_fun>
 800889c:	4605      	mov	r5, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	d168      	bne.n	8008974 <__gethex+0x100>
 80088a2:	2201      	movs	r2, #1
 80088a4:	4648      	mov	r0, r9
 80088a6:	499f      	ldr	r1, [pc, #636]	@ (8008b24 <__gethex+0x2b0>)
 80088a8:	f7fc fc9f 	bl	80051ea <strncmp>
 80088ac:	4607      	mov	r7, r0
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d167      	bne.n	8008982 <__gethex+0x10e>
 80088b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80088b6:	4626      	mov	r6, r4
 80088b8:	f7ff ffc7 	bl	800884a <__hexdig_fun>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d062      	beq.n	8008986 <__gethex+0x112>
 80088c0:	4623      	mov	r3, r4
 80088c2:	7818      	ldrb	r0, [r3, #0]
 80088c4:	4699      	mov	r9, r3
 80088c6:	2830      	cmp	r0, #48	@ 0x30
 80088c8:	f103 0301 	add.w	r3, r3, #1
 80088cc:	d0f9      	beq.n	80088c2 <__gethex+0x4e>
 80088ce:	f7ff ffbc 	bl	800884a <__hexdig_fun>
 80088d2:	fab0 f580 	clz	r5, r0
 80088d6:	f04f 0b01 	mov.w	fp, #1
 80088da:	096d      	lsrs	r5, r5, #5
 80088dc:	464a      	mov	r2, r9
 80088de:	4616      	mov	r6, r2
 80088e0:	7830      	ldrb	r0, [r6, #0]
 80088e2:	3201      	adds	r2, #1
 80088e4:	f7ff ffb1 	bl	800884a <__hexdig_fun>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d1f8      	bne.n	80088de <__gethex+0x6a>
 80088ec:	2201      	movs	r2, #1
 80088ee:	4630      	mov	r0, r6
 80088f0:	498c      	ldr	r1, [pc, #560]	@ (8008b24 <__gethex+0x2b0>)
 80088f2:	f7fc fc7a 	bl	80051ea <strncmp>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d13f      	bne.n	800897a <__gethex+0x106>
 80088fa:	b944      	cbnz	r4, 800890e <__gethex+0x9a>
 80088fc:	1c74      	adds	r4, r6, #1
 80088fe:	4622      	mov	r2, r4
 8008900:	4616      	mov	r6, r2
 8008902:	7830      	ldrb	r0, [r6, #0]
 8008904:	3201      	adds	r2, #1
 8008906:	f7ff ffa0 	bl	800884a <__hexdig_fun>
 800890a:	2800      	cmp	r0, #0
 800890c:	d1f8      	bne.n	8008900 <__gethex+0x8c>
 800890e:	1ba4      	subs	r4, r4, r6
 8008910:	00a7      	lsls	r7, r4, #2
 8008912:	7833      	ldrb	r3, [r6, #0]
 8008914:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008918:	2b50      	cmp	r3, #80	@ 0x50
 800891a:	d13e      	bne.n	800899a <__gethex+0x126>
 800891c:	7873      	ldrb	r3, [r6, #1]
 800891e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008920:	d033      	beq.n	800898a <__gethex+0x116>
 8008922:	2b2d      	cmp	r3, #45	@ 0x2d
 8008924:	d034      	beq.n	8008990 <__gethex+0x11c>
 8008926:	2400      	movs	r4, #0
 8008928:	1c71      	adds	r1, r6, #1
 800892a:	7808      	ldrb	r0, [r1, #0]
 800892c:	f7ff ff8d 	bl	800884a <__hexdig_fun>
 8008930:	1e43      	subs	r3, r0, #1
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b18      	cmp	r3, #24
 8008936:	d830      	bhi.n	800899a <__gethex+0x126>
 8008938:	f1a0 0210 	sub.w	r2, r0, #16
 800893c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008940:	f7ff ff83 	bl	800884a <__hexdig_fun>
 8008944:	f100 3cff 	add.w	ip, r0, #4294967295
 8008948:	fa5f fc8c 	uxtb.w	ip, ip
 800894c:	f1bc 0f18 	cmp.w	ip, #24
 8008950:	f04f 030a 	mov.w	r3, #10
 8008954:	d91e      	bls.n	8008994 <__gethex+0x120>
 8008956:	b104      	cbz	r4, 800895a <__gethex+0xe6>
 8008958:	4252      	negs	r2, r2
 800895a:	4417      	add	r7, r2
 800895c:	f8ca 1000 	str.w	r1, [sl]
 8008960:	b1ed      	cbz	r5, 800899e <__gethex+0x12a>
 8008962:	f1bb 0f00 	cmp.w	fp, #0
 8008966:	bf0c      	ite	eq
 8008968:	2506      	moveq	r5, #6
 800896a:	2500      	movne	r5, #0
 800896c:	4628      	mov	r0, r5
 800896e:	b005      	add	sp, #20
 8008970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008974:	2500      	movs	r5, #0
 8008976:	462c      	mov	r4, r5
 8008978:	e7b0      	b.n	80088dc <__gethex+0x68>
 800897a:	2c00      	cmp	r4, #0
 800897c:	d1c7      	bne.n	800890e <__gethex+0x9a>
 800897e:	4627      	mov	r7, r4
 8008980:	e7c7      	b.n	8008912 <__gethex+0x9e>
 8008982:	464e      	mov	r6, r9
 8008984:	462f      	mov	r7, r5
 8008986:	2501      	movs	r5, #1
 8008988:	e7c3      	b.n	8008912 <__gethex+0x9e>
 800898a:	2400      	movs	r4, #0
 800898c:	1cb1      	adds	r1, r6, #2
 800898e:	e7cc      	b.n	800892a <__gethex+0xb6>
 8008990:	2401      	movs	r4, #1
 8008992:	e7fb      	b.n	800898c <__gethex+0x118>
 8008994:	fb03 0002 	mla	r0, r3, r2, r0
 8008998:	e7ce      	b.n	8008938 <__gethex+0xc4>
 800899a:	4631      	mov	r1, r6
 800899c:	e7de      	b.n	800895c <__gethex+0xe8>
 800899e:	4629      	mov	r1, r5
 80089a0:	eba6 0309 	sub.w	r3, r6, r9
 80089a4:	3b01      	subs	r3, #1
 80089a6:	2b07      	cmp	r3, #7
 80089a8:	dc0a      	bgt.n	80089c0 <__gethex+0x14c>
 80089aa:	9801      	ldr	r0, [sp, #4]
 80089ac:	f7fd fc0a 	bl	80061c4 <_Balloc>
 80089b0:	4604      	mov	r4, r0
 80089b2:	b940      	cbnz	r0, 80089c6 <__gethex+0x152>
 80089b4:	4602      	mov	r2, r0
 80089b6:	21e4      	movs	r1, #228	@ 0xe4
 80089b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008b28 <__gethex+0x2b4>)
 80089ba:	485c      	ldr	r0, [pc, #368]	@ (8008b2c <__gethex+0x2b8>)
 80089bc:	f7ff fec0 	bl	8008740 <__assert_func>
 80089c0:	3101      	adds	r1, #1
 80089c2:	105b      	asrs	r3, r3, #1
 80089c4:	e7ef      	b.n	80089a6 <__gethex+0x132>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f100 0a14 	add.w	sl, r0, #20
 80089cc:	4655      	mov	r5, sl
 80089ce:	469b      	mov	fp, r3
 80089d0:	45b1      	cmp	r9, r6
 80089d2:	d337      	bcc.n	8008a44 <__gethex+0x1d0>
 80089d4:	f845 bb04 	str.w	fp, [r5], #4
 80089d8:	eba5 050a 	sub.w	r5, r5, sl
 80089dc:	10ad      	asrs	r5, r5, #2
 80089de:	6125      	str	r5, [r4, #16]
 80089e0:	4658      	mov	r0, fp
 80089e2:	f7fd fce1 	bl	80063a8 <__hi0bits>
 80089e6:	016d      	lsls	r5, r5, #5
 80089e8:	f8d8 6000 	ldr.w	r6, [r8]
 80089ec:	1a2d      	subs	r5, r5, r0
 80089ee:	42b5      	cmp	r5, r6
 80089f0:	dd54      	ble.n	8008a9c <__gethex+0x228>
 80089f2:	1bad      	subs	r5, r5, r6
 80089f4:	4629      	mov	r1, r5
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7fe f869 	bl	8006ace <__any_on>
 80089fc:	4681      	mov	r9, r0
 80089fe:	b178      	cbz	r0, 8008a20 <__gethex+0x1ac>
 8008a00:	f04f 0901 	mov.w	r9, #1
 8008a04:	1e6b      	subs	r3, r5, #1
 8008a06:	1159      	asrs	r1, r3, #5
 8008a08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008a0c:	f003 021f 	and.w	r2, r3, #31
 8008a10:	fa09 f202 	lsl.w	r2, r9, r2
 8008a14:	420a      	tst	r2, r1
 8008a16:	d003      	beq.n	8008a20 <__gethex+0x1ac>
 8008a18:	454b      	cmp	r3, r9
 8008a1a:	dc36      	bgt.n	8008a8a <__gethex+0x216>
 8008a1c:	f04f 0902 	mov.w	r9, #2
 8008a20:	4629      	mov	r1, r5
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff febe 	bl	80087a4 <rshift>
 8008a28:	442f      	add	r7, r5
 8008a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a2e:	42bb      	cmp	r3, r7
 8008a30:	da42      	bge.n	8008ab8 <__gethex+0x244>
 8008a32:	4621      	mov	r1, r4
 8008a34:	9801      	ldr	r0, [sp, #4]
 8008a36:	f7fd fc05 	bl	8006244 <_Bfree>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a3e:	25a3      	movs	r5, #163	@ 0xa3
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	e793      	b.n	800896c <__gethex+0xf8>
 8008a44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008a48:	2a2e      	cmp	r2, #46	@ 0x2e
 8008a4a:	d012      	beq.n	8008a72 <__gethex+0x1fe>
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d104      	bne.n	8008a5a <__gethex+0x1e6>
 8008a50:	f845 bb04 	str.w	fp, [r5], #4
 8008a54:	f04f 0b00 	mov.w	fp, #0
 8008a58:	465b      	mov	r3, fp
 8008a5a:	7830      	ldrb	r0, [r6, #0]
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	f7ff fef4 	bl	800884a <__hexdig_fun>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	f000 000f 	and.w	r0, r0, #15
 8008a68:	4098      	lsls	r0, r3
 8008a6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a6e:	3304      	adds	r3, #4
 8008a70:	e7ae      	b.n	80089d0 <__gethex+0x15c>
 8008a72:	45b1      	cmp	r9, r6
 8008a74:	d8ea      	bhi.n	8008a4c <__gethex+0x1d8>
 8008a76:	2201      	movs	r2, #1
 8008a78:	4630      	mov	r0, r6
 8008a7a:	492a      	ldr	r1, [pc, #168]	@ (8008b24 <__gethex+0x2b0>)
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	f7fc fbb4 	bl	80051ea <strncmp>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d1e1      	bne.n	8008a4c <__gethex+0x1d8>
 8008a88:	e7a2      	b.n	80089d0 <__gethex+0x15c>
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	1ea9      	subs	r1, r5, #2
 8008a8e:	f7fe f81e 	bl	8006ace <__any_on>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d0c2      	beq.n	8008a1c <__gethex+0x1a8>
 8008a96:	f04f 0903 	mov.w	r9, #3
 8008a9a:	e7c1      	b.n	8008a20 <__gethex+0x1ac>
 8008a9c:	da09      	bge.n	8008ab2 <__gethex+0x23e>
 8008a9e:	1b75      	subs	r5, r6, r5
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	9801      	ldr	r0, [sp, #4]
 8008aa6:	f7fd fde3 	bl	8006670 <__lshift>
 8008aaa:	4604      	mov	r4, r0
 8008aac:	1b7f      	subs	r7, r7, r5
 8008aae:	f100 0a14 	add.w	sl, r0, #20
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	e7b8      	b.n	8008a2a <__gethex+0x1b6>
 8008ab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008abc:	42bd      	cmp	r5, r7
 8008abe:	dd6f      	ble.n	8008ba0 <__gethex+0x32c>
 8008ac0:	1bed      	subs	r5, r5, r7
 8008ac2:	42ae      	cmp	r6, r5
 8008ac4:	dc34      	bgt.n	8008b30 <__gethex+0x2bc>
 8008ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d022      	beq.n	8008b14 <__gethex+0x2a0>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d024      	beq.n	8008b1c <__gethex+0x2a8>
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d115      	bne.n	8008b02 <__gethex+0x28e>
 8008ad6:	42ae      	cmp	r6, r5
 8008ad8:	d113      	bne.n	8008b02 <__gethex+0x28e>
 8008ada:	2e01      	cmp	r6, #1
 8008adc:	d10b      	bne.n	8008af6 <__gethex+0x282>
 8008ade:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ae2:	9a02      	ldr	r2, [sp, #8]
 8008ae4:	2562      	movs	r5, #98	@ 0x62
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	2301      	movs	r3, #1
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	f8ca 3000 	str.w	r3, [sl]
 8008af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af2:	601c      	str	r4, [r3, #0]
 8008af4:	e73a      	b.n	800896c <__gethex+0xf8>
 8008af6:	4620      	mov	r0, r4
 8008af8:	1e71      	subs	r1, r6, #1
 8008afa:	f7fd ffe8 	bl	8006ace <__any_on>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1ed      	bne.n	8008ade <__gethex+0x26a>
 8008b02:	4621      	mov	r1, r4
 8008b04:	9801      	ldr	r0, [sp, #4]
 8008b06:	f7fd fb9d 	bl	8006244 <_Bfree>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b0e:	2550      	movs	r5, #80	@ 0x50
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	e72b      	b.n	800896c <__gethex+0xf8>
 8008b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1f3      	bne.n	8008b02 <__gethex+0x28e>
 8008b1a:	e7e0      	b.n	8008ade <__gethex+0x26a>
 8008b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1dd      	bne.n	8008ade <__gethex+0x26a>
 8008b22:	e7ee      	b.n	8008b02 <__gethex+0x28e>
 8008b24:	08009450 	.word	0x08009450
 8008b28:	080092e5 	.word	0x080092e5
 8008b2c:	08009619 	.word	0x08009619
 8008b30:	1e6f      	subs	r7, r5, #1
 8008b32:	f1b9 0f00 	cmp.w	r9, #0
 8008b36:	d130      	bne.n	8008b9a <__gethex+0x326>
 8008b38:	b127      	cbz	r7, 8008b44 <__gethex+0x2d0>
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f7fd ffc6 	bl	8006ace <__any_on>
 8008b42:	4681      	mov	r9, r0
 8008b44:	2301      	movs	r3, #1
 8008b46:	4629      	mov	r1, r5
 8008b48:	1b76      	subs	r6, r6, r5
 8008b4a:	2502      	movs	r5, #2
 8008b4c:	117a      	asrs	r2, r7, #5
 8008b4e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008b52:	f007 071f 	and.w	r7, r7, #31
 8008b56:	40bb      	lsls	r3, r7
 8008b58:	4213      	tst	r3, r2
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	bf18      	it	ne
 8008b5e:	f049 0902 	orrne.w	r9, r9, #2
 8008b62:	f7ff fe1f 	bl	80087a4 <rshift>
 8008b66:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008b6a:	f1b9 0f00 	cmp.w	r9, #0
 8008b6e:	d047      	beq.n	8008c00 <__gethex+0x38c>
 8008b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d015      	beq.n	8008ba4 <__gethex+0x330>
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d017      	beq.n	8008bac <__gethex+0x338>
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d109      	bne.n	8008b94 <__gethex+0x320>
 8008b80:	f019 0f02 	tst.w	r9, #2
 8008b84:	d006      	beq.n	8008b94 <__gethex+0x320>
 8008b86:	f8da 3000 	ldr.w	r3, [sl]
 8008b8a:	ea49 0903 	orr.w	r9, r9, r3
 8008b8e:	f019 0f01 	tst.w	r9, #1
 8008b92:	d10e      	bne.n	8008bb2 <__gethex+0x33e>
 8008b94:	f045 0510 	orr.w	r5, r5, #16
 8008b98:	e032      	b.n	8008c00 <__gethex+0x38c>
 8008b9a:	f04f 0901 	mov.w	r9, #1
 8008b9e:	e7d1      	b.n	8008b44 <__gethex+0x2d0>
 8008ba0:	2501      	movs	r5, #1
 8008ba2:	e7e2      	b.n	8008b6a <__gethex+0x2f6>
 8008ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ba6:	f1c3 0301 	rsb	r3, r3, #1
 8008baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f0      	beq.n	8008b94 <__gethex+0x320>
 8008bb2:	f04f 0c00 	mov.w	ip, #0
 8008bb6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008bba:	f104 0314 	add.w	r3, r4, #20
 8008bbe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008bc2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008bd0:	d01b      	beq.n	8008c0a <__gethex+0x396>
 8008bd2:	3201      	adds	r2, #1
 8008bd4:	6002      	str	r2, [r0, #0]
 8008bd6:	2d02      	cmp	r5, #2
 8008bd8:	f104 0314 	add.w	r3, r4, #20
 8008bdc:	d13c      	bne.n	8008c58 <__gethex+0x3e4>
 8008bde:	f8d8 2000 	ldr.w	r2, [r8]
 8008be2:	3a01      	subs	r2, #1
 8008be4:	42b2      	cmp	r2, r6
 8008be6:	d109      	bne.n	8008bfc <__gethex+0x388>
 8008be8:	2201      	movs	r2, #1
 8008bea:	1171      	asrs	r1, r6, #5
 8008bec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bf0:	f006 061f 	and.w	r6, r6, #31
 8008bf4:	fa02 f606 	lsl.w	r6, r2, r6
 8008bf8:	421e      	tst	r6, r3
 8008bfa:	d13a      	bne.n	8008c72 <__gethex+0x3fe>
 8008bfc:	f045 0520 	orr.w	r5, r5, #32
 8008c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c02:	601c      	str	r4, [r3, #0]
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	601f      	str	r7, [r3, #0]
 8008c08:	e6b0      	b.n	800896c <__gethex+0xf8>
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c10:	d8d9      	bhi.n	8008bc6 <__gethex+0x352>
 8008c12:	68a3      	ldr	r3, [r4, #8]
 8008c14:	459b      	cmp	fp, r3
 8008c16:	db17      	blt.n	8008c48 <__gethex+0x3d4>
 8008c18:	6861      	ldr	r1, [r4, #4]
 8008c1a:	9801      	ldr	r0, [sp, #4]
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	f7fd fad1 	bl	80061c4 <_Balloc>
 8008c22:	4681      	mov	r9, r0
 8008c24:	b918      	cbnz	r0, 8008c2e <__gethex+0x3ba>
 8008c26:	4602      	mov	r2, r0
 8008c28:	2184      	movs	r1, #132	@ 0x84
 8008c2a:	4b19      	ldr	r3, [pc, #100]	@ (8008c90 <__gethex+0x41c>)
 8008c2c:	e6c5      	b.n	80089ba <__gethex+0x146>
 8008c2e:	6922      	ldr	r2, [r4, #16]
 8008c30:	f104 010c 	add.w	r1, r4, #12
 8008c34:	3202      	adds	r2, #2
 8008c36:	0092      	lsls	r2, r2, #2
 8008c38:	300c      	adds	r0, #12
 8008c3a:	f7ff fd6d 	bl	8008718 <memcpy>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	9801      	ldr	r0, [sp, #4]
 8008c42:	f7fd faff 	bl	8006244 <_Bfree>
 8008c46:	464c      	mov	r4, r9
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	6122      	str	r2, [r4, #16]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c54:	615a      	str	r2, [r3, #20]
 8008c56:	e7be      	b.n	8008bd6 <__gethex+0x362>
 8008c58:	6922      	ldr	r2, [r4, #16]
 8008c5a:	455a      	cmp	r2, fp
 8008c5c:	dd0b      	ble.n	8008c76 <__gethex+0x402>
 8008c5e:	2101      	movs	r1, #1
 8008c60:	4620      	mov	r0, r4
 8008c62:	f7ff fd9f 	bl	80087a4 <rshift>
 8008c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c6a:	3701      	adds	r7, #1
 8008c6c:	42bb      	cmp	r3, r7
 8008c6e:	f6ff aee0 	blt.w	8008a32 <__gethex+0x1be>
 8008c72:	2501      	movs	r5, #1
 8008c74:	e7c2      	b.n	8008bfc <__gethex+0x388>
 8008c76:	f016 061f 	ands.w	r6, r6, #31
 8008c7a:	d0fa      	beq.n	8008c72 <__gethex+0x3fe>
 8008c7c:	4453      	add	r3, sl
 8008c7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c82:	f7fd fb91 	bl	80063a8 <__hi0bits>
 8008c86:	f1c6 0620 	rsb	r6, r6, #32
 8008c8a:	42b0      	cmp	r0, r6
 8008c8c:	dbe7      	blt.n	8008c5e <__gethex+0x3ea>
 8008c8e:	e7f0      	b.n	8008c72 <__gethex+0x3fe>
 8008c90:	080092e5 	.word	0x080092e5

08008c94 <L_shift>:
 8008c94:	f1c2 0208 	rsb	r2, r2, #8
 8008c98:	0092      	lsls	r2, r2, #2
 8008c9a:	b570      	push	{r4, r5, r6, lr}
 8008c9c:	f1c2 0620 	rsb	r6, r2, #32
 8008ca0:	6843      	ldr	r3, [r0, #4]
 8008ca2:	6804      	ldr	r4, [r0, #0]
 8008ca4:	fa03 f506 	lsl.w	r5, r3, r6
 8008ca8:	432c      	orrs	r4, r5
 8008caa:	40d3      	lsrs	r3, r2
 8008cac:	6004      	str	r4, [r0, #0]
 8008cae:	f840 3f04 	str.w	r3, [r0, #4]!
 8008cb2:	4288      	cmp	r0, r1
 8008cb4:	d3f4      	bcc.n	8008ca0 <L_shift+0xc>
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}

08008cb8 <__match>:
 8008cb8:	b530      	push	{r4, r5, lr}
 8008cba:	6803      	ldr	r3, [r0, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cc2:	b914      	cbnz	r4, 8008cca <__match+0x12>
 8008cc4:	6003      	str	r3, [r0, #0]
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	bd30      	pop	{r4, r5, pc}
 8008cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008cd2:	2d19      	cmp	r5, #25
 8008cd4:	bf98      	it	ls
 8008cd6:	3220      	addls	r2, #32
 8008cd8:	42a2      	cmp	r2, r4
 8008cda:	d0f0      	beq.n	8008cbe <__match+0x6>
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e7f3      	b.n	8008cc8 <__match+0x10>

08008ce0 <__hexnan>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	680b      	ldr	r3, [r1, #0]
 8008ce8:	4682      	mov	sl, r0
 8008cea:	115e      	asrs	r6, r3, #5
 8008cec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cf0:	f013 031f 	ands.w	r3, r3, #31
 8008cf4:	bf18      	it	ne
 8008cf6:	3604      	addne	r6, #4
 8008cf8:	1f37      	subs	r7, r6, #4
 8008cfa:	4690      	mov	r8, r2
 8008cfc:	46b9      	mov	r9, r7
 8008cfe:	463c      	mov	r4, r7
 8008d00:	46ab      	mov	fp, r5
 8008d02:	b087      	sub	sp, #28
 8008d04:	6801      	ldr	r1, [r0, #0]
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d0c:	9502      	str	r5, [sp, #8]
 8008d0e:	784a      	ldrb	r2, [r1, #1]
 8008d10:	1c4b      	adds	r3, r1, #1
 8008d12:	9303      	str	r3, [sp, #12]
 8008d14:	b342      	cbz	r2, 8008d68 <__hexnan+0x88>
 8008d16:	4610      	mov	r0, r2
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	9204      	str	r2, [sp, #16]
 8008d1c:	f7ff fd95 	bl	800884a <__hexdig_fun>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d151      	bne.n	8008dc8 <__hexnan+0xe8>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	9905      	ldr	r1, [sp, #20]
 8008d28:	2a20      	cmp	r2, #32
 8008d2a:	d818      	bhi.n	8008d5e <__hexnan+0x7e>
 8008d2c:	9b02      	ldr	r3, [sp, #8]
 8008d2e:	459b      	cmp	fp, r3
 8008d30:	dd13      	ble.n	8008d5a <__hexnan+0x7a>
 8008d32:	454c      	cmp	r4, r9
 8008d34:	d206      	bcs.n	8008d44 <__hexnan+0x64>
 8008d36:	2d07      	cmp	r5, #7
 8008d38:	dc04      	bgt.n	8008d44 <__hexnan+0x64>
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7ff ffa8 	bl	8008c94 <L_shift>
 8008d44:	4544      	cmp	r4, r8
 8008d46:	d952      	bls.n	8008dee <__hexnan+0x10e>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f1a4 0904 	sub.w	r9, r4, #4
 8008d4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d52:	461d      	mov	r5, r3
 8008d54:	464c      	mov	r4, r9
 8008d56:	f8cd b008 	str.w	fp, [sp, #8]
 8008d5a:	9903      	ldr	r1, [sp, #12]
 8008d5c:	e7d7      	b.n	8008d0e <__hexnan+0x2e>
 8008d5e:	2a29      	cmp	r2, #41	@ 0x29
 8008d60:	d157      	bne.n	8008e12 <__hexnan+0x132>
 8008d62:	3102      	adds	r1, #2
 8008d64:	f8ca 1000 	str.w	r1, [sl]
 8008d68:	f1bb 0f00 	cmp.w	fp, #0
 8008d6c:	d051      	beq.n	8008e12 <__hexnan+0x132>
 8008d6e:	454c      	cmp	r4, r9
 8008d70:	d206      	bcs.n	8008d80 <__hexnan+0xa0>
 8008d72:	2d07      	cmp	r5, #7
 8008d74:	dc04      	bgt.n	8008d80 <__hexnan+0xa0>
 8008d76:	462a      	mov	r2, r5
 8008d78:	4649      	mov	r1, r9
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff ff8a 	bl	8008c94 <L_shift>
 8008d80:	4544      	cmp	r4, r8
 8008d82:	d936      	bls.n	8008df2 <__hexnan+0x112>
 8008d84:	4623      	mov	r3, r4
 8008d86:	f1a8 0204 	sub.w	r2, r8, #4
 8008d8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d8e:	429f      	cmp	r7, r3
 8008d90:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d94:	d2f9      	bcs.n	8008d8a <__hexnan+0xaa>
 8008d96:	1b3b      	subs	r3, r7, r4
 8008d98:	f023 0303 	bic.w	r3, r3, #3
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	3401      	adds	r4, #1
 8008da0:	3e03      	subs	r6, #3
 8008da2:	42b4      	cmp	r4, r6
 8008da4:	bf88      	it	hi
 8008da6:	2304      	movhi	r3, #4
 8008da8:	2200      	movs	r2, #0
 8008daa:	4443      	add	r3, r8
 8008dac:	f843 2b04 	str.w	r2, [r3], #4
 8008db0:	429f      	cmp	r7, r3
 8008db2:	d2fb      	bcs.n	8008dac <__hexnan+0xcc>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	b91b      	cbnz	r3, 8008dc0 <__hexnan+0xe0>
 8008db8:	4547      	cmp	r7, r8
 8008dba:	d128      	bne.n	8008e0e <__hexnan+0x12e>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	603b      	str	r3, [r7, #0]
 8008dc0:	2005      	movs	r0, #5
 8008dc2:	b007      	add	sp, #28
 8008dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc8:	3501      	adds	r5, #1
 8008dca:	2d08      	cmp	r5, #8
 8008dcc:	f10b 0b01 	add.w	fp, fp, #1
 8008dd0:	dd06      	ble.n	8008de0 <__hexnan+0x100>
 8008dd2:	4544      	cmp	r4, r8
 8008dd4:	d9c1      	bls.n	8008d5a <__hexnan+0x7a>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2501      	movs	r5, #1
 8008dda:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dde:	3c04      	subs	r4, #4
 8008de0:	6822      	ldr	r2, [r4, #0]
 8008de2:	f000 000f 	and.w	r0, r0, #15
 8008de6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008dea:	6020      	str	r0, [r4, #0]
 8008dec:	e7b5      	b.n	8008d5a <__hexnan+0x7a>
 8008dee:	2508      	movs	r5, #8
 8008df0:	e7b3      	b.n	8008d5a <__hexnan+0x7a>
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0dd      	beq.n	8008db4 <__hexnan+0xd4>
 8008df8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfc:	f1c3 0320 	rsb	r3, r3, #32
 8008e00:	40da      	lsrs	r2, r3
 8008e02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008e06:	4013      	ands	r3, r2
 8008e08:	f846 3c04 	str.w	r3, [r6, #-4]
 8008e0c:	e7d2      	b.n	8008db4 <__hexnan+0xd4>
 8008e0e:	3f04      	subs	r7, #4
 8008e10:	e7d0      	b.n	8008db4 <__hexnan+0xd4>
 8008e12:	2004      	movs	r0, #4
 8008e14:	e7d5      	b.n	8008dc2 <__hexnan+0xe2>

08008e16 <__ascii_mbtowc>:
 8008e16:	b082      	sub	sp, #8
 8008e18:	b901      	cbnz	r1, 8008e1c <__ascii_mbtowc+0x6>
 8008e1a:	a901      	add	r1, sp, #4
 8008e1c:	b142      	cbz	r2, 8008e30 <__ascii_mbtowc+0x1a>
 8008e1e:	b14b      	cbz	r3, 8008e34 <__ascii_mbtowc+0x1e>
 8008e20:	7813      	ldrb	r3, [r2, #0]
 8008e22:	600b      	str	r3, [r1, #0]
 8008e24:	7812      	ldrb	r2, [r2, #0]
 8008e26:	1e10      	subs	r0, r2, #0
 8008e28:	bf18      	it	ne
 8008e2a:	2001      	movne	r0, #1
 8008e2c:	b002      	add	sp, #8
 8008e2e:	4770      	bx	lr
 8008e30:	4610      	mov	r0, r2
 8008e32:	e7fb      	b.n	8008e2c <__ascii_mbtowc+0x16>
 8008e34:	f06f 0001 	mvn.w	r0, #1
 8008e38:	e7f8      	b.n	8008e2c <__ascii_mbtowc+0x16>

08008e3a <_realloc_r>:
 8008e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3e:	4680      	mov	r8, r0
 8008e40:	4615      	mov	r5, r2
 8008e42:	460c      	mov	r4, r1
 8008e44:	b921      	cbnz	r1, 8008e50 <_realloc_r+0x16>
 8008e46:	4611      	mov	r1, r2
 8008e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4c:	f7fd b92e 	b.w	80060ac <_malloc_r>
 8008e50:	b92a      	cbnz	r2, 8008e5e <_realloc_r+0x24>
 8008e52:	f7fd f8b9 	bl	8005fc8 <_free_r>
 8008e56:	2400      	movs	r4, #0
 8008e58:	4620      	mov	r0, r4
 8008e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5e:	f000 f936 	bl	80090ce <_malloc_usable_size_r>
 8008e62:	4285      	cmp	r5, r0
 8008e64:	4606      	mov	r6, r0
 8008e66:	d802      	bhi.n	8008e6e <_realloc_r+0x34>
 8008e68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e6c:	d8f4      	bhi.n	8008e58 <_realloc_r+0x1e>
 8008e6e:	4629      	mov	r1, r5
 8008e70:	4640      	mov	r0, r8
 8008e72:	f7fd f91b 	bl	80060ac <_malloc_r>
 8008e76:	4607      	mov	r7, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0ec      	beq.n	8008e56 <_realloc_r+0x1c>
 8008e7c:	42b5      	cmp	r5, r6
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4621      	mov	r1, r4
 8008e82:	bf28      	it	cs
 8008e84:	4632      	movcs	r2, r6
 8008e86:	f7ff fc47 	bl	8008718 <memcpy>
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	f7fd f89b 	bl	8005fc8 <_free_r>
 8008e92:	463c      	mov	r4, r7
 8008e94:	e7e0      	b.n	8008e58 <_realloc_r+0x1e>
	...

08008e98 <_strtoul_l.constprop.0>:
 8008e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e9c:	4686      	mov	lr, r0
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	4e33      	ldr	r6, [pc, #204]	@ (8008f70 <_strtoul_l.constprop.0+0xd8>)
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ea8:	5d37      	ldrb	r7, [r6, r4]
 8008eaa:	f017 0708 	ands.w	r7, r7, #8
 8008eae:	d1f8      	bne.n	8008ea2 <_strtoul_l.constprop.0+0xa>
 8008eb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008eb2:	d12f      	bne.n	8008f14 <_strtoul_l.constprop.0+0x7c>
 8008eb4:	2701      	movs	r7, #1
 8008eb6:	782c      	ldrb	r4, [r5, #0]
 8008eb8:	1c85      	adds	r5, r0, #2
 8008eba:	f033 0010 	bics.w	r0, r3, #16
 8008ebe:	d109      	bne.n	8008ed4 <_strtoul_l.constprop.0+0x3c>
 8008ec0:	2c30      	cmp	r4, #48	@ 0x30
 8008ec2:	d12c      	bne.n	8008f1e <_strtoul_l.constprop.0+0x86>
 8008ec4:	7828      	ldrb	r0, [r5, #0]
 8008ec6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008eca:	2858      	cmp	r0, #88	@ 0x58
 8008ecc:	d127      	bne.n	8008f1e <_strtoul_l.constprop.0+0x86>
 8008ece:	2310      	movs	r3, #16
 8008ed0:	786c      	ldrb	r4, [r5, #1]
 8008ed2:	3502      	adds	r5, #2
 8008ed4:	f04f 38ff 	mov.w	r8, #4294967295
 8008ed8:	fbb8 f8f3 	udiv	r8, r8, r3
 8008edc:	2600      	movs	r6, #0
 8008ede:	fb03 f908 	mul.w	r9, r3, r8
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	ea6f 0909 	mvn.w	r9, r9
 8008ee8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008eec:	f1bc 0f09 	cmp.w	ip, #9
 8008ef0:	d81c      	bhi.n	8008f2c <_strtoul_l.constprop.0+0x94>
 8008ef2:	4664      	mov	r4, ip
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	dd2a      	ble.n	8008f4e <_strtoul_l.constprop.0+0xb6>
 8008ef8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008efc:	d007      	beq.n	8008f0e <_strtoul_l.constprop.0+0x76>
 8008efe:	4580      	cmp	r8, r0
 8008f00:	d322      	bcc.n	8008f48 <_strtoul_l.constprop.0+0xb0>
 8008f02:	d101      	bne.n	8008f08 <_strtoul_l.constprop.0+0x70>
 8008f04:	45a1      	cmp	r9, r4
 8008f06:	db1f      	blt.n	8008f48 <_strtoul_l.constprop.0+0xb0>
 8008f08:	2601      	movs	r6, #1
 8008f0a:	fb00 4003 	mla	r0, r0, r3, r4
 8008f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f12:	e7e9      	b.n	8008ee8 <_strtoul_l.constprop.0+0x50>
 8008f14:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f16:	bf04      	itt	eq
 8008f18:	782c      	ldrbeq	r4, [r5, #0]
 8008f1a:	1c85      	addeq	r5, r0, #2
 8008f1c:	e7cd      	b.n	8008eba <_strtoul_l.constprop.0+0x22>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1d8      	bne.n	8008ed4 <_strtoul_l.constprop.0+0x3c>
 8008f22:	2c30      	cmp	r4, #48	@ 0x30
 8008f24:	bf0c      	ite	eq
 8008f26:	2308      	moveq	r3, #8
 8008f28:	230a      	movne	r3, #10
 8008f2a:	e7d3      	b.n	8008ed4 <_strtoul_l.constprop.0+0x3c>
 8008f2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008f30:	f1bc 0f19 	cmp.w	ip, #25
 8008f34:	d801      	bhi.n	8008f3a <_strtoul_l.constprop.0+0xa2>
 8008f36:	3c37      	subs	r4, #55	@ 0x37
 8008f38:	e7dc      	b.n	8008ef4 <_strtoul_l.constprop.0+0x5c>
 8008f3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008f3e:	f1bc 0f19 	cmp.w	ip, #25
 8008f42:	d804      	bhi.n	8008f4e <_strtoul_l.constprop.0+0xb6>
 8008f44:	3c57      	subs	r4, #87	@ 0x57
 8008f46:	e7d5      	b.n	8008ef4 <_strtoul_l.constprop.0+0x5c>
 8008f48:	f04f 36ff 	mov.w	r6, #4294967295
 8008f4c:	e7df      	b.n	8008f0e <_strtoul_l.constprop.0+0x76>
 8008f4e:	1c73      	adds	r3, r6, #1
 8008f50:	d106      	bne.n	8008f60 <_strtoul_l.constprop.0+0xc8>
 8008f52:	2322      	movs	r3, #34	@ 0x22
 8008f54:	4630      	mov	r0, r6
 8008f56:	f8ce 3000 	str.w	r3, [lr]
 8008f5a:	b932      	cbnz	r2, 8008f6a <_strtoul_l.constprop.0+0xd2>
 8008f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f60:	b107      	cbz	r7, 8008f64 <_strtoul_l.constprop.0+0xcc>
 8008f62:	4240      	negs	r0, r0
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	d0f9      	beq.n	8008f5c <_strtoul_l.constprop.0+0xc4>
 8008f68:	b106      	cbz	r6, 8008f6c <_strtoul_l.constprop.0+0xd4>
 8008f6a:	1e69      	subs	r1, r5, #1
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	e7f5      	b.n	8008f5c <_strtoul_l.constprop.0+0xc4>
 8008f70:	080094a9 	.word	0x080094a9

08008f74 <_strtoul_r>:
 8008f74:	f7ff bf90 	b.w	8008e98 <_strtoul_l.constprop.0>

08008f78 <__ascii_wctomb>:
 8008f78:	4603      	mov	r3, r0
 8008f7a:	4608      	mov	r0, r1
 8008f7c:	b141      	cbz	r1, 8008f90 <__ascii_wctomb+0x18>
 8008f7e:	2aff      	cmp	r2, #255	@ 0xff
 8008f80:	d904      	bls.n	8008f8c <__ascii_wctomb+0x14>
 8008f82:	228a      	movs	r2, #138	@ 0x8a
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	4770      	bx	lr
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	700a      	strb	r2, [r1, #0]
 8008f90:	4770      	bx	lr
	...

08008f94 <fiprintf>:
 8008f94:	b40e      	push	{r1, r2, r3}
 8008f96:	b503      	push	{r0, r1, lr}
 8008f98:	4601      	mov	r1, r0
 8008f9a:	ab03      	add	r3, sp, #12
 8008f9c:	4805      	ldr	r0, [pc, #20]	@ (8008fb4 <fiprintf+0x20>)
 8008f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa2:	6800      	ldr	r0, [r0, #0]
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	f7fe ff7b 	bl	8007ea0 <_vfiprintf_r>
 8008faa:	b002      	add	sp, #8
 8008fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb0:	b003      	add	sp, #12
 8008fb2:	4770      	bx	lr
 8008fb4:	20000020 	.word	0x20000020

08008fb8 <__swhatbuf_r>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	460c      	mov	r4, r1
 8008fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	461e      	mov	r6, r3
 8008fc6:	b096      	sub	sp, #88	@ 0x58
 8008fc8:	da0c      	bge.n	8008fe4 <__swhatbuf_r+0x2c>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fd2:	bf14      	ite	ne
 8008fd4:	2340      	movne	r3, #64	@ 0x40
 8008fd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fda:	2000      	movs	r0, #0
 8008fdc:	6031      	str	r1, [r6, #0]
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	b016      	add	sp, #88	@ 0x58
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	466a      	mov	r2, sp
 8008fe6:	f000 f849 	bl	800907c <_fstat_r>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	dbed      	blt.n	8008fca <__swhatbuf_r+0x12>
 8008fee:	9901      	ldr	r1, [sp, #4]
 8008ff0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ff4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ff8:	4259      	negs	r1, r3
 8008ffa:	4159      	adcs	r1, r3
 8008ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009000:	e7eb      	b.n	8008fda <__swhatbuf_r+0x22>

08009002 <__smakebuf_r>:
 8009002:	898b      	ldrh	r3, [r1, #12]
 8009004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009006:	079d      	lsls	r5, r3, #30
 8009008:	4606      	mov	r6, r0
 800900a:	460c      	mov	r4, r1
 800900c:	d507      	bpl.n	800901e <__smakebuf_r+0x1c>
 800900e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	2301      	movs	r3, #1
 8009018:	6163      	str	r3, [r4, #20]
 800901a:	b003      	add	sp, #12
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901e:	466a      	mov	r2, sp
 8009020:	ab01      	add	r3, sp, #4
 8009022:	f7ff ffc9 	bl	8008fb8 <__swhatbuf_r>
 8009026:	9f00      	ldr	r7, [sp, #0]
 8009028:	4605      	mov	r5, r0
 800902a:	4639      	mov	r1, r7
 800902c:	4630      	mov	r0, r6
 800902e:	f7fd f83d 	bl	80060ac <_malloc_r>
 8009032:	b948      	cbnz	r0, 8009048 <__smakebuf_r+0x46>
 8009034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009038:	059a      	lsls	r2, r3, #22
 800903a:	d4ee      	bmi.n	800901a <__smakebuf_r+0x18>
 800903c:	f023 0303 	bic.w	r3, r3, #3
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	e7e2      	b.n	800900e <__smakebuf_r+0xc>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800904e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	6020      	str	r0, [r4, #0]
 8009058:	b15b      	cbz	r3, 8009072 <__smakebuf_r+0x70>
 800905a:	4630      	mov	r0, r6
 800905c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009060:	f000 f81e 	bl	80090a0 <_isatty_r>
 8009064:	b128      	cbz	r0, 8009072 <__smakebuf_r+0x70>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f023 0303 	bic.w	r3, r3, #3
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	431d      	orrs	r5, r3
 8009076:	81a5      	strh	r5, [r4, #12]
 8009078:	e7cf      	b.n	800901a <__smakebuf_r+0x18>
	...

0800907c <_fstat_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	2300      	movs	r3, #0
 8009080:	4d06      	ldr	r5, [pc, #24]	@ (800909c <_fstat_r+0x20>)
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	4611      	mov	r1, r2
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	f7f8 fe3b 	bl	8001d04 <_fstat>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d102      	bne.n	8009098 <_fstat_r+0x1c>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b103      	cbz	r3, 8009098 <_fstat_r+0x1c>
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	20000420 	.word	0x20000420

080090a0 <_isatty_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	2300      	movs	r3, #0
 80090a4:	4d05      	ldr	r5, [pc, #20]	@ (80090bc <_isatty_r+0x1c>)
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f8 fe39 	bl	8001d22 <_isatty>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_isatty_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_isatty_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	20000420 	.word	0x20000420

080090c0 <abort>:
 80090c0:	2006      	movs	r0, #6
 80090c2:	b508      	push	{r3, lr}
 80090c4:	f000 f834 	bl	8009130 <raise>
 80090c8:	2001      	movs	r0, #1
 80090ca:	f7f8 fde8 	bl	8001c9e <_exit>

080090ce <_malloc_usable_size_r>:
 80090ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d2:	1f18      	subs	r0, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	bfbc      	itt	lt
 80090d8:	580b      	ldrlt	r3, [r1, r0]
 80090da:	18c0      	addlt	r0, r0, r3
 80090dc:	4770      	bx	lr

080090de <_raise_r>:
 80090de:	291f      	cmp	r1, #31
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4605      	mov	r5, r0
 80090e4:	460c      	mov	r4, r1
 80090e6:	d904      	bls.n	80090f2 <_raise_r+0x14>
 80090e8:	2316      	movs	r3, #22
 80090ea:	6003      	str	r3, [r0, #0]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090f4:	b112      	cbz	r2, 80090fc <_raise_r+0x1e>
 80090f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090fa:	b94b      	cbnz	r3, 8009110 <_raise_r+0x32>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 f831 	bl	8009164 <_getpid_r>
 8009102:	4622      	mov	r2, r4
 8009104:	4601      	mov	r1, r0
 8009106:	4628      	mov	r0, r5
 8009108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800910c:	f000 b818 	b.w	8009140 <_kill_r>
 8009110:	2b01      	cmp	r3, #1
 8009112:	d00a      	beq.n	800912a <_raise_r+0x4c>
 8009114:	1c59      	adds	r1, r3, #1
 8009116:	d103      	bne.n	8009120 <_raise_r+0x42>
 8009118:	2316      	movs	r3, #22
 800911a:	6003      	str	r3, [r0, #0]
 800911c:	2001      	movs	r0, #1
 800911e:	e7e7      	b.n	80090f0 <_raise_r+0x12>
 8009120:	2100      	movs	r1, #0
 8009122:	4620      	mov	r0, r4
 8009124:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009128:	4798      	blx	r3
 800912a:	2000      	movs	r0, #0
 800912c:	e7e0      	b.n	80090f0 <_raise_r+0x12>
	...

08009130 <raise>:
 8009130:	4b02      	ldr	r3, [pc, #8]	@ (800913c <raise+0xc>)
 8009132:	4601      	mov	r1, r0
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f7ff bfd2 	b.w	80090de <_raise_r>
 800913a:	bf00      	nop
 800913c:	20000020 	.word	0x20000020

08009140 <_kill_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	2300      	movs	r3, #0
 8009144:	4d06      	ldr	r5, [pc, #24]	@ (8009160 <_kill_r+0x20>)
 8009146:	4604      	mov	r4, r0
 8009148:	4608      	mov	r0, r1
 800914a:	4611      	mov	r1, r2
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	f7f8 fd96 	bl	8001c7e <_kill>
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	d102      	bne.n	800915c <_kill_r+0x1c>
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	b103      	cbz	r3, 800915c <_kill_r+0x1c>
 800915a:	6023      	str	r3, [r4, #0]
 800915c:	bd38      	pop	{r3, r4, r5, pc}
 800915e:	bf00      	nop
 8009160:	20000420 	.word	0x20000420

08009164 <_getpid_r>:
 8009164:	f7f8 bd84 	b.w	8001c70 <_getpid>

08009168 <_init>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr

08009174 <_fini>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr
