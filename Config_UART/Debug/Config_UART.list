
Config_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  080030b0  080030b0  000040b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b58  08003b58  00005088  2**0
                  CONTENTS
  4 .ARM          00000008  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b60  08003b60  00005088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b64  08003b64  00004b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003b68  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000088  08003bf0  00005088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003bf0  00005378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f2a  00000000  00000000  000050b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001601  00000000  00000000  00009fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0000b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000460  00000000  00000000  0000bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b82c  00000000  00000000  0000c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c29  00000000  00000000  0001785c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00042b4c  00000000  00000000  0001e485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060fd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d40  00000000  00000000  00061014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00062d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	08003098 	.word	0x08003098

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	08003098 	.word	0x08003098

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <SystemInit+0x5c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <SystemInit+0x5c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <SystemInit+0x5c>)
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4911      	ldr	r1, [pc, #68]	@ (8000b04 <SystemInit+0x5c>)
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <SystemInit+0x60>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <SystemInit+0x5c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <SystemInit+0x5c>)
 8000aca:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <SystemInit+0x5c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <SystemInit+0x5c>)
 8000ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ade:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <SystemInit+0x5c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <SystemInit+0x5c>)
 8000ae6:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000aea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <SystemInit+0x5c>)
 8000aee:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8000af2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000af4:	f000 f80c 	bl	8000b10 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <SystemInit+0x64>)
 8000afa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000afe:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	f8ff0000 	.word	0xf8ff0000
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000b14:	f000 f802 	bl	8000b1c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a39      	ldr	r2, [pc, #228]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b36:	4b37      	ldr	r3, [pc, #220]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <SetSysClockTo72+0x38>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000b52:	d1f0      	bne.n	8000b36 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b54:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b60:	2301      	movs	r3, #1
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	e001      	b.n	8000b6a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d14b      	bne.n	8000c08 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000b70:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <SetSysClockTo72+0xfc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a28      	ldr	r2, [pc, #160]	@ (8000c18 <SetSysClockTo72+0xfc>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000b7c:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <SetSysClockTo72+0xfc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <SetSysClockTo72+0xfc>)
 8000b82:	f023 0307 	bic.w	r3, r3, #7
 8000b86:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <SetSysClockTo72+0xfc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <SetSysClockTo72+0xfc>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000b96:	4a1f      	ldr	r2, [pc, #124]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bb6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8000bba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a14      	ldr	r2, [pc, #80]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bc2:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000bc6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a11      	ldr	r2, [pc, #68]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bd2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000bd4:	bf00      	nop
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f9      	beq.n	8000bd6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000be8:	f023 0303 	bic.w	r3, r3, #3
 8000bec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000bfa:	bf00      	nop
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <SetSysClockTo72+0xf8>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d1f9      	bne.n	8000bfc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40022000 	.word	0x40022000

08000c1c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <EXTI_GetFlagStatus+0x30>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40010400 	.word	0x40010400

08000c50 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000c58:	4a03      	ldr	r2, [pc, #12]	@ (8000c68 <EXTI_ClearITPendingBit+0x18>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6153      	str	r3, [r2, #20]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40010400 	.word	0x40010400

08000c6c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	78db      	ldrb	r3, [r3, #3]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	78db      	ldrb	r3, [r3, #3]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d044      	beq.n	8000d44 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	e038      	b.n	8000d38 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d126      	bne.n	8000d32 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000cea:	220f      	movs	r2, #15
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	78db      	ldrb	r3, [r3, #3]
 8000d10:	2b28      	cmp	r3, #40	@ 0x28
 8000d12:	d105      	bne.n	8000d20 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000d14:	2201      	movs	r2, #1
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	e008      	b.n	8000d32 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	78db      	ldrb	r3, [r3, #3]
 8000d24:	2b48      	cmp	r3, #72	@ 0x48
 8000d26:	d104      	bne.n	8000d32 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3301      	adds	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2b07      	cmp	r3, #7
 8000d3c:	d9c3      	bls.n	8000cc6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	2bff      	cmp	r3, #255	@ 0xff
 8000d4a:	d946      	bls.n	8000dda <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	e03a      	b.n	8000dce <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d127      	bne.n	8000dc8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000d7e:	220f      	movs	r2, #15
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	2b28      	cmp	r3, #40	@ 0x28
 8000da6:	d105      	bne.n	8000db4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	3308      	adds	r3, #8
 8000dac:	2201      	movs	r2, #1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	78db      	ldrb	r3, [r3, #3]
 8000db8:	2b48      	cmp	r3, #72	@ 0x48
 8000dba:	d105      	bne.n	8000dc8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	d9c1      	bls.n	8000d58 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	605a      	str	r2, [r3, #4]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e001      	b.n	8000e0a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	611a      	str	r2, [r3, #16]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	615a      	str	r2, [r3, #20]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
	...

08000e50 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000e68:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d011      	beq.n	8000e9c <RCC_GetClocksFreq+0x4c>
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d83a      	bhi.n	8000ef4 <RCC_GetClocksFreq+0xa4>
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <RCC_GetClocksFreq+0x3c>
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d004      	beq.n	8000e94 <RCC_GetClocksFreq+0x44>
 8000e8a:	e033      	b.n	8000ef4 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a47      	ldr	r2, [pc, #284]	@ (8000fac <RCC_GetClocksFreq+0x15c>)
 8000e90:	601a      	str	r2, [r3, #0]
      break;
 8000e92:	e033      	b.n	8000efc <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a45      	ldr	r2, [pc, #276]	@ (8000fac <RCC_GetClocksFreq+0x15c>)
 8000e98:	601a      	str	r2, [r3, #0]
      break;
 8000e9a:	e02f      	b.n	8000efc <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000e9c:	4b42      	ldr	r3, [pc, #264]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000ea4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000ea6:	4b40      	ldr	r3, [pc, #256]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eae:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb0 <RCC_GetClocksFreq+0x160>)
 8000ec2:	fb03 f202 	mul.w	r2, r3, r2
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000eca:	e017      	b.n	8000efc <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000ecc:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4a35      	ldr	r2, [pc, #212]	@ (8000fb0 <RCC_GetClocksFreq+0x160>)
 8000edc:	fb03 f202 	mul.w	r2, r3, r2
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]
      break;
 8000ee4:	e00a      	b.n	8000efc <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <RCC_GetClocksFreq+0x15c>)
 8000eea:	fb03 f202 	mul.w	r2, r3, r2
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
      break;
 8000ef2:	e003      	b.n	8000efc <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <RCC_GetClocksFreq+0x15c>)
 8000ef8:	601a      	str	r2, [r3, #0]
      break;
 8000efa:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f04:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000f0c:	4a29      	ldr	r2, [pc, #164]	@ (8000fb4 <RCC_GetClocksFreq+0x164>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	40da      	lsrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000f2c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000f34:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb4 <RCC_GetClocksFreq+0x164>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	40da      	lsrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000f54:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	0adb      	lsrs	r3, r3, #11
 8000f5a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000f5c:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <RCC_GetClocksFreq+0x164>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	40da      	lsrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <RCC_GetClocksFreq+0x158>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	0b9b      	lsrs	r3, r3, #14
 8000f82:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000f84:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <RCC_GetClocksFreq+0x168>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	611a      	str	r2, [r3, #16]
}
 8000f9e:	bf00      	nop
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	007a1200 	.word	0x007a1200
 8000fb0:	003d0900 	.word	0x003d0900
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000010 	.word	0x20000010

08000fbc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <RCC_AHBPeriphClockCmd+0x38>)
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <RCC_AHBPeriphClockCmd+0x38>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000fda:	e006      	b.n	8000fea <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <RCC_AHBPeriphClockCmd+0x38>)
 8000fde:	695a      	ldr	r2, [r3, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4903      	ldr	r1, [pc, #12]	@ (8000ff4 <RCC_AHBPeriphClockCmd+0x38>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	614b      	str	r3, [r1, #20]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <RCC_APB2PeriphClockCmd+0x38>)
 800100c:	699a      	ldr	r2, [r3, #24]
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <RCC_APB2PeriphClockCmd+0x38>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4313      	orrs	r3, r2
 8001014:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001016:	e006      	b.n	8001026 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <RCC_APB2PeriphClockCmd+0x38>)
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	43db      	mvns	r3, r3
 8001020:	4903      	ldr	r1, [pc, #12]	@ (8001030 <RCC_APB2PeriphClockCmd+0x38>)
 8001022:	4013      	ands	r3, r2
 8001024:	618b      	str	r3, [r1, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000

08001034 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <RCC_APB1PeriphClockCmd+0x38>)
 8001048:	69da      	ldr	r2, [r3, #28]
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <RCC_APB1PeriphClockCmd+0x38>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4313      	orrs	r3, r2
 8001050:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001052:	e006      	b.n	8001062 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <RCC_APB1PeriphClockCmd+0x38>)
 8001056:	69da      	ldr	r2, [r3, #28]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	43db      	mvns	r3, r3
 800105c:	4903      	ldr	r1, [pc, #12]	@ (800106c <RCC_APB1PeriphClockCmd+0x38>)
 800105e:	4013      	ands	r3, r2
 8001060:	61cb      	str	r3, [r1, #28]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000

08001070 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 800108a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	885b      	ldrh	r3, [r3, #2]
 8001094:	4313      	orrs	r3, r2
 8001096:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800109c:	4313      	orrs	r3, r2
 800109e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010bc:	4313      	orrs	r3, r2
 80010be:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	89fb      	ldrh	r3, [r7, #14]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	89fa      	ldrh	r2, [r7, #14]
 80010d2:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	8b9b      	ldrh	r3, [r3, #28]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	8a1a      	ldrh	r2, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	821a      	strh	r2, [r3, #16]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001118:	e007      	b.n	800112a <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001124:	b29a      	uxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	801a      	strh	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	819a      	strh	r2, [r3, #12]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	899b      	ldrh	r3, [r3, #12]
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	891b      	ldrh	r3, [r3, #8]
 800117c:	b29a      	uxth	r2, r3
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	4013      	ands	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
	...

080011a0 <LCD_WR_REG>:
 * @param	Command value to be written
 * @retval  None
*/
static
void LCD_WR_REG(uint8_t data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	LCD_SPI_CS_RESET;					//LCD_CS=0
 80011aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ae:	480a      	ldr	r0, [pc, #40]	@ (80011d8 <LCD_WR_REG+0x38>)
 80011b0:	f7ff fe3f 	bl	8000e32 <GPIO_ResetBits>
	LCD_SPI_RS_RESET;
 80011b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <LCD_WR_REG+0x3c>)
 80011ba:	f7ff fe3a 	bl	8000e32 <GPIO_ResetBits>
	LCDSPI_WriteByte(data);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f861 	bl	8001288 <LCDSPI_WriteByte>
	LCD_SPI_CS_SET;						//LCD_CS=1
 80011c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ca:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <LCD_WR_REG+0x38>)
 80011cc:	f7ff fe23 	bl	8000e16 <GPIO_SetBits>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	40010800 	.word	0x40010800

080011e0 <LCD_WR_DATA>:
 * @param	data value to be written
 * @retval  None
*/
static
void LCD_WR_DATA(uint16_t data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
	LCD_SPI_CS_RESET;					//LCD_CS=0
 80011ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ee:	480e      	ldr	r0, [pc, #56]	@ (8001228 <LCD_WR_DATA+0x48>)
 80011f0:	f7ff fe1f 	bl	8000e32 <GPIO_ResetBits>
	LCD_SPI_RS_SET;
 80011f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <LCD_WR_DATA+0x4c>)
 80011fa:	f7ff fe0c 	bl	8000e16 <GPIO_SetBits>
	LCDSPI_WriteByte(data>>8);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	b29b      	uxth	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f83e 	bl	8001288 <LCDSPI_WriteByte>
	LCDSPI_WriteByte(data);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f839 	bl	8001288 <LCDSPI_WriteByte>
	LCD_SPI_CS_SET;						//LCD_CS=1
 8001216:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800121a:	4803      	ldr	r0, [pc, #12]	@ (8001228 <LCD_WR_DATA+0x48>)
 800121c:	f7ff fdfb 	bl	8000e16 <GPIO_SetBits>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40010800 	.word	0x40010800

08001230 <LCD_WR_DATA8>:
 * @param	data value to be written
 * @retval  None
*/
static
void LCD_WR_DATA8(uint8_t data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	LCD_SPI_CS_RESET;					//LCD_CS=0
 800123a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800123e:	480a      	ldr	r0, [pc, #40]	@ (8001268 <LCD_WR_DATA8+0x38>)
 8001240:	f7ff fdf7 	bl	8000e32 <GPIO_ResetBits>
	LCD_SPI_RS_SET;
 8001244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001248:	4808      	ldr	r0, [pc, #32]	@ (800126c <LCD_WR_DATA8+0x3c>)
 800124a:	f7ff fde4 	bl	8000e16 <GPIO_SetBits>
	LCDSPI_WriteByte(data);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f819 	bl	8001288 <LCDSPI_WriteByte>
	LCD_SPI_CS_SET;						//LCD_CS=1
 8001256:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800125a:	4803      	ldr	r0, [pc, #12]	@ (8001268 <LCD_WR_DATA8+0x38>)
 800125c:	f7ff fddb 	bl	8000e16 <GPIO_SetBits>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010c00 	.word	0x40010c00
 800126c:	40010800 	.word	0x40010800

08001270 <LCD_WriteRAM_Prepare>:
 * @param	None
 * @retval	None
*/
static
void LCD_WriteRAM_Prepare(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <LCD_WriteRAM_Prepare+0x14>)
 8001276:	88db      	ldrh	r3, [r3, #6]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff90 	bl	80011a0 <LCD_WR_REG>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200000a4 	.word	0x200000a4

08001288 <LCDSPI_WriteByte>:
 * @retval	None
*/
static
uint8_t LCDSPI_WriteByte(
		uint8_t data
) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	SPI_I2S_SendData(LCD_SPI, data);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4619      	mov	r1, r3
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <LCDSPI_WriteByte+0x38>)
 800129a:	f7ff ff4b 	bl	8001134 <SPI_I2S_SendData>
	while (SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) == SET) {
 800129e:	bf00      	nop
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <LCDSPI_WriteByte+0x38>)
 80012a4:	f7ff ff60 	bl	8001168 <SPI_I2S_GetFlagStatus>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d0f8      	beq.n	80012a0 <LCDSPI_WriteByte+0x18>
	}
	return SPI_I2S_ReceiveData(LCD_SPI);
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <LCDSPI_WriteByte+0x38>)
 80012b0:	f7ff ff4e 	bl	8001150 <SPI_I2S_ReceiveData>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2db      	uxtb	r3, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40003800 	.word	0x40003800

080012c4 <LCD_SetCursor>:
			Ypos: 	the y coordinate of the pixel
 * @retval	None
*/
static
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	80fb      	strh	r3, [r7, #6]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	88b9      	ldrh	r1, [r7, #4]
 80012da:	88f8      	ldrh	r0, [r7, #6]
 80012dc:	f000 f890 	bl	8001400 <LCD_SetWindows>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_draw_circle_8>:
static
void _draw_circle_8(
		int xc, int yc,
		int x, int y,
		uint16_t color
) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
	LCD_DrawPoint(xc + x, yc + y, color);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b298      	uxth	r0, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b29a      	uxth	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	8b3a      	ldrh	r2, [r7, #24]
 8001310:	4619      	mov	r1, r3
 8001312:	f000 f8b9 	bl	8001488 <LCD_DrawPoint>
	LCD_DrawPoint(xc - x, yc + y, color);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	b29b      	uxth	r3, r3
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b298      	uxth	r0, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	b29a      	uxth	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4413      	add	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	8b3a      	ldrh	r2, [r7, #24]
 8001330:	4619      	mov	r1, r3
 8001332:	f000 f8a9 	bl	8001488 <LCD_DrawPoint>
	LCD_DrawPoint(xc + x, yc - y, color);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	b298      	uxth	r0, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	b29a      	uxth	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	8b3a      	ldrh	r2, [r7, #24]
 8001350:	4619      	mov	r1, r3
 8001352:	f000 f899 	bl	8001488 <LCD_DrawPoint>
	LCD_DrawPoint(xc - x, yc - y, color);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b29b      	uxth	r3, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b298      	uxth	r0, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	b29a      	uxth	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	b29b      	uxth	r3, r3
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	4619      	mov	r1, r3
 8001372:	f000 f889 	bl	8001488 <LCD_DrawPoint>
	LCD_DrawPoint(xc + y, yc + x, color);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	b29a      	uxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b298      	uxth	r0, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	8b3a      	ldrh	r2, [r7, #24]
 8001390:	4619      	mov	r1, r3
 8001392:	f000 f879 	bl	8001488 <LCD_DrawPoint>
	LCD_DrawPoint(xc - y, yc + x, color);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	b29a      	uxth	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b298      	uxth	r0, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	8b3a      	ldrh	r2, [r7, #24]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f000 f869 	bl	8001488 <LCD_DrawPoint>
	LCD_DrawPoint(xc + y, yc - x, color);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b298      	uxth	r0, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	8b3a      	ldrh	r2, [r7, #24]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f000 f859 	bl	8001488 <LCD_DrawPoint>
	LCD_DrawPoint(xc - y, yc - x, color);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b298      	uxth	r0, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	8b3a      	ldrh	r2, [r7, #24]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f000 f849 	bl	8001488 <LCD_DrawPoint>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <LCD_SetWindows>:
*/
static
void LCD_SetWindows(
		uint16_t xStar, uint16_t yStar,
		uint16_t xEnd ,uint16_t yEnd
) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	4603      	mov	r3, r0
 8001414:	80bb      	strh	r3, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	807b      	strh	r3, [r7, #2]
 800141a:	4613      	mov	r3, r2
 800141c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <LCD_SetWindows+0x84>)
 8001420:	891b      	ldrh	r3, [r3, #8]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff febb 	bl	80011a0 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff ff00 	bl	8001230 <LCD_WR_DATA8>
	LCD_WR_DATA8(xStar);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fefb 	bl	8001230 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fef8 	bl	8001230 <LCD_WR_DATA8>
	LCD_WR_DATA8(xEnd);
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fef3 	bl	8001230 <LCD_WR_DATA8>

	LCD_WR_REG(lcddev.setycmd);
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <LCD_SetWindows+0x84>)
 800144c:	895b      	ldrh	r3, [r3, #10]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fea5 	bl	80011a0 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff feea 	bl	8001230 <LCD_WR_DATA8>
	LCD_WR_DATA8(yStar);
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fee5 	bl	8001230 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff fee2 	bl	8001230 <LCD_WR_DATA8>
	LCD_WR_DATA8(yEnd);
 800146c:	883b      	ldrh	r3, [r7, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fedd 	bl	8001230 <LCD_WR_DATA8>

	LCD_WriteRAM_Prepare();
 8001476:	f7ff fefb 	bl	8001270 <LCD_WriteRAM_Prepare>
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}
 8001482:	bf00      	nop
 8001484:	200000a4 	.word	0x200000a4

08001488 <LCD_DrawPoint>:
 * @retval	None
*/
void LCD_DrawPoint(
		uint16_t x, uint16_t y,
		uint16_t color
) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
 8001492:	460b      	mov	r3, r1
 8001494:	80bb      	strh	r3, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);
 800149a:	88ba      	ldrh	r2, [r7, #4]
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff0f 	bl	80012c4 <LCD_SetCursor>
	LCD_WR_DATA(color);
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe99 	bl	80011e0 <LCD_WR_DATA>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <LCD_Circle>:
 */
void LCD_Circle(
    int xc, int yc,
    uint16_t color,
    int r, int fill
) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b08a      	sub	sp, #40	@ 0x28
 80014ba:	af02      	add	r7, sp, #8
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]
    int x = 0, y = r, yi, d;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	61bb      	str	r3, [r7, #24]

    d = 3 - 2 * r;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	f1c3 0303 	rsb	r3, r3, #3
 80014d6:	613b      	str	r3, [r7, #16]

    // Draw the circle with or without filling based on the fill flag
    if (fill) {
 80014d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d04f      	beq.n	800157e <LCD_Circle+0xc8>
        // Fill the circle
        while (x <= y) {
 80014de:	e029      	b.n	8001534 <LCD_Circle+0x7e>
            for (yi = x; yi <= y; yi++) {
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e00a      	b.n	80014fc <LCD_Circle+0x46>
                _draw_circle_8(xc, yc, x, yi, color); // Draw points in eight octants
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fef9 	bl	80012e8 <_draw_circle_8>
            for (yi = x; yi <= y; yi++) {
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	429a      	cmp	r2, r3
 8001502:	ddf0      	ble.n	80014e6 <LCD_Circle+0x30>
            }
            // Update decision parameter
            if (d < 0) {
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	da06      	bge.n	8001518 <LCD_Circle+0x62>
                d = d + 4 * x + 6;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4413      	add	r3, r2
 8001512:	3306      	adds	r3, #6
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	e00a      	b.n	800152e <LCD_Circle+0x78>
            } else {
                d = d + 4 * (x - y) + 10;
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	009a      	lsls	r2, r3, #2
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4413      	add	r3, r2
 8001524:	330a      	adds	r3, #10
 8001526:	613b      	str	r3, [r7, #16]
                y--;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	3b01      	subs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
            }
            x++;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3301      	adds	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
        while (x <= y) {
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	429a      	cmp	r2, r3
 800153a:	ddd1      	ble.n	80014e0 <LCD_Circle+0x2a>
                y--;
            }
            x++;
        }
    }
}
 800153c:	e023      	b.n	8001586 <LCD_Circle+0xd0>
            _draw_circle_8(xc, yc, x, y, color); // Draw points in eight octants
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff fecd 	bl	80012e8 <_draw_circle_8>
            if (d < 0) {
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da06      	bge.n	8001562 <LCD_Circle+0xac>
                d = d + 4 * x + 6;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	009a      	lsls	r2, r3, #2
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	3306      	adds	r3, #6
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	e00a      	b.n	8001578 <LCD_Circle+0xc2>
                d = d + 4 * (x - y) + 10;
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	009a      	lsls	r2, r3, #2
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4413      	add	r3, r2
 800156e:	330a      	adds	r3, #10
 8001570:	613b      	str	r3, [r7, #16]
                y--;
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	3b01      	subs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
            x++;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	3301      	adds	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
        while (x <= y) {
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	429a      	cmp	r2, r3
 8001584:	dddb      	ble.n	800153e <LCD_Circle+0x88>
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <LCD_ShowString>:
*/
void LCD_ShowString(
    uint16_t x, uint16_t y,
    uint16_t color, uint16_t background,
    uint8_t *text, uint8_t size, uint8_t mode
) {
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	4604      	mov	r4, r0
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	80fb      	strh	r3, [r7, #6]
 80015a2:	4603      	mov	r3, r0
 80015a4:	80bb      	strh	r3, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	807b      	strh	r3, [r7, #2]
 80015aa:	4613      	mov	r3, r2
 80015ac:	803b      	strh	r3, [r7, #0]
	uint16_t colortemp=POINT_COLOR;
 80015ae:	4b6b      	ldr	r3, [pc, #428]	@ (800175c <LCD_ShowString+0x1cc>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	823b      	strh	r3, [r7, #16]
    while (*text != '\0') {
 80015b4:	e0c8      	b.n	8001748 <LCD_ShowString+0x1b8>
        if (*text >= ' ' && *text <= '~') {
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	f240 80c1 	bls.w	8001742 <LCD_ShowString+0x1b2>
 80015c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80015c6:	f200 80bc 	bhi.w	8001742 <LCD_ShowString+0x1b2>
            // Display printable ASCII characters
            uint8_t num = *text - ' '; // Convert to index suitable for font array
 80015ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3b20      	subs	r3, #32
 80015d0:	73fb      	strb	r3, [r7, #15]
            LCD_SetWindows(x, y, x + size / 2 - 1, y + size - 1);
 80015d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	4413      	add	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29c      	uxth	r4, r3
 80015e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	88b9      	ldrh	r1, [r7, #4]
 80015f8:	88f8      	ldrh	r0, [r7, #6]
 80015fa:	4622      	mov	r2, r4
 80015fc:	f7ff ff00 	bl	8001400 <LCD_SetWindows>

            if (!mode) {
 8001600:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001604:	2b00      	cmp	r3, #0
 8001606:	d13d      	bne.n	8001684 <LCD_ShowString+0xf4>
                for (uint8_t pos = 0; pos < size; pos++) {
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
 800160c:	e034      	b.n	8001678 <LCD_ShowString+0xe8>
                    uint8_t temp = (size == 12) ? asc2_1206[num][pos] : asc2_1608[num][pos];
 800160e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001612:	2b0c      	cmp	r3, #12
 8001614:	d10a      	bne.n	800162c <LCD_ShowString+0x9c>
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	7df9      	ldrb	r1, [r7, #23]
 800161a:	4851      	ldr	r0, [pc, #324]	@ (8001760 <LCD_ShowString+0x1d0>)
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4403      	add	r3, r0
 8001626:	440b      	add	r3, r1
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	e006      	b.n	800163a <LCD_ShowString+0xaa>
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	494c      	ldr	r1, [pc, #304]	@ (8001764 <LCD_ShowString+0x1d4>)
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	440a      	add	r2, r1
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	75bb      	strb	r3, [r7, #22]
                    for (uint8_t t = 0; t < size / 2; t++) {
 800163c:	2300      	movs	r3, #0
 800163e:	757b      	strb	r3, [r7, #21]
 8001640:	e010      	b.n	8001664 <LCD_ShowString+0xd4>
                        LCD_WR_DATA((temp & 0x01) ? color : background);
 8001642:	7dbb      	ldrb	r3, [r7, #22]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <LCD_ShowString+0xc0>
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	e000      	b.n	8001652 <LCD_ShowString+0xc2>
 8001650:	883b      	ldrh	r3, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fdc4 	bl	80011e0 <LCD_WR_DATA>
                        temp >>= 1;
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	75bb      	strb	r3, [r7, #22]
                    for (uint8_t t = 0; t < size / 2; t++) {
 800165e:	7d7b      	ldrb	r3, [r7, #21]
 8001660:	3301      	adds	r3, #1
 8001662:	757b      	strb	r3, [r7, #21]
 8001664:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	7d7a      	ldrb	r2, [r7, #21]
 800166e:	429a      	cmp	r2, r3
 8001670:	d3e7      	bcc.n	8001642 <LCD_ShowString+0xb2>
                for (uint8_t pos = 0; pos < size; pos++) {
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	3301      	adds	r3, #1
 8001676:	75fb      	strb	r3, [r7, #23]
 8001678:	7dfa      	ldrb	r2, [r7, #23]
 800167a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800167e:	429a      	cmp	r2, r3
 8001680:	d3c5      	bcc.n	800160e <LCD_ShowString+0x7e>
 8001682:	e047      	b.n	8001714 <LCD_ShowString+0x184>
                    }
                }
            } else {
                for (uint8_t pos = 0; pos < size; pos++) {
 8001684:	2300      	movs	r3, #0
 8001686:	753b      	strb	r3, [r7, #20]
 8001688:	e03f      	b.n	800170a <LCD_ShowString+0x17a>
                    uint8_t temp = (size == 12) ? asc2_1206[num][pos] : asc2_1608[num][pos];
 800168a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d10a      	bne.n	80016a8 <LCD_ShowString+0x118>
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	7d39      	ldrb	r1, [r7, #20]
 8001696:	4832      	ldr	r0, [pc, #200]	@ (8001760 <LCD_ShowString+0x1d0>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4403      	add	r3, r0
 80016a2:	440b      	add	r3, r1
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	e006      	b.n	80016b6 <LCD_ShowString+0x126>
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	7d3b      	ldrb	r3, [r7, #20]
 80016ac:	492d      	ldr	r1, [pc, #180]	@ (8001764 <LCD_ShowString+0x1d4>)
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	440a      	add	r2, r1
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	74fb      	strb	r3, [r7, #19]
                    for (uint8_t t = 0; t < size / 2; t++) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	74bb      	strb	r3, [r7, #18]
 80016bc:	e01b      	b.n	80016f6 <LCD_ShowString+0x166>
                        POINT_COLOR = color;
 80016be:	4a27      	ldr	r2, [pc, #156]	@ (800175c <LCD_ShowString+0x1cc>)
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	8013      	strh	r3, [r2, #0]
                        if (temp & 0x01) LCD_DrawPoint(x + t, y + pos, color);
 80016c4:	7cfb      	ldrb	r3, [r7, #19]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00d      	beq.n	80016ea <LCD_ShowString+0x15a>
 80016ce:	7cbb      	ldrb	r3, [r7, #18]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4413      	add	r3, r2
 80016d6:	b298      	uxth	r0, r3
 80016d8:	7d3b      	ldrb	r3, [r7, #20]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fecf 	bl	8001488 <LCD_DrawPoint>
                        temp >>= 1;
 80016ea:	7cfb      	ldrb	r3, [r7, #19]
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	74fb      	strb	r3, [r7, #19]
                    for (uint8_t t = 0; t < size / 2; t++) {
 80016f0:	7cbb      	ldrb	r3, [r7, #18]
 80016f2:	3301      	adds	r3, #1
 80016f4:	74bb      	strb	r3, [r7, #18]
 80016f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	7cba      	ldrb	r2, [r7, #18]
 8001700:	429a      	cmp	r2, r3
 8001702:	d3dc      	bcc.n	80016be <LCD_ShowString+0x12e>
                for (uint8_t pos = 0; pos < size; pos++) {
 8001704:	7d3b      	ldrb	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	753b      	strb	r3, [r7, #20]
 800170a:	7d3a      	ldrb	r2, [r7, #20]
 800170c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001710:	429a      	cmp	r2, r3
 8001712:	d3ba      	bcc.n	800168a <LCD_ShowString+0xfa>
                    }
                }
            }
            POINT_COLOR = colortemp;
 8001714:	4a11      	ldr	r2, [pc, #68]	@ (800175c <LCD_ShowString+0x1cc>)
 8001716:	8a3b      	ldrh	r3, [r7, #16]
 8001718:	8013      	strh	r3, [r2, #0]
            LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <LCD_ShowString+0x1d8>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <LCD_ShowString+0x1d8>)
 8001724:	885b      	ldrh	r3, [r3, #2]
 8001726:	3b01      	subs	r3, #1
 8001728:	b29b      	uxth	r3, r3
 800172a:	2100      	movs	r1, #0
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff fe67 	bl	8001400 <LCD_SetWindows>
            x += size / 2; // Adjust x position for the next character
 8001732:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4413      	add	r3, r2
 8001740:	80fb      	strh	r3, [r7, #6]
        }
        text++; // Move to the next character in the string
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	3301      	adds	r3, #1
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (*text != '\0') {
 8001748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f af32 	bne.w	80015b6 <LCD_ShowString+0x26>
    }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	200000b0 	.word	0x200000b0
 8001760:	080030c0 	.word	0x080030c0
 8001764:	08003534 	.word	0x08003534
 8001768:	200000a4 	.word	0x200000a4

0800176c <LCD_ShowCentredString>:
 * @retval	None
*/
void LCD_ShowCentredString(
    uint16_t color, uint16_t background,
    uint8_t *text, uint8_t size, uint8_t mode
) {
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b08b      	sub	sp, #44	@ 0x2c
 8001770:	af04      	add	r7, sp, #16
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	71fb      	strb	r3, [r7, #7]
    uint16_t len = strlen((const char *)text);
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f7fe fcf4 	bl	8000170 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	82fb      	strh	r3, [r7, #22]
    uint16_t x1 = (lcddev.width - len * size / 2) / 2;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <LCD_ShowCentredString+0x78>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	8afb      	ldrh	r3, [r7, #22]
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	0fda      	lsrs	r2, r3, #31
 800179c:	4413      	add	r3, r2
 800179e:	105b      	asrs	r3, r3, #1
 80017a0:	425b      	negs	r3, r3
 80017a2:	440b      	add	r3, r1
 80017a4:	0fda      	lsrs	r2, r3, #31
 80017a6:	4413      	add	r3, r2
 80017a8:	105b      	asrs	r3, r3, #1
 80017aa:	82bb      	strh	r3, [r7, #20]
    uint16_t y1 = (lcddev.height - size) / 2; // Calculate starting y-coordinate for vertical centering
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <LCD_ShowCentredString+0x78>)
 80017ae:	885b      	ldrh	r3, [r3, #2]
 80017b0:	461a      	mov	r2, r3
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	0fda      	lsrs	r2, r3, #31
 80017b8:	4413      	add	r3, r2
 80017ba:	105b      	asrs	r3, r3, #1
 80017bc:	827b      	strh	r3, [r7, #18]
    LCD_ShowString(x1, y1, color, background, text, size, mode);
 80017be:	89bc      	ldrh	r4, [r7, #12]
 80017c0:	89fa      	ldrh	r2, [r7, #14]
 80017c2:	8a79      	ldrh	r1, [r7, #18]
 80017c4:	8ab8      	ldrh	r0, [r7, #20]
 80017c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	4623      	mov	r3, r4
 80017d6:	f7ff fedb 	bl	8001590 <LCD_ShowString>
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000a4 	.word	0x200000a4

080017e8 <LCD_WR_REG>:
 * @param	Command value to be written
 * @retval  None
*/
static
void LCD_WR_REG(uint8_t data)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	LCD_SPI_CS_RESET;					//LCD_CS=0
 80017f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017f6:	480a      	ldr	r0, [pc, #40]	@ (8001820 <LCD_WR_REG+0x38>)
 80017f8:	f7ff fb1b 	bl	8000e32 <GPIO_ResetBits>
	LCD_SPI_RS_RESET;
 80017fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001800:	4808      	ldr	r0, [pc, #32]	@ (8001824 <LCD_WR_REG+0x3c>)
 8001802:	f7ff fb16 	bl	8000e32 <GPIO_ResetBits>
	LCDSPI_WriteByte(data);
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f8fb 	bl	8001a04 <LCDSPI_WriteByte>
	LCD_SPI_CS_SET;						//LCD_CS=1
 800180e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001812:	4803      	ldr	r0, [pc, #12]	@ (8001820 <LCD_WR_REG+0x38>)
 8001814:	f7ff faff 	bl	8000e16 <GPIO_SetBits>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40010c00 	.word	0x40010c00
 8001824:	40010800 	.word	0x40010800

08001828 <LCD_WR_DATA>:
 * @param	data value to be written
 * @retval  None
*/
static
void LCD_WR_DATA(uint16_t data)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	LCD_SPI_CS_RESET;					//LCD_CS=0
 8001832:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001836:	480e      	ldr	r0, [pc, #56]	@ (8001870 <LCD_WR_DATA+0x48>)
 8001838:	f7ff fafb 	bl	8000e32 <GPIO_ResetBits>
	LCD_SPI_RS_SET;
 800183c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001840:	480c      	ldr	r0, [pc, #48]	@ (8001874 <LCD_WR_DATA+0x4c>)
 8001842:	f7ff fae8 	bl	8000e16 <GPIO_SetBits>
	LCDSPI_WriteByte(data>>8);
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f8d8 	bl	8001a04 <LCDSPI_WriteByte>
	LCDSPI_WriteByte(data);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f8d3 	bl	8001a04 <LCDSPI_WriteByte>
	LCD_SPI_CS_SET;						//LCD_CS=1
 800185e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001862:	4803      	ldr	r0, [pc, #12]	@ (8001870 <LCD_WR_DATA+0x48>)
 8001864:	f7ff fad7 	bl	8000e16 <GPIO_SetBits>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40010800 	.word	0x40010800

08001878 <LCD_WR_DATA8>:
 * @param	data value to be written
 * @retval  None
*/
static
void LCD_WR_DATA8(uint8_t data)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	LCD_SPI_CS_RESET;					//LCD_CS=0
 8001882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001886:	480a      	ldr	r0, [pc, #40]	@ (80018b0 <LCD_WR_DATA8+0x38>)
 8001888:	f7ff fad3 	bl	8000e32 <GPIO_ResetBits>
	LCD_SPI_RS_SET;
 800188c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001890:	4808      	ldr	r0, [pc, #32]	@ (80018b4 <LCD_WR_DATA8+0x3c>)
 8001892:	f7ff fac0 	bl	8000e16 <GPIO_SetBits>
	LCDSPI_WriteByte(data);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f8b3 	bl	8001a04 <LCDSPI_WriteByte>
	LCD_SPI_CS_SET;						//LCD_CS=1
 800189e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a2:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <LCD_WR_DATA8+0x38>)
 80018a4:	f7ff fab7 	bl	8000e16 <GPIO_SetBits>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40010c00 	.word	0x40010c00
 80018b4:	40010800 	.word	0x40010800

080018b8 <LCD_WriteReg>:
            LCD_RegValue: Data to be written
 * @retval  None
*/
static
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff8c 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(LCD_RegValue);
 80018d0:	88bb      	ldrh	r3, [r7, #4]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ffcf 	bl	8001878 <LCD_WR_DATA8>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <LCD_WriteRAM_Prepare>:
 * @param	None
 * @retval	None
*/
static
void LCD_WriteRAM_Prepare(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <LCD_WriteRAM_Prepare+0x14>)
 80018ea:	88db      	ldrh	r3, [r3, #6]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff7a 	bl	80017e8 <LCD_WR_REG>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000a4 	.word	0x200000a4

080018fc <LCDGPIO_Config>:
 * @param	None
 * @retval	None
*/
static
void LCDGPIO_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 	GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(LCD_GPIO_RCC, ENABLE);
 8001902:	2101      	movs	r1, #1
 8001904:	2004      	movs	r0, #4
 8001906:	f7ff fb77 	bl	8000ff8 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(LCD_SPI_GPIO_RCC, ENABLE);
 800190a:	2101      	movs	r1, #1
 800190c:	2008      	movs	r0, #8
 800190e:	f7ff fb73 	bl	8000ff8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001912:	2310      	movs	r3, #16
 8001914:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001916:	2303      	movs	r3, #3
 8001918:	71bb      	strb	r3, [r7, #6]

	GPIO_InitStructure.GPIO_Pin = LCD_RST_PIN | LCD_AO_PIN | LCD_LED_PIN;
 800191a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800191e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(LCD_GPIO_PORT, &GPIO_InitStructure);
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4619      	mov	r1, r3
 8001924:	4809      	ldr	r0, [pc, #36]	@ (800194c <LCDGPIO_Config+0x50>)
 8001926:	f7ff f9a1 	bl	8000c6c <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LCD_CS_PIN;
 800192a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800192e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(LCD_SPI_PORT, &GPIO_InitStructure);
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4806      	ldr	r0, [pc, #24]	@ (8001950 <LCDGPIO_Config+0x54>)
 8001936:	f7ff f999 	bl	8000c6c <GPIO_Init>

	/* Turn on Led Background of LCD */
	GPIO_SetBits(LCD_GPIO_PORT, LCD_LED_PIN);
 800193a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800193e:	4803      	ldr	r0, [pc, #12]	@ (800194c <LCDGPIO_Config+0x50>)
 8001940:	f7ff fa69 	bl	8000e16 <GPIO_SetBits>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40010800 	.word	0x40010800
 8001950:	40010c00 	.word	0x40010c00

08001954 <LCDSPI_Config>:
 * @param  None
 * @retval None
 */
static
void LCDSPI_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 	GPIO_InitStructure;
	SPI_InitTypeDef 	SPI_InitStructure;

	/* Enable SCK, MOSI and NSS GPIO clocks */
	RCC_APB2PeriphClockCmd(LCD_SPI_GPIO_RCC, ENABLE);
 800195a:	2101      	movs	r1, #1
 800195c:	2008      	movs	r0, #8
 800195e:	f7ff fb4b 	bl	8000ff8 <RCC_APB2PeriphClockCmd>

	/* Enable the SPI periph */
	RCC_APB1PeriphClockCmd(LCD_SPI_RCC, ENABLE);
 8001962:	2101      	movs	r1, #1
 8001964:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001968:	f7ff fb64 	bl	8001034 <RCC_APB1PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800196c:	2101      	movs	r1, #1
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff fb24 	bl	8000fbc <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use For SPI */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001974:	2318      	movs	r3, #24
 8001976:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001978:	2303      	movs	r3, #3
 800197a:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Pin = LCD_SPI_GPIO_SCK | LCD_SPI_GPIO_MOSI;
 800197c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001980:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(LCD_SPI_PORT, &GPIO_InitStructure);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4811      	ldr	r0, [pc, #68]	@ (80019d0 <LCDSPI_Config+0x7c>)
 800198a:	f7ff f96f 	bl	8000c6c <GPIO_Init>

	/* Set to full duplex mode, separate MOSI lines */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800198e:	2300      	movs	r3, #0
 8001990:	803b      	strh	r3, [r7, #0]

	/* Transmit in master mode */
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001992:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001996:	807b      	strh	r3, [r7, #2]

	/* One packet of data is 8 bits wide */
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001998:	2300      	movs	r3, #0
 800199a:	80bb      	strh	r3, [r7, #4]

	/* Clock is high when idle */
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 800199c:	2302      	movs	r3, #2
 800199e:	80fb      	strh	r3, [r7, #6]

	/* Data sampled at second edge */
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80019a0:	2301      	movs	r3, #1
 80019a2:	813b      	strh	r3, [r7, #8]

	/* Set NSS us software */
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80019a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a8:	817b      	strh	r3, [r7, #10]

	/* SPI frequency is APB2 frequency / 1 */
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 80019aa:	2308      	movs	r3, #8
 80019ac:	81bb      	strh	r3, [r7, #12]

	/* Data is transmitted MSB first */
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80019ae:	2300      	movs	r3, #0
 80019b0:	81fb      	strh	r3, [r7, #14]

	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80019b2:	2307      	movs	r3, #7
 80019b4:	823b      	strh	r3, [r7, #16]

	SPI_Init(LCD_SPI, &SPI_InitStructure);
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <LCDSPI_Config+0x80>)
 80019bc:	f7ff fb58 	bl	8001070 <SPI_Init>

	/* Enable LCD_SPI */
	SPI_Cmd(LCD_SPI, ENABLE);
 80019c0:	2101      	movs	r1, #1
 80019c2:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <LCDSPI_Config+0x80>)
 80019c4:	f7ff fb97 	bl	80010f6 <SPI_Cmd>
}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	40003800 	.word	0x40003800

080019d8 <LCD_RESET>:
 * @param	None
 * @retval	None
*/
static
void LCD_RESET(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	LCD_SPI_RST_RESET;
 80019dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019e0:	4807      	ldr	r0, [pc, #28]	@ (8001a00 <LCD_RESET+0x28>)
 80019e2:	f7ff fa26 	bl	8000e32 <GPIO_ResetBits>
	delay_ms(100);
 80019e6:	2064      	movs	r0, #100	@ 0x64
 80019e8:	f000 fbad 	bl	8002146 <delay_ms>
	LCD_SPI_RST_SET;
 80019ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f0:	4803      	ldr	r0, [pc, #12]	@ (8001a00 <LCD_RESET+0x28>)
 80019f2:	f7ff fa10 	bl	8000e16 <GPIO_SetBits>
	delay_ms(50);
 80019f6:	2032      	movs	r0, #50	@ 0x32
 80019f8:	f000 fba5 	bl	8002146 <delay_ms>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010800 	.word	0x40010800

08001a04 <LCDSPI_WriteByte>:
 * @retval	None
*/
static
uint8_t LCDSPI_WriteByte(
		uint8_t data
) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	SPI_I2S_SendData(LCD_SPI, data);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <LCDSPI_WriteByte+0x38>)
 8001a16:	f7ff fb8d 	bl	8001134 <SPI_I2S_SendData>
	while (SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) == SET) {
 8001a1a:	bf00      	nop
 8001a1c:	2180      	movs	r1, #128	@ 0x80
 8001a1e:	4807      	ldr	r0, [pc, #28]	@ (8001a3c <LCDSPI_WriteByte+0x38>)
 8001a20:	f7ff fba2 	bl	8001168 <SPI_I2S_GetFlagStatus>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d0f8      	beq.n	8001a1c <LCDSPI_WriteByte+0x18>
	}
	return SPI_I2S_ReceiveData(LCD_SPI);
 8001a2a:	4804      	ldr	r0, [pc, #16]	@ (8001a3c <LCDSPI_WriteByte+0x38>)
 8001a2c:	f7ff fb90 	bl	8001150 <SPI_I2S_ReceiveData>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40003800 	.word	0x40003800

08001a40 <LCD_SetWindows>:
*/
static
void LCD_SetWindows(
		uint16_t xStar, uint16_t yStar,
		uint16_t xEnd ,uint16_t yEnd
) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4604      	mov	r4, r0
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	80fb      	strh	r3, [r7, #6]
 8001a52:	4603      	mov	r3, r0
 8001a54:	80bb      	strh	r3, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);
 8001a5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <LCD_SetWindows+0x84>)
 8001a60:	891b      	ldrh	r3, [r3, #8]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff febf 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff ff04 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(xStar);
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff feff 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fefc 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(xEnd);
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fef7 	bl	8001878 <LCD_WR_DATA8>

	LCD_WR_REG(lcddev.setycmd);
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <LCD_SetWindows+0x84>)
 8001a8c:	895b      	ldrh	r3, [r3, #10]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fea9 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff feee 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(yStar);
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fee9 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fee6 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(yEnd);
 8001aac:	883b      	ldrh	r3, [r7, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fee1 	bl	8001878 <LCD_WR_DATA8>

	LCD_WriteRAM_Prepare();
 8001ab6:	f7ff ff15 	bl	80018e4 <LCD_WriteRAM_Prepare>
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000a4 	.word	0x200000a4

08001ac8 <LCD_Init>:
 * @brief	Initialization LCD screen
 * @param	None
 * @retval	None
*/
void LCD_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	LCDSPI_Config();
 8001acc:	f7ff ff42 	bl	8001954 <LCDSPI_Config>
	LCDGPIO_Config();
 8001ad0:	f7ff ff14 	bl	80018fc <LCDGPIO_Config>
	LCD_RESET();
 8001ad4:	f7ff ff80 	bl	80019d8 <LCD_RESET>

	lcddev.width=128;
 8001ad8:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc4 <LCD_Init+0x1fc>)
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	801a      	strh	r2, [r3, #0]
	lcddev.height=160;
 8001ade:	4b79      	ldr	r3, [pc, #484]	@ (8001cc4 <LCD_Init+0x1fc>)
 8001ae0:	22a0      	movs	r2, #160	@ 0xa0
 8001ae2:	805a      	strh	r2, [r3, #2]
	lcddev.wramcmd=0X2C;
 8001ae4:	4b77      	ldr	r3, [pc, #476]	@ (8001cc4 <LCD_Init+0x1fc>)
 8001ae6:	222c      	movs	r2, #44	@ 0x2c
 8001ae8:	80da      	strh	r2, [r3, #6]
	lcddev.setxcmd=0X2A;
 8001aea:	4b76      	ldr	r3, [pc, #472]	@ (8001cc4 <LCD_Init+0x1fc>)
 8001aec:	222a      	movs	r2, #42	@ 0x2a
 8001aee:	811a      	strh	r2, [r3, #8]
	lcddev.setycmd=0X2B;
 8001af0:	4b74      	ldr	r3, [pc, #464]	@ (8001cc4 <LCD_Init+0x1fc>)
 8001af2:	222b      	movs	r2, #43	@ 0x2b
 8001af4:	815a      	strh	r2, [r3, #10]

	LCD_WR_REG(0x11); //Sleep out
 8001af6:	2011      	movs	r0, #17
 8001af8:	f7ff fe76 	bl	80017e8 <LCD_WR_REG>
	delay_ms(120); //Delay 120ms
 8001afc:	2078      	movs	r0, #120	@ 0x78
 8001afe:	f000 fb22 	bl	8002146 <delay_ms>
	//------------------------------------ST7735S Frame Rate-----------------------------------------//
	LCD_WR_REG(0xB1);
 8001b02:	20b1      	movs	r0, #177	@ 0xb1
 8001b04:	f7ff fe70 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8001b08:	2005      	movs	r0, #5
 8001b0a:	f7ff feb5 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b0e:	203c      	movs	r0, #60	@ 0x3c
 8001b10:	f7ff feb2 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b14:	203c      	movs	r0, #60	@ 0x3c
 8001b16:	f7ff feaf 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xB2);
 8001b1a:	20b2      	movs	r0, #178	@ 0xb2
 8001b1c:	f7ff fe64 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8001b20:	2005      	movs	r0, #5
 8001b22:	f7ff fea9 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b26:	203c      	movs	r0, #60	@ 0x3c
 8001b28:	f7ff fea6 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b2c:	203c      	movs	r0, #60	@ 0x3c
 8001b2e:	f7ff fea3 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xB3);
 8001b32:	20b3      	movs	r0, #179	@ 0xb3
 8001b34:	f7ff fe58 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8001b38:	2005      	movs	r0, #5
 8001b3a:	f7ff fe9d 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b3e:	203c      	movs	r0, #60	@ 0x3c
 8001b40:	f7ff fe9a 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b44:	203c      	movs	r0, #60	@ 0x3c
 8001b46:	f7ff fe97 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x05);
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	f7ff fe94 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b50:	203c      	movs	r0, #60	@ 0x3c
 8001b52:	f7ff fe91 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 8001b56:	203c      	movs	r0, #60	@ 0x3c
 8001b58:	f7ff fe8e 	bl	8001878 <LCD_WR_DATA8>
	//------------------------------------End ST7735S Frame Rate-----------------------------------------//
	LCD_WR_REG(0xB4); //Dot inversion
 8001b5c:	20b4      	movs	r0, #180	@ 0xb4
 8001b5e:	f7ff fe43 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x03);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f7ff fe88 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xC0);
 8001b68:	20c0      	movs	r0, #192	@ 0xc0
 8001b6a:	f7ff fe3d 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x28);
 8001b6e:	2028      	movs	r0, #40	@ 0x28
 8001b70:	f7ff fe82 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08);
 8001b74:	2008      	movs	r0, #8
 8001b76:	f7ff fe7f 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04);
 8001b7a:	2004      	movs	r0, #4
 8001b7c:	f7ff fe7c 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xC1);
 8001b80:	20c1      	movs	r0, #193	@ 0xc1
 8001b82:	f7ff fe31 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0XC0);
 8001b86:	20c0      	movs	r0, #192	@ 0xc0
 8001b88:	f7ff fe76 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xC2);
 8001b8c:	20c2      	movs	r0, #194	@ 0xc2
 8001b8e:	f7ff fe2b 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x0D);
 8001b92:	200d      	movs	r0, #13
 8001b94:	f7ff fe70 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fe6d 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xC3);
 8001b9e:	20c3      	movs	r0, #195	@ 0xc3
 8001ba0:	f7ff fe22 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x8D);
 8001ba4:	208d      	movs	r0, #141	@ 0x8d
 8001ba6:	f7ff fe67 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2A);
 8001baa:	202a      	movs	r0, #42	@ 0x2a
 8001bac:	f7ff fe64 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xC4);
 8001bb0:	20c4      	movs	r0, #196	@ 0xc4
 8001bb2:	f7ff fe19 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x8D);
 8001bb6:	208d      	movs	r0, #141	@ 0x8d
 8001bb8:	f7ff fe5e 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xEE);
 8001bbc:	20ee      	movs	r0, #238	@ 0xee
 8001bbe:	f7ff fe5b 	bl	8001878 <LCD_WR_DATA8>
	//---------------------------------End ST7735S Power Sequence-------------------------------------//
	LCD_WR_REG(0xC5); //VCOM
 8001bc2:	20c5      	movs	r0, #197	@ 0xc5
 8001bc4:	f7ff fe10 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x1A);
 8001bc8:	201a      	movs	r0, #26
 8001bca:	f7ff fe55 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0x36); //MX, MY, RGB mode
 8001bce:	2036      	movs	r0, #54	@ 0x36
 8001bd0:	f7ff fe0a 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0xC0);
 8001bd4:	20c0      	movs	r0, #192	@ 0xc0
 8001bd6:	f7ff fe4f 	bl	8001878 <LCD_WR_DATA8>
	//------------------------------------ST7735S Gamma Sequence-----------------------------------------//
	LCD_WR_REG(0xE0);
 8001bda:	20e0      	movs	r0, #224	@ 0xe0
 8001bdc:	f7ff fe04 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x04);
 8001be0:	2004      	movs	r0, #4
 8001be2:	f7ff fe49 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x22);
 8001be6:	2022      	movs	r0, #34	@ 0x22
 8001be8:	f7ff fe46 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 8001bec:	2007      	movs	r0, #7
 8001bee:	f7ff fe43 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0A);
 8001bf2:	200a      	movs	r0, #10
 8001bf4:	f7ff fe40 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2E);
 8001bf8:	202e      	movs	r0, #46	@ 0x2e
 8001bfa:	f7ff fe3d 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x30);
 8001bfe:	2030      	movs	r0, #48	@ 0x30
 8001c00:	f7ff fe3a 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x25);
 8001c04:	2025      	movs	r0, #37	@ 0x25
 8001c06:	f7ff fe37 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2A);
 8001c0a:	202a      	movs	r0, #42	@ 0x2a
 8001c0c:	f7ff fe34 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x28);
 8001c10:	2028      	movs	r0, #40	@ 0x28
 8001c12:	f7ff fe31 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x26);
 8001c16:	2026      	movs	r0, #38	@ 0x26
 8001c18:	f7ff fe2e 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2E);
 8001c1c:	202e      	movs	r0, #46	@ 0x2e
 8001c1e:	f7ff fe2b 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3A);
 8001c22:	203a      	movs	r0, #58	@ 0x3a
 8001c24:	f7ff fe28 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff fe25 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x01);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff fe22 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x03);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f7ff fe1f 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13);
 8001c3a:	2013      	movs	r0, #19
 8001c3c:	f7ff fe1c 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0xE1);
 8001c40:	20e1      	movs	r0, #225	@ 0xe1
 8001c42:	f7ff fdd1 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x04);
 8001c46:	2004      	movs	r0, #4
 8001c48:	f7ff fe16 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x16);
 8001c4c:	2016      	movs	r0, #22
 8001c4e:	f7ff fe13 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x06);
 8001c52:	2006      	movs	r0, #6
 8001c54:	f7ff fe10 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0D);
 8001c58:	200d      	movs	r0, #13
 8001c5a:	f7ff fe0d 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2D);
 8001c5e:	202d      	movs	r0, #45	@ 0x2d
 8001c60:	f7ff fe0a 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x26);
 8001c64:	2026      	movs	r0, #38	@ 0x26
 8001c66:	f7ff fe07 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x23);
 8001c6a:	2023      	movs	r0, #35	@ 0x23
 8001c6c:	f7ff fe04 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x27);
 8001c70:	2027      	movs	r0, #39	@ 0x27
 8001c72:	f7ff fe01 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x27);
 8001c76:	2027      	movs	r0, #39	@ 0x27
 8001c78:	f7ff fdfe 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x25);
 8001c7c:	2025      	movs	r0, #37	@ 0x25
 8001c7e:	f7ff fdfb 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2D);
 8001c82:	202d      	movs	r0, #45	@ 0x2d
 8001c84:	f7ff fdf8 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3B);
 8001c88:	203b      	movs	r0, #59	@ 0x3b
 8001c8a:	f7ff fdf5 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff fdf2 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x01);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff fdef 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04);
 8001c9a:	2004      	movs	r0, #4
 8001c9c:	f7ff fdec 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13);
 8001ca0:	2013      	movs	r0, #19
 8001ca2:	f7ff fde9 	bl	8001878 <LCD_WR_DATA8>
	//------------------------------------End ST7735S Gamma Sequence-----------------------------------------//
	LCD_WR_REG(0x3A); //65k mode
 8001ca6:	203a      	movs	r0, #58	@ 0x3a
 8001ca8:	f7ff fd9e 	bl	80017e8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8001cac:	2005      	movs	r0, #5
 8001cae:	f7ff fde3 	bl	8001878 <LCD_WR_DATA8>
	LCD_WR_REG(0x29); //Display on
 8001cb2:	2029      	movs	r0, #41	@ 0x29
 8001cb4:	f7ff fd98 	bl	80017e8 <LCD_WR_REG>

	LCD_Clear(WHITE);
 8001cb8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cbc:	f000 f804 	bl	8001cc8 <LCD_Clear>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200000a4 	.word	0x200000a4

08001cc8 <LCD_Clear>:
 * @brief	Full screen filled LCD screen
 * @param	color: Color of the screen (WHITE, BLACK, BLUE, MAGENTA, SKY,...)
 * @retval	None
*/
void LCD_Clear(uint16_t color)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
	unsigned int i,m;

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <LCD_Clear+0x80>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <LCD_Clear+0x80>)
 8001cdc:	885b      	ldrh	r3, [r3, #2]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff feab 	bl	8001a40 <LCD_SetWindows>
	LCD_SPI_CS_RESET;
 8001cea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cee:	4817      	ldr	r0, [pc, #92]	@ (8001d4c <LCD_Clear+0x84>)
 8001cf0:	f7ff f89f 	bl	8000e32 <GPIO_ResetBits>
	LCD_SPI_RS_SET;
 8001cf4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cf8:	4815      	ldr	r0, [pc, #84]	@ (8001d50 <LCD_Clear+0x88>)
 8001cfa:	f7ff f88c 	bl	8000e16 <GPIO_SetBits>

	for(i=0;i<lcddev.height;i++) {
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e012      	b.n	8001d2a <LCD_Clear+0x62>
		for(m=0;m<lcddev.width;m++) {
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	e006      	b.n	8001d18 <LCD_Clear+0x50>
			LCD_WR_DATA(color);
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fd8b 	bl	8001828 <LCD_WR_DATA>
		for(m=0;m<lcddev.width;m++) {
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <LCD_Clear+0x80>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d3f2      	bcc.n	8001d0a <LCD_Clear+0x42>
	for(i=0;i<lcddev.height;i++) {
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3301      	adds	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <LCD_Clear+0x80>)
 8001d2c:	885b      	ldrh	r3, [r3, #2]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d3e6      	bcc.n	8001d04 <LCD_Clear+0x3c>
		}
	}

	LCD_SPI_CS_SET;
 8001d36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d3a:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <LCD_Clear+0x84>)
 8001d3c:	f7ff f86b 	bl	8000e16 <GPIO_SetBits>
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200000a4 	.word	0x200000a4
 8001d4c:	40010c00 	.word	0x40010c00
 8001d50:	40010800 	.word	0x40010800

08001d54 <LCD_Direction>:
					   	2: 180 degree
					   	3: 270 degree
 * @retval	None
*/
void LCD_Direction(uint8_t direction)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	lcddev.setxcmd=0x2A;
 8001d5e:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <LCD_Direction+0x9c>)
 8001d60:	222a      	movs	r2, #42	@ 0x2a
 8001d62:	811a      	strh	r2, [r3, #8]
	lcddev.setycmd=0x2B;
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <LCD_Direction+0x9c>)
 8001d66:	222b      	movs	r2, #43	@ 0x2b
 8001d68:	815a      	strh	r2, [r3, #10]
	lcddev.wramcmd=0x2C;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <LCD_Direction+0x9c>)
 8001d6c:	222c      	movs	r2, #44	@ 0x2c
 8001d6e:	80da      	strh	r2, [r3, #6]

	switch(direction){
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d836      	bhi.n	8001de4 <LCD_Direction+0x90>
 8001d76:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <LCD_Direction+0x28>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001da3 	.word	0x08001da3
 8001d84:	08001db9 	.word	0x08001db9
 8001d88:	08001dcf 	.word	0x08001dcf
		case 0:
			lcddev.width=LCD_W;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <LCD_Direction+0x9c>)
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 8001d92:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <LCD_Direction+0x9c>)
 8001d94:	22a0      	movs	r2, #160	@ 0xa0
 8001d96:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(0<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8001d98:	21c0      	movs	r1, #192	@ 0xc0
 8001d9a:	2036      	movs	r0, #54	@ 0x36
 8001d9c:	f7ff fd8c 	bl	80018b8 <LCD_WriteReg>
			break;
 8001da0:	e021      	b.n	8001de6 <LCD_Direction+0x92>
		case 1:
			lcddev.width=LCD_H;
 8001da2:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <LCD_Direction+0x9c>)
 8001da4:	22a0      	movs	r2, #160	@ 0xa0
 8001da6:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <LCD_Direction+0x9c>)
 8001daa:	2280      	movs	r2, #128	@ 0x80
 8001dac:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(0<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001dae:	21a0      	movs	r1, #160	@ 0xa0
 8001db0:	2036      	movs	r0, #54	@ 0x36
 8001db2:	f7ff fd81 	bl	80018b8 <LCD_WriteReg>
			break;
 8001db6:	e016      	b.n	8001de6 <LCD_Direction+0x92>
		case 2:
			lcddev.width=LCD_W;
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <LCD_Direction+0x9c>)
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <LCD_Direction+0x9c>)
 8001dc0:	22a0      	movs	r2, #160	@ 0xa0
 8001dc2:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(0<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2036      	movs	r0, #54	@ 0x36
 8001dc8:	f7ff fd76 	bl	80018b8 <LCD_WriteReg>
			break;
 8001dcc:	e00b      	b.n	8001de6 <LCD_Direction+0x92>
		case 3:
			lcddev.width=LCD_H;
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <LCD_Direction+0x9c>)
 8001dd0:	22a0      	movs	r2, #160	@ 0xa0
 8001dd2:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <LCD_Direction+0x9c>)
 8001dd6:	2280      	movs	r2, #128	@ 0x80
 8001dd8:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(0<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001dda:	2160      	movs	r1, #96	@ 0x60
 8001ddc:	2036      	movs	r0, #54	@ 0x36
 8001dde:	f7ff fd6b 	bl	80018b8 <LCD_WriteReg>
			break;
 8001de2:	e000      	b.n	8001de6 <LCD_Direction+0x92>

		default:
			break;
 8001de4:	bf00      	nop
	}
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200000a4 	.word	0x200000a4

08001df4 <binaryToDecimal>:
 * @brief  Convert Binary To Decimal
 * @param  Binary Number
 * @retval Decimal Number
 */
int16_t binaryToDecimal(int16_t binaryNumber)
{
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
    int16_t decimalNumber = 0, i = 0, remainder;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	81fb      	strh	r3, [r7, #14]
 8001e02:	2300      	movs	r3, #0
 8001e04:	81bb      	strh	r3, [r7, #12]

    while (binaryNumber != 0) {
 8001e06:	e04b      	b.n	8001ea0 <binaryToDecimal+0xac>
        remainder = binaryNumber % 10;
 8001e08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e0c:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <binaryToDecimal+0xc0>)
 8001e0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e12:	1099      	asrs	r1, r3, #2
 8001e14:	17d3      	asrs	r3, r2, #31
 8001e16:	1ac9      	subs	r1, r1, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	817b      	strh	r3, [r7, #10]
        binaryNumber /= 10;
 8001e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e28:	4a22      	ldr	r2, [pc, #136]	@ (8001eb4 <binaryToDecimal+0xc0>)
 8001e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2e:	1092      	asrs	r2, r2, #2
 8001e30:	17db      	asrs	r3, r3, #31
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	80fb      	strh	r3, [r7, #6]
        decimalNumber += remainder * pow(2, i);
 8001e36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe faf2 	bl	8000424 <__aeabi_i2d>
 8001e40:	4604      	mov	r4, r0
 8001e42:	460d      	mov	r5, r1
 8001e44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe faeb 	bl	8000424 <__aeabi_i2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e5a:	f000 fa0d 	bl	8002278 <pow>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fb47 	bl	80004f8 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4614      	mov	r4, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fad4 	bl	8000424 <__aeabi_i2d>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe f982 	bl	800018c <__adddf3>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fde2 	bl	8000a58 <__aeabi_d2iz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	81fb      	strh	r3, [r7, #14]
        ++i;
 8001e98:	89bb      	ldrh	r3, [r7, #12]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	81bb      	strh	r3, [r7, #12]
    while (binaryNumber != 0) {
 8001ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1af      	bne.n	8001e08 <binaryToDecimal+0x14>
    }

    return decimalNumber;
 8001ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	66666667 	.word	0x66666667

08001eb8 <EXTI3_IRQHandler>:
 * @brief  Handler interrupt of encoder M1 for count pulse
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	/* Count Pulse Encoder M1 */
	char EncoderM1_pinA = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_3);
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	481d      	ldr	r0, [pc, #116]	@ (8001f38 <EXTI3_IRQHandler+0x80>)
 8001ec2:	f7fe ff8f 	bl	8000de4 <GPIO_ReadInputDataBit>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	char EncoderM1_pinB = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15);
 8001eca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ece:	481b      	ldr	r0, [pc, #108]	@ (8001f3c <EXTI3_IRQHandler+0x84>)
 8001ed0:	f7fe ff88 	bl	8000de4 <GPIO_ReadInputDataBit>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71bb      	strb	r3, [r7, #6]

	/* Handler EXTI_Line3 to PB3 */
	if(EXTI_GetFlagStatus(EXTI_Line3) == SET) {
 8001ed8:	2008      	movs	r0, #8
 8001eda:	f7fe fe9f 	bl	8000c1c <EXTI_GetFlagStatus>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d125      	bne.n	8001f30 <EXTI3_IRQHandler+0x78>
		/* Pulse Noise Filtering */
		EncoderM1_Val   = EncoderM1_Val << 2;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <EXTI3_IRQHandler+0x88>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <EXTI3_IRQHandler+0x88>)
 8001eee:	701a      	strb	r2, [r3, #0]
		EncoderM1_Val   = (( EncoderM1_pinA | EncoderM1_pinB) | EncoderM1_Val ) & 0x0f;
 8001ef0:	79fa      	ldrb	r2, [r7, #7]
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <EXTI3_IRQHandler+0x88>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <EXTI3_IRQHandler+0x88>)
 8001f08:	701a      	strb	r2, [r3, #0]
		encoderM1_temp += State[binaryToDecimal(EncoderM1_Val)];
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <EXTI3_IRQHandler+0x88>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff6f 	bl	8001df4 <binaryToDecimal>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <EXTI3_IRQHandler+0x8c>)
 8001f1c:	5c9b      	ldrb	r3, [r3, r2]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <EXTI3_IRQHandler+0x90>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a08      	ldr	r2, [pc, #32]	@ (8001f48 <EXTI3_IRQHandler+0x90>)
 8001f28:	6013      	str	r3, [r2, #0]

		EXTI_ClearITPendingBit(EXTI_Line3);
 8001f2a:	2008      	movs	r0, #8
 8001f2c:	f7fe fe90 	bl	8000c50 <EXTI_ClearITPendingBit>
	}
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	200000b2 	.word	0x200000b2
 8001f44:	20000014 	.word	0x20000014
 8001f48:	200000b4 	.word	0x200000b4

08001f4c <EXTI9_5_IRQHandler>:
 * @brief  Handler interrupt of encoder M2 for count pulse
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
	/* Count Pulse Encoder M2 */
	char EncoderM2_pinA = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_5);
 8001f52:	2120      	movs	r1, #32
 8001f54:	481d      	ldr	r0, [pc, #116]	@ (8001fcc <EXTI9_5_IRQHandler+0x80>)
 8001f56:	f7fe ff45 	bl	8000de4 <GPIO_ReadInputDataBit>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	char EncoderM2_pinB = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_4);
 8001f5e:	2110      	movs	r1, #16
 8001f60:	481a      	ldr	r0, [pc, #104]	@ (8001fcc <EXTI9_5_IRQHandler+0x80>)
 8001f62:	f7fe ff3f 	bl	8000de4 <GPIO_ReadInputDataBit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	71bb      	strb	r3, [r7, #6]

	/* Handler EXTI_Line5 to PB5 */
	if(EXTI_GetFlagStatus(EXTI_Line5) == SET) {
 8001f6a:	2020      	movs	r0, #32
 8001f6c:	f7fe fe56 	bl	8000c1c <EXTI_GetFlagStatus>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d125      	bne.n	8001fc2 <EXTI9_5_IRQHandler+0x76>
		/* Pulse Noise Filtering */
		EncoderM2_Val   = EncoderM2_Val << 2;
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <EXTI9_5_IRQHandler+0x84>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <EXTI9_5_IRQHandler+0x84>)
 8001f80:	701a      	strb	r2, [r3, #0]
		EncoderM2_Val   = (( EncoderM2_pinA | EncoderM2_pinB) | EncoderM2_Val ) & 0x0f;
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <EXTI9_5_IRQHandler+0x84>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <EXTI9_5_IRQHandler+0x84>)
 8001f9a:	701a      	strb	r2, [r3, #0]
		encoderM2_temp += State[binaryToDecimal(EncoderM2_Val)];
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <EXTI9_5_IRQHandler+0x84>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff26 	bl	8001df4 <binaryToDecimal>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <EXTI9_5_IRQHandler+0x88>)
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <EXTI9_5_IRQHandler+0x8c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <EXTI9_5_IRQHandler+0x8c>)
 8001fba:	6013      	str	r3, [r2, #0]

		EXTI_ClearITPendingBit(EXTI_Line5);
 8001fbc:	2020      	movs	r0, #32
 8001fbe:	f7fe fe47 	bl	8000c50 <EXTI_ClearITPendingBit>
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40010c00 	.word	0x40010c00
 8001fd0:	200000b3 	.word	0x200000b3
 8001fd4:	20000014 	.word	0x20000014
 8001fd8:	200000b8 	.word	0x200000b8

08001fdc <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da0b      	bge.n	8002008 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <NVIC_SetPriority+0x4c>)
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	3b04      	subs	r3, #4
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002006:	e009      	b.n	800201c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <NVIC_SetPriority+0x50>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00
 800202c:	e000e100 	.word	0xe000e100

08002030 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800203e:	d301      	bcc.n	8002044 <SysTick_Config+0x14>
 8002040:	2301      	movs	r3, #1
 8002042:	e011      	b.n	8002068 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800204a:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <SysTick_Config+0x40>)
 800204c:	3b01      	subs	r3, #1
 800204e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8002050:	210f      	movs	r1, #15
 8002052:	f04f 30ff 	mov.w	r0, #4294967295
 8002056:	f7ff ffc1 	bl	8001fdc <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800205a:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <SysTick_Config+0x40>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <SysTick_Config+0x40>)
 8002062:	2207      	movs	r2, #7
 8002064:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	e000e010 	.word	0xe000e010

08002074 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fee7 	bl	8000e50 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <TimerInit+0x3c>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	099b      	lsrs	r3, r3, #6
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ffcf 	bl	8002030 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8002092:	2101      	movs	r1, #1
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ffa0 	bl	8001fdc <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 800209c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020a0:	2100      	movs	r1, #0
 80020a2:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <TimerInit+0x40>)
 80020a4:	f000 f820 	bl	80020e8 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	10624dd3 	.word	0x10624dd3
 80020b4:	200000bc 	.word	0x200000bc

080020b8 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 80020bc:	4b02      	ldr	r3, [pc, #8]	@ (80020c8 <GetMilSecTick+0x10>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	2000023c 	.word	0x2000023c

080020cc <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <SysTick_Handler+0x18>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a03      	ldr	r2, [pc, #12]	@ (80020e4 <SysTick_Handler+0x18>)
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000023c 	.word	0x2000023c

080020e8 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
 80020f4:	4613      	mov	r3, r2
 80020f6:	803b      	strh	r3, [r7, #0]
    while (size--) {
 80020f8:	e004      	b.n	8002104 <memsetl+0x1c>
        *dst++ = value;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8002104:	883b      	ldrh	r3, [r7, #0]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	803a      	strh	r2, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f5      	bne.n	80020fa <memsetl+0x12>
    }    
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <dwCalculatorTime>:
) {
    return ((val >= rmin) && (val <= rmax));
}

uint32_t dwCalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d303      	bcc.n	8002134 <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	e003      	b.n	800213c <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	3b01      	subs	r3, #1
	}
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <delay_ms>:
void delay_ms(uint32_t ms)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
	uint32_t dwTimeInit = GetMilSecTick();
 800214e:	f7ff ffb3 	bl	80020b8 <GetMilSecTick>
 8002152:	60f8      	str	r0, [r7, #12]
	uint32_t dwTimeCurrent = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]

	do{
		dwTimeCurrent = GetMilSecTick();
 8002158:	f7ff ffae 	bl	80020b8 <GetMilSecTick>
 800215c:	60b8      	str	r0, [r7, #8]
	}
	while(dwCalculatorTime(dwTimeInit, dwTimeCurrent) < ms);
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff ffda 	bl	800211a <dwCalculatorTime>
 8002166:	4602      	mov	r2, r0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4293      	cmp	r3, r2
 800216c:	d8f4      	bhi.n	8002158 <delay_ms+0x12>
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <AppInitCommon>:
#include "lcd.h"
#include "GUI.h"


void AppInitCommon(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	TimerInit();		  //Khoi tao timer de su dung ham delay
 800217c:	f7ff ff7a 	bl	8002074 <TimerInit>

    LCD_Init();
 8002180:	f7ff fca2 	bl	8001ac8 <LCD_Init>
    LCD_Direction(1);
 8002184:	2001      	movs	r0, #1
 8002186:	f7ff fde5 	bl	8001d54 <LCD_Direction>
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <main>:

int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af02      	add	r7, sp, #8
	AppInitCommon();
 8002196:	f7ff ffef 	bl	8002178 <AppInitCommon>
		/* Loop forever */
	while (1)
	{
		LCD_Circle(50, 50, RED, 30, 1);
 800219a:	2301      	movs	r3, #1
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	231e      	movs	r3, #30
 80021a0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80021a4:	2132      	movs	r1, #50	@ 0x32
 80021a6:	2032      	movs	r0, #50	@ 0x32
 80021a8:	f7ff f985 	bl	80014b6 <LCD_Circle>
		LCD_ShowCentredString(BLACK, WHITE, (uint8_t*)"Robi Task 2.2", 16, 1);
 80021ac:	2301      	movs	r3, #1
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2310      	movs	r3, #16
 80021b2:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <main+0x3c>)
 80021b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fad7 	bl	800176c <LCD_ShowCentredString>
		delay_ms(1000);
 80021be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021c2:	f7ff ffc0 	bl	8002146 <delay_ms>
		LCD_Circle(50, 50, RED, 30, 1);
 80021c6:	bf00      	nop
 80021c8:	e7e7      	b.n	800219a <main+0xa>
 80021ca:	bf00      	nop
 80021cc:	080030b0 	.word	0x080030b0

080021d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021d0:	480d      	ldr	r0, [pc, #52]	@ (8002208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021d4:	f7fe fc68 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <LoopForever+0x6>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	@ (8002210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <LoopForever+0xe>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	@ (800221c <LoopForever+0x16>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021fe:	f000 f817 	bl	8002230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002202:	f7ff ffc5 	bl	8002190 <main>

08002206 <LoopForever>:

LoopForever:
  b LoopForever
 8002206:	e7fe      	b.n	8002206 <LoopForever>
  ldr   r0, =_estack
 8002208:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002214:	08003b68 	.word	0x08003b68
  ldr r2, =_sbss
 8002218:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800221c:	20000378 	.word	0x20000378

08002220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>
	...

08002224 <__errno>:
 8002224:	4b01      	ldr	r3, [pc, #4]	@ (800222c <__errno+0x8>)
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000024 	.word	0x20000024

08002230 <__libc_init_array>:
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	2600      	movs	r6, #0
 8002234:	4d0c      	ldr	r5, [pc, #48]	@ (8002268 <__libc_init_array+0x38>)
 8002236:	4c0d      	ldr	r4, [pc, #52]	@ (800226c <__libc_init_array+0x3c>)
 8002238:	1b64      	subs	r4, r4, r5
 800223a:	10a4      	asrs	r4, r4, #2
 800223c:	42a6      	cmp	r6, r4
 800223e:	d109      	bne.n	8002254 <__libc_init_array+0x24>
 8002240:	f000 ff2a 	bl	8003098 <_init>
 8002244:	2600      	movs	r6, #0
 8002246:	4d0a      	ldr	r5, [pc, #40]	@ (8002270 <__libc_init_array+0x40>)
 8002248:	4c0a      	ldr	r4, [pc, #40]	@ (8002274 <__libc_init_array+0x44>)
 800224a:	1b64      	subs	r4, r4, r5
 800224c:	10a4      	asrs	r4, r4, #2
 800224e:	42a6      	cmp	r6, r4
 8002250:	d105      	bne.n	800225e <__libc_init_array+0x2e>
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	f855 3b04 	ldr.w	r3, [r5], #4
 8002258:	4798      	blx	r3
 800225a:	3601      	adds	r6, #1
 800225c:	e7ee      	b.n	800223c <__libc_init_array+0xc>
 800225e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002262:	4798      	blx	r3
 8002264:	3601      	adds	r6, #1
 8002266:	e7f2      	b.n	800224e <__libc_init_array+0x1e>
 8002268:	08003b60 	.word	0x08003b60
 800226c:	08003b60 	.word	0x08003b60
 8002270:	08003b60 	.word	0x08003b60
 8002274:	08003b64 	.word	0x08003b64

08002278 <pow>:
 8002278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4680      	mov	r8, r0
 8002282:	4689      	mov	r9, r1
 8002284:	f000 f868 	bl	8002358 <__ieee754_pow>
 8002288:	4622      	mov	r2, r4
 800228a:	4606      	mov	r6, r0
 800228c:	460f      	mov	r7, r1
 800228e:	462b      	mov	r3, r5
 8002290:	4620      	mov	r0, r4
 8002292:	4629      	mov	r1, r5
 8002294:	f7fe fbca 	bl	8000a2c <__aeabi_dcmpun>
 8002298:	bbc8      	cbnz	r0, 800230e <pow+0x96>
 800229a:	2200      	movs	r2, #0
 800229c:	2300      	movs	r3, #0
 800229e:	4640      	mov	r0, r8
 80022a0:	4649      	mov	r1, r9
 80022a2:	f7fe fb91 	bl	80009c8 <__aeabi_dcmpeq>
 80022a6:	b1b8      	cbz	r0, 80022d8 <pow+0x60>
 80022a8:	2200      	movs	r2, #0
 80022aa:	2300      	movs	r3, #0
 80022ac:	4620      	mov	r0, r4
 80022ae:	4629      	mov	r1, r5
 80022b0:	f7fe fb8a 	bl	80009c8 <__aeabi_dcmpeq>
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d141      	bne.n	800233c <pow+0xc4>
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f000 f844 	bl	8002348 <finite>
 80022c0:	b328      	cbz	r0, 800230e <pow+0x96>
 80022c2:	2200      	movs	r2, #0
 80022c4:	2300      	movs	r3, #0
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fe fb87 	bl	80009dc <__aeabi_dcmplt>
 80022ce:	b1f0      	cbz	r0, 800230e <pow+0x96>
 80022d0:	f7ff ffa8 	bl	8002224 <__errno>
 80022d4:	2322      	movs	r3, #34	@ 0x22
 80022d6:	e019      	b.n	800230c <pow+0x94>
 80022d8:	4630      	mov	r0, r6
 80022da:	4639      	mov	r1, r7
 80022dc:	f000 f834 	bl	8002348 <finite>
 80022e0:	b9c8      	cbnz	r0, 8002316 <pow+0x9e>
 80022e2:	4640      	mov	r0, r8
 80022e4:	4649      	mov	r1, r9
 80022e6:	f000 f82f 	bl	8002348 <finite>
 80022ea:	b1a0      	cbz	r0, 8002316 <pow+0x9e>
 80022ec:	4620      	mov	r0, r4
 80022ee:	4629      	mov	r1, r5
 80022f0:	f000 f82a 	bl	8002348 <finite>
 80022f4:	b178      	cbz	r0, 8002316 <pow+0x9e>
 80022f6:	4632      	mov	r2, r6
 80022f8:	463b      	mov	r3, r7
 80022fa:	4630      	mov	r0, r6
 80022fc:	4639      	mov	r1, r7
 80022fe:	f7fe fb95 	bl	8000a2c <__aeabi_dcmpun>
 8002302:	2800      	cmp	r0, #0
 8002304:	d0e4      	beq.n	80022d0 <pow+0x58>
 8002306:	f7ff ff8d 	bl	8002224 <__errno>
 800230a:	2321      	movs	r3, #33	@ 0x21
 800230c:	6003      	str	r3, [r0, #0]
 800230e:	4630      	mov	r0, r6
 8002310:	4639      	mov	r1, r7
 8002312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002316:	2200      	movs	r2, #0
 8002318:	2300      	movs	r3, #0
 800231a:	4630      	mov	r0, r6
 800231c:	4639      	mov	r1, r7
 800231e:	f7fe fb53 	bl	80009c8 <__aeabi_dcmpeq>
 8002322:	2800      	cmp	r0, #0
 8002324:	d0f3      	beq.n	800230e <pow+0x96>
 8002326:	4640      	mov	r0, r8
 8002328:	4649      	mov	r1, r9
 800232a:	f000 f80d 	bl	8002348 <finite>
 800232e:	2800      	cmp	r0, #0
 8002330:	d0ed      	beq.n	800230e <pow+0x96>
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f000 f807 	bl	8002348 <finite>
 800233a:	e7c8      	b.n	80022ce <pow+0x56>
 800233c:	2600      	movs	r6, #0
 800233e:	4f01      	ldr	r7, [pc, #4]	@ (8002344 <pow+0xcc>)
 8002340:	e7e5      	b.n	800230e <pow+0x96>
 8002342:	bf00      	nop
 8002344:	3ff00000 	.word	0x3ff00000

08002348 <finite>:
 8002348:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800234c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8002350:	0fc0      	lsrs	r0, r0, #31
 8002352:	4770      	bx	lr
 8002354:	0000      	movs	r0, r0
	...

08002358 <__ieee754_pow>:
 8002358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235c:	b091      	sub	sp, #68	@ 0x44
 800235e:	e9cd 2300 	strd	r2, r3, [sp]
 8002362:	468b      	mov	fp, r1
 8002364:	e9dd 1800 	ldrd	r1, r8, [sp]
 8002368:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800236c:	4682      	mov	sl, r0
 800236e:	ea57 0001 	orrs.w	r0, r7, r1
 8002372:	d112      	bne.n	800239a <__ieee754_pow+0x42>
 8002374:	4653      	mov	r3, sl
 8002376:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800237a:	18db      	adds	r3, r3, r3
 800237c:	4152      	adcs	r2, r2
 800237e:	4298      	cmp	r0, r3
 8002380:	4b91      	ldr	r3, [pc, #580]	@ (80025c8 <__ieee754_pow+0x270>)
 8002382:	4193      	sbcs	r3, r2
 8002384:	f080 84ce 	bcs.w	8002d24 <__ieee754_pow+0x9cc>
 8002388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800238c:	4650      	mov	r0, sl
 800238e:	4659      	mov	r1, fp
 8002390:	f7fd fefc 	bl	800018c <__adddf3>
 8002394:	b011      	add	sp, #68	@ 0x44
 8002396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800239a:	4b8c      	ldr	r3, [pc, #560]	@ (80025cc <__ieee754_pow+0x274>)
 800239c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80023a0:	429e      	cmp	r6, r3
 80023a2:	465d      	mov	r5, fp
 80023a4:	46d1      	mov	r9, sl
 80023a6:	d807      	bhi.n	80023b8 <__ieee754_pow+0x60>
 80023a8:	d102      	bne.n	80023b0 <__ieee754_pow+0x58>
 80023aa:	f1ba 0f00 	cmp.w	sl, #0
 80023ae:	d1eb      	bne.n	8002388 <__ieee754_pow+0x30>
 80023b0:	429f      	cmp	r7, r3
 80023b2:	d801      	bhi.n	80023b8 <__ieee754_pow+0x60>
 80023b4:	d10f      	bne.n	80023d6 <__ieee754_pow+0x7e>
 80023b6:	b171      	cbz	r1, 80023d6 <__ieee754_pow+0x7e>
 80023b8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80023bc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80023c0:	ea55 0509 	orrs.w	r5, r5, r9
 80023c4:	d1e0      	bne.n	8002388 <__ieee754_pow+0x30>
 80023c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80023ca:	18db      	adds	r3, r3, r3
 80023cc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80023d0:	4152      	adcs	r2, r2
 80023d2:	429d      	cmp	r5, r3
 80023d4:	e7d4      	b.n	8002380 <__ieee754_pow+0x28>
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	4633      	mov	r3, r6
 80023da:	da39      	bge.n	8002450 <__ieee754_pow+0xf8>
 80023dc:	4a7c      	ldr	r2, [pc, #496]	@ (80025d0 <__ieee754_pow+0x278>)
 80023de:	4297      	cmp	r7, r2
 80023e0:	d84e      	bhi.n	8002480 <__ieee754_pow+0x128>
 80023e2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80023e6:	4297      	cmp	r7, r2
 80023e8:	f240 84ab 	bls.w	8002d42 <__ieee754_pow+0x9ea>
 80023ec:	153a      	asrs	r2, r7, #20
 80023ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80023f2:	2a14      	cmp	r2, #20
 80023f4:	dd0f      	ble.n	8002416 <__ieee754_pow+0xbe>
 80023f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80023fa:	fa21 f402 	lsr.w	r4, r1, r2
 80023fe:	fa04 f202 	lsl.w	r2, r4, r2
 8002402:	428a      	cmp	r2, r1
 8002404:	f040 849d 	bne.w	8002d42 <__ieee754_pow+0x9ea>
 8002408:	f004 0401 	and.w	r4, r4, #1
 800240c:	f1c4 0402 	rsb	r4, r4, #2
 8002410:	2900      	cmp	r1, #0
 8002412:	d15a      	bne.n	80024ca <__ieee754_pow+0x172>
 8002414:	e00e      	b.n	8002434 <__ieee754_pow+0xdc>
 8002416:	2900      	cmp	r1, #0
 8002418:	d156      	bne.n	80024c8 <__ieee754_pow+0x170>
 800241a:	f1c2 0214 	rsb	r2, r2, #20
 800241e:	fa47 f402 	asr.w	r4, r7, r2
 8002422:	fa04 f202 	lsl.w	r2, r4, r2
 8002426:	42ba      	cmp	r2, r7
 8002428:	f040 8488 	bne.w	8002d3c <__ieee754_pow+0x9e4>
 800242c:	f004 0401 	and.w	r4, r4, #1
 8002430:	f1c4 0402 	rsb	r4, r4, #2
 8002434:	4a67      	ldr	r2, [pc, #412]	@ (80025d4 <__ieee754_pow+0x27c>)
 8002436:	4297      	cmp	r7, r2
 8002438:	d130      	bne.n	800249c <__ieee754_pow+0x144>
 800243a:	f1b8 0f00 	cmp.w	r8, #0
 800243e:	f280 8479 	bge.w	8002d34 <__ieee754_pow+0x9dc>
 8002442:	4652      	mov	r2, sl
 8002444:	465b      	mov	r3, fp
 8002446:	2000      	movs	r0, #0
 8002448:	4962      	ldr	r1, [pc, #392]	@ (80025d4 <__ieee754_pow+0x27c>)
 800244a:	f7fe f97f 	bl	800074c <__aeabi_ddiv>
 800244e:	e7a1      	b.n	8002394 <__ieee754_pow+0x3c>
 8002450:	2400      	movs	r4, #0
 8002452:	2900      	cmp	r1, #0
 8002454:	d139      	bne.n	80024ca <__ieee754_pow+0x172>
 8002456:	4a5d      	ldr	r2, [pc, #372]	@ (80025cc <__ieee754_pow+0x274>)
 8002458:	4297      	cmp	r7, r2
 800245a:	d1eb      	bne.n	8002434 <__ieee754_pow+0xdc>
 800245c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8002460:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8002464:	ea53 0309 	orrs.w	r3, r3, r9
 8002468:	f000 845c 	beq.w	8002d24 <__ieee754_pow+0x9cc>
 800246c:	4b5a      	ldr	r3, [pc, #360]	@ (80025d8 <__ieee754_pow+0x280>)
 800246e:	429e      	cmp	r6, r3
 8002470:	d908      	bls.n	8002484 <__ieee754_pow+0x12c>
 8002472:	f1b8 0f00 	cmp.w	r8, #0
 8002476:	f2c0 8459 	blt.w	8002d2c <__ieee754_pow+0x9d4>
 800247a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800247e:	e789      	b.n	8002394 <__ieee754_pow+0x3c>
 8002480:	2402      	movs	r4, #2
 8002482:	e7e6      	b.n	8002452 <__ieee754_pow+0xfa>
 8002484:	f1b8 0f00 	cmp.w	r8, #0
 8002488:	f04f 0000 	mov.w	r0, #0
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	da80      	bge.n	8002394 <__ieee754_pow+0x3c>
 8002492:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002496:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800249a:	e77b      	b.n	8002394 <__ieee754_pow+0x3c>
 800249c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80024a0:	d106      	bne.n	80024b0 <__ieee754_pow+0x158>
 80024a2:	4652      	mov	r2, sl
 80024a4:	465b      	mov	r3, fp
 80024a6:	4650      	mov	r0, sl
 80024a8:	4659      	mov	r1, fp
 80024aa:	f7fe f825 	bl	80004f8 <__aeabi_dmul>
 80024ae:	e771      	b.n	8002394 <__ieee754_pow+0x3c>
 80024b0:	4a4a      	ldr	r2, [pc, #296]	@ (80025dc <__ieee754_pow+0x284>)
 80024b2:	4590      	cmp	r8, r2
 80024b4:	d109      	bne.n	80024ca <__ieee754_pow+0x172>
 80024b6:	2d00      	cmp	r5, #0
 80024b8:	db07      	blt.n	80024ca <__ieee754_pow+0x172>
 80024ba:	4650      	mov	r0, sl
 80024bc:	4659      	mov	r1, fp
 80024be:	b011      	add	sp, #68	@ 0x44
 80024c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	f000 bd12 	b.w	8002eec <__ieee754_sqrt>
 80024c8:	2400      	movs	r4, #0
 80024ca:	4650      	mov	r0, sl
 80024cc:	4659      	mov	r1, fp
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	f000 fc6a 	bl	8002da8 <fabs>
 80024d4:	9b02      	ldr	r3, [sp, #8]
 80024d6:	f1b9 0f00 	cmp.w	r9, #0
 80024da:	d127      	bne.n	800252c <__ieee754_pow+0x1d4>
 80024dc:	4a3d      	ldr	r2, [pc, #244]	@ (80025d4 <__ieee754_pow+0x27c>)
 80024de:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80024e2:	4594      	cmp	ip, r2
 80024e4:	d000      	beq.n	80024e8 <__ieee754_pow+0x190>
 80024e6:	bb0e      	cbnz	r6, 800252c <__ieee754_pow+0x1d4>
 80024e8:	f1b8 0f00 	cmp.w	r8, #0
 80024ec:	da05      	bge.n	80024fa <__ieee754_pow+0x1a2>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	2000      	movs	r0, #0
 80024f4:	4937      	ldr	r1, [pc, #220]	@ (80025d4 <__ieee754_pow+0x27c>)
 80024f6:	f7fe f929 	bl	800074c <__aeabi_ddiv>
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	f6bf af4a 	bge.w	8002394 <__ieee754_pow+0x3c>
 8002500:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8002504:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8002508:	4326      	orrs	r6, r4
 800250a:	d108      	bne.n	800251e <__ieee754_pow+0x1c6>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fd fe38 	bl	8000188 <__aeabi_dsub>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	e795      	b.n	800244a <__ieee754_pow+0xf2>
 800251e:	2c01      	cmp	r4, #1
 8002520:	f47f af38 	bne.w	8002394 <__ieee754_pow+0x3c>
 8002524:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002528:	4619      	mov	r1, r3
 800252a:	e733      	b.n	8002394 <__ieee754_pow+0x3c>
 800252c:	0fea      	lsrs	r2, r5, #31
 800252e:	3a01      	subs	r2, #1
 8002530:	ea52 0c04 	orrs.w	ip, r2, r4
 8002534:	d102      	bne.n	800253c <__ieee754_pow+0x1e4>
 8002536:	4652      	mov	r2, sl
 8002538:	465b      	mov	r3, fp
 800253a:	e7e9      	b.n	8002510 <__ieee754_pow+0x1b8>
 800253c:	f04f 0900 	mov.w	r9, #0
 8002540:	3c01      	subs	r4, #1
 8002542:	4314      	orrs	r4, r2
 8002544:	bf14      	ite	ne
 8002546:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80025d4 <__ieee754_pow+0x27c>
 800254a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80025e0 <__ieee754_pow+0x288>
 800254e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8002552:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8002556:	f240 8107 	bls.w	8002768 <__ieee754_pow+0x410>
 800255a:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <__ieee754_pow+0x28c>)
 800255c:	429f      	cmp	r7, r3
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <__ieee754_pow+0x280>)
 8002560:	d913      	bls.n	800258a <__ieee754_pow+0x232>
 8002562:	429e      	cmp	r6, r3
 8002564:	d808      	bhi.n	8002578 <__ieee754_pow+0x220>
 8002566:	f1b8 0f00 	cmp.w	r8, #0
 800256a:	da08      	bge.n	800257e <__ieee754_pow+0x226>
 800256c:	2000      	movs	r0, #0
 800256e:	b011      	add	sp, #68	@ 0x44
 8002570:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002574:	f000 bcb4 	b.w	8002ee0 <__math_oflow>
 8002578:	f1b8 0f00 	cmp.w	r8, #0
 800257c:	dcf6      	bgt.n	800256c <__ieee754_pow+0x214>
 800257e:	2000      	movs	r0, #0
 8002580:	b011      	add	sp, #68	@ 0x44
 8002582:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002586:	f000 bca6 	b.w	8002ed6 <__math_uflow>
 800258a:	429e      	cmp	r6, r3
 800258c:	d20c      	bcs.n	80025a8 <__ieee754_pow+0x250>
 800258e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	2300      	movs	r3, #0
 8002596:	f7fe fa21 	bl	80009dc <__aeabi_dcmplt>
 800259a:	3800      	subs	r0, #0
 800259c:	bf18      	it	ne
 800259e:	2001      	movne	r0, #1
 80025a0:	f1b8 0f00 	cmp.w	r8, #0
 80025a4:	daec      	bge.n	8002580 <__ieee754_pow+0x228>
 80025a6:	e7e2      	b.n	800256e <__ieee754_pow+0x216>
 80025a8:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <__ieee754_pow+0x27c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	429e      	cmp	r6, r3
 80025ae:	d91b      	bls.n	80025e8 <__ieee754_pow+0x290>
 80025b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80025b4:	2300      	movs	r3, #0
 80025b6:	f7fe fa11 	bl	80009dc <__aeabi_dcmplt>
 80025ba:	3800      	subs	r0, #0
 80025bc:	bf18      	it	ne
 80025be:	2001      	movne	r0, #1
 80025c0:	f1b8 0f00 	cmp.w	r8, #0
 80025c4:	dcd3      	bgt.n	800256e <__ieee754_pow+0x216>
 80025c6:	e7db      	b.n	8002580 <__ieee754_pow+0x228>
 80025c8:	fff00000 	.word	0xfff00000
 80025cc:	7ff00000 	.word	0x7ff00000
 80025d0:	433fffff 	.word	0x433fffff
 80025d4:	3ff00000 	.word	0x3ff00000
 80025d8:	3fefffff 	.word	0x3fefffff
 80025dc:	3fe00000 	.word	0x3fe00000
 80025e0:	bff00000 	.word	0xbff00000
 80025e4:	43f00000 	.word	0x43f00000
 80025e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002758 <__ieee754_pow+0x400>)
 80025ea:	f7fd fdcd 	bl	8000188 <__aeabi_dsub>
 80025ee:	a352      	add	r3, pc, #328	@ (adr r3, 8002738 <__ieee754_pow+0x3e0>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	4604      	mov	r4, r0
 80025f6:	460d      	mov	r5, r1
 80025f8:	f7fd ff7e 	bl	80004f8 <__aeabi_dmul>
 80025fc:	a350      	add	r3, pc, #320	@ (adr r3, 8002740 <__ieee754_pow+0x3e8>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	4606      	mov	r6, r0
 8002604:	460f      	mov	r7, r1
 8002606:	4620      	mov	r0, r4
 8002608:	4629      	mov	r1, r5
 800260a:	f7fd ff75 	bl	80004f8 <__aeabi_dmul>
 800260e:	2200      	movs	r2, #0
 8002610:	4682      	mov	sl, r0
 8002612:	468b      	mov	fp, r1
 8002614:	4620      	mov	r0, r4
 8002616:	4629      	mov	r1, r5
 8002618:	4b50      	ldr	r3, [pc, #320]	@ (800275c <__ieee754_pow+0x404>)
 800261a:	f7fd ff6d 	bl	80004f8 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	a149      	add	r1, pc, #292	@ (adr r1, 8002748 <__ieee754_pow+0x3f0>)
 8002624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002628:	f7fd fdae 	bl	8000188 <__aeabi_dsub>
 800262c:	4622      	mov	r2, r4
 800262e:	462b      	mov	r3, r5
 8002630:	f7fd ff62 	bl	80004f8 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	2000      	movs	r0, #0
 800263a:	4949      	ldr	r1, [pc, #292]	@ (8002760 <__ieee754_pow+0x408>)
 800263c:	f7fd fda4 	bl	8000188 <__aeabi_dsub>
 8002640:	4622      	mov	r2, r4
 8002642:	4680      	mov	r8, r0
 8002644:	4689      	mov	r9, r1
 8002646:	462b      	mov	r3, r5
 8002648:	4620      	mov	r0, r4
 800264a:	4629      	mov	r1, r5
 800264c:	f7fd ff54 	bl	80004f8 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4640      	mov	r0, r8
 8002656:	4649      	mov	r1, r9
 8002658:	f7fd ff4e 	bl	80004f8 <__aeabi_dmul>
 800265c:	a33c      	add	r3, pc, #240	@ (adr r3, 8002750 <__ieee754_pow+0x3f8>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fd ff49 	bl	80004f8 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4650      	mov	r0, sl
 800266c:	4659      	mov	r1, fp
 800266e:	f7fd fd8b 	bl	8000188 <__aeabi_dsub>
 8002672:	2400      	movs	r4, #0
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4680      	mov	r8, r0
 800267a:	4689      	mov	r9, r1
 800267c:	4630      	mov	r0, r6
 800267e:	4639      	mov	r1, r7
 8002680:	f7fd fd84 	bl	800018c <__adddf3>
 8002684:	4632      	mov	r2, r6
 8002686:	463b      	mov	r3, r7
 8002688:	4620      	mov	r0, r4
 800268a:	460d      	mov	r5, r1
 800268c:	f7fd fd7c 	bl	8000188 <__aeabi_dsub>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4640      	mov	r0, r8
 8002696:	4649      	mov	r1, r9
 8002698:	f7fd fd76 	bl	8000188 <__aeabi_dsub>
 800269c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80026a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026a4:	2300      	movs	r3, #0
 80026a6:	9304      	str	r3, [sp, #16]
 80026a8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80026ac:	4606      	mov	r6, r0
 80026ae:	460f      	mov	r7, r1
 80026b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80026b4:	4652      	mov	r2, sl
 80026b6:	465b      	mov	r3, fp
 80026b8:	f7fd fd66 	bl	8000188 <__aeabi_dsub>
 80026bc:	4622      	mov	r2, r4
 80026be:	462b      	mov	r3, r5
 80026c0:	f7fd ff1a 	bl	80004f8 <__aeabi_dmul>
 80026c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80026c8:	4680      	mov	r8, r0
 80026ca:	4689      	mov	r9, r1
 80026cc:	4630      	mov	r0, r6
 80026ce:	4639      	mov	r1, r7
 80026d0:	f7fd ff12 	bl	80004f8 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4640      	mov	r0, r8
 80026da:	4649      	mov	r1, r9
 80026dc:	f7fd fd56 	bl	800018c <__adddf3>
 80026e0:	4652      	mov	r2, sl
 80026e2:	465b      	mov	r3, fp
 80026e4:	4606      	mov	r6, r0
 80026e6:	460f      	mov	r7, r1
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd ff04 	bl	80004f8 <__aeabi_dmul>
 80026f0:	460b      	mov	r3, r1
 80026f2:	4602      	mov	r2, r0
 80026f4:	4680      	mov	r8, r0
 80026f6:	4689      	mov	r9, r1
 80026f8:	4630      	mov	r0, r6
 80026fa:	4639      	mov	r1, r7
 80026fc:	f7fd fd46 	bl	800018c <__adddf3>
 8002700:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <__ieee754_pow+0x40c>)
 8002702:	4604      	mov	r4, r0
 8002704:	4299      	cmp	r1, r3
 8002706:	460d      	mov	r5, r1
 8002708:	468a      	mov	sl, r1
 800270a:	468b      	mov	fp, r1
 800270c:	f340 82e0 	ble.w	8002cd0 <__ieee754_pow+0x978>
 8002710:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8002714:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8002718:	4303      	orrs	r3, r0
 800271a:	f000 81df 	beq.w	8002adc <__ieee754_pow+0x784>
 800271e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	2300      	movs	r3, #0
 8002726:	f7fe f959 	bl	80009dc <__aeabi_dcmplt>
 800272a:	3800      	subs	r0, #0
 800272c:	bf18      	it	ne
 800272e:	2001      	movne	r0, #1
 8002730:	e71d      	b.n	800256e <__ieee754_pow+0x216>
 8002732:	bf00      	nop
 8002734:	f3af 8000 	nop.w
 8002738:	60000000 	.word	0x60000000
 800273c:	3ff71547 	.word	0x3ff71547
 8002740:	f85ddf44 	.word	0xf85ddf44
 8002744:	3e54ae0b 	.word	0x3e54ae0b
 8002748:	55555555 	.word	0x55555555
 800274c:	3fd55555 	.word	0x3fd55555
 8002750:	652b82fe 	.word	0x652b82fe
 8002754:	3ff71547 	.word	0x3ff71547
 8002758:	3ff00000 	.word	0x3ff00000
 800275c:	3fd00000 	.word	0x3fd00000
 8002760:	3fe00000 	.word	0x3fe00000
 8002764:	408fffff 	.word	0x408fffff
 8002768:	4ad3      	ldr	r2, [pc, #844]	@ (8002ab8 <__ieee754_pow+0x760>)
 800276a:	402a      	ands	r2, r5
 800276c:	2a00      	cmp	r2, #0
 800276e:	f040 817a 	bne.w	8002a66 <__ieee754_pow+0x70e>
 8002772:	4bd2      	ldr	r3, [pc, #840]	@ (8002abc <__ieee754_pow+0x764>)
 8002774:	2200      	movs	r2, #0
 8002776:	f7fd febf 	bl	80004f8 <__aeabi_dmul>
 800277a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800277e:	460b      	mov	r3, r1
 8002780:	151a      	asrs	r2, r3, #20
 8002782:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8002786:	4422      	add	r2, r4
 8002788:	920a      	str	r2, [sp, #40]	@ 0x28
 800278a:	4acd      	ldr	r2, [pc, #820]	@ (8002ac0 <__ieee754_pow+0x768>)
 800278c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002790:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8002794:	4293      	cmp	r3, r2
 8002796:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800279a:	dd08      	ble.n	80027ae <__ieee754_pow+0x456>
 800279c:	4ac9      	ldr	r2, [pc, #804]	@ (8002ac4 <__ieee754_pow+0x76c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f340 8163 	ble.w	8002a6a <__ieee754_pow+0x712>
 80027a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80027a6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80027aa:	3301      	adds	r3, #1
 80027ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80027ae:	2600      	movs	r6, #0
 80027b0:	00f3      	lsls	r3, r6, #3
 80027b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80027b4:	4bc4      	ldr	r3, [pc, #784]	@ (8002ac8 <__ieee754_pow+0x770>)
 80027b6:	4629      	mov	r1, r5
 80027b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80027bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027c0:	461a      	mov	r2, r3
 80027c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80027c6:	4623      	mov	r3, r4
 80027c8:	4682      	mov	sl, r0
 80027ca:	f7fd fcdd 	bl	8000188 <__aeabi_dsub>
 80027ce:	4652      	mov	r2, sl
 80027d0:	462b      	mov	r3, r5
 80027d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80027d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80027da:	f7fd fcd7 	bl	800018c <__adddf3>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	2000      	movs	r0, #0
 80027e4:	49b9      	ldr	r1, [pc, #740]	@ (8002acc <__ieee754_pow+0x774>)
 80027e6:	f7fd ffb1 	bl	800074c <__aeabi_ddiv>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80027f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80027f6:	f7fd fe7f 	bl	80004f8 <__aeabi_dmul>
 80027fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80027fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002802:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002806:	2300      	movs	r3, #0
 8002808:	2200      	movs	r2, #0
 800280a:	46ab      	mov	fp, r5
 800280c:	106d      	asrs	r5, r5, #1
 800280e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8002812:	9304      	str	r3, [sp, #16]
 8002814:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8002818:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800281c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002820:	4640      	mov	r0, r8
 8002822:	4649      	mov	r1, r9
 8002824:	4614      	mov	r4, r2
 8002826:	461d      	mov	r5, r3
 8002828:	f7fd fe66 	bl	80004f8 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002834:	f7fd fca8 	bl	8000188 <__aeabi_dsub>
 8002838:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800283c:	4606      	mov	r6, r0
 800283e:	460f      	mov	r7, r1
 8002840:	4620      	mov	r0, r4
 8002842:	4629      	mov	r1, r5
 8002844:	f7fd fca0 	bl	8000188 <__aeabi_dsub>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4650      	mov	r0, sl
 800284e:	4659      	mov	r1, fp
 8002850:	f7fd fc9a 	bl	8000188 <__aeabi_dsub>
 8002854:	4642      	mov	r2, r8
 8002856:	464b      	mov	r3, r9
 8002858:	f7fd fe4e 	bl	80004f8 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4630      	mov	r0, r6
 8002862:	4639      	mov	r1, r7
 8002864:	f7fd fc90 	bl	8000188 <__aeabi_dsub>
 8002868:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800286c:	f7fd fe44 	bl	80004f8 <__aeabi_dmul>
 8002870:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002874:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fd fe3c 	bl	80004f8 <__aeabi_dmul>
 8002880:	a37b      	add	r3, pc, #492	@ (adr r3, 8002a70 <__ieee754_pow+0x718>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	4604      	mov	r4, r0
 8002888:	460d      	mov	r5, r1
 800288a:	f7fd fe35 	bl	80004f8 <__aeabi_dmul>
 800288e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002a78 <__ieee754_pow+0x720>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd fc7a 	bl	800018c <__adddf3>
 8002898:	4622      	mov	r2, r4
 800289a:	462b      	mov	r3, r5
 800289c:	f7fd fe2c 	bl	80004f8 <__aeabi_dmul>
 80028a0:	a377      	add	r3, pc, #476	@ (adr r3, 8002a80 <__ieee754_pow+0x728>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fd fc71 	bl	800018c <__adddf3>
 80028aa:	4622      	mov	r2, r4
 80028ac:	462b      	mov	r3, r5
 80028ae:	f7fd fe23 	bl	80004f8 <__aeabi_dmul>
 80028b2:	a375      	add	r3, pc, #468	@ (adr r3, 8002a88 <__ieee754_pow+0x730>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fc68 	bl	800018c <__adddf3>
 80028bc:	4622      	mov	r2, r4
 80028be:	462b      	mov	r3, r5
 80028c0:	f7fd fe1a 	bl	80004f8 <__aeabi_dmul>
 80028c4:	a372      	add	r3, pc, #456	@ (adr r3, 8002a90 <__ieee754_pow+0x738>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f7fd fc5f 	bl	800018c <__adddf3>
 80028ce:	4622      	mov	r2, r4
 80028d0:	462b      	mov	r3, r5
 80028d2:	f7fd fe11 	bl	80004f8 <__aeabi_dmul>
 80028d6:	a370      	add	r3, pc, #448	@ (adr r3, 8002a98 <__ieee754_pow+0x740>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd fc56 	bl	800018c <__adddf3>
 80028e0:	4622      	mov	r2, r4
 80028e2:	4606      	mov	r6, r0
 80028e4:	460f      	mov	r7, r1
 80028e6:	462b      	mov	r3, r5
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fe04 	bl	80004f8 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4630      	mov	r0, r6
 80028f6:	4639      	mov	r1, r7
 80028f8:	f7fd fdfe 	bl	80004f8 <__aeabi_dmul>
 80028fc:	4604      	mov	r4, r0
 80028fe:	460d      	mov	r5, r1
 8002900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	f7fd fc40 	bl	800018c <__adddf3>
 800290c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002910:	f7fd fdf2 	bl	80004f8 <__aeabi_dmul>
 8002914:	4622      	mov	r2, r4
 8002916:	462b      	mov	r3, r5
 8002918:	f7fd fc38 	bl	800018c <__adddf3>
 800291c:	4642      	mov	r2, r8
 800291e:	4682      	mov	sl, r0
 8002920:	468b      	mov	fp, r1
 8002922:	464b      	mov	r3, r9
 8002924:	4640      	mov	r0, r8
 8002926:	4649      	mov	r1, r9
 8002928:	f7fd fde6 	bl	80004f8 <__aeabi_dmul>
 800292c:	2200      	movs	r2, #0
 800292e:	4b68      	ldr	r3, [pc, #416]	@ (8002ad0 <__ieee754_pow+0x778>)
 8002930:	4606      	mov	r6, r0
 8002932:	460f      	mov	r7, r1
 8002934:	f7fd fc2a 	bl	800018c <__adddf3>
 8002938:	4652      	mov	r2, sl
 800293a:	465b      	mov	r3, fp
 800293c:	f7fd fc26 	bl	800018c <__adddf3>
 8002940:	2400      	movs	r4, #0
 8002942:	460d      	mov	r5, r1
 8002944:	4622      	mov	r2, r4
 8002946:	460b      	mov	r3, r1
 8002948:	4640      	mov	r0, r8
 800294a:	4649      	mov	r1, r9
 800294c:	f7fd fdd4 	bl	80004f8 <__aeabi_dmul>
 8002950:	2200      	movs	r2, #0
 8002952:	4680      	mov	r8, r0
 8002954:	4689      	mov	r9, r1
 8002956:	4620      	mov	r0, r4
 8002958:	4629      	mov	r1, r5
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <__ieee754_pow+0x778>)
 800295c:	f7fd fc14 	bl	8000188 <__aeabi_dsub>
 8002960:	4632      	mov	r2, r6
 8002962:	463b      	mov	r3, r7
 8002964:	f7fd fc10 	bl	8000188 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4650      	mov	r0, sl
 800296e:	4659      	mov	r1, fp
 8002970:	f7fd fc0a 	bl	8000188 <__aeabi_dsub>
 8002974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002978:	f7fd fdbe 	bl	80004f8 <__aeabi_dmul>
 800297c:	4622      	mov	r2, r4
 800297e:	4606      	mov	r6, r0
 8002980:	460f      	mov	r7, r1
 8002982:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002986:	462b      	mov	r3, r5
 8002988:	f7fd fdb6 	bl	80004f8 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4630      	mov	r0, r6
 8002992:	4639      	mov	r1, r7
 8002994:	f7fd fbfa 	bl	800018c <__adddf3>
 8002998:	2400      	movs	r4, #0
 800299a:	4606      	mov	r6, r0
 800299c:	460f      	mov	r7, r1
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4640      	mov	r0, r8
 80029a4:	4649      	mov	r1, r9
 80029a6:	f7fd fbf1 	bl	800018c <__adddf3>
 80029aa:	a33d      	add	r3, pc, #244	@ (adr r3, 8002aa0 <__ieee754_pow+0x748>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	4620      	mov	r0, r4
 80029b2:	460d      	mov	r5, r1
 80029b4:	f7fd fda0 	bl	80004f8 <__aeabi_dmul>
 80029b8:	4642      	mov	r2, r8
 80029ba:	464b      	mov	r3, r9
 80029bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd fbe0 	bl	8000188 <__aeabi_dsub>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4630      	mov	r0, r6
 80029ce:	4639      	mov	r1, r7
 80029d0:	f7fd fbda 	bl	8000188 <__aeabi_dsub>
 80029d4:	a334      	add	r3, pc, #208	@ (adr r3, 8002aa8 <__ieee754_pow+0x750>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fd8d 	bl	80004f8 <__aeabi_dmul>
 80029de:	a334      	add	r3, pc, #208	@ (adr r3, 8002ab0 <__ieee754_pow+0x758>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	4606      	mov	r6, r0
 80029e6:	460f      	mov	r7, r1
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fd fd84 	bl	80004f8 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4630      	mov	r0, r6
 80029f6:	4639      	mov	r1, r7
 80029f8:	f7fd fbc8 	bl	800018c <__adddf3>
 80029fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80029fe:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <__ieee754_pow+0x77c>)
 8002a00:	2400      	movs	r4, #0
 8002a02:	4413      	add	r3, r2
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f7fd fbc0 	bl	800018c <__adddf3>
 8002a0c:	4682      	mov	sl, r0
 8002a0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002a10:	468b      	mov	fp, r1
 8002a12:	f7fd fd07 	bl	8000424 <__aeabi_i2d>
 8002a16:	4606      	mov	r6, r0
 8002a18:	460f      	mov	r7, r1
 8002a1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <__ieee754_pow+0x780>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a24:	4652      	mov	r2, sl
 8002a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a2a:	465b      	mov	r3, fp
 8002a2c:	f7fd fbae 	bl	800018c <__adddf3>
 8002a30:	4642      	mov	r2, r8
 8002a32:	464b      	mov	r3, r9
 8002a34:	f7fd fbaa 	bl	800018c <__adddf3>
 8002a38:	4632      	mov	r2, r6
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	f7fd fba6 	bl	800018c <__adddf3>
 8002a40:	4632      	mov	r2, r6
 8002a42:	463b      	mov	r3, r7
 8002a44:	4620      	mov	r0, r4
 8002a46:	460d      	mov	r5, r1
 8002a48:	f7fd fb9e 	bl	8000188 <__aeabi_dsub>
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	f7fd fb9a 	bl	8000188 <__aeabi_dsub>
 8002a54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002a58:	f7fd fb96 	bl	8000188 <__aeabi_dsub>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4650      	mov	r0, sl
 8002a62:	4659      	mov	r1, fp
 8002a64:	e618      	b.n	8002698 <__ieee754_pow+0x340>
 8002a66:	2400      	movs	r4, #0
 8002a68:	e68a      	b.n	8002780 <__ieee754_pow+0x428>
 8002a6a:	2601      	movs	r6, #1
 8002a6c:	e6a0      	b.n	80027b0 <__ieee754_pow+0x458>
 8002a6e:	bf00      	nop
 8002a70:	4a454eef 	.word	0x4a454eef
 8002a74:	3fca7e28 	.word	0x3fca7e28
 8002a78:	93c9db65 	.word	0x93c9db65
 8002a7c:	3fcd864a 	.word	0x3fcd864a
 8002a80:	a91d4101 	.word	0xa91d4101
 8002a84:	3fd17460 	.word	0x3fd17460
 8002a88:	518f264d 	.word	0x518f264d
 8002a8c:	3fd55555 	.word	0x3fd55555
 8002a90:	db6fabff 	.word	0xdb6fabff
 8002a94:	3fdb6db6 	.word	0x3fdb6db6
 8002a98:	33333303 	.word	0x33333303
 8002a9c:	3fe33333 	.word	0x3fe33333
 8002aa0:	e0000000 	.word	0xe0000000
 8002aa4:	3feec709 	.word	0x3feec709
 8002aa8:	dc3a03fd 	.word	0xdc3a03fd
 8002aac:	3feec709 	.word	0x3feec709
 8002ab0:	145b01f5 	.word	0x145b01f5
 8002ab4:	be3e2fe0 	.word	0xbe3e2fe0
 8002ab8:	7ff00000 	.word	0x7ff00000
 8002abc:	43400000 	.word	0x43400000
 8002ac0:	0003988e 	.word	0x0003988e
 8002ac4:	000bb679 	.word	0x000bb679
 8002ac8:	08003b48 	.word	0x08003b48
 8002acc:	3ff00000 	.word	0x3ff00000
 8002ad0:	40080000 	.word	0x40080000
 8002ad4:	08003b28 	.word	0x08003b28
 8002ad8:	08003b38 	.word	0x08003b38
 8002adc:	a39a      	add	r3, pc, #616	@ (adr r3, 8002d48 <__ieee754_pow+0x9f0>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	4639      	mov	r1, r7
 8002ae6:	f7fd fb51 	bl	800018c <__adddf3>
 8002aea:	4642      	mov	r2, r8
 8002aec:	e9cd 0100 	strd	r0, r1, [sp]
 8002af0:	464b      	mov	r3, r9
 8002af2:	4620      	mov	r0, r4
 8002af4:	4629      	mov	r1, r5
 8002af6:	f7fd fb47 	bl	8000188 <__aeabi_dsub>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b02:	f7fd ff89 	bl	8000a18 <__aeabi_dcmpgt>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	f47f ae09 	bne.w	800271e <__ieee754_pow+0x3c6>
 8002b0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b10:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8002b14:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8002b18:	fa43 fa0a 	asr.w	sl, r3, sl
 8002b1c:	44da      	add	sl, fp
 8002b1e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8002b22:	489b      	ldr	r0, [pc, #620]	@ (8002d90 <__ieee754_pow+0xa38>)
 8002b24:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8002b28:	4108      	asrs	r0, r1
 8002b2a:	ea00 030a 	and.w	r3, r0, sl
 8002b2e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002b32:	f1c1 0114 	rsb	r1, r1, #20
 8002b36:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8002b3a:	4640      	mov	r0, r8
 8002b3c:	fa4a fa01 	asr.w	sl, sl, r1
 8002b40:	f1bb 0f00 	cmp.w	fp, #0
 8002b44:	4649      	mov	r1, r9
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	bfb8      	it	lt
 8002b4c:	f1ca 0a00 	rsblt	sl, sl, #0
 8002b50:	f7fd fb1a 	bl	8000188 <__aeabi_dsub>
 8002b54:	4680      	mov	r8, r0
 8002b56:	4689      	mov	r9, r1
 8002b58:	2400      	movs	r4, #0
 8002b5a:	4632      	mov	r2, r6
 8002b5c:	463b      	mov	r3, r7
 8002b5e:	4640      	mov	r0, r8
 8002b60:	4649      	mov	r1, r9
 8002b62:	f7fd fb13 	bl	800018c <__adddf3>
 8002b66:	a37a      	add	r3, pc, #488	@ (adr r3, 8002d50 <__ieee754_pow+0x9f8>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	460d      	mov	r5, r1
 8002b70:	f7fd fcc2 	bl	80004f8 <__aeabi_dmul>
 8002b74:	4642      	mov	r2, r8
 8002b76:	464b      	mov	r3, r9
 8002b78:	e9cd 0100 	strd	r0, r1, [sp]
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	4629      	mov	r1, r5
 8002b80:	f7fd fb02 	bl	8000188 <__aeabi_dsub>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4630      	mov	r0, r6
 8002b8a:	4639      	mov	r1, r7
 8002b8c:	f7fd fafc 	bl	8000188 <__aeabi_dsub>
 8002b90:	a371      	add	r3, pc, #452	@ (adr r3, 8002d58 <__ieee754_pow+0xa00>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd fcaf 	bl	80004f8 <__aeabi_dmul>
 8002b9a:	a371      	add	r3, pc, #452	@ (adr r3, 8002d60 <__ieee754_pow+0xa08>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	4680      	mov	r8, r0
 8002ba2:	4689      	mov	r9, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fca6 	bl	80004f8 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	f7fd faea 	bl	800018c <__adddf3>
 8002bb8:	4604      	mov	r4, r0
 8002bba:	460d      	mov	r5, r1
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bc4:	f7fd fae2 	bl	800018c <__adddf3>
 8002bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002bcc:	4680      	mov	r8, r0
 8002bce:	4689      	mov	r9, r1
 8002bd0:	f7fd fada 	bl	8000188 <__aeabi_dsub>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4620      	mov	r0, r4
 8002bda:	4629      	mov	r1, r5
 8002bdc:	f7fd fad4 	bl	8000188 <__aeabi_dsub>
 8002be0:	4642      	mov	r2, r8
 8002be2:	4606      	mov	r6, r0
 8002be4:	460f      	mov	r7, r1
 8002be6:	464b      	mov	r3, r9
 8002be8:	4640      	mov	r0, r8
 8002bea:	4649      	mov	r1, r9
 8002bec:	f7fd fc84 	bl	80004f8 <__aeabi_dmul>
 8002bf0:	a35d      	add	r3, pc, #372	@ (adr r3, 8002d68 <__ieee754_pow+0xa10>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	460d      	mov	r5, r1
 8002bfa:	f7fd fc7d 	bl	80004f8 <__aeabi_dmul>
 8002bfe:	a35c      	add	r3, pc, #368	@ (adr r3, 8002d70 <__ieee754_pow+0xa18>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fac0 	bl	8000188 <__aeabi_dsub>
 8002c08:	4622      	mov	r2, r4
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	f7fd fc74 	bl	80004f8 <__aeabi_dmul>
 8002c10:	a359      	add	r3, pc, #356	@ (adr r3, 8002d78 <__ieee754_pow+0xa20>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fab9 	bl	800018c <__adddf3>
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f7fd fc6b 	bl	80004f8 <__aeabi_dmul>
 8002c22:	a357      	add	r3, pc, #348	@ (adr r3, 8002d80 <__ieee754_pow+0xa28>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f7fd faae 	bl	8000188 <__aeabi_dsub>
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	462b      	mov	r3, r5
 8002c30:	f7fd fc62 	bl	80004f8 <__aeabi_dmul>
 8002c34:	a354      	add	r3, pc, #336	@ (adr r3, 8002d88 <__ieee754_pow+0xa30>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd faa7 	bl	800018c <__adddf3>
 8002c3e:	4622      	mov	r2, r4
 8002c40:	462b      	mov	r3, r5
 8002c42:	f7fd fc59 	bl	80004f8 <__aeabi_dmul>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	f7fd fa9b 	bl	8000188 <__aeabi_dsub>
 8002c52:	4604      	mov	r4, r0
 8002c54:	460d      	mov	r5, r1
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4640      	mov	r0, r8
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	f7fd fc4b 	bl	80004f8 <__aeabi_dmul>
 8002c62:	2200      	movs	r2, #0
 8002c64:	e9cd 0100 	strd	r0, r1, [sp]
 8002c68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd fa8a 	bl	8000188 <__aeabi_dsub>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c7c:	f7fd fd66 	bl	800074c <__aeabi_ddiv>
 8002c80:	4632      	mov	r2, r6
 8002c82:	4604      	mov	r4, r0
 8002c84:	460d      	mov	r5, r1
 8002c86:	463b      	mov	r3, r7
 8002c88:	4640      	mov	r0, r8
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	f7fd fc34 	bl	80004f8 <__aeabi_dmul>
 8002c90:	4632      	mov	r2, r6
 8002c92:	463b      	mov	r3, r7
 8002c94:	f7fd fa7a 	bl	800018c <__adddf3>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	f7fd fa72 	bl	8000188 <__aeabi_dsub>
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	f7fd fa6e 	bl	8000188 <__aeabi_dsub>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	4938      	ldr	r1, [pc, #224]	@ (8002d94 <__ieee754_pow+0xa3c>)
 8002cb4:	f7fd fa68 	bl	8000188 <__aeabi_dsub>
 8002cb8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8002cbc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8002cc0:	da2e      	bge.n	8002d20 <__ieee754_pow+0x9c8>
 8002cc2:	4652      	mov	r2, sl
 8002cc4:	f000 f874 	bl	8002db0 <scalbn>
 8002cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ccc:	f7ff bbed 	b.w	80024aa <__ieee754_pow+0x152>
 8002cd0:	4c31      	ldr	r4, [pc, #196]	@ (8002d98 <__ieee754_pow+0xa40>)
 8002cd2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002cd6:	42a3      	cmp	r3, r4
 8002cd8:	d91a      	bls.n	8002d10 <__ieee754_pow+0x9b8>
 8002cda:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <__ieee754_pow+0xa44>)
 8002cdc:	440b      	add	r3, r1
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	d009      	beq.n	8002cf6 <__ieee754_pow+0x99e>
 8002ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f7fd fe77 	bl	80009dc <__aeabi_dcmplt>
 8002cee:	3800      	subs	r0, #0
 8002cf0:	bf18      	it	ne
 8002cf2:	2001      	movne	r0, #1
 8002cf4:	e444      	b.n	8002580 <__ieee754_pow+0x228>
 8002cf6:	4642      	mov	r2, r8
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	f7fd fa45 	bl	8000188 <__aeabi_dsub>
 8002cfe:	4632      	mov	r2, r6
 8002d00:	463b      	mov	r3, r7
 8002d02:	f7fd fe7f 	bl	8000a04 <__aeabi_dcmpge>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1eb      	bne.n	8002ce2 <__ieee754_pow+0x98a>
 8002d0a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8002da0 <__ieee754_pow+0xa48>
 8002d0e:	e6fd      	b.n	8002b0c <__ieee754_pow+0x7b4>
 8002d10:	469a      	mov	sl, r3
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <__ieee754_pow+0xa4c>)
 8002d14:	459a      	cmp	sl, r3
 8002d16:	f63f aef9 	bhi.w	8002b0c <__ieee754_pow+0x7b4>
 8002d1a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002d1e:	e71b      	b.n	8002b58 <__ieee754_pow+0x800>
 8002d20:	4621      	mov	r1, r4
 8002d22:	e7d1      	b.n	8002cc8 <__ieee754_pow+0x970>
 8002d24:	2000      	movs	r0, #0
 8002d26:	491b      	ldr	r1, [pc, #108]	@ (8002d94 <__ieee754_pow+0xa3c>)
 8002d28:	f7ff bb34 	b.w	8002394 <__ieee754_pow+0x3c>
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f7ff bb30 	b.w	8002394 <__ieee754_pow+0x3c>
 8002d34:	4650      	mov	r0, sl
 8002d36:	4659      	mov	r1, fp
 8002d38:	f7ff bb2c 	b.w	8002394 <__ieee754_pow+0x3c>
 8002d3c:	460c      	mov	r4, r1
 8002d3e:	f7ff bb79 	b.w	8002434 <__ieee754_pow+0xdc>
 8002d42:	2400      	movs	r4, #0
 8002d44:	f7ff bb64 	b.w	8002410 <__ieee754_pow+0xb8>
 8002d48:	652b82fe 	.word	0x652b82fe
 8002d4c:	3c971547 	.word	0x3c971547
 8002d50:	00000000 	.word	0x00000000
 8002d54:	3fe62e43 	.word	0x3fe62e43
 8002d58:	fefa39ef 	.word	0xfefa39ef
 8002d5c:	3fe62e42 	.word	0x3fe62e42
 8002d60:	0ca86c39 	.word	0x0ca86c39
 8002d64:	be205c61 	.word	0xbe205c61
 8002d68:	72bea4d0 	.word	0x72bea4d0
 8002d6c:	3e663769 	.word	0x3e663769
 8002d70:	c5d26bf1 	.word	0xc5d26bf1
 8002d74:	3ebbbd41 	.word	0x3ebbbd41
 8002d78:	af25de2c 	.word	0xaf25de2c
 8002d7c:	3f11566a 	.word	0x3f11566a
 8002d80:	16bebd93 	.word	0x16bebd93
 8002d84:	3f66c16c 	.word	0x3f66c16c
 8002d88:	5555553e 	.word	0x5555553e
 8002d8c:	3fc55555 	.word	0x3fc55555
 8002d90:	fff00000 	.word	0xfff00000
 8002d94:	3ff00000 	.word	0x3ff00000
 8002d98:	4090cbff 	.word	0x4090cbff
 8002d9c:	3f6f3400 	.word	0x3f6f3400
 8002da0:	4090cc00 	.word	0x4090cc00
 8002da4:	3fe00000 	.word	0x3fe00000

08002da8 <fabs>:
 8002da8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002dac:	4619      	mov	r1, r3
 8002dae:	4770      	bx	lr

08002db0 <scalbn>:
 8002db0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002db4:	4616      	mov	r6, r2
 8002db6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002dba:	4683      	mov	fp, r0
 8002dbc:	468c      	mov	ip, r1
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	b982      	cbnz	r2, 8002de4 <scalbn+0x34>
 8002dc2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002dc6:	4303      	orrs	r3, r0
 8002dc8:	d039      	beq.n	8002e3e <scalbn+0x8e>
 8002dca:	4b2f      	ldr	r3, [pc, #188]	@ (8002e88 <scalbn+0xd8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f7fd fb93 	bl	80004f8 <__aeabi_dmul>
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e8c <scalbn+0xdc>)
 8002dd4:	4683      	mov	fp, r0
 8002dd6:	429e      	cmp	r6, r3
 8002dd8:	468c      	mov	ip, r1
 8002dda:	da0d      	bge.n	8002df8 <scalbn+0x48>
 8002ddc:	a326      	add	r3, pc, #152	@ (adr r3, 8002e78 <scalbn+0xc8>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	e01b      	b.n	8002e1c <scalbn+0x6c>
 8002de4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8002de8:	42ba      	cmp	r2, r7
 8002dea:	d109      	bne.n	8002e00 <scalbn+0x50>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f7fd f9cd 	bl	800018c <__adddf3>
 8002df2:	4683      	mov	fp, r0
 8002df4:	468c      	mov	ip, r1
 8002df6:	e022      	b.n	8002e3e <scalbn+0x8e>
 8002df8:	460b      	mov	r3, r1
 8002dfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002dfe:	3a36      	subs	r2, #54	@ 0x36
 8002e00:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002e04:	428e      	cmp	r6, r1
 8002e06:	dd0c      	ble.n	8002e22 <scalbn+0x72>
 8002e08:	a31d      	add	r3, pc, #116	@ (adr r3, 8002e80 <scalbn+0xd0>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	461c      	mov	r4, r3
 8002e10:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8002e14:	f361 74df 	bfi	r4, r1, #31, #1
 8002e18:	4621      	mov	r1, r4
 8002e1a:	481d      	ldr	r0, [pc, #116]	@ (8002e90 <scalbn+0xe0>)
 8002e1c:	f7fd fb6c 	bl	80004f8 <__aeabi_dmul>
 8002e20:	e7e7      	b.n	8002df2 <scalbn+0x42>
 8002e22:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8002e26:	4432      	add	r2, r6
 8002e28:	428a      	cmp	r2, r1
 8002e2a:	dced      	bgt.n	8002e08 <scalbn+0x58>
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	dd0a      	ble.n	8002e46 <scalbn+0x96>
 8002e30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002e34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002e38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002e3c:	46ac      	mov	ip, r5
 8002e3e:	4658      	mov	r0, fp
 8002e40:	4661      	mov	r1, ip
 8002e42:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002e46:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8002e4a:	da09      	bge.n	8002e60 <scalbn+0xb0>
 8002e4c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8002e50:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8002e54:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8002e58:	480e      	ldr	r0, [pc, #56]	@ (8002e94 <scalbn+0xe4>)
 8002e5a:	f041 011f 	orr.w	r1, r1, #31
 8002e5e:	e7bd      	b.n	8002ddc <scalbn+0x2c>
 8002e60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002e64:	3236      	adds	r2, #54	@ 0x36
 8002e66:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002e6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002e6e:	4658      	mov	r0, fp
 8002e70:	4629      	mov	r1, r5
 8002e72:	2200      	movs	r2, #0
 8002e74:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <scalbn+0xe8>)
 8002e76:	e7d1      	b.n	8002e1c <scalbn+0x6c>
 8002e78:	c2f8f359 	.word	0xc2f8f359
 8002e7c:	01a56e1f 	.word	0x01a56e1f
 8002e80:	8800759c 	.word	0x8800759c
 8002e84:	7e37e43c 	.word	0x7e37e43c
 8002e88:	43500000 	.word	0x43500000
 8002e8c:	ffff3cb0 	.word	0xffff3cb0
 8002e90:	8800759c 	.word	0x8800759c
 8002e94:	c2f8f359 	.word	0xc2f8f359
 8002e98:	3c900000 	.word	0x3c900000

08002e9c <with_errno>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	4616      	mov	r6, r2
 8002ea4:	f7ff f9be 	bl	8002224 <__errno>
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	6006      	str	r6, [r0, #0]
 8002eac:	4620      	mov	r0, r4
 8002eae:	bd70      	pop	{r4, r5, r6, pc}

08002eb0 <xflow>:
 8002eb0:	b513      	push	{r0, r1, r4, lr}
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	b10c      	cbz	r4, 8002ebe <xflow+0xe>
 8002eba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002ebe:	e9cd 2300 	strd	r2, r3, [sp]
 8002ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ec6:	f7fd fb17 	bl	80004f8 <__aeabi_dmul>
 8002eca:	2222      	movs	r2, #34	@ 0x22
 8002ecc:	b002      	add	sp, #8
 8002ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed2:	f7ff bfe3 	b.w	8002e9c <with_errno>

08002ed6 <__math_uflow>:
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002edc:	f7ff bfe8 	b.w	8002eb0 <xflow>

08002ee0 <__math_oflow>:
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8002ee6:	f7ff bfe3 	b.w	8002eb0 <xflow>
	...

08002eec <__ieee754_sqrt>:
 8002eec:	4a67      	ldr	r2, [pc, #412]	@ (800308c <__ieee754_sqrt+0x1a0>)
 8002eee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	4606      	mov	r6, r0
 8002ef6:	460f      	mov	r7, r1
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4604      	mov	r4, r0
 8002efc:	d10e      	bne.n	8002f1c <__ieee754_sqrt+0x30>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f7fd fafa 	bl	80004f8 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4630      	mov	r0, r6
 8002f0a:	4639      	mov	r1, r7
 8002f0c:	f7fd f93e 	bl	800018c <__adddf3>
 8002f10:	4606      	mov	r6, r0
 8002f12:	460f      	mov	r7, r1
 8002f14:	4630      	mov	r0, r6
 8002f16:	4639      	mov	r1, r7
 8002f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	dc0c      	bgt.n	8002f3a <__ieee754_sqrt+0x4e>
 8002f20:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8002f24:	4302      	orrs	r2, r0
 8002f26:	d0f5      	beq.n	8002f14 <__ieee754_sqrt+0x28>
 8002f28:	b189      	cbz	r1, 8002f4e <__ieee754_sqrt+0x62>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	f7fd f92c 	bl	8000188 <__aeabi_dsub>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	f7fd fc0a 	bl	800074c <__aeabi_ddiv>
 8002f38:	e7ea      	b.n	8002f10 <__ieee754_sqrt+0x24>
 8002f3a:	150a      	asrs	r2, r1, #20
 8002f3c:	d115      	bne.n	8002f6a <__ieee754_sqrt+0x7e>
 8002f3e:	2100      	movs	r1, #0
 8002f40:	e009      	b.n	8002f56 <__ieee754_sqrt+0x6a>
 8002f42:	0ae3      	lsrs	r3, r4, #11
 8002f44:	3a15      	subs	r2, #21
 8002f46:	0564      	lsls	r4, r4, #21
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0fa      	beq.n	8002f42 <__ieee754_sqrt+0x56>
 8002f4c:	e7f7      	b.n	8002f3e <__ieee754_sqrt+0x52>
 8002f4e:	460a      	mov	r2, r1
 8002f50:	e7fa      	b.n	8002f48 <__ieee754_sqrt+0x5c>
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	3101      	adds	r1, #1
 8002f56:	02d8      	lsls	r0, r3, #11
 8002f58:	d5fb      	bpl.n	8002f52 <__ieee754_sqrt+0x66>
 8002f5a:	1e48      	subs	r0, r1, #1
 8002f5c:	1a12      	subs	r2, r2, r0
 8002f5e:	f1c1 0020 	rsb	r0, r1, #32
 8002f62:	fa24 f000 	lsr.w	r0, r4, r0
 8002f66:	4303      	orrs	r3, r0
 8002f68:	408c      	lsls	r4, r1
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8002f70:	2116      	movs	r1, #22
 8002f72:	07d2      	lsls	r2, r2, #31
 8002f74:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002f78:	4632      	mov	r2, r6
 8002f7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f82:	bf5c      	itt	pl
 8002f84:	005b      	lslpl	r3, r3, #1
 8002f86:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8002f8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002f8e:	bf58      	it	pl
 8002f90:	0064      	lslpl	r4, r4, #1
 8002f92:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8002f96:	107f      	asrs	r7, r7, #1
 8002f98:	0064      	lsls	r4, r4, #1
 8002f9a:	1815      	adds	r5, r2, r0
 8002f9c:	429d      	cmp	r5, r3
 8002f9e:	bfde      	ittt	le
 8002fa0:	182a      	addle	r2, r5, r0
 8002fa2:	1b5b      	suble	r3, r3, r5
 8002fa4:	1836      	addle	r6, r6, r0
 8002fa6:	0fe5      	lsrs	r5, r4, #31
 8002fa8:	3901      	subs	r1, #1
 8002faa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002fae:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8002fb2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002fb6:	d1f0      	bne.n	8002f9a <__ieee754_sqrt+0xae>
 8002fb8:	460d      	mov	r5, r1
 8002fba:	f04f 0a20 	mov.w	sl, #32
 8002fbe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	eb01 0c00 	add.w	ip, r1, r0
 8002fc8:	db02      	blt.n	8002fd0 <__ieee754_sqrt+0xe4>
 8002fca:	d113      	bne.n	8002ff4 <__ieee754_sqrt+0x108>
 8002fcc:	45a4      	cmp	ip, r4
 8002fce:	d811      	bhi.n	8002ff4 <__ieee754_sqrt+0x108>
 8002fd0:	f1bc 0f00 	cmp.w	ip, #0
 8002fd4:	eb0c 0100 	add.w	r1, ip, r0
 8002fd8:	da42      	bge.n	8003060 <__ieee754_sqrt+0x174>
 8002fda:	2900      	cmp	r1, #0
 8002fdc:	db40      	blt.n	8003060 <__ieee754_sqrt+0x174>
 8002fde:	f102 0e01 	add.w	lr, r2, #1
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	4672      	mov	r2, lr
 8002fe6:	45a4      	cmp	ip, r4
 8002fe8:	bf88      	it	hi
 8002fea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8002fee:	eba4 040c 	sub.w	r4, r4, ip
 8002ff2:	4405      	add	r5, r0
 8002ff4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8002ff8:	f1ba 0a01 	subs.w	sl, sl, #1
 8002ffc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8003000:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003004:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003008:	d1db      	bne.n	8002fc2 <__ieee754_sqrt+0xd6>
 800300a:	431c      	orrs	r4, r3
 800300c:	d01a      	beq.n	8003044 <__ieee754_sqrt+0x158>
 800300e:	4c20      	ldr	r4, [pc, #128]	@ (8003090 <__ieee754_sqrt+0x1a4>)
 8003010:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8003094 <__ieee754_sqrt+0x1a8>
 8003014:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003018:	e9db 2300 	ldrd	r2, r3, [fp]
 800301c:	f7fd f8b4 	bl	8000188 <__aeabi_dsub>
 8003020:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd fce0 	bl	80009f0 <__aeabi_dcmple>
 8003030:	b140      	cbz	r0, 8003044 <__ieee754_sqrt+0x158>
 8003032:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003036:	e9db 2300 	ldrd	r2, r3, [fp]
 800303a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800303e:	d111      	bne.n	8003064 <__ieee754_sqrt+0x178>
 8003040:	4655      	mov	r5, sl
 8003042:	3601      	adds	r6, #1
 8003044:	1072      	asrs	r2, r6, #1
 8003046:	086b      	lsrs	r3, r5, #1
 8003048:	07f1      	lsls	r1, r6, #31
 800304a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800304e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003052:	bf48      	it	mi
 8003054:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8003058:	4618      	mov	r0, r3
 800305a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800305e:	e757      	b.n	8002f10 <__ieee754_sqrt+0x24>
 8003060:	4696      	mov	lr, r2
 8003062:	e7be      	b.n	8002fe2 <__ieee754_sqrt+0xf6>
 8003064:	f7fd f892 	bl	800018c <__adddf3>
 8003068:	e9d4 8900 	ldrd	r8, r9, [r4]
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4640      	mov	r0, r8
 8003072:	4649      	mov	r1, r9
 8003074:	f7fd fcb2 	bl	80009dc <__aeabi_dcmplt>
 8003078:	b120      	cbz	r0, 8003084 <__ieee754_sqrt+0x198>
 800307a:	1ca8      	adds	r0, r5, #2
 800307c:	bf08      	it	eq
 800307e:	3601      	addeq	r6, #1
 8003080:	3502      	adds	r5, #2
 8003082:	e7df      	b.n	8003044 <__ieee754_sqrt+0x158>
 8003084:	1c6b      	adds	r3, r5, #1
 8003086:	f023 0501 	bic.w	r5, r3, #1
 800308a:	e7db      	b.n	8003044 <__ieee754_sqrt+0x158>
 800308c:	7ff00000 	.word	0x7ff00000
 8003090:	20000080 	.word	0x20000080
 8003094:	20000078 	.word	0x20000078

08003098 <_init>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr

080030a4 <_fini>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr
