
MCB20242_Node_WSN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800a208  0800a208  0000b208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a764  0800a764  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a764  0800a764  0000b764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a76c  0800a76c  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a76c  0800a76c  0000b76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a770  0800a770  0000b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a774  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001e0  0800a954  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800a954  0000c570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2b3  00000000  00000000  0000c209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255e  00000000  00000000  000184bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0001aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  0001b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e03  00000000  00000000  0001bf9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001094a  00000000  00000000  00034d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889e1  00000000  00000000  000456e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce0c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a2c  00000000  00000000  000ce10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d2b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1ec 	.word	0x0800a1ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a1ec 	.word	0x0800a1ec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_uldivmod>:
 8001124:	b953      	cbnz	r3, 800113c <__aeabi_uldivmod+0x18>
 8001126:	b94a      	cbnz	r2, 800113c <__aeabi_uldivmod+0x18>
 8001128:	2900      	cmp	r1, #0
 800112a:	bf08      	it	eq
 800112c:	2800      	cmpeq	r0, #0
 800112e:	bf1c      	itt	ne
 8001130:	f04f 31ff 	movne.w	r1, #4294967295
 8001134:	f04f 30ff 	movne.w	r0, #4294967295
 8001138:	f000 b99e 	b.w	8001478 <__aeabi_idiv0>
 800113c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001140:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001144:	f000 f83c 	bl	80011c0 <__udivmoddi4>
 8001148:	f8dd e004 	ldr.w	lr, [sp, #4]
 800114c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <__aeabi_d2lz>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4604      	mov	r4, r0
 800115c:	460d      	mov	r5, r1
 800115e:	f7ff fc37 	bl	80009d0 <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x1c>
 8001164:	4620      	mov	r0, r4
 8001166:	4629      	mov	r1, r5
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4620      	mov	r0, r4
 8001172:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9ad 	bl	80004ec <__aeabi_dmul>
 8001192:	f7ff fc83 	bl	8000a9c <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f92e 	bl	80003f8 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f9a4 	bl	80004ec <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffe6 	bl	800017c <__aeabi_dsub>
 80011b0:	f7ff fc74 	bl	8000a9c <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <__udivmoddi4>:
 80011c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c4:	9d08      	ldr	r5, [sp, #32]
 80011c6:	460c      	mov	r4, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14e      	bne.n	800126a <__udivmoddi4+0xaa>
 80011cc:	4694      	mov	ip, r2
 80011ce:	458c      	cmp	ip, r1
 80011d0:	4686      	mov	lr, r0
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	d962      	bls.n	800129e <__udivmoddi4+0xde>
 80011d8:	b14a      	cbz	r2, 80011ee <__udivmoddi4+0x2e>
 80011da:	f1c2 0320 	rsb	r3, r2, #32
 80011de:	4091      	lsls	r1, r2
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e8:	4319      	orrs	r1, r3
 80011ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80011ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80011f6:	fb07 1114 	mls	r1, r7, r4, r1
 80011fa:	fa1f f68c 	uxth.w	r6, ip
 80011fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001206:	fb04 f106 	mul.w	r1, r4, r6
 800120a:	4299      	cmp	r1, r3
 800120c:	d90a      	bls.n	8001224 <__udivmoddi4+0x64>
 800120e:	eb1c 0303 	adds.w	r3, ip, r3
 8001212:	f104 30ff 	add.w	r0, r4, #4294967295
 8001216:	f080 8110 	bcs.w	800143a <__udivmoddi4+0x27a>
 800121a:	4299      	cmp	r1, r3
 800121c:	f240 810d 	bls.w	800143a <__udivmoddi4+0x27a>
 8001220:	3c02      	subs	r4, #2
 8001222:	4463      	add	r3, ip
 8001224:	1a59      	subs	r1, r3, r1
 8001226:	fbb1 f0f7 	udiv	r0, r1, r7
 800122a:	fb07 1110 	mls	r1, r7, r0, r1
 800122e:	fb00 f606 	mul.w	r6, r0, r6
 8001232:	fa1f f38e 	uxth.w	r3, lr
 8001236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800123a:	429e      	cmp	r6, r3
 800123c:	d90a      	bls.n	8001254 <__udivmoddi4+0x94>
 800123e:	eb1c 0303 	adds.w	r3, ip, r3
 8001242:	f100 31ff 	add.w	r1, r0, #4294967295
 8001246:	f080 80fa 	bcs.w	800143e <__udivmoddi4+0x27e>
 800124a:	429e      	cmp	r6, r3
 800124c:	f240 80f7 	bls.w	800143e <__udivmoddi4+0x27e>
 8001250:	4463      	add	r3, ip
 8001252:	3802      	subs	r0, #2
 8001254:	2100      	movs	r1, #0
 8001256:	1b9b      	subs	r3, r3, r6
 8001258:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800125c:	b11d      	cbz	r5, 8001266 <__udivmoddi4+0xa6>
 800125e:	40d3      	lsrs	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	e9c5 3200 	strd	r3, r2, [r5]
 8001266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126a:	428b      	cmp	r3, r1
 800126c:	d905      	bls.n	800127a <__udivmoddi4+0xba>
 800126e:	b10d      	cbz	r5, 8001274 <__udivmoddi4+0xb4>
 8001270:	e9c5 0100 	strd	r0, r1, [r5]
 8001274:	2100      	movs	r1, #0
 8001276:	4608      	mov	r0, r1
 8001278:	e7f5      	b.n	8001266 <__udivmoddi4+0xa6>
 800127a:	fab3 f183 	clz	r1, r3
 800127e:	2900      	cmp	r1, #0
 8001280:	d146      	bne.n	8001310 <__udivmoddi4+0x150>
 8001282:	42a3      	cmp	r3, r4
 8001284:	d302      	bcc.n	800128c <__udivmoddi4+0xcc>
 8001286:	4290      	cmp	r0, r2
 8001288:	f0c0 80ee 	bcc.w	8001468 <__udivmoddi4+0x2a8>
 800128c:	1a86      	subs	r6, r0, r2
 800128e:	eb64 0303 	sbc.w	r3, r4, r3
 8001292:	2001      	movs	r0, #1
 8001294:	2d00      	cmp	r5, #0
 8001296:	d0e6      	beq.n	8001266 <__udivmoddi4+0xa6>
 8001298:	e9c5 6300 	strd	r6, r3, [r5]
 800129c:	e7e3      	b.n	8001266 <__udivmoddi4+0xa6>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	f040 808f 	bne.w	80013c2 <__udivmoddi4+0x202>
 80012a4:	eba1 040c 	sub.w	r4, r1, ip
 80012a8:	2101      	movs	r1, #1
 80012aa:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ae:	fa1f f78c 	uxth.w	r7, ip
 80012b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80012b6:	fb08 4416 	mls	r4, r8, r6, r4
 80012ba:	fb07 f006 	mul.w	r0, r7, r6
 80012be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d908      	bls.n	80012dc <__udivmoddi4+0x11c>
 80012ca:	eb1c 0303 	adds.w	r3, ip, r3
 80012ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80012d2:	d202      	bcs.n	80012da <__udivmoddi4+0x11a>
 80012d4:	4298      	cmp	r0, r3
 80012d6:	f200 80cb 	bhi.w	8001470 <__udivmoddi4+0x2b0>
 80012da:	4626      	mov	r6, r4
 80012dc:	1a1c      	subs	r4, r3, r0
 80012de:	fbb4 f0f8 	udiv	r0, r4, r8
 80012e2:	fb08 4410 	mls	r4, r8, r0, r4
 80012e6:	fb00 f707 	mul.w	r7, r0, r7
 80012ea:	fa1f f38e 	uxth.w	r3, lr
 80012ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012f2:	429f      	cmp	r7, r3
 80012f4:	d908      	bls.n	8001308 <__udivmoddi4+0x148>
 80012f6:	eb1c 0303 	adds.w	r3, ip, r3
 80012fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80012fe:	d202      	bcs.n	8001306 <__udivmoddi4+0x146>
 8001300:	429f      	cmp	r7, r3
 8001302:	f200 80ae 	bhi.w	8001462 <__udivmoddi4+0x2a2>
 8001306:	4620      	mov	r0, r4
 8001308:	1bdb      	subs	r3, r3, r7
 800130a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800130e:	e7a5      	b.n	800125c <__udivmoddi4+0x9c>
 8001310:	f1c1 0720 	rsb	r7, r1, #32
 8001314:	408b      	lsls	r3, r1
 8001316:	fa22 fc07 	lsr.w	ip, r2, r7
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa24 f607 	lsr.w	r6, r4, r7
 8001322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001326:	fbb6 f8f9 	udiv	r8, r6, r9
 800132a:	fa1f fe8c 	uxth.w	lr, ip
 800132e:	fb09 6618 	mls	r6, r9, r8, r6
 8001332:	fa20 f307 	lsr.w	r3, r0, r7
 8001336:	408c      	lsls	r4, r1
 8001338:	fa00 fa01 	lsl.w	sl, r0, r1
 800133c:	fb08 f00e 	mul.w	r0, r8, lr
 8001340:	431c      	orrs	r4, r3
 8001342:	0c23      	lsrs	r3, r4, #16
 8001344:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001348:	4298      	cmp	r0, r3
 800134a:	fa02 f201 	lsl.w	r2, r2, r1
 800134e:	d90a      	bls.n	8001366 <__udivmoddi4+0x1a6>
 8001350:	eb1c 0303 	adds.w	r3, ip, r3
 8001354:	f108 36ff 	add.w	r6, r8, #4294967295
 8001358:	f080 8081 	bcs.w	800145e <__udivmoddi4+0x29e>
 800135c:	4298      	cmp	r0, r3
 800135e:	d97e      	bls.n	800145e <__udivmoddi4+0x29e>
 8001360:	f1a8 0802 	sub.w	r8, r8, #2
 8001364:	4463      	add	r3, ip
 8001366:	1a1e      	subs	r6, r3, r0
 8001368:	fbb6 f3f9 	udiv	r3, r6, r9
 800136c:	fb09 6613 	mls	r6, r9, r3, r6
 8001370:	fb03 fe0e 	mul.w	lr, r3, lr
 8001374:	b2a4      	uxth	r4, r4
 8001376:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800137a:	45a6      	cmp	lr, r4
 800137c:	d908      	bls.n	8001390 <__udivmoddi4+0x1d0>
 800137e:	eb1c 0404 	adds.w	r4, ip, r4
 8001382:	f103 30ff 	add.w	r0, r3, #4294967295
 8001386:	d266      	bcs.n	8001456 <__udivmoddi4+0x296>
 8001388:	45a6      	cmp	lr, r4
 800138a:	d964      	bls.n	8001456 <__udivmoddi4+0x296>
 800138c:	3b02      	subs	r3, #2
 800138e:	4464      	add	r4, ip
 8001390:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001394:	fba0 8302 	umull	r8, r3, r0, r2
 8001398:	eba4 040e 	sub.w	r4, r4, lr
 800139c:	429c      	cmp	r4, r3
 800139e:	46c6      	mov	lr, r8
 80013a0:	461e      	mov	r6, r3
 80013a2:	d350      	bcc.n	8001446 <__udivmoddi4+0x286>
 80013a4:	d04d      	beq.n	8001442 <__udivmoddi4+0x282>
 80013a6:	b155      	cbz	r5, 80013be <__udivmoddi4+0x1fe>
 80013a8:	ebba 030e 	subs.w	r3, sl, lr
 80013ac:	eb64 0406 	sbc.w	r4, r4, r6
 80013b0:	fa04 f707 	lsl.w	r7, r4, r7
 80013b4:	40cb      	lsrs	r3, r1
 80013b6:	431f      	orrs	r7, r3
 80013b8:	40cc      	lsrs	r4, r1
 80013ba:	e9c5 7400 	strd	r7, r4, [r5]
 80013be:	2100      	movs	r1, #0
 80013c0:	e751      	b.n	8001266 <__udivmoddi4+0xa6>
 80013c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80013c6:	f1c2 0320 	rsb	r3, r2, #32
 80013ca:	40d9      	lsrs	r1, r3
 80013cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013d0:	fa20 f303 	lsr.w	r3, r0, r3
 80013d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80013d8:	fbb1 f0f8 	udiv	r0, r1, r8
 80013dc:	fb08 1110 	mls	r1, r8, r0, r1
 80013e0:	4094      	lsls	r4, r2
 80013e2:	431c      	orrs	r4, r3
 80013e4:	fa1f f78c 	uxth.w	r7, ip
 80013e8:	0c23      	lsrs	r3, r4, #16
 80013ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013ee:	fb00 f107 	mul.w	r1, r0, r7
 80013f2:	4299      	cmp	r1, r3
 80013f4:	d908      	bls.n	8001408 <__udivmoddi4+0x248>
 80013f6:	eb1c 0303 	adds.w	r3, ip, r3
 80013fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80013fe:	d22c      	bcs.n	800145a <__udivmoddi4+0x29a>
 8001400:	4299      	cmp	r1, r3
 8001402:	d92a      	bls.n	800145a <__udivmoddi4+0x29a>
 8001404:	3802      	subs	r0, #2
 8001406:	4463      	add	r3, ip
 8001408:	1a5b      	subs	r3, r3, r1
 800140a:	fbb3 f1f8 	udiv	r1, r3, r8
 800140e:	fb08 3311 	mls	r3, r8, r1, r3
 8001412:	b2a4      	uxth	r4, r4
 8001414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001418:	fb01 f307 	mul.w	r3, r1, r7
 800141c:	42a3      	cmp	r3, r4
 800141e:	d908      	bls.n	8001432 <__udivmoddi4+0x272>
 8001420:	eb1c 0404 	adds.w	r4, ip, r4
 8001424:	f101 36ff 	add.w	r6, r1, #4294967295
 8001428:	d213      	bcs.n	8001452 <__udivmoddi4+0x292>
 800142a:	42a3      	cmp	r3, r4
 800142c:	d911      	bls.n	8001452 <__udivmoddi4+0x292>
 800142e:	3902      	subs	r1, #2
 8001430:	4464      	add	r4, ip
 8001432:	1ae4      	subs	r4, r4, r3
 8001434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001438:	e73b      	b.n	80012b2 <__udivmoddi4+0xf2>
 800143a:	4604      	mov	r4, r0
 800143c:	e6f2      	b.n	8001224 <__udivmoddi4+0x64>
 800143e:	4608      	mov	r0, r1
 8001440:	e708      	b.n	8001254 <__udivmoddi4+0x94>
 8001442:	45c2      	cmp	sl, r8
 8001444:	d2af      	bcs.n	80013a6 <__udivmoddi4+0x1e6>
 8001446:	ebb8 0e02 	subs.w	lr, r8, r2
 800144a:	eb63 060c 	sbc.w	r6, r3, ip
 800144e:	3801      	subs	r0, #1
 8001450:	e7a9      	b.n	80013a6 <__udivmoddi4+0x1e6>
 8001452:	4631      	mov	r1, r6
 8001454:	e7ed      	b.n	8001432 <__udivmoddi4+0x272>
 8001456:	4603      	mov	r3, r0
 8001458:	e79a      	b.n	8001390 <__udivmoddi4+0x1d0>
 800145a:	4630      	mov	r0, r6
 800145c:	e7d4      	b.n	8001408 <__udivmoddi4+0x248>
 800145e:	46b0      	mov	r8, r6
 8001460:	e781      	b.n	8001366 <__udivmoddi4+0x1a6>
 8001462:	4463      	add	r3, ip
 8001464:	3802      	subs	r0, #2
 8001466:	e74f      	b.n	8001308 <__udivmoddi4+0x148>
 8001468:	4606      	mov	r6, r0
 800146a:	4623      	mov	r3, r4
 800146c:	4608      	mov	r0, r1
 800146e:	e711      	b.n	8001294 <__udivmoddi4+0xd4>
 8001470:	3e02      	subs	r6, #2
 8001472:	4463      	add	r3, ip
 8001474:	e732      	b.n	80012dc <__udivmoddi4+0x11c>
 8001476:	bf00      	nop

08001478 <__aeabi_idiv0>:
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <DelayMicro+0x34>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <DelayMicro+0x38>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0ddb      	lsrs	r3, r3, #23
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8001498:	bf00      	nop
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1fa      	bne.n	800149a <DelayMicro+0x1e>
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	ee9bfab5 	.word	0xee9bfab5

080014b8 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 80014ca:	2104      	movs	r1, #4
 80014cc:	480e      	ldr	r0, [pc, #56]	@ (8001508 <dht22_init+0x50>)
 80014ce:	f001 fedb 	bl	8003288 <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 80014d2:	2304      	movs	r3, #4
 80014d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014d6:	2311      	movs	r3, #17
 80014d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	4808      	ldr	r0, [pc, #32]	@ (8001508 <dht22_init+0x50>)
 80014e8:	f001 fd4a 	bl	8002f80 <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 80014ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014f0:	f001 fc14 	bl	8002d1c <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2104      	movs	r1, #4
 80014f8:	4803      	ldr	r0, [pc, #12]	@ (8001508 <dht22_init+0x50>)
 80014fa:	f001 ff98 	bl	800342e <HAL_GPIO_WritePin>

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40010800 	.word	0x40010800

0800150c <DHT22_GetTemp_Humidity>:

uint8_t DHT22_GetTemp_Humidity(float *Temp, float *Humidity)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16, Humid16;
	uint8_t i, j = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2104      	movs	r1, #4
 800151e:	485e      	ldr	r0, [pc, #376]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 8001520:	f001 ff85 	bl	800342e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2104      	movs	r1, #4
 8001528:	485b      	ldr	r0, [pc, #364]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 800152a:	f001 ff80 	bl	800342e <HAL_GPIO_WritePin>
	DelayMicro(100000);
 800152e:	485b      	ldr	r0, [pc, #364]	@ (800169c <DHT22_GetTemp_Humidity+0x190>)
 8001530:	f7ff ffa4 	bl	800147c <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2104      	movs	r1, #4
 8001538:	4857      	ldr	r0, [pc, #348]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 800153a:	f001 ff78 	bl	800342e <HAL_GPIO_WritePin>
	DelayMicro(18000);
 800153e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001542:	f7ff ff9b 	bl	800147c <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);	
 8001546:	2201      	movs	r2, #1
 8001548:	2104      	movs	r1, #4
 800154a:	4853      	ldr	r0, [pc, #332]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 800154c:	f001 ff6f 	bl	800342e <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40 	
 8001550:	2027      	movs	r0, #39	@ 0x27
 8001552:	f7ff ff93 	bl	800147c <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 8001556:	2104      	movs	r1, #4
 8001558:	484f      	ldr	r0, [pc, #316]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 800155a:	f001 ff51 	bl	8003400 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <DHT22_GetTemp_Humidity+0x5c>
	{
		return 0;
 8001564:	2300      	movs	r3, #0
 8001566:	e093      	b.n	8001690 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8001568:	2050      	movs	r0, #80	@ 0x50
 800156a:	f7ff ff87 	bl	800147c <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 800156e:	2104      	movs	r1, #4
 8001570:	4849      	ldr	r0, [pc, #292]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 8001572:	f001 ff45 	bl	8003400 <HAL_GPIO_ReadPin>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <DHT22_GetTemp_Humidity+0x74>
	{
		return 0;
 800157c:	2300      	movs	r3, #0
 800157e:	e087      	b.n	8001690 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8001580:	2050      	movs	r0, #80	@ 0x50
 8001582:	f7ff ff7b 	bl	800147c <DelayMicro>

	for (j=0; j<5; j++)
 8001586:	2300      	movs	r3, #0
 8001588:	757b      	strb	r3, [r7, #21]
 800158a:	e040      	b.n	800160e <DHT22_GetTemp_Humidity+0x102>
	{
		dataArray[j]=0;
 800158c:	7d7b      	ldrb	r3, [r7, #21]
 800158e:	3318      	adds	r3, #24
 8001590:	443b      	add	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i=0; i<8; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	75bb      	strb	r3, [r7, #22]
 800159c:	e031      	b.n	8001602 <DHT22_GetTemp_Humidity+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);	
 800159e:	bf00      	nop
 80015a0:	2104      	movs	r1, #4
 80015a2:	483d      	ldr	r0, [pc, #244]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 80015a4:	f001 ff2c 	bl	8003400 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f8      	beq.n	80015a0 <DHT22_GetTemp_Humidity+0x94>
			DelayMicro(30);
 80015ae:	201e      	movs	r0, #30
 80015b0:	f7ff ff64 	bl	800147c <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 80015b4:	2104      	movs	r1, #4
 80015b6:	4838      	ldr	r0, [pc, #224]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 80015b8:	f001 ff22 	bl	8003400 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d014      	beq.n	80015ec <DHT22_GetTemp_Humidity+0xe0>
				dataArray[j] |= (1<<(7-i));
 80015c2:	7d7b      	ldrb	r3, [r7, #21]
 80015c4:	3318      	adds	r3, #24
 80015c6:	443b      	add	r3, r7
 80015c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	f1c3 0307 	rsb	r3, r3, #7
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	7d7b      	ldrb	r3, [r7, #21]
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	3318      	adds	r3, #24
 80015e6:	443b      	add	r3, r7
 80015e8:	f803 2c10 	strb.w	r2, [r3, #-16]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);				
 80015ec:	bf00      	nop
 80015ee:	2104      	movs	r1, #4
 80015f0:	4829      	ldr	r0, [pc, #164]	@ (8001698 <DHT22_GetTemp_Humidity+0x18c>)
 80015f2:	f001 ff05 	bl	8003400 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d0f8      	beq.n	80015ee <DHT22_GetTemp_Humidity+0xe2>
		for(i=0; i<8; i++)
 80015fc:	7dbb      	ldrb	r3, [r7, #22]
 80015fe:	3301      	adds	r3, #1
 8001600:	75bb      	strb	r3, [r7, #22]
 8001602:	7dbb      	ldrb	r3, [r7, #22]
 8001604:	2b07      	cmp	r3, #7
 8001606:	d9ca      	bls.n	800159e <DHT22_GetTemp_Humidity+0x92>
	for (j=0; j<5; j++)
 8001608:	7d7b      	ldrb	r3, [r7, #21]
 800160a:	3301      	adds	r3, #1
 800160c:	757b      	strb	r3, [r7, #21]
 800160e:	7d7b      	ldrb	r3, [r7, #21]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d9bb      	bls.n	800158c <DHT22_GetTemp_Humidity+0x80>
		}
	}
	myChecksum = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 8001618:	2300      	movs	r3, #0
 800161a:	753b      	strb	r3, [r7, #20]
 800161c:	e00a      	b.n	8001634 <DHT22_GetTemp_Humidity+0x128>
	{
		myChecksum += dataArray[k];
 800161e:	7d3b      	ldrb	r3, [r7, #20]
 8001620:	3318      	adds	r3, #24
 8001622:	443b      	add	r3, r7
 8001624:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	4413      	add	r3, r2
 800162c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 800162e:	7d3b      	ldrb	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	753b      	strb	r3, [r7, #20]
 8001634:	7d3b      	ldrb	r3, [r7, #20]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d9f1      	bls.n	800161e <DHT22_GetTemp_Humidity+0x112>
	}

		Temp16 = (dataArray[2] <<8) | dataArray[3];
 800163a:	7abb      	ldrb	r3, [r7, #10]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21a      	sxth	r2, r3
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	827b      	strh	r3, [r7, #18]
		Humid16 = (dataArray[0] <<8) | dataArray[1];
 800164a:	7a3b      	ldrb	r3, [r7, #8]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	823b      	strh	r3, [r7, #16]
		
		*Temp = Temp16/10.0f;
 800165a:	8a7b      	ldrh	r3, [r7, #18]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fb47 	bl	8000cf0 <__aeabi_i2f>
 8001662:	4603      	mov	r3, r0
 8001664:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <DHT22_GetTemp_Humidity+0x194>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc4a 	bl	8000f00 <__aeabi_fdiv>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	601a      	str	r2, [r3, #0]
		*Humidity = Humid16/10.0f;
 8001674:	8a3b      	ldrh	r3, [r7, #16]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb3a 	bl	8000cf0 <__aeabi_i2f>
 800167c:	4603      	mov	r3, r0
 800167e:	4908      	ldr	r1, [pc, #32]	@ (80016a0 <DHT22_GetTemp_Humidity+0x194>)
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fc3d 	bl	8000f00 <__aeabi_fdiv>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	601a      	str	r2, [r3, #0]
		return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40010800 	.word	0x40010800
 800169c:	000186a0 	.word	0x000186a0
 80016a0:	41200000 	.word	0x41200000

080016a4 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6958      	ldr	r0, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	4619      	mov	r1, r3
 80016d0:	f001 fead 	bl	800342e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6998      	ldr	r0, [r3, #24]
 80016da:	f107 010f 	add.w	r1, r7, #15
 80016de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e2:	2201      	movs	r2, #1
 80016e4:	f002 fe6f 	bl	80043c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80016e8:	bf00      	nop
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fa6e 	bl	8004bd2 <HAL_SPI_GetState>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d1f6      	bne.n	80016ea <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6998      	ldr	r0, [r3, #24]
 8001702:	f107 010e 	add.w	r1, r7, #14
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	2201      	movs	r2, #1
 800170c:	f002 ff9f 	bl	800464e <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8001710:	bf00      	nop
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fa5a 	bl	8004bd2 <HAL_SPI_GetState>
 800171e:	4603      	mov	r3, r0
 8001720:	2b01      	cmp	r3, #1
 8001722:	d1f6      	bne.n	8001712 <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6958      	ldr	r0, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	b29b      	uxth	r3, r3
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	f001 fe7a 	bl	800342e <HAL_GPIO_WritePin>
	return rxByte;
 800173a:	7bbb      	ldrb	r3, [r7, #14]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
 8001750:	4613      	mov	r3, r2
 8001752:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800175a:	b2db      	uxtb	r3, r3
 800175c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6958      	ldr	r0, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	b29b      	uxth	r3, r3
 800176c:	2200      	movs	r2, #0
 800176e:	4619      	mov	r1, r3
 8001770:	f001 fe5d 	bl	800342e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6998      	ldr	r0, [r3, #24]
 800177a:	f107 010f 	add.w	r1, r7, #15
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	2201      	movs	r2, #1
 8001784:	f002 fe1f 	bl	80043c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8001788:	bf00      	nop
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fa1e 	bl	8004bd2 <HAL_SPI_GetState>
 8001796:	4603      	mov	r3, r0
 8001798:	2b01      	cmp	r3, #1
 800179a:	d1f6      	bne.n	800178a <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6998      	ldr	r0, [r3, #24]
 80017a2:	1cb9      	adds	r1, r7, #2
 80017a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a8:	2201      	movs	r2, #1
 80017aa:	f002 fe0c 	bl	80043c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80017ae:	bf00      	nop
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fa0b 	bl	8004bd2 <HAL_SPI_GetState>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d1f6      	bne.n	80017b0 <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6958      	ldr	r0, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2201      	movs	r2, #1
 80017d2:	4619      	mov	r1, r3
 80017d4:	f001 fe2b 	bl	800342e <HAL_GPIO_WritePin>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <lora_init>:



uint8_t lora_init(lora_t * module){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6858      	ldr	r0, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	f001 fe18 	bl	800342e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80017fe:	200a      	movs	r0, #10
 8001800:	f001 fa8c 	bl	8002d1c <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6858      	ldr	r0, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	2201      	movs	r2, #1
 8001814:	4619      	mov	r1, r3
 8001816:	f001 fe0a 	bl	800342e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800181a:	200a      	movs	r0, #10
 800181c:	f001 fa7e 	bl	8002d1c <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 8001820:	2142      	movs	r1, #66	@ 0x42
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff3e 	bl	80016a4 <lora_read_reg>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2b12      	cmp	r3, #18
 8001830:	d001      	beq.n	8001836 <lora_init+0x56>
		return 1;
 8001832:	2301      	movs	r3, #1
 8001834:	e052      	b.n	80018dc <lora_init+0xfc>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	2101      	movs	r1, #1
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff82 	bl	8001744 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	4a27      	ldr	r2, [pc, #156]	@ (80018e4 <lora_init+0x104>)
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f964 	bl	8001b1c <lora_set_frequency>
	lora_set_bandwidth(module, BANDWIDTH[module->bandwidth]);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	795b      	ldrb	r3, [r3, #5]
 8001858:	461a      	mov	r2, r3
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <lora_init+0x108>)
 800185c:	5c9b      	ldrb	r3, [r3, r2]
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f9a1 	bl	8001ba8 <lora_set_bandwidth>
	lora_set_gain(module,module->powergain);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	799b      	ldrb	r3, [r3, #6]
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f9bd 	bl	8001bec <lora_set_gain>
	lora_set_spreading_factor(module, module->spreadingfactor);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	79db      	ldrb	r3, [r3, #7]
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9db 	bl	8001c34 <lora_set_spreading_factor>
	lora_set_coding_rate(module, module->codingrate);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7a1b      	ldrb	r3, [r3, #8]
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa01 	bl	8001c8c <lora_set_coding_rate>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	210e      	movs	r1, #14
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff58 	bl	8001744 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	210f      	movs	r1, #15
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff53 	bl	8001744 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 800189e:	210c      	movs	r1, #12
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff feff 	bl	80016a4 <lora_read_reg>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f043 0303 	orr.w	r3, r3, #3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	210c      	movs	r1, #12
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff44 	bl	8001744 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 80018bc:	2204      	movs	r2, #4
 80018be:	2126      	movs	r1, #38	@ 0x26
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff3f 	bl	8001744 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 80018c6:	228f      	movs	r2, #143	@ 0x8f
 80018c8:	2109      	movs	r1, #9
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff3a 	bl	8001744 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 80018d0:	2281      	movs	r2, #129	@ 0x81
 80018d2:	2101      	movs	r1, #1
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff35 	bl	8001744 <lora_write_reg>
	return 0;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0800a2b0 	.word	0x0800a2b0
 80018e8:	0800a2d0 	.word	0x0800a2d0

080018ec <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 80018f8:	2112      	movs	r1, #18
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fed2 	bl	80016a4 <lora_read_reg>
 8001900:	4603      	mov	r3, r0
 8001902:	60bb      	str	r3, [r7, #8]
	//ret = lora_read_reg(module, REG_MODEM_CONFIG_1);
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 8001904:	2272      	movs	r2, #114	@ 0x72
 8001906:	211d      	movs	r1, #29
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff1b 	bl	8001744 <lora_write_reg>
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	2112      	movs	r1, #18
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff14 	bl	8001744 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01d      	beq.n	8001962 <lora_prasePacket+0x76>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d118      	bne.n	8001962 <lora_prasePacket+0x76>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 8001930:	2113      	movs	r1, #19
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff feb6 	bl	80016a4 <lora_read_reg>
 8001938:	4603      	mov	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 800193c:	2110      	movs	r1, #16
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff feb0 	bl	80016a4 <lora_read_reg>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	210d      	movs	r1, #13
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fefa 	bl	8001744 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8001950:	2281      	movs	r2, #129	@ 0x81
 8001952:	2101      	movs	r1, #1
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fef5 	bl	8001744 <lora_write_reg>
		packetIndex = 0;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <lora_prasePacket+0xb4>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e010      	b.n	8001984 <lora_prasePacket+0x98>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001962:	2101      	movs	r1, #1
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fe9d 	bl	80016a4 <lora_read_reg>
 800196a:	4603      	mov	r3, r0
 800196c:	2b86      	cmp	r3, #134	@ 0x86
 800196e:	d009      	beq.n	8001984 <lora_prasePacket+0x98>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	210d      	movs	r1, #13
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fee5 	bl	8001744 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800197a:	2286      	movs	r2, #134	@ 0x86
 800197c:	2101      	movs	r1, #1
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fee0 	bl	8001744 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <lora_prasePacket+0xa8>
		return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e000      	b.n	8001996 <lora_prasePacket+0xaa>
	}
	return packetLength;
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001fc 	.word	0x200001fc

080019a4 <lora_available>:

uint8_t lora_available(lora_t * module){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 80019ac:	2113      	movs	r1, #19
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fe78 	bl	80016a4 <lora_read_reg>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <lora_available+0x24>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b2db      	uxtb	r3, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200001fc 	.word	0x200001fc

080019cc <lora_read>:

uint8_t lora_read(lora_t * module){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ffe5 	bl	80019a4 <lora_available>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <lora_read+0x18>
		return 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e00a      	b.n	80019fa <lora_read+0x2e>
	packetIndex++;
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <lora_read+0x38>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <lora_read+0x38>)
 80019ee:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 80019f0:	2100      	movs	r1, #0
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fe56 	bl	80016a4 <lora_read_reg>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200001fc 	.word	0x200001fc

08001a08 <lora_begin_packet>:

uint8_t lora_begin_packet(lora_t * module){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	//int ret;
	if ((lora_read_reg(module, REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8001a10:	2101      	movs	r1, #1
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fe46 	bl	80016a4 <lora_read_reg>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d101      	bne.n	8001a26 <lora_begin_packet+0x1e>
    return 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e014      	b.n	8001a50 <lora_begin_packet+0x48>
  }
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001a26:	2281      	movs	r2, #129	@ 0x81
 8001a28:	2101      	movs	r1, #1
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fe8a 	bl	8001744 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 8001a30:	2272      	movs	r2, #114	@ 0x72
 8001a32:	211d      	movs	r1, #29
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fe85 	bl	8001744 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	210d      	movs	r1, #13
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fe80 	bl	8001744 <lora_write_reg>
  lora_write_reg(module, REG_PAYLOAD_LENGTH, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2122      	movs	r1, #34	@ 0x22
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fe7b 	bl	8001744 <lora_write_reg>
	return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <lora_tx>:

void lora_tx(lora_t * module, uint8_t * buf, uint8_t size){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71fb      	strb	r3, [r7, #7]
	int currentLength = lora_read_reg(module, REG_PAYLOAD_LENGTH);
 8001a66:	2122      	movs	r1, #34	@ 0x22
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fe1b 	bl	80016a4 <lora_read_reg>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	613b      	str	r3, [r7, #16]
  if ((currentLength + size > MAX_PKT_LENGTH)){
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4413      	add	r3, r2
 8001a78:	2bff      	cmp	r3, #255	@ 0xff
 8001a7a:	dd03      	ble.n	8001a84 <lora_tx+0x2c>
    size = MAX_PKT_LENGTH - currentLength;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	71fb      	strb	r3, [r7, #7]
  }

  for (int i = 0; i < size; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e00b      	b.n	8001aa2 <lora_tx+0x4a>
    lora_write_reg(module, REG_FIFO, buf[i]);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	2100      	movs	r1, #0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fe54 	bl	8001744 <lora_write_reg>
  for (int i = 0; i < size; i++) {
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbef      	blt.n	8001a8a <lora_tx+0x32>
  }
  lora_write_reg(module, REG_PAYLOAD_LENGTH, currentLength + size);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2122      	movs	r1, #34	@ 0x22
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff fe43 	bl	8001744 <lora_write_reg>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <lora_end_packet>:

uint8_t lora_end_packet(lora_t * module){
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 8001ace:	2364      	movs	r3, #100	@ 0x64
 8001ad0:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001ad2:	2283      	movs	r2, #131	@ 0x83
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fe34 	bl	8001744 <lora_write_reg>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001adc:	e00a      	b.n	8001af4 <lora_end_packet+0x2e>
		if(--timeout==0){
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <lora_end_packet+0x2e>
			HAL_Delay(1);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f001 f916 	bl	8002d1c <HAL_Delay>
			return 1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e00e      	b.n	8001b12 <lora_end_packet+0x4c>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001af4:	2112      	movs	r1, #18
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fdd4 	bl	80016a4 <lora_read_reg>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0eb      	beq.n	8001ade <lora_end_packet+0x18>
		}
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001b06:	2208      	movs	r2, #8
 8001b08:	2112      	movs	r1, #18
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fe1a 	bl	8001744 <lora_write_reg>
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <lora_set_frequency>:

void lora_set_frequency(lora_t * module, uint64_t freq){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8001b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	04d9      	lsls	r1, r3, #19
 8001b36:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001b3a:	04d0      	lsls	r0, r2, #19
 8001b3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <lora_set_frequency+0x88>)
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	f7ff faef 	bl	8001124 <__aeabi_uldivmod>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001b4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	0c02      	lsrs	r2, r0, #16
 8001b5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b60:	0c0b      	lsrs	r3, r1, #16
 8001b62:	b2d3      	uxtb	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	2106      	movs	r1, #6
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff fdeb 	bl	8001744 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 8001b6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	0a02      	lsrs	r2, r0, #8
 8001b7c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b80:	0a0b      	lsrs	r3, r1, #8
 8001b82:	b2d3      	uxtb	r3, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	2107      	movs	r1, #7
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff fddb 	bl	8001744 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001b8e:	7c3b      	ldrb	r3, [r7, #16]
 8001b90:	461a      	mov	r2, r3
 8001b92:	2108      	movs	r1, #8
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff fdd5 	bl	8001744 <lora_write_reg>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	01e84800 	.word	0x01e84800

08001ba8 <lora_set_bandwidth>:
void lora_set_bandwidth(lora_t * module, uint8_t bandwidth){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
	uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 8001bb4:	211d      	movs	r1, #29
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fd74 	bl	80016a4 <lora_read_reg>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
	modem_config_1 &= 0x0F;                // Xóa các bit 7-4
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	73fb      	strb	r3, [r7, #15]
	modem_config_1 |= (bandwidth << 4);    // Thiết lập bandwidth
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	b25a      	sxtb	r2, r3
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	211d      	movs	r1, #29
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fdb0 	bl	8001744 <lora_write_reg>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <lora_set_gain>:
void lora_set_gain(lora_t * module, uint8_t power_gain){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
    // Đọc giá trị hiện tại của thanh ghi REG_PA_CONFIG
    uint8_t pa_config = lora_read_reg(module, REG_PA_CONFIG);
 8001bf8:	2109      	movs	r1, #9
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fd52 	bl	80016a4 <lora_read_reg>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit liên quan đến công suất phát (bit 0-3)
    pa_config &= 0xF0;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	f023 030f 	bic.w	r3, r3, #15
 8001c0a:	73fb      	strb	r3, [r7, #15]
    // Gán giá trị power_gain trực tiếp vào các bit 0-3
    pa_config |= (power_gain & 0x0F);  // Chỉ lấy phần liên quan đến các bit 0-3
 8001c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị mới vào thanh ghi REG_PA_CONFIG
    lora_write_reg(module, REG_PA_CONFIG, pa_config);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	461a      	mov	r2, r3
 8001c24:	2109      	movs	r1, #9
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fd8c 	bl	8001744 <lora_write_reg>
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <lora_set_spreading_factor>:
void lora_set_spreading_factor(lora_t *module, uint8_t spreading_factor) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị spreading factor có hợp lệ không
    if (spreading_factor < SF_7) {
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d801      	bhi.n	8001c4a <lora_set_spreading_factor+0x16>
        // Nếu SF < 7 thì set = 7
    	spreading_factor =7;
 8001c46:	2307      	movs	r3, #7
 8001c48:	70fb      	strb	r3, [r7, #3]
    }
    if (spreading_factor > SF_12) {
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	d901      	bls.n	8001c54 <lora_set_spreading_factor+0x20>
        // Nếu SF > 7 thì set = 12
    	spreading_factor =12;
 8001c50:	230c      	movs	r3, #12
 8001c52:	70fb      	strb	r3, [r7, #3]
        }
    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_2
    uint8_t modem_config_2 = lora_read_reg(module, REG_MODEM_CONFIG_2);
 8001c54:	211e      	movs	r1, #30
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fd24 	bl	80016a4 <lora_read_reg>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit 7-4 (liên quan đến SF) để chuẩn bị ghi giá trị mới
    modem_config_2 &= 0x0F;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	73fb      	strb	r3, [r7, #15]
    // Thiết lập giá trị spreading factor mới
    modem_config_2 |= (spreading_factor << 4);
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	b25a      	sxtb	r2, r3
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị vào REG_MODEM_CONFIG_2
    lora_write_reg(module, REG_MODEM_CONFIG_2, modem_config_2);
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	211e      	movs	r1, #30
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fd60 	bl	8001744 <lora_write_reg>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <lora_set_coding_rate>:
void lora_set_coding_rate(lora_t *module, uint8_t coding_rate) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị coding rate < 1 thì set = 1
    if (coding_rate < CR_4_5) {
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <lora_set_coding_rate+0x16>
        coding_rate =1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	70fb      	strb	r3, [r7, #3]
    }
    // Kiểm tra giá trị coding rate > 1 thì set = 4
       if (coding_rate > CR_4_8) {
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d901      	bls.n	8001cac <lora_set_coding_rate+0x20>
           coding_rate = 4;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	70fb      	strb	r3, [r7, #3]
       }
    HAL_Delay(1); // Thêm độ trễ để ổn định trước khi thực hiện bất kỳ tác vụ nào
 8001cac:	2001      	movs	r0, #1
 8001cae:	f001 f835 	bl	8002d1c <HAL_Delay>

    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_1
    uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 8001cb2:	211d      	movs	r1, #29
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fcf5 	bl	80016a4 <lora_read_reg>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi để đảm bảo đọc hoàn tất
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f001 f82c 	bl	8002d1c <HAL_Delay>

    // Xóa các bit 3-1 (liên quan đến CR) để chuẩn bị ghi giá trị mới
    modem_config_1 &= 0xF1;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	f023 030e 	bic.w	r3, r3, #14
 8001cca:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi cập nhật giá trị trong bộ nhớ tạm
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f001 f825 	bl	8002d1c <HAL_Delay>

    // Thiết lập giá trị coding rate mới (CR nằm ở bit 3-1)
    modem_config_1 |= (coding_rate << 1);
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b25a      	sxtb	r2, r3
 8001cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi chuẩn bị giá trị mới
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f001 f81a 	bl	8002d1c <HAL_Delay>

    // Ghi lại giá trị vào REG_MODEM_CONFIG_1
    lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	461a      	mov	r2, r3
 8001cec:	211d      	movs	r1, #29
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fd28 	bl	8001744 <lora_write_reg>
    HAL_Delay(1); // Đợi để đảm bảo quá trình ghi vào thanh ghi hoàn tất
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f001 f811 	bl	8002d1c <HAL_Delay>
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <__io_putchar>:
		#define PUTCHAR_PROTOTYPE int	__io_putchar(int ch)
#else
		#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
 PUTCHAR_PROTOTYPE
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1,0xFFFF);
 8001d0c:	1d39      	adds	r1, r7, #4
 8001d0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d12:	2201      	movs	r2, #1
 8001d14:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <__io_putchar+0x20>)
 8001d16:	f003 f8c4 	bl	8004ea2 <HAL_UART_Transmit>
	return ch;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	2000026c 	.word	0x2000026c

08001d28 <listen_Broadcast>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void listen_Broadcast(void){
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
	//cấu hình lora
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d30:	4a4c      	ldr	r2, [pc, #304]	@ (8001e64 <listen_Broadcast+0x13c>)
 8001d32:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 8001d34:	4b4a      	ldr	r3, [pc, #296]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;				// NSS pin to which port is connected
 8001d3a:	4b49      	ldr	r3, [pc, #292]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e68 <listen_Broadcast+0x140>)
 8001d3e:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;					// NSS pin to which pin is connected
 8001d40:	4b47      	ldr	r3, [pc, #284]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d42:	2210      	movs	r2, #16
 8001d44:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;			// RESET pin to which port is connected
 8001d46:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d48:	4a46      	ldr	r2, [pc, #280]	@ (8001e64 <listen_Broadcast+0x13c>)
 8001d4a:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;			// RESET pin to which pin is connected
 8001d4c:	4b44      	ldr	r3, [pc, #272]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001d52:	4b43      	ldr	r3, [pc, #268]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d54:	4a45      	ldr	r2, [pc, #276]	@ (8001e6c <listen_Broadcast+0x144>)
 8001d56:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <listen_Broadcast+0x148>)
 8001d5a:	4a41      	ldr	r2, [pc, #260]	@ (8001e60 <listen_Broadcast+0x138>)
 8001d5c:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;								// 433MHZ Frequency
 8001d5e:	4b44      	ldr	r3, [pc, #272]	@ (8001e70 <listen_Broadcast+0x148>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	711a      	strb	r2, [r3, #4]
	//lora.frequency = FREQ_865MHZ;								// 865MHZ Frequency
	//lora.frequency = FREQ_866MHZ;								// 866MHZ Frequency
	//lora.frequency = FREQ_867MHZ;								// 867MHZ Frequency
	lora.bandwidth = BW_125KHz;
 8001d64:	4b42      	ldr	r3, [pc, #264]	@ (8001e70 <listen_Broadcast+0x148>)
 8001d66:	2207      	movs	r2, #7
 8001d68:	715a      	strb	r2, [r3, #5]
	lora.powergain = POWER_20db;
 8001d6a:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <listen_Broadcast+0x148>)
 8001d6c:	22ff      	movs	r2, #255	@ 0xff
 8001d6e:	719a      	strb	r2, [r3, #6]
	lora.spreadingfactor = SF_7;
 8001d70:	4b3f      	ldr	r3, [pc, #252]	@ (8001e70 <listen_Broadcast+0x148>)
 8001d72:	2207      	movs	r2, #7
 8001d74:	71da      	strb	r2, [r3, #7]
	lora.codingrate = CR_4_5;
 8001d76:	4b3e      	ldr	r3, [pc, #248]	@ (8001e70 <listen_Broadcast+0x148>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	721a      	strb	r2, [r3, #8]
	sprintf(msg,"Configuring LoRa module\r\n");
 8001d7c:	493d      	ldr	r1, [pc, #244]	@ (8001e74 <listen_Broadcast+0x14c>)
 8001d7e:	483e      	ldr	r0, [pc, #248]	@ (8001e78 <listen_Broadcast+0x150>)
 8001d80:	f004 f9c6 	bl	8006110 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)msg,strlen(msg),1000);
 8001d84:	483c      	ldr	r0, [pc, #240]	@ (8001e78 <listen_Broadcast+0x150>)
 8001d86:	f7fe f9ed 	bl	8000164 <strlen>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	4939      	ldr	r1, [pc, #228]	@ (8001e78 <listen_Broadcast+0x150>)
 8001d94:	4839      	ldr	r0, [pc, #228]	@ (8001e7c <listen_Broadcast+0x154>)
 8001d96:	f003 f884 	bl	8004ea2 <HAL_UART_Transmit>

	while(lora_init(&lora)){										// Initialize the lora module
 8001d9a:	e012      	b.n	8001dc2 <listen_Broadcast+0x9a>
		sprintf(msg,"LoRa Failed\r\n");
 8001d9c:	4938      	ldr	r1, [pc, #224]	@ (8001e80 <listen_Broadcast+0x158>)
 8001d9e:	4836      	ldr	r0, [pc, #216]	@ (8001e78 <listen_Broadcast+0x150>)
 8001da0:	f004 f9b6 	bl	8006110 <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t *)msg,strlen(msg),1000);
 8001da4:	4834      	ldr	r0, [pc, #208]	@ (8001e78 <listen_Broadcast+0x150>)
 8001da6:	f7fe f9dd 	bl	8000164 <strlen>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db2:	4931      	ldr	r1, [pc, #196]	@ (8001e78 <listen_Broadcast+0x150>)
 8001db4:	4831      	ldr	r0, [pc, #196]	@ (8001e7c <listen_Broadcast+0x154>)
 8001db6:	f003 f874 	bl	8004ea2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dbe:	f000 ffad 	bl	8002d1c <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 8001dc2:	482b      	ldr	r0, [pc, #172]	@ (8001e70 <listen_Broadcast+0x148>)
 8001dc4:	f7ff fd0c 	bl	80017e0 <lora_init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e6      	bne.n	8001d9c <listen_Broadcast+0x74>
	}
	sprintf(msg,"Done configuring LoRaModule\r\n");
 8001dce:	492d      	ldr	r1, [pc, #180]	@ (8001e84 <listen_Broadcast+0x15c>)
 8001dd0:	4829      	ldr	r0, [pc, #164]	@ (8001e78 <listen_Broadcast+0x150>)
 8001dd2:	f004 f99d 	bl	8006110 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)msg,strlen(msg),1000);
 8001dd6:	4828      	ldr	r0, [pc, #160]	@ (8001e78 <listen_Broadcast+0x150>)
 8001dd8:	f7fe f9c4 	bl	8000164 <strlen>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de4:	4924      	ldr	r1, [pc, #144]	@ (8001e78 <listen_Broadcast+0x150>)
 8001de6:	4825      	ldr	r0, [pc, #148]	@ (8001e7c <listen_Broadcast+0x154>)
 8001de8:	f003 f85b 	bl	8004ea2 <HAL_UART_Transmit>
	uint8_t ret =0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
	while(!ret){
 8001df0:	e02c      	b.n	8001e4c <listen_Broadcast+0x124>
	  ret = lora_prasePacket(&lora);
 8001df2:	481f      	ldr	r0, [pc, #124]	@ (8001e70 <listen_Broadcast+0x148>)
 8001df4:	f7ff fd7a 	bl	80018ec <lora_prasePacket>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
	  if(ret){
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d024      	beq.n	8001e4c <listen_Broadcast+0x124>
	   //Nhận gói tin
	   uint8_t i = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	71bb      	strb	r3, [r7, #6]
	    while (lora_available(&lora)) {
 8001e06:	e00a      	b.n	8001e1e <listen_Broadcast+0xf6>
	   buf[i++] = lora_read(&lora);
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	71ba      	strb	r2, [r7, #6]
 8001e0e:	461c      	mov	r4, r3
 8001e10:	4817      	ldr	r0, [pc, #92]	@ (8001e70 <listen_Broadcast+0x148>)
 8001e12:	f7ff fddb 	bl	80019cc <lora_read>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <listen_Broadcast+0x160>)
 8001e1c:	551a      	strb	r2, [r3, r4]
	    while (lora_available(&lora)) {
 8001e1e:	4814      	ldr	r0, [pc, #80]	@ (8001e70 <listen_Broadcast+0x148>)
 8001e20:	f7ff fdc0 	bl	80019a4 <lora_available>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ee      	bne.n	8001e08 <listen_Broadcast+0xe0>
	   }
	   buf[i] = '\0'; // Kết thúc chuỗi
 8001e2a:	79bb      	ldrb	r3, [r7, #6]
 8001e2c:	4a16      	ldr	r2, [pc, #88]	@ (8001e88 <listen_Broadcast+0x160>)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	54d1      	strb	r1, [r2, r3]
//	   sprintf(data_receive,"Da nhan duoc broadcast: %s\r\n",buf);
//	   HAL_UART_Transmit(&huart3, (uint8_t*)data_receive, strlen(data_receive), HAL_MAX_DELAY);
	   sprintf(data_receive,buf);
 8001e32:	4915      	ldr	r1, [pc, #84]	@ (8001e88 <listen_Broadcast+0x160>)
 8001e34:	4815      	ldr	r0, [pc, #84]	@ (8001e8c <listen_Broadcast+0x164>)
 8001e36:	f004 f96b 	bl	8006110 <siprintf>
	   if(!strcmp(data_receive, "RG0P")){
 8001e3a:	4915      	ldr	r1, [pc, #84]	@ (8001e90 <listen_Broadcast+0x168>)
 8001e3c:	4813      	ldr	r0, [pc, #76]	@ (8001e8c <listen_Broadcast+0x164>)
 8001e3e:	f7fe f987 	bl	8000150 <strcmp>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <listen_Broadcast+0x12c>
		   break;
	   }
	   else{
		   ret =0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	71fb      	strb	r3, [r7, #7]
	while(!ret){
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0cf      	beq.n	8001df2 <listen_Broadcast+0xca>
	   }
	  }
	}
}
 8001e52:	e000      	b.n	8001e56 <listen_Broadcast+0x12e>
		   break;
 8001e54:	bf00      	nop
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003f4 	.word	0x200003f4
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	20000214 	.word	0x20000214
 8001e70:	20000410 	.word	0x20000410
 8001e74:	0800a208 	.word	0x0800a208
 8001e78:	200002b4 	.word	0x200002b4
 8001e7c:	2000026c 	.word	0x2000026c
 8001e80:	0800a224 	.word	0x0800a224
 8001e84:	0800a234 	.word	0x0800a234
 8001e88:	200002f4 	.word	0x200002f4
 8001e8c:	20000330 	.word	0x20000330
 8001e90:	0800a254 	.word	0x0800a254

08001e94 <send_register>:

void send_register(char* data){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	// Gửi gói tin đăng ký
	lora_begin_packet(&lora);
 8001e9c:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <send_register+0x30>)
 8001e9e:	f7ff fdb3 	bl	8001a08 <lora_begin_packet>
	lora_tx(&lora, (uint8_t *)data, strlen(data));
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe f95e 	bl	8000164 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4804      	ldr	r0, [pc, #16]	@ (8001ec4 <send_register+0x30>)
 8001eb2:	f7ff fdd1 	bl	8001a58 <lora_tx>
	lora_end_packet(&lora);
 8001eb6:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <send_register+0x30>)
 8001eb8:	f7ff fe05 	bl	8001ac6 <lora_end_packet>
//	sprintf(buf,"Da gui thong tin dang ky len Gateway\r\n");
//	HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000410 	.word	0x20000410

08001ec8 <check_and_parse_STT>:
bool check_and_parse_STT(const char *packet, int *id, int *stt, float *t_min, float *t_max, float *h_min, float *h_max) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
    // Kiểm tra định dạng gói tin
    if (sscanf(packet, "%d %d %f %f %f %f", id, stt, t_min, t_max, h_min, h_max) == 6) {
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	9303      	str	r3, [sp, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	4907      	ldr	r1, [pc, #28]	@ (8001f08 <check_and_parse_STT+0x40>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f004 f92f 	bl	8006150 <siscanf>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d101      	bne.n	8001efc <check_and_parse_STT+0x34>
        // Kiểm tra tính hợp lệ của các giá trị
        return true; // Gói tin hợp lệ
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <check_and_parse_STT+0x36>
    }
    return false; // Gói tin không hợp lệ
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0800a25c 	.word	0x0800a25c

08001f0c <listen_STT>:
int listen_STT(void){
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af04      	add	r7, sp, #16
	uint8_t ret =0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	71fb      	strb	r3, [r7, #7]
	now_tick = HAL_GetTick();
 8001f16:	f000 fef7 	bl	8002d08 <HAL_GetTick>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc8 <listen_STT+0xbc>)
 8001f1e:	6013      	str	r3, [r2, #0]
	while(!ret){
 8001f20:	e04a      	b.n	8001fb8 <listen_STT+0xac>
		ret = lora_prasePacket(&lora);
 8001f22:	482a      	ldr	r0, [pc, #168]	@ (8001fcc <listen_STT+0xc0>)
 8001f24:	f7ff fce2 	bl	80018ec <lora_prasePacket>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
		if(ret){
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d037      	beq.n	8001fa2 <listen_STT+0x96>
			//Nhận gói tin
			uint8_t i = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	71bb      	strb	r3, [r7, #6]
			while (lora_available(&lora)) {
 8001f36:	e00a      	b.n	8001f4e <listen_STT+0x42>
				buf[i++] = lora_read(&lora);
 8001f38:	79bb      	ldrb	r3, [r7, #6]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	71ba      	strb	r2, [r7, #6]
 8001f3e:	461c      	mov	r4, r3
 8001f40:	4822      	ldr	r0, [pc, #136]	@ (8001fcc <listen_STT+0xc0>)
 8001f42:	f7ff fd43 	bl	80019cc <lora_read>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <listen_STT+0xc4>)
 8001f4c:	551a      	strb	r2, [r3, r4]
			while (lora_available(&lora)) {
 8001f4e:	481f      	ldr	r0, [pc, #124]	@ (8001fcc <listen_STT+0xc0>)
 8001f50:	f7ff fd28 	bl	80019a4 <lora_available>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ee      	bne.n	8001f38 <listen_STT+0x2c>
			}
			buf[i] = '\0'; // Kết thúc chuỗi
 8001f5a:	79bb      	ldrb	r3, [r7, #6]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd0 <listen_STT+0xc4>)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	54d1      	strb	r1, [r2, r3]
			sprintf(data_receive,buf);
 8001f62:	491b      	ldr	r1, [pc, #108]	@ (8001fd0 <listen_STT+0xc4>)
 8001f64:	481b      	ldr	r0, [pc, #108]	@ (8001fd4 <listen_STT+0xc8>)
 8001f66:	f004 f8d3 	bl	8006110 <siprintf>
//			sprintf(buf,"Nhan duoc STT: %s\r\n",data_receive);
//		HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
			if(check_and_parse_STT(data_receive, &id_receive, &stt, &t_min, &t_max, &h_min, &h_max)){
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <listen_STT+0xcc>)
 8001f6c:	9302      	str	r3, [sp, #8]
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <listen_STT+0xd0>)
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <listen_STT+0xd4>)
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <listen_STT+0xd8>)
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <listen_STT+0xdc>)
 8001f7a:	491c      	ldr	r1, [pc, #112]	@ (8001fec <listen_STT+0xe0>)
 8001f7c:	4815      	ldr	r0, [pc, #84]	@ (8001fd4 <listen_STT+0xc8>)
 8001f7e:	f7ff ffa3 	bl	8001ec8 <check_and_parse_STT>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <listen_STT+0x92>
				if(node.id == id_receive){
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <listen_STT+0xe4>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <listen_STT+0xe0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d101      	bne.n	8001f98 <listen_STT+0x8c>
//					sprintf(buf,"Nhan duoc STT hop le: %s\r\n",data_receive);
//					HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
					return 1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e013      	b.n	8001fc0 <listen_STT+0xb4>
				}
				else{
//					sprintf(buf,"STT nhan ve co id khong khop\r\n");
//					HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
					ret=0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	e001      	b.n	8001fa2 <listen_STT+0x96>
				}
		    }
			else{
//				sprintf(buf,"STT nhan duoc khong hop le\r\n");
//				HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
				ret =0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	71fb      	strb	r3, [r7, #7]
			}
		}
		if ((HAL_GetTick()-now_tick)>=300) //lắng nghe STT trong 100ms
 8001fa2:	f000 feb1 	bl	8002d08 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <listen_STT+0xbc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001fb2:	d301      	bcc.n	8001fb8 <listen_STT+0xac>
					return 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e003      	b.n	8001fc0 <listen_STT+0xb4>
	while(!ret){
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0b1      	beq.n	8001f22 <listen_STT+0x16>
	}
	return 1;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	200003d4 	.word	0x200003d4
 8001fcc:	20000410 	.word	0x20000410
 8001fd0:	200002f4 	.word	0x200002f4
 8001fd4:	20000330 	.word	0x20000330
 8001fd8:	200003e8 	.word	0x200003e8
 8001fdc:	200003e4 	.word	0x200003e4
 8001fe0:	200003e0 	.word	0x200003e0
 8001fe4:	200003dc 	.word	0x200003dc
 8001fe8:	200003cc 	.word	0x200003cc
 8001fec:	200003c8 	.word	0x200003c8
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <check_request_data>:

//Hàm check gói tin yêu cầu gửi data từ GW
bool check_request_data(const char *str, int targetId) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    // Tạo buffer tạm thời để so sánh
    char idBuffer[16]; // Kích thước đủ để chứa id dạng chuỗi
    snprintf(idBuffer, sizeof(idBuffer), "%d R", targetId); // Tạo chuỗi "id R"
 8001ffe:	f107 000c 	add.w	r0, r7, #12
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <check_request_data+0x48>)
 8002006:	2110      	movs	r1, #16
 8002008:	f004 f84e 	bl	80060a8 <sniprintf>
    // So sánh chuỗi nhận được với chuỗi mong đợi
    int x=strncmp(str, idBuffer, strlen(idBuffer));
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f8a7 	bl	8000164 <strlen>
 8002016:	4602      	mov	r2, r0
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4619      	mov	r1, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f004 f928 	bl	8006274 <strncmp>
 8002024:	61f8      	str	r0, [r7, #28]
    if (!x) {
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <check_request_data+0x3c>
    	return 1;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <check_request_data+0x3e>
    }
    else {
    	return 0;
 8002030:	2300      	movs	r3, #0
    }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	0800a270 	.word	0x0800a270

08002040 <listen_request_data>:

int listen_request_data(void) {
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
    uint8_t ret = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	71fb      	strb	r3, [r7, #7]
    uint32_t now_tick = HAL_GetTick();
 800204a:	f000 fe5d 	bl	8002d08 <HAL_GetTick>
 800204e:	6038      	str	r0, [r7, #0]
    uint8_t i = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	71bb      	strb	r3, [r7, #6]
    memset(buf, 0, sizeof(buf)); // Xóa buffer trước khi sử dụng
 8002054:	223c      	movs	r2, #60	@ 0x3c
 8002056:	2100      	movs	r1, #0
 8002058:	4826      	ldr	r0, [pc, #152]	@ (80020f4 <listen_request_data+0xb4>)
 800205a:	f004 f8e8 	bl	800622e <memset>
    while (!ret) {
 800205e:	e040      	b.n	80020e2 <listen_request_data+0xa2>
    	if ((HAL_GetTick() - now_tick) >= 9000) {
 8002060:	f000 fe52 	bl	8002d08 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f242 3227 	movw	r2, #8999	@ 0x2327
 800206e:	4293      	cmp	r3, r2
 8002070:	d903      	bls.n	800207a <listen_request_data+0x3a>
//    	   sprintf(buf, "Time out on listen request data\r\n");
//    	   HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
    	   restart = 1;
 8002072:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <listen_request_data+0xb8>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    	   break;
 8002078:	e036      	b.n	80020e8 <listen_request_data+0xa8>
    	}
        ret = lora_prasePacket(&lora);
 800207a:	4820      	ldr	r0, [pc, #128]	@ (80020fc <listen_request_data+0xbc>)
 800207c:	f7ff fc36 	bl	80018ec <lora_prasePacket>
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
        if (ret) {
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02b      	beq.n	80020e2 <listen_request_data+0xa2>
//        	sprintf(buf, "Dang nhan goi tin...\r\n");
//        	HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
            // Nhận gói tin
            i = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	71bb      	strb	r3, [r7, #6]
            while (lora_available(&lora) && i < sizeof(buf) - 1) {
 800208e:	e00a      	b.n	80020a6 <listen_request_data+0x66>
                buf[i++] = lora_read(&lora);
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	71ba      	strb	r2, [r7, #6]
 8002096:	461c      	mov	r4, r3
 8002098:	4818      	ldr	r0, [pc, #96]	@ (80020fc <listen_request_data+0xbc>)
 800209a:	f7ff fc97 	bl	80019cc <lora_read>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <listen_request_data+0xb4>)
 80020a4:	551a      	strb	r2, [r3, r4]
            while (lora_available(&lora) && i < sizeof(buf) - 1) {
 80020a6:	4815      	ldr	r0, [pc, #84]	@ (80020fc <listen_request_data+0xbc>)
 80020a8:	f7ff fc7c 	bl	80019a4 <lora_available>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <listen_request_data+0x78>
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80020b6:	d9eb      	bls.n	8002090 <listen_request_data+0x50>
            }
            buf[i] = '\0'; // Kết thúc chuỗi
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	4a0e      	ldr	r2, [pc, #56]	@ (80020f4 <listen_request_data+0xb4>)
 80020bc:	2100      	movs	r1, #0
 80020be:	54d1      	strb	r1, [r2, r3]

            sprintf(data_receive, buf);
 80020c0:	490c      	ldr	r1, [pc, #48]	@ (80020f4 <listen_request_data+0xb4>)
 80020c2:	480f      	ldr	r0, [pc, #60]	@ (8002100 <listen_request_data+0xc0>)
 80020c4:	f004 f824 	bl	8006110 <siprintf>
//            sprintf(buf, "Nhan duoc goi tin: %s\r\n",data_receive);
//            HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
            if (check_request_data(data_receive, node.id)) {
 80020c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <listen_request_data+0xc4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	480c      	ldr	r0, [pc, #48]	@ (8002100 <listen_request_data+0xc0>)
 80020d0:	f7ff ff90 	bl	8001ff4 <check_request_data>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <listen_request_data+0x9e>
//            	sprintf(buf, "Request hop le\r\n");
//            	HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
                return 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	e005      	b.n	80020ea <listen_request_data+0xaa>
            } else {
//            	sprintf(buf, "Request khong hop le\r\n");
//            	HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
                ret = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	71fb      	strb	r3, [r7, #7]
    while (!ret) {
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0bb      	beq.n	8002060 <listen_request_data+0x20>
            }
        }


    }
    return 1; // Thêm giá trị trả về để tránh thiếu kết thúc
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200002f4 	.word	0x200002f4
 80020f8:	200003d0 	.word	0x200003d0
 80020fc:	20000410 	.word	0x20000410
 8002100:	20000330 	.word	0x20000330
 8002104:	20000000 	.word	0x20000000

08002108 <send_data>:


void send_data(char* data){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	// Gửi gói tin data
	lora_begin_packet(&lora);
 8002110:	4809      	ldr	r0, [pc, #36]	@ (8002138 <send_data+0x30>)
 8002112:	f7ff fc79 	bl	8001a08 <lora_begin_packet>
	lora_tx(&lora, (uint8_t *)data, strlen(data));
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe f824 	bl	8000164 <strlen>
 800211c:	4603      	mov	r3, r0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4804      	ldr	r0, [pc, #16]	@ (8002138 <send_data+0x30>)
 8002126:	f7ff fc97 	bl	8001a58 <lora_tx>
	lora_end_packet(&lora);
 800212a:	4803      	ldr	r0, [pc, #12]	@ (8002138 <send_data+0x30>)
 800212c:	f7ff fccb 	bl	8001ac6 <lora_end_packet>
//	sprintf(buf,"Da gui du lieu t&h len Gateway T=%.1f H=%.1f\r\n",T,H);
//	HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 1000);
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000410 	.word	0x20000410

0800213c <listen_ok>:

int listen_ok(void){
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8002142:	2300      	movs	r3, #0
 8002144:	71fb      	strb	r3, [r7, #7]
	now_tick=HAL_GetTick();
 8002146:	f000 fddf 	bl	8002d08 <HAL_GetTick>
 800214a:	4603      	mov	r3, r0
 800214c:	4a29      	ldr	r2, [pc, #164]	@ (80021f4 <listen_ok+0xb8>)
 800214e:	6013      	str	r3, [r2, #0]
	while(!ret){
 8002150:	e048      	b.n	80021e4 <listen_ok+0xa8>
		if((HAL_GetTick()-now_tick)>=400){
 8002152:	f000 fdd9 	bl	8002d08 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <listen_ok+0xb8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002162:	d301      	bcc.n	8002168 <listen_ok+0x2c>
//			sprintf(buf,"time out on listen_ok\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf),1000);
			return 0;
 8002164:	2300      	movs	r3, #0
 8002166:	e041      	b.n	80021ec <listen_ok+0xb0>
		}
		ret = lora_prasePacket(&lora);
 8002168:	4823      	ldr	r0, [pc, #140]	@ (80021f8 <listen_ok+0xbc>)
 800216a:	f7ff fbbf 	bl	80018ec <lora_prasePacket>
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
		if(ret){
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d035      	beq.n	80021e4 <listen_ok+0xa8>
		//Nhận gói tin
			uint8_t i = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	71bb      	strb	r3, [r7, #6]
			while (lora_available(&lora)) {
 800217c:	e00a      	b.n	8002194 <listen_ok+0x58>
				buf[i++] = lora_read(&lora);
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	71ba      	strb	r2, [r7, #6]
 8002184:	461c      	mov	r4, r3
 8002186:	481c      	ldr	r0, [pc, #112]	@ (80021f8 <listen_ok+0xbc>)
 8002188:	f7ff fc20 	bl	80019cc <lora_read>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <listen_ok+0xc0>)
 8002192:	551a      	strb	r2, [r3, r4]
			while (lora_available(&lora)) {
 8002194:	4818      	ldr	r0, [pc, #96]	@ (80021f8 <listen_ok+0xbc>)
 8002196:	f7ff fc05 	bl	80019a4 <lora_available>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <listen_ok+0x42>
			}
			buf[i] = '\0'; // Kết thúc chuỗi
 80021a0:	79bb      	ldrb	r3, [r7, #6]
 80021a2:	4a16      	ldr	r2, [pc, #88]	@ (80021fc <listen_ok+0xc0>)
 80021a4:	2100      	movs	r1, #0
 80021a6:	54d1      	strb	r1, [r2, r3]
			sprintf(data_receive,buf);
 80021a8:	4914      	ldr	r1, [pc, #80]	@ (80021fc <listen_ok+0xc0>)
 80021aa:	4815      	ldr	r0, [pc, #84]	@ (8002200 <listen_ok+0xc4>)
 80021ac:	f003 ffb0 	bl	8006110 <siprintf>
			sprintf(buf,"%d Ok",node.id);
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <listen_ok+0xc8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4914      	ldr	r1, [pc, #80]	@ (8002208 <listen_ok+0xcc>)
 80021b8:	4810      	ldr	r0, [pc, #64]	@ (80021fc <listen_ok+0xc0>)
 80021ba:	f003 ffa9 	bl	8006110 <siprintf>
			if(!strcasecmp(data_receive,buf)){
 80021be:	490f      	ldr	r1, [pc, #60]	@ (80021fc <listen_ok+0xc0>)
 80021c0:	480f      	ldr	r0, [pc, #60]	@ (8002200 <listen_ok+0xc4>)
 80021c2:	f004 f83d 	bl	8006240 <strcasecmp>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <listen_ok+0xa4>
				start_tick=HAL_GetTick()-start_tick;
 80021cc:	f000 fd9c 	bl	8002d08 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <listen_ok+0xd0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <listen_ok+0xd0>)
 80021da:	6013      	str	r3, [r2, #0]
//				sprintf(buf,"Da nhan duoc Ok tu GW, tong thoi gian: %d\r\n",start_tick);
//				HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf),1000);
				return 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	e005      	b.n	80021ec <listen_ok+0xb0>
			}
			else ret=0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	71fb      	strb	r3, [r7, #7]
	while(!ret){
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0b3      	beq.n	8002152 <listen_ok+0x16>
		}
	}
	return 1;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	200003d4 	.word	0x200003d4
 80021f8:	20000410 	.word	0x20000410
 80021fc:	200002f4 	.word	0x200002f4
 8002200:	20000330 	.word	0x20000330
 8002204:	20000000 	.word	0x20000000
 8002208:	0800a278 	.word	0x0800a278
 800220c:	200003d8 	.word	0x200003d8

08002210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	b087      	sub	sp, #28
 8002214:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002216:	f000 fd1f 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221a:	f000 f98b 	bl	8002534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221e:	f000 fa5f 	bl	80026e0 <MX_GPIO_Init>
  MX_RTC_Init();
 8002222:	f000 f9e1 	bl	80025e8 <MX_RTC_Init>
  MX_SPI1_Init();
 8002226:	f000 f9fb 	bl	8002620 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800222a:	f000 fa2f 	bl	800268c <MX_USART3_UART_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002234:	486d      	ldr	r0, [pc, #436]	@ (80023ec <main+0x1dc>)
 8002236:	f001 f8fa 	bl	800342e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002240:	486a      	ldr	r0, [pc, #424]	@ (80023ec <main+0x1dc>)
 8002242:	f001 f8f4 	bl	800342e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800224c:	4867      	ldr	r0, [pc, #412]	@ (80023ec <main+0x1dc>)
 800224e:	f001 f8ee 	bl	800342e <HAL_GPIO_WritePin>
  dht22_init();
 8002252:	f7ff f931 	bl	80014b8 <dht22_init>
  DHT22_GetTemp_Humidity(&T, &H);
 8002256:	4966      	ldr	r1, [pc, #408]	@ (80023f0 <main+0x1e0>)
 8002258:	4866      	ldr	r0, [pc, #408]	@ (80023f4 <main+0x1e4>)
 800225a:	f7ff f957 	bl	800150c <DHT22_GetTemp_Humidity>

  sprintf(data_th,"%d %.1f %.1f",node.id,T*2,H);
 800225e:	4b66      	ldr	r3, [pc, #408]	@ (80023f8 <main+0x1e8>)
 8002260:	681e      	ldr	r6, [r3, #0]
 8002262:	4b64      	ldr	r3, [pc, #400]	@ (80023f4 <main+0x1e4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fc8d 	bl	8000b88 <__addsf3>
 800226e:	4603      	mov	r3, r0
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f8e3 	bl	800043c <__aeabi_f2d>
 8002276:	4604      	mov	r4, r0
 8002278:	460d      	mov	r5, r1
 800227a:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <main+0x1e0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f8dc 	bl	800043c <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800228c:	e9cd 4500 	strd	r4, r5, [sp]
 8002290:	4632      	mov	r2, r6
 8002292:	495a      	ldr	r1, [pc, #360]	@ (80023fc <main+0x1ec>)
 8002294:	485a      	ldr	r0, [pc, #360]	@ (8002400 <main+0x1f0>)
 8002296:	f003 ff3b 	bl	8006110 <siprintf>
  if (T <20)T=T*2;
 800229a:	4b56      	ldr	r3, [pc, #344]	@ (80023f4 <main+0x1e4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4959      	ldr	r1, [pc, #356]	@ (8002404 <main+0x1f4>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe ff17 	bl	80010d4 <__aeabi_fcmplt>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <main+0xb0>
 80022ac:	4b51      	ldr	r3, [pc, #324]	@ (80023f4 <main+0x1e4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fc68 	bl	8000b88 <__addsf3>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <main+0x1e4>)
 80022be:	601a      	str	r2, [r3, #0]
  if (T>1000)T = T/100;
 80022c0:	4b4c      	ldr	r3, [pc, #304]	@ (80023f4 <main+0x1e4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4950      	ldr	r1, [pc, #320]	@ (8002408 <main+0x1f8>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe ff22 	bl	8001110 <__aeabi_fcmpgt>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <main+0xd6>
 80022d2:	4b48      	ldr	r3, [pc, #288]	@ (80023f4 <main+0x1e4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	494d      	ldr	r1, [pc, #308]	@ (800240c <main+0x1fc>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fe11 	bl	8000f00 <__aeabi_fdiv>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b44      	ldr	r3, [pc, #272]	@ (80023f4 <main+0x1e4>)
 80022e4:	601a      	str	r2, [r3, #0]
  if (H <40)H=H*2;
 80022e6:	4b42      	ldr	r3, [pc, #264]	@ (80023f0 <main+0x1e0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4949      	ldr	r1, [pc, #292]	@ (8002410 <main+0x200>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fef1 	bl	80010d4 <__aeabi_fcmplt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <main+0xfc>
 80022f8:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <main+0x1e0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fc42 	bl	8000b88 <__addsf3>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <main+0x1e0>)
 800230a:	601a      	str	r2, [r3, #0]
  if (H>1000)H = T/100;
 800230c:	4b38      	ldr	r3, [pc, #224]	@ (80023f0 <main+0x1e0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	493d      	ldr	r1, [pc, #244]	@ (8002408 <main+0x1f8>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fefc 	bl	8001110 <__aeabi_fcmpgt>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <main+0x122>
 800231e:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <main+0x1e4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	493a      	ldr	r1, [pc, #232]	@ (800240c <main+0x1fc>)
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fdeb 	bl	8000f00 <__aeabi_fdiv>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	4b30      	ldr	r3, [pc, #192]	@ (80023f0 <main+0x1e0>)
 8002330:	601a      	str	r2, [r3, #0]
  sprintf(data_register, "RG %d %.5f %.5f",node.id,node.x,node.y);
 8002332:	4b31      	ldr	r3, [pc, #196]	@ (80023f8 <main+0x1e8>)
 8002334:	681e      	ldr	r6, [r3, #0]
 8002336:	4b30      	ldr	r3, [pc, #192]	@ (80023f8 <main+0x1e8>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f87e 	bl	800043c <__aeabi_f2d>
 8002340:	4604      	mov	r4, r0
 8002342:	460d      	mov	r5, r1
 8002344:	4b2c      	ldr	r3, [pc, #176]	@ (80023f8 <main+0x1e8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f877 	bl	800043c <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002356:	e9cd 4500 	strd	r4, r5, [sp]
 800235a:	4632      	mov	r2, r6
 800235c:	492d      	ldr	r1, [pc, #180]	@ (8002414 <main+0x204>)
 800235e:	482e      	ldr	r0, [pc, #184]	@ (8002418 <main+0x208>)
 8002360:	f003 fed6 	bl	8006110 <siprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  restart =0;
 8002364:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <main+0x20c>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
	  int count_send_register =0;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
	  int count_send_data=0;
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
	  listen_Broadcast();
 8002372:	f7ff fcd9 	bl	8001d28 <listen_Broadcast>
	  HAL_Delay(50);
 8002376:	2032      	movs	r0, #50	@ 0x32
 8002378:	f000 fcd0 	bl	8002d1c <HAL_Delay>
	  send_register(data_register);
 800237c:	4826      	ldr	r0, [pc, #152]	@ (8002418 <main+0x208>)
 800237e:	f7ff fd89 	bl	8001e94 <send_register>
	  while(!listen_STT()){
 8002382:	e010      	b.n	80023a6 <main+0x196>
		  if(count_send_register < 5){
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b04      	cmp	r3, #4
 8002388:	dc09      	bgt.n	800239e <main+0x18e>
			  send_register(data_register);
 800238a:	4823      	ldr	r0, [pc, #140]	@ (8002418 <main+0x208>)
 800238c:	f7ff fd82 	bl	8001e94 <send_register>
			  count_send_register++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3301      	adds	r3, #1
 8002394:	607b      	str	r3, [r7, #4]
			  HAL_Delay(100);
 8002396:	2064      	movs	r0, #100	@ 0x64
 8002398:	f000 fcc0 	bl	8002d1c <HAL_Delay>
 800239c:	e003      	b.n	80023a6 <main+0x196>
		  }
		  else{
			  restart =1;
 800239e:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <main+0x20c>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
			  break;
 80023a4:	e004      	b.n	80023b0 <main+0x1a0>
	  while(!listen_STT()){
 80023a6:	f7ff fdb1 	bl	8001f0c <listen_STT>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0e9      	beq.n	8002384 <main+0x174>
		  }
	  }
	  if(restart) continue;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <main+0x20c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 80a6 	bne.w	8002506 <main+0x2f6>

	  listen_request_data();
 80023ba:	f7ff fe41 	bl	8002040 <listen_request_data>
	  if(restart) continue;
 80023be:	4b17      	ldr	r3, [pc, #92]	@ (800241c <main+0x20c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 80a1 	bne.w	800250a <main+0x2fa>
	  send_data(data_th);
 80023c8:	480d      	ldr	r0, [pc, #52]	@ (8002400 <main+0x1f0>)
 80023ca:	f7ff fe9d 	bl	8002108 <send_data>
	  while(!listen_ok()){
 80023ce:	e027      	b.n	8002420 <main+0x210>
		  if(count_send_data <5){
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	dc06      	bgt.n	80023e4 <main+0x1d4>
			  send_data(data_th);
 80023d6:	480a      	ldr	r0, [pc, #40]	@ (8002400 <main+0x1f0>)
 80023d8:	f7ff fe96 	bl	8002108 <send_data>
			  count_send_data++;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	e01d      	b.n	8002420 <main+0x210>
		  }
		  else{
			  restart=1;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <main+0x20c>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
			  break;
 80023ea:	e01e      	b.n	800242a <main+0x21a>
 80023ec:	40010800 	.word	0x40010800
 80023f0:	200003f0 	.word	0x200003f0
 80023f4:	200003ec 	.word	0x200003ec
 80023f8:	20000000 	.word	0x20000000
 80023fc:	0800a280 	.word	0x0800a280
 8002400:	20000380 	.word	0x20000380
 8002404:	41a00000 	.word	0x41a00000
 8002408:	447a0000 	.word	0x447a0000
 800240c:	42c80000 	.word	0x42c80000
 8002410:	42200000 	.word	0x42200000
 8002414:	0800a290 	.word	0x0800a290
 8002418:	200003a8 	.word	0x200003a8
 800241c:	200003d0 	.word	0x200003d0
	  while(!listen_ok()){
 8002420:	f7ff fe8c 	bl	800213c <listen_ok>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0d2      	beq.n	80023d0 <main+0x1c0>
		  }
	  }
	  //if(restart) continue;

	  HAL_Delay(7000);
 800242a:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800242e:	f000 fc75 	bl	8002d1c <HAL_Delay>
	  DHT22_GetTemp_Humidity(&T, &H);
 8002432:	4937      	ldr	r1, [pc, #220]	@ (8002510 <main+0x300>)
 8002434:	4837      	ldr	r0, [pc, #220]	@ (8002514 <main+0x304>)
 8002436:	f7ff f869 	bl	800150c <DHT22_GetTemp_Humidity>
	  if (T <20)T=T*2;
 800243a:	4b36      	ldr	r3, [pc, #216]	@ (8002514 <main+0x304>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4936      	ldr	r1, [pc, #216]	@ (8002518 <main+0x308>)
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fe47 	bl	80010d4 <__aeabi_fcmplt>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <main+0x250>
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <main+0x304>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fb98 	bl	8000b88 <__addsf3>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <main+0x304>)
 800245e:	601a      	str	r2, [r3, #0]
	  if (T>1000)T = T/100;
 8002460:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <main+0x304>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	492d      	ldr	r1, [pc, #180]	@ (800251c <main+0x30c>)
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fe52 	bl	8001110 <__aeabi_fcmpgt>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <main+0x276>
 8002472:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <main+0x304>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	492a      	ldr	r1, [pc, #168]	@ (8002520 <main+0x310>)
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fd41 	bl	8000f00 <__aeabi_fdiv>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <main+0x304>)
 8002484:	601a      	str	r2, [r3, #0]
	  if (H <40)H=H*2;
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <main+0x300>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4926      	ldr	r1, [pc, #152]	@ (8002524 <main+0x314>)
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fe21 	bl	80010d4 <__aeabi_fcmplt>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <main+0x29c>
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <main+0x300>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fb72 	bl	8000b88 <__addsf3>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <main+0x300>)
 80024aa:	601a      	str	r2, [r3, #0]
	  if (H>1000)H = T/100;
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <main+0x300>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	491a      	ldr	r1, [pc, #104]	@ (800251c <main+0x30c>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fe2c 	bl	8001110 <__aeabi_fcmpgt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <main+0x2c2>
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <main+0x304>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4917      	ldr	r1, [pc, #92]	@ (8002520 <main+0x310>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fd1b 	bl	8000f00 <__aeabi_fdiv>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <main+0x300>)
 80024d0:	601a      	str	r2, [r3, #0]
	  sprintf(data_th,"%d %.1f %.1f",node.id,T,H);
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <main+0x318>)
 80024d4:	681e      	ldr	r6, [r3, #0]
 80024d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <main+0x304>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd ffae 	bl	800043c <__aeabi_f2d>
 80024e0:	4604      	mov	r4, r0
 80024e2:	460d      	mov	r5, r1
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <main+0x300>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd ffa7 	bl	800043c <__aeabi_f2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024f6:	e9cd 4500 	strd	r4, r5, [sp]
 80024fa:	4632      	mov	r2, r6
 80024fc:	490b      	ldr	r1, [pc, #44]	@ (800252c <main+0x31c>)
 80024fe:	480c      	ldr	r0, [pc, #48]	@ (8002530 <main+0x320>)
 8002500:	f003 fe06 	bl	8006110 <siprintf>
 8002504:	e72e      	b.n	8002364 <main+0x154>
	  if(restart) continue;
 8002506:	bf00      	nop
 8002508:	e72c      	b.n	8002364 <main+0x154>
	  if(restart) continue;
 800250a:	bf00      	nop
  {
 800250c:	e72a      	b.n	8002364 <main+0x154>
 800250e:	bf00      	nop
 8002510:	200003f0 	.word	0x200003f0
 8002514:	200003ec 	.word	0x200003ec
 8002518:	41a00000 	.word	0x41a00000
 800251c:	447a0000 	.word	0x447a0000
 8002520:	42c80000 	.word	0x42c80000
 8002524:	42200000 	.word	0x42200000
 8002528:	20000000 	.word	0x20000000
 800252c:	0800a280 	.word	0x0800a280
 8002530:	20000380 	.word	0x20000380

08002534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b094      	sub	sp, #80	@ 0x50
 8002538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800253a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800253e:	2228      	movs	r2, #40	@ 0x28
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f003 fe73 	bl	800622e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002564:	230a      	movs	r3, #10
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002568:	2301      	movs	r3, #1
 800256a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800256c:	2310      	movs	r3, #16
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002570:	2301      	movs	r3, #1
 8002572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002574:	2302      	movs	r3, #2
 8002576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002578:	2300      	movs	r3, #0
 800257a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800257c:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8002580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002582:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002586:	4618      	mov	r0, r3
 8002588:	f000 ff98 	bl	80034bc <HAL_RCC_OscConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002592:	f000 f929 	bl	80027e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002596:	230f      	movs	r3, #15
 8002598:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800259a:	2302      	movs	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 fa04 	bl	80039c0 <HAL_RCC_ClockConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80025be:	f000 f913 	bl	80027e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025c2:	2301      	movs	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025ca:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fb84 	bl	8003cdc <HAL_RCCEx_PeriphCLKConfig>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80025da:	f000 f905 	bl	80027e8 <Error_Handler>
  }
}
 80025de:	bf00      	nop
 80025e0:	3750      	adds	r7, #80	@ 0x50
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <MX_RTC_Init+0x30>)
 80025ee:	4a0b      	ldr	r2, [pc, #44]	@ (800261c <MX_RTC_Init+0x34>)
 80025f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <MX_RTC_Init+0x30>)
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <MX_RTC_Init+0x30>)
 80025fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002600:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	@ (8002618 <MX_RTC_Init+0x30>)
 8002604:	f001 fcd6 	bl	8003fb4 <HAL_RTC_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800260e:	f000 f8eb 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000200 	.word	0x20000200
 800261c:	40002800 	.word	0x40002800

08002620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002624:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002626:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <MX_SPI1_Init+0x68>)
 8002628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800262a:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <MX_SPI1_Init+0x64>)
 800262c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002632:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002638:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <MX_SPI1_Init+0x64>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_SPI1_Init+0x64>)
 800264c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002654:	2210      	movs	r2, #16
 8002656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002658:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <MX_SPI1_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800265e:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <MX_SPI1_Init+0x64>)
 800266c:	220a      	movs	r2, #10
 800266e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002670:	4804      	ldr	r0, [pc, #16]	@ (8002684 <MX_SPI1_Init+0x64>)
 8002672:	f001 fe24 	bl	80042be <HAL_SPI_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800267c:	f000 f8b4 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000214 	.word	0x20000214
 8002688:	40013000 	.word	0x40013000

0800268c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <MX_USART3_UART_Init+0x50>)
 8002694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 8002698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800269c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 80026b2:	220c      	movs	r2, #12
 80026b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_USART3_UART_Init+0x4c>)
 80026c4:	f002 fb9d 	bl	8004e02 <HAL_UART_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026ce:	f000 f88b 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000026c 	.word	0x2000026c
 80026dc:	40004800 	.word	0x40004800

080026e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e6:	f107 0310 	add.w	r3, r7, #16
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f4:	4b38      	ldr	r3, [pc, #224]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a37      	ldr	r2, [pc, #220]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b35      	ldr	r3, [pc, #212]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a31      	ldr	r2, [pc, #196]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b2f      	ldr	r3, [pc, #188]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b2c      	ldr	r3, [pc, #176]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4a2b      	ldr	r2, [pc, #172]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	6193      	str	r3, [r2, #24]
 8002730:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <MX_GPIO_Init+0xf8>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Data_DHT_Pin|NSS_Pin|Led_5_Pin|Led_4_Pin, GPIO_PIN_RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	f640 4114 	movw	r1, #3092	@ 0xc14
 8002742:	4826      	ldr	r0, [pc, #152]	@ (80027dc <MX_GPIO_Init+0xfc>)
 8002744:	f000 fe73 	bl	800342e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	2102      	movs	r1, #2
 800274c:	4824      	ldr	r0, [pc, #144]	@ (80027e0 <MX_GPIO_Init+0x100>)
 800274e:	f000 fe6e 	bl	800342e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Data_DHT_Pin NSS_Pin Led_5_Pin Led_4_Pin */
  GPIO_InitStruct.Pin = Data_DHT_Pin|NSS_Pin|Led_5_Pin|Led_4_Pin;
 8002752:	f640 4314 	movw	r3, #3092	@ 0xc14
 8002756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002758:	2301      	movs	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2302      	movs	r3, #2
 8002762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	4619      	mov	r1, r3
 800276a:	481c      	ldr	r0, [pc, #112]	@ (80027dc <MX_GPIO_Init+0xfc>)
 800276c:	f000 fc08 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <MX_GPIO_Init+0x104>)
 8002776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	4817      	ldr	r0, [pc, #92]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002784:	f000 fbfc 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2302      	movs	r3, #2
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	4619      	mov	r1, r3
 800279e:	4810      	ldr	r0, [pc, #64]	@ (80027e0 <MX_GPIO_Init+0x100>)
 80027a0:	f000 fbee 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_6_Pin */
  GPIO_InitStruct.Pin = Led_6_Pin;
 80027a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_GPIO_Init+0x104>)
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led_6_GPIO_Port, &GPIO_InitStruct);
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	4619      	mov	r1, r3
 80027b8:	4808      	ldr	r0, [pc, #32]	@ (80027dc <MX_GPIO_Init+0xfc>)
 80027ba:	f000 fbe1 	bl	8002f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	2006      	movs	r0, #6
 80027c4:	f000 fba5 	bl	8002f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027c8:	2006      	movs	r0, #6
 80027ca:	f000 fbbe 	bl	8002f4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027ce:	bf00      	nop
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010800 	.word	0x40010800
 80027e0:	40010c00 	.word	0x40010c00
 80027e4:	10110000 	.word	0x10110000

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <Error_Handler+0x8>

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <HAL_MspInit+0x5c>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <HAL_MspInit+0x5c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6193      	str	r3, [r2, #24]
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_MspInit+0x5c>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <HAL_MspInit+0x5c>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a0e      	ldr	r2, [pc, #56]	@ (8002850 <HAL_MspInit+0x5c>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]
 800281e:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <HAL_MspInit+0x5c>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <HAL_MspInit+0x60>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <HAL_MspInit+0x60>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000

08002858 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <HAL_RTC_MspInit+0x5c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d120      	bne.n	80028ac <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800286a:	f000 fe1b 	bl	80034a4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800286e:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_RTC_MspInit+0x60>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a11      	ldr	r2, [pc, #68]	@ (80028b8 <HAL_RTC_MspInit+0x60>)
 8002874:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <HAL_RTC_MspInit+0x60>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_RTC_MspInit+0x64>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fb3e 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002896:	2003      	movs	r0, #3
 8002898:	f000 fb57 	bl	8002f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2029      	movs	r0, #41	@ 0x29
 80028a2:	f000 fb36 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80028a6:	2029      	movs	r0, #41	@ 0x29
 80028a8:	f000 fb4f 	bl	8002f4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40002800 	.word	0x40002800
 80028b8:	40021000 	.word	0x40021000
 80028bc:	4242043c 	.word	0x4242043c

080028c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	@ (8002948 <HAL_SPI_MspInit+0x88>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d12f      	bne.n	8002940 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e0:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <HAL_SPI_MspInit+0x8c>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_SPI_MspInit+0x8c>)
 80028e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b17      	ldr	r3, [pc, #92]	@ (800294c <HAL_SPI_MspInit+0x8c>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b14      	ldr	r3, [pc, #80]	@ (800294c <HAL_SPI_MspInit+0x8c>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a13      	ldr	r2, [pc, #76]	@ (800294c <HAL_SPI_MspInit+0x8c>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_SPI_MspInit+0x8c>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002910:	23a0      	movs	r3, #160	@ 0xa0
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	480b      	ldr	r0, [pc, #44]	@ (8002950 <HAL_SPI_MspInit+0x90>)
 8002924:	f000 fb2c 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002928:	2340      	movs	r3, #64	@ 0x40
 800292a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4619      	mov	r1, r3
 800293a:	4805      	ldr	r0, [pc, #20]	@ (8002950 <HAL_SPI_MspInit+0x90>)
 800293c:	f000 fb20 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40013000 	.word	0x40013000
 800294c:	40021000 	.word	0x40021000
 8002950:	40010800 	.word	0x40010800

08002954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <HAL_UART_MspInit+0x8c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d131      	bne.n	80029d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002974:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <HAL_UART_MspInit+0x90>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_UART_MspInit+0x90>)
 800297a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800297e:	61d3      	str	r3, [r2, #28]
 8002980:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_UART_MspInit+0x90>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_UART_MspInit+0x90>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a14      	ldr	r2, [pc, #80]	@ (80029e4 <HAL_UART_MspInit+0x90>)
 8002992:	f043 0308 	orr.w	r3, r3, #8
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_UART_MspInit+0x90>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	4619      	mov	r1, r3
 80029b8:	480b      	ldr	r0, [pc, #44]	@ (80029e8 <HAL_UART_MspInit+0x94>)
 80029ba:	f000 fae1 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	4805      	ldr	r0, [pc, #20]	@ (80029e8 <HAL_UART_MspInit+0x94>)
 80029d4:	f000 fad4 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40004800 	.word	0x40004800
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010c00 	.word	0x40010c00

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <NMI_Handler+0x4>

080029f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <HardFault_Handler+0x4>

080029fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <MemManage_Handler+0x4>

08002a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <BusFault_Handler+0x4>

08002a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <UsageFault_Handler+0x4>

08002a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3c:	f000 f952 	bl	8002ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <RTC_IRQHandler+0x10>)
 8002a4a:	f001 fbef 	bl	800422c <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000200 	.word	0x20000200

08002a58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f000 fcff 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002a6c:	4802      	ldr	r0, [pc, #8]	@ (8002a78 <RTC_Alarm_IRQHandler+0x10>)
 8002a6e:	f001 fb2d 	bl	80040cc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000200 	.word	0x20000200

08002a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return 1;
 8002a80:	2301      	movs	r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <_kill>:

int _kill(int pid, int sig)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a94:	f003 fc4a 	bl	800632c <__errno>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2216      	movs	r2, #22
 8002a9c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_exit>:

void _exit (int status)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffe7 	bl	8002a8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <_exit+0x12>

08002ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e00a      	b.n	8002ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ad2:	f3af 8000 	nop.w
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60ba      	str	r2, [r7, #8]
 8002ade:	b2ca      	uxtb	r2, r1
 8002ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	dbf0      	blt.n	8002ad2 <_read+0x12>
  }

  return len;
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e009      	b.n	8002b20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	60ba      	str	r2, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f8f5 	bl	8001d04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dbf1      	blt.n	8002b0c <_write+0x12>
  }
  return len;
 8002b28:	687b      	ldr	r3, [r7, #4]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_close>:

int _close(int file)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b58:	605a      	str	r2, [r3, #4]
  return 0;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <_isatty>:

int _isatty(int file)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b6e:	2301      	movs	r3, #1
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b9c:	4a14      	ldr	r2, [pc, #80]	@ (8002bf0 <_sbrk+0x5c>)
 8002b9e:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <_sbrk+0x60>)
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba8:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <_sbrk+0x64>)
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <_sbrk+0x68>)
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb6:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d207      	bcs.n	8002bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc4:	f003 fbb2 	bl	800632c <__errno>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	220c      	movs	r2, #12
 8002bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	e009      	b.n	8002be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bda:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a05      	ldr	r2, [pc, #20]	@ (8002bf8 <_sbrk+0x64>)
 8002be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 }
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20005000 	.word	0x20005000
 8002bf4:	00000400 	.word	0x00000400
 8002bf8:	2000041c 	.word	0x2000041c
 8002bfc:	20000570 	.word	0x20000570

08002c00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c0c:	f7ff fff8 	bl	8002c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c10:	480b      	ldr	r0, [pc, #44]	@ (8002c40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c12:	490c      	ldr	r1, [pc, #48]	@ (8002c44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c14:	4a0c      	ldr	r2, [pc, #48]	@ (8002c48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c18:	e002      	b.n	8002c20 <LoopCopyDataInit>

08002c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1e:	3304      	adds	r3, #4

08002c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c24:	d3f9      	bcc.n	8002c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c26:	4a09      	ldr	r2, [pc, #36]	@ (8002c4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c28:	4c09      	ldr	r4, [pc, #36]	@ (8002c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c2c:	e001      	b.n	8002c32 <LoopFillZerobss>

08002c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c30:	3204      	adds	r2, #4

08002c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c34:	d3fb      	bcc.n	8002c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c36:	f003 fb7f 	bl	8006338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c3a:	f7ff fae9 	bl	8002210 <main>
  bx lr
 8002c3e:	4770      	bx	lr
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c44:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c48:	0800a774 	.word	0x0800a774
  ldr r2, =_sbss
 8002c4c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c50:	20000570 	.word	0x20000570

08002c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC1_2_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c5c:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_Init+0x28>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <HAL_Init+0x28>)
 8002c62:	f043 0310 	orr.w	r3, r3, #16
 8002c66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f000 f947 	bl	8002efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6e:	200f      	movs	r0, #15
 8002c70:	f000 f808 	bl	8002c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c74:	f7ff fdbe 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40022000 	.word	0x40022000

08002c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <HAL_InitTick+0x54>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b12      	ldr	r3, [pc, #72]	@ (8002cdc <HAL_InitTick+0x58>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f95f 	bl	8002f66 <HAL_SYSTICK_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00e      	b.n	8002cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	d80a      	bhi.n	8002cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f000 f927 	bl	8002f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc4:	4a06      	ldr	r2, [pc, #24]	@ (8002ce0 <HAL_InitTick+0x5c>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2000000c 	.word	0x2000000c
 8002cdc:	20000014 	.word	0x20000014
 8002ce0:	20000010 	.word	0x20000010

08002ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_IncTick+0x1c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_IncTick+0x20>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a03      	ldr	r2, [pc, #12]	@ (8002d04 <HAL_IncTick+0x20>)
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000014 	.word	0x20000014
 8002d04:	20000420 	.word	0x20000420

08002d08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d0c:	4b02      	ldr	r3, [pc, #8]	@ (8002d18 <HAL_GetTick+0x10>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000420 	.word	0x20000420

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffe0 	bl	8002d08 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000014 	.word	0x20000014

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4906      	ldr	r1, [pc, #24]	@ (8002dfc <__NVIC_EnableIRQ+0x34>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	@ (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ec8:	d301      	bcc.n	8002ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00f      	b.n	8002eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ece:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <SysTick_Config+0x40>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f7ff ff90 	bl	8002e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <SysTick_Config+0x40>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee6:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <SysTick_Config+0x40>)
 8002ee8:	2207      	movs	r2, #7
 8002eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	e000e010 	.word	0xe000e010

08002efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff2d 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f24:	f7ff ff42 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7ff ff90 	bl	8002e54 <NVIC_EncodePriority>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff5f 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f42:	bf00      	nop
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff35 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffa2 	bl	8002eb8 <SysTick_Config>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b08b      	sub	sp, #44	@ 0x2c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f92:	e169      	b.n	8003268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f94:	2201      	movs	r2, #1
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f040 8158 	bne.w	8003262 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a9a      	ldr	r2, [pc, #616]	@ (8003220 <HAL_GPIO_Init+0x2a0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d05e      	beq.n	800307a <HAL_GPIO_Init+0xfa>
 8002fbc:	4a98      	ldr	r2, [pc, #608]	@ (8003220 <HAL_GPIO_Init+0x2a0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d875      	bhi.n	80030ae <HAL_GPIO_Init+0x12e>
 8002fc2:	4a98      	ldr	r2, [pc, #608]	@ (8003224 <HAL_GPIO_Init+0x2a4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d058      	beq.n	800307a <HAL_GPIO_Init+0xfa>
 8002fc8:	4a96      	ldr	r2, [pc, #600]	@ (8003224 <HAL_GPIO_Init+0x2a4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d86f      	bhi.n	80030ae <HAL_GPIO_Init+0x12e>
 8002fce:	4a96      	ldr	r2, [pc, #600]	@ (8003228 <HAL_GPIO_Init+0x2a8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d052      	beq.n	800307a <HAL_GPIO_Init+0xfa>
 8002fd4:	4a94      	ldr	r2, [pc, #592]	@ (8003228 <HAL_GPIO_Init+0x2a8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d869      	bhi.n	80030ae <HAL_GPIO_Init+0x12e>
 8002fda:	4a94      	ldr	r2, [pc, #592]	@ (800322c <HAL_GPIO_Init+0x2ac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d04c      	beq.n	800307a <HAL_GPIO_Init+0xfa>
 8002fe0:	4a92      	ldr	r2, [pc, #584]	@ (800322c <HAL_GPIO_Init+0x2ac>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d863      	bhi.n	80030ae <HAL_GPIO_Init+0x12e>
 8002fe6:	4a92      	ldr	r2, [pc, #584]	@ (8003230 <HAL_GPIO_Init+0x2b0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d046      	beq.n	800307a <HAL_GPIO_Init+0xfa>
 8002fec:	4a90      	ldr	r2, [pc, #576]	@ (8003230 <HAL_GPIO_Init+0x2b0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d85d      	bhi.n	80030ae <HAL_GPIO_Init+0x12e>
 8002ff2:	2b12      	cmp	r3, #18
 8002ff4:	d82a      	bhi.n	800304c <HAL_GPIO_Init+0xcc>
 8002ff6:	2b12      	cmp	r3, #18
 8002ff8:	d859      	bhi.n	80030ae <HAL_GPIO_Init+0x12e>
 8002ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8003000 <HAL_GPIO_Init+0x80>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	0800307b 	.word	0x0800307b
 8003004:	08003055 	.word	0x08003055
 8003008:	08003067 	.word	0x08003067
 800300c:	080030a9 	.word	0x080030a9
 8003010:	080030af 	.word	0x080030af
 8003014:	080030af 	.word	0x080030af
 8003018:	080030af 	.word	0x080030af
 800301c:	080030af 	.word	0x080030af
 8003020:	080030af 	.word	0x080030af
 8003024:	080030af 	.word	0x080030af
 8003028:	080030af 	.word	0x080030af
 800302c:	080030af 	.word	0x080030af
 8003030:	080030af 	.word	0x080030af
 8003034:	080030af 	.word	0x080030af
 8003038:	080030af 	.word	0x080030af
 800303c:	080030af 	.word	0x080030af
 8003040:	080030af 	.word	0x080030af
 8003044:	0800305d 	.word	0x0800305d
 8003048:	08003071 	.word	0x08003071
 800304c:	4a79      	ldr	r2, [pc, #484]	@ (8003234 <HAL_GPIO_Init+0x2b4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003052:	e02c      	b.n	80030ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	623b      	str	r3, [r7, #32]
          break;
 800305a:	e029      	b.n	80030b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	3304      	adds	r3, #4
 8003062:	623b      	str	r3, [r7, #32]
          break;
 8003064:	e024      	b.n	80030b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	3308      	adds	r3, #8
 800306c:	623b      	str	r3, [r7, #32]
          break;
 800306e:	e01f      	b.n	80030b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	330c      	adds	r3, #12
 8003076:	623b      	str	r3, [r7, #32]
          break;
 8003078:	e01a      	b.n	80030b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003082:	2304      	movs	r3, #4
 8003084:	623b      	str	r3, [r7, #32]
          break;
 8003086:	e013      	b.n	80030b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003090:	2308      	movs	r3, #8
 8003092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	611a      	str	r2, [r3, #16]
          break;
 800309a:	e009      	b.n	80030b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800309c:	2308      	movs	r3, #8
 800309e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	615a      	str	r2, [r3, #20]
          break;
 80030a6:	e003      	b.n	80030b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
          break;
 80030ac:	e000      	b.n	80030b0 <HAL_GPIO_Init+0x130>
          break;
 80030ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2bff      	cmp	r3, #255	@ 0xff
 80030b4:	d801      	bhi.n	80030ba <HAL_GPIO_Init+0x13a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	e001      	b.n	80030be <HAL_GPIO_Init+0x13e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2bff      	cmp	r3, #255	@ 0xff
 80030c4:	d802      	bhi.n	80030cc <HAL_GPIO_Init+0x14c>
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x152>
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	3b08      	subs	r3, #8
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	210f      	movs	r1, #15
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	6a39      	ldr	r1, [r7, #32]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	431a      	orrs	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80b1 	beq.w	8003262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003100:	4b4d      	ldr	r3, [pc, #308]	@ (8003238 <HAL_GPIO_Init+0x2b8>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	4a4c      	ldr	r2, [pc, #304]	@ (8003238 <HAL_GPIO_Init+0x2b8>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6193      	str	r3, [r2, #24]
 800310c:	4b4a      	ldr	r3, [pc, #296]	@ (8003238 <HAL_GPIO_Init+0x2b8>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003118:	4a48      	ldr	r2, [pc, #288]	@ (800323c <HAL_GPIO_Init+0x2bc>)
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a40      	ldr	r2, [pc, #256]	@ (8003240 <HAL_GPIO_Init+0x2c0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_GPIO_Init+0x1ec>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3f      	ldr	r2, [pc, #252]	@ (8003244 <HAL_GPIO_Init+0x2c4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00d      	beq.n	8003168 <HAL_GPIO_Init+0x1e8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3e      	ldr	r2, [pc, #248]	@ (8003248 <HAL_GPIO_Init+0x2c8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <HAL_GPIO_Init+0x1e4>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3d      	ldr	r2, [pc, #244]	@ (800324c <HAL_GPIO_Init+0x2cc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_GPIO_Init+0x1e0>
 800315c:	2303      	movs	r3, #3
 800315e:	e006      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 8003160:	2304      	movs	r3, #4
 8003162:	e004      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 8003164:	2302      	movs	r3, #2
 8003166:	e002      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 800316c:	2300      	movs	r3, #0
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800317e:	492f      	ldr	r1, [pc, #188]	@ (800323c <HAL_GPIO_Init+0x2bc>)
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003198:	4b2d      	ldr	r3, [pc, #180]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	492c      	ldr	r1, [pc, #176]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	4928      	ldr	r1, [pc, #160]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c0:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4922      	ldr	r1, [pc, #136]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ce:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	491e      	ldr	r1, [pc, #120]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4918      	ldr	r1, [pc, #96]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031f6:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	4914      	ldr	r1, [pc, #80]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 8003200:	4013      	ands	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d021      	beq.n	8003254 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003210:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	490e      	ldr	r1, [pc, #56]	@ (8003250 <HAL_GPIO_Init+0x2d0>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
 800321c:	e021      	b.n	8003262 <HAL_GPIO_Init+0x2e2>
 800321e:	bf00      	nop
 8003220:	10320000 	.word	0x10320000
 8003224:	10310000 	.word	0x10310000
 8003228:	10220000 	.word	0x10220000
 800322c:	10210000 	.word	0x10210000
 8003230:	10120000 	.word	0x10120000
 8003234:	10110000 	.word	0x10110000
 8003238:	40021000 	.word	0x40021000
 800323c:	40010000 	.word	0x40010000
 8003240:	40010800 	.word	0x40010800
 8003244:	40010c00 	.word	0x40010c00
 8003248:	40011000 	.word	0x40011000
 800324c:	40011400 	.word	0x40011400
 8003250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_GPIO_Init+0x304>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	43db      	mvns	r3, r3
 800325c:	4909      	ldr	r1, [pc, #36]	@ (8003284 <HAL_GPIO_Init+0x304>)
 800325e:	4013      	ands	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	f47f ae8e 	bne.w	8002f94 <HAL_GPIO_Init+0x14>
  }
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	372c      	adds	r7, #44	@ 0x2c
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	@ 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003296:	e09a      	b.n	80033ce <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003298:	2201      	movs	r2, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 808d 	beq.w	80033c8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80032ae:	4a4e      	ldr	r2, [pc, #312]	@ (80033e8 <HAL_GPIO_DeInit+0x160>)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4013      	ands	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a46      	ldr	r2, [pc, #280]	@ (80033ec <HAL_GPIO_DeInit+0x164>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_GPIO_DeInit+0x78>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a45      	ldr	r2, [pc, #276]	@ (80033f0 <HAL_GPIO_DeInit+0x168>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00d      	beq.n	80032fc <HAL_GPIO_DeInit+0x74>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a44      	ldr	r2, [pc, #272]	@ (80033f4 <HAL_GPIO_DeInit+0x16c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <HAL_GPIO_DeInit+0x70>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a43      	ldr	r2, [pc, #268]	@ (80033f8 <HAL_GPIO_DeInit+0x170>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_GPIO_DeInit+0x6c>
 80032f0:	2303      	movs	r3, #3
 80032f2:	e006      	b.n	8003302 <HAL_GPIO_DeInit+0x7a>
 80032f4:	2304      	movs	r3, #4
 80032f6:	e004      	b.n	8003302 <HAL_GPIO_DeInit+0x7a>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e002      	b.n	8003302 <HAL_GPIO_DeInit+0x7a>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_GPIO_DeInit+0x7a>
 8003300:	2300      	movs	r3, #0
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	f002 0203 	and.w	r2, r2, #3
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	4093      	lsls	r3, r2
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	429a      	cmp	r2, r3
 8003310:	d132      	bne.n	8003378 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003312:	4b3a      	ldr	r3, [pc, #232]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	43db      	mvns	r3, r3
 800331a:	4938      	ldr	r1, [pc, #224]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 800331c:	4013      	ands	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003320:	4b36      	ldr	r3, [pc, #216]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	43db      	mvns	r3, r3
 8003328:	4934      	ldr	r1, [pc, #208]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 800332a:	4013      	ands	r3, r2
 800332c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	43db      	mvns	r3, r3
 8003336:	4931      	ldr	r1, [pc, #196]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 8003338:	4013      	ands	r3, r2
 800333a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800333c:	4b2f      	ldr	r3, [pc, #188]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	43db      	mvns	r3, r3
 8003344:	492d      	ldr	r1, [pc, #180]	@ (80033fc <HAL_GPIO_DeInit+0x174>)
 8003346:	4013      	ands	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800335a:	4a23      	ldr	r2, [pc, #140]	@ (80033e8 <HAL_GPIO_DeInit+0x160>)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	43da      	mvns	r2, r3
 800336a:	481f      	ldr	r0, [pc, #124]	@ (80033e8 <HAL_GPIO_DeInit+0x160>)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	400a      	ands	r2, r1
 8003372:	3302      	adds	r3, #2
 8003374:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2bff      	cmp	r3, #255	@ 0xff
 800337c:	d801      	bhi.n	8003382 <HAL_GPIO_DeInit+0xfa>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	e001      	b.n	8003386 <HAL_GPIO_DeInit+0xfe>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2bff      	cmp	r3, #255	@ 0xff
 800338c:	d802      	bhi.n	8003394 <HAL_GPIO_DeInit+0x10c>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	e002      	b.n	800339a <HAL_GPIO_DeInit+0x112>
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	3b08      	subs	r3, #8
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	210f      	movs	r1, #15
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	401a      	ands	r2, r3
 80033ac:	2104      	movs	r1, #4
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	431a      	orrs	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	401a      	ands	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	fa22 f303 	lsr.w	r3, r2, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f47f af5e 	bne.w	8003298 <HAL_GPIO_DeInit+0x10>
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3724      	adds	r7, #36	@ 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40010800 	.word	0x40010800
 80033f0:	40010c00 	.word	0x40010c00
 80033f4:	40011000 	.word	0x40011000
 80033f8:	40011400 	.word	0x40011400
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e001      	b.n	8003422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	807b      	strh	r3, [r7, #2]
 800343a:	4613      	mov	r3, r2
 800343c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800343e:	787b      	ldrb	r3, [r7, #1]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003444:	887a      	ldrh	r2, [r7, #2]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800344a:	e003      	b.n	8003454 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	041a      	lsls	r2, r3, #16
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	611a      	str	r2, [r3, #16]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
	...

08003460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800346a:	4b08      	ldr	r3, [pc, #32]	@ (800348c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003476:	4a05      	ldr	r2, [pc, #20]	@ (800348c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f806 	bl	8003490 <HAL_GPIO_EXTI_Callback>
  }
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40010400 	.word	0x40010400

08003490 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	420e0020 	.word	0x420e0020

080034bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e272      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8087 	beq.w	80035ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034dc:	4b92      	ldr	r3, [pc, #584]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d00c      	beq.n	8003502 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d112      	bne.n	800351a <HAL_RCC_OscConfig+0x5e>
 80034f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003500:	d10b      	bne.n	800351a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003502:	4b89      	ldr	r3, [pc, #548]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d06c      	beq.n	80035e8 <HAL_RCC_OscConfig+0x12c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d168      	bne.n	80035e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e24c      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x76>
 8003524:	4b80      	ldr	r3, [pc, #512]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a7f      	ldr	r2, [pc, #508]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e02e      	b.n	8003590 <HAL_RCC_OscConfig+0xd4>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x98>
 800353a:	4b7b      	ldr	r3, [pc, #492]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7a      	ldr	r2, [pc, #488]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b78      	ldr	r3, [pc, #480]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a77      	ldr	r2, [pc, #476]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800354c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0xd4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0xbc>
 800355e:	4b72      	ldr	r3, [pc, #456]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a71      	ldr	r2, [pc, #452]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b6f      	ldr	r3, [pc, #444]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6e      	ldr	r2, [pc, #440]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0xd4>
 8003578:	4b6b      	ldr	r3, [pc, #428]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6a      	ldr	r2, [pc, #424]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b68      	ldr	r3, [pc, #416]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a67      	ldr	r2, [pc, #412]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7ff fbb6 	bl	8002d08 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7ff fbb2 	bl	8002d08 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e200      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe4>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7ff fba2 	bl	8002d08 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7ff fb9e 	bl	8002d08 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	@ 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1ec      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	4b53      	ldr	r3, [pc, #332]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x10c>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003602:	4b49      	ldr	r3, [pc, #292]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b08      	cmp	r3, #8
 800360c:	d11c      	bne.n	8003648 <HAL_RCC_OscConfig+0x18c>
 800360e:	4b46      	ldr	r3, [pc, #280]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d116      	bne.n	8003648 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	4b43      	ldr	r3, [pc, #268]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x176>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1c0      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003632:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4939      	ldr	r1, [pc, #228]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	e03a      	b.n	80036be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003650:	4b36      	ldr	r3, [pc, #216]	@ (800372c <HAL_RCC_OscConfig+0x270>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7ff fb57 	bl	8002d08 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365e:	f7ff fb53 	bl	8002d08 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1a1      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b2a      	ldr	r3, [pc, #168]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4927      	ldr	r1, [pc, #156]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
 8003690:	e015      	b.n	80036be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003692:	4b26      	ldr	r3, [pc, #152]	@ (800372c <HAL_RCC_OscConfig+0x270>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7ff fb36 	bl	8002d08 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a0:	f7ff fb32 	bl	8002d08 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e180      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d03a      	beq.n	8003740 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d019      	beq.n	8003706 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d2:	4b17      	ldr	r3, [pc, #92]	@ (8003730 <HAL_RCC_OscConfig+0x274>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d8:	f7ff fb16 	bl	8002d08 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e0:	f7ff fb12 	bl	8002d08 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e160      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036fe:	2001      	movs	r0, #1
 8003700:	f000 face 	bl	8003ca0 <RCC_Delay>
 8003704:	e01c      	b.n	8003740 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003706:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <HAL_RCC_OscConfig+0x274>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7ff fafc 	bl	8002d08 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003712:	e00f      	b.n	8003734 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003714:	f7ff faf8 	bl	8002d08 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d908      	bls.n	8003734 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e146      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	42420000 	.word	0x42420000
 8003730:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003734:	4b92      	ldr	r3, [pc, #584]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e9      	bne.n	8003714 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80a6 	beq.w	800389a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003752:	4b8b      	ldr	r3, [pc, #556]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10d      	bne.n	800377a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375e:	4b88      	ldr	r3, [pc, #544]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a87      	ldr	r2, [pc, #540]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003768:	61d3      	str	r3, [r2, #28]
 800376a:	4b85      	ldr	r3, [pc, #532]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	4b82      	ldr	r3, [pc, #520]	@ (8003984 <HAL_RCC_OscConfig+0x4c8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d118      	bne.n	80037b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003786:	4b7f      	ldr	r3, [pc, #508]	@ (8003984 <HAL_RCC_OscConfig+0x4c8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7e      	ldr	r2, [pc, #504]	@ (8003984 <HAL_RCC_OscConfig+0x4c8>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003792:	f7ff fab9 	bl	8002d08 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7ff fab5 	bl	8002d08 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b64      	cmp	r3, #100	@ 0x64
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e103      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4b75      	ldr	r3, [pc, #468]	@ (8003984 <HAL_RCC_OscConfig+0x4c8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x312>
 80037c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6213      	str	r3, [r2, #32]
 80037cc:	e02d      	b.n	800382a <HAL_RCC_OscConfig+0x36e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x334>
 80037d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a69      	ldr	r2, [pc, #420]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6213      	str	r3, [r2, #32]
 80037e2:	4b67      	ldr	r3, [pc, #412]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4a66      	ldr	r2, [pc, #408]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	6213      	str	r3, [r2, #32]
 80037ee:	e01c      	b.n	800382a <HAL_RCC_OscConfig+0x36e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d10c      	bne.n	8003812 <HAL_RCC_OscConfig+0x356>
 80037f8:	4b61      	ldr	r3, [pc, #388]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a60      	ldr	r2, [pc, #384]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	f043 0304 	orr.w	r3, r3, #4
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	4b5e      	ldr	r3, [pc, #376]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	4a5d      	ldr	r2, [pc, #372]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	6213      	str	r3, [r2, #32]
 8003810:	e00b      	b.n	800382a <HAL_RCC_OscConfig+0x36e>
 8003812:	4b5b      	ldr	r3, [pc, #364]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a5a      	ldr	r2, [pc, #360]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6213      	str	r3, [r2, #32]
 800381e:	4b58      	ldr	r3, [pc, #352]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4a57      	ldr	r2, [pc, #348]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	f023 0304 	bic.w	r3, r3, #4
 8003828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d015      	beq.n	800385e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003832:	f7ff fa69 	bl	8002d08 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7ff fa65 	bl	8002d08 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e0b1      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	4b4b      	ldr	r3, [pc, #300]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ee      	beq.n	800383a <HAL_RCC_OscConfig+0x37e>
 800385c:	e014      	b.n	8003888 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7ff fa53 	bl	8002d08 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7ff fa4f 	bl	8002d08 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e09b      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387c:	4b40      	ldr	r3, [pc, #256]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ee      	bne.n	8003866 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d105      	bne.n	800389a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388e:	4b3c      	ldr	r3, [pc, #240]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	4a3b      	ldr	r2, [pc, #236]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003898:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8087 	beq.w	80039b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a4:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d061      	beq.n	8003974 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d146      	bne.n	8003946 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b8:	4b33      	ldr	r3, [pc, #204]	@ (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7ff fa23 	bl	8002d08 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c6:	f7ff fa1f 	bl	8002d08 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e06d      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d8:	4b29      	ldr	r3, [pc, #164]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ec:	d108      	bne.n	8003900 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038ee:	4b24      	ldr	r3, [pc, #144]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4921      	ldr	r1, [pc, #132]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003900:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a19      	ldr	r1, [r3, #32]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	430b      	orrs	r3, r1
 8003912:	491b      	ldr	r1, [pc, #108]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003918:	4b1b      	ldr	r3, [pc, #108]	@ (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7ff f9f3 	bl	8002d08 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003926:	f7ff f9ef 	bl	8002d08 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e03d      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003938:	4b11      	ldr	r3, [pc, #68]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x46a>
 8003944:	e035      	b.n	80039b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003946:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7ff f9dc 	bl	8002d08 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7ff f9d8 	bl	8002d08 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e026      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x498>
 8003972:	e01e      	b.n	80039b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e019      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
 8003980:	40021000 	.word	0x40021000
 8003984:	40007000 	.word	0x40007000
 8003988:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <HAL_RCC_OscConfig+0x500>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	429a      	cmp	r2, r3
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000

080039c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0d0      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d910      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b67      	ldr	r3, [pc, #412]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4965      	ldr	r1, [pc, #404]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b63      	ldr	r3, [pc, #396]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0b8      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b59      	ldr	r3, [pc, #356]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4a58      	ldr	r2, [pc, #352]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	4b53      	ldr	r3, [pc, #332]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a52      	ldr	r2, [pc, #328]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b50      	ldr	r3, [pc, #320]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494d      	ldr	r1, [pc, #308]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d040      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b47      	ldr	r3, [pc, #284]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d115      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7e:	4b41      	ldr	r3, [pc, #260]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e073      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06b      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4936      	ldr	r1, [pc, #216]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab0:	f7ff f92a 	bl	8002d08 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7ff f926 	bl	8002d08 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e053      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b27      	ldr	r3, [pc, #156]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d210      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b24      	ldr	r3, [pc, #144]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 0207 	bic.w	r2, r3, #7
 8003af6:	4922      	ldr	r1, [pc, #136]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e032      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4916      	ldr	r1, [pc, #88]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3a:	4b12      	ldr	r3, [pc, #72]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	490e      	ldr	r1, [pc, #56]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b4e:	f000 f821 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b52:	4602      	mov	r2, r0
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	490a      	ldr	r1, [pc, #40]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	5ccb      	ldrb	r3, [r1, r3]
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <HAL_RCC_ClockConfig+0x1cc>)
 8003b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_ClockConfig+0x1d0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f888 	bl	8002c84 <HAL_InitTick>

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40021000 	.word	0x40021000
 8003b88:	0800a2dc 	.word	0x0800a2dc
 8003b8c:	2000000c 	.word	0x2000000c
 8003b90:	20000010 	.word	0x20000010

08003b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bae:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d002      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x36>
 8003bc2:	e027      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003bc6:	613b      	str	r3, [r7, #16]
      break;
 8003bc8:	e027      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	0c9b      	lsrs	r3, r3, #18
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	4a17      	ldr	r2, [pc, #92]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bd4:	5cd3      	ldrb	r3, [r2, r3]
 8003bd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003be2:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	0c5b      	lsrs	r3, r3, #17
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	4a11      	ldr	r2, [pc, #68]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003bf6:	fb03 f202 	mul.w	r2, r3, r2
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e004      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0c      	ldr	r2, [pc, #48]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c08:	fb02 f303 	mul.w	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	613b      	str	r3, [r7, #16]
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c16:	613b      	str	r3, [r7, #16]
      break;
 8003c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1a:	693b      	ldr	r3, [r7, #16]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	007a1200 	.word	0x007a1200
 8003c30:	0800a2f4 	.word	0x0800a2f4
 8003c34:	0800a304 	.word	0x0800a304
 8003c38:	003d0900 	.word	0x003d0900

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b02      	ldr	r3, [pc, #8]	@ (8003c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c54:	f7ff fff2 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	0800a2ec 	.word	0x0800a2ec

08003c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c7c:	f7ff ffde 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	0adb      	lsrs	r3, r3, #11
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	@ (8003c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	0800a2ec 	.word	0x0800a2ec

08003ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <RCC_Delay+0x34>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <RCC_Delay+0x38>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	0a5b      	lsrs	r3, r3, #9
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cbc:	bf00      	nop
  }
  while (Delay --);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	60fa      	str	r2, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f9      	bne.n	8003cbc <RCC_Delay+0x1c>
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	2000000c 	.word	0x2000000c
 8003cd8:	10624dd3 	.word	0x10624dd3

08003cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d07d      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d08:	4b4c      	ldr	r3, [pc, #304]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	61d3      	str	r3, [r2, #28]
 8003d14:	4b49      	ldr	r3, [pc, #292]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	4b46      	ldr	r3, [pc, #280]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d118      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d30:	4b43      	ldr	r3, [pc, #268]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a42      	ldr	r2, [pc, #264]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3c:	f7fe ffe4 	bl	8002d08 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d42:	e008      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d44:	f7fe ffe0 	bl	8002d08 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	@ 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e06d      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	4b3a      	ldr	r3, [pc, #232]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d62:	4b36      	ldr	r3, [pc, #216]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02e      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d027      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d80:	4b2e      	ldr	r3, [pc, #184]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d90:	4b2c      	ldr	r3, [pc, #176]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d96:	4a29      	ldr	r2, [pc, #164]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d014      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da6:	f7fe ffaf 	bl	8002d08 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fe ffab 	bl	8002d08 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e036      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ee      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4917      	ldr	r1, [pc, #92]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de8:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4a13      	ldr	r2, [pc, #76]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e00:	4b0e      	ldr	r3, [pc, #56]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	490b      	ldr	r1, [pc, #44]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4904      	ldr	r1, [pc, #16]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42420440 	.word	0x42420440

08003e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	f200 808a 	bhi.w	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d045      	beq.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d075      	beq.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e7e:	e082      	b.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003e80:	4b46      	ldr	r3, [pc, #280]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e86:	4b45      	ldr	r3, [pc, #276]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d07b      	beq.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	0c9b      	lsrs	r3, r3, #18
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	4a41      	ldr	r2, [pc, #260]	@ (8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e9c:	5cd3      	ldrb	r3, [r2, r3]
 8003e9e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d015      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	0c5b      	lsrs	r3, r3, #17
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003eb6:	5cd3      	ldrb	r3, [r2, r3]
 8003eb8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ec4:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	e004      	b.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4a34      	ldr	r2, [pc, #208]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eec:	d102      	bne.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	61bb      	str	r3, [r7, #24]
      break;
 8003ef2:	e04a      	b.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
      break;
 8003f02:	e042      	b.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f04:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f14:	d108      	bne.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e01f      	b.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f32:	d109      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f34:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f40:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e00f      	b.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f52:	d11c      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d016      	beq.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003f60:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003f64:	61bb      	str	r3, [r7, #24]
      break;
 8003f66:	e012      	b.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f68:	e011      	b.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f6a:	f7ff fe85 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0b9b      	lsrs	r3, r3, #14
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	61bb      	str	r3, [r7, #24]
      break;
 8003f84:	e004      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f86:	bf00      	nop
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f8e:	bf00      	nop
    }
  }
  return (frequency);
 8003f90:	69bb      	ldr	r3, [r7, #24]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	0800a308 	.word	0x0800a308
 8003fa4:	0800a318 	.word	0x0800a318
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	003d0900 	.word	0x003d0900
 8003fb0:	aaaaaaab 	.word	0xaaaaaaab

08003fb4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07a      	b.n	80040c0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7c5b      	ldrb	r3, [r3, #17]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe fc3c 	bl	8002858 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8a3 	bl	8004132 <HAL_RTC_WaitForSynchro>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e061      	b.n	80040c0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8c5 	bl	800418c <RTC_EnterInitMode>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2204      	movs	r2, #4
 800400c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e056      	b.n	80040c0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0207 	bic.w	r2, r2, #7
 8004020:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800402a:	4b27      	ldr	r3, [pc, #156]	@ (80040c8 <HAL_RTC_Init+0x114>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	4a26      	ldr	r2, [pc, #152]	@ (80040c8 <HAL_RTC_Init+0x114>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <HAL_RTC_Init+0x114>)
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4921      	ldr	r1, [pc, #132]	@ (80040c8 <HAL_RTC_Init+0x114>)
 8004044:	4313      	orrs	r3, r2
 8004046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d003      	beq.n	800405a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e00e      	b.n	8004078 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800405a:	2001      	movs	r0, #1
 800405c:	f7ff fef4 	bl	8003e48 <HAL_RCCEx_GetPeriphCLKFreq>
 8004060:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2204      	movs	r2, #4
 800406c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e026      	b.n	80040c0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b01      	subs	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	0c1a      	lsrs	r2, r3, #16
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f002 020f 	and.w	r2, r2, #15
 8004084:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	b292      	uxth	r2, r2
 800408e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8a3 	bl	80041dc <RTC_ExitInitMode>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00c      	b.n	80040c0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80040be:	2300      	movs	r3, #0
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40006c00 	.word	0x40006c00

080040cc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f815 	bl	8004120 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0202 	bic.w	r2, r2, #2
 8004104:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004106:	4b05      	ldr	r3, [pc, #20]	@ (800411c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004108:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800410c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	745a      	strb	r2, [r3, #17]
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40010400 	.word	0x40010400

08004120 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e01d      	b.n	8004184 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0208 	bic.w	r2, r2, #8
 8004156:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004158:	f7fe fdd6 	bl	8002d08 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800415e:	e009      	b.n	8004174 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004160:	f7fe fdd2 	bl	8002d08 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800416e:	d901      	bls.n	8004174 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e007      	b.n	8004184 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ee      	beq.n	8004160 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004198:	f7fe fdb6 	bl	8002d08 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800419e:	e009      	b.n	80041b4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80041a0:	f7fe fdb2 	bl	8002d08 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041ae:	d901      	bls.n	80041b4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e00f      	b.n	80041d4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0ee      	beq.n	80041a0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0210 	orr.w	r2, r2, #16
 80041d0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0210 	bic.w	r2, r2, #16
 80041f6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80041f8:	f7fe fd86 	bl	8002d08 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80041fe:	e009      	b.n	8004214 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004200:	f7fe fd82 	bl	8002d08 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800420e:	d901      	bls.n	8004214 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e007      	b.n	8004224 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0ee      	beq.n	8004200 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d027      	beq.n	8004292 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f824 	bl	80042ac <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0204 	mvn.w	r2, #4
 800426c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2204      	movs	r2, #4
 8004272:	745a      	strb	r2, [r3, #17]
 8004274:	e005      	b.n	8004282 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f80f 	bl	800429a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e076      	b.n	80043be <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d108      	bne.n	80042ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042e0:	d009      	beq.n	80042f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	61da      	str	r2, [r3, #28]
 80042e8:	e005      	b.n	80042f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fe fad5 	bl	80028c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800432c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	ea42 0103 	orr.w	r1, r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	0c1a      	lsrs	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 0204 	and.w	r2, r2, #4
 800439c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b088      	sub	sp, #32
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043d6:	f7fe fc97 	bl	8002d08 <HAL_GetTick>
 80043da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
 80043ee:	e12a      	b.n	8004646 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_SPI_Transmit+0x36>
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e122      	b.n	8004646 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_SPI_Transmit+0x48>
 800440a:	2302      	movs	r3, #2
 800440c:	e11b      	b.n	8004646 <HAL_SPI_Transmit+0x280>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2203      	movs	r2, #3
 800441a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445c:	d10f      	bne.n	800447e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800446c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800447c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004488:	2b40      	cmp	r3, #64	@ 0x40
 800448a:	d007      	beq.n	800449c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800449a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044a4:	d152      	bne.n	800454c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_SPI_Transmit+0xee>
 80044ae:	8b7b      	ldrh	r3, [r7, #26]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d145      	bne.n	8004540 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044d8:	e032      	b.n	8004540 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d112      	bne.n	800450e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800450c:	e018      	b.n	8004540 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450e:	f7fe fbfb 	bl	8002d08 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d803      	bhi.n	8004526 <HAL_SPI_Transmit+0x160>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d102      	bne.n	800452c <HAL_SPI_Transmit+0x166>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e082      	b.n	8004646 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1c7      	bne.n	80044da <HAL_SPI_Transmit+0x114>
 800454a:	e053      	b.n	80045f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_Transmit+0x194>
 8004554:	8b7b      	ldrh	r3, [r7, #26]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d147      	bne.n	80045ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004580:	e033      	b.n	80045ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d113      	bne.n	80045b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	7812      	ldrb	r2, [r2, #0]
 800459c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045b6:	e018      	b.n	80045ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045b8:	f7fe fba6 	bl	8002d08 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d803      	bhi.n	80045d0 <HAL_SPI_Transmit+0x20a>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d102      	bne.n	80045d6 <HAL_SPI_Transmit+0x210>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e02d      	b.n	8004646 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1c6      	bne.n	8004582 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fbd1 	bl	8004da0 <SPI_EndRxTxTransaction>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004644:	2300      	movs	r3, #0
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b088      	sub	sp, #32
 8004652:	af02      	add	r7, sp, #8
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d001      	beq.n	800466e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	e104      	b.n	8004878 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004676:	d112      	bne.n	800469e <HAL_SPI_Receive+0x50>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10e      	bne.n	800469e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2204      	movs	r2, #4
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f8f3 	bl	8004880 <HAL_SPI_TransmitReceive>
 800469a:	4603      	mov	r3, r0
 800469c:	e0ec      	b.n	8004878 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800469e:	f7fe fb33 	bl	8002d08 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_SPI_Receive+0x62>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0e1      	b.n	8004878 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_SPI_Receive+0x74>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0da      	b.n	8004878 <HAL_SPI_Receive+0x22a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2204      	movs	r2, #4
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004710:	d10f      	bne.n	8004732 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004730:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d007      	beq.n	8004750 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800474e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d170      	bne.n	800483a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004758:	e035      	b.n	80047c6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d115      	bne.n	8004794 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f103 020c 	add.w	r2, r3, #12
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004792:	e018      	b.n	80047c6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004794:	f7fe fab8 	bl	8002d08 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d803      	bhi.n	80047ac <HAL_SPI_Receive+0x15e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d102      	bne.n	80047b2 <HAL_SPI_Receive+0x164>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e058      	b.n	8004878 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1c4      	bne.n	800475a <HAL_SPI_Receive+0x10c>
 80047d0:	e038      	b.n	8004844 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d113      	bne.n	8004808 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	b292      	uxth	r2, r2
 80047ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f2:	1c9a      	adds	r2, r3, #2
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004806:	e018      	b.n	800483a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004808:	f7fe fa7e 	bl	8002d08 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d803      	bhi.n	8004820 <HAL_SPI_Receive+0x1d2>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d102      	bne.n	8004826 <HAL_SPI_Receive+0x1d8>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e01e      	b.n	8004878 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1c6      	bne.n	80047d2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fa57 	bl	8004cfc <SPI_EndRxTransaction>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004876:	2300      	movs	r3, #0
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	@ 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800488e:	2301      	movs	r3, #1
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004892:	f7fe fa39 	bl	8002d08 <HAL_GetTick>
 8004896:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800489e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048aa:	7ffb      	ldrb	r3, [r7, #31]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d00c      	beq.n	80048ca <HAL_SPI_TransmitReceive+0x4a>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048b6:	d106      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x46>
 80048c0:	7ffb      	ldrb	r3, [r7, #31]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d001      	beq.n	80048ca <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
 80048c8:	e17f      	b.n	8004bca <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x5c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x5c>
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e174      	b.n	8004bca <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x6e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e16d      	b.n	8004bca <HAL_SPI_TransmitReceive+0x34a>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d003      	beq.n	800490a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2205      	movs	r2, #5
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	887a      	ldrh	r2, [r7, #2]
 800491a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	887a      	ldrh	r2, [r7, #2]
 8004920:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	887a      	ldrh	r2, [r7, #2]
 8004932:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494a:	2b40      	cmp	r3, #64	@ 0x40
 800494c:	d007      	beq.n	800495e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004966:	d17e      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_SPI_TransmitReceive+0xf6>
 8004970:	8afb      	ldrh	r3, [r7, #22]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d16c      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	1c9a      	adds	r2, r3, #2
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800499a:	e059      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d11b      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x162>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d016      	beq.n	80049e2 <HAL_SPI_TransmitReceive+0x162>
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d113      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	881a      	ldrh	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d119      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x1a4>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d014      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	b292      	uxth	r2, r2
 8004a06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	1c9a      	adds	r2, r3, #2
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a20:	2301      	movs	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a24:	f7fe f970 	bl	8002d08 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d80d      	bhi.n	8004a50 <HAL_SPI_TransmitReceive+0x1d0>
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d009      	beq.n	8004a50 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0bc      	b.n	8004bca <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1a0      	bne.n	800499c <HAL_SPI_TransmitReceive+0x11c>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d19b      	bne.n	800499c <HAL_SPI_TransmitReceive+0x11c>
 8004a64:	e082      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x1f4>
 8004a6e:	8afb      	ldrh	r3, [r7, #22]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d171      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a9a:	e05d      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d11c      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x264>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0x264>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d114      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d119      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x2a6>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d014      	beq.n	8004b26 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b22:	2301      	movs	r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b26:	f7fe f8ef 	bl	8002d08 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d803      	bhi.n	8004b3e <HAL_SPI_TransmitReceive+0x2be>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x2c4>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e038      	b.n	8004bca <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d19c      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x21c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d197      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f915 	bl	8004da0 <SPI_EndRxTxTransaction>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e01d      	b.n	8004bca <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3728      	adds	r7, #40	@ 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004be0:	b2db      	uxtb	r3, r3
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bfc:	f7fe f884 	bl	8002d08 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c0c:	f7fe f87c 	bl	8002d08 <HAL_GetTick>
 8004c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c12:	4b39      	ldr	r3, [pc, #228]	@ (8004cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	015b      	lsls	r3, r3, #5
 8004c18:	0d1b      	lsrs	r3, r3, #20
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c22:	e054      	b.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d050      	beq.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c2c:	f7fe f86c 	bl	8002d08 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d902      	bls.n	8004c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d13d      	bne.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c5a:	d111      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c64:	d004      	beq.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d107      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c88:	d10f      	bne.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e017      	b.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d19b      	bne.n	8004c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d10:	d111      	bne.n	8004d36 <SPI_EndRxTransaction+0x3a>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d1a:	d004      	beq.n	8004d26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d24:	d107      	bne.n	8004d36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d3e:	d117      	bne.n	8004d70 <SPI_EndRxTransaction+0x74>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d48:	d112      	bne.n	8004d70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2101      	movs	r1, #1
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff ff49 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e013      	b.n	8004d98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2180      	movs	r1, #128	@ 0x80
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff ff36 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e000      	b.n	8004d98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2201      	movs	r2, #1
 8004db4:	2102      	movs	r1, #2
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff ff18 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e013      	b.n	8004dfa <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff ff05 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e000      	b.n	8004dfa <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e042      	b.n	8004e9a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fd fd93 	bl	8002954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2224      	movs	r2, #36	@ 0x24
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f972 	bl	8005130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b08a      	sub	sp, #40	@ 0x28
 8004ea6:	af02      	add	r7, sp, #8
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d175      	bne.n	8004fae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_UART_Transmit+0x2c>
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e06e      	b.n	8004fb0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2221      	movs	r2, #33	@ 0x21
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ee0:	f7fd ff12 	bl	8002d08 <HAL_GetTick>
 8004ee4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efa:	d108      	bne.n	8004f0e <HAL_UART_Transmit+0x6c>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e003      	b.n	8004f16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f16:	e02e      	b.n	8004f76 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2180      	movs	r1, #128	@ 0x80
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f848 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e03a      	b.n	8004fb0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3302      	adds	r3, #2
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e007      	b.n	8004f68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3301      	adds	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1cb      	bne.n	8004f18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2140      	movs	r1, #64	@ 0x40
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f814 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e006      	b.n	8004fb0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc8:	e03b      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d037      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fd fe99 	bl	8002d08 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e03a      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d023      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b80      	cmp	r3, #128	@ 0x80
 8004ffe:	d020      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b40      	cmp	r3, #64	@ 0x40
 8005004:	d01d      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b08      	cmp	r3, #8
 8005012:	d116      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f81d 	bl	800506a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2208      	movs	r2, #8
 8005034:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e00f      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	429a      	cmp	r2, r3
 800505e:	d0b4      	beq.n	8004fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b095      	sub	sp, #84	@ 0x54
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005092:	643a      	str	r2, [r7, #64]	@ 0x40
 8005094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e5      	bne.n	8005072 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e5      	bne.n	80050a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d119      	bne.n	8005116 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0310 	bic.w	r3, r3, #16
 80050f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005102:	61ba      	str	r2, [r7, #24]
 8005104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	613b      	str	r3, [r7, #16]
   return(result);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005124:	bf00      	nop
 8005126:	3754      	adds	r7, #84	@ 0x54
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
	...

08005130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800516a:	f023 030c 	bic.w	r3, r3, #12
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	430b      	orrs	r3, r1
 8005176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2c      	ldr	r2, [pc, #176]	@ (8005244 <UART_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d103      	bne.n	80051a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005198:	f7fe fd6e 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	e002      	b.n	80051a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051a0:	f7fe fd56 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 80051a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009a      	lsls	r2, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	4a22      	ldr	r2, [pc, #136]	@ (8005248 <UART_SetConfig+0x118>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	0119      	lsls	r1, r3, #4
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009a      	lsls	r2, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <UART_SetConfig+0x118>)
 80051de:	fba3 0302 	umull	r0, r3, r3, r2
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2064      	movs	r0, #100	@ 0x64
 80051e6:	fb00 f303 	mul.w	r3, r0, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	3332      	adds	r3, #50	@ 0x32
 80051f0:	4a15      	ldr	r2, [pc, #84]	@ (8005248 <UART_SetConfig+0x118>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051fc:	4419      	add	r1, r3
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009a      	lsls	r2, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	fbb2 f2f3 	udiv	r2, r2, r3
 8005214:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <UART_SetConfig+0x118>)
 8005216:	fba3 0302 	umull	r0, r3, r3, r2
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	2064      	movs	r0, #100	@ 0x64
 800521e:	fb00 f303 	mul.w	r3, r0, r3
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	3332      	adds	r3, #50	@ 0x32
 8005228:	4a07      	ldr	r2, [pc, #28]	@ (8005248 <UART_SetConfig+0x118>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	f003 020f 	and.w	r2, r3, #15
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	440a      	add	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40013800 	.word	0x40013800
 8005248:	51eb851f 	.word	0x51eb851f

0800524c <__cvt>:
 800524c:	2b00      	cmp	r3, #0
 800524e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005252:	461d      	mov	r5, r3
 8005254:	bfbb      	ittet	lt
 8005256:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800525a:	461d      	movlt	r5, r3
 800525c:	2300      	movge	r3, #0
 800525e:	232d      	movlt	r3, #45	@ 0x2d
 8005260:	b088      	sub	sp, #32
 8005262:	4614      	mov	r4, r2
 8005264:	bfb8      	it	lt
 8005266:	4614      	movlt	r4, r2
 8005268:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800526a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800526c:	7013      	strb	r3, [r2, #0]
 800526e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005270:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005274:	f023 0820 	bic.w	r8, r3, #32
 8005278:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800527c:	d005      	beq.n	800528a <__cvt+0x3e>
 800527e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005282:	d100      	bne.n	8005286 <__cvt+0x3a>
 8005284:	3601      	adds	r6, #1
 8005286:	2302      	movs	r3, #2
 8005288:	e000      	b.n	800528c <__cvt+0x40>
 800528a:	2303      	movs	r3, #3
 800528c:	aa07      	add	r2, sp, #28
 800528e:	9204      	str	r2, [sp, #16]
 8005290:	aa06      	add	r2, sp, #24
 8005292:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005296:	e9cd 3600 	strd	r3, r6, [sp]
 800529a:	4622      	mov	r2, r4
 800529c:	462b      	mov	r3, r5
 800529e:	f001 f90f 	bl	80064c0 <_dtoa_r>
 80052a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052a6:	4607      	mov	r7, r0
 80052a8:	d119      	bne.n	80052de <__cvt+0x92>
 80052aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80052ac:	07db      	lsls	r3, r3, #31
 80052ae:	d50e      	bpl.n	80052ce <__cvt+0x82>
 80052b0:	eb00 0906 	add.w	r9, r0, r6
 80052b4:	2200      	movs	r2, #0
 80052b6:	2300      	movs	r3, #0
 80052b8:	4620      	mov	r0, r4
 80052ba:	4629      	mov	r1, r5
 80052bc:	f7fb fb7e 	bl	80009bc <__aeabi_dcmpeq>
 80052c0:	b108      	cbz	r0, 80052c6 <__cvt+0x7a>
 80052c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80052c6:	2230      	movs	r2, #48	@ 0x30
 80052c8:	9b07      	ldr	r3, [sp, #28]
 80052ca:	454b      	cmp	r3, r9
 80052cc:	d31e      	bcc.n	800530c <__cvt+0xc0>
 80052ce:	4638      	mov	r0, r7
 80052d0:	9b07      	ldr	r3, [sp, #28]
 80052d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80052d4:	1bdb      	subs	r3, r3, r7
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	b008      	add	sp, #32
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052e2:	eb00 0906 	add.w	r9, r0, r6
 80052e6:	d1e5      	bne.n	80052b4 <__cvt+0x68>
 80052e8:	7803      	ldrb	r3, [r0, #0]
 80052ea:	2b30      	cmp	r3, #48	@ 0x30
 80052ec:	d10a      	bne.n	8005304 <__cvt+0xb8>
 80052ee:	2200      	movs	r2, #0
 80052f0:	2300      	movs	r3, #0
 80052f2:	4620      	mov	r0, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7fb fb61 	bl	80009bc <__aeabi_dcmpeq>
 80052fa:	b918      	cbnz	r0, 8005304 <__cvt+0xb8>
 80052fc:	f1c6 0601 	rsb	r6, r6, #1
 8005300:	f8ca 6000 	str.w	r6, [sl]
 8005304:	f8da 3000 	ldr.w	r3, [sl]
 8005308:	4499      	add	r9, r3
 800530a:	e7d3      	b.n	80052b4 <__cvt+0x68>
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	9107      	str	r1, [sp, #28]
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e7d9      	b.n	80052c8 <__cvt+0x7c>

08005314 <__exponent>:
 8005314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005316:	2900      	cmp	r1, #0
 8005318:	bfb6      	itet	lt
 800531a:	232d      	movlt	r3, #45	@ 0x2d
 800531c:	232b      	movge	r3, #43	@ 0x2b
 800531e:	4249      	neglt	r1, r1
 8005320:	2909      	cmp	r1, #9
 8005322:	7002      	strb	r2, [r0, #0]
 8005324:	7043      	strb	r3, [r0, #1]
 8005326:	dd29      	ble.n	800537c <__exponent+0x68>
 8005328:	f10d 0307 	add.w	r3, sp, #7
 800532c:	461d      	mov	r5, r3
 800532e:	270a      	movs	r7, #10
 8005330:	fbb1 f6f7 	udiv	r6, r1, r7
 8005334:	461a      	mov	r2, r3
 8005336:	fb07 1416 	mls	r4, r7, r6, r1
 800533a:	3430      	adds	r4, #48	@ 0x30
 800533c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005340:	460c      	mov	r4, r1
 8005342:	2c63      	cmp	r4, #99	@ 0x63
 8005344:	4631      	mov	r1, r6
 8005346:	f103 33ff 	add.w	r3, r3, #4294967295
 800534a:	dcf1      	bgt.n	8005330 <__exponent+0x1c>
 800534c:	3130      	adds	r1, #48	@ 0x30
 800534e:	1e94      	subs	r4, r2, #2
 8005350:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005354:	4623      	mov	r3, r4
 8005356:	1c41      	adds	r1, r0, #1
 8005358:	42ab      	cmp	r3, r5
 800535a:	d30a      	bcc.n	8005372 <__exponent+0x5e>
 800535c:	f10d 0309 	add.w	r3, sp, #9
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	42ac      	cmp	r4, r5
 8005364:	bf88      	it	hi
 8005366:	2300      	movhi	r3, #0
 8005368:	3302      	adds	r3, #2
 800536a:	4403      	add	r3, r0
 800536c:	1a18      	subs	r0, r3, r0
 800536e:	b003      	add	sp, #12
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005372:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005376:	f801 6f01 	strb.w	r6, [r1, #1]!
 800537a:	e7ed      	b.n	8005358 <__exponent+0x44>
 800537c:	2330      	movs	r3, #48	@ 0x30
 800537e:	3130      	adds	r1, #48	@ 0x30
 8005380:	7083      	strb	r3, [r0, #2]
 8005382:	70c1      	strb	r1, [r0, #3]
 8005384:	1d03      	adds	r3, r0, #4
 8005386:	e7f1      	b.n	800536c <__exponent+0x58>

08005388 <_printf_float>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	b091      	sub	sp, #68	@ 0x44
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005394:	4616      	mov	r6, r2
 8005396:	461f      	mov	r7, r3
 8005398:	4605      	mov	r5, r0
 800539a:	f000 ff7d 	bl	8006298 <_localeconv_r>
 800539e:	6803      	ldr	r3, [r0, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	9308      	str	r3, [sp, #32]
 80053a4:	f7fa fede 	bl	8000164 <strlen>
 80053a8:	2300      	movs	r3, #0
 80053aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80053ac:	f8d8 3000 	ldr.w	r3, [r8]
 80053b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80053b2:	3307      	adds	r3, #7
 80053b4:	f023 0307 	bic.w	r3, r3, #7
 80053b8:	f103 0208 	add.w	r2, r3, #8
 80053bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053c0:	f8d4 b000 	ldr.w	fp, [r4]
 80053c4:	f8c8 2000 	str.w	r2, [r8]
 80053c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80053d6:	f04f 32ff 	mov.w	r2, #4294967295
 80053da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80053e2:	4b9c      	ldr	r3, [pc, #624]	@ (8005654 <_printf_float+0x2cc>)
 80053e4:	f7fb fb1c 	bl	8000a20 <__aeabi_dcmpun>
 80053e8:	bb70      	cbnz	r0, 8005448 <_printf_float+0xc0>
 80053ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295
 80053f2:	4b98      	ldr	r3, [pc, #608]	@ (8005654 <_printf_float+0x2cc>)
 80053f4:	f7fb faf6 	bl	80009e4 <__aeabi_dcmple>
 80053f8:	bb30      	cbnz	r0, 8005448 <_printf_float+0xc0>
 80053fa:	2200      	movs	r2, #0
 80053fc:	2300      	movs	r3, #0
 80053fe:	4640      	mov	r0, r8
 8005400:	4649      	mov	r1, r9
 8005402:	f7fb fae5 	bl	80009d0 <__aeabi_dcmplt>
 8005406:	b110      	cbz	r0, 800540e <_printf_float+0x86>
 8005408:	232d      	movs	r3, #45	@ 0x2d
 800540a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800540e:	4a92      	ldr	r2, [pc, #584]	@ (8005658 <_printf_float+0x2d0>)
 8005410:	4b92      	ldr	r3, [pc, #584]	@ (800565c <_printf_float+0x2d4>)
 8005412:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005416:	bf94      	ite	ls
 8005418:	4690      	movls	r8, r2
 800541a:	4698      	movhi	r8, r3
 800541c:	2303      	movs	r3, #3
 800541e:	f04f 0900 	mov.w	r9, #0
 8005422:	6123      	str	r3, [r4, #16]
 8005424:	f02b 0304 	bic.w	r3, fp, #4
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	4633      	mov	r3, r6
 800542c:	4621      	mov	r1, r4
 800542e:	4628      	mov	r0, r5
 8005430:	9700      	str	r7, [sp, #0]
 8005432:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005434:	f000 f9d4 	bl	80057e0 <_printf_common>
 8005438:	3001      	adds	r0, #1
 800543a:	f040 8090 	bne.w	800555e <_printf_float+0x1d6>
 800543e:	f04f 30ff 	mov.w	r0, #4294967295
 8005442:	b011      	add	sp, #68	@ 0x44
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	4640      	mov	r0, r8
 800544e:	4649      	mov	r1, r9
 8005450:	f7fb fae6 	bl	8000a20 <__aeabi_dcmpun>
 8005454:	b148      	cbz	r0, 800546a <_printf_float+0xe2>
 8005456:	464b      	mov	r3, r9
 8005458:	2b00      	cmp	r3, #0
 800545a:	bfb8      	it	lt
 800545c:	232d      	movlt	r3, #45	@ 0x2d
 800545e:	4a80      	ldr	r2, [pc, #512]	@ (8005660 <_printf_float+0x2d8>)
 8005460:	bfb8      	it	lt
 8005462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005466:	4b7f      	ldr	r3, [pc, #508]	@ (8005664 <_printf_float+0x2dc>)
 8005468:	e7d3      	b.n	8005412 <_printf_float+0x8a>
 800546a:	6863      	ldr	r3, [r4, #4]
 800546c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	d13f      	bne.n	80054f4 <_printf_float+0x16c>
 8005474:	2306      	movs	r3, #6
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	9206      	str	r2, [sp, #24]
 8005482:	aa0e      	add	r2, sp, #56	@ 0x38
 8005484:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005488:	aa0d      	add	r2, sp, #52	@ 0x34
 800548a:	9203      	str	r2, [sp, #12]
 800548c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005490:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005494:	6863      	ldr	r3, [r4, #4]
 8005496:	4642      	mov	r2, r8
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	4628      	mov	r0, r5
 800549c:	464b      	mov	r3, r9
 800549e:	910a      	str	r1, [sp, #40]	@ 0x28
 80054a0:	f7ff fed4 	bl	800524c <__cvt>
 80054a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054a6:	4680      	mov	r8, r0
 80054a8:	2947      	cmp	r1, #71	@ 0x47
 80054aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80054ac:	d128      	bne.n	8005500 <_printf_float+0x178>
 80054ae:	1cc8      	adds	r0, r1, #3
 80054b0:	db02      	blt.n	80054b8 <_printf_float+0x130>
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	4299      	cmp	r1, r3
 80054b6:	dd40      	ble.n	800553a <_printf_float+0x1b2>
 80054b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80054bc:	fa5f fa8a 	uxtb.w	sl, sl
 80054c0:	4652      	mov	r2, sl
 80054c2:	3901      	subs	r1, #1
 80054c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054c8:	910d      	str	r1, [sp, #52]	@ 0x34
 80054ca:	f7ff ff23 	bl	8005314 <__exponent>
 80054ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054d0:	4681      	mov	r9, r0
 80054d2:	1813      	adds	r3, r2, r0
 80054d4:	2a01      	cmp	r2, #1
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	dc02      	bgt.n	80054e0 <_printf_float+0x158>
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	07d2      	lsls	r2, r2, #31
 80054de:	d501      	bpl.n	80054e4 <_printf_float+0x15c>
 80054e0:	3301      	adds	r3, #1
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d09e      	beq.n	800542a <_printf_float+0xa2>
 80054ec:	232d      	movs	r3, #45	@ 0x2d
 80054ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f2:	e79a      	b.n	800542a <_printf_float+0xa2>
 80054f4:	2947      	cmp	r1, #71	@ 0x47
 80054f6:	d1bf      	bne.n	8005478 <_printf_float+0xf0>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1bd      	bne.n	8005478 <_printf_float+0xf0>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e7ba      	b.n	8005476 <_printf_float+0xee>
 8005500:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005504:	d9dc      	bls.n	80054c0 <_printf_float+0x138>
 8005506:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800550a:	d118      	bne.n	800553e <_printf_float+0x1b6>
 800550c:	2900      	cmp	r1, #0
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	dd0b      	ble.n	800552a <_printf_float+0x1a2>
 8005512:	6121      	str	r1, [r4, #16]
 8005514:	b913      	cbnz	r3, 800551c <_printf_float+0x194>
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	07d0      	lsls	r0, r2, #31
 800551a:	d502      	bpl.n	8005522 <_printf_float+0x19a>
 800551c:	3301      	adds	r3, #1
 800551e:	440b      	add	r3, r1
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	f04f 0900 	mov.w	r9, #0
 8005526:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005528:	e7dc      	b.n	80054e4 <_printf_float+0x15c>
 800552a:	b913      	cbnz	r3, 8005532 <_printf_float+0x1aa>
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	07d2      	lsls	r2, r2, #31
 8005530:	d501      	bpl.n	8005536 <_printf_float+0x1ae>
 8005532:	3302      	adds	r3, #2
 8005534:	e7f4      	b.n	8005520 <_printf_float+0x198>
 8005536:	2301      	movs	r3, #1
 8005538:	e7f2      	b.n	8005520 <_printf_float+0x198>
 800553a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800553e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005540:	4299      	cmp	r1, r3
 8005542:	db05      	blt.n	8005550 <_printf_float+0x1c8>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	6121      	str	r1, [r4, #16]
 8005548:	07d8      	lsls	r0, r3, #31
 800554a:	d5ea      	bpl.n	8005522 <_printf_float+0x19a>
 800554c:	1c4b      	adds	r3, r1, #1
 800554e:	e7e7      	b.n	8005520 <_printf_float+0x198>
 8005550:	2900      	cmp	r1, #0
 8005552:	bfcc      	ite	gt
 8005554:	2201      	movgt	r2, #1
 8005556:	f1c1 0202 	rsble	r2, r1, #2
 800555a:	4413      	add	r3, r2
 800555c:	e7e0      	b.n	8005520 <_printf_float+0x198>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	055a      	lsls	r2, r3, #21
 8005562:	d407      	bmi.n	8005574 <_printf_float+0x1ec>
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	4642      	mov	r2, r8
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	d12b      	bne.n	80055ca <_printf_float+0x242>
 8005572:	e764      	b.n	800543e <_printf_float+0xb6>
 8005574:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005578:	f240 80dc 	bls.w	8005734 <_printf_float+0x3ac>
 800557c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005580:	2200      	movs	r2, #0
 8005582:	2300      	movs	r3, #0
 8005584:	f7fb fa1a 	bl	80009bc <__aeabi_dcmpeq>
 8005588:	2800      	cmp	r0, #0
 800558a:	d033      	beq.n	80055f4 <_printf_float+0x26c>
 800558c:	2301      	movs	r3, #1
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	4a35      	ldr	r2, [pc, #212]	@ (8005668 <_printf_float+0x2e0>)
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	f43f af51 	beq.w	800543e <_printf_float+0xb6>
 800559c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80055a0:	4543      	cmp	r3, r8
 80055a2:	db02      	blt.n	80055aa <_printf_float+0x222>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07d8      	lsls	r0, r3, #31
 80055a8:	d50f      	bpl.n	80055ca <_printf_float+0x242>
 80055aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	f43f af42 	beq.w	800543e <_printf_float+0xb6>
 80055ba:	f04f 0900 	mov.w	r9, #0
 80055be:	f108 38ff 	add.w	r8, r8, #4294967295
 80055c2:	f104 0a1a 	add.w	sl, r4, #26
 80055c6:	45c8      	cmp	r8, r9
 80055c8:	dc09      	bgt.n	80055de <_printf_float+0x256>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	079b      	lsls	r3, r3, #30
 80055ce:	f100 8102 	bmi.w	80057d6 <_printf_float+0x44e>
 80055d2:	68e0      	ldr	r0, [r4, #12]
 80055d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055d6:	4298      	cmp	r0, r3
 80055d8:	bfb8      	it	lt
 80055da:	4618      	movlt	r0, r3
 80055dc:	e731      	b.n	8005442 <_printf_float+0xba>
 80055de:	2301      	movs	r3, #1
 80055e0:	4652      	mov	r2, sl
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f af28 	beq.w	800543e <_printf_float+0xb6>
 80055ee:	f109 0901 	add.w	r9, r9, #1
 80055f2:	e7e8      	b.n	80055c6 <_printf_float+0x23e>
 80055f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dc38      	bgt.n	800566c <_printf_float+0x2e4>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <_printf_float+0x2e0>)
 8005602:	47b8      	blx	r7
 8005604:	3001      	adds	r0, #1
 8005606:	f43f af1a 	beq.w	800543e <_printf_float+0xb6>
 800560a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800560e:	ea59 0303 	orrs.w	r3, r9, r3
 8005612:	d102      	bne.n	800561a <_printf_float+0x292>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07d9      	lsls	r1, r3, #31
 8005618:	d5d7      	bpl.n	80055ca <_printf_float+0x242>
 800561a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f af0a 	beq.w	800543e <_printf_float+0xb6>
 800562a:	f04f 0a00 	mov.w	sl, #0
 800562e:	f104 0b1a 	add.w	fp, r4, #26
 8005632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005634:	425b      	negs	r3, r3
 8005636:	4553      	cmp	r3, sl
 8005638:	dc01      	bgt.n	800563e <_printf_float+0x2b6>
 800563a:	464b      	mov	r3, r9
 800563c:	e793      	b.n	8005566 <_printf_float+0x1de>
 800563e:	2301      	movs	r3, #1
 8005640:	465a      	mov	r2, fp
 8005642:	4631      	mov	r1, r6
 8005644:	4628      	mov	r0, r5
 8005646:	47b8      	blx	r7
 8005648:	3001      	adds	r0, #1
 800564a:	f43f aef8 	beq.w	800543e <_printf_float+0xb6>
 800564e:	f10a 0a01 	add.w	sl, sl, #1
 8005652:	e7ee      	b.n	8005632 <_printf_float+0x2aa>
 8005654:	7fefffff 	.word	0x7fefffff
 8005658:	0800a31a 	.word	0x0800a31a
 800565c:	0800a31e 	.word	0x0800a31e
 8005660:	0800a322 	.word	0x0800a322
 8005664:	0800a326 	.word	0x0800a326
 8005668:	0800a6b8 	.word	0x0800a6b8
 800566c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800566e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005672:	4553      	cmp	r3, sl
 8005674:	bfa8      	it	ge
 8005676:	4653      	movge	r3, sl
 8005678:	2b00      	cmp	r3, #0
 800567a:	4699      	mov	r9, r3
 800567c:	dc36      	bgt.n	80056ec <_printf_float+0x364>
 800567e:	f04f 0b00 	mov.w	fp, #0
 8005682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005686:	f104 021a 	add.w	r2, r4, #26
 800568a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800568c:	930a      	str	r3, [sp, #40]	@ 0x28
 800568e:	eba3 0309 	sub.w	r3, r3, r9
 8005692:	455b      	cmp	r3, fp
 8005694:	dc31      	bgt.n	80056fa <_printf_float+0x372>
 8005696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005698:	459a      	cmp	sl, r3
 800569a:	dc3a      	bgt.n	8005712 <_printf_float+0x38a>
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	07da      	lsls	r2, r3, #31
 80056a0:	d437      	bmi.n	8005712 <_printf_float+0x38a>
 80056a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056a4:	ebaa 0903 	sub.w	r9, sl, r3
 80056a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056aa:	ebaa 0303 	sub.w	r3, sl, r3
 80056ae:	4599      	cmp	r9, r3
 80056b0:	bfa8      	it	ge
 80056b2:	4699      	movge	r9, r3
 80056b4:	f1b9 0f00 	cmp.w	r9, #0
 80056b8:	dc33      	bgt.n	8005722 <_printf_float+0x39a>
 80056ba:	f04f 0800 	mov.w	r8, #0
 80056be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c2:	f104 0b1a 	add.w	fp, r4, #26
 80056c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056c8:	ebaa 0303 	sub.w	r3, sl, r3
 80056cc:	eba3 0309 	sub.w	r3, r3, r9
 80056d0:	4543      	cmp	r3, r8
 80056d2:	f77f af7a 	ble.w	80055ca <_printf_float+0x242>
 80056d6:	2301      	movs	r3, #1
 80056d8:	465a      	mov	r2, fp
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	f43f aeac 	beq.w	800543e <_printf_float+0xb6>
 80056e6:	f108 0801 	add.w	r8, r8, #1
 80056ea:	e7ec      	b.n	80056c6 <_printf_float+0x33e>
 80056ec:	4642      	mov	r2, r8
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	d1c2      	bne.n	800567e <_printf_float+0x2f6>
 80056f8:	e6a1      	b.n	800543e <_printf_float+0xb6>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	920a      	str	r2, [sp, #40]	@ 0x28
 8005702:	47b8      	blx	r7
 8005704:	3001      	adds	r0, #1
 8005706:	f43f ae9a 	beq.w	800543e <_printf_float+0xb6>
 800570a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800570c:	f10b 0b01 	add.w	fp, fp, #1
 8005710:	e7bb      	b.n	800568a <_printf_float+0x302>
 8005712:	4631      	mov	r1, r6
 8005714:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	d1c0      	bne.n	80056a2 <_printf_float+0x31a>
 8005720:	e68d      	b.n	800543e <_printf_float+0xb6>
 8005722:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005724:	464b      	mov	r3, r9
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	4442      	add	r2, r8
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	d1c3      	bne.n	80056ba <_printf_float+0x332>
 8005732:	e684      	b.n	800543e <_printf_float+0xb6>
 8005734:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005738:	f1ba 0f01 	cmp.w	sl, #1
 800573c:	dc01      	bgt.n	8005742 <_printf_float+0x3ba>
 800573e:	07db      	lsls	r3, r3, #31
 8005740:	d536      	bpl.n	80057b0 <_printf_float+0x428>
 8005742:	2301      	movs	r3, #1
 8005744:	4642      	mov	r2, r8
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	47b8      	blx	r7
 800574c:	3001      	adds	r0, #1
 800574e:	f43f ae76 	beq.w	800543e <_printf_float+0xb6>
 8005752:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f ae6e 	beq.w	800543e <_printf_float+0xb6>
 8005762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005766:	2200      	movs	r2, #0
 8005768:	2300      	movs	r3, #0
 800576a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800576e:	f7fb f925 	bl	80009bc <__aeabi_dcmpeq>
 8005772:	b9c0      	cbnz	r0, 80057a6 <_printf_float+0x41e>
 8005774:	4653      	mov	r3, sl
 8005776:	f108 0201 	add.w	r2, r8, #1
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	d10c      	bne.n	800579e <_printf_float+0x416>
 8005784:	e65b      	b.n	800543e <_printf_float+0xb6>
 8005786:	2301      	movs	r3, #1
 8005788:	465a      	mov	r2, fp
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	47b8      	blx	r7
 8005790:	3001      	adds	r0, #1
 8005792:	f43f ae54 	beq.w	800543e <_printf_float+0xb6>
 8005796:	f108 0801 	add.w	r8, r8, #1
 800579a:	45d0      	cmp	r8, sl
 800579c:	dbf3      	blt.n	8005786 <_printf_float+0x3fe>
 800579e:	464b      	mov	r3, r9
 80057a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057a4:	e6e0      	b.n	8005568 <_printf_float+0x1e0>
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	f104 0b1a 	add.w	fp, r4, #26
 80057ae:	e7f4      	b.n	800579a <_printf_float+0x412>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4642      	mov	r2, r8
 80057b4:	e7e1      	b.n	800577a <_printf_float+0x3f2>
 80057b6:	2301      	movs	r3, #1
 80057b8:	464a      	mov	r2, r9
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f ae3c 	beq.w	800543e <_printf_float+0xb6>
 80057c6:	f108 0801 	add.w	r8, r8, #1
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80057ce:	1a5b      	subs	r3, r3, r1
 80057d0:	4543      	cmp	r3, r8
 80057d2:	dcf0      	bgt.n	80057b6 <_printf_float+0x42e>
 80057d4:	e6fd      	b.n	80055d2 <_printf_float+0x24a>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	f104 0919 	add.w	r9, r4, #25
 80057de:	e7f4      	b.n	80057ca <_printf_float+0x442>

080057e0 <_printf_common>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	4616      	mov	r6, r2
 80057e6:	4698      	mov	r8, r3
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	4607      	mov	r7, r0
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bfb8      	it	lt
 80057f2:	4613      	movlt	r3, r2
 80057f4:	6033      	str	r3, [r6, #0]
 80057f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057fa:	460c      	mov	r4, r1
 80057fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005800:	b10a      	cbz	r2, 8005806 <_printf_common+0x26>
 8005802:	3301      	adds	r3, #1
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0699      	lsls	r1, r3, #26
 800580a:	bf42      	ittt	mi
 800580c:	6833      	ldrmi	r3, [r6, #0]
 800580e:	3302      	addmi	r3, #2
 8005810:	6033      	strmi	r3, [r6, #0]
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	f015 0506 	ands.w	r5, r5, #6
 8005818:	d106      	bne.n	8005828 <_printf_common+0x48>
 800581a:	f104 0a19 	add.w	sl, r4, #25
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	6832      	ldr	r2, [r6, #0]
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	42ab      	cmp	r3, r5
 8005826:	dc2b      	bgt.n	8005880 <_printf_common+0xa0>
 8005828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800582c:	6822      	ldr	r2, [r4, #0]
 800582e:	3b00      	subs	r3, #0
 8005830:	bf18      	it	ne
 8005832:	2301      	movne	r3, #1
 8005834:	0692      	lsls	r2, r2, #26
 8005836:	d430      	bmi.n	800589a <_printf_common+0xba>
 8005838:	4641      	mov	r1, r8
 800583a:	4638      	mov	r0, r7
 800583c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005840:	47c8      	blx	r9
 8005842:	3001      	adds	r0, #1
 8005844:	d023      	beq.n	800588e <_printf_common+0xae>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	6922      	ldr	r2, [r4, #16]
 800584a:	f003 0306 	and.w	r3, r3, #6
 800584e:	2b04      	cmp	r3, #4
 8005850:	bf14      	ite	ne
 8005852:	2500      	movne	r5, #0
 8005854:	6833      	ldreq	r3, [r6, #0]
 8005856:	f04f 0600 	mov.w	r6, #0
 800585a:	bf08      	it	eq
 800585c:	68e5      	ldreq	r5, [r4, #12]
 800585e:	f104 041a 	add.w	r4, r4, #26
 8005862:	bf08      	it	eq
 8005864:	1aed      	subeq	r5, r5, r3
 8005866:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800586a:	bf08      	it	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	4293      	cmp	r3, r2
 8005872:	bfc4      	itt	gt
 8005874:	1a9b      	subgt	r3, r3, r2
 8005876:	18ed      	addgt	r5, r5, r3
 8005878:	42b5      	cmp	r5, r6
 800587a:	d11a      	bne.n	80058b2 <_printf_common+0xd2>
 800587c:	2000      	movs	r0, #0
 800587e:	e008      	b.n	8005892 <_printf_common+0xb2>
 8005880:	2301      	movs	r3, #1
 8005882:	4652      	mov	r2, sl
 8005884:	4641      	mov	r1, r8
 8005886:	4638      	mov	r0, r7
 8005888:	47c8      	blx	r9
 800588a:	3001      	adds	r0, #1
 800588c:	d103      	bne.n	8005896 <_printf_common+0xb6>
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005896:	3501      	adds	r5, #1
 8005898:	e7c1      	b.n	800581e <_printf_common+0x3e>
 800589a:	2030      	movs	r0, #48	@ 0x30
 800589c:	18e1      	adds	r1, r4, r3
 800589e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058a8:	4422      	add	r2, r4
 80058aa:	3302      	adds	r3, #2
 80058ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058b0:	e7c2      	b.n	8005838 <_printf_common+0x58>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4622      	mov	r2, r4
 80058b6:	4641      	mov	r1, r8
 80058b8:	4638      	mov	r0, r7
 80058ba:	47c8      	blx	r9
 80058bc:	3001      	adds	r0, #1
 80058be:	d0e6      	beq.n	800588e <_printf_common+0xae>
 80058c0:	3601      	adds	r6, #1
 80058c2:	e7d9      	b.n	8005878 <_printf_common+0x98>

080058c4 <_printf_i>:
 80058c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	7e0f      	ldrb	r7, [r1, #24]
 80058ca:	4691      	mov	r9, r2
 80058cc:	2f78      	cmp	r7, #120	@ 0x78
 80058ce:	4680      	mov	r8, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	469a      	mov	sl, r3
 80058d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058da:	d807      	bhi.n	80058ec <_printf_i+0x28>
 80058dc:	2f62      	cmp	r7, #98	@ 0x62
 80058de:	d80a      	bhi.n	80058f6 <_printf_i+0x32>
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	f000 80d3 	beq.w	8005a8c <_printf_i+0x1c8>
 80058e6:	2f58      	cmp	r7, #88	@ 0x58
 80058e8:	f000 80ba 	beq.w	8005a60 <_printf_i+0x19c>
 80058ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058f4:	e03a      	b.n	800596c <_printf_i+0xa8>
 80058f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058fa:	2b15      	cmp	r3, #21
 80058fc:	d8f6      	bhi.n	80058ec <_printf_i+0x28>
 80058fe:	a101      	add	r1, pc, #4	@ (adr r1, 8005904 <_printf_i+0x40>)
 8005900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005904:	0800595d 	.word	0x0800595d
 8005908:	08005971 	.word	0x08005971
 800590c:	080058ed 	.word	0x080058ed
 8005910:	080058ed 	.word	0x080058ed
 8005914:	080058ed 	.word	0x080058ed
 8005918:	080058ed 	.word	0x080058ed
 800591c:	08005971 	.word	0x08005971
 8005920:	080058ed 	.word	0x080058ed
 8005924:	080058ed 	.word	0x080058ed
 8005928:	080058ed 	.word	0x080058ed
 800592c:	080058ed 	.word	0x080058ed
 8005930:	08005a73 	.word	0x08005a73
 8005934:	0800599b 	.word	0x0800599b
 8005938:	08005a2d 	.word	0x08005a2d
 800593c:	080058ed 	.word	0x080058ed
 8005940:	080058ed 	.word	0x080058ed
 8005944:	08005a95 	.word	0x08005a95
 8005948:	080058ed 	.word	0x080058ed
 800594c:	0800599b 	.word	0x0800599b
 8005950:	080058ed 	.word	0x080058ed
 8005954:	080058ed 	.word	0x080058ed
 8005958:	08005a35 	.word	0x08005a35
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6032      	str	r2, [r6, #0]
 8005964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005968:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800596c:	2301      	movs	r3, #1
 800596e:	e09e      	b.n	8005aae <_printf_i+0x1ea>
 8005970:	6833      	ldr	r3, [r6, #0]
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	1d19      	adds	r1, r3, #4
 8005976:	6031      	str	r1, [r6, #0]
 8005978:	0606      	lsls	r6, r0, #24
 800597a:	d501      	bpl.n	8005980 <_printf_i+0xbc>
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	e003      	b.n	8005988 <_printf_i+0xc4>
 8005980:	0645      	lsls	r5, r0, #25
 8005982:	d5fb      	bpl.n	800597c <_printf_i+0xb8>
 8005984:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005988:	2d00      	cmp	r5, #0
 800598a:	da03      	bge.n	8005994 <_printf_i+0xd0>
 800598c:	232d      	movs	r3, #45	@ 0x2d
 800598e:	426d      	negs	r5, r5
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005994:	230a      	movs	r3, #10
 8005996:	4859      	ldr	r0, [pc, #356]	@ (8005afc <_printf_i+0x238>)
 8005998:	e011      	b.n	80059be <_printf_i+0xfa>
 800599a:	6821      	ldr	r1, [r4, #0]
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	0608      	lsls	r0, r1, #24
 80059a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80059a4:	d402      	bmi.n	80059ac <_printf_i+0xe8>
 80059a6:	0649      	lsls	r1, r1, #25
 80059a8:	bf48      	it	mi
 80059aa:	b2ad      	uxthmi	r5, r5
 80059ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	bf14      	ite	ne
 80059b2:	230a      	movne	r3, #10
 80059b4:	2308      	moveq	r3, #8
 80059b6:	4851      	ldr	r0, [pc, #324]	@ (8005afc <_printf_i+0x238>)
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059be:	6866      	ldr	r6, [r4, #4]
 80059c0:	2e00      	cmp	r6, #0
 80059c2:	bfa8      	it	ge
 80059c4:	6821      	ldrge	r1, [r4, #0]
 80059c6:	60a6      	str	r6, [r4, #8]
 80059c8:	bfa4      	itt	ge
 80059ca:	f021 0104 	bicge.w	r1, r1, #4
 80059ce:	6021      	strge	r1, [r4, #0]
 80059d0:	b90d      	cbnz	r5, 80059d6 <_printf_i+0x112>
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	d04b      	beq.n	8005a6e <_printf_i+0x1aa>
 80059d6:	4616      	mov	r6, r2
 80059d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80059dc:	fb03 5711 	mls	r7, r3, r1, r5
 80059e0:	5dc7      	ldrb	r7, [r0, r7]
 80059e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e6:	462f      	mov	r7, r5
 80059e8:	42bb      	cmp	r3, r7
 80059ea:	460d      	mov	r5, r1
 80059ec:	d9f4      	bls.n	80059d8 <_printf_i+0x114>
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d10b      	bne.n	8005a0a <_printf_i+0x146>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	07df      	lsls	r7, r3, #31
 80059f6:	d508      	bpl.n	8005a0a <_printf_i+0x146>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	6861      	ldr	r1, [r4, #4]
 80059fc:	4299      	cmp	r1, r3
 80059fe:	bfde      	ittt	le
 8005a00:	2330      	movle	r3, #48	@ 0x30
 8005a02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a0a:	1b92      	subs	r2, r2, r6
 8005a0c:	6122      	str	r2, [r4, #16]
 8005a0e:	464b      	mov	r3, r9
 8005a10:	4621      	mov	r1, r4
 8005a12:	4640      	mov	r0, r8
 8005a14:	f8cd a000 	str.w	sl, [sp]
 8005a18:	aa03      	add	r2, sp, #12
 8005a1a:	f7ff fee1 	bl	80057e0 <_printf_common>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d14a      	bne.n	8005ab8 <_printf_i+0x1f4>
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	b004      	add	sp, #16
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	f043 0320 	orr.w	r3, r3, #32
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	2778      	movs	r7, #120	@ 0x78
 8005a36:	4832      	ldr	r0, [pc, #200]	@ (8005b00 <_printf_i+0x23c>)
 8005a38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	6831      	ldr	r1, [r6, #0]
 8005a40:	061f      	lsls	r7, r3, #24
 8005a42:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a46:	d402      	bmi.n	8005a4e <_printf_i+0x18a>
 8005a48:	065f      	lsls	r7, r3, #25
 8005a4a:	bf48      	it	mi
 8005a4c:	b2ad      	uxthmi	r5, r5
 8005a4e:	6031      	str	r1, [r6, #0]
 8005a50:	07d9      	lsls	r1, r3, #31
 8005a52:	bf44      	itt	mi
 8005a54:	f043 0320 	orrmi.w	r3, r3, #32
 8005a58:	6023      	strmi	r3, [r4, #0]
 8005a5a:	b11d      	cbz	r5, 8005a64 <_printf_i+0x1a0>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	e7ab      	b.n	80059b8 <_printf_i+0xf4>
 8005a60:	4826      	ldr	r0, [pc, #152]	@ (8005afc <_printf_i+0x238>)
 8005a62:	e7e9      	b.n	8005a38 <_printf_i+0x174>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	f023 0320 	bic.w	r3, r3, #32
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	e7f6      	b.n	8005a5c <_printf_i+0x198>
 8005a6e:	4616      	mov	r6, r2
 8005a70:	e7bd      	b.n	80059ee <_printf_i+0x12a>
 8005a72:	6833      	ldr	r3, [r6, #0]
 8005a74:	6825      	ldr	r5, [r4, #0]
 8005a76:	1d18      	adds	r0, r3, #4
 8005a78:	6961      	ldr	r1, [r4, #20]
 8005a7a:	6030      	str	r0, [r6, #0]
 8005a7c:	062e      	lsls	r6, r5, #24
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	d501      	bpl.n	8005a86 <_printf_i+0x1c2>
 8005a82:	6019      	str	r1, [r3, #0]
 8005a84:	e002      	b.n	8005a8c <_printf_i+0x1c8>
 8005a86:	0668      	lsls	r0, r5, #25
 8005a88:	d5fb      	bpl.n	8005a82 <_printf_i+0x1be>
 8005a8a:	8019      	strh	r1, [r3, #0]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4616      	mov	r6, r2
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	e7bc      	b.n	8005a0e <_printf_i+0x14a>
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	2100      	movs	r1, #0
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	6032      	str	r2, [r6, #0]
 8005a9c:	681e      	ldr	r6, [r3, #0]
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f000 fc70 	bl	8006386 <memchr>
 8005aa6:	b108      	cbz	r0, 8005aac <_printf_i+0x1e8>
 8005aa8:	1b80      	subs	r0, r0, r6
 8005aaa:	6060      	str	r0, [r4, #4]
 8005aac:	6863      	ldr	r3, [r4, #4]
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab6:	e7aa      	b.n	8005a0e <_printf_i+0x14a>
 8005ab8:	4632      	mov	r2, r6
 8005aba:	4649      	mov	r1, r9
 8005abc:	4640      	mov	r0, r8
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	47d0      	blx	sl
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d0ad      	beq.n	8005a22 <_printf_i+0x15e>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	079b      	lsls	r3, r3, #30
 8005aca:	d413      	bmi.n	8005af4 <_printf_i+0x230>
 8005acc:	68e0      	ldr	r0, [r4, #12]
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	4298      	cmp	r0, r3
 8005ad2:	bfb8      	it	lt
 8005ad4:	4618      	movlt	r0, r3
 8005ad6:	e7a6      	b.n	8005a26 <_printf_i+0x162>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4632      	mov	r2, r6
 8005adc:	4649      	mov	r1, r9
 8005ade:	4640      	mov	r0, r8
 8005ae0:	47d0      	blx	sl
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d09d      	beq.n	8005a22 <_printf_i+0x15e>
 8005ae6:	3501      	adds	r5, #1
 8005ae8:	68e3      	ldr	r3, [r4, #12]
 8005aea:	9903      	ldr	r1, [sp, #12]
 8005aec:	1a5b      	subs	r3, r3, r1
 8005aee:	42ab      	cmp	r3, r5
 8005af0:	dcf2      	bgt.n	8005ad8 <_printf_i+0x214>
 8005af2:	e7eb      	b.n	8005acc <_printf_i+0x208>
 8005af4:	2500      	movs	r5, #0
 8005af6:	f104 0619 	add.w	r6, r4, #25
 8005afa:	e7f5      	b.n	8005ae8 <_printf_i+0x224>
 8005afc:	0800a32a 	.word	0x0800a32a
 8005b00:	0800a33b 	.word	0x0800a33b

08005b04 <_scanf_float>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	9303      	str	r3, [sp, #12]
 8005b0c:	688b      	ldr	r3, [r1, #8]
 8005b0e:	4617      	mov	r7, r2
 8005b10:	1e5a      	subs	r2, r3, #1
 8005b12:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005b16:	bf82      	ittt	hi
 8005b18:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b1c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005b20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b24:	460a      	mov	r2, r1
 8005b26:	f04f 0500 	mov.w	r5, #0
 8005b2a:	bf88      	it	hi
 8005b2c:	608b      	strhi	r3, [r1, #8]
 8005b2e:	680b      	ldr	r3, [r1, #0]
 8005b30:	4680      	mov	r8, r0
 8005b32:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005b36:	f842 3b1c 	str.w	r3, [r2], #28
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	bf98      	it	ls
 8005b3e:	f04f 0b00 	movls.w	fp, #0
 8005b42:	4616      	mov	r6, r2
 8005b44:	46aa      	mov	sl, r5
 8005b46:	46a9      	mov	r9, r5
 8005b48:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b4c:	9201      	str	r2, [sp, #4]
 8005b4e:	9502      	str	r5, [sp, #8]
 8005b50:	68a2      	ldr	r2, [r4, #8]
 8005b52:	b152      	cbz	r2, 8005b6a <_scanf_float+0x66>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b4e      	cmp	r3, #78	@ 0x4e
 8005b5a:	d865      	bhi.n	8005c28 <_scanf_float+0x124>
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d83d      	bhi.n	8005bdc <_scanf_float+0xd8>
 8005b60:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005b64:	b2c8      	uxtb	r0, r1
 8005b66:	280e      	cmp	r0, #14
 8005b68:	d93b      	bls.n	8005be2 <_scanf_float+0xde>
 8005b6a:	f1b9 0f00 	cmp.w	r9, #0
 8005b6e:	d003      	beq.n	8005b78 <_scanf_float+0x74>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b7c:	f1ba 0f01 	cmp.w	sl, #1
 8005b80:	f200 8118 	bhi.w	8005db4 <_scanf_float+0x2b0>
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	429e      	cmp	r6, r3
 8005b88:	f200 8109 	bhi.w	8005d9e <_scanf_float+0x29a>
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	b007      	add	sp, #28
 8005b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b94:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005b98:	2a0d      	cmp	r2, #13
 8005b9a:	d8e6      	bhi.n	8005b6a <_scanf_float+0x66>
 8005b9c:	a101      	add	r1, pc, #4	@ (adr r1, 8005ba4 <_scanf_float+0xa0>)
 8005b9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005ceb 	.word	0x08005ceb
 8005ba8:	08005b6b 	.word	0x08005b6b
 8005bac:	08005b6b 	.word	0x08005b6b
 8005bb0:	08005b6b 	.word	0x08005b6b
 8005bb4:	08005d4b 	.word	0x08005d4b
 8005bb8:	08005d23 	.word	0x08005d23
 8005bbc:	08005b6b 	.word	0x08005b6b
 8005bc0:	08005b6b 	.word	0x08005b6b
 8005bc4:	08005cf9 	.word	0x08005cf9
 8005bc8:	08005b6b 	.word	0x08005b6b
 8005bcc:	08005b6b 	.word	0x08005b6b
 8005bd0:	08005b6b 	.word	0x08005b6b
 8005bd4:	08005b6b 	.word	0x08005b6b
 8005bd8:	08005cb1 	.word	0x08005cb1
 8005bdc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005be0:	e7da      	b.n	8005b98 <_scanf_float+0x94>
 8005be2:	290e      	cmp	r1, #14
 8005be4:	d8c1      	bhi.n	8005b6a <_scanf_float+0x66>
 8005be6:	a001      	add	r0, pc, #4	@ (adr r0, 8005bec <_scanf_float+0xe8>)
 8005be8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005bec:	08005ca1 	.word	0x08005ca1
 8005bf0:	08005b6b 	.word	0x08005b6b
 8005bf4:	08005ca1 	.word	0x08005ca1
 8005bf8:	08005d37 	.word	0x08005d37
 8005bfc:	08005b6b 	.word	0x08005b6b
 8005c00:	08005c49 	.word	0x08005c49
 8005c04:	08005c87 	.word	0x08005c87
 8005c08:	08005c87 	.word	0x08005c87
 8005c0c:	08005c87 	.word	0x08005c87
 8005c10:	08005c87 	.word	0x08005c87
 8005c14:	08005c87 	.word	0x08005c87
 8005c18:	08005c87 	.word	0x08005c87
 8005c1c:	08005c87 	.word	0x08005c87
 8005c20:	08005c87 	.word	0x08005c87
 8005c24:	08005c87 	.word	0x08005c87
 8005c28:	2b6e      	cmp	r3, #110	@ 0x6e
 8005c2a:	d809      	bhi.n	8005c40 <_scanf_float+0x13c>
 8005c2c:	2b60      	cmp	r3, #96	@ 0x60
 8005c2e:	d8b1      	bhi.n	8005b94 <_scanf_float+0x90>
 8005c30:	2b54      	cmp	r3, #84	@ 0x54
 8005c32:	d07b      	beq.n	8005d2c <_scanf_float+0x228>
 8005c34:	2b59      	cmp	r3, #89	@ 0x59
 8005c36:	d198      	bne.n	8005b6a <_scanf_float+0x66>
 8005c38:	2d07      	cmp	r5, #7
 8005c3a:	d196      	bne.n	8005b6a <_scanf_float+0x66>
 8005c3c:	2508      	movs	r5, #8
 8005c3e:	e02c      	b.n	8005c9a <_scanf_float+0x196>
 8005c40:	2b74      	cmp	r3, #116	@ 0x74
 8005c42:	d073      	beq.n	8005d2c <_scanf_float+0x228>
 8005c44:	2b79      	cmp	r3, #121	@ 0x79
 8005c46:	e7f6      	b.n	8005c36 <_scanf_float+0x132>
 8005c48:	6821      	ldr	r1, [r4, #0]
 8005c4a:	05c8      	lsls	r0, r1, #23
 8005c4c:	d51b      	bpl.n	8005c86 <_scanf_float+0x182>
 8005c4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005c52:	6021      	str	r1, [r4, #0]
 8005c54:	f109 0901 	add.w	r9, r9, #1
 8005c58:	f1bb 0f00 	cmp.w	fp, #0
 8005c5c:	d003      	beq.n	8005c66 <_scanf_float+0x162>
 8005c5e:	3201      	adds	r2, #1
 8005c60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c64:	60a2      	str	r2, [r4, #8]
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	60a3      	str	r3, [r4, #8]
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	f340 8087 	ble.w	8005d8c <_scanf_float+0x288>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	e764      	b.n	8005b50 <_scanf_float+0x4c>
 8005c86:	eb1a 0105 	adds.w	r1, sl, r5
 8005c8a:	f47f af6e 	bne.w	8005b6a <_scanf_float+0x66>
 8005c8e:	460d      	mov	r5, r1
 8005c90:	468a      	mov	sl, r1
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005c98:	6022      	str	r2, [r4, #0]
 8005c9a:	f806 3b01 	strb.w	r3, [r6], #1
 8005c9e:	e7e2      	b.n	8005c66 <_scanf_float+0x162>
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	0610      	lsls	r0, r2, #24
 8005ca4:	f57f af61 	bpl.w	8005b6a <_scanf_float+0x66>
 8005ca8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	e7f4      	b.n	8005c9a <_scanf_float+0x196>
 8005cb0:	f1ba 0f00 	cmp.w	sl, #0
 8005cb4:	d10e      	bne.n	8005cd4 <_scanf_float+0x1d0>
 8005cb6:	f1b9 0f00 	cmp.w	r9, #0
 8005cba:	d10e      	bne.n	8005cda <_scanf_float+0x1d6>
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005cc2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005cc6:	d108      	bne.n	8005cda <_scanf_float+0x1d6>
 8005cc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ccc:	f04f 0a01 	mov.w	sl, #1
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	e7e2      	b.n	8005c9a <_scanf_float+0x196>
 8005cd4:	f1ba 0f02 	cmp.w	sl, #2
 8005cd8:	d055      	beq.n	8005d86 <_scanf_float+0x282>
 8005cda:	2d01      	cmp	r5, #1
 8005cdc:	d002      	beq.n	8005ce4 <_scanf_float+0x1e0>
 8005cde:	2d04      	cmp	r5, #4
 8005ce0:	f47f af43 	bne.w	8005b6a <_scanf_float+0x66>
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	b2ed      	uxtb	r5, r5
 8005ce8:	e7d7      	b.n	8005c9a <_scanf_float+0x196>
 8005cea:	f1ba 0f01 	cmp.w	sl, #1
 8005cee:	f47f af3c 	bne.w	8005b6a <_scanf_float+0x66>
 8005cf2:	f04f 0a02 	mov.w	sl, #2
 8005cf6:	e7d0      	b.n	8005c9a <_scanf_float+0x196>
 8005cf8:	b97d      	cbnz	r5, 8005d1a <_scanf_float+0x216>
 8005cfa:	f1b9 0f00 	cmp.w	r9, #0
 8005cfe:	f47f af37 	bne.w	8005b70 <_scanf_float+0x6c>
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d0c:	f040 8103 	bne.w	8005f16 <_scanf_float+0x412>
 8005d10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d14:	2501      	movs	r5, #1
 8005d16:	6022      	str	r2, [r4, #0]
 8005d18:	e7bf      	b.n	8005c9a <_scanf_float+0x196>
 8005d1a:	2d03      	cmp	r5, #3
 8005d1c:	d0e2      	beq.n	8005ce4 <_scanf_float+0x1e0>
 8005d1e:	2d05      	cmp	r5, #5
 8005d20:	e7de      	b.n	8005ce0 <_scanf_float+0x1dc>
 8005d22:	2d02      	cmp	r5, #2
 8005d24:	f47f af21 	bne.w	8005b6a <_scanf_float+0x66>
 8005d28:	2503      	movs	r5, #3
 8005d2a:	e7b6      	b.n	8005c9a <_scanf_float+0x196>
 8005d2c:	2d06      	cmp	r5, #6
 8005d2e:	f47f af1c 	bne.w	8005b6a <_scanf_float+0x66>
 8005d32:	2507      	movs	r5, #7
 8005d34:	e7b1      	b.n	8005c9a <_scanf_float+0x196>
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	0591      	lsls	r1, r2, #22
 8005d3a:	f57f af16 	bpl.w	8005b6a <_scanf_float+0x66>
 8005d3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005d42:	6022      	str	r2, [r4, #0]
 8005d44:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d48:	e7a7      	b.n	8005c9a <_scanf_float+0x196>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005d50:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005d54:	d006      	beq.n	8005d64 <_scanf_float+0x260>
 8005d56:	0550      	lsls	r0, r2, #21
 8005d58:	f57f af07 	bpl.w	8005b6a <_scanf_float+0x66>
 8005d5c:	f1b9 0f00 	cmp.w	r9, #0
 8005d60:	f000 80d9 	beq.w	8005f16 <_scanf_float+0x412>
 8005d64:	0591      	lsls	r1, r2, #22
 8005d66:	bf58      	it	pl
 8005d68:	9902      	ldrpl	r1, [sp, #8]
 8005d6a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d6e:	bf58      	it	pl
 8005d70:	eba9 0101 	subpl.w	r1, r9, r1
 8005d74:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005d78:	f04f 0900 	mov.w	r9, #0
 8005d7c:	bf58      	it	pl
 8005d7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d82:	6022      	str	r2, [r4, #0]
 8005d84:	e789      	b.n	8005c9a <_scanf_float+0x196>
 8005d86:	f04f 0a03 	mov.w	sl, #3
 8005d8a:	e786      	b.n	8005c9a <_scanf_float+0x196>
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	4640      	mov	r0, r8
 8005d90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005d94:	4798      	blx	r3
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f aeda 	beq.w	8005b50 <_scanf_float+0x4c>
 8005d9c:	e6e5      	b.n	8005b6a <_scanf_float+0x66>
 8005d9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005da2:	463a      	mov	r2, r7
 8005da4:	4640      	mov	r0, r8
 8005da6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005daa:	4798      	blx	r3
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	6123      	str	r3, [r4, #16]
 8005db2:	e6e7      	b.n	8005b84 <_scanf_float+0x80>
 8005db4:	1e6b      	subs	r3, r5, #1
 8005db6:	2b06      	cmp	r3, #6
 8005db8:	d824      	bhi.n	8005e04 <_scanf_float+0x300>
 8005dba:	2d02      	cmp	r5, #2
 8005dbc:	d836      	bhi.n	8005e2c <_scanf_float+0x328>
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	429e      	cmp	r6, r3
 8005dc2:	f67f aee3 	bls.w	8005b8c <_scanf_float+0x88>
 8005dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dca:	463a      	mov	r2, r7
 8005dcc:	4640      	mov	r0, r8
 8005dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dd2:	4798      	blx	r3
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	e7f0      	b.n	8005dbe <_scanf_float+0x2ba>
 8005ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005de0:	463a      	mov	r2, r7
 8005de2:	4640      	mov	r0, r8
 8005de4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005de8:	4798      	blx	r3
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005df4:	fa5f fa8a 	uxtb.w	sl, sl
 8005df8:	f1ba 0f02 	cmp.w	sl, #2
 8005dfc:	d1ee      	bne.n	8005ddc <_scanf_float+0x2d8>
 8005dfe:	3d03      	subs	r5, #3
 8005e00:	b2ed      	uxtb	r5, r5
 8005e02:	1b76      	subs	r6, r6, r5
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	05da      	lsls	r2, r3, #23
 8005e08:	d530      	bpl.n	8005e6c <_scanf_float+0x368>
 8005e0a:	055b      	lsls	r3, r3, #21
 8005e0c:	d511      	bpl.n	8005e32 <_scanf_float+0x32e>
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	429e      	cmp	r6, r3
 8005e12:	f67f aebb 	bls.w	8005b8c <_scanf_float+0x88>
 8005e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e22:	4798      	blx	r3
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	6123      	str	r3, [r4, #16]
 8005e2a:	e7f0      	b.n	8005e0e <_scanf_float+0x30a>
 8005e2c:	46aa      	mov	sl, r5
 8005e2e:	46b3      	mov	fp, r6
 8005e30:	e7de      	b.n	8005df0 <_scanf_float+0x2ec>
 8005e32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	2965      	cmp	r1, #101	@ 0x65
 8005e3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e42:	6123      	str	r3, [r4, #16]
 8005e44:	d00c      	beq.n	8005e60 <_scanf_float+0x35c>
 8005e46:	2945      	cmp	r1, #69	@ 0x45
 8005e48:	d00a      	beq.n	8005e60 <_scanf_float+0x35c>
 8005e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e4e:	463a      	mov	r2, r7
 8005e50:	4640      	mov	r0, r8
 8005e52:	4798      	blx	r3
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	1eb5      	subs	r5, r6, #2
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	463a      	mov	r2, r7
 8005e62:	4640      	mov	r0, r8
 8005e64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e68:	4798      	blx	r3
 8005e6a:	462e      	mov	r6, r5
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	f012 0210 	ands.w	r2, r2, #16
 8005e72:	d001      	beq.n	8005e78 <_scanf_float+0x374>
 8005e74:	2000      	movs	r0, #0
 8005e76:	e68a      	b.n	8005b8e <_scanf_float+0x8a>
 8005e78:	7032      	strb	r2, [r6, #0]
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e84:	d11c      	bne.n	8005ec0 <_scanf_float+0x3bc>
 8005e86:	9b02      	ldr	r3, [sp, #8]
 8005e88:	454b      	cmp	r3, r9
 8005e8a:	eba3 0209 	sub.w	r2, r3, r9
 8005e8e:	d123      	bne.n	8005ed8 <_scanf_float+0x3d4>
 8005e90:	2200      	movs	r2, #0
 8005e92:	4640      	mov	r0, r8
 8005e94:	9901      	ldr	r1, [sp, #4]
 8005e96:	f002 fc7b 	bl	8008790 <_strtod_r>
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	6825      	ldr	r5, [r4, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f015 0f02 	tst.w	r5, #2
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	f103 0204 	add.w	r2, r3, #4
 8005eac:	d01f      	beq.n	8005eee <_scanf_float+0x3ea>
 8005eae:	9903      	ldr	r1, [sp, #12]
 8005eb0:	600a      	str	r2, [r1, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	e9c3 6700 	strd	r6, r7, [r3]
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60e3      	str	r3, [r4, #12]
 8005ebe:	e7d9      	b.n	8005e74 <_scanf_float+0x370>
 8005ec0:	9b04      	ldr	r3, [sp, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0e4      	beq.n	8005e90 <_scanf_float+0x38c>
 8005ec6:	9905      	ldr	r1, [sp, #20]
 8005ec8:	230a      	movs	r3, #10
 8005eca:	4640      	mov	r0, r8
 8005ecc:	3101      	adds	r1, #1
 8005ece:	f002 fcdf 	bl	8008890 <_strtol_r>
 8005ed2:	9b04      	ldr	r3, [sp, #16]
 8005ed4:	9e05      	ldr	r6, [sp, #20]
 8005ed6:	1ac2      	subs	r2, r0, r3
 8005ed8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005edc:	429e      	cmp	r6, r3
 8005ede:	bf28      	it	cs
 8005ee0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	490d      	ldr	r1, [pc, #52]	@ (8005f1c <_scanf_float+0x418>)
 8005ee8:	f000 f912 	bl	8006110 <siprintf>
 8005eec:	e7d0      	b.n	8005e90 <_scanf_float+0x38c>
 8005eee:	076d      	lsls	r5, r5, #29
 8005ef0:	d4dd      	bmi.n	8005eae <_scanf_float+0x3aa>
 8005ef2:	9d03      	ldr	r5, [sp, #12]
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	681d      	ldr	r5, [r3, #0]
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	f7fa fd90 	bl	8000a20 <__aeabi_dcmpun>
 8005f00:	b120      	cbz	r0, 8005f0c <_scanf_float+0x408>
 8005f02:	4807      	ldr	r0, [pc, #28]	@ (8005f20 <_scanf_float+0x41c>)
 8005f04:	f000 fa4e 	bl	80063a4 <nanf>
 8005f08:	6028      	str	r0, [r5, #0]
 8005f0a:	e7d5      	b.n	8005eb8 <_scanf_float+0x3b4>
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fde4 	bl	8000adc <__aeabi_d2f>
 8005f14:	e7f8      	b.n	8005f08 <_scanf_float+0x404>
 8005f16:	f04f 0900 	mov.w	r9, #0
 8005f1a:	e62d      	b.n	8005b78 <_scanf_float+0x74>
 8005f1c:	0800a34c 	.word	0x0800a34c
 8005f20:	0800a700 	.word	0x0800a700

08005f24 <std>:
 8005f24:	2300      	movs	r3, #0
 8005f26:	b510      	push	{r4, lr}
 8005f28:	4604      	mov	r4, r0
 8005f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f32:	6083      	str	r3, [r0, #8]
 8005f34:	8181      	strh	r1, [r0, #12]
 8005f36:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f38:	81c2      	strh	r2, [r0, #14]
 8005f3a:	6183      	str	r3, [r0, #24]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	2208      	movs	r2, #8
 8005f40:	305c      	adds	r0, #92	@ 0x5c
 8005f42:	f000 f974 	bl	800622e <memset>
 8005f46:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <std+0x58>)
 8005f48:	6224      	str	r4, [r4, #32]
 8005f4a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f80 <std+0x5c>)
 8005f4e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f50:	4b0c      	ldr	r3, [pc, #48]	@ (8005f84 <std+0x60>)
 8005f52:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f54:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <std+0x64>)
 8005f56:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f58:	4b0c      	ldr	r3, [pc, #48]	@ (8005f8c <std+0x68>)
 8005f5a:	429c      	cmp	r4, r3
 8005f5c:	d006      	beq.n	8005f6c <std+0x48>
 8005f5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f62:	4294      	cmp	r4, r2
 8005f64:	d002      	beq.n	8005f6c <std+0x48>
 8005f66:	33d0      	adds	r3, #208	@ 0xd0
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	d105      	bne.n	8005f78 <std+0x54>
 8005f6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f74:	f000 ba04 	b.w	8006380 <__retarget_lock_init_recursive>
 8005f78:	bd10      	pop	{r4, pc}
 8005f7a:	bf00      	nop
 8005f7c:	080061a5 	.word	0x080061a5
 8005f80:	080061cb 	.word	0x080061cb
 8005f84:	08006203 	.word	0x08006203
 8005f88:	08006227 	.word	0x08006227
 8005f8c:	20000424 	.word	0x20000424

08005f90 <stdio_exit_handler>:
 8005f90:	4a02      	ldr	r2, [pc, #8]	@ (8005f9c <stdio_exit_handler+0xc>)
 8005f92:	4903      	ldr	r1, [pc, #12]	@ (8005fa0 <stdio_exit_handler+0x10>)
 8005f94:	4803      	ldr	r0, [pc, #12]	@ (8005fa4 <stdio_exit_handler+0x14>)
 8005f96:	f000 b869 	b.w	800606c <_fwalk_sglue>
 8005f9a:	bf00      	nop
 8005f9c:	20000018 	.word	0x20000018
 8005fa0:	08009271 	.word	0x08009271
 8005fa4:	20000028 	.word	0x20000028

08005fa8 <cleanup_stdio>:
 8005fa8:	6841      	ldr	r1, [r0, #4]
 8005faa:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <cleanup_stdio+0x34>)
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	d001      	beq.n	8005fb8 <cleanup_stdio+0x10>
 8005fb4:	f003 f95c 	bl	8009270 <_fflush_r>
 8005fb8:	68a1      	ldr	r1, [r4, #8]
 8005fba:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <cleanup_stdio+0x38>)
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	d002      	beq.n	8005fc6 <cleanup_stdio+0x1e>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f003 f955 	bl	8009270 <_fflush_r>
 8005fc6:	68e1      	ldr	r1, [r4, #12]
 8005fc8:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <cleanup_stdio+0x3c>)
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d004      	beq.n	8005fd8 <cleanup_stdio+0x30>
 8005fce:	4620      	mov	r0, r4
 8005fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd4:	f003 b94c 	b.w	8009270 <_fflush_r>
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000424 	.word	0x20000424
 8005fe0:	2000048c 	.word	0x2000048c
 8005fe4:	200004f4 	.word	0x200004f4

08005fe8 <global_stdio_init.part.0>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <global_stdio_init.part.0+0x30>)
 8005fec:	4c0b      	ldr	r4, [pc, #44]	@ (800601c <global_stdio_init.part.0+0x34>)
 8005fee:	4a0c      	ldr	r2, [pc, #48]	@ (8006020 <global_stdio_init.part.0+0x38>)
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	2104      	movs	r1, #4
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f7ff ff94 	bl	8005f24 <std>
 8005ffc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006000:	2201      	movs	r2, #1
 8006002:	2109      	movs	r1, #9
 8006004:	f7ff ff8e 	bl	8005f24 <std>
 8006008:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800600c:	2202      	movs	r2, #2
 800600e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006012:	2112      	movs	r1, #18
 8006014:	f7ff bf86 	b.w	8005f24 <std>
 8006018:	2000055c 	.word	0x2000055c
 800601c:	20000424 	.word	0x20000424
 8006020:	08005f91 	.word	0x08005f91

08006024 <__sfp_lock_acquire>:
 8006024:	4801      	ldr	r0, [pc, #4]	@ (800602c <__sfp_lock_acquire+0x8>)
 8006026:	f000 b9ac 	b.w	8006382 <__retarget_lock_acquire_recursive>
 800602a:	bf00      	nop
 800602c:	20000565 	.word	0x20000565

08006030 <__sfp_lock_release>:
 8006030:	4801      	ldr	r0, [pc, #4]	@ (8006038 <__sfp_lock_release+0x8>)
 8006032:	f000 b9a7 	b.w	8006384 <__retarget_lock_release_recursive>
 8006036:	bf00      	nop
 8006038:	20000565 	.word	0x20000565

0800603c <__sinit>:
 800603c:	b510      	push	{r4, lr}
 800603e:	4604      	mov	r4, r0
 8006040:	f7ff fff0 	bl	8006024 <__sfp_lock_acquire>
 8006044:	6a23      	ldr	r3, [r4, #32]
 8006046:	b11b      	cbz	r3, 8006050 <__sinit+0x14>
 8006048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800604c:	f7ff bff0 	b.w	8006030 <__sfp_lock_release>
 8006050:	4b04      	ldr	r3, [pc, #16]	@ (8006064 <__sinit+0x28>)
 8006052:	6223      	str	r3, [r4, #32]
 8006054:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <__sinit+0x2c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f5      	bne.n	8006048 <__sinit+0xc>
 800605c:	f7ff ffc4 	bl	8005fe8 <global_stdio_init.part.0>
 8006060:	e7f2      	b.n	8006048 <__sinit+0xc>
 8006062:	bf00      	nop
 8006064:	08005fa9 	.word	0x08005fa9
 8006068:	2000055c 	.word	0x2000055c

0800606c <_fwalk_sglue>:
 800606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006070:	4607      	mov	r7, r0
 8006072:	4688      	mov	r8, r1
 8006074:	4614      	mov	r4, r2
 8006076:	2600      	movs	r6, #0
 8006078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800607c:	f1b9 0901 	subs.w	r9, r9, #1
 8006080:	d505      	bpl.n	800608e <_fwalk_sglue+0x22>
 8006082:	6824      	ldr	r4, [r4, #0]
 8006084:	2c00      	cmp	r4, #0
 8006086:	d1f7      	bne.n	8006078 <_fwalk_sglue+0xc>
 8006088:	4630      	mov	r0, r6
 800608a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800608e:	89ab      	ldrh	r3, [r5, #12]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d907      	bls.n	80060a4 <_fwalk_sglue+0x38>
 8006094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006098:	3301      	adds	r3, #1
 800609a:	d003      	beq.n	80060a4 <_fwalk_sglue+0x38>
 800609c:	4629      	mov	r1, r5
 800609e:	4638      	mov	r0, r7
 80060a0:	47c0      	blx	r8
 80060a2:	4306      	orrs	r6, r0
 80060a4:	3568      	adds	r5, #104	@ 0x68
 80060a6:	e7e9      	b.n	800607c <_fwalk_sglue+0x10>

080060a8 <sniprintf>:
 80060a8:	b40c      	push	{r2, r3}
 80060aa:	b530      	push	{r4, r5, lr}
 80060ac:	4b17      	ldr	r3, [pc, #92]	@ (800610c <sniprintf+0x64>)
 80060ae:	1e0c      	subs	r4, r1, #0
 80060b0:	681d      	ldr	r5, [r3, #0]
 80060b2:	b09d      	sub	sp, #116	@ 0x74
 80060b4:	da08      	bge.n	80060c8 <sniprintf+0x20>
 80060b6:	238b      	movs	r3, #139	@ 0x8b
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	b01d      	add	sp, #116	@ 0x74
 80060c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060c4:	b002      	add	sp, #8
 80060c6:	4770      	bx	lr
 80060c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060d0:	bf0c      	ite	eq
 80060d2:	4623      	moveq	r3, r4
 80060d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060d8:	9304      	str	r3, [sp, #16]
 80060da:	9307      	str	r3, [sp, #28]
 80060dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060e0:	9002      	str	r0, [sp, #8]
 80060e2:	9006      	str	r0, [sp, #24]
 80060e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060e8:	4628      	mov	r0, r5
 80060ea:	ab21      	add	r3, sp, #132	@ 0x84
 80060ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060ee:	a902      	add	r1, sp, #8
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	f002 fc2b 	bl	800894c <_svfiprintf_r>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	bfbc      	itt	lt
 80060fa:	238b      	movlt	r3, #139	@ 0x8b
 80060fc:	602b      	strlt	r3, [r5, #0]
 80060fe:	2c00      	cmp	r4, #0
 8006100:	d0dd      	beq.n	80060be <sniprintf+0x16>
 8006102:	2200      	movs	r2, #0
 8006104:	9b02      	ldr	r3, [sp, #8]
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e7d9      	b.n	80060be <sniprintf+0x16>
 800610a:	bf00      	nop
 800610c:	20000024 	.word	0x20000024

08006110 <siprintf>:
 8006110:	b40e      	push	{r1, r2, r3}
 8006112:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006116:	b500      	push	{lr}
 8006118:	b09c      	sub	sp, #112	@ 0x70
 800611a:	ab1d      	add	r3, sp, #116	@ 0x74
 800611c:	9002      	str	r0, [sp, #8]
 800611e:	9006      	str	r0, [sp, #24]
 8006120:	9107      	str	r1, [sp, #28]
 8006122:	9104      	str	r1, [sp, #16]
 8006124:	4808      	ldr	r0, [pc, #32]	@ (8006148 <siprintf+0x38>)
 8006126:	4909      	ldr	r1, [pc, #36]	@ (800614c <siprintf+0x3c>)
 8006128:	f853 2b04 	ldr.w	r2, [r3], #4
 800612c:	9105      	str	r1, [sp, #20]
 800612e:	6800      	ldr	r0, [r0, #0]
 8006130:	a902      	add	r1, sp, #8
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	f002 fc0a 	bl	800894c <_svfiprintf_r>
 8006138:	2200      	movs	r2, #0
 800613a:	9b02      	ldr	r3, [sp, #8]
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	b01c      	add	sp, #112	@ 0x70
 8006140:	f85d eb04 	ldr.w	lr, [sp], #4
 8006144:	b003      	add	sp, #12
 8006146:	4770      	bx	lr
 8006148:	20000024 	.word	0x20000024
 800614c:	ffff0208 	.word	0xffff0208

08006150 <siscanf>:
 8006150:	b40e      	push	{r1, r2, r3}
 8006152:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006156:	b530      	push	{r4, r5, lr}
 8006158:	b09c      	sub	sp, #112	@ 0x70
 800615a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800615c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006160:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006164:	9002      	str	r0, [sp, #8]
 8006166:	9006      	str	r0, [sp, #24]
 8006168:	f7f9 fffc 	bl	8000164 <strlen>
 800616c:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <siscanf+0x4c>)
 800616e:	9003      	str	r0, [sp, #12]
 8006170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006172:	2300      	movs	r3, #0
 8006174:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006176:	9314      	str	r3, [sp, #80]	@ 0x50
 8006178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800617c:	9007      	str	r0, [sp, #28]
 800617e:	4808      	ldr	r0, [pc, #32]	@ (80061a0 <siscanf+0x50>)
 8006180:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006184:	462a      	mov	r2, r5
 8006186:	4623      	mov	r3, r4
 8006188:	a902      	add	r1, sp, #8
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	9401      	str	r4, [sp, #4]
 800618e:	f002 fd31 	bl	8008bf4 <__ssvfiscanf_r>
 8006192:	b01c      	add	sp, #112	@ 0x70
 8006194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006198:	b003      	add	sp, #12
 800619a:	4770      	bx	lr
 800619c:	080061c7 	.word	0x080061c7
 80061a0:	20000024 	.word	0x20000024

080061a4 <__sread>:
 80061a4:	b510      	push	{r4, lr}
 80061a6:	460c      	mov	r4, r1
 80061a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ac:	f000 f89a 	bl	80062e4 <_read_r>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	bfab      	itete	ge
 80061b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061b6:	89a3      	ldrhlt	r3, [r4, #12]
 80061b8:	181b      	addge	r3, r3, r0
 80061ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061be:	bfac      	ite	ge
 80061c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061c2:	81a3      	strhlt	r3, [r4, #12]
 80061c4:	bd10      	pop	{r4, pc}

080061c6 <__seofread>:
 80061c6:	2000      	movs	r0, #0
 80061c8:	4770      	bx	lr

080061ca <__swrite>:
 80061ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	461f      	mov	r7, r3
 80061d0:	898b      	ldrh	r3, [r1, #12]
 80061d2:	4605      	mov	r5, r0
 80061d4:	05db      	lsls	r3, r3, #23
 80061d6:	460c      	mov	r4, r1
 80061d8:	4616      	mov	r6, r2
 80061da:	d505      	bpl.n	80061e8 <__swrite+0x1e>
 80061dc:	2302      	movs	r3, #2
 80061de:	2200      	movs	r2, #0
 80061e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e4:	f000 f86c 	bl	80062c0 <_lseek_r>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	4632      	mov	r2, r6
 80061ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	4628      	mov	r0, r5
 80061f4:	463b      	mov	r3, r7
 80061f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	f000 b883 	b.w	8006308 <_write_r>

08006202 <__sseek>:
 8006202:	b510      	push	{r4, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	f000 f859 	bl	80062c0 <_lseek_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	bf15      	itete	ne
 8006214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800621a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800621e:	81a3      	strheq	r3, [r4, #12]
 8006220:	bf18      	it	ne
 8006222:	81a3      	strhne	r3, [r4, #12]
 8006224:	bd10      	pop	{r4, pc}

08006226 <__sclose>:
 8006226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622a:	f000 b839 	b.w	80062a0 <_close_r>

0800622e <memset>:
 800622e:	4603      	mov	r3, r0
 8006230:	4402      	add	r2, r0
 8006232:	4293      	cmp	r3, r2
 8006234:	d100      	bne.n	8006238 <memset+0xa>
 8006236:	4770      	bx	lr
 8006238:	f803 1b01 	strb.w	r1, [r3], #1
 800623c:	e7f9      	b.n	8006232 <memset+0x4>
	...

08006240 <strcasecmp>:
 8006240:	b530      	push	{r4, r5, lr}
 8006242:	4604      	mov	r4, r0
 8006244:	4d0a      	ldr	r5, [pc, #40]	@ (8006270 <strcasecmp+0x30>)
 8006246:	f814 3b01 	ldrb.w	r3, [r4], #1
 800624a:	5cea      	ldrb	r2, [r5, r3]
 800624c:	f002 0203 	and.w	r2, r2, #3
 8006250:	2a01      	cmp	r2, #1
 8006252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006256:	bf08      	it	eq
 8006258:	3320      	addeq	r3, #32
 800625a:	5ca8      	ldrb	r0, [r5, r2]
 800625c:	f000 0003 	and.w	r0, r0, #3
 8006260:	2801      	cmp	r0, #1
 8006262:	bf08      	it	eq
 8006264:	3220      	addeq	r2, #32
 8006266:	1a98      	subs	r0, r3, r2
 8006268:	d101      	bne.n	800626e <strcasecmp+0x2e>
 800626a:	2a00      	cmp	r2, #0
 800626c:	d1eb      	bne.n	8006246 <strcasecmp+0x6>
 800626e:	bd30      	pop	{r4, r5, pc}
 8006270:	0800a591 	.word	0x0800a591

08006274 <strncmp>:
 8006274:	b510      	push	{r4, lr}
 8006276:	b16a      	cbz	r2, 8006294 <strncmp+0x20>
 8006278:	3901      	subs	r1, #1
 800627a:	1884      	adds	r4, r0, r2
 800627c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006280:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006284:	429a      	cmp	r2, r3
 8006286:	d103      	bne.n	8006290 <strncmp+0x1c>
 8006288:	42a0      	cmp	r0, r4
 800628a:	d001      	beq.n	8006290 <strncmp+0x1c>
 800628c:	2a00      	cmp	r2, #0
 800628e:	d1f5      	bne.n	800627c <strncmp+0x8>
 8006290:	1ad0      	subs	r0, r2, r3
 8006292:	bd10      	pop	{r4, pc}
 8006294:	4610      	mov	r0, r2
 8006296:	e7fc      	b.n	8006292 <strncmp+0x1e>

08006298 <_localeconv_r>:
 8006298:	4800      	ldr	r0, [pc, #0]	@ (800629c <_localeconv_r+0x4>)
 800629a:	4770      	bx	lr
 800629c:	20000164 	.word	0x20000164

080062a0 <_close_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	2300      	movs	r3, #0
 80062a4:	4d05      	ldr	r5, [pc, #20]	@ (80062bc <_close_r+0x1c>)
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f7fc fc41 	bl	8002b32 <_close>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_close_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_close_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000560 	.word	0x20000560

080062c0 <_lseek_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	2200      	movs	r2, #0
 80062ca:	4d05      	ldr	r5, [pc, #20]	@ (80062e0 <_lseek_r+0x20>)
 80062cc:	602a      	str	r2, [r5, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f7fc fc53 	bl	8002b7a <_lseek>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_lseek_r+0x1e>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_lseek_r+0x1e>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	20000560 	.word	0x20000560

080062e4 <_read_r>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	2200      	movs	r2, #0
 80062ee:	4d05      	ldr	r5, [pc, #20]	@ (8006304 <_read_r+0x20>)
 80062f0:	602a      	str	r2, [r5, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f7fc fbe4 	bl	8002ac0 <_read>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_read_r+0x1e>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_read_r+0x1e>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20000560 	.word	0x20000560

08006308 <_write_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	2200      	movs	r2, #0
 8006312:	4d05      	ldr	r5, [pc, #20]	@ (8006328 <_write_r+0x20>)
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fc fbef 	bl	8002afa <_write>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_write_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_write_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	20000560 	.word	0x20000560

0800632c <__errno>:
 800632c:	4b01      	ldr	r3, [pc, #4]	@ (8006334 <__errno+0x8>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20000024 	.word	0x20000024

08006338 <__libc_init_array>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	2600      	movs	r6, #0
 800633c:	4d0c      	ldr	r5, [pc, #48]	@ (8006370 <__libc_init_array+0x38>)
 800633e:	4c0d      	ldr	r4, [pc, #52]	@ (8006374 <__libc_init_array+0x3c>)
 8006340:	1b64      	subs	r4, r4, r5
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	42a6      	cmp	r6, r4
 8006346:	d109      	bne.n	800635c <__libc_init_array+0x24>
 8006348:	f003 ff50 	bl	800a1ec <_init>
 800634c:	2600      	movs	r6, #0
 800634e:	4d0a      	ldr	r5, [pc, #40]	@ (8006378 <__libc_init_array+0x40>)
 8006350:	4c0a      	ldr	r4, [pc, #40]	@ (800637c <__libc_init_array+0x44>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	42a6      	cmp	r6, r4
 8006358:	d105      	bne.n	8006366 <__libc_init_array+0x2e>
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006360:	4798      	blx	r3
 8006362:	3601      	adds	r6, #1
 8006364:	e7ee      	b.n	8006344 <__libc_init_array+0xc>
 8006366:	f855 3b04 	ldr.w	r3, [r5], #4
 800636a:	4798      	blx	r3
 800636c:	3601      	adds	r6, #1
 800636e:	e7f2      	b.n	8006356 <__libc_init_array+0x1e>
 8006370:	0800a76c 	.word	0x0800a76c
 8006374:	0800a76c 	.word	0x0800a76c
 8006378:	0800a76c 	.word	0x0800a76c
 800637c:	0800a770 	.word	0x0800a770

08006380 <__retarget_lock_init_recursive>:
 8006380:	4770      	bx	lr

08006382 <__retarget_lock_acquire_recursive>:
 8006382:	4770      	bx	lr

08006384 <__retarget_lock_release_recursive>:
 8006384:	4770      	bx	lr

08006386 <memchr>:
 8006386:	4603      	mov	r3, r0
 8006388:	b510      	push	{r4, lr}
 800638a:	b2c9      	uxtb	r1, r1
 800638c:	4402      	add	r2, r0
 800638e:	4293      	cmp	r3, r2
 8006390:	4618      	mov	r0, r3
 8006392:	d101      	bne.n	8006398 <memchr+0x12>
 8006394:	2000      	movs	r0, #0
 8006396:	e003      	b.n	80063a0 <memchr+0x1a>
 8006398:	7804      	ldrb	r4, [r0, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	428c      	cmp	r4, r1
 800639e:	d1f6      	bne.n	800638e <memchr+0x8>
 80063a0:	bd10      	pop	{r4, pc}
	...

080063a4 <nanf>:
 80063a4:	4800      	ldr	r0, [pc, #0]	@ (80063a8 <nanf+0x4>)
 80063a6:	4770      	bx	lr
 80063a8:	7fc00000 	.word	0x7fc00000

080063ac <quorem>:
 80063ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	6903      	ldr	r3, [r0, #16]
 80063b2:	690c      	ldr	r4, [r1, #16]
 80063b4:	4607      	mov	r7, r0
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	db7e      	blt.n	80064b8 <quorem+0x10c>
 80063ba:	3c01      	subs	r4, #1
 80063bc:	00a3      	lsls	r3, r4, #2
 80063be:	f100 0514 	add.w	r5, r0, #20
 80063c2:	f101 0814 	add.w	r8, r1, #20
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063d6:	3301      	adds	r3, #1
 80063d8:	429a      	cmp	r2, r3
 80063da:	fbb2 f6f3 	udiv	r6, r2, r3
 80063de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063e2:	d32e      	bcc.n	8006442 <quorem+0x96>
 80063e4:	f04f 0a00 	mov.w	sl, #0
 80063e8:	46c4      	mov	ip, r8
 80063ea:	46ae      	mov	lr, r5
 80063ec:	46d3      	mov	fp, sl
 80063ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063f2:	b298      	uxth	r0, r3
 80063f4:	fb06 a000 	mla	r0, r6, r0, sl
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	0c02      	lsrs	r2, r0, #16
 80063fc:	fb06 2303 	mla	r3, r6, r3, r2
 8006400:	f8de 2000 	ldr.w	r2, [lr]
 8006404:	b280      	uxth	r0, r0
 8006406:	b292      	uxth	r2, r2
 8006408:	1a12      	subs	r2, r2, r0
 800640a:	445a      	add	r2, fp
 800640c:	f8de 0000 	ldr.w	r0, [lr]
 8006410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006414:	b29b      	uxth	r3, r3
 8006416:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800641a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800641e:	b292      	uxth	r2, r2
 8006420:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006424:	45e1      	cmp	r9, ip
 8006426:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800642a:	f84e 2b04 	str.w	r2, [lr], #4
 800642e:	d2de      	bcs.n	80063ee <quorem+0x42>
 8006430:	9b00      	ldr	r3, [sp, #0]
 8006432:	58eb      	ldr	r3, [r5, r3]
 8006434:	b92b      	cbnz	r3, 8006442 <quorem+0x96>
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	3b04      	subs	r3, #4
 800643a:	429d      	cmp	r5, r3
 800643c:	461a      	mov	r2, r3
 800643e:	d32f      	bcc.n	80064a0 <quorem+0xf4>
 8006440:	613c      	str	r4, [r7, #16]
 8006442:	4638      	mov	r0, r7
 8006444:	f001 f9c4 	bl	80077d0 <__mcmp>
 8006448:	2800      	cmp	r0, #0
 800644a:	db25      	blt.n	8006498 <quorem+0xec>
 800644c:	4629      	mov	r1, r5
 800644e:	2000      	movs	r0, #0
 8006450:	f858 2b04 	ldr.w	r2, [r8], #4
 8006454:	f8d1 c000 	ldr.w	ip, [r1]
 8006458:	fa1f fe82 	uxth.w	lr, r2
 800645c:	fa1f f38c 	uxth.w	r3, ip
 8006460:	eba3 030e 	sub.w	r3, r3, lr
 8006464:	4403      	add	r3, r0
 8006466:	0c12      	lsrs	r2, r2, #16
 8006468:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800646c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006470:	b29b      	uxth	r3, r3
 8006472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006476:	45c1      	cmp	r9, r8
 8006478:	ea4f 4022 	mov.w	r0, r2, asr #16
 800647c:	f841 3b04 	str.w	r3, [r1], #4
 8006480:	d2e6      	bcs.n	8006450 <quorem+0xa4>
 8006482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800648a:	b922      	cbnz	r2, 8006496 <quorem+0xea>
 800648c:	3b04      	subs	r3, #4
 800648e:	429d      	cmp	r5, r3
 8006490:	461a      	mov	r2, r3
 8006492:	d30b      	bcc.n	80064ac <quorem+0x100>
 8006494:	613c      	str	r4, [r7, #16]
 8006496:	3601      	adds	r6, #1
 8006498:	4630      	mov	r0, r6
 800649a:	b003      	add	sp, #12
 800649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	3b04      	subs	r3, #4
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	d1cb      	bne.n	8006440 <quorem+0x94>
 80064a8:	3c01      	subs	r4, #1
 80064aa:	e7c6      	b.n	800643a <quorem+0x8e>
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	3b04      	subs	r3, #4
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	d1ef      	bne.n	8006494 <quorem+0xe8>
 80064b4:	3c01      	subs	r4, #1
 80064b6:	e7ea      	b.n	800648e <quorem+0xe2>
 80064b8:	2000      	movs	r0, #0
 80064ba:	e7ee      	b.n	800649a <quorem+0xee>
 80064bc:	0000      	movs	r0, r0
	...

080064c0 <_dtoa_r>:
 80064c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	69c7      	ldr	r7, [r0, #28]
 80064ca:	b097      	sub	sp, #92	@ 0x5c
 80064cc:	4683      	mov	fp, r0
 80064ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80064d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80064d4:	b97f      	cbnz	r7, 80064f6 <_dtoa_r+0x36>
 80064d6:	2010      	movs	r0, #16
 80064d8:	f000 fe02 	bl	80070e0 <malloc>
 80064dc:	4602      	mov	r2, r0
 80064de:	f8cb 001c 	str.w	r0, [fp, #28]
 80064e2:	b920      	cbnz	r0, 80064ee <_dtoa_r+0x2e>
 80064e4:	21ef      	movs	r1, #239	@ 0xef
 80064e6:	4ba8      	ldr	r3, [pc, #672]	@ (8006788 <_dtoa_r+0x2c8>)
 80064e8:	48a8      	ldr	r0, [pc, #672]	@ (800678c <_dtoa_r+0x2cc>)
 80064ea:	f002 ff99 	bl	8009420 <__assert_func>
 80064ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064f2:	6007      	str	r7, [r0, #0]
 80064f4:	60c7      	str	r7, [r0, #12]
 80064f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064fa:	6819      	ldr	r1, [r3, #0]
 80064fc:	b159      	cbz	r1, 8006516 <_dtoa_r+0x56>
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	2301      	movs	r3, #1
 8006502:	4093      	lsls	r3, r2
 8006504:	604a      	str	r2, [r1, #4]
 8006506:	608b      	str	r3, [r1, #8]
 8006508:	4658      	mov	r0, fp
 800650a:	f000 fedf 	bl	80072cc <_Bfree>
 800650e:	2200      	movs	r2, #0
 8006510:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	1e2b      	subs	r3, r5, #0
 8006518:	bfaf      	iteee	ge
 800651a:	2300      	movge	r3, #0
 800651c:	2201      	movlt	r2, #1
 800651e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006522:	9303      	strlt	r3, [sp, #12]
 8006524:	bfa8      	it	ge
 8006526:	6033      	strge	r3, [r6, #0]
 8006528:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800652c:	4b98      	ldr	r3, [pc, #608]	@ (8006790 <_dtoa_r+0x2d0>)
 800652e:	bfb8      	it	lt
 8006530:	6032      	strlt	r2, [r6, #0]
 8006532:	ea33 0308 	bics.w	r3, r3, r8
 8006536:	d112      	bne.n	800655e <_dtoa_r+0x9e>
 8006538:	f242 730f 	movw	r3, #9999	@ 0x270f
 800653c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006544:	4323      	orrs	r3, r4
 8006546:	f000 8550 	beq.w	8006fea <_dtoa_r+0xb2a>
 800654a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800654c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006794 <_dtoa_r+0x2d4>
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8552 	beq.w	8006ffa <_dtoa_r+0xb3a>
 8006556:	f10a 0303 	add.w	r3, sl, #3
 800655a:	f000 bd4c 	b.w	8006ff6 <_dtoa_r+0xb36>
 800655e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006562:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	f7fa fa25 	bl	80009bc <__aeabi_dcmpeq>
 8006572:	4607      	mov	r7, r0
 8006574:	b158      	cbz	r0, 800658e <_dtoa_r+0xce>
 8006576:	2301      	movs	r3, #1
 8006578:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800657e:	b113      	cbz	r3, 8006586 <_dtoa_r+0xc6>
 8006580:	4b85      	ldr	r3, [pc, #532]	@ (8006798 <_dtoa_r+0x2d8>)
 8006582:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800679c <_dtoa_r+0x2dc>
 800658a:	f000 bd36 	b.w	8006ffa <_dtoa_r+0xb3a>
 800658e:	ab14      	add	r3, sp, #80	@ 0x50
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	ab15      	add	r3, sp, #84	@ 0x54
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	4658      	mov	r0, fp
 8006598:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800659c:	f001 fa30 	bl	8007a00 <__d2b>
 80065a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80065a4:	4681      	mov	r9, r0
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	d077      	beq.n	800669a <_dtoa_r+0x1da>
 80065aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80065c2:	4619      	mov	r1, r3
 80065c4:	2200      	movs	r2, #0
 80065c6:	4b76      	ldr	r3, [pc, #472]	@ (80067a0 <_dtoa_r+0x2e0>)
 80065c8:	f7f9 fdd8 	bl	800017c <__aeabi_dsub>
 80065cc:	a368      	add	r3, pc, #416	@ (adr r3, 8006770 <_dtoa_r+0x2b0>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7f9 ff8b 	bl	80004ec <__aeabi_dmul>
 80065d6:	a368      	add	r3, pc, #416	@ (adr r3, 8006778 <_dtoa_r+0x2b8>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 fdd0 	bl	8000180 <__adddf3>
 80065e0:	4604      	mov	r4, r0
 80065e2:	4630      	mov	r0, r6
 80065e4:	460d      	mov	r5, r1
 80065e6:	f7f9 ff17 	bl	8000418 <__aeabi_i2d>
 80065ea:	a365      	add	r3, pc, #404	@ (adr r3, 8006780 <_dtoa_r+0x2c0>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7f9 ff7c 	bl	80004ec <__aeabi_dmul>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	f7f9 fdc0 	bl	8000180 <__adddf3>
 8006600:	4604      	mov	r4, r0
 8006602:	460d      	mov	r5, r1
 8006604:	f7fa fa22 	bl	8000a4c <__aeabi_d2iz>
 8006608:	2200      	movs	r2, #0
 800660a:	4607      	mov	r7, r0
 800660c:	2300      	movs	r3, #0
 800660e:	4620      	mov	r0, r4
 8006610:	4629      	mov	r1, r5
 8006612:	f7fa f9dd 	bl	80009d0 <__aeabi_dcmplt>
 8006616:	b140      	cbz	r0, 800662a <_dtoa_r+0x16a>
 8006618:	4638      	mov	r0, r7
 800661a:	f7f9 fefd 	bl	8000418 <__aeabi_i2d>
 800661e:	4622      	mov	r2, r4
 8006620:	462b      	mov	r3, r5
 8006622:	f7fa f9cb 	bl	80009bc <__aeabi_dcmpeq>
 8006626:	b900      	cbnz	r0, 800662a <_dtoa_r+0x16a>
 8006628:	3f01      	subs	r7, #1
 800662a:	2f16      	cmp	r7, #22
 800662c:	d853      	bhi.n	80066d6 <_dtoa_r+0x216>
 800662e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006632:	4b5c      	ldr	r3, [pc, #368]	@ (80067a4 <_dtoa_r+0x2e4>)
 8006634:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7fa f9c8 	bl	80009d0 <__aeabi_dcmplt>
 8006640:	2800      	cmp	r0, #0
 8006642:	d04a      	beq.n	80066da <_dtoa_r+0x21a>
 8006644:	2300      	movs	r3, #0
 8006646:	3f01      	subs	r7, #1
 8006648:	930f      	str	r3, [sp, #60]	@ 0x3c
 800664a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800664c:	1b9b      	subs	r3, r3, r6
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	bf46      	itte	mi
 8006652:	f1c3 0801 	rsbmi	r8, r3, #1
 8006656:	2300      	movmi	r3, #0
 8006658:	f04f 0800 	movpl.w	r8, #0
 800665c:	9209      	str	r2, [sp, #36]	@ 0x24
 800665e:	bf48      	it	mi
 8006660:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006662:	2f00      	cmp	r7, #0
 8006664:	db3b      	blt.n	80066de <_dtoa_r+0x21e>
 8006666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006668:	970e      	str	r7, [sp, #56]	@ 0x38
 800666a:	443b      	add	r3, r7
 800666c:	9309      	str	r3, [sp, #36]	@ 0x24
 800666e:	2300      	movs	r3, #0
 8006670:	930a      	str	r3, [sp, #40]	@ 0x28
 8006672:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006674:	2b09      	cmp	r3, #9
 8006676:	d866      	bhi.n	8006746 <_dtoa_r+0x286>
 8006678:	2b05      	cmp	r3, #5
 800667a:	bfc4      	itt	gt
 800667c:	3b04      	subgt	r3, #4
 800667e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006680:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006682:	bfc8      	it	gt
 8006684:	2400      	movgt	r4, #0
 8006686:	f1a3 0302 	sub.w	r3, r3, #2
 800668a:	bfd8      	it	le
 800668c:	2401      	movle	r4, #1
 800668e:	2b03      	cmp	r3, #3
 8006690:	d864      	bhi.n	800675c <_dtoa_r+0x29c>
 8006692:	e8df f003 	tbb	[pc, r3]
 8006696:	382b      	.short	0x382b
 8006698:	5636      	.short	0x5636
 800669a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800669e:	441e      	add	r6, r3
 80066a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	bfc1      	itttt	gt
 80066a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80066b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066b8:	bfd6      	itet	le
 80066ba:	f1c3 0320 	rsble	r3, r3, #32
 80066be:	ea48 0003 	orrgt.w	r0, r8, r3
 80066c2:	fa04 f003 	lslle.w	r0, r4, r3
 80066c6:	f7f9 fe97 	bl	80003f8 <__aeabi_ui2d>
 80066ca:	2201      	movs	r2, #1
 80066cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066d0:	3e01      	subs	r6, #1
 80066d2:	9212      	str	r2, [sp, #72]	@ 0x48
 80066d4:	e775      	b.n	80065c2 <_dtoa_r+0x102>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e7b6      	b.n	8006648 <_dtoa_r+0x188>
 80066da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80066dc:	e7b5      	b.n	800664a <_dtoa_r+0x18a>
 80066de:	427b      	negs	r3, r7
 80066e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e2:	2300      	movs	r3, #0
 80066e4:	eba8 0807 	sub.w	r8, r8, r7
 80066e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80066ea:	e7c2      	b.n	8006672 <_dtoa_r+0x1b2>
 80066ec:	2300      	movs	r3, #0
 80066ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	dc35      	bgt.n	8006762 <_dtoa_r+0x2a2>
 80066f6:	2301      	movs	r3, #1
 80066f8:	461a      	mov	r2, r3
 80066fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80066fe:	9221      	str	r2, [sp, #132]	@ 0x84
 8006700:	e00b      	b.n	800671a <_dtoa_r+0x25a>
 8006702:	2301      	movs	r3, #1
 8006704:	e7f3      	b.n	80066ee <_dtoa_r+0x22e>
 8006706:	2300      	movs	r3, #0
 8006708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800670a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	9308      	str	r3, [sp, #32]
 8006710:	3301      	adds	r3, #1
 8006712:	2b01      	cmp	r3, #1
 8006714:	9307      	str	r3, [sp, #28]
 8006716:	bfb8      	it	lt
 8006718:	2301      	movlt	r3, #1
 800671a:	2100      	movs	r1, #0
 800671c:	2204      	movs	r2, #4
 800671e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006722:	f102 0514 	add.w	r5, r2, #20
 8006726:	429d      	cmp	r5, r3
 8006728:	d91f      	bls.n	800676a <_dtoa_r+0x2aa>
 800672a:	6041      	str	r1, [r0, #4]
 800672c:	4658      	mov	r0, fp
 800672e:	f000 fd8d 	bl	800724c <_Balloc>
 8006732:	4682      	mov	sl, r0
 8006734:	2800      	cmp	r0, #0
 8006736:	d139      	bne.n	80067ac <_dtoa_r+0x2ec>
 8006738:	4602      	mov	r2, r0
 800673a:	f240 11af 	movw	r1, #431	@ 0x1af
 800673e:	4b1a      	ldr	r3, [pc, #104]	@ (80067a8 <_dtoa_r+0x2e8>)
 8006740:	e6d2      	b.n	80064e8 <_dtoa_r+0x28>
 8006742:	2301      	movs	r3, #1
 8006744:	e7e0      	b.n	8006708 <_dtoa_r+0x248>
 8006746:	2401      	movs	r4, #1
 8006748:	2300      	movs	r3, #0
 800674a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800674c:	9320      	str	r3, [sp, #128]	@ 0x80
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	2200      	movs	r2, #0
 8006754:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006758:	2312      	movs	r3, #18
 800675a:	e7d0      	b.n	80066fe <_dtoa_r+0x23e>
 800675c:	2301      	movs	r3, #1
 800675e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006760:	e7f5      	b.n	800674e <_dtoa_r+0x28e>
 8006762:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006764:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006768:	e7d7      	b.n	800671a <_dtoa_r+0x25a>
 800676a:	3101      	adds	r1, #1
 800676c:	0052      	lsls	r2, r2, #1
 800676e:	e7d8      	b.n	8006722 <_dtoa_r+0x262>
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	0800a35e 	.word	0x0800a35e
 800678c:	0800a375 	.word	0x0800a375
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	0800a35a 	.word	0x0800a35a
 8006798:	0800a6b9 	.word	0x0800a6b9
 800679c:	0800a6b8 	.word	0x0800a6b8
 80067a0:	3ff80000 	.word	0x3ff80000
 80067a4:	0800a470 	.word	0x0800a470
 80067a8:	0800a3cd 	.word	0x0800a3cd
 80067ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067b0:	6018      	str	r0, [r3, #0]
 80067b2:	9b07      	ldr	r3, [sp, #28]
 80067b4:	2b0e      	cmp	r3, #14
 80067b6:	f200 80a4 	bhi.w	8006902 <_dtoa_r+0x442>
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	f000 80a1 	beq.w	8006902 <_dtoa_r+0x442>
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	dd33      	ble.n	800682c <_dtoa_r+0x36c>
 80067c4:	4b86      	ldr	r3, [pc, #536]	@ (80069e0 <_dtoa_r+0x520>)
 80067c6:	f007 020f 	and.w	r2, r7, #15
 80067ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ce:	05f8      	lsls	r0, r7, #23
 80067d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067dc:	d516      	bpl.n	800680c <_dtoa_r+0x34c>
 80067de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e2:	4b80      	ldr	r3, [pc, #512]	@ (80069e4 <_dtoa_r+0x524>)
 80067e4:	2603      	movs	r6, #3
 80067e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067ea:	f7f9 ffa9 	bl	8000740 <__aeabi_ddiv>
 80067ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f2:	f004 040f 	and.w	r4, r4, #15
 80067f6:	4d7b      	ldr	r5, [pc, #492]	@ (80069e4 <_dtoa_r+0x524>)
 80067f8:	b954      	cbnz	r4, 8006810 <_dtoa_r+0x350>
 80067fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006802:	f7f9 ff9d 	bl	8000740 <__aeabi_ddiv>
 8006806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800680a:	e028      	b.n	800685e <_dtoa_r+0x39e>
 800680c:	2602      	movs	r6, #2
 800680e:	e7f2      	b.n	80067f6 <_dtoa_r+0x336>
 8006810:	07e1      	lsls	r1, r4, #31
 8006812:	d508      	bpl.n	8006826 <_dtoa_r+0x366>
 8006814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800681c:	f7f9 fe66 	bl	80004ec <__aeabi_dmul>
 8006820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006824:	3601      	adds	r6, #1
 8006826:	1064      	asrs	r4, r4, #1
 8006828:	3508      	adds	r5, #8
 800682a:	e7e5      	b.n	80067f8 <_dtoa_r+0x338>
 800682c:	f000 80d2 	beq.w	80069d4 <_dtoa_r+0x514>
 8006830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006834:	427c      	negs	r4, r7
 8006836:	4b6a      	ldr	r3, [pc, #424]	@ (80069e0 <_dtoa_r+0x520>)
 8006838:	f004 020f 	and.w	r2, r4, #15
 800683c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f7f9 fe52 	bl	80004ec <__aeabi_dmul>
 8006848:	2602      	movs	r6, #2
 800684a:	2300      	movs	r3, #0
 800684c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006850:	4d64      	ldr	r5, [pc, #400]	@ (80069e4 <_dtoa_r+0x524>)
 8006852:	1124      	asrs	r4, r4, #4
 8006854:	2c00      	cmp	r4, #0
 8006856:	f040 80b2 	bne.w	80069be <_dtoa_r+0x4fe>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1d3      	bne.n	8006806 <_dtoa_r+0x346>
 800685e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80b7 	beq.w	80069d8 <_dtoa_r+0x518>
 800686a:	2200      	movs	r2, #0
 800686c:	4620      	mov	r0, r4
 800686e:	4629      	mov	r1, r5
 8006870:	4b5d      	ldr	r3, [pc, #372]	@ (80069e8 <_dtoa_r+0x528>)
 8006872:	f7fa f8ad 	bl	80009d0 <__aeabi_dcmplt>
 8006876:	2800      	cmp	r0, #0
 8006878:	f000 80ae 	beq.w	80069d8 <_dtoa_r+0x518>
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80aa 	beq.w	80069d8 <_dtoa_r+0x518>
 8006884:	9b08      	ldr	r3, [sp, #32]
 8006886:	2b00      	cmp	r3, #0
 8006888:	dd37      	ble.n	80068fa <_dtoa_r+0x43a>
 800688a:	1e7b      	subs	r3, r7, #1
 800688c:	4620      	mov	r0, r4
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	2200      	movs	r2, #0
 8006892:	4629      	mov	r1, r5
 8006894:	4b55      	ldr	r3, [pc, #340]	@ (80069ec <_dtoa_r+0x52c>)
 8006896:	f7f9 fe29 	bl	80004ec <__aeabi_dmul>
 800689a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689e:	9c08      	ldr	r4, [sp, #32]
 80068a0:	3601      	adds	r6, #1
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7f9 fdb8 	bl	8000418 <__aeabi_i2d>
 80068a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ac:	f7f9 fe1e 	bl	80004ec <__aeabi_dmul>
 80068b0:	2200      	movs	r2, #0
 80068b2:	4b4f      	ldr	r3, [pc, #316]	@ (80069f0 <_dtoa_r+0x530>)
 80068b4:	f7f9 fc64 	bl	8000180 <__adddf3>
 80068b8:	4605      	mov	r5, r0
 80068ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068be:	2c00      	cmp	r4, #0
 80068c0:	f040 809a 	bne.w	80069f8 <_dtoa_r+0x538>
 80068c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c8:	2200      	movs	r2, #0
 80068ca:	4b4a      	ldr	r3, [pc, #296]	@ (80069f4 <_dtoa_r+0x534>)
 80068cc:	f7f9 fc56 	bl	800017c <__aeabi_dsub>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068d8:	462a      	mov	r2, r5
 80068da:	4633      	mov	r3, r6
 80068dc:	f7fa f896 	bl	8000a0c <__aeabi_dcmpgt>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	f040 828e 	bne.w	8006e02 <_dtoa_r+0x942>
 80068e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ea:	462a      	mov	r2, r5
 80068ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068f0:	f7fa f86e 	bl	80009d0 <__aeabi_dcmplt>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f040 8127 	bne.w	8006b48 <_dtoa_r+0x688>
 80068fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006902:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006904:	2b00      	cmp	r3, #0
 8006906:	f2c0 8163 	blt.w	8006bd0 <_dtoa_r+0x710>
 800690a:	2f0e      	cmp	r7, #14
 800690c:	f300 8160 	bgt.w	8006bd0 <_dtoa_r+0x710>
 8006910:	4b33      	ldr	r3, [pc, #204]	@ (80069e0 <_dtoa_r+0x520>)
 8006912:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006916:	e9d3 3400 	ldrd	r3, r4, [r3]
 800691a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800691e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006920:	2b00      	cmp	r3, #0
 8006922:	da03      	bge.n	800692c <_dtoa_r+0x46c>
 8006924:	9b07      	ldr	r3, [sp, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f340 8100 	ble.w	8006b2c <_dtoa_r+0x66c>
 800692c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006930:	4656      	mov	r6, sl
 8006932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006936:	4620      	mov	r0, r4
 8006938:	4629      	mov	r1, r5
 800693a:	f7f9 ff01 	bl	8000740 <__aeabi_ddiv>
 800693e:	f7fa f885 	bl	8000a4c <__aeabi_d2iz>
 8006942:	4680      	mov	r8, r0
 8006944:	f7f9 fd68 	bl	8000418 <__aeabi_i2d>
 8006948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800694c:	f7f9 fdce 	bl	80004ec <__aeabi_dmul>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4620      	mov	r0, r4
 8006956:	4629      	mov	r1, r5
 8006958:	f7f9 fc10 	bl	800017c <__aeabi_dsub>
 800695c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006960:	9d07      	ldr	r5, [sp, #28]
 8006962:	f806 4b01 	strb.w	r4, [r6], #1
 8006966:	eba6 040a 	sub.w	r4, r6, sl
 800696a:	42a5      	cmp	r5, r4
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	f040 8116 	bne.w	8006ba0 <_dtoa_r+0x6e0>
 8006974:	f7f9 fc04 	bl	8000180 <__adddf3>
 8006978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800697c:	4604      	mov	r4, r0
 800697e:	460d      	mov	r5, r1
 8006980:	f7fa f844 	bl	8000a0c <__aeabi_dcmpgt>
 8006984:	2800      	cmp	r0, #0
 8006986:	f040 80f8 	bne.w	8006b7a <_dtoa_r+0x6ba>
 800698a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	f7fa f813 	bl	80009bc <__aeabi_dcmpeq>
 8006996:	b118      	cbz	r0, 80069a0 <_dtoa_r+0x4e0>
 8006998:	f018 0f01 	tst.w	r8, #1
 800699c:	f040 80ed 	bne.w	8006b7a <_dtoa_r+0x6ba>
 80069a0:	4649      	mov	r1, r9
 80069a2:	4658      	mov	r0, fp
 80069a4:	f000 fc92 	bl	80072cc <_Bfree>
 80069a8:	2300      	movs	r3, #0
 80069aa:	7033      	strb	r3, [r6, #0]
 80069ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80069ae:	3701      	adds	r7, #1
 80069b0:	601f      	str	r7, [r3, #0]
 80069b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8320 	beq.w	8006ffa <_dtoa_r+0xb3a>
 80069ba:	601e      	str	r6, [r3, #0]
 80069bc:	e31d      	b.n	8006ffa <_dtoa_r+0xb3a>
 80069be:	07e2      	lsls	r2, r4, #31
 80069c0:	d505      	bpl.n	80069ce <_dtoa_r+0x50e>
 80069c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069c6:	f7f9 fd91 	bl	80004ec <__aeabi_dmul>
 80069ca:	2301      	movs	r3, #1
 80069cc:	3601      	adds	r6, #1
 80069ce:	1064      	asrs	r4, r4, #1
 80069d0:	3508      	adds	r5, #8
 80069d2:	e73f      	b.n	8006854 <_dtoa_r+0x394>
 80069d4:	2602      	movs	r6, #2
 80069d6:	e742      	b.n	800685e <_dtoa_r+0x39e>
 80069d8:	9c07      	ldr	r4, [sp, #28]
 80069da:	9704      	str	r7, [sp, #16]
 80069dc:	e761      	b.n	80068a2 <_dtoa_r+0x3e2>
 80069de:	bf00      	nop
 80069e0:	0800a470 	.word	0x0800a470
 80069e4:	0800a448 	.word	0x0800a448
 80069e8:	3ff00000 	.word	0x3ff00000
 80069ec:	40240000 	.word	0x40240000
 80069f0:	401c0000 	.word	0x401c0000
 80069f4:	40140000 	.word	0x40140000
 80069f8:	4b70      	ldr	r3, [pc, #448]	@ (8006bbc <_dtoa_r+0x6fc>)
 80069fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a04:	4454      	add	r4, sl
 8006a06:	2900      	cmp	r1, #0
 8006a08:	d045      	beq.n	8006a96 <_dtoa_r+0x5d6>
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	496c      	ldr	r1, [pc, #432]	@ (8006bc0 <_dtoa_r+0x700>)
 8006a0e:	f7f9 fe97 	bl	8000740 <__aeabi_ddiv>
 8006a12:	4633      	mov	r3, r6
 8006a14:	462a      	mov	r2, r5
 8006a16:	f7f9 fbb1 	bl	800017c <__aeabi_dsub>
 8006a1a:	4656      	mov	r6, sl
 8006a1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a24:	f7fa f812 	bl	8000a4c <__aeabi_d2iz>
 8006a28:	4605      	mov	r5, r0
 8006a2a:	f7f9 fcf5 	bl	8000418 <__aeabi_i2d>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a36:	f7f9 fba1 	bl	800017c <__aeabi_dsub>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	3530      	adds	r5, #48	@ 0x30
 8006a40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a48:	f806 5b01 	strb.w	r5, [r6], #1
 8006a4c:	f7f9 ffc0 	bl	80009d0 <__aeabi_dcmplt>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d163      	bne.n	8006b1c <_dtoa_r+0x65c>
 8006a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a58:	2000      	movs	r0, #0
 8006a5a:	495a      	ldr	r1, [pc, #360]	@ (8006bc4 <_dtoa_r+0x704>)
 8006a5c:	f7f9 fb8e 	bl	800017c <__aeabi_dsub>
 8006a60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a64:	f7f9 ffb4 	bl	80009d0 <__aeabi_dcmplt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f040 8087 	bne.w	8006b7c <_dtoa_r+0x6bc>
 8006a6e:	42a6      	cmp	r6, r4
 8006a70:	f43f af43 	beq.w	80068fa <_dtoa_r+0x43a>
 8006a74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4b53      	ldr	r3, [pc, #332]	@ (8006bc8 <_dtoa_r+0x708>)
 8006a7c:	f7f9 fd36 	bl	80004ec <__aeabi_dmul>
 8006a80:	2200      	movs	r2, #0
 8006a82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8006bc8 <_dtoa_r+0x708>)
 8006a8c:	f7f9 fd2e 	bl	80004ec <__aeabi_dmul>
 8006a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a94:	e7c4      	b.n	8006a20 <_dtoa_r+0x560>
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f7f9 fd27 	bl	80004ec <__aeabi_dmul>
 8006a9e:	4656      	mov	r6, sl
 8006aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006aa4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aaa:	f7f9 ffcf 	bl	8000a4c <__aeabi_d2iz>
 8006aae:	4605      	mov	r5, r0
 8006ab0:	f7f9 fcb2 	bl	8000418 <__aeabi_i2d>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006abc:	f7f9 fb5e 	bl	800017c <__aeabi_dsub>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	3530      	adds	r5, #48	@ 0x30
 8006ac6:	f806 5b01 	strb.w	r5, [r6], #1
 8006aca:	42a6      	cmp	r6, r4
 8006acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	d124      	bne.n	8006b20 <_dtoa_r+0x660>
 8006ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ada:	4b39      	ldr	r3, [pc, #228]	@ (8006bc0 <_dtoa_r+0x700>)
 8006adc:	f7f9 fb50 	bl	8000180 <__adddf3>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae8:	f7f9 ff90 	bl	8000a0c <__aeabi_dcmpgt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d145      	bne.n	8006b7c <_dtoa_r+0x6bc>
 8006af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006af4:	2000      	movs	r0, #0
 8006af6:	4932      	ldr	r1, [pc, #200]	@ (8006bc0 <_dtoa_r+0x700>)
 8006af8:	f7f9 fb40 	bl	800017c <__aeabi_dsub>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b04:	f7f9 ff64 	bl	80009d0 <__aeabi_dcmplt>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f43f aef6 	beq.w	80068fa <_dtoa_r+0x43a>
 8006b0e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b10:	1e73      	subs	r3, r6, #1
 8006b12:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b18:	2b30      	cmp	r3, #48	@ 0x30
 8006b1a:	d0f8      	beq.n	8006b0e <_dtoa_r+0x64e>
 8006b1c:	9f04      	ldr	r7, [sp, #16]
 8006b1e:	e73f      	b.n	80069a0 <_dtoa_r+0x4e0>
 8006b20:	4b29      	ldr	r3, [pc, #164]	@ (8006bc8 <_dtoa_r+0x708>)
 8006b22:	f7f9 fce3 	bl	80004ec <__aeabi_dmul>
 8006b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2a:	e7bc      	b.n	8006aa6 <_dtoa_r+0x5e6>
 8006b2c:	d10c      	bne.n	8006b48 <_dtoa_r+0x688>
 8006b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b32:	2200      	movs	r2, #0
 8006b34:	4b25      	ldr	r3, [pc, #148]	@ (8006bcc <_dtoa_r+0x70c>)
 8006b36:	f7f9 fcd9 	bl	80004ec <__aeabi_dmul>
 8006b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b3e:	f7f9 ff5b 	bl	80009f8 <__aeabi_dcmpge>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f000 815b 	beq.w	8006dfe <_dtoa_r+0x93e>
 8006b48:	2400      	movs	r4, #0
 8006b4a:	4625      	mov	r5, r4
 8006b4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b4e:	4656      	mov	r6, sl
 8006b50:	43db      	mvns	r3, r3
 8006b52:	9304      	str	r3, [sp, #16]
 8006b54:	2700      	movs	r7, #0
 8006b56:	4621      	mov	r1, r4
 8006b58:	4658      	mov	r0, fp
 8006b5a:	f000 fbb7 	bl	80072cc <_Bfree>
 8006b5e:	2d00      	cmp	r5, #0
 8006b60:	d0dc      	beq.n	8006b1c <_dtoa_r+0x65c>
 8006b62:	b12f      	cbz	r7, 8006b70 <_dtoa_r+0x6b0>
 8006b64:	42af      	cmp	r7, r5
 8006b66:	d003      	beq.n	8006b70 <_dtoa_r+0x6b0>
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4658      	mov	r0, fp
 8006b6c:	f000 fbae 	bl	80072cc <_Bfree>
 8006b70:	4629      	mov	r1, r5
 8006b72:	4658      	mov	r0, fp
 8006b74:	f000 fbaa 	bl	80072cc <_Bfree>
 8006b78:	e7d0      	b.n	8006b1c <_dtoa_r+0x65c>
 8006b7a:	9704      	str	r7, [sp, #16]
 8006b7c:	4633      	mov	r3, r6
 8006b7e:	461e      	mov	r6, r3
 8006b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b84:	2a39      	cmp	r2, #57	@ 0x39
 8006b86:	d107      	bne.n	8006b98 <_dtoa_r+0x6d8>
 8006b88:	459a      	cmp	sl, r3
 8006b8a:	d1f8      	bne.n	8006b7e <_dtoa_r+0x6be>
 8006b8c:	9a04      	ldr	r2, [sp, #16]
 8006b8e:	3201      	adds	r2, #1
 8006b90:	9204      	str	r2, [sp, #16]
 8006b92:	2230      	movs	r2, #48	@ 0x30
 8006b94:	f88a 2000 	strb.w	r2, [sl]
 8006b98:	781a      	ldrb	r2, [r3, #0]
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e7bd      	b.n	8006b1c <_dtoa_r+0x65c>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	4b09      	ldr	r3, [pc, #36]	@ (8006bc8 <_dtoa_r+0x708>)
 8006ba4:	f7f9 fca2 	bl	80004ec <__aeabi_dmul>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4604      	mov	r4, r0
 8006bae:	460d      	mov	r5, r1
 8006bb0:	f7f9 ff04 	bl	80009bc <__aeabi_dcmpeq>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f43f aebc 	beq.w	8006932 <_dtoa_r+0x472>
 8006bba:	e6f1      	b.n	80069a0 <_dtoa_r+0x4e0>
 8006bbc:	0800a470 	.word	0x0800a470
 8006bc0:	3fe00000 	.word	0x3fe00000
 8006bc4:	3ff00000 	.word	0x3ff00000
 8006bc8:	40240000 	.word	0x40240000
 8006bcc:	40140000 	.word	0x40140000
 8006bd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bd2:	2a00      	cmp	r2, #0
 8006bd4:	f000 80db 	beq.w	8006d8e <_dtoa_r+0x8ce>
 8006bd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006bda:	2a01      	cmp	r2, #1
 8006bdc:	f300 80bf 	bgt.w	8006d5e <_dtoa_r+0x89e>
 8006be0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	f000 80b7 	beq.w	8006d56 <_dtoa_r+0x896>
 8006be8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bec:	4646      	mov	r6, r8
 8006bee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	441a      	add	r2, r3
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	4498      	add	r8, r3
 8006bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bfc:	f000 fc64 	bl	80074c8 <__i2b>
 8006c00:	4605      	mov	r5, r0
 8006c02:	b15e      	cbz	r6, 8006c1c <_dtoa_r+0x75c>
 8006c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dd08      	ble.n	8006c1c <_dtoa_r+0x75c>
 8006c0a:	42b3      	cmp	r3, r6
 8006c0c:	bfa8      	it	ge
 8006c0e:	4633      	movge	r3, r6
 8006c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c12:	eba8 0803 	sub.w	r8, r8, r3
 8006c16:	1af6      	subs	r6, r6, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c1e:	b1f3      	cbz	r3, 8006c5e <_dtoa_r+0x79e>
 8006c20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80b7 	beq.w	8006d96 <_dtoa_r+0x8d6>
 8006c28:	b18c      	cbz	r4, 8006c4e <_dtoa_r+0x78e>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4658      	mov	r0, fp
 8006c30:	f000 fd08 	bl	8007644 <__pow5mult>
 8006c34:	464a      	mov	r2, r9
 8006c36:	4601      	mov	r1, r0
 8006c38:	4605      	mov	r5, r0
 8006c3a:	4658      	mov	r0, fp
 8006c3c:	f000 fc5a 	bl	80074f4 <__multiply>
 8006c40:	4649      	mov	r1, r9
 8006c42:	9004      	str	r0, [sp, #16]
 8006c44:	4658      	mov	r0, fp
 8006c46:	f000 fb41 	bl	80072cc <_Bfree>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	4699      	mov	r9, r3
 8006c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c50:	1b1a      	subs	r2, r3, r4
 8006c52:	d004      	beq.n	8006c5e <_dtoa_r+0x79e>
 8006c54:	4649      	mov	r1, r9
 8006c56:	4658      	mov	r0, fp
 8006c58:	f000 fcf4 	bl	8007644 <__pow5mult>
 8006c5c:	4681      	mov	r9, r0
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4658      	mov	r0, fp
 8006c62:	f000 fc31 	bl	80074c8 <__i2b>
 8006c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c68:	4604      	mov	r4, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 81c9 	beq.w	8007002 <_dtoa_r+0xb42>
 8006c70:	461a      	mov	r2, r3
 8006c72:	4601      	mov	r1, r0
 8006c74:	4658      	mov	r0, fp
 8006c76:	f000 fce5 	bl	8007644 <__pow5mult>
 8006c7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	f300 808f 	bgt.w	8006da2 <_dtoa_r+0x8e2>
 8006c84:	9b02      	ldr	r3, [sp, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 8087 	bne.w	8006d9a <_dtoa_r+0x8da>
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f040 8083 	bne.w	8006d9e <_dtoa_r+0x8de>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c9e:	0d1b      	lsrs	r3, r3, #20
 8006ca0:	051b      	lsls	r3, r3, #20
 8006ca2:	b12b      	cbz	r3, 8006cb0 <_dtoa_r+0x7f0>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca6:	f108 0801 	add.w	r8, r8, #1
 8006caa:	3301      	adds	r3, #1
 8006cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cae:	2301      	movs	r3, #1
 8006cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 81aa 	beq.w	800700e <_dtoa_r+0xb4e>
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cc0:	6918      	ldr	r0, [r3, #16]
 8006cc2:	f000 fbb5 	bl	8007430 <__hi0bits>
 8006cc6:	f1c0 0020 	rsb	r0, r0, #32
 8006cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ccc:	4418      	add	r0, r3
 8006cce:	f010 001f 	ands.w	r0, r0, #31
 8006cd2:	d071      	beq.n	8006db8 <_dtoa_r+0x8f8>
 8006cd4:	f1c0 0320 	rsb	r3, r0, #32
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	dd65      	ble.n	8006da8 <_dtoa_r+0x8e8>
 8006cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cde:	f1c0 001c 	rsb	r0, r0, #28
 8006ce2:	4403      	add	r3, r0
 8006ce4:	4480      	add	r8, r0
 8006ce6:	4406      	add	r6, r0
 8006ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cea:	f1b8 0f00 	cmp.w	r8, #0
 8006cee:	dd05      	ble.n	8006cfc <_dtoa_r+0x83c>
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4642      	mov	r2, r8
 8006cf4:	4658      	mov	r0, fp
 8006cf6:	f000 fcff 	bl	80076f8 <__lshift>
 8006cfa:	4681      	mov	r9, r0
 8006cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	dd05      	ble.n	8006d0e <_dtoa_r+0x84e>
 8006d02:	4621      	mov	r1, r4
 8006d04:	461a      	mov	r2, r3
 8006d06:	4658      	mov	r0, fp
 8006d08:	f000 fcf6 	bl	80076f8 <__lshift>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d053      	beq.n	8006dbc <_dtoa_r+0x8fc>
 8006d14:	4621      	mov	r1, r4
 8006d16:	4648      	mov	r0, r9
 8006d18:	f000 fd5a 	bl	80077d0 <__mcmp>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	da4d      	bge.n	8006dbc <_dtoa_r+0x8fc>
 8006d20:	1e7b      	subs	r3, r7, #1
 8006d22:	4649      	mov	r1, r9
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	220a      	movs	r2, #10
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4658      	mov	r0, fp
 8006d2c:	f000 faf0 	bl	8007310 <__multadd>
 8006d30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d32:	4681      	mov	r9, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 816c 	beq.w	8007012 <_dtoa_r+0xb52>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	220a      	movs	r2, #10
 8006d40:	4658      	mov	r0, fp
 8006d42:	f000 fae5 	bl	8007310 <__multadd>
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	dc61      	bgt.n	8006e12 <_dtoa_r+0x952>
 8006d4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	dc3b      	bgt.n	8006dcc <_dtoa_r+0x90c>
 8006d54:	e05d      	b.n	8006e12 <_dtoa_r+0x952>
 8006d56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d58:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d5c:	e746      	b.n	8006bec <_dtoa_r+0x72c>
 8006d5e:	9b07      	ldr	r3, [sp, #28]
 8006d60:	1e5c      	subs	r4, r3, #1
 8006d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	bfbf      	itttt	lt
 8006d68:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d6a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006d6c:	1ae3      	sublt	r3, r4, r3
 8006d6e:	18d2      	addlt	r2, r2, r3
 8006d70:	bfa8      	it	ge
 8006d72:	1b1c      	subge	r4, r3, r4
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	bfbe      	ittt	lt
 8006d78:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d7a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006d7c:	2400      	movlt	r4, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfb5      	itete	lt
 8006d82:	eba8 0603 	sublt.w	r6, r8, r3
 8006d86:	4646      	movge	r6, r8
 8006d88:	2300      	movlt	r3, #0
 8006d8a:	9b07      	ldrge	r3, [sp, #28]
 8006d8c:	e730      	b.n	8006bf0 <_dtoa_r+0x730>
 8006d8e:	4646      	mov	r6, r8
 8006d90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d94:	e735      	b.n	8006c02 <_dtoa_r+0x742>
 8006d96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d98:	e75c      	b.n	8006c54 <_dtoa_r+0x794>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e788      	b.n	8006cb0 <_dtoa_r+0x7f0>
 8006d9e:	9b02      	ldr	r3, [sp, #8]
 8006da0:	e786      	b.n	8006cb0 <_dtoa_r+0x7f0>
 8006da2:	2300      	movs	r3, #0
 8006da4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006da6:	e788      	b.n	8006cba <_dtoa_r+0x7fa>
 8006da8:	d09f      	beq.n	8006cea <_dtoa_r+0x82a>
 8006daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dac:	331c      	adds	r3, #28
 8006dae:	441a      	add	r2, r3
 8006db0:	4498      	add	r8, r3
 8006db2:	441e      	add	r6, r3
 8006db4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006db6:	e798      	b.n	8006cea <_dtoa_r+0x82a>
 8006db8:	4603      	mov	r3, r0
 8006dba:	e7f6      	b.n	8006daa <_dtoa_r+0x8ea>
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	9704      	str	r7, [sp, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dc20      	bgt.n	8006e06 <_dtoa_r+0x946>
 8006dc4:	9308      	str	r3, [sp, #32]
 8006dc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	dd1e      	ble.n	8006e0a <_dtoa_r+0x94a>
 8006dcc:	9b08      	ldr	r3, [sp, #32]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f47f aebc 	bne.w	8006b4c <_dtoa_r+0x68c>
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	2205      	movs	r2, #5
 8006dd8:	4658      	mov	r0, fp
 8006dda:	f000 fa99 	bl	8007310 <__multadd>
 8006dde:	4601      	mov	r1, r0
 8006de0:	4604      	mov	r4, r0
 8006de2:	4648      	mov	r0, r9
 8006de4:	f000 fcf4 	bl	80077d0 <__mcmp>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f77f aeaf 	ble.w	8006b4c <_dtoa_r+0x68c>
 8006dee:	2331      	movs	r3, #49	@ 0x31
 8006df0:	4656      	mov	r6, sl
 8006df2:	f806 3b01 	strb.w	r3, [r6], #1
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	e6aa      	b.n	8006b54 <_dtoa_r+0x694>
 8006dfe:	9c07      	ldr	r4, [sp, #28]
 8006e00:	9704      	str	r7, [sp, #16]
 8006e02:	4625      	mov	r5, r4
 8006e04:	e7f3      	b.n	8006dee <_dtoa_r+0x92e>
 8006e06:	9b07      	ldr	r3, [sp, #28]
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8104 	beq.w	800701a <_dtoa_r+0xb5a>
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	dd05      	ble.n	8006e22 <_dtoa_r+0x962>
 8006e16:	4629      	mov	r1, r5
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4658      	mov	r0, fp
 8006e1c:	f000 fc6c 	bl	80076f8 <__lshift>
 8006e20:	4605      	mov	r5, r0
 8006e22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d05a      	beq.n	8006ede <_dtoa_r+0xa1e>
 8006e28:	4658      	mov	r0, fp
 8006e2a:	6869      	ldr	r1, [r5, #4]
 8006e2c:	f000 fa0e 	bl	800724c <_Balloc>
 8006e30:	4606      	mov	r6, r0
 8006e32:	b928      	cbnz	r0, 8006e40 <_dtoa_r+0x980>
 8006e34:	4602      	mov	r2, r0
 8006e36:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e3a:	4b83      	ldr	r3, [pc, #524]	@ (8007048 <_dtoa_r+0xb88>)
 8006e3c:	f7ff bb54 	b.w	80064e8 <_dtoa_r+0x28>
 8006e40:	692a      	ldr	r2, [r5, #16]
 8006e42:	f105 010c 	add.w	r1, r5, #12
 8006e46:	3202      	adds	r2, #2
 8006e48:	0092      	lsls	r2, r2, #2
 8006e4a:	300c      	adds	r0, #12
 8006e4c:	f002 fad4 	bl	80093f8 <memcpy>
 8006e50:	2201      	movs	r2, #1
 8006e52:	4631      	mov	r1, r6
 8006e54:	4658      	mov	r0, fp
 8006e56:	f000 fc4f 	bl	80076f8 <__lshift>
 8006e5a:	462f      	mov	r7, r5
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	f10a 0301 	add.w	r3, sl, #1
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	9b08      	ldr	r3, [sp, #32]
 8006e66:	4453      	add	r3, sl
 8006e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e6a:	9b02      	ldr	r3, [sp, #8]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e72:	9b07      	ldr	r3, [sp, #28]
 8006e74:	4621      	mov	r1, r4
 8006e76:	3b01      	subs	r3, #1
 8006e78:	4648      	mov	r0, r9
 8006e7a:	9302      	str	r3, [sp, #8]
 8006e7c:	f7ff fa96 	bl	80063ac <quorem>
 8006e80:	4639      	mov	r1, r7
 8006e82:	9008      	str	r0, [sp, #32]
 8006e84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e88:	4648      	mov	r0, r9
 8006e8a:	f000 fca1 	bl	80077d0 <__mcmp>
 8006e8e:	462a      	mov	r2, r5
 8006e90:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e92:	4621      	mov	r1, r4
 8006e94:	4658      	mov	r0, fp
 8006e96:	f000 fcb7 	bl	8007808 <__mdiff>
 8006e9a:	68c2      	ldr	r2, [r0, #12]
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	bb02      	cbnz	r2, 8006ee2 <_dtoa_r+0xa22>
 8006ea0:	4601      	mov	r1, r0
 8006ea2:	4648      	mov	r0, r9
 8006ea4:	f000 fc94 	bl	80077d0 <__mcmp>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4658      	mov	r0, fp
 8006eae:	920c      	str	r2, [sp, #48]	@ 0x30
 8006eb0:	f000 fa0c 	bl	80072cc <_Bfree>
 8006eb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006eb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006eb8:	9e07      	ldr	r6, [sp, #28]
 8006eba:	ea43 0102 	orr.w	r1, r3, r2
 8006ebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec0:	4319      	orrs	r1, r3
 8006ec2:	d110      	bne.n	8006ee6 <_dtoa_r+0xa26>
 8006ec4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ec8:	d029      	beq.n	8006f1e <_dtoa_r+0xa5e>
 8006eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd02      	ble.n	8006ed6 <_dtoa_r+0xa16>
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	f883 8000 	strb.w	r8, [r3]
 8006edc:	e63b      	b.n	8006b56 <_dtoa_r+0x696>
 8006ede:	4628      	mov	r0, r5
 8006ee0:	e7bb      	b.n	8006e5a <_dtoa_r+0x99a>
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	e7e1      	b.n	8006eaa <_dtoa_r+0x9ea>
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	db04      	blt.n	8006ef6 <_dtoa_r+0xa36>
 8006eec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	d120      	bne.n	8006f38 <_dtoa_r+0xa78>
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	dded      	ble.n	8006ed6 <_dtoa_r+0xa16>
 8006efa:	4649      	mov	r1, r9
 8006efc:	2201      	movs	r2, #1
 8006efe:	4658      	mov	r0, fp
 8006f00:	f000 fbfa 	bl	80076f8 <__lshift>
 8006f04:	4621      	mov	r1, r4
 8006f06:	4681      	mov	r9, r0
 8006f08:	f000 fc62 	bl	80077d0 <__mcmp>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	dc03      	bgt.n	8006f18 <_dtoa_r+0xa58>
 8006f10:	d1e1      	bne.n	8006ed6 <_dtoa_r+0xa16>
 8006f12:	f018 0f01 	tst.w	r8, #1
 8006f16:	d0de      	beq.n	8006ed6 <_dtoa_r+0xa16>
 8006f18:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f1c:	d1d8      	bne.n	8006ed0 <_dtoa_r+0xa10>
 8006f1e:	2339      	movs	r3, #57	@ 0x39
 8006f20:	9a02      	ldr	r2, [sp, #8]
 8006f22:	7013      	strb	r3, [r2, #0]
 8006f24:	4633      	mov	r3, r6
 8006f26:	461e      	mov	r6, r3
 8006f28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	2a39      	cmp	r2, #57	@ 0x39
 8006f30:	d052      	beq.n	8006fd8 <_dtoa_r+0xb18>
 8006f32:	3201      	adds	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	e60e      	b.n	8006b56 <_dtoa_r+0x696>
 8006f38:	2a00      	cmp	r2, #0
 8006f3a:	dd07      	ble.n	8006f4c <_dtoa_r+0xa8c>
 8006f3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f40:	d0ed      	beq.n	8006f1e <_dtoa_r+0xa5e>
 8006f42:	9a02      	ldr	r2, [sp, #8]
 8006f44:	f108 0301 	add.w	r3, r8, #1
 8006f48:	7013      	strb	r3, [r2, #0]
 8006f4a:	e604      	b.n	8006b56 <_dtoa_r+0x696>
 8006f4c:	9b07      	ldr	r3, [sp, #28]
 8006f4e:	9a07      	ldr	r2, [sp, #28]
 8006f50:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d028      	beq.n	8006fac <_dtoa_r+0xaec>
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	220a      	movs	r2, #10
 8006f60:	4658      	mov	r0, fp
 8006f62:	f000 f9d5 	bl	8007310 <__multadd>
 8006f66:	42af      	cmp	r7, r5
 8006f68:	4681      	mov	r9, r0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	f04f 020a 	mov.w	r2, #10
 8006f72:	4639      	mov	r1, r7
 8006f74:	4658      	mov	r0, fp
 8006f76:	d107      	bne.n	8006f88 <_dtoa_r+0xac8>
 8006f78:	f000 f9ca 	bl	8007310 <__multadd>
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	4605      	mov	r5, r0
 8006f80:	9b07      	ldr	r3, [sp, #28]
 8006f82:	3301      	adds	r3, #1
 8006f84:	9307      	str	r3, [sp, #28]
 8006f86:	e774      	b.n	8006e72 <_dtoa_r+0x9b2>
 8006f88:	f000 f9c2 	bl	8007310 <__multadd>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4607      	mov	r7, r0
 8006f90:	2300      	movs	r3, #0
 8006f92:	220a      	movs	r2, #10
 8006f94:	4658      	mov	r0, fp
 8006f96:	f000 f9bb 	bl	8007310 <__multadd>
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	e7f0      	b.n	8006f80 <_dtoa_r+0xac0>
 8006f9e:	9b08      	ldr	r3, [sp, #32]
 8006fa0:	2700      	movs	r7, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfcc      	ite	gt
 8006fa6:	461e      	movgt	r6, r3
 8006fa8:	2601      	movle	r6, #1
 8006faa:	4456      	add	r6, sl
 8006fac:	4649      	mov	r1, r9
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	f000 fba1 	bl	80076f8 <__lshift>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4681      	mov	r9, r0
 8006fba:	f000 fc09 	bl	80077d0 <__mcmp>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	dcb0      	bgt.n	8006f24 <_dtoa_r+0xa64>
 8006fc2:	d102      	bne.n	8006fca <_dtoa_r+0xb0a>
 8006fc4:	f018 0f01 	tst.w	r8, #1
 8006fc8:	d1ac      	bne.n	8006f24 <_dtoa_r+0xa64>
 8006fca:	4633      	mov	r3, r6
 8006fcc:	461e      	mov	r6, r3
 8006fce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd2:	2a30      	cmp	r2, #48	@ 0x30
 8006fd4:	d0fa      	beq.n	8006fcc <_dtoa_r+0xb0c>
 8006fd6:	e5be      	b.n	8006b56 <_dtoa_r+0x696>
 8006fd8:	459a      	cmp	sl, r3
 8006fda:	d1a4      	bne.n	8006f26 <_dtoa_r+0xa66>
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	9304      	str	r3, [sp, #16]
 8006fe2:	2331      	movs	r3, #49	@ 0x31
 8006fe4:	f88a 3000 	strb.w	r3, [sl]
 8006fe8:	e5b5      	b.n	8006b56 <_dtoa_r+0x696>
 8006fea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800704c <_dtoa_r+0xb8c>
 8006ff0:	b11b      	cbz	r3, 8006ffa <_dtoa_r+0xb3a>
 8006ff2:	f10a 0308 	add.w	r3, sl, #8
 8006ff6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	b017      	add	sp, #92	@ 0x5c
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007004:	2b01      	cmp	r3, #1
 8007006:	f77f ae3d 	ble.w	8006c84 <_dtoa_r+0x7c4>
 800700a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800700c:	930a      	str	r3, [sp, #40]	@ 0x28
 800700e:	2001      	movs	r0, #1
 8007010:	e65b      	b.n	8006cca <_dtoa_r+0x80a>
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f77f aed6 	ble.w	8006dc6 <_dtoa_r+0x906>
 800701a:	4656      	mov	r6, sl
 800701c:	4621      	mov	r1, r4
 800701e:	4648      	mov	r0, r9
 8007020:	f7ff f9c4 	bl	80063ac <quorem>
 8007024:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	f806 8b01 	strb.w	r8, [r6], #1
 800702e:	eba6 020a 	sub.w	r2, r6, sl
 8007032:	4293      	cmp	r3, r2
 8007034:	ddb3      	ble.n	8006f9e <_dtoa_r+0xade>
 8007036:	4649      	mov	r1, r9
 8007038:	2300      	movs	r3, #0
 800703a:	220a      	movs	r2, #10
 800703c:	4658      	mov	r0, fp
 800703e:	f000 f967 	bl	8007310 <__multadd>
 8007042:	4681      	mov	r9, r0
 8007044:	e7ea      	b.n	800701c <_dtoa_r+0xb5c>
 8007046:	bf00      	nop
 8007048:	0800a3cd 	.word	0x0800a3cd
 800704c:	0800a351 	.word	0x0800a351

08007050 <_free_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	2900      	cmp	r1, #0
 8007056:	d040      	beq.n	80070da <_free_r+0x8a>
 8007058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800705c:	1f0c      	subs	r4, r1, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb8      	it	lt
 8007062:	18e4      	addlt	r4, r4, r3
 8007064:	f000 f8e6 	bl	8007234 <__malloc_lock>
 8007068:	4a1c      	ldr	r2, [pc, #112]	@ (80070dc <_free_r+0x8c>)
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	b933      	cbnz	r3, 800707c <_free_r+0x2c>
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	4628      	mov	r0, r5
 8007074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007078:	f000 b8e2 	b.w	8007240 <__malloc_unlock>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d908      	bls.n	8007092 <_free_r+0x42>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	1821      	adds	r1, r4, r0
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1809      	addeq	r1, r1, r0
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	e7ed      	b.n	800706e <_free_r+0x1e>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x4c>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x42>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1850      	adds	r0, r2, r1
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x6c>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	4401      	add	r1, r0
 80070a8:	1850      	adds	r0, r2, r1
 80070aa:	4283      	cmp	r3, r0
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1e0      	bne.n	8007072 <_free_r+0x22>
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4408      	add	r0, r1
 80070b6:	6010      	str	r0, [r2, #0]
 80070b8:	6053      	str	r3, [r2, #4]
 80070ba:	e7da      	b.n	8007072 <_free_r+0x22>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x74>
 80070be:	230c      	movs	r3, #12
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	e7d6      	b.n	8007072 <_free_r+0x22>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	1821      	adds	r1, r4, r0
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf01      	itttt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	1809      	addeq	r1, r1, r0
 80070d2:	6021      	streq	r1, [r4, #0]
 80070d4:	6063      	str	r3, [r4, #4]
 80070d6:	6054      	str	r4, [r2, #4]
 80070d8:	e7cb      	b.n	8007072 <_free_r+0x22>
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	2000056c 	.word	0x2000056c

080070e0 <malloc>:
 80070e0:	4b02      	ldr	r3, [pc, #8]	@ (80070ec <malloc+0xc>)
 80070e2:	4601      	mov	r1, r0
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f000 b825 	b.w	8007134 <_malloc_r>
 80070ea:	bf00      	nop
 80070ec:	20000024 	.word	0x20000024

080070f0 <sbrk_aligned>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007130 <sbrk_aligned+0x40>)
 80070f4:	460c      	mov	r4, r1
 80070f6:	6831      	ldr	r1, [r6, #0]
 80070f8:	4605      	mov	r5, r0
 80070fa:	b911      	cbnz	r1, 8007102 <sbrk_aligned+0x12>
 80070fc:	f002 f96c 	bl	80093d8 <_sbrk_r>
 8007100:	6030      	str	r0, [r6, #0]
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	f002 f967 	bl	80093d8 <_sbrk_r>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d103      	bne.n	8007116 <sbrk_aligned+0x26>
 800710e:	f04f 34ff 	mov.w	r4, #4294967295
 8007112:	4620      	mov	r0, r4
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	1cc4      	adds	r4, r0, #3
 8007118:	f024 0403 	bic.w	r4, r4, #3
 800711c:	42a0      	cmp	r0, r4
 800711e:	d0f8      	beq.n	8007112 <sbrk_aligned+0x22>
 8007120:	1a21      	subs	r1, r4, r0
 8007122:	4628      	mov	r0, r5
 8007124:	f002 f958 	bl	80093d8 <_sbrk_r>
 8007128:	3001      	adds	r0, #1
 800712a:	d1f2      	bne.n	8007112 <sbrk_aligned+0x22>
 800712c:	e7ef      	b.n	800710e <sbrk_aligned+0x1e>
 800712e:	bf00      	nop
 8007130:	20000568 	.word	0x20000568

08007134 <_malloc_r>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	1ccd      	adds	r5, r1, #3
 800713a:	f025 0503 	bic.w	r5, r5, #3
 800713e:	3508      	adds	r5, #8
 8007140:	2d0c      	cmp	r5, #12
 8007142:	bf38      	it	cc
 8007144:	250c      	movcc	r5, #12
 8007146:	2d00      	cmp	r5, #0
 8007148:	4606      	mov	r6, r0
 800714a:	db01      	blt.n	8007150 <_malloc_r+0x1c>
 800714c:	42a9      	cmp	r1, r5
 800714e:	d904      	bls.n	800715a <_malloc_r+0x26>
 8007150:	230c      	movs	r3, #12
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	2000      	movs	r0, #0
 8007156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800715a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007230 <_malloc_r+0xfc>
 800715e:	f000 f869 	bl	8007234 <__malloc_lock>
 8007162:	f8d8 3000 	ldr.w	r3, [r8]
 8007166:	461c      	mov	r4, r3
 8007168:	bb44      	cbnz	r4, 80071bc <_malloc_r+0x88>
 800716a:	4629      	mov	r1, r5
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff ffbf 	bl	80070f0 <sbrk_aligned>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	4604      	mov	r4, r0
 8007176:	d158      	bne.n	800722a <_malloc_r+0xf6>
 8007178:	f8d8 4000 	ldr.w	r4, [r8]
 800717c:	4627      	mov	r7, r4
 800717e:	2f00      	cmp	r7, #0
 8007180:	d143      	bne.n	800720a <_malloc_r+0xd6>
 8007182:	2c00      	cmp	r4, #0
 8007184:	d04b      	beq.n	800721e <_malloc_r+0xea>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	4639      	mov	r1, r7
 800718a:	4630      	mov	r0, r6
 800718c:	eb04 0903 	add.w	r9, r4, r3
 8007190:	f002 f922 	bl	80093d8 <_sbrk_r>
 8007194:	4581      	cmp	r9, r0
 8007196:	d142      	bne.n	800721e <_malloc_r+0xea>
 8007198:	6821      	ldr	r1, [r4, #0]
 800719a:	4630      	mov	r0, r6
 800719c:	1a6d      	subs	r5, r5, r1
 800719e:	4629      	mov	r1, r5
 80071a0:	f7ff ffa6 	bl	80070f0 <sbrk_aligned>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d03a      	beq.n	800721e <_malloc_r+0xea>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	442b      	add	r3, r5
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	f8d8 3000 	ldr.w	r3, [r8]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	bb62      	cbnz	r2, 8007210 <_malloc_r+0xdc>
 80071b6:	f8c8 7000 	str.w	r7, [r8]
 80071ba:	e00f      	b.n	80071dc <_malloc_r+0xa8>
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	1b52      	subs	r2, r2, r5
 80071c0:	d420      	bmi.n	8007204 <_malloc_r+0xd0>
 80071c2:	2a0b      	cmp	r2, #11
 80071c4:	d917      	bls.n	80071f6 <_malloc_r+0xc2>
 80071c6:	1961      	adds	r1, r4, r5
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	6025      	str	r5, [r4, #0]
 80071cc:	bf18      	it	ne
 80071ce:	6059      	strne	r1, [r3, #4]
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	bf08      	it	eq
 80071d4:	f8c8 1000 	streq.w	r1, [r8]
 80071d8:	5162      	str	r2, [r4, r5]
 80071da:	604b      	str	r3, [r1, #4]
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f82f 	bl	8007240 <__malloc_unlock>
 80071e2:	f104 000b 	add.w	r0, r4, #11
 80071e6:	1d23      	adds	r3, r4, #4
 80071e8:	f020 0007 	bic.w	r0, r0, #7
 80071ec:	1ac2      	subs	r2, r0, r3
 80071ee:	bf1c      	itt	ne
 80071f0:	1a1b      	subne	r3, r3, r0
 80071f2:	50a3      	strne	r3, [r4, r2]
 80071f4:	e7af      	b.n	8007156 <_malloc_r+0x22>
 80071f6:	6862      	ldr	r2, [r4, #4]
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	bf0c      	ite	eq
 80071fc:	f8c8 2000 	streq.w	r2, [r8]
 8007200:	605a      	strne	r2, [r3, #4]
 8007202:	e7eb      	b.n	80071dc <_malloc_r+0xa8>
 8007204:	4623      	mov	r3, r4
 8007206:	6864      	ldr	r4, [r4, #4]
 8007208:	e7ae      	b.n	8007168 <_malloc_r+0x34>
 800720a:	463c      	mov	r4, r7
 800720c:	687f      	ldr	r7, [r7, #4]
 800720e:	e7b6      	b.n	800717e <_malloc_r+0x4a>
 8007210:	461a      	mov	r2, r3
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	42a3      	cmp	r3, r4
 8007216:	d1fb      	bne.n	8007210 <_malloc_r+0xdc>
 8007218:	2300      	movs	r3, #0
 800721a:	6053      	str	r3, [r2, #4]
 800721c:	e7de      	b.n	80071dc <_malloc_r+0xa8>
 800721e:	230c      	movs	r3, #12
 8007220:	4630      	mov	r0, r6
 8007222:	6033      	str	r3, [r6, #0]
 8007224:	f000 f80c 	bl	8007240 <__malloc_unlock>
 8007228:	e794      	b.n	8007154 <_malloc_r+0x20>
 800722a:	6005      	str	r5, [r0, #0]
 800722c:	e7d6      	b.n	80071dc <_malloc_r+0xa8>
 800722e:	bf00      	nop
 8007230:	2000056c 	.word	0x2000056c

08007234 <__malloc_lock>:
 8007234:	4801      	ldr	r0, [pc, #4]	@ (800723c <__malloc_lock+0x8>)
 8007236:	f7ff b8a4 	b.w	8006382 <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	20000564 	.word	0x20000564

08007240 <__malloc_unlock>:
 8007240:	4801      	ldr	r0, [pc, #4]	@ (8007248 <__malloc_unlock+0x8>)
 8007242:	f7ff b89f 	b.w	8006384 <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	20000564 	.word	0x20000564

0800724c <_Balloc>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	69c6      	ldr	r6, [r0, #28]
 8007250:	4604      	mov	r4, r0
 8007252:	460d      	mov	r5, r1
 8007254:	b976      	cbnz	r6, 8007274 <_Balloc+0x28>
 8007256:	2010      	movs	r0, #16
 8007258:	f7ff ff42 	bl	80070e0 <malloc>
 800725c:	4602      	mov	r2, r0
 800725e:	61e0      	str	r0, [r4, #28]
 8007260:	b920      	cbnz	r0, 800726c <_Balloc+0x20>
 8007262:	216b      	movs	r1, #107	@ 0x6b
 8007264:	4b17      	ldr	r3, [pc, #92]	@ (80072c4 <_Balloc+0x78>)
 8007266:	4818      	ldr	r0, [pc, #96]	@ (80072c8 <_Balloc+0x7c>)
 8007268:	f002 f8da 	bl	8009420 <__assert_func>
 800726c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007270:	6006      	str	r6, [r0, #0]
 8007272:	60c6      	str	r6, [r0, #12]
 8007274:	69e6      	ldr	r6, [r4, #28]
 8007276:	68f3      	ldr	r3, [r6, #12]
 8007278:	b183      	cbz	r3, 800729c <_Balloc+0x50>
 800727a:	69e3      	ldr	r3, [r4, #28]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007282:	b9b8      	cbnz	r0, 80072b4 <_Balloc+0x68>
 8007284:	2101      	movs	r1, #1
 8007286:	fa01 f605 	lsl.w	r6, r1, r5
 800728a:	1d72      	adds	r2, r6, #5
 800728c:	4620      	mov	r0, r4
 800728e:	0092      	lsls	r2, r2, #2
 8007290:	f002 f8e4 	bl	800945c <_calloc_r>
 8007294:	b160      	cbz	r0, 80072b0 <_Balloc+0x64>
 8007296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800729a:	e00e      	b.n	80072ba <_Balloc+0x6e>
 800729c:	2221      	movs	r2, #33	@ 0x21
 800729e:	2104      	movs	r1, #4
 80072a0:	4620      	mov	r0, r4
 80072a2:	f002 f8db 	bl	800945c <_calloc_r>
 80072a6:	69e3      	ldr	r3, [r4, #28]
 80072a8:	60f0      	str	r0, [r6, #12]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e4      	bne.n	800727a <_Balloc+0x2e>
 80072b0:	2000      	movs	r0, #0
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	6802      	ldr	r2, [r0, #0]
 80072b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ba:	2300      	movs	r3, #0
 80072bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072c0:	e7f7      	b.n	80072b2 <_Balloc+0x66>
 80072c2:	bf00      	nop
 80072c4:	0800a35e 	.word	0x0800a35e
 80072c8:	0800a3de 	.word	0x0800a3de

080072cc <_Bfree>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	69c6      	ldr	r6, [r0, #28]
 80072d0:	4605      	mov	r5, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	b976      	cbnz	r6, 80072f4 <_Bfree+0x28>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f7ff ff02 	bl	80070e0 <malloc>
 80072dc:	4602      	mov	r2, r0
 80072de:	61e8      	str	r0, [r5, #28]
 80072e0:	b920      	cbnz	r0, 80072ec <_Bfree+0x20>
 80072e2:	218f      	movs	r1, #143	@ 0x8f
 80072e4:	4b08      	ldr	r3, [pc, #32]	@ (8007308 <_Bfree+0x3c>)
 80072e6:	4809      	ldr	r0, [pc, #36]	@ (800730c <_Bfree+0x40>)
 80072e8:	f002 f89a 	bl	8009420 <__assert_func>
 80072ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f0:	6006      	str	r6, [r0, #0]
 80072f2:	60c6      	str	r6, [r0, #12]
 80072f4:	b13c      	cbz	r4, 8007306 <_Bfree+0x3a>
 80072f6:	69eb      	ldr	r3, [r5, #28]
 80072f8:	6862      	ldr	r2, [r4, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007300:	6021      	str	r1, [r4, #0]
 8007302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	0800a35e 	.word	0x0800a35e
 800730c:	0800a3de 	.word	0x0800a3de

08007310 <__multadd>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4607      	mov	r7, r0
 8007316:	460c      	mov	r4, r1
 8007318:	461e      	mov	r6, r3
 800731a:	2000      	movs	r0, #0
 800731c:	690d      	ldr	r5, [r1, #16]
 800731e:	f101 0c14 	add.w	ip, r1, #20
 8007322:	f8dc 3000 	ldr.w	r3, [ip]
 8007326:	3001      	adds	r0, #1
 8007328:	b299      	uxth	r1, r3
 800732a:	fb02 6101 	mla	r1, r2, r1, r6
 800732e:	0c1e      	lsrs	r6, r3, #16
 8007330:	0c0b      	lsrs	r3, r1, #16
 8007332:	fb02 3306 	mla	r3, r2, r6, r3
 8007336:	b289      	uxth	r1, r1
 8007338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800733c:	4285      	cmp	r5, r0
 800733e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007342:	f84c 1b04 	str.w	r1, [ip], #4
 8007346:	dcec      	bgt.n	8007322 <__multadd+0x12>
 8007348:	b30e      	cbz	r6, 800738e <__multadd+0x7e>
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc19      	bgt.n	8007384 <__multadd+0x74>
 8007350:	6861      	ldr	r1, [r4, #4]
 8007352:	4638      	mov	r0, r7
 8007354:	3101      	adds	r1, #1
 8007356:	f7ff ff79 	bl	800724c <_Balloc>
 800735a:	4680      	mov	r8, r0
 800735c:	b928      	cbnz	r0, 800736a <__multadd+0x5a>
 800735e:	4602      	mov	r2, r0
 8007360:	21ba      	movs	r1, #186	@ 0xba
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <__multadd+0x84>)
 8007364:	480c      	ldr	r0, [pc, #48]	@ (8007398 <__multadd+0x88>)
 8007366:	f002 f85b 	bl	8009420 <__assert_func>
 800736a:	6922      	ldr	r2, [r4, #16]
 800736c:	f104 010c 	add.w	r1, r4, #12
 8007370:	3202      	adds	r2, #2
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	300c      	adds	r0, #12
 8007376:	f002 f83f 	bl	80093f8 <memcpy>
 800737a:	4621      	mov	r1, r4
 800737c:	4638      	mov	r0, r7
 800737e:	f7ff ffa5 	bl	80072cc <_Bfree>
 8007382:	4644      	mov	r4, r8
 8007384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007388:	3501      	adds	r5, #1
 800738a:	615e      	str	r6, [r3, #20]
 800738c:	6125      	str	r5, [r4, #16]
 800738e:	4620      	mov	r0, r4
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	0800a3cd 	.word	0x0800a3cd
 8007398:	0800a3de 	.word	0x0800a3de

0800739c <__s2b>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	4615      	mov	r5, r2
 80073a2:	2209      	movs	r2, #9
 80073a4:	461f      	mov	r7, r3
 80073a6:	3308      	adds	r3, #8
 80073a8:	460c      	mov	r4, r1
 80073aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ae:	4606      	mov	r6, r0
 80073b0:	2201      	movs	r2, #1
 80073b2:	2100      	movs	r1, #0
 80073b4:	429a      	cmp	r2, r3
 80073b6:	db09      	blt.n	80073cc <__s2b+0x30>
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ff47 	bl	800724c <_Balloc>
 80073be:	b940      	cbnz	r0, 80073d2 <__s2b+0x36>
 80073c0:	4602      	mov	r2, r0
 80073c2:	21d3      	movs	r1, #211	@ 0xd3
 80073c4:	4b18      	ldr	r3, [pc, #96]	@ (8007428 <__s2b+0x8c>)
 80073c6:	4819      	ldr	r0, [pc, #100]	@ (800742c <__s2b+0x90>)
 80073c8:	f002 f82a 	bl	8009420 <__assert_func>
 80073cc:	0052      	lsls	r2, r2, #1
 80073ce:	3101      	adds	r1, #1
 80073d0:	e7f0      	b.n	80073b4 <__s2b+0x18>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	2d09      	cmp	r5, #9
 80073d6:	6143      	str	r3, [r0, #20]
 80073d8:	f04f 0301 	mov.w	r3, #1
 80073dc:	6103      	str	r3, [r0, #16]
 80073de:	dd16      	ble.n	800740e <__s2b+0x72>
 80073e0:	f104 0909 	add.w	r9, r4, #9
 80073e4:	46c8      	mov	r8, r9
 80073e6:	442c      	add	r4, r5
 80073e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073ec:	4601      	mov	r1, r0
 80073ee:	220a      	movs	r2, #10
 80073f0:	4630      	mov	r0, r6
 80073f2:	3b30      	subs	r3, #48	@ 0x30
 80073f4:	f7ff ff8c 	bl	8007310 <__multadd>
 80073f8:	45a0      	cmp	r8, r4
 80073fa:	d1f5      	bne.n	80073e8 <__s2b+0x4c>
 80073fc:	f1a5 0408 	sub.w	r4, r5, #8
 8007400:	444c      	add	r4, r9
 8007402:	1b2d      	subs	r5, r5, r4
 8007404:	1963      	adds	r3, r4, r5
 8007406:	42bb      	cmp	r3, r7
 8007408:	db04      	blt.n	8007414 <__s2b+0x78>
 800740a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740e:	2509      	movs	r5, #9
 8007410:	340a      	adds	r4, #10
 8007412:	e7f6      	b.n	8007402 <__s2b+0x66>
 8007414:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007418:	4601      	mov	r1, r0
 800741a:	220a      	movs	r2, #10
 800741c:	4630      	mov	r0, r6
 800741e:	3b30      	subs	r3, #48	@ 0x30
 8007420:	f7ff ff76 	bl	8007310 <__multadd>
 8007424:	e7ee      	b.n	8007404 <__s2b+0x68>
 8007426:	bf00      	nop
 8007428:	0800a3cd 	.word	0x0800a3cd
 800742c:	0800a3de 	.word	0x0800a3de

08007430 <__hi0bits>:
 8007430:	4603      	mov	r3, r0
 8007432:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007436:	bf3a      	itte	cc
 8007438:	0403      	lslcc	r3, r0, #16
 800743a:	2010      	movcc	r0, #16
 800743c:	2000      	movcs	r0, #0
 800743e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007442:	bf3c      	itt	cc
 8007444:	021b      	lslcc	r3, r3, #8
 8007446:	3008      	addcc	r0, #8
 8007448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800744c:	bf3c      	itt	cc
 800744e:	011b      	lslcc	r3, r3, #4
 8007450:	3004      	addcc	r0, #4
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007456:	bf3c      	itt	cc
 8007458:	009b      	lslcc	r3, r3, #2
 800745a:	3002      	addcc	r0, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	db05      	blt.n	800746c <__hi0bits+0x3c>
 8007460:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007464:	f100 0001 	add.w	r0, r0, #1
 8007468:	bf08      	it	eq
 800746a:	2020      	moveq	r0, #32
 800746c:	4770      	bx	lr

0800746e <__lo0bits>:
 800746e:	6803      	ldr	r3, [r0, #0]
 8007470:	4602      	mov	r2, r0
 8007472:	f013 0007 	ands.w	r0, r3, #7
 8007476:	d00b      	beq.n	8007490 <__lo0bits+0x22>
 8007478:	07d9      	lsls	r1, r3, #31
 800747a:	d421      	bmi.n	80074c0 <__lo0bits+0x52>
 800747c:	0798      	lsls	r0, r3, #30
 800747e:	bf49      	itett	mi
 8007480:	085b      	lsrmi	r3, r3, #1
 8007482:	089b      	lsrpl	r3, r3, #2
 8007484:	2001      	movmi	r0, #1
 8007486:	6013      	strmi	r3, [r2, #0]
 8007488:	bf5c      	itt	pl
 800748a:	2002      	movpl	r0, #2
 800748c:	6013      	strpl	r3, [r2, #0]
 800748e:	4770      	bx	lr
 8007490:	b299      	uxth	r1, r3
 8007492:	b909      	cbnz	r1, 8007498 <__lo0bits+0x2a>
 8007494:	2010      	movs	r0, #16
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	b2d9      	uxtb	r1, r3
 800749a:	b909      	cbnz	r1, 80074a0 <__lo0bits+0x32>
 800749c:	3008      	adds	r0, #8
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	0719      	lsls	r1, r3, #28
 80074a2:	bf04      	itt	eq
 80074a4:	091b      	lsreq	r3, r3, #4
 80074a6:	3004      	addeq	r0, #4
 80074a8:	0799      	lsls	r1, r3, #30
 80074aa:	bf04      	itt	eq
 80074ac:	089b      	lsreq	r3, r3, #2
 80074ae:	3002      	addeq	r0, #2
 80074b0:	07d9      	lsls	r1, r3, #31
 80074b2:	d403      	bmi.n	80074bc <__lo0bits+0x4e>
 80074b4:	085b      	lsrs	r3, r3, #1
 80074b6:	f100 0001 	add.w	r0, r0, #1
 80074ba:	d003      	beq.n	80074c4 <__lo0bits+0x56>
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	4770      	bx	lr
 80074c0:	2000      	movs	r0, #0
 80074c2:	4770      	bx	lr
 80074c4:	2020      	movs	r0, #32
 80074c6:	4770      	bx	lr

080074c8 <__i2b>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	460c      	mov	r4, r1
 80074cc:	2101      	movs	r1, #1
 80074ce:	f7ff febd 	bl	800724c <_Balloc>
 80074d2:	4602      	mov	r2, r0
 80074d4:	b928      	cbnz	r0, 80074e2 <__i2b+0x1a>
 80074d6:	f240 1145 	movw	r1, #325	@ 0x145
 80074da:	4b04      	ldr	r3, [pc, #16]	@ (80074ec <__i2b+0x24>)
 80074dc:	4804      	ldr	r0, [pc, #16]	@ (80074f0 <__i2b+0x28>)
 80074de:	f001 ff9f 	bl	8009420 <__assert_func>
 80074e2:	2301      	movs	r3, #1
 80074e4:	6144      	str	r4, [r0, #20]
 80074e6:	6103      	str	r3, [r0, #16]
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	bf00      	nop
 80074ec:	0800a3cd 	.word	0x0800a3cd
 80074f0:	0800a3de 	.word	0x0800a3de

080074f4 <__multiply>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	4614      	mov	r4, r2
 80074fa:	690a      	ldr	r2, [r1, #16]
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	460f      	mov	r7, r1
 8007500:	429a      	cmp	r2, r3
 8007502:	bfa2      	ittt	ge
 8007504:	4623      	movge	r3, r4
 8007506:	460c      	movge	r4, r1
 8007508:	461f      	movge	r7, r3
 800750a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800750e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	6861      	ldr	r1, [r4, #4]
 8007516:	eb0a 0609 	add.w	r6, sl, r9
 800751a:	42b3      	cmp	r3, r6
 800751c:	b085      	sub	sp, #20
 800751e:	bfb8      	it	lt
 8007520:	3101      	addlt	r1, #1
 8007522:	f7ff fe93 	bl	800724c <_Balloc>
 8007526:	b930      	cbnz	r0, 8007536 <__multiply+0x42>
 8007528:	4602      	mov	r2, r0
 800752a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800752e:	4b43      	ldr	r3, [pc, #268]	@ (800763c <__multiply+0x148>)
 8007530:	4843      	ldr	r0, [pc, #268]	@ (8007640 <__multiply+0x14c>)
 8007532:	f001 ff75 	bl	8009420 <__assert_func>
 8007536:	f100 0514 	add.w	r5, r0, #20
 800753a:	462b      	mov	r3, r5
 800753c:	2200      	movs	r2, #0
 800753e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007542:	4543      	cmp	r3, r8
 8007544:	d321      	bcc.n	800758a <__multiply+0x96>
 8007546:	f107 0114 	add.w	r1, r7, #20
 800754a:	f104 0214 	add.w	r2, r4, #20
 800754e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007552:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007556:	9302      	str	r3, [sp, #8]
 8007558:	1b13      	subs	r3, r2, r4
 800755a:	3b15      	subs	r3, #21
 800755c:	f023 0303 	bic.w	r3, r3, #3
 8007560:	3304      	adds	r3, #4
 8007562:	f104 0715 	add.w	r7, r4, #21
 8007566:	42ba      	cmp	r2, r7
 8007568:	bf38      	it	cc
 800756a:	2304      	movcc	r3, #4
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	9b02      	ldr	r3, [sp, #8]
 8007570:	9103      	str	r1, [sp, #12]
 8007572:	428b      	cmp	r3, r1
 8007574:	d80c      	bhi.n	8007590 <__multiply+0x9c>
 8007576:	2e00      	cmp	r6, #0
 8007578:	dd03      	ble.n	8007582 <__multiply+0x8e>
 800757a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800757e:	2b00      	cmp	r3, #0
 8007580:	d05a      	beq.n	8007638 <__multiply+0x144>
 8007582:	6106      	str	r6, [r0, #16]
 8007584:	b005      	add	sp, #20
 8007586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758a:	f843 2b04 	str.w	r2, [r3], #4
 800758e:	e7d8      	b.n	8007542 <__multiply+0x4e>
 8007590:	f8b1 a000 	ldrh.w	sl, [r1]
 8007594:	f1ba 0f00 	cmp.w	sl, #0
 8007598:	d023      	beq.n	80075e2 <__multiply+0xee>
 800759a:	46a9      	mov	r9, r5
 800759c:	f04f 0c00 	mov.w	ip, #0
 80075a0:	f104 0e14 	add.w	lr, r4, #20
 80075a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075a8:	f8d9 3000 	ldr.w	r3, [r9]
 80075ac:	fa1f fb87 	uxth.w	fp, r7
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	fb0a 330b 	mla	r3, sl, fp, r3
 80075b6:	4463      	add	r3, ip
 80075b8:	f8d9 c000 	ldr.w	ip, [r9]
 80075bc:	0c3f      	lsrs	r7, r7, #16
 80075be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80075c2:	fb0a c707 	mla	r7, sl, r7, ip
 80075c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075d0:	4572      	cmp	r2, lr
 80075d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075d6:	f849 3b04 	str.w	r3, [r9], #4
 80075da:	d8e3      	bhi.n	80075a4 <__multiply+0xb0>
 80075dc:	9b01      	ldr	r3, [sp, #4]
 80075de:	f845 c003 	str.w	ip, [r5, r3]
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	3104      	adds	r1, #4
 80075e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075ea:	f1b9 0f00 	cmp.w	r9, #0
 80075ee:	d021      	beq.n	8007634 <__multiply+0x140>
 80075f0:	46ae      	mov	lr, r5
 80075f2:	f04f 0a00 	mov.w	sl, #0
 80075f6:	682b      	ldr	r3, [r5, #0]
 80075f8:	f104 0c14 	add.w	ip, r4, #20
 80075fc:	f8bc b000 	ldrh.w	fp, [ip]
 8007600:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007604:	b29b      	uxth	r3, r3
 8007606:	fb09 770b 	mla	r7, r9, fp, r7
 800760a:	4457      	add	r7, sl
 800760c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007610:	f84e 3b04 	str.w	r3, [lr], #4
 8007614:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800761c:	f8be 3000 	ldrh.w	r3, [lr]
 8007620:	4562      	cmp	r2, ip
 8007622:	fb09 330a 	mla	r3, r9, sl, r3
 8007626:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800762a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800762e:	d8e5      	bhi.n	80075fc <__multiply+0x108>
 8007630:	9f01      	ldr	r7, [sp, #4]
 8007632:	51eb      	str	r3, [r5, r7]
 8007634:	3504      	adds	r5, #4
 8007636:	e79a      	b.n	800756e <__multiply+0x7a>
 8007638:	3e01      	subs	r6, #1
 800763a:	e79c      	b.n	8007576 <__multiply+0x82>
 800763c:	0800a3cd 	.word	0x0800a3cd
 8007640:	0800a3de 	.word	0x0800a3de

08007644 <__pow5mult>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	4615      	mov	r5, r2
 800764a:	f012 0203 	ands.w	r2, r2, #3
 800764e:	4607      	mov	r7, r0
 8007650:	460e      	mov	r6, r1
 8007652:	d007      	beq.n	8007664 <__pow5mult+0x20>
 8007654:	4c25      	ldr	r4, [pc, #148]	@ (80076ec <__pow5mult+0xa8>)
 8007656:	3a01      	subs	r2, #1
 8007658:	2300      	movs	r3, #0
 800765a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800765e:	f7ff fe57 	bl	8007310 <__multadd>
 8007662:	4606      	mov	r6, r0
 8007664:	10ad      	asrs	r5, r5, #2
 8007666:	d03d      	beq.n	80076e4 <__pow5mult+0xa0>
 8007668:	69fc      	ldr	r4, [r7, #28]
 800766a:	b97c      	cbnz	r4, 800768c <__pow5mult+0x48>
 800766c:	2010      	movs	r0, #16
 800766e:	f7ff fd37 	bl	80070e0 <malloc>
 8007672:	4602      	mov	r2, r0
 8007674:	61f8      	str	r0, [r7, #28]
 8007676:	b928      	cbnz	r0, 8007684 <__pow5mult+0x40>
 8007678:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800767c:	4b1c      	ldr	r3, [pc, #112]	@ (80076f0 <__pow5mult+0xac>)
 800767e:	481d      	ldr	r0, [pc, #116]	@ (80076f4 <__pow5mult+0xb0>)
 8007680:	f001 fece 	bl	8009420 <__assert_func>
 8007684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007688:	6004      	str	r4, [r0, #0]
 800768a:	60c4      	str	r4, [r0, #12]
 800768c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007694:	b94c      	cbnz	r4, 80076aa <__pow5mult+0x66>
 8007696:	f240 2171 	movw	r1, #625	@ 0x271
 800769a:	4638      	mov	r0, r7
 800769c:	f7ff ff14 	bl	80074c8 <__i2b>
 80076a0:	2300      	movs	r3, #0
 80076a2:	4604      	mov	r4, r0
 80076a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80076a8:	6003      	str	r3, [r0, #0]
 80076aa:	f04f 0900 	mov.w	r9, #0
 80076ae:	07eb      	lsls	r3, r5, #31
 80076b0:	d50a      	bpl.n	80076c8 <__pow5mult+0x84>
 80076b2:	4631      	mov	r1, r6
 80076b4:	4622      	mov	r2, r4
 80076b6:	4638      	mov	r0, r7
 80076b8:	f7ff ff1c 	bl	80074f4 <__multiply>
 80076bc:	4680      	mov	r8, r0
 80076be:	4631      	mov	r1, r6
 80076c0:	4638      	mov	r0, r7
 80076c2:	f7ff fe03 	bl	80072cc <_Bfree>
 80076c6:	4646      	mov	r6, r8
 80076c8:	106d      	asrs	r5, r5, #1
 80076ca:	d00b      	beq.n	80076e4 <__pow5mult+0xa0>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	b938      	cbnz	r0, 80076e0 <__pow5mult+0x9c>
 80076d0:	4622      	mov	r2, r4
 80076d2:	4621      	mov	r1, r4
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff ff0d 	bl	80074f4 <__multiply>
 80076da:	6020      	str	r0, [r4, #0]
 80076dc:	f8c0 9000 	str.w	r9, [r0]
 80076e0:	4604      	mov	r4, r0
 80076e2:	e7e4      	b.n	80076ae <__pow5mult+0x6a>
 80076e4:	4630      	mov	r0, r6
 80076e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ea:	bf00      	nop
 80076ec:	0800a438 	.word	0x0800a438
 80076f0:	0800a35e 	.word	0x0800a35e
 80076f4:	0800a3de 	.word	0x0800a3de

080076f8 <__lshift>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	460c      	mov	r4, r1
 80076fe:	4607      	mov	r7, r0
 8007700:	4691      	mov	r9, r2
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6849      	ldr	r1, [r1, #4]
 8007706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007710:	f108 0601 	add.w	r6, r8, #1
 8007714:	42b3      	cmp	r3, r6
 8007716:	db0b      	blt.n	8007730 <__lshift+0x38>
 8007718:	4638      	mov	r0, r7
 800771a:	f7ff fd97 	bl	800724c <_Balloc>
 800771e:	4605      	mov	r5, r0
 8007720:	b948      	cbnz	r0, 8007736 <__lshift+0x3e>
 8007722:	4602      	mov	r2, r0
 8007724:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007728:	4b27      	ldr	r3, [pc, #156]	@ (80077c8 <__lshift+0xd0>)
 800772a:	4828      	ldr	r0, [pc, #160]	@ (80077cc <__lshift+0xd4>)
 800772c:	f001 fe78 	bl	8009420 <__assert_func>
 8007730:	3101      	adds	r1, #1
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	e7ee      	b.n	8007714 <__lshift+0x1c>
 8007736:	2300      	movs	r3, #0
 8007738:	f100 0114 	add.w	r1, r0, #20
 800773c:	f100 0210 	add.w	r2, r0, #16
 8007740:	4618      	mov	r0, r3
 8007742:	4553      	cmp	r3, sl
 8007744:	db33      	blt.n	80077ae <__lshift+0xb6>
 8007746:	6920      	ldr	r0, [r4, #16]
 8007748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800774c:	f104 0314 	add.w	r3, r4, #20
 8007750:	f019 091f 	ands.w	r9, r9, #31
 8007754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800775c:	d02b      	beq.n	80077b6 <__lshift+0xbe>
 800775e:	468a      	mov	sl, r1
 8007760:	2200      	movs	r2, #0
 8007762:	f1c9 0e20 	rsb	lr, r9, #32
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	fa00 f009 	lsl.w	r0, r0, r9
 800776c:	4310      	orrs	r0, r2
 800776e:	f84a 0b04 	str.w	r0, [sl], #4
 8007772:	f853 2b04 	ldr.w	r2, [r3], #4
 8007776:	459c      	cmp	ip, r3
 8007778:	fa22 f20e 	lsr.w	r2, r2, lr
 800777c:	d8f3      	bhi.n	8007766 <__lshift+0x6e>
 800777e:	ebac 0304 	sub.w	r3, ip, r4
 8007782:	3b15      	subs	r3, #21
 8007784:	f023 0303 	bic.w	r3, r3, #3
 8007788:	3304      	adds	r3, #4
 800778a:	f104 0015 	add.w	r0, r4, #21
 800778e:	4584      	cmp	ip, r0
 8007790:	bf38      	it	cc
 8007792:	2304      	movcc	r3, #4
 8007794:	50ca      	str	r2, [r1, r3]
 8007796:	b10a      	cbz	r2, 800779c <__lshift+0xa4>
 8007798:	f108 0602 	add.w	r6, r8, #2
 800779c:	3e01      	subs	r6, #1
 800779e:	4638      	mov	r0, r7
 80077a0:	4621      	mov	r1, r4
 80077a2:	612e      	str	r6, [r5, #16]
 80077a4:	f7ff fd92 	bl	80072cc <_Bfree>
 80077a8:	4628      	mov	r0, r5
 80077aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80077b2:	3301      	adds	r3, #1
 80077b4:	e7c5      	b.n	8007742 <__lshift+0x4a>
 80077b6:	3904      	subs	r1, #4
 80077b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077bc:	459c      	cmp	ip, r3
 80077be:	f841 2f04 	str.w	r2, [r1, #4]!
 80077c2:	d8f9      	bhi.n	80077b8 <__lshift+0xc0>
 80077c4:	e7ea      	b.n	800779c <__lshift+0xa4>
 80077c6:	bf00      	nop
 80077c8:	0800a3cd 	.word	0x0800a3cd
 80077cc:	0800a3de 	.word	0x0800a3de

080077d0 <__mcmp>:
 80077d0:	4603      	mov	r3, r0
 80077d2:	690a      	ldr	r2, [r1, #16]
 80077d4:	6900      	ldr	r0, [r0, #16]
 80077d6:	b530      	push	{r4, r5, lr}
 80077d8:	1a80      	subs	r0, r0, r2
 80077da:	d10e      	bne.n	80077fa <__mcmp+0x2a>
 80077dc:	3314      	adds	r3, #20
 80077de:	3114      	adds	r1, #20
 80077e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077f0:	4295      	cmp	r5, r2
 80077f2:	d003      	beq.n	80077fc <__mcmp+0x2c>
 80077f4:	d205      	bcs.n	8007802 <__mcmp+0x32>
 80077f6:	f04f 30ff 	mov.w	r0, #4294967295
 80077fa:	bd30      	pop	{r4, r5, pc}
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	d3f3      	bcc.n	80077e8 <__mcmp+0x18>
 8007800:	e7fb      	b.n	80077fa <__mcmp+0x2a>
 8007802:	2001      	movs	r0, #1
 8007804:	e7f9      	b.n	80077fa <__mcmp+0x2a>
	...

08007808 <__mdiff>:
 8007808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	4689      	mov	r9, r1
 800780e:	4606      	mov	r6, r0
 8007810:	4611      	mov	r1, r2
 8007812:	4648      	mov	r0, r9
 8007814:	4614      	mov	r4, r2
 8007816:	f7ff ffdb 	bl	80077d0 <__mcmp>
 800781a:	1e05      	subs	r5, r0, #0
 800781c:	d112      	bne.n	8007844 <__mdiff+0x3c>
 800781e:	4629      	mov	r1, r5
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff fd13 	bl	800724c <_Balloc>
 8007826:	4602      	mov	r2, r0
 8007828:	b928      	cbnz	r0, 8007836 <__mdiff+0x2e>
 800782a:	f240 2137 	movw	r1, #567	@ 0x237
 800782e:	4b3e      	ldr	r3, [pc, #248]	@ (8007928 <__mdiff+0x120>)
 8007830:	483e      	ldr	r0, [pc, #248]	@ (800792c <__mdiff+0x124>)
 8007832:	f001 fdf5 	bl	8009420 <__assert_func>
 8007836:	2301      	movs	r3, #1
 8007838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800783c:	4610      	mov	r0, r2
 800783e:	b003      	add	sp, #12
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	bfbc      	itt	lt
 8007846:	464b      	movlt	r3, r9
 8007848:	46a1      	movlt	r9, r4
 800784a:	4630      	mov	r0, r6
 800784c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007850:	bfba      	itte	lt
 8007852:	461c      	movlt	r4, r3
 8007854:	2501      	movlt	r5, #1
 8007856:	2500      	movge	r5, #0
 8007858:	f7ff fcf8 	bl	800724c <_Balloc>
 800785c:	4602      	mov	r2, r0
 800785e:	b918      	cbnz	r0, 8007868 <__mdiff+0x60>
 8007860:	f240 2145 	movw	r1, #581	@ 0x245
 8007864:	4b30      	ldr	r3, [pc, #192]	@ (8007928 <__mdiff+0x120>)
 8007866:	e7e3      	b.n	8007830 <__mdiff+0x28>
 8007868:	f100 0b14 	add.w	fp, r0, #20
 800786c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007870:	f109 0310 	add.w	r3, r9, #16
 8007874:	60c5      	str	r5, [r0, #12]
 8007876:	f04f 0c00 	mov.w	ip, #0
 800787a:	f109 0514 	add.w	r5, r9, #20
 800787e:	46d9      	mov	r9, fp
 8007880:	6926      	ldr	r6, [r4, #16]
 8007882:	f104 0e14 	add.w	lr, r4, #20
 8007886:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800788a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007896:	f853 af04 	ldr.w	sl, [r3, #4]!
 800789a:	b281      	uxth	r1, r0
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	fa1f f38a 	uxth.w	r3, sl
 80078a2:	1a5b      	subs	r3, r3, r1
 80078a4:	0c00      	lsrs	r0, r0, #16
 80078a6:	4463      	add	r3, ip
 80078a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078ac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078b6:	4576      	cmp	r6, lr
 80078b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078bc:	f849 3b04 	str.w	r3, [r9], #4
 80078c0:	d8e6      	bhi.n	8007890 <__mdiff+0x88>
 80078c2:	1b33      	subs	r3, r6, r4
 80078c4:	3b15      	subs	r3, #21
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	3415      	adds	r4, #21
 80078cc:	3304      	adds	r3, #4
 80078ce:	42a6      	cmp	r6, r4
 80078d0:	bf38      	it	cc
 80078d2:	2304      	movcc	r3, #4
 80078d4:	441d      	add	r5, r3
 80078d6:	445b      	add	r3, fp
 80078d8:	461e      	mov	r6, r3
 80078da:	462c      	mov	r4, r5
 80078dc:	4544      	cmp	r4, r8
 80078de:	d30e      	bcc.n	80078fe <__mdiff+0xf6>
 80078e0:	f108 0103 	add.w	r1, r8, #3
 80078e4:	1b49      	subs	r1, r1, r5
 80078e6:	f021 0103 	bic.w	r1, r1, #3
 80078ea:	3d03      	subs	r5, #3
 80078ec:	45a8      	cmp	r8, r5
 80078ee:	bf38      	it	cc
 80078f0:	2100      	movcc	r1, #0
 80078f2:	440b      	add	r3, r1
 80078f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078f8:	b199      	cbz	r1, 8007922 <__mdiff+0x11a>
 80078fa:	6117      	str	r7, [r2, #16]
 80078fc:	e79e      	b.n	800783c <__mdiff+0x34>
 80078fe:	46e6      	mov	lr, ip
 8007900:	f854 1b04 	ldr.w	r1, [r4], #4
 8007904:	fa1f fc81 	uxth.w	ip, r1
 8007908:	44f4      	add	ip, lr
 800790a:	0c08      	lsrs	r0, r1, #16
 800790c:	4471      	add	r1, lr
 800790e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007912:	b289      	uxth	r1, r1
 8007914:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007918:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800791c:	f846 1b04 	str.w	r1, [r6], #4
 8007920:	e7dc      	b.n	80078dc <__mdiff+0xd4>
 8007922:	3f01      	subs	r7, #1
 8007924:	e7e6      	b.n	80078f4 <__mdiff+0xec>
 8007926:	bf00      	nop
 8007928:	0800a3cd 	.word	0x0800a3cd
 800792c:	0800a3de 	.word	0x0800a3de

08007930 <__ulp>:
 8007930:	4b0e      	ldr	r3, [pc, #56]	@ (800796c <__ulp+0x3c>)
 8007932:	400b      	ands	r3, r1
 8007934:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007938:	2b00      	cmp	r3, #0
 800793a:	dc08      	bgt.n	800794e <__ulp+0x1e>
 800793c:	425b      	negs	r3, r3
 800793e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007942:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007946:	da04      	bge.n	8007952 <__ulp+0x22>
 8007948:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800794c:	4113      	asrs	r3, r2
 800794e:	2200      	movs	r2, #0
 8007950:	e008      	b.n	8007964 <__ulp+0x34>
 8007952:	f1a2 0314 	sub.w	r3, r2, #20
 8007956:	2b1e      	cmp	r3, #30
 8007958:	bfd6      	itet	le
 800795a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800795e:	2201      	movgt	r2, #1
 8007960:	40da      	lsrle	r2, r3
 8007962:	2300      	movs	r3, #0
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	7ff00000 	.word	0x7ff00000

08007970 <__b2d>:
 8007970:	6902      	ldr	r2, [r0, #16]
 8007972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007974:	f100 0614 	add.w	r6, r0, #20
 8007978:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800797c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007980:	4f1e      	ldr	r7, [pc, #120]	@ (80079fc <__b2d+0x8c>)
 8007982:	4620      	mov	r0, r4
 8007984:	f7ff fd54 	bl	8007430 <__hi0bits>
 8007988:	4603      	mov	r3, r0
 800798a:	f1c0 0020 	rsb	r0, r0, #32
 800798e:	2b0a      	cmp	r3, #10
 8007990:	f1a2 0504 	sub.w	r5, r2, #4
 8007994:	6008      	str	r0, [r1, #0]
 8007996:	dc12      	bgt.n	80079be <__b2d+0x4e>
 8007998:	42ae      	cmp	r6, r5
 800799a:	bf2c      	ite	cs
 800799c:	2200      	movcs	r2, #0
 800799e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80079a2:	f1c3 0c0b 	rsb	ip, r3, #11
 80079a6:	3315      	adds	r3, #21
 80079a8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80079ac:	fa04 f303 	lsl.w	r3, r4, r3
 80079b0:	fa22 f20c 	lsr.w	r2, r2, ip
 80079b4:	ea4e 0107 	orr.w	r1, lr, r7
 80079b8:	431a      	orrs	r2, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079be:	42ae      	cmp	r6, r5
 80079c0:	bf36      	itet	cc
 80079c2:	f1a2 0508 	subcc.w	r5, r2, #8
 80079c6:	2200      	movcs	r2, #0
 80079c8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80079cc:	3b0b      	subs	r3, #11
 80079ce:	d012      	beq.n	80079f6 <__b2d+0x86>
 80079d0:	f1c3 0720 	rsb	r7, r3, #32
 80079d4:	fa22 f107 	lsr.w	r1, r2, r7
 80079d8:	409c      	lsls	r4, r3
 80079da:	430c      	orrs	r4, r1
 80079dc:	42b5      	cmp	r5, r6
 80079de:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80079e2:	bf94      	ite	ls
 80079e4:	2400      	movls	r4, #0
 80079e6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80079ea:	409a      	lsls	r2, r3
 80079ec:	40fc      	lsrs	r4, r7
 80079ee:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80079f2:	4322      	orrs	r2, r4
 80079f4:	e7e1      	b.n	80079ba <__b2d+0x4a>
 80079f6:	ea44 0107 	orr.w	r1, r4, r7
 80079fa:	e7de      	b.n	80079ba <__b2d+0x4a>
 80079fc:	3ff00000 	.word	0x3ff00000

08007a00 <__d2b>:
 8007a00:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007a04:	2101      	movs	r1, #1
 8007a06:	4690      	mov	r8, r2
 8007a08:	4699      	mov	r9, r3
 8007a0a:	9e08      	ldr	r6, [sp, #32]
 8007a0c:	f7ff fc1e 	bl	800724c <_Balloc>
 8007a10:	4604      	mov	r4, r0
 8007a12:	b930      	cbnz	r0, 8007a22 <__d2b+0x22>
 8007a14:	4602      	mov	r2, r0
 8007a16:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a1a:	4b23      	ldr	r3, [pc, #140]	@ (8007aa8 <__d2b+0xa8>)
 8007a1c:	4823      	ldr	r0, [pc, #140]	@ (8007aac <__d2b+0xac>)
 8007a1e:	f001 fcff 	bl	8009420 <__assert_func>
 8007a22:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a2a:	b10d      	cbz	r5, 8007a30 <__d2b+0x30>
 8007a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	f1b8 0300 	subs.w	r3, r8, #0
 8007a36:	d024      	beq.n	8007a82 <__d2b+0x82>
 8007a38:	4668      	mov	r0, sp
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	f7ff fd17 	bl	800746e <__lo0bits>
 8007a40:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a44:	b1d8      	cbz	r0, 8007a7e <__d2b+0x7e>
 8007a46:	f1c0 0320 	rsb	r3, r0, #32
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	40c2      	lsrs	r2, r0
 8007a52:	6163      	str	r3, [r4, #20]
 8007a54:	9201      	str	r2, [sp, #4]
 8007a56:	9b01      	ldr	r3, [sp, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bf0c      	ite	eq
 8007a5c:	2201      	moveq	r2, #1
 8007a5e:	2202      	movne	r2, #2
 8007a60:	61a3      	str	r3, [r4, #24]
 8007a62:	6122      	str	r2, [r4, #16]
 8007a64:	b1ad      	cbz	r5, 8007a92 <__d2b+0x92>
 8007a66:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a6a:	4405      	add	r5, r0
 8007a6c:	6035      	str	r5, [r6, #0]
 8007a6e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a74:	6018      	str	r0, [r3, #0]
 8007a76:	4620      	mov	r0, r4
 8007a78:	b002      	add	sp, #8
 8007a7a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007a7e:	6161      	str	r1, [r4, #20]
 8007a80:	e7e9      	b.n	8007a56 <__d2b+0x56>
 8007a82:	a801      	add	r0, sp, #4
 8007a84:	f7ff fcf3 	bl	800746e <__lo0bits>
 8007a88:	9b01      	ldr	r3, [sp, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	6163      	str	r3, [r4, #20]
 8007a8e:	3020      	adds	r0, #32
 8007a90:	e7e7      	b.n	8007a62 <__d2b+0x62>
 8007a92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a9a:	6030      	str	r0, [r6, #0]
 8007a9c:	6918      	ldr	r0, [r3, #16]
 8007a9e:	f7ff fcc7 	bl	8007430 <__hi0bits>
 8007aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007aa6:	e7e4      	b.n	8007a72 <__d2b+0x72>
 8007aa8:	0800a3cd 	.word	0x0800a3cd
 8007aac:	0800a3de 	.word	0x0800a3de

08007ab0 <__ratio>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	e9cd 1000 	strd	r1, r0, [sp]
 8007aba:	a902      	add	r1, sp, #8
 8007abc:	f7ff ff58 	bl	8007970 <__b2d>
 8007ac0:	468b      	mov	fp, r1
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	9800      	ldr	r0, [sp, #0]
 8007ac8:	a903      	add	r1, sp, #12
 8007aca:	f7ff ff51 	bl	8007970 <__b2d>
 8007ace:	460d      	mov	r5, r1
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	4689      	mov	r9, r1
 8007ad4:	6919      	ldr	r1, [r3, #16]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	4604      	mov	r4, r0
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	4630      	mov	r0, r6
 8007ade:	1ac9      	subs	r1, r1, r3
 8007ae0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfcd      	iteet	gt
 8007aee:	463a      	movgt	r2, r7
 8007af0:	462a      	movle	r2, r5
 8007af2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007af6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007afa:	bfd8      	it	le
 8007afc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007b00:	464b      	mov	r3, r9
 8007b02:	4622      	mov	r2, r4
 8007b04:	4659      	mov	r1, fp
 8007b06:	f7f8 fe1b 	bl	8000740 <__aeabi_ddiv>
 8007b0a:	b005      	add	sp, #20
 8007b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b10 <__copybits>:
 8007b10:	3901      	subs	r1, #1
 8007b12:	b570      	push	{r4, r5, r6, lr}
 8007b14:	1149      	asrs	r1, r1, #5
 8007b16:	6914      	ldr	r4, [r2, #16]
 8007b18:	3101      	adds	r1, #1
 8007b1a:	f102 0314 	add.w	r3, r2, #20
 8007b1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b26:	1f05      	subs	r5, r0, #4
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d30c      	bcc.n	8007b46 <__copybits+0x36>
 8007b2c:	1aa3      	subs	r3, r4, r2
 8007b2e:	3b11      	subs	r3, #17
 8007b30:	f023 0303 	bic.w	r3, r3, #3
 8007b34:	3211      	adds	r2, #17
 8007b36:	42a2      	cmp	r2, r4
 8007b38:	bf88      	it	hi
 8007b3a:	2300      	movhi	r3, #0
 8007b3c:	4418      	add	r0, r3
 8007b3e:	2300      	movs	r3, #0
 8007b40:	4288      	cmp	r0, r1
 8007b42:	d305      	bcc.n	8007b50 <__copybits+0x40>
 8007b44:	bd70      	pop	{r4, r5, r6, pc}
 8007b46:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b4e:	e7eb      	b.n	8007b28 <__copybits+0x18>
 8007b50:	f840 3b04 	str.w	r3, [r0], #4
 8007b54:	e7f4      	b.n	8007b40 <__copybits+0x30>

08007b56 <__any_on>:
 8007b56:	f100 0214 	add.w	r2, r0, #20
 8007b5a:	6900      	ldr	r0, [r0, #16]
 8007b5c:	114b      	asrs	r3, r1, #5
 8007b5e:	4298      	cmp	r0, r3
 8007b60:	b510      	push	{r4, lr}
 8007b62:	db11      	blt.n	8007b88 <__any_on+0x32>
 8007b64:	dd0a      	ble.n	8007b7c <__any_on+0x26>
 8007b66:	f011 011f 	ands.w	r1, r1, #31
 8007b6a:	d007      	beq.n	8007b7c <__any_on+0x26>
 8007b6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b70:	fa24 f001 	lsr.w	r0, r4, r1
 8007b74:	fa00 f101 	lsl.w	r1, r0, r1
 8007b78:	428c      	cmp	r4, r1
 8007b7a:	d10b      	bne.n	8007b94 <__any_on+0x3e>
 8007b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d803      	bhi.n	8007b8c <__any_on+0x36>
 8007b84:	2000      	movs	r0, #0
 8007b86:	bd10      	pop	{r4, pc}
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e7f7      	b.n	8007b7c <__any_on+0x26>
 8007b8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d0f5      	beq.n	8007b80 <__any_on+0x2a>
 8007b94:	2001      	movs	r0, #1
 8007b96:	e7f6      	b.n	8007b86 <__any_on+0x30>

08007b98 <sulp>:
 8007b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	4690      	mov	r8, r2
 8007ba0:	f7ff fec6 	bl	8007930 <__ulp>
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	f1b8 0f00 	cmp.w	r8, #0
 8007bac:	d011      	beq.n	8007bd2 <sulp+0x3a>
 8007bae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007bb2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd0b      	ble.n	8007bd2 <sulp+0x3a>
 8007bba:	2400      	movs	r4, #0
 8007bbc:	051b      	lsls	r3, r3, #20
 8007bbe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007bc2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	462b      	mov	r3, r5
 8007bca:	f7f8 fc8f 	bl	80004ec <__aeabi_dmul>
 8007bce:	4604      	mov	r4, r0
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bda:	0000      	movs	r0, r0
 8007bdc:	0000      	movs	r0, r0
	...

08007be0 <_strtod_l>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	b09f      	sub	sp, #124	@ 0x7c
 8007be6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007be8:	2200      	movs	r2, #0
 8007bea:	460c      	mov	r4, r1
 8007bec:	921a      	str	r2, [sp, #104]	@ 0x68
 8007bee:	f04f 0a00 	mov.w	sl, #0
 8007bf2:	f04f 0b00 	mov.w	fp, #0
 8007bf6:	460a      	mov	r2, r1
 8007bf8:	9005      	str	r0, [sp, #20]
 8007bfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bfc:	7811      	ldrb	r1, [r2, #0]
 8007bfe:	292b      	cmp	r1, #43	@ 0x2b
 8007c00:	d048      	beq.n	8007c94 <_strtod_l+0xb4>
 8007c02:	d836      	bhi.n	8007c72 <_strtod_l+0x92>
 8007c04:	290d      	cmp	r1, #13
 8007c06:	d830      	bhi.n	8007c6a <_strtod_l+0x8a>
 8007c08:	2908      	cmp	r1, #8
 8007c0a:	d830      	bhi.n	8007c6e <_strtod_l+0x8e>
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d039      	beq.n	8007c84 <_strtod_l+0xa4>
 8007c10:	2200      	movs	r2, #0
 8007c12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007c14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007c16:	782a      	ldrb	r2, [r5, #0]
 8007c18:	2a30      	cmp	r2, #48	@ 0x30
 8007c1a:	f040 80b1 	bne.w	8007d80 <_strtod_l+0x1a0>
 8007c1e:	786a      	ldrb	r2, [r5, #1]
 8007c20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c24:	2a58      	cmp	r2, #88	@ 0x58
 8007c26:	d16c      	bne.n	8007d02 <_strtod_l+0x122>
 8007c28:	9302      	str	r3, [sp, #8]
 8007c2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c2c:	4a8e      	ldr	r2, [pc, #568]	@ (8007e68 <_strtod_l+0x288>)
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	9805      	ldr	r0, [sp, #20]
 8007c36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c38:	a919      	add	r1, sp, #100	@ 0x64
 8007c3a:	f001 fc8b 	bl	8009554 <__gethex>
 8007c3e:	f010 060f 	ands.w	r6, r0, #15
 8007c42:	4604      	mov	r4, r0
 8007c44:	d005      	beq.n	8007c52 <_strtod_l+0x72>
 8007c46:	2e06      	cmp	r6, #6
 8007c48:	d126      	bne.n	8007c98 <_strtod_l+0xb8>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 8584 	bne.w	8008762 <_strtod_l+0xb82>
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c5c:	b1bb      	cbz	r3, 8007c8e <_strtod_l+0xae>
 8007c5e:	4650      	mov	r0, sl
 8007c60:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007c64:	b01f      	add	sp, #124	@ 0x7c
 8007c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6a:	2920      	cmp	r1, #32
 8007c6c:	d1d0      	bne.n	8007c10 <_strtod_l+0x30>
 8007c6e:	3201      	adds	r2, #1
 8007c70:	e7c3      	b.n	8007bfa <_strtod_l+0x1a>
 8007c72:	292d      	cmp	r1, #45	@ 0x2d
 8007c74:	d1cc      	bne.n	8007c10 <_strtod_l+0x30>
 8007c76:	2101      	movs	r1, #1
 8007c78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c7a:	1c51      	adds	r1, r2, #1
 8007c7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c7e:	7852      	ldrb	r2, [r2, #1]
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	d1c7      	bne.n	8007c14 <_strtod_l+0x34>
 8007c84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c86:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 8568 	bne.w	800875e <_strtod_l+0xb7e>
 8007c8e:	4650      	mov	r0, sl
 8007c90:	4659      	mov	r1, fp
 8007c92:	e7e7      	b.n	8007c64 <_strtod_l+0x84>
 8007c94:	2100      	movs	r1, #0
 8007c96:	e7ef      	b.n	8007c78 <_strtod_l+0x98>
 8007c98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c9a:	b13a      	cbz	r2, 8007cac <_strtod_l+0xcc>
 8007c9c:	2135      	movs	r1, #53	@ 0x35
 8007c9e:	a81c      	add	r0, sp, #112	@ 0x70
 8007ca0:	f7ff ff36 	bl	8007b10 <__copybits>
 8007ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ca6:	9805      	ldr	r0, [sp, #20]
 8007ca8:	f7ff fb10 	bl	80072cc <_Bfree>
 8007cac:	3e01      	subs	r6, #1
 8007cae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007cb0:	2e04      	cmp	r6, #4
 8007cb2:	d806      	bhi.n	8007cc2 <_strtod_l+0xe2>
 8007cb4:	e8df f006 	tbb	[pc, r6]
 8007cb8:	201d0314 	.word	0x201d0314
 8007cbc:	14          	.byte	0x14
 8007cbd:	00          	.byte	0x00
 8007cbe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007cc2:	05e1      	lsls	r1, r4, #23
 8007cc4:	bf48      	it	mi
 8007cc6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007cca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cce:	0d1b      	lsrs	r3, r3, #20
 8007cd0:	051b      	lsls	r3, r3, #20
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1bd      	bne.n	8007c52 <_strtod_l+0x72>
 8007cd6:	f7fe fb29 	bl	800632c <__errno>
 8007cda:	2322      	movs	r3, #34	@ 0x22
 8007cdc:	6003      	str	r3, [r0, #0]
 8007cde:	e7b8      	b.n	8007c52 <_strtod_l+0x72>
 8007ce0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ce4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ce8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007cec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007cf0:	e7e7      	b.n	8007cc2 <_strtod_l+0xe2>
 8007cf2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007e6c <_strtod_l+0x28c>
 8007cf6:	e7e4      	b.n	8007cc2 <_strtod_l+0xe2>
 8007cf8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007cfc:	f04f 3aff 	mov.w	sl, #4294967295
 8007d00:	e7df      	b.n	8007cc2 <_strtod_l+0xe2>
 8007d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b30      	cmp	r3, #48	@ 0x30
 8007d0c:	d0f9      	beq.n	8007d02 <_strtod_l+0x122>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d09f      	beq.n	8007c52 <_strtod_l+0x72>
 8007d12:	2301      	movs	r3, #1
 8007d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d18:	220a      	movs	r2, #10
 8007d1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	461f      	mov	r7, r3
 8007d20:	9308      	str	r3, [sp, #32]
 8007d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d24:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d26:	7805      	ldrb	r5, [r0, #0]
 8007d28:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d2c:	b2d9      	uxtb	r1, r3
 8007d2e:	2909      	cmp	r1, #9
 8007d30:	d928      	bls.n	8007d84 <_strtod_l+0x1a4>
 8007d32:	2201      	movs	r2, #1
 8007d34:	494e      	ldr	r1, [pc, #312]	@ (8007e70 <_strtod_l+0x290>)
 8007d36:	f7fe fa9d 	bl	8006274 <strncmp>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d032      	beq.n	8007da4 <_strtod_l+0x1c4>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	462a      	mov	r2, r5
 8007d42:	4681      	mov	r9, r0
 8007d44:	463d      	mov	r5, r7
 8007d46:	4603      	mov	r3, r0
 8007d48:	2a65      	cmp	r2, #101	@ 0x65
 8007d4a:	d001      	beq.n	8007d50 <_strtod_l+0x170>
 8007d4c:	2a45      	cmp	r2, #69	@ 0x45
 8007d4e:	d114      	bne.n	8007d7a <_strtod_l+0x19a>
 8007d50:	b91d      	cbnz	r5, 8007d5a <_strtod_l+0x17a>
 8007d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d54:	4302      	orrs	r2, r0
 8007d56:	d095      	beq.n	8007c84 <_strtod_l+0xa4>
 8007d58:	2500      	movs	r5, #0
 8007d5a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d5c:	1c62      	adds	r2, r4, #1
 8007d5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d60:	7862      	ldrb	r2, [r4, #1]
 8007d62:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d64:	d077      	beq.n	8007e56 <_strtod_l+0x276>
 8007d66:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d68:	d07b      	beq.n	8007e62 <_strtod_l+0x282>
 8007d6a:	f04f 0c00 	mov.w	ip, #0
 8007d6e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d72:	2909      	cmp	r1, #9
 8007d74:	f240 8082 	bls.w	8007e7c <_strtod_l+0x29c>
 8007d78:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	e0a2      	b.n	8007ec6 <_strtod_l+0x2e6>
 8007d80:	2300      	movs	r3, #0
 8007d82:	e7c7      	b.n	8007d14 <_strtod_l+0x134>
 8007d84:	2f08      	cmp	r7, #8
 8007d86:	bfd5      	itete	le
 8007d88:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007d8a:	9908      	ldrgt	r1, [sp, #32]
 8007d8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d90:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d94:	f100 0001 	add.w	r0, r0, #1
 8007d98:	bfd4      	ite	le
 8007d9a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007d9c:	9308      	strgt	r3, [sp, #32]
 8007d9e:	3701      	adds	r7, #1
 8007da0:	9019      	str	r0, [sp, #100]	@ 0x64
 8007da2:	e7bf      	b.n	8007d24 <_strtod_l+0x144>
 8007da4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007daa:	785a      	ldrb	r2, [r3, #1]
 8007dac:	b37f      	cbz	r7, 8007e0e <_strtod_l+0x22e>
 8007dae:	4681      	mov	r9, r0
 8007db0:	463d      	mov	r5, r7
 8007db2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007db6:	2b09      	cmp	r3, #9
 8007db8:	d912      	bls.n	8007de0 <_strtod_l+0x200>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e7c4      	b.n	8007d48 <_strtod_l+0x168>
 8007dbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dc6:	785a      	ldrb	r2, [r3, #1]
 8007dc8:	2a30      	cmp	r2, #48	@ 0x30
 8007dca:	d0f8      	beq.n	8007dbe <_strtod_l+0x1de>
 8007dcc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	f200 84cb 	bhi.w	800876c <_strtod_l+0xb8c>
 8007dd6:	4681      	mov	r9, r0
 8007dd8:	2000      	movs	r0, #0
 8007dda:	4605      	mov	r5, r0
 8007ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dde:	930c      	str	r3, [sp, #48]	@ 0x30
 8007de0:	3a30      	subs	r2, #48	@ 0x30
 8007de2:	f100 0301 	add.w	r3, r0, #1
 8007de6:	d02a      	beq.n	8007e3e <_strtod_l+0x25e>
 8007de8:	4499      	add	r9, r3
 8007dea:	210a      	movs	r1, #10
 8007dec:	462b      	mov	r3, r5
 8007dee:	eb00 0c05 	add.w	ip, r0, r5
 8007df2:	4563      	cmp	r3, ip
 8007df4:	d10d      	bne.n	8007e12 <_strtod_l+0x232>
 8007df6:	1c69      	adds	r1, r5, #1
 8007df8:	4401      	add	r1, r0
 8007dfa:	4428      	add	r0, r5
 8007dfc:	2808      	cmp	r0, #8
 8007dfe:	dc16      	bgt.n	8007e2e <_strtod_l+0x24e>
 8007e00:	230a      	movs	r3, #10
 8007e02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e04:	fb03 2300 	mla	r3, r3, r0, r2
 8007e08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e018      	b.n	8007e40 <_strtod_l+0x260>
 8007e0e:	4638      	mov	r0, r7
 8007e10:	e7da      	b.n	8007dc8 <_strtod_l+0x1e8>
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	f103 0301 	add.w	r3, r3, #1
 8007e18:	dc03      	bgt.n	8007e22 <_strtod_l+0x242>
 8007e1a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007e1c:	434e      	muls	r6, r1
 8007e1e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007e20:	e7e7      	b.n	8007df2 <_strtod_l+0x212>
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	bfde      	ittt	le
 8007e26:	9e08      	ldrle	r6, [sp, #32]
 8007e28:	434e      	mulle	r6, r1
 8007e2a:	9608      	strle	r6, [sp, #32]
 8007e2c:	e7e1      	b.n	8007df2 <_strtod_l+0x212>
 8007e2e:	280f      	cmp	r0, #15
 8007e30:	dceb      	bgt.n	8007e0a <_strtod_l+0x22a>
 8007e32:	230a      	movs	r3, #10
 8007e34:	9808      	ldr	r0, [sp, #32]
 8007e36:	fb03 2300 	mla	r3, r3, r0, r2
 8007e3a:	9308      	str	r3, [sp, #32]
 8007e3c:	e7e5      	b.n	8007e0a <_strtod_l+0x22a>
 8007e3e:	4629      	mov	r1, r5
 8007e40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e42:	460d      	mov	r5, r1
 8007e44:	1c50      	adds	r0, r2, #1
 8007e46:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e48:	7852      	ldrb	r2, [r2, #1]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	e7b1      	b.n	8007db2 <_strtod_l+0x1d2>
 8007e4e:	f04f 0900 	mov.w	r9, #0
 8007e52:	2301      	movs	r3, #1
 8007e54:	e77d      	b.n	8007d52 <_strtod_l+0x172>
 8007e56:	f04f 0c00 	mov.w	ip, #0
 8007e5a:	1ca2      	adds	r2, r4, #2
 8007e5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e5e:	78a2      	ldrb	r2, [r4, #2]
 8007e60:	e785      	b.n	8007d6e <_strtod_l+0x18e>
 8007e62:	f04f 0c01 	mov.w	ip, #1
 8007e66:	e7f8      	b.n	8007e5a <_strtod_l+0x27a>
 8007e68:	0800a550 	.word	0x0800a550
 8007e6c:	7ff00000 	.word	0x7ff00000
 8007e70:	0800a538 	.word	0x0800a538
 8007e74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e76:	1c51      	adds	r1, r2, #1
 8007e78:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e7a:	7852      	ldrb	r2, [r2, #1]
 8007e7c:	2a30      	cmp	r2, #48	@ 0x30
 8007e7e:	d0f9      	beq.n	8007e74 <_strtod_l+0x294>
 8007e80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e84:	2908      	cmp	r1, #8
 8007e86:	f63f af78 	bhi.w	8007d7a <_strtod_l+0x19a>
 8007e8a:	f04f 080a 	mov.w	r8, #10
 8007e8e:	3a30      	subs	r2, #48	@ 0x30
 8007e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e98:	1c56      	adds	r6, r2, #1
 8007e9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e9c:	7852      	ldrb	r2, [r2, #1]
 8007e9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ea2:	f1be 0f09 	cmp.w	lr, #9
 8007ea6:	d939      	bls.n	8007f1c <_strtod_l+0x33c>
 8007ea8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007eaa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007eae:	1a76      	subs	r6, r6, r1
 8007eb0:	2e08      	cmp	r6, #8
 8007eb2:	dc03      	bgt.n	8007ebc <_strtod_l+0x2dc>
 8007eb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007eb6:	4588      	cmp	r8, r1
 8007eb8:	bfa8      	it	ge
 8007eba:	4688      	movge	r8, r1
 8007ebc:	f1bc 0f00 	cmp.w	ip, #0
 8007ec0:	d001      	beq.n	8007ec6 <_strtod_l+0x2e6>
 8007ec2:	f1c8 0800 	rsb	r8, r8, #0
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	d14e      	bne.n	8007f68 <_strtod_l+0x388>
 8007eca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ecc:	4308      	orrs	r0, r1
 8007ece:	f47f aec0 	bne.w	8007c52 <_strtod_l+0x72>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f47f aed6 	bne.w	8007c84 <_strtod_l+0xa4>
 8007ed8:	2a69      	cmp	r2, #105	@ 0x69
 8007eda:	d028      	beq.n	8007f2e <_strtod_l+0x34e>
 8007edc:	dc25      	bgt.n	8007f2a <_strtod_l+0x34a>
 8007ede:	2a49      	cmp	r2, #73	@ 0x49
 8007ee0:	d025      	beq.n	8007f2e <_strtod_l+0x34e>
 8007ee2:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ee4:	f47f aece 	bne.w	8007c84 <_strtod_l+0xa4>
 8007ee8:	499a      	ldr	r1, [pc, #616]	@ (8008154 <_strtod_l+0x574>)
 8007eea:	a819      	add	r0, sp, #100	@ 0x64
 8007eec:	f001 fd54 	bl	8009998 <__match>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f43f aec7 	beq.w	8007c84 <_strtod_l+0xa4>
 8007ef6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b28      	cmp	r3, #40	@ 0x28
 8007efc:	d12e      	bne.n	8007f5c <_strtod_l+0x37c>
 8007efe:	4996      	ldr	r1, [pc, #600]	@ (8008158 <_strtod_l+0x578>)
 8007f00:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f02:	a819      	add	r0, sp, #100	@ 0x64
 8007f04:	f001 fd5c 	bl	80099c0 <__hexnan>
 8007f08:	2805      	cmp	r0, #5
 8007f0a:	d127      	bne.n	8007f5c <_strtod_l+0x37c>
 8007f0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007f12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007f16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f1a:	e69a      	b.n	8007c52 <_strtod_l+0x72>
 8007f1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f1e:	fb08 2101 	mla	r1, r8, r1, r2
 8007f22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f26:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f28:	e7b5      	b.n	8007e96 <_strtod_l+0x2b6>
 8007f2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f2c:	e7da      	b.n	8007ee4 <_strtod_l+0x304>
 8007f2e:	498b      	ldr	r1, [pc, #556]	@ (800815c <_strtod_l+0x57c>)
 8007f30:	a819      	add	r0, sp, #100	@ 0x64
 8007f32:	f001 fd31 	bl	8009998 <__match>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f43f aea4 	beq.w	8007c84 <_strtod_l+0xa4>
 8007f3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f3e:	4988      	ldr	r1, [pc, #544]	@ (8008160 <_strtod_l+0x580>)
 8007f40:	3b01      	subs	r3, #1
 8007f42:	a819      	add	r0, sp, #100	@ 0x64
 8007f44:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f46:	f001 fd27 	bl	8009998 <__match>
 8007f4a:	b910      	cbnz	r0, 8007f52 <_strtod_l+0x372>
 8007f4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f4e:	3301      	adds	r3, #1
 8007f50:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f52:	f04f 0a00 	mov.w	sl, #0
 8007f56:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008164 <_strtod_l+0x584>
 8007f5a:	e67a      	b.n	8007c52 <_strtod_l+0x72>
 8007f5c:	4882      	ldr	r0, [pc, #520]	@ (8008168 <_strtod_l+0x588>)
 8007f5e:	f001 fa59 	bl	8009414 <nan>
 8007f62:	4682      	mov	sl, r0
 8007f64:	468b      	mov	fp, r1
 8007f66:	e674      	b.n	8007c52 <_strtod_l+0x72>
 8007f68:	eba8 0309 	sub.w	r3, r8, r9
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	bf08      	it	eq
 8007f70:	462f      	moveq	r7, r5
 8007f72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f74:	2d10      	cmp	r5, #16
 8007f76:	462c      	mov	r4, r5
 8007f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f7a:	bfa8      	it	ge
 8007f7c:	2410      	movge	r4, #16
 8007f7e:	f7f8 fa3b 	bl	80003f8 <__aeabi_ui2d>
 8007f82:	2d09      	cmp	r5, #9
 8007f84:	4682      	mov	sl, r0
 8007f86:	468b      	mov	fp, r1
 8007f88:	dc11      	bgt.n	8007fae <_strtod_l+0x3ce>
 8007f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f43f ae60 	beq.w	8007c52 <_strtod_l+0x72>
 8007f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f94:	dd76      	ble.n	8008084 <_strtod_l+0x4a4>
 8007f96:	2b16      	cmp	r3, #22
 8007f98:	dc5d      	bgt.n	8008056 <_strtod_l+0x476>
 8007f9a:	4974      	ldr	r1, [pc, #464]	@ (800816c <_strtod_l+0x58c>)
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fa2:	465b      	mov	r3, fp
 8007fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa8:	f7f8 faa0 	bl	80004ec <__aeabi_dmul>
 8007fac:	e7d9      	b.n	8007f62 <_strtod_l+0x382>
 8007fae:	4b6f      	ldr	r3, [pc, #444]	@ (800816c <_strtod_l+0x58c>)
 8007fb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007fb8:	f7f8 fa98 	bl	80004ec <__aeabi_dmul>
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	9808      	ldr	r0, [sp, #32]
 8007fc0:	468b      	mov	fp, r1
 8007fc2:	f7f8 fa19 	bl	80003f8 <__aeabi_ui2d>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4650      	mov	r0, sl
 8007fcc:	4659      	mov	r1, fp
 8007fce:	f7f8 f8d7 	bl	8000180 <__adddf3>
 8007fd2:	2d0f      	cmp	r5, #15
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	468b      	mov	fp, r1
 8007fd8:	ddd7      	ble.n	8007f8a <_strtod_l+0x3aa>
 8007fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fdc:	1b2c      	subs	r4, r5, r4
 8007fde:	441c      	add	r4, r3
 8007fe0:	2c00      	cmp	r4, #0
 8007fe2:	f340 8096 	ble.w	8008112 <_strtod_l+0x532>
 8007fe6:	f014 030f 	ands.w	r3, r4, #15
 8007fea:	d00a      	beq.n	8008002 <_strtod_l+0x422>
 8007fec:	495f      	ldr	r1, [pc, #380]	@ (800816c <_strtod_l+0x58c>)
 8007fee:	4652      	mov	r2, sl
 8007ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ff8:	465b      	mov	r3, fp
 8007ffa:	f7f8 fa77 	bl	80004ec <__aeabi_dmul>
 8007ffe:	4682      	mov	sl, r0
 8008000:	468b      	mov	fp, r1
 8008002:	f034 040f 	bics.w	r4, r4, #15
 8008006:	d073      	beq.n	80080f0 <_strtod_l+0x510>
 8008008:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800800c:	dd48      	ble.n	80080a0 <_strtod_l+0x4c0>
 800800e:	2400      	movs	r4, #0
 8008010:	46a0      	mov	r8, r4
 8008012:	46a1      	mov	r9, r4
 8008014:	940a      	str	r4, [sp, #40]	@ 0x28
 8008016:	2322      	movs	r3, #34	@ 0x22
 8008018:	f04f 0a00 	mov.w	sl, #0
 800801c:	9a05      	ldr	r2, [sp, #20]
 800801e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008164 <_strtod_l+0x584>
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	f43f ae13 	beq.w	8007c52 <_strtod_l+0x72>
 800802c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800802e:	9805      	ldr	r0, [sp, #20]
 8008030:	f7ff f94c 	bl	80072cc <_Bfree>
 8008034:	4649      	mov	r1, r9
 8008036:	9805      	ldr	r0, [sp, #20]
 8008038:	f7ff f948 	bl	80072cc <_Bfree>
 800803c:	4641      	mov	r1, r8
 800803e:	9805      	ldr	r0, [sp, #20]
 8008040:	f7ff f944 	bl	80072cc <_Bfree>
 8008044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008046:	9805      	ldr	r0, [sp, #20]
 8008048:	f7ff f940 	bl	80072cc <_Bfree>
 800804c:	4621      	mov	r1, r4
 800804e:	9805      	ldr	r0, [sp, #20]
 8008050:	f7ff f93c 	bl	80072cc <_Bfree>
 8008054:	e5fd      	b.n	8007c52 <_strtod_l+0x72>
 8008056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008058:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800805c:	4293      	cmp	r3, r2
 800805e:	dbbc      	blt.n	8007fda <_strtod_l+0x3fa>
 8008060:	4c42      	ldr	r4, [pc, #264]	@ (800816c <_strtod_l+0x58c>)
 8008062:	f1c5 050f 	rsb	r5, r5, #15
 8008066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800806a:	4652      	mov	r2, sl
 800806c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008070:	465b      	mov	r3, fp
 8008072:	f7f8 fa3b 	bl	80004ec <__aeabi_dmul>
 8008076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008078:	1b5d      	subs	r5, r3, r5
 800807a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800807e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008082:	e791      	b.n	8007fa8 <_strtod_l+0x3c8>
 8008084:	3316      	adds	r3, #22
 8008086:	dba8      	blt.n	8007fda <_strtod_l+0x3fa>
 8008088:	4b38      	ldr	r3, [pc, #224]	@ (800816c <_strtod_l+0x58c>)
 800808a:	eba9 0808 	sub.w	r8, r9, r8
 800808e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008092:	4650      	mov	r0, sl
 8008094:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008098:	4659      	mov	r1, fp
 800809a:	f7f8 fb51 	bl	8000740 <__aeabi_ddiv>
 800809e:	e760      	b.n	8007f62 <_strtod_l+0x382>
 80080a0:	4b33      	ldr	r3, [pc, #204]	@ (8008170 <_strtod_l+0x590>)
 80080a2:	4650      	mov	r0, sl
 80080a4:	9308      	str	r3, [sp, #32]
 80080a6:	2300      	movs	r3, #0
 80080a8:	4659      	mov	r1, fp
 80080aa:	461e      	mov	r6, r3
 80080ac:	1124      	asrs	r4, r4, #4
 80080ae:	2c01      	cmp	r4, #1
 80080b0:	dc21      	bgt.n	80080f6 <_strtod_l+0x516>
 80080b2:	b10b      	cbz	r3, 80080b8 <_strtod_l+0x4d8>
 80080b4:	4682      	mov	sl, r0
 80080b6:	468b      	mov	fp, r1
 80080b8:	492d      	ldr	r1, [pc, #180]	@ (8008170 <_strtod_l+0x590>)
 80080ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080c2:	4652      	mov	r2, sl
 80080c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c8:	465b      	mov	r3, fp
 80080ca:	f7f8 fa0f 	bl	80004ec <__aeabi_dmul>
 80080ce:	4b25      	ldr	r3, [pc, #148]	@ (8008164 <_strtod_l+0x584>)
 80080d0:	460a      	mov	r2, r1
 80080d2:	400b      	ands	r3, r1
 80080d4:	4927      	ldr	r1, [pc, #156]	@ (8008174 <_strtod_l+0x594>)
 80080d6:	4682      	mov	sl, r0
 80080d8:	428b      	cmp	r3, r1
 80080da:	d898      	bhi.n	800800e <_strtod_l+0x42e>
 80080dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80080e0:	428b      	cmp	r3, r1
 80080e2:	bf86      	itte	hi
 80080e4:	f04f 3aff 	movhi.w	sl, #4294967295
 80080e8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008178 <_strtod_l+0x598>
 80080ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80080f0:	2300      	movs	r3, #0
 80080f2:	9308      	str	r3, [sp, #32]
 80080f4:	e07a      	b.n	80081ec <_strtod_l+0x60c>
 80080f6:	07e2      	lsls	r2, r4, #31
 80080f8:	d505      	bpl.n	8008106 <_strtod_l+0x526>
 80080fa:	9b08      	ldr	r3, [sp, #32]
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 f9f4 	bl	80004ec <__aeabi_dmul>
 8008104:	2301      	movs	r3, #1
 8008106:	9a08      	ldr	r2, [sp, #32]
 8008108:	3601      	adds	r6, #1
 800810a:	3208      	adds	r2, #8
 800810c:	1064      	asrs	r4, r4, #1
 800810e:	9208      	str	r2, [sp, #32]
 8008110:	e7cd      	b.n	80080ae <_strtod_l+0x4ce>
 8008112:	d0ed      	beq.n	80080f0 <_strtod_l+0x510>
 8008114:	4264      	negs	r4, r4
 8008116:	f014 020f 	ands.w	r2, r4, #15
 800811a:	d00a      	beq.n	8008132 <_strtod_l+0x552>
 800811c:	4b13      	ldr	r3, [pc, #76]	@ (800816c <_strtod_l+0x58c>)
 800811e:	4650      	mov	r0, sl
 8008120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008124:	4659      	mov	r1, fp
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 fb09 	bl	8000740 <__aeabi_ddiv>
 800812e:	4682      	mov	sl, r0
 8008130:	468b      	mov	fp, r1
 8008132:	1124      	asrs	r4, r4, #4
 8008134:	d0dc      	beq.n	80080f0 <_strtod_l+0x510>
 8008136:	2c1f      	cmp	r4, #31
 8008138:	dd20      	ble.n	800817c <_strtod_l+0x59c>
 800813a:	2400      	movs	r4, #0
 800813c:	46a0      	mov	r8, r4
 800813e:	46a1      	mov	r9, r4
 8008140:	940a      	str	r4, [sp, #40]	@ 0x28
 8008142:	2322      	movs	r3, #34	@ 0x22
 8008144:	9a05      	ldr	r2, [sp, #20]
 8008146:	f04f 0a00 	mov.w	sl, #0
 800814a:	f04f 0b00 	mov.w	fp, #0
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	e768      	b.n	8008024 <_strtod_l+0x444>
 8008152:	bf00      	nop
 8008154:	0800a327 	.word	0x0800a327
 8008158:	0800a53c 	.word	0x0800a53c
 800815c:	0800a31f 	.word	0x0800a31f
 8008160:	0800a354 	.word	0x0800a354
 8008164:	7ff00000 	.word	0x7ff00000
 8008168:	0800a700 	.word	0x0800a700
 800816c:	0800a470 	.word	0x0800a470
 8008170:	0800a448 	.word	0x0800a448
 8008174:	7ca00000 	.word	0x7ca00000
 8008178:	7fefffff 	.word	0x7fefffff
 800817c:	f014 0310 	ands.w	r3, r4, #16
 8008180:	bf18      	it	ne
 8008182:	236a      	movne	r3, #106	@ 0x6a
 8008184:	4650      	mov	r0, sl
 8008186:	9308      	str	r3, [sp, #32]
 8008188:	4659      	mov	r1, fp
 800818a:	2300      	movs	r3, #0
 800818c:	4ea9      	ldr	r6, [pc, #676]	@ (8008434 <_strtod_l+0x854>)
 800818e:	07e2      	lsls	r2, r4, #31
 8008190:	d504      	bpl.n	800819c <_strtod_l+0x5bc>
 8008192:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008196:	f7f8 f9a9 	bl	80004ec <__aeabi_dmul>
 800819a:	2301      	movs	r3, #1
 800819c:	1064      	asrs	r4, r4, #1
 800819e:	f106 0608 	add.w	r6, r6, #8
 80081a2:	d1f4      	bne.n	800818e <_strtod_l+0x5ae>
 80081a4:	b10b      	cbz	r3, 80081aa <_strtod_l+0x5ca>
 80081a6:	4682      	mov	sl, r0
 80081a8:	468b      	mov	fp, r1
 80081aa:	9b08      	ldr	r3, [sp, #32]
 80081ac:	b1b3      	cbz	r3, 80081dc <_strtod_l+0x5fc>
 80081ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80081b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	4659      	mov	r1, fp
 80081ba:	dd0f      	ble.n	80081dc <_strtod_l+0x5fc>
 80081bc:	2b1f      	cmp	r3, #31
 80081be:	dd57      	ble.n	8008270 <_strtod_l+0x690>
 80081c0:	2b34      	cmp	r3, #52	@ 0x34
 80081c2:	bfd8      	it	le
 80081c4:	f04f 33ff 	movle.w	r3, #4294967295
 80081c8:	f04f 0a00 	mov.w	sl, #0
 80081cc:	bfcf      	iteee	gt
 80081ce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081d2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80081d6:	4093      	lslle	r3, r2
 80081d8:	ea03 0b01 	andle.w	fp, r3, r1
 80081dc:	2200      	movs	r2, #0
 80081de:	2300      	movs	r3, #0
 80081e0:	4650      	mov	r0, sl
 80081e2:	4659      	mov	r1, fp
 80081e4:	f7f8 fbea 	bl	80009bc <__aeabi_dcmpeq>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d1a6      	bne.n	800813a <_strtod_l+0x55a>
 80081ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ee:	463a      	mov	r2, r7
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081f4:	462b      	mov	r3, r5
 80081f6:	9805      	ldr	r0, [sp, #20]
 80081f8:	f7ff f8d0 	bl	800739c <__s2b>
 80081fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80081fe:	2800      	cmp	r0, #0
 8008200:	f43f af05 	beq.w	800800e <_strtod_l+0x42e>
 8008204:	2400      	movs	r4, #0
 8008206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008208:	eba9 0308 	sub.w	r3, r9, r8
 800820c:	2a00      	cmp	r2, #0
 800820e:	bfa8      	it	ge
 8008210:	2300      	movge	r3, #0
 8008212:	46a0      	mov	r8, r4
 8008214:	9312      	str	r3, [sp, #72]	@ 0x48
 8008216:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800821a:	9316      	str	r3, [sp, #88]	@ 0x58
 800821c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800821e:	9805      	ldr	r0, [sp, #20]
 8008220:	6859      	ldr	r1, [r3, #4]
 8008222:	f7ff f813 	bl	800724c <_Balloc>
 8008226:	4681      	mov	r9, r0
 8008228:	2800      	cmp	r0, #0
 800822a:	f43f aef4 	beq.w	8008016 <_strtod_l+0x436>
 800822e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008230:	300c      	adds	r0, #12
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	f103 010c 	add.w	r1, r3, #12
 8008238:	3202      	adds	r2, #2
 800823a:	0092      	lsls	r2, r2, #2
 800823c:	f001 f8dc 	bl	80093f8 <memcpy>
 8008240:	ab1c      	add	r3, sp, #112	@ 0x70
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	4652      	mov	r2, sl
 800824a:	465b      	mov	r3, fp
 800824c:	9805      	ldr	r0, [sp, #20]
 800824e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008252:	f7ff fbd5 	bl	8007a00 <__d2b>
 8008256:	901a      	str	r0, [sp, #104]	@ 0x68
 8008258:	2800      	cmp	r0, #0
 800825a:	f43f aedc 	beq.w	8008016 <_strtod_l+0x436>
 800825e:	2101      	movs	r1, #1
 8008260:	9805      	ldr	r0, [sp, #20]
 8008262:	f7ff f931 	bl	80074c8 <__i2b>
 8008266:	4680      	mov	r8, r0
 8008268:	b948      	cbnz	r0, 800827e <_strtod_l+0x69e>
 800826a:	f04f 0800 	mov.w	r8, #0
 800826e:	e6d2      	b.n	8008016 <_strtod_l+0x436>
 8008270:	f04f 32ff 	mov.w	r2, #4294967295
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	ea03 0a0a 	and.w	sl, r3, sl
 800827c:	e7ae      	b.n	80081dc <_strtod_l+0x5fc>
 800827e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008280:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008282:	2d00      	cmp	r5, #0
 8008284:	bfab      	itete	ge
 8008286:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008288:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800828a:	18ef      	addge	r7, r5, r3
 800828c:	1b5e      	sublt	r6, r3, r5
 800828e:	9b08      	ldr	r3, [sp, #32]
 8008290:	bfa8      	it	ge
 8008292:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008294:	eba5 0503 	sub.w	r5, r5, r3
 8008298:	4415      	add	r5, r2
 800829a:	4b67      	ldr	r3, [pc, #412]	@ (8008438 <_strtod_l+0x858>)
 800829c:	f105 35ff 	add.w	r5, r5, #4294967295
 80082a0:	bfb8      	it	lt
 80082a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80082a4:	429d      	cmp	r5, r3
 80082a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082aa:	da50      	bge.n	800834e <_strtod_l+0x76e>
 80082ac:	1b5b      	subs	r3, r3, r5
 80082ae:	2b1f      	cmp	r3, #31
 80082b0:	f04f 0101 	mov.w	r1, #1
 80082b4:	eba2 0203 	sub.w	r2, r2, r3
 80082b8:	dc3d      	bgt.n	8008336 <_strtod_l+0x756>
 80082ba:	fa01 f303 	lsl.w	r3, r1, r3
 80082be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082c0:	2300      	movs	r3, #0
 80082c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80082c4:	18bd      	adds	r5, r7, r2
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	42af      	cmp	r7, r5
 80082ca:	4416      	add	r6, r2
 80082cc:	441e      	add	r6, r3
 80082ce:	463b      	mov	r3, r7
 80082d0:	bfa8      	it	ge
 80082d2:	462b      	movge	r3, r5
 80082d4:	42b3      	cmp	r3, r6
 80082d6:	bfa8      	it	ge
 80082d8:	4633      	movge	r3, r6
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bfc2      	ittt	gt
 80082de:	1aed      	subgt	r5, r5, r3
 80082e0:	1af6      	subgt	r6, r6, r3
 80082e2:	1aff      	subgt	r7, r7, r3
 80082e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd16      	ble.n	8008318 <_strtod_l+0x738>
 80082ea:	4641      	mov	r1, r8
 80082ec:	461a      	mov	r2, r3
 80082ee:	9805      	ldr	r0, [sp, #20]
 80082f0:	f7ff f9a8 	bl	8007644 <__pow5mult>
 80082f4:	4680      	mov	r8, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d0b7      	beq.n	800826a <_strtod_l+0x68a>
 80082fa:	4601      	mov	r1, r0
 80082fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082fe:	9805      	ldr	r0, [sp, #20]
 8008300:	f7ff f8f8 	bl	80074f4 <__multiply>
 8008304:	900e      	str	r0, [sp, #56]	@ 0x38
 8008306:	2800      	cmp	r0, #0
 8008308:	f43f ae85 	beq.w	8008016 <_strtod_l+0x436>
 800830c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	f7fe ffdc 	bl	80072cc <_Bfree>
 8008314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008316:	931a      	str	r3, [sp, #104]	@ 0x68
 8008318:	2d00      	cmp	r5, #0
 800831a:	dc1d      	bgt.n	8008358 <_strtod_l+0x778>
 800831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd23      	ble.n	800836a <_strtod_l+0x78a>
 8008322:	4649      	mov	r1, r9
 8008324:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008326:	9805      	ldr	r0, [sp, #20]
 8008328:	f7ff f98c 	bl	8007644 <__pow5mult>
 800832c:	4681      	mov	r9, r0
 800832e:	b9e0      	cbnz	r0, 800836a <_strtod_l+0x78a>
 8008330:	f04f 0900 	mov.w	r9, #0
 8008334:	e66f      	b.n	8008016 <_strtod_l+0x436>
 8008336:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800833a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800833e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008342:	35e2      	adds	r5, #226	@ 0xe2
 8008344:	fa01 f305 	lsl.w	r3, r1, r5
 8008348:	9310      	str	r3, [sp, #64]	@ 0x40
 800834a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800834c:	e7ba      	b.n	80082c4 <_strtod_l+0x6e4>
 800834e:	2300      	movs	r3, #0
 8008350:	9310      	str	r3, [sp, #64]	@ 0x40
 8008352:	2301      	movs	r3, #1
 8008354:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008356:	e7b5      	b.n	80082c4 <_strtod_l+0x6e4>
 8008358:	462a      	mov	r2, r5
 800835a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800835c:	9805      	ldr	r0, [sp, #20]
 800835e:	f7ff f9cb 	bl	80076f8 <__lshift>
 8008362:	901a      	str	r0, [sp, #104]	@ 0x68
 8008364:	2800      	cmp	r0, #0
 8008366:	d1d9      	bne.n	800831c <_strtod_l+0x73c>
 8008368:	e655      	b.n	8008016 <_strtod_l+0x436>
 800836a:	2e00      	cmp	r6, #0
 800836c:	dd07      	ble.n	800837e <_strtod_l+0x79e>
 800836e:	4649      	mov	r1, r9
 8008370:	4632      	mov	r2, r6
 8008372:	9805      	ldr	r0, [sp, #20]
 8008374:	f7ff f9c0 	bl	80076f8 <__lshift>
 8008378:	4681      	mov	r9, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d0d8      	beq.n	8008330 <_strtod_l+0x750>
 800837e:	2f00      	cmp	r7, #0
 8008380:	dd08      	ble.n	8008394 <_strtod_l+0x7b4>
 8008382:	4641      	mov	r1, r8
 8008384:	463a      	mov	r2, r7
 8008386:	9805      	ldr	r0, [sp, #20]
 8008388:	f7ff f9b6 	bl	80076f8 <__lshift>
 800838c:	4680      	mov	r8, r0
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f ae41 	beq.w	8008016 <_strtod_l+0x436>
 8008394:	464a      	mov	r2, r9
 8008396:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008398:	9805      	ldr	r0, [sp, #20]
 800839a:	f7ff fa35 	bl	8007808 <__mdiff>
 800839e:	4604      	mov	r4, r0
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f43f ae38 	beq.w	8008016 <_strtod_l+0x436>
 80083a6:	68c3      	ldr	r3, [r0, #12]
 80083a8:	4641      	mov	r1, r8
 80083aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083ac:	2300      	movs	r3, #0
 80083ae:	60c3      	str	r3, [r0, #12]
 80083b0:	f7ff fa0e 	bl	80077d0 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	da45      	bge.n	8008444 <_strtod_l+0x864>
 80083b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ba:	ea53 030a 	orrs.w	r3, r3, sl
 80083be:	d16b      	bne.n	8008498 <_strtod_l+0x8b8>
 80083c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d167      	bne.n	8008498 <_strtod_l+0x8b8>
 80083c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083cc:	0d1b      	lsrs	r3, r3, #20
 80083ce:	051b      	lsls	r3, r3, #20
 80083d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083d4:	d960      	bls.n	8008498 <_strtod_l+0x8b8>
 80083d6:	6963      	ldr	r3, [r4, #20]
 80083d8:	b913      	cbnz	r3, 80083e0 <_strtod_l+0x800>
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	dd5b      	ble.n	8008498 <_strtod_l+0x8b8>
 80083e0:	4621      	mov	r1, r4
 80083e2:	2201      	movs	r2, #1
 80083e4:	9805      	ldr	r0, [sp, #20]
 80083e6:	f7ff f987 	bl	80076f8 <__lshift>
 80083ea:	4641      	mov	r1, r8
 80083ec:	4604      	mov	r4, r0
 80083ee:	f7ff f9ef 	bl	80077d0 <__mcmp>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	dd50      	ble.n	8008498 <_strtod_l+0x8b8>
 80083f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083fa:	9a08      	ldr	r2, [sp, #32]
 80083fc:	0d1b      	lsrs	r3, r3, #20
 80083fe:	051b      	lsls	r3, r3, #20
 8008400:	2a00      	cmp	r2, #0
 8008402:	d06a      	beq.n	80084da <_strtod_l+0x8fa>
 8008404:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008408:	d867      	bhi.n	80084da <_strtod_l+0x8fa>
 800840a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800840e:	f67f ae98 	bls.w	8008142 <_strtod_l+0x562>
 8008412:	4650      	mov	r0, sl
 8008414:	4659      	mov	r1, fp
 8008416:	4b09      	ldr	r3, [pc, #36]	@ (800843c <_strtod_l+0x85c>)
 8008418:	2200      	movs	r2, #0
 800841a:	f7f8 f867 	bl	80004ec <__aeabi_dmul>
 800841e:	4b08      	ldr	r3, [pc, #32]	@ (8008440 <_strtod_l+0x860>)
 8008420:	4682      	mov	sl, r0
 8008422:	400b      	ands	r3, r1
 8008424:	468b      	mov	fp, r1
 8008426:	2b00      	cmp	r3, #0
 8008428:	f47f ae00 	bne.w	800802c <_strtod_l+0x44c>
 800842c:	2322      	movs	r3, #34	@ 0x22
 800842e:	9a05      	ldr	r2, [sp, #20]
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e5fb      	b.n	800802c <_strtod_l+0x44c>
 8008434:	0800a568 	.word	0x0800a568
 8008438:	fffffc02 	.word	0xfffffc02
 800843c:	39500000 	.word	0x39500000
 8008440:	7ff00000 	.word	0x7ff00000
 8008444:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008448:	d165      	bne.n	8008516 <_strtod_l+0x936>
 800844a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800844c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008450:	b35a      	cbz	r2, 80084aa <_strtod_l+0x8ca>
 8008452:	4a99      	ldr	r2, [pc, #612]	@ (80086b8 <_strtod_l+0xad8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d12b      	bne.n	80084b0 <_strtod_l+0x8d0>
 8008458:	9b08      	ldr	r3, [sp, #32]
 800845a:	4651      	mov	r1, sl
 800845c:	b303      	cbz	r3, 80084a0 <_strtod_l+0x8c0>
 800845e:	465a      	mov	r2, fp
 8008460:	4b96      	ldr	r3, [pc, #600]	@ (80086bc <_strtod_l+0xadc>)
 8008462:	4013      	ands	r3, r2
 8008464:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008468:	f04f 32ff 	mov.w	r2, #4294967295
 800846c:	d81b      	bhi.n	80084a6 <_strtod_l+0x8c6>
 800846e:	0d1b      	lsrs	r3, r3, #20
 8008470:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	4299      	cmp	r1, r3
 800847a:	d119      	bne.n	80084b0 <_strtod_l+0x8d0>
 800847c:	4b90      	ldr	r3, [pc, #576]	@ (80086c0 <_strtod_l+0xae0>)
 800847e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008480:	429a      	cmp	r2, r3
 8008482:	d102      	bne.n	800848a <_strtod_l+0x8aa>
 8008484:	3101      	adds	r1, #1
 8008486:	f43f adc6 	beq.w	8008016 <_strtod_l+0x436>
 800848a:	f04f 0a00 	mov.w	sl, #0
 800848e:	4b8b      	ldr	r3, [pc, #556]	@ (80086bc <_strtod_l+0xadc>)
 8008490:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008492:	401a      	ands	r2, r3
 8008494:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008498:	9b08      	ldr	r3, [sp, #32]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1b9      	bne.n	8008412 <_strtod_l+0x832>
 800849e:	e5c5      	b.n	800802c <_strtod_l+0x44c>
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295
 80084a4:	e7e8      	b.n	8008478 <_strtod_l+0x898>
 80084a6:	4613      	mov	r3, r2
 80084a8:	e7e6      	b.n	8008478 <_strtod_l+0x898>
 80084aa:	ea53 030a 	orrs.w	r3, r3, sl
 80084ae:	d0a2      	beq.n	80083f6 <_strtod_l+0x816>
 80084b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084b2:	b1db      	cbz	r3, 80084ec <_strtod_l+0x90c>
 80084b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084b6:	4213      	tst	r3, r2
 80084b8:	d0ee      	beq.n	8008498 <_strtod_l+0x8b8>
 80084ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084bc:	4650      	mov	r0, sl
 80084be:	4659      	mov	r1, fp
 80084c0:	9a08      	ldr	r2, [sp, #32]
 80084c2:	b1bb      	cbz	r3, 80084f4 <_strtod_l+0x914>
 80084c4:	f7ff fb68 	bl	8007b98 <sulp>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084d0:	f7f7 fe56 	bl	8000180 <__adddf3>
 80084d4:	4682      	mov	sl, r0
 80084d6:	468b      	mov	fp, r1
 80084d8:	e7de      	b.n	8008498 <_strtod_l+0x8b8>
 80084da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80084de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084e2:	f04f 3aff 	mov.w	sl, #4294967295
 80084e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084ea:	e7d5      	b.n	8008498 <_strtod_l+0x8b8>
 80084ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084ee:	ea13 0f0a 	tst.w	r3, sl
 80084f2:	e7e1      	b.n	80084b8 <_strtod_l+0x8d8>
 80084f4:	f7ff fb50 	bl	8007b98 <sulp>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008500:	f7f7 fe3c 	bl	800017c <__aeabi_dsub>
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	f7f8 fa56 	bl	80009bc <__aeabi_dcmpeq>
 8008510:	2800      	cmp	r0, #0
 8008512:	d0c1      	beq.n	8008498 <_strtod_l+0x8b8>
 8008514:	e615      	b.n	8008142 <_strtod_l+0x562>
 8008516:	4641      	mov	r1, r8
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff fac9 	bl	8007ab0 <__ratio>
 800851e:	2200      	movs	r2, #0
 8008520:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	f7f8 fa5c 	bl	80009e4 <__aeabi_dcmple>
 800852c:	2800      	cmp	r0, #0
 800852e:	d06d      	beq.n	800860c <_strtod_l+0xa2c>
 8008530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d178      	bne.n	8008628 <_strtod_l+0xa48>
 8008536:	f1ba 0f00 	cmp.w	sl, #0
 800853a:	d156      	bne.n	80085ea <_strtod_l+0xa0a>
 800853c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800853e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008542:	2b00      	cmp	r3, #0
 8008544:	d158      	bne.n	80085f8 <_strtod_l+0xa18>
 8008546:	2200      	movs	r2, #0
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	4b5d      	ldr	r3, [pc, #372]	@ (80086c4 <_strtod_l+0xae4>)
 800854e:	f7f8 fa3f 	bl	80009d0 <__aeabi_dcmplt>
 8008552:	2800      	cmp	r0, #0
 8008554:	d157      	bne.n	8008606 <_strtod_l+0xa26>
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	2200      	movs	r2, #0
 800855c:	4b5a      	ldr	r3, [pc, #360]	@ (80086c8 <_strtod_l+0xae8>)
 800855e:	f7f7 ffc5 	bl	80004ec <__aeabi_dmul>
 8008562:	4606      	mov	r6, r0
 8008564:	460f      	mov	r7, r1
 8008566:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800856a:	9606      	str	r6, [sp, #24]
 800856c:	9307      	str	r3, [sp, #28]
 800856e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008572:	4d52      	ldr	r5, [pc, #328]	@ (80086bc <_strtod_l+0xadc>)
 8008574:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800857a:	401d      	ands	r5, r3
 800857c:	4b53      	ldr	r3, [pc, #332]	@ (80086cc <_strtod_l+0xaec>)
 800857e:	429d      	cmp	r5, r3
 8008580:	f040 80aa 	bne.w	80086d8 <_strtod_l+0xaf8>
 8008584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008586:	4650      	mov	r0, sl
 8008588:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800858c:	4659      	mov	r1, fp
 800858e:	f7ff f9cf 	bl	8007930 <__ulp>
 8008592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008596:	f7f7 ffa9 	bl	80004ec <__aeabi_dmul>
 800859a:	4652      	mov	r2, sl
 800859c:	465b      	mov	r3, fp
 800859e:	f7f7 fdef 	bl	8000180 <__adddf3>
 80085a2:	460b      	mov	r3, r1
 80085a4:	4945      	ldr	r1, [pc, #276]	@ (80086bc <_strtod_l+0xadc>)
 80085a6:	4a4a      	ldr	r2, [pc, #296]	@ (80086d0 <_strtod_l+0xaf0>)
 80085a8:	4019      	ands	r1, r3
 80085aa:	4291      	cmp	r1, r2
 80085ac:	4682      	mov	sl, r0
 80085ae:	d942      	bls.n	8008636 <_strtod_l+0xa56>
 80085b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085b2:	4b43      	ldr	r3, [pc, #268]	@ (80086c0 <_strtod_l+0xae0>)
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d103      	bne.n	80085c0 <_strtod_l+0x9e0>
 80085b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085ba:	3301      	adds	r3, #1
 80085bc:	f43f ad2b 	beq.w	8008016 <_strtod_l+0x436>
 80085c0:	f04f 3aff 	mov.w	sl, #4294967295
 80085c4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80086c0 <_strtod_l+0xae0>
 80085c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085ca:	9805      	ldr	r0, [sp, #20]
 80085cc:	f7fe fe7e 	bl	80072cc <_Bfree>
 80085d0:	4649      	mov	r1, r9
 80085d2:	9805      	ldr	r0, [sp, #20]
 80085d4:	f7fe fe7a 	bl	80072cc <_Bfree>
 80085d8:	4641      	mov	r1, r8
 80085da:	9805      	ldr	r0, [sp, #20]
 80085dc:	f7fe fe76 	bl	80072cc <_Bfree>
 80085e0:	4621      	mov	r1, r4
 80085e2:	9805      	ldr	r0, [sp, #20]
 80085e4:	f7fe fe72 	bl	80072cc <_Bfree>
 80085e8:	e618      	b.n	800821c <_strtod_l+0x63c>
 80085ea:	f1ba 0f01 	cmp.w	sl, #1
 80085ee:	d103      	bne.n	80085f8 <_strtod_l+0xa18>
 80085f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f43f ada5 	beq.w	8008142 <_strtod_l+0x562>
 80085f8:	2200      	movs	r2, #0
 80085fa:	4b36      	ldr	r3, [pc, #216]	@ (80086d4 <_strtod_l+0xaf4>)
 80085fc:	2600      	movs	r6, #0
 80085fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008602:	4f30      	ldr	r7, [pc, #192]	@ (80086c4 <_strtod_l+0xae4>)
 8008604:	e7b3      	b.n	800856e <_strtod_l+0x98e>
 8008606:	2600      	movs	r6, #0
 8008608:	4f2f      	ldr	r7, [pc, #188]	@ (80086c8 <_strtod_l+0xae8>)
 800860a:	e7ac      	b.n	8008566 <_strtod_l+0x986>
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	4b2d      	ldr	r3, [pc, #180]	@ (80086c8 <_strtod_l+0xae8>)
 8008612:	2200      	movs	r2, #0
 8008614:	f7f7 ff6a 	bl	80004ec <__aeabi_dmul>
 8008618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861a:	4606      	mov	r6, r0
 800861c:	460f      	mov	r7, r1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0a1      	beq.n	8008566 <_strtod_l+0x986>
 8008622:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008626:	e7a2      	b.n	800856e <_strtod_l+0x98e>
 8008628:	2200      	movs	r2, #0
 800862a:	4b26      	ldr	r3, [pc, #152]	@ (80086c4 <_strtod_l+0xae4>)
 800862c:	4616      	mov	r6, r2
 800862e:	461f      	mov	r7, r3
 8008630:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008634:	e79b      	b.n	800856e <_strtod_l+0x98e>
 8008636:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800863a:	9b08      	ldr	r3, [sp, #32]
 800863c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1c1      	bne.n	80085c8 <_strtod_l+0x9e8>
 8008644:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008648:	0d1b      	lsrs	r3, r3, #20
 800864a:	051b      	lsls	r3, r3, #20
 800864c:	429d      	cmp	r5, r3
 800864e:	d1bb      	bne.n	80085c8 <_strtod_l+0x9e8>
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f8 fd7e 	bl	8001154 <__aeabi_d2lz>
 8008658:	f7f7 ff1a 	bl	8000490 <__aeabi_l2d>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4630      	mov	r0, r6
 8008662:	4639      	mov	r1, r7
 8008664:	f7f7 fd8a 	bl	800017c <__aeabi_dsub>
 8008668:	460b      	mov	r3, r1
 800866a:	4602      	mov	r2, r0
 800866c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008670:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008676:	ea46 060a 	orr.w	r6, r6, sl
 800867a:	431e      	orrs	r6, r3
 800867c:	d069      	beq.n	8008752 <_strtod_l+0xb72>
 800867e:	a30a      	add	r3, pc, #40	@ (adr r3, 80086a8 <_strtod_l+0xac8>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f8 f9a4 	bl	80009d0 <__aeabi_dcmplt>
 8008688:	2800      	cmp	r0, #0
 800868a:	f47f accf 	bne.w	800802c <_strtod_l+0x44c>
 800868e:	a308      	add	r3, pc, #32	@ (adr r3, 80086b0 <_strtod_l+0xad0>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008698:	f7f8 f9b8 	bl	8000a0c <__aeabi_dcmpgt>
 800869c:	2800      	cmp	r0, #0
 800869e:	d093      	beq.n	80085c8 <_strtod_l+0x9e8>
 80086a0:	e4c4      	b.n	800802c <_strtod_l+0x44c>
 80086a2:	bf00      	nop
 80086a4:	f3af 8000 	nop.w
 80086a8:	94a03595 	.word	0x94a03595
 80086ac:	3fdfffff 	.word	0x3fdfffff
 80086b0:	35afe535 	.word	0x35afe535
 80086b4:	3fe00000 	.word	0x3fe00000
 80086b8:	000fffff 	.word	0x000fffff
 80086bc:	7ff00000 	.word	0x7ff00000
 80086c0:	7fefffff 	.word	0x7fefffff
 80086c4:	3ff00000 	.word	0x3ff00000
 80086c8:	3fe00000 	.word	0x3fe00000
 80086cc:	7fe00000 	.word	0x7fe00000
 80086d0:	7c9fffff 	.word	0x7c9fffff
 80086d4:	bff00000 	.word	0xbff00000
 80086d8:	9b08      	ldr	r3, [sp, #32]
 80086da:	b323      	cbz	r3, 8008726 <_strtod_l+0xb46>
 80086dc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80086e0:	d821      	bhi.n	8008726 <_strtod_l+0xb46>
 80086e2:	a327      	add	r3, pc, #156	@ (adr r3, 8008780 <_strtod_l+0xba0>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	4630      	mov	r0, r6
 80086ea:	4639      	mov	r1, r7
 80086ec:	f7f8 f97a 	bl	80009e4 <__aeabi_dcmple>
 80086f0:	b1a0      	cbz	r0, 800871c <_strtod_l+0xb3c>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7f8 f9d1 	bl	8000a9c <__aeabi_d2uiz>
 80086fa:	2801      	cmp	r0, #1
 80086fc:	bf38      	it	cc
 80086fe:	2001      	movcc	r0, #1
 8008700:	f7f7 fe7a 	bl	80003f8 <__aeabi_ui2d>
 8008704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	b9fb      	cbnz	r3, 800874c <_strtod_l+0xb6c>
 800870c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008710:	9014      	str	r0, [sp, #80]	@ 0x50
 8008712:	9315      	str	r3, [sp, #84]	@ 0x54
 8008714:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008718:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800871c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800871e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008722:	1b5b      	subs	r3, r3, r5
 8008724:	9311      	str	r3, [sp, #68]	@ 0x44
 8008726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800872a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800872e:	f7ff f8ff 	bl	8007930 <__ulp>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4650      	mov	r0, sl
 8008738:	4659      	mov	r1, fp
 800873a:	f7f7 fed7 	bl	80004ec <__aeabi_dmul>
 800873e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008742:	f7f7 fd1d 	bl	8000180 <__adddf3>
 8008746:	4682      	mov	sl, r0
 8008748:	468b      	mov	fp, r1
 800874a:	e776      	b.n	800863a <_strtod_l+0xa5a>
 800874c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008750:	e7e0      	b.n	8008714 <_strtod_l+0xb34>
 8008752:	a30d      	add	r3, pc, #52	@ (adr r3, 8008788 <_strtod_l+0xba8>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	f7f8 f93a 	bl	80009d0 <__aeabi_dcmplt>
 800875c:	e79e      	b.n	800869c <_strtod_l+0xabc>
 800875e:	2300      	movs	r3, #0
 8008760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008762:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008764:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	f7ff ba77 	b.w	8007c5a <_strtod_l+0x7a>
 800876c:	2a65      	cmp	r2, #101	@ 0x65
 800876e:	f43f ab6e 	beq.w	8007e4e <_strtod_l+0x26e>
 8008772:	2a45      	cmp	r2, #69	@ 0x45
 8008774:	f43f ab6b 	beq.w	8007e4e <_strtod_l+0x26e>
 8008778:	2301      	movs	r3, #1
 800877a:	f7ff bba6 	b.w	8007eca <_strtod_l+0x2ea>
 800877e:	bf00      	nop
 8008780:	ffc00000 	.word	0xffc00000
 8008784:	41dfffff 	.word	0x41dfffff
 8008788:	94a03595 	.word	0x94a03595
 800878c:	3fcfffff 	.word	0x3fcfffff

08008790 <_strtod_r>:
 8008790:	4b01      	ldr	r3, [pc, #4]	@ (8008798 <_strtod_r+0x8>)
 8008792:	f7ff ba25 	b.w	8007be0 <_strtod_l>
 8008796:	bf00      	nop
 8008798:	20000074 	.word	0x20000074

0800879c <_strtol_l.constprop.0>:
 800879c:	2b24      	cmp	r3, #36	@ 0x24
 800879e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a2:	4686      	mov	lr, r0
 80087a4:	4690      	mov	r8, r2
 80087a6:	d801      	bhi.n	80087ac <_strtol_l.constprop.0+0x10>
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d106      	bne.n	80087ba <_strtol_l.constprop.0+0x1e>
 80087ac:	f7fd fdbe 	bl	800632c <__errno>
 80087b0:	2316      	movs	r3, #22
 80087b2:	6003      	str	r3, [r0, #0]
 80087b4:	2000      	movs	r0, #0
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	460d      	mov	r5, r1
 80087bc:	4833      	ldr	r0, [pc, #204]	@ (800888c <_strtol_l.constprop.0+0xf0>)
 80087be:	462a      	mov	r2, r5
 80087c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087c4:	5d06      	ldrb	r6, [r0, r4]
 80087c6:	f016 0608 	ands.w	r6, r6, #8
 80087ca:	d1f8      	bne.n	80087be <_strtol_l.constprop.0+0x22>
 80087cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80087ce:	d12d      	bne.n	800882c <_strtol_l.constprop.0+0x90>
 80087d0:	2601      	movs	r6, #1
 80087d2:	782c      	ldrb	r4, [r5, #0]
 80087d4:	1c95      	adds	r5, r2, #2
 80087d6:	f033 0210 	bics.w	r2, r3, #16
 80087da:	d109      	bne.n	80087f0 <_strtol_l.constprop.0+0x54>
 80087dc:	2c30      	cmp	r4, #48	@ 0x30
 80087de:	d12a      	bne.n	8008836 <_strtol_l.constprop.0+0x9a>
 80087e0:	782a      	ldrb	r2, [r5, #0]
 80087e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087e6:	2a58      	cmp	r2, #88	@ 0x58
 80087e8:	d125      	bne.n	8008836 <_strtol_l.constprop.0+0x9a>
 80087ea:	2310      	movs	r3, #16
 80087ec:	786c      	ldrb	r4, [r5, #1]
 80087ee:	3502      	adds	r5, #2
 80087f0:	2200      	movs	r2, #0
 80087f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80087f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087fa:	fbbc f9f3 	udiv	r9, ip, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	fb03 ca19 	mls	sl, r3, r9, ip
 8008804:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008808:	2f09      	cmp	r7, #9
 800880a:	d81b      	bhi.n	8008844 <_strtol_l.constprop.0+0xa8>
 800880c:	463c      	mov	r4, r7
 800880e:	42a3      	cmp	r3, r4
 8008810:	dd27      	ble.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008812:	1c57      	adds	r7, r2, #1
 8008814:	d007      	beq.n	8008826 <_strtol_l.constprop.0+0x8a>
 8008816:	4581      	cmp	r9, r0
 8008818:	d320      	bcc.n	800885c <_strtol_l.constprop.0+0xc0>
 800881a:	d101      	bne.n	8008820 <_strtol_l.constprop.0+0x84>
 800881c:	45a2      	cmp	sl, r4
 800881e:	db1d      	blt.n	800885c <_strtol_l.constprop.0+0xc0>
 8008820:	2201      	movs	r2, #1
 8008822:	fb00 4003 	mla	r0, r0, r3, r4
 8008826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800882a:	e7eb      	b.n	8008804 <_strtol_l.constprop.0+0x68>
 800882c:	2c2b      	cmp	r4, #43	@ 0x2b
 800882e:	bf04      	itt	eq
 8008830:	782c      	ldrbeq	r4, [r5, #0]
 8008832:	1c95      	addeq	r5, r2, #2
 8008834:	e7cf      	b.n	80087d6 <_strtol_l.constprop.0+0x3a>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1da      	bne.n	80087f0 <_strtol_l.constprop.0+0x54>
 800883a:	2c30      	cmp	r4, #48	@ 0x30
 800883c:	bf0c      	ite	eq
 800883e:	2308      	moveq	r3, #8
 8008840:	230a      	movne	r3, #10
 8008842:	e7d5      	b.n	80087f0 <_strtol_l.constprop.0+0x54>
 8008844:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008848:	2f19      	cmp	r7, #25
 800884a:	d801      	bhi.n	8008850 <_strtol_l.constprop.0+0xb4>
 800884c:	3c37      	subs	r4, #55	@ 0x37
 800884e:	e7de      	b.n	800880e <_strtol_l.constprop.0+0x72>
 8008850:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008854:	2f19      	cmp	r7, #25
 8008856:	d804      	bhi.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008858:	3c57      	subs	r4, #87	@ 0x57
 800885a:	e7d8      	b.n	800880e <_strtol_l.constprop.0+0x72>
 800885c:	f04f 32ff 	mov.w	r2, #4294967295
 8008860:	e7e1      	b.n	8008826 <_strtol_l.constprop.0+0x8a>
 8008862:	1c53      	adds	r3, r2, #1
 8008864:	d108      	bne.n	8008878 <_strtol_l.constprop.0+0xdc>
 8008866:	2322      	movs	r3, #34	@ 0x22
 8008868:	4660      	mov	r0, ip
 800886a:	f8ce 3000 	str.w	r3, [lr]
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	d0a0      	beq.n	80087b6 <_strtol_l.constprop.0+0x1a>
 8008874:	1e69      	subs	r1, r5, #1
 8008876:	e006      	b.n	8008886 <_strtol_l.constprop.0+0xea>
 8008878:	b106      	cbz	r6, 800887c <_strtol_l.constprop.0+0xe0>
 800887a:	4240      	negs	r0, r0
 800887c:	f1b8 0f00 	cmp.w	r8, #0
 8008880:	d099      	beq.n	80087b6 <_strtol_l.constprop.0+0x1a>
 8008882:	2a00      	cmp	r2, #0
 8008884:	d1f6      	bne.n	8008874 <_strtol_l.constprop.0+0xd8>
 8008886:	f8c8 1000 	str.w	r1, [r8]
 800888a:	e794      	b.n	80087b6 <_strtol_l.constprop.0+0x1a>
 800888c:	0800a591 	.word	0x0800a591

08008890 <_strtol_r>:
 8008890:	f7ff bf84 	b.w	800879c <_strtol_l.constprop.0>

08008894 <__ssputs_r>:
 8008894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	461f      	mov	r7, r3
 800889a:	688e      	ldr	r6, [r1, #8]
 800889c:	4682      	mov	sl, r0
 800889e:	42be      	cmp	r6, r7
 80088a0:	460c      	mov	r4, r1
 80088a2:	4690      	mov	r8, r2
 80088a4:	680b      	ldr	r3, [r1, #0]
 80088a6:	d82d      	bhi.n	8008904 <__ssputs_r+0x70>
 80088a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088b0:	d026      	beq.n	8008900 <__ssputs_r+0x6c>
 80088b2:	6965      	ldr	r5, [r4, #20]
 80088b4:	6909      	ldr	r1, [r1, #16]
 80088b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088ba:	eba3 0901 	sub.w	r9, r3, r1
 80088be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088c2:	1c7b      	adds	r3, r7, #1
 80088c4:	444b      	add	r3, r9
 80088c6:	106d      	asrs	r5, r5, #1
 80088c8:	429d      	cmp	r5, r3
 80088ca:	bf38      	it	cc
 80088cc:	461d      	movcc	r5, r3
 80088ce:	0553      	lsls	r3, r2, #21
 80088d0:	d527      	bpl.n	8008922 <__ssputs_r+0x8e>
 80088d2:	4629      	mov	r1, r5
 80088d4:	f7fe fc2e 	bl	8007134 <_malloc_r>
 80088d8:	4606      	mov	r6, r0
 80088da:	b360      	cbz	r0, 8008936 <__ssputs_r+0xa2>
 80088dc:	464a      	mov	r2, r9
 80088de:	6921      	ldr	r1, [r4, #16]
 80088e0:	f000 fd8a 	bl	80093f8 <memcpy>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	6126      	str	r6, [r4, #16]
 80088f2:	444e      	add	r6, r9
 80088f4:	6026      	str	r6, [r4, #0]
 80088f6:	463e      	mov	r6, r7
 80088f8:	6165      	str	r5, [r4, #20]
 80088fa:	eba5 0509 	sub.w	r5, r5, r9
 80088fe:	60a5      	str	r5, [r4, #8]
 8008900:	42be      	cmp	r6, r7
 8008902:	d900      	bls.n	8008906 <__ssputs_r+0x72>
 8008904:	463e      	mov	r6, r7
 8008906:	4632      	mov	r2, r6
 8008908:	4641      	mov	r1, r8
 800890a:	6820      	ldr	r0, [r4, #0]
 800890c:	f000 fd49 	bl	80093a2 <memmove>
 8008910:	2000      	movs	r0, #0
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	1b9b      	subs	r3, r3, r6
 8008916:	60a3      	str	r3, [r4, #8]
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	4433      	add	r3, r6
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008922:	462a      	mov	r2, r5
 8008924:	f001 f8f9 	bl	8009b1a <_realloc_r>
 8008928:	4606      	mov	r6, r0
 800892a:	2800      	cmp	r0, #0
 800892c:	d1e0      	bne.n	80088f0 <__ssputs_r+0x5c>
 800892e:	4650      	mov	r0, sl
 8008930:	6921      	ldr	r1, [r4, #16]
 8008932:	f7fe fb8d 	bl	8007050 <_free_r>
 8008936:	230c      	movs	r3, #12
 8008938:	f8ca 3000 	str.w	r3, [sl]
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	f04f 30ff 	mov.w	r0, #4294967295
 8008942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	e7e9      	b.n	800891e <__ssputs_r+0x8a>
	...

0800894c <_svfiprintf_r>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	4698      	mov	r8, r3
 8008952:	898b      	ldrh	r3, [r1, #12]
 8008954:	4607      	mov	r7, r0
 8008956:	061b      	lsls	r3, r3, #24
 8008958:	460d      	mov	r5, r1
 800895a:	4614      	mov	r4, r2
 800895c:	b09d      	sub	sp, #116	@ 0x74
 800895e:	d510      	bpl.n	8008982 <_svfiprintf_r+0x36>
 8008960:	690b      	ldr	r3, [r1, #16]
 8008962:	b973      	cbnz	r3, 8008982 <_svfiprintf_r+0x36>
 8008964:	2140      	movs	r1, #64	@ 0x40
 8008966:	f7fe fbe5 	bl	8007134 <_malloc_r>
 800896a:	6028      	str	r0, [r5, #0]
 800896c:	6128      	str	r0, [r5, #16]
 800896e:	b930      	cbnz	r0, 800897e <_svfiprintf_r+0x32>
 8008970:	230c      	movs	r3, #12
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	b01d      	add	sp, #116	@ 0x74
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897e:	2340      	movs	r3, #64	@ 0x40
 8008980:	616b      	str	r3, [r5, #20]
 8008982:	2300      	movs	r3, #0
 8008984:	9309      	str	r3, [sp, #36]	@ 0x24
 8008986:	2320      	movs	r3, #32
 8008988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800898c:	2330      	movs	r3, #48	@ 0x30
 800898e:	f04f 0901 	mov.w	r9, #1
 8008992:	f8cd 800c 	str.w	r8, [sp, #12]
 8008996:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008b30 <_svfiprintf_r+0x1e4>
 800899a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800899e:	4623      	mov	r3, r4
 80089a0:	469a      	mov	sl, r3
 80089a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a6:	b10a      	cbz	r2, 80089ac <_svfiprintf_r+0x60>
 80089a8:	2a25      	cmp	r2, #37	@ 0x25
 80089aa:	d1f9      	bne.n	80089a0 <_svfiprintf_r+0x54>
 80089ac:	ebba 0b04 	subs.w	fp, sl, r4
 80089b0:	d00b      	beq.n	80089ca <_svfiprintf_r+0x7e>
 80089b2:	465b      	mov	r3, fp
 80089b4:	4622      	mov	r2, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff ff6b 	bl	8008894 <__ssputs_r>
 80089be:	3001      	adds	r0, #1
 80089c0:	f000 80a7 	beq.w	8008b12 <_svfiprintf_r+0x1c6>
 80089c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c6:	445a      	add	r2, fp
 80089c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ca:	f89a 3000 	ldrb.w	r3, [sl]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 809f 	beq.w	8008b12 <_svfiprintf_r+0x1c6>
 80089d4:	2300      	movs	r3, #0
 80089d6:	f04f 32ff 	mov.w	r2, #4294967295
 80089da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089de:	f10a 0a01 	add.w	sl, sl, #1
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	9307      	str	r3, [sp, #28]
 80089e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80089ec:	4654      	mov	r4, sl
 80089ee:	2205      	movs	r2, #5
 80089f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f4:	484e      	ldr	r0, [pc, #312]	@ (8008b30 <_svfiprintf_r+0x1e4>)
 80089f6:	f7fd fcc6 	bl	8006386 <memchr>
 80089fa:	9a04      	ldr	r2, [sp, #16]
 80089fc:	b9d8      	cbnz	r0, 8008a36 <_svfiprintf_r+0xea>
 80089fe:	06d0      	lsls	r0, r2, #27
 8008a00:	bf44      	itt	mi
 8008a02:	2320      	movmi	r3, #32
 8008a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a08:	0711      	lsls	r1, r2, #28
 8008a0a:	bf44      	itt	mi
 8008a0c:	232b      	movmi	r3, #43	@ 0x2b
 8008a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a12:	f89a 3000 	ldrb.w	r3, [sl]
 8008a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a18:	d015      	beq.n	8008a46 <_svfiprintf_r+0xfa>
 8008a1a:	4654      	mov	r4, sl
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f04f 0c0a 	mov.w	ip, #10
 8008a22:	9a07      	ldr	r2, [sp, #28]
 8008a24:	4621      	mov	r1, r4
 8008a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a2a:	3b30      	subs	r3, #48	@ 0x30
 8008a2c:	2b09      	cmp	r3, #9
 8008a2e:	d94b      	bls.n	8008ac8 <_svfiprintf_r+0x17c>
 8008a30:	b1b0      	cbz	r0, 8008a60 <_svfiprintf_r+0x114>
 8008a32:	9207      	str	r2, [sp, #28]
 8008a34:	e014      	b.n	8008a60 <_svfiprintf_r+0x114>
 8008a36:	eba0 0308 	sub.w	r3, r0, r8
 8008a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	46a2      	mov	sl, r4
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	e7d2      	b.n	80089ec <_svfiprintf_r+0xa0>
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	1d19      	adds	r1, r3, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	9103      	str	r1, [sp, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bfbb      	ittet	lt
 8008a52:	425b      	neglt	r3, r3
 8008a54:	f042 0202 	orrlt.w	r2, r2, #2
 8008a58:	9307      	strge	r3, [sp, #28]
 8008a5a:	9307      	strlt	r3, [sp, #28]
 8008a5c:	bfb8      	it	lt
 8008a5e:	9204      	strlt	r2, [sp, #16]
 8008a60:	7823      	ldrb	r3, [r4, #0]
 8008a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a64:	d10a      	bne.n	8008a7c <_svfiprintf_r+0x130>
 8008a66:	7863      	ldrb	r3, [r4, #1]
 8008a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a6a:	d132      	bne.n	8008ad2 <_svfiprintf_r+0x186>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	3402      	adds	r4, #2
 8008a70:	1d1a      	adds	r2, r3, #4
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	9203      	str	r2, [sp, #12]
 8008a76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008b34 <_svfiprintf_r+0x1e8>
 8008a80:	2203      	movs	r2, #3
 8008a82:	4650      	mov	r0, sl
 8008a84:	7821      	ldrb	r1, [r4, #0]
 8008a86:	f7fd fc7e 	bl	8006386 <memchr>
 8008a8a:	b138      	cbz	r0, 8008a9c <_svfiprintf_r+0x150>
 8008a8c:	2240      	movs	r2, #64	@ 0x40
 8008a8e:	9b04      	ldr	r3, [sp, #16]
 8008a90:	eba0 000a 	sub.w	r0, r0, sl
 8008a94:	4082      	lsls	r2, r0
 8008a96:	4313      	orrs	r3, r2
 8008a98:	3401      	adds	r4, #1
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa0:	2206      	movs	r2, #6
 8008aa2:	4825      	ldr	r0, [pc, #148]	@ (8008b38 <_svfiprintf_r+0x1ec>)
 8008aa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aa8:	f7fd fc6d 	bl	8006386 <memchr>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d036      	beq.n	8008b1e <_svfiprintf_r+0x1d2>
 8008ab0:	4b22      	ldr	r3, [pc, #136]	@ (8008b3c <_svfiprintf_r+0x1f0>)
 8008ab2:	bb1b      	cbnz	r3, 8008afc <_svfiprintf_r+0x1b0>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	3307      	adds	r3, #7
 8008ab8:	f023 0307 	bic.w	r3, r3, #7
 8008abc:	3308      	adds	r3, #8
 8008abe:	9303      	str	r3, [sp, #12]
 8008ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac2:	4433      	add	r3, r6
 8008ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ac6:	e76a      	b.n	800899e <_svfiprintf_r+0x52>
 8008ac8:	460c      	mov	r4, r1
 8008aca:	2001      	movs	r0, #1
 8008acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad0:	e7a8      	b.n	8008a24 <_svfiprintf_r+0xd8>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f04f 0c0a 	mov.w	ip, #10
 8008ad8:	4619      	mov	r1, r3
 8008ada:	3401      	adds	r4, #1
 8008adc:	9305      	str	r3, [sp, #20]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae4:	3a30      	subs	r2, #48	@ 0x30
 8008ae6:	2a09      	cmp	r2, #9
 8008ae8:	d903      	bls.n	8008af2 <_svfiprintf_r+0x1a6>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0c6      	beq.n	8008a7c <_svfiprintf_r+0x130>
 8008aee:	9105      	str	r1, [sp, #20]
 8008af0:	e7c4      	b.n	8008a7c <_svfiprintf_r+0x130>
 8008af2:	4604      	mov	r4, r0
 8008af4:	2301      	movs	r3, #1
 8008af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008afa:	e7f0      	b.n	8008ade <_svfiprintf_r+0x192>
 8008afc:	ab03      	add	r3, sp, #12
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	462a      	mov	r2, r5
 8008b02:	4638      	mov	r0, r7
 8008b04:	4b0e      	ldr	r3, [pc, #56]	@ (8008b40 <_svfiprintf_r+0x1f4>)
 8008b06:	a904      	add	r1, sp, #16
 8008b08:	f7fc fc3e 	bl	8005388 <_printf_float>
 8008b0c:	1c42      	adds	r2, r0, #1
 8008b0e:	4606      	mov	r6, r0
 8008b10:	d1d6      	bne.n	8008ac0 <_svfiprintf_r+0x174>
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	065b      	lsls	r3, r3, #25
 8008b16:	f53f af2d 	bmi.w	8008974 <_svfiprintf_r+0x28>
 8008b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b1c:	e72c      	b.n	8008978 <_svfiprintf_r+0x2c>
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	462a      	mov	r2, r5
 8008b24:	4638      	mov	r0, r7
 8008b26:	4b06      	ldr	r3, [pc, #24]	@ (8008b40 <_svfiprintf_r+0x1f4>)
 8008b28:	a904      	add	r1, sp, #16
 8008b2a:	f7fc fecb 	bl	80058c4 <_printf_i>
 8008b2e:	e7ed      	b.n	8008b0c <_svfiprintf_r+0x1c0>
 8008b30:	0800a691 	.word	0x0800a691
 8008b34:	0800a697 	.word	0x0800a697
 8008b38:	0800a69b 	.word	0x0800a69b
 8008b3c:	08005389 	.word	0x08005389
 8008b40:	08008895 	.word	0x08008895

08008b44 <_sungetc_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	1c4b      	adds	r3, r1, #1
 8008b48:	4614      	mov	r4, r2
 8008b4a:	d103      	bne.n	8008b54 <_sungetc_r+0x10>
 8008b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8008b50:	4628      	mov	r0, r5
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	8993      	ldrh	r3, [r2, #12]
 8008b56:	b2cd      	uxtb	r5, r1
 8008b58:	f023 0320 	bic.w	r3, r3, #32
 8008b5c:	8193      	strh	r3, [r2, #12]
 8008b5e:	6853      	ldr	r3, [r2, #4]
 8008b60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b62:	b18a      	cbz	r2, 8008b88 <_sungetc_r+0x44>
 8008b64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008b66:	429a      	cmp	r2, r3
 8008b68:	dd08      	ble.n	8008b7c <_sungetc_r+0x38>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	1e5a      	subs	r2, r3, #1
 8008b6e:	6022      	str	r2, [r4, #0]
 8008b70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008b74:	6863      	ldr	r3, [r4, #4]
 8008b76:	3301      	adds	r3, #1
 8008b78:	6063      	str	r3, [r4, #4]
 8008b7a:	e7e9      	b.n	8008b50 <_sungetc_r+0xc>
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	f000 fbd8 	bl	8009332 <__submore>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d0f1      	beq.n	8008b6a <_sungetc_r+0x26>
 8008b86:	e7e1      	b.n	8008b4c <_sungetc_r+0x8>
 8008b88:	6921      	ldr	r1, [r4, #16]
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	b141      	cbz	r1, 8008ba0 <_sungetc_r+0x5c>
 8008b8e:	4291      	cmp	r1, r2
 8008b90:	d206      	bcs.n	8008ba0 <_sungetc_r+0x5c>
 8008b92:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008b96:	42a9      	cmp	r1, r5
 8008b98:	d102      	bne.n	8008ba0 <_sungetc_r+0x5c>
 8008b9a:	3a01      	subs	r2, #1
 8008b9c:	6022      	str	r2, [r4, #0]
 8008b9e:	e7ea      	b.n	8008b76 <_sungetc_r+0x32>
 8008ba0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008ba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008baa:	2303      	movs	r3, #3
 8008bac:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008bae:	4623      	mov	r3, r4
 8008bb0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e7de      	b.n	8008b78 <_sungetc_r+0x34>

08008bba <__ssrefill_r>:
 8008bba:	b510      	push	{r4, lr}
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008bc0:	b169      	cbz	r1, 8008bde <__ssrefill_r+0x24>
 8008bc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	d001      	beq.n	8008bce <__ssrefill_r+0x14>
 8008bca:	f7fe fa41 	bl	8007050 <_free_r>
 8008bce:	2000      	movs	r0, #0
 8008bd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bd2:	6360      	str	r0, [r4, #52]	@ 0x34
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	b113      	cbz	r3, 8008bde <__ssrefill_r+0x24>
 8008bd8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	2300      	movs	r3, #0
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f043 0320 	orr.w	r3, r3, #32
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	e7f3      	b.n	8008bdc <__ssrefill_r+0x22>

08008bf4 <__ssvfiscanf_r>:
 8008bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008c02:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008c06:	49aa      	ldr	r1, [pc, #680]	@ (8008eb0 <__ssvfiscanf_r+0x2bc>)
 8008c08:	f10d 0804 	add.w	r8, sp, #4
 8008c0c:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008c0e:	49a9      	ldr	r1, [pc, #676]	@ (8008eb4 <__ssvfiscanf_r+0x2c0>)
 8008c10:	4fa9      	ldr	r7, [pc, #676]	@ (8008eb8 <__ssvfiscanf_r+0x2c4>)
 8008c12:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008c16:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	7813      	ldrb	r3, [r2, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8159 	beq.w	8008ed4 <__ssvfiscanf_r+0x2e0>
 8008c22:	5cf9      	ldrb	r1, [r7, r3]
 8008c24:	1c55      	adds	r5, r2, #1
 8008c26:	f011 0108 	ands.w	r1, r1, #8
 8008c2a:	d019      	beq.n	8008c60 <__ssvfiscanf_r+0x6c>
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dd0f      	ble.n	8008c52 <__ssvfiscanf_r+0x5e>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	5cba      	ldrb	r2, [r7, r2]
 8008c38:	0712      	lsls	r2, r2, #28
 8008c3a:	d401      	bmi.n	8008c40 <__ssvfiscanf_r+0x4c>
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	e7ec      	b.n	8008c1a <__ssvfiscanf_r+0x26>
 8008c40:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008c42:	3301      	adds	r3, #1
 8008c44:	3201      	adds	r2, #1
 8008c46:	9245      	str	r2, [sp, #276]	@ 0x114
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	3a01      	subs	r2, #1
 8008c4e:	6062      	str	r2, [r4, #4]
 8008c50:	e7ec      	b.n	8008c2c <__ssvfiscanf_r+0x38>
 8008c52:	4621      	mov	r1, r4
 8008c54:	4630      	mov	r0, r6
 8008c56:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008c58:	4798      	blx	r3
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d0e9      	beq.n	8008c32 <__ssvfiscanf_r+0x3e>
 8008c5e:	e7ed      	b.n	8008c3c <__ssvfiscanf_r+0x48>
 8008c60:	2b25      	cmp	r3, #37	@ 0x25
 8008c62:	d012      	beq.n	8008c8a <__ssvfiscanf_r+0x96>
 8008c64:	4699      	mov	r9, r3
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f340 8094 	ble.w	8008d96 <__ssvfiscanf_r+0x1a2>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	7813      	ldrb	r3, [r2, #0]
 8008c72:	454b      	cmp	r3, r9
 8008c74:	f040 812e 	bne.w	8008ed4 <__ssvfiscanf_r+0x2e0>
 8008c78:	6863      	ldr	r3, [r4, #4]
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008c82:	6022      	str	r2, [r4, #0]
 8008c84:	3301      	adds	r3, #1
 8008c86:	9345      	str	r3, [sp, #276]	@ 0x114
 8008c88:	e7d8      	b.n	8008c3c <__ssvfiscanf_r+0x48>
 8008c8a:	9141      	str	r1, [sp, #260]	@ 0x104
 8008c8c:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008c8e:	7853      	ldrb	r3, [r2, #1]
 8008c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c92:	bf04      	itt	eq
 8008c94:	2310      	moveq	r3, #16
 8008c96:	1c95      	addeq	r5, r2, #2
 8008c98:	f04f 020a 	mov.w	r2, #10
 8008c9c:	bf08      	it	eq
 8008c9e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008ca0:	46a9      	mov	r9, r5
 8008ca2:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008ca6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008caa:	2b09      	cmp	r3, #9
 8008cac:	d91e      	bls.n	8008cec <__ssvfiscanf_r+0xf8>
 8008cae:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8008ebc <__ssvfiscanf_r+0x2c8>
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	4650      	mov	r0, sl
 8008cb6:	f7fd fb66 	bl	8006386 <memchr>
 8008cba:	b138      	cbz	r0, 8008ccc <__ssvfiscanf_r+0xd8>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	464d      	mov	r5, r9
 8008cc0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008cc2:	eba0 000a 	sub.w	r0, r0, sl
 8008cc6:	4083      	lsls	r3, r0
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	9341      	str	r3, [sp, #260]	@ 0x104
 8008ccc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008cd0:	2b78      	cmp	r3, #120	@ 0x78
 8008cd2:	d806      	bhi.n	8008ce2 <__ssvfiscanf_r+0xee>
 8008cd4:	2b57      	cmp	r3, #87	@ 0x57
 8008cd6:	d810      	bhi.n	8008cfa <__ssvfiscanf_r+0x106>
 8008cd8:	2b25      	cmp	r3, #37	@ 0x25
 8008cda:	d0c3      	beq.n	8008c64 <__ssvfiscanf_r+0x70>
 8008cdc:	d856      	bhi.n	8008d8c <__ssvfiscanf_r+0x198>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d064      	beq.n	8008dac <__ssvfiscanf_r+0x1b8>
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	9342      	str	r3, [sp, #264]	@ 0x108
 8008cea:	e077      	b.n	8008ddc <__ssvfiscanf_r+0x1e8>
 8008cec:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008cee:	464d      	mov	r5, r9
 8008cf0:	fb02 1103 	mla	r1, r2, r3, r1
 8008cf4:	3930      	subs	r1, #48	@ 0x30
 8008cf6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008cf8:	e7d2      	b.n	8008ca0 <__ssvfiscanf_r+0xac>
 8008cfa:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008cfe:	2a20      	cmp	r2, #32
 8008d00:	d8ef      	bhi.n	8008ce2 <__ssvfiscanf_r+0xee>
 8008d02:	a101      	add	r1, pc, #4	@ (adr r1, 8008d08 <__ssvfiscanf_r+0x114>)
 8008d04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d08:	08008dbb 	.word	0x08008dbb
 8008d0c:	08008ce3 	.word	0x08008ce3
 8008d10:	08008ce3 	.word	0x08008ce3
 8008d14:	08008e15 	.word	0x08008e15
 8008d18:	08008ce3 	.word	0x08008ce3
 8008d1c:	08008ce3 	.word	0x08008ce3
 8008d20:	08008ce3 	.word	0x08008ce3
 8008d24:	08008ce3 	.word	0x08008ce3
 8008d28:	08008ce3 	.word	0x08008ce3
 8008d2c:	08008ce3 	.word	0x08008ce3
 8008d30:	08008ce3 	.word	0x08008ce3
 8008d34:	08008e2b 	.word	0x08008e2b
 8008d38:	08008e11 	.word	0x08008e11
 8008d3c:	08008d93 	.word	0x08008d93
 8008d40:	08008d93 	.word	0x08008d93
 8008d44:	08008d93 	.word	0x08008d93
 8008d48:	08008ce3 	.word	0x08008ce3
 8008d4c:	08008dcd 	.word	0x08008dcd
 8008d50:	08008ce3 	.word	0x08008ce3
 8008d54:	08008ce3 	.word	0x08008ce3
 8008d58:	08008ce3 	.word	0x08008ce3
 8008d5c:	08008ce3 	.word	0x08008ce3
 8008d60:	08008e3b 	.word	0x08008e3b
 8008d64:	08008dd5 	.word	0x08008dd5
 8008d68:	08008db3 	.word	0x08008db3
 8008d6c:	08008ce3 	.word	0x08008ce3
 8008d70:	08008ce3 	.word	0x08008ce3
 8008d74:	08008e37 	.word	0x08008e37
 8008d78:	08008ce3 	.word	0x08008ce3
 8008d7c:	08008e11 	.word	0x08008e11
 8008d80:	08008ce3 	.word	0x08008ce3
 8008d84:	08008ce3 	.word	0x08008ce3
 8008d88:	08008dbb 	.word	0x08008dbb
 8008d8c:	3b45      	subs	r3, #69	@ 0x45
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d8a7      	bhi.n	8008ce2 <__ssvfiscanf_r+0xee>
 8008d92:	2305      	movs	r3, #5
 8008d94:	e021      	b.n	8008dda <__ssvfiscanf_r+0x1e6>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4630      	mov	r0, r6
 8008d9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008d9c:	4798      	blx	r3
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f43f af65 	beq.w	8008c6e <__ssvfiscanf_r+0x7a>
 8008da4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f040 808c 	bne.w	8008ec4 <__ssvfiscanf_r+0x2d0>
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	e08c      	b.n	8008ecc <__ssvfiscanf_r+0x2d8>
 8008db2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008db4:	f042 0220 	orr.w	r2, r2, #32
 8008db8:	9241      	str	r2, [sp, #260]	@ 0x104
 8008dba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dc0:	9241      	str	r2, [sp, #260]	@ 0x104
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	2b6e      	cmp	r3, #110	@ 0x6e
 8008dc6:	9242      	str	r2, [sp, #264]	@ 0x108
 8008dc8:	d902      	bls.n	8008dd0 <__ssvfiscanf_r+0x1dc>
 8008dca:	e005      	b.n	8008dd8 <__ssvfiscanf_r+0x1e4>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9342      	str	r3, [sp, #264]	@ 0x108
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e002      	b.n	8008dda <__ssvfiscanf_r+0x1e6>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	9342      	str	r3, [sp, #264]	@ 0x108
 8008dd8:	2304      	movs	r3, #4
 8008dda:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008ddc:	6863      	ldr	r3, [r4, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	dd39      	ble.n	8008e56 <__ssvfiscanf_r+0x262>
 8008de2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008de4:	0659      	lsls	r1, r3, #25
 8008de6:	d404      	bmi.n	8008df2 <__ssvfiscanf_r+0x1fe>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	5cba      	ldrb	r2, [r7, r2]
 8008dee:	0712      	lsls	r2, r2, #28
 8008df0:	d438      	bmi.n	8008e64 <__ssvfiscanf_r+0x270>
 8008df2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	dc47      	bgt.n	8008e88 <__ssvfiscanf_r+0x294>
 8008df8:	466b      	mov	r3, sp
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	a941      	add	r1, sp, #260	@ 0x104
 8008e00:	f000 f86a 	bl	8008ed8 <_scanf_chars>
 8008e04:	2801      	cmp	r0, #1
 8008e06:	d065      	beq.n	8008ed4 <__ssvfiscanf_r+0x2e0>
 8008e08:	2802      	cmp	r0, #2
 8008e0a:	f47f af17 	bne.w	8008c3c <__ssvfiscanf_r+0x48>
 8008e0e:	e7c9      	b.n	8008da4 <__ssvfiscanf_r+0x1b0>
 8008e10:	220a      	movs	r2, #10
 8008e12:	e7d7      	b.n	8008dc4 <__ssvfiscanf_r+0x1d0>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4640      	mov	r0, r8
 8008e18:	f000 fa52 	bl	80092c0 <__sccl>
 8008e1c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008e1e:	4605      	mov	r5, r0
 8008e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e24:	9341      	str	r3, [sp, #260]	@ 0x104
 8008e26:	2301      	movs	r3, #1
 8008e28:	e7d7      	b.n	8008dda <__ssvfiscanf_r+0x1e6>
 8008e2a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e30:	9341      	str	r3, [sp, #260]	@ 0x104
 8008e32:	2300      	movs	r3, #0
 8008e34:	e7d1      	b.n	8008dda <__ssvfiscanf_r+0x1e6>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e7cf      	b.n	8008dda <__ssvfiscanf_r+0x1e6>
 8008e3a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008e3c:	06c3      	lsls	r3, r0, #27
 8008e3e:	f53f aefd 	bmi.w	8008c3c <__ssvfiscanf_r+0x48>
 8008e42:	9b00      	ldr	r3, [sp, #0]
 8008e44:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008e46:	1d19      	adds	r1, r3, #4
 8008e48:	9100      	str	r1, [sp, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	07c0      	lsls	r0, r0, #31
 8008e4e:	bf4c      	ite	mi
 8008e50:	801a      	strhmi	r2, [r3, #0]
 8008e52:	601a      	strpl	r2, [r3, #0]
 8008e54:	e6f2      	b.n	8008c3c <__ssvfiscanf_r+0x48>
 8008e56:	4621      	mov	r1, r4
 8008e58:	4630      	mov	r0, r6
 8008e5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008e5c:	4798      	blx	r3
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0bf      	beq.n	8008de2 <__ssvfiscanf_r+0x1ee>
 8008e62:	e79f      	b.n	8008da4 <__ssvfiscanf_r+0x1b0>
 8008e64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008e66:	3201      	adds	r2, #1
 8008e68:	9245      	str	r2, [sp, #276]	@ 0x114
 8008e6a:	6862      	ldr	r2, [r4, #4]
 8008e6c:	3a01      	subs	r2, #1
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	6062      	str	r2, [r4, #4]
 8008e72:	dd02      	ble.n	8008e7a <__ssvfiscanf_r+0x286>
 8008e74:	3301      	adds	r3, #1
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	e7b6      	b.n	8008de8 <__ssvfiscanf_r+0x1f4>
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008e80:	4798      	blx	r3
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d0b0      	beq.n	8008de8 <__ssvfiscanf_r+0x1f4>
 8008e86:	e78d      	b.n	8008da4 <__ssvfiscanf_r+0x1b0>
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	dc06      	bgt.n	8008e9a <__ssvfiscanf_r+0x2a6>
 8008e8c:	466b      	mov	r3, sp
 8008e8e:	4622      	mov	r2, r4
 8008e90:	4630      	mov	r0, r6
 8008e92:	a941      	add	r1, sp, #260	@ 0x104
 8008e94:	f000 f87a 	bl	8008f8c <_scanf_i>
 8008e98:	e7b4      	b.n	8008e04 <__ssvfiscanf_r+0x210>
 8008e9a:	4b09      	ldr	r3, [pc, #36]	@ (8008ec0 <__ssvfiscanf_r+0x2cc>)
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f43f aecd 	beq.w	8008c3c <__ssvfiscanf_r+0x48>
 8008ea2:	466b      	mov	r3, sp
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	a941      	add	r1, sp, #260	@ 0x104
 8008eaa:	f7fc fe2b 	bl	8005b04 <_scanf_float>
 8008eae:	e7a9      	b.n	8008e04 <__ssvfiscanf_r+0x210>
 8008eb0:	08008b45 	.word	0x08008b45
 8008eb4:	08008bbb 	.word	0x08008bbb
 8008eb8:	0800a591 	.word	0x0800a591
 8008ebc:	0800a697 	.word	0x0800a697
 8008ec0:	08005b05 	.word	0x08005b05
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	065b      	lsls	r3, r3, #25
 8008ec8:	f53f af70 	bmi.w	8008dac <__ssvfiscanf_r+0x1b8>
 8008ecc:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008ed6:	e7f9      	b.n	8008ecc <__ssvfiscanf_r+0x2d8>

08008ed8 <_scanf_chars>:
 8008ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	4615      	mov	r5, r2
 8008ede:	688a      	ldr	r2, [r1, #8]
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	b932      	cbnz	r2, 8008ef4 <_scanf_chars+0x1c>
 8008ee6:	698a      	ldr	r2, [r1, #24]
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	bf14      	ite	ne
 8008eec:	f04f 32ff 	movne.w	r2, #4294967295
 8008ef0:	2201      	moveq	r2, #1
 8008ef2:	608a      	str	r2, [r1, #8]
 8008ef4:	2700      	movs	r7, #0
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008f88 <_scanf_chars+0xb0>
 8008efc:	06d1      	lsls	r1, r2, #27
 8008efe:	bf5f      	itttt	pl
 8008f00:	681a      	ldrpl	r2, [r3, #0]
 8008f02:	1d11      	addpl	r1, r2, #4
 8008f04:	6019      	strpl	r1, [r3, #0]
 8008f06:	6816      	ldrpl	r6, [r2, #0]
 8008f08:	69a0      	ldr	r0, [r4, #24]
 8008f0a:	b188      	cbz	r0, 8008f30 <_scanf_chars+0x58>
 8008f0c:	2801      	cmp	r0, #1
 8008f0e:	d107      	bne.n	8008f20 <_scanf_chars+0x48>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	6963      	ldr	r3, [r4, #20]
 8008f16:	5c9b      	ldrb	r3, [r3, r2]
 8008f18:	b953      	cbnz	r3, 8008f30 <_scanf_chars+0x58>
 8008f1a:	2f00      	cmp	r7, #0
 8008f1c:	d031      	beq.n	8008f82 <_scanf_chars+0xaa>
 8008f1e:	e022      	b.n	8008f66 <_scanf_chars+0x8e>
 8008f20:	2802      	cmp	r0, #2
 8008f22:	d120      	bne.n	8008f66 <_scanf_chars+0x8e>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008f2c:	071b      	lsls	r3, r3, #28
 8008f2e:	d41a      	bmi.n	8008f66 <_scanf_chars+0x8e>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	3701      	adds	r7, #1
 8008f34:	06da      	lsls	r2, r3, #27
 8008f36:	bf5e      	ittt	pl
 8008f38:	682b      	ldrpl	r3, [r5, #0]
 8008f3a:	781b      	ldrbpl	r3, [r3, #0]
 8008f3c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008f40:	682a      	ldr	r2, [r5, #0]
 8008f42:	686b      	ldr	r3, [r5, #4]
 8008f44:	3201      	adds	r2, #1
 8008f46:	602a      	str	r2, [r5, #0]
 8008f48:	68a2      	ldr	r2, [r4, #8]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	606b      	str	r3, [r5, #4]
 8008f50:	60a2      	str	r2, [r4, #8]
 8008f52:	b142      	cbz	r2, 8008f66 <_scanf_chars+0x8e>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	dcd7      	bgt.n	8008f08 <_scanf_chars+0x30>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f60:	4798      	blx	r3
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d0d0      	beq.n	8008f08 <_scanf_chars+0x30>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f013 0310 	ands.w	r3, r3, #16
 8008f6c:	d105      	bne.n	8008f7a <_scanf_chars+0xa2>
 8008f6e:	68e2      	ldr	r2, [r4, #12]
 8008f70:	3201      	adds	r2, #1
 8008f72:	60e2      	str	r2, [r4, #12]
 8008f74:	69a2      	ldr	r2, [r4, #24]
 8008f76:	b102      	cbz	r2, 8008f7a <_scanf_chars+0xa2>
 8008f78:	7033      	strb	r3, [r6, #0]
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	443b      	add	r3, r7
 8008f80:	6123      	str	r3, [r4, #16]
 8008f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f86:	bf00      	nop
 8008f88:	0800a591 	.word	0x0800a591

08008f8c <_scanf_i>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	460c      	mov	r4, r1
 8008f92:	4698      	mov	r8, r3
 8008f94:	4b72      	ldr	r3, [pc, #456]	@ (8009160 <_scanf_i+0x1d4>)
 8008f96:	b087      	sub	sp, #28
 8008f98:	4682      	mov	sl, r0
 8008f9a:	4616      	mov	r6, r2
 8008f9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8009164 <_scanf_i+0x1d8>)
 8008fa8:	69a1      	ldr	r1, [r4, #24]
 8008faa:	4a6f      	ldr	r2, [pc, #444]	@ (8009168 <_scanf_i+0x1dc>)
 8008fac:	4627      	mov	r7, r4
 8008fae:	2903      	cmp	r1, #3
 8008fb0:	bf08      	it	eq
 8008fb2:	461a      	moveq	r2, r3
 8008fb4:	68a3      	ldr	r3, [r4, #8]
 8008fb6:	9201      	str	r2, [sp, #4]
 8008fb8:	1e5a      	subs	r2, r3, #1
 8008fba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008fbe:	bf81      	itttt	hi
 8008fc0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008fc4:	eb03 0905 	addhi.w	r9, r3, r5
 8008fc8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008fcc:	60a3      	strhi	r3, [r4, #8]
 8008fce:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008fd2:	bf98      	it	ls
 8008fd4:	f04f 0900 	movls.w	r9, #0
 8008fd8:	463d      	mov	r5, r7
 8008fda:	f04f 0b00 	mov.w	fp, #0
 8008fde:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	6831      	ldr	r1, [r6, #0]
 8008fe6:	ab03      	add	r3, sp, #12
 8008fe8:	2202      	movs	r2, #2
 8008fea:	7809      	ldrb	r1, [r1, #0]
 8008fec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008ff0:	f7fd f9c9 	bl	8006386 <memchr>
 8008ff4:	b328      	cbz	r0, 8009042 <_scanf_i+0xb6>
 8008ff6:	f1bb 0f01 	cmp.w	fp, #1
 8008ffa:	d159      	bne.n	80090b0 <_scanf_i+0x124>
 8008ffc:	6862      	ldr	r2, [r4, #4]
 8008ffe:	b92a      	cbnz	r2, 800900c <_scanf_i+0x80>
 8009000:	2108      	movs	r1, #8
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	6061      	str	r1, [r4, #4]
 8009006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800900a:	6022      	str	r2, [r4, #0]
 800900c:	6822      	ldr	r2, [r4, #0]
 800900e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	68a2      	ldr	r2, [r4, #8]
 8009016:	1e51      	subs	r1, r2, #1
 8009018:	60a1      	str	r1, [r4, #8]
 800901a:	b192      	cbz	r2, 8009042 <_scanf_i+0xb6>
 800901c:	6832      	ldr	r2, [r6, #0]
 800901e:	1c51      	adds	r1, r2, #1
 8009020:	6031      	str	r1, [r6, #0]
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	f805 2b01 	strb.w	r2, [r5], #1
 8009028:	6872      	ldr	r2, [r6, #4]
 800902a:	3a01      	subs	r2, #1
 800902c:	2a00      	cmp	r2, #0
 800902e:	6072      	str	r2, [r6, #4]
 8009030:	dc07      	bgt.n	8009042 <_scanf_i+0xb6>
 8009032:	4631      	mov	r1, r6
 8009034:	4650      	mov	r0, sl
 8009036:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800903a:	4790      	blx	r2
 800903c:	2800      	cmp	r0, #0
 800903e:	f040 8085 	bne.w	800914c <_scanf_i+0x1c0>
 8009042:	f10b 0b01 	add.w	fp, fp, #1
 8009046:	f1bb 0f03 	cmp.w	fp, #3
 800904a:	d1cb      	bne.n	8008fe4 <_scanf_i+0x58>
 800904c:	6863      	ldr	r3, [r4, #4]
 800904e:	b90b      	cbnz	r3, 8009054 <_scanf_i+0xc8>
 8009050:	230a      	movs	r3, #10
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	6863      	ldr	r3, [r4, #4]
 8009056:	4945      	ldr	r1, [pc, #276]	@ (800916c <_scanf_i+0x1e0>)
 8009058:	6960      	ldr	r0, [r4, #20]
 800905a:	1ac9      	subs	r1, r1, r3
 800905c:	f000 f930 	bl	80092c0 <__sccl>
 8009060:	f04f 0b00 	mov.w	fp, #0
 8009064:	68a3      	ldr	r3, [r4, #8]
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d03d      	beq.n	80090e8 <_scanf_i+0x15c>
 800906c:	6831      	ldr	r1, [r6, #0]
 800906e:	6960      	ldr	r0, [r4, #20]
 8009070:	f891 c000 	ldrb.w	ip, [r1]
 8009074:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009078:	2800      	cmp	r0, #0
 800907a:	d035      	beq.n	80090e8 <_scanf_i+0x15c>
 800907c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009080:	d124      	bne.n	80090cc <_scanf_i+0x140>
 8009082:	0510      	lsls	r0, r2, #20
 8009084:	d522      	bpl.n	80090cc <_scanf_i+0x140>
 8009086:	f10b 0b01 	add.w	fp, fp, #1
 800908a:	f1b9 0f00 	cmp.w	r9, #0
 800908e:	d003      	beq.n	8009098 <_scanf_i+0x10c>
 8009090:	3301      	adds	r3, #1
 8009092:	f109 39ff 	add.w	r9, r9, #4294967295
 8009096:	60a3      	str	r3, [r4, #8]
 8009098:	6873      	ldr	r3, [r6, #4]
 800909a:	3b01      	subs	r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	6073      	str	r3, [r6, #4]
 80090a0:	dd1b      	ble.n	80090da <_scanf_i+0x14e>
 80090a2:	6833      	ldr	r3, [r6, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	6033      	str	r3, [r6, #0]
 80090a8:	68a3      	ldr	r3, [r4, #8]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	e7d9      	b.n	8009064 <_scanf_i+0xd8>
 80090b0:	f1bb 0f02 	cmp.w	fp, #2
 80090b4:	d1ae      	bne.n	8009014 <_scanf_i+0x88>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80090bc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80090c0:	d1bf      	bne.n	8009042 <_scanf_i+0xb6>
 80090c2:	2110      	movs	r1, #16
 80090c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090c8:	6061      	str	r1, [r4, #4]
 80090ca:	e7a2      	b.n	8009012 <_scanf_i+0x86>
 80090cc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80090d0:	6022      	str	r2, [r4, #0]
 80090d2:	780b      	ldrb	r3, [r1, #0]
 80090d4:	f805 3b01 	strb.w	r3, [r5], #1
 80090d8:	e7de      	b.n	8009098 <_scanf_i+0x10c>
 80090da:	4631      	mov	r1, r6
 80090dc:	4650      	mov	r0, sl
 80090de:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80090e2:	4798      	blx	r3
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d0df      	beq.n	80090a8 <_scanf_i+0x11c>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	05d9      	lsls	r1, r3, #23
 80090ec:	d50d      	bpl.n	800910a <_scanf_i+0x17e>
 80090ee:	42bd      	cmp	r5, r7
 80090f0:	d909      	bls.n	8009106 <_scanf_i+0x17a>
 80090f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80090f6:	4632      	mov	r2, r6
 80090f8:	4650      	mov	r0, sl
 80090fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8009102:	4798      	blx	r3
 8009104:	464d      	mov	r5, r9
 8009106:	42bd      	cmp	r5, r7
 8009108:	d028      	beq.n	800915c <_scanf_i+0x1d0>
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	f012 0210 	ands.w	r2, r2, #16
 8009110:	d113      	bne.n	800913a <_scanf_i+0x1ae>
 8009112:	702a      	strb	r2, [r5, #0]
 8009114:	4639      	mov	r1, r7
 8009116:	6863      	ldr	r3, [r4, #4]
 8009118:	4650      	mov	r0, sl
 800911a:	9e01      	ldr	r6, [sp, #4]
 800911c:	47b0      	blx	r6
 800911e:	f8d8 3000 	ldr.w	r3, [r8]
 8009122:	6821      	ldr	r1, [r4, #0]
 8009124:	1d1a      	adds	r2, r3, #4
 8009126:	f8c8 2000 	str.w	r2, [r8]
 800912a:	f011 0f20 	tst.w	r1, #32
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	d00f      	beq.n	8009152 <_scanf_i+0x1c6>
 8009132:	6018      	str	r0, [r3, #0]
 8009134:	68e3      	ldr	r3, [r4, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	60e3      	str	r3, [r4, #12]
 800913a:	2000      	movs	r0, #0
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	1bed      	subs	r5, r5, r7
 8009140:	445d      	add	r5, fp
 8009142:	442b      	add	r3, r5
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	b007      	add	sp, #28
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	f04f 0b00 	mov.w	fp, #0
 8009150:	e7ca      	b.n	80090e8 <_scanf_i+0x15c>
 8009152:	07ca      	lsls	r2, r1, #31
 8009154:	bf4c      	ite	mi
 8009156:	8018      	strhmi	r0, [r3, #0]
 8009158:	6018      	strpl	r0, [r3, #0]
 800915a:	e7eb      	b.n	8009134 <_scanf_i+0x1a8>
 800915c:	2001      	movs	r0, #1
 800915e:	e7f2      	b.n	8009146 <_scanf_i+0x1ba>
 8009160:	0800a2a0 	.word	0x0800a2a0
 8009164:	08008891 	.word	0x08008891
 8009168:	08009c55 	.word	0x08009c55
 800916c:	0800a6b2 	.word	0x0800a6b2

08009170 <__sflush_r>:
 8009170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	0716      	lsls	r6, r2, #28
 8009178:	4605      	mov	r5, r0
 800917a:	460c      	mov	r4, r1
 800917c:	d454      	bmi.n	8009228 <__sflush_r+0xb8>
 800917e:	684b      	ldr	r3, [r1, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	dc02      	bgt.n	800918a <__sflush_r+0x1a>
 8009184:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009186:	2b00      	cmp	r3, #0
 8009188:	dd48      	ble.n	800921c <__sflush_r+0xac>
 800918a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800918c:	2e00      	cmp	r6, #0
 800918e:	d045      	beq.n	800921c <__sflush_r+0xac>
 8009190:	2300      	movs	r3, #0
 8009192:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009196:	682f      	ldr	r7, [r5, #0]
 8009198:	6a21      	ldr	r1, [r4, #32]
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	d030      	beq.n	8009200 <__sflush_r+0x90>
 800919e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	0759      	lsls	r1, r3, #29
 80091a4:	d505      	bpl.n	80091b2 <__sflush_r+0x42>
 80091a6:	6863      	ldr	r3, [r4, #4]
 80091a8:	1ad2      	subs	r2, r2, r3
 80091aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091ac:	b10b      	cbz	r3, 80091b2 <__sflush_r+0x42>
 80091ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091b0:	1ad2      	subs	r2, r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	4628      	mov	r0, r5
 80091b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091b8:	6a21      	ldr	r1, [r4, #32]
 80091ba:	47b0      	blx	r6
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	d106      	bne.n	80091d0 <__sflush_r+0x60>
 80091c2:	6829      	ldr	r1, [r5, #0]
 80091c4:	291d      	cmp	r1, #29
 80091c6:	d82b      	bhi.n	8009220 <__sflush_r+0xb0>
 80091c8:	4a28      	ldr	r2, [pc, #160]	@ (800926c <__sflush_r+0xfc>)
 80091ca:	410a      	asrs	r2, r1
 80091cc:	07d6      	lsls	r6, r2, #31
 80091ce:	d427      	bmi.n	8009220 <__sflush_r+0xb0>
 80091d0:	2200      	movs	r2, #0
 80091d2:	6062      	str	r2, [r4, #4]
 80091d4:	6922      	ldr	r2, [r4, #16]
 80091d6:	04d9      	lsls	r1, r3, #19
 80091d8:	6022      	str	r2, [r4, #0]
 80091da:	d504      	bpl.n	80091e6 <__sflush_r+0x76>
 80091dc:	1c42      	adds	r2, r0, #1
 80091de:	d101      	bne.n	80091e4 <__sflush_r+0x74>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b903      	cbnz	r3, 80091e6 <__sflush_r+0x76>
 80091e4:	6560      	str	r0, [r4, #84]	@ 0x54
 80091e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091e8:	602f      	str	r7, [r5, #0]
 80091ea:	b1b9      	cbz	r1, 800921c <__sflush_r+0xac>
 80091ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091f0:	4299      	cmp	r1, r3
 80091f2:	d002      	beq.n	80091fa <__sflush_r+0x8a>
 80091f4:	4628      	mov	r0, r5
 80091f6:	f7fd ff2b 	bl	8007050 <_free_r>
 80091fa:	2300      	movs	r3, #0
 80091fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80091fe:	e00d      	b.n	800921c <__sflush_r+0xac>
 8009200:	2301      	movs	r3, #1
 8009202:	4628      	mov	r0, r5
 8009204:	47b0      	blx	r6
 8009206:	4602      	mov	r2, r0
 8009208:	1c50      	adds	r0, r2, #1
 800920a:	d1c9      	bne.n	80091a0 <__sflush_r+0x30>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0c6      	beq.n	80091a0 <__sflush_r+0x30>
 8009212:	2b1d      	cmp	r3, #29
 8009214:	d001      	beq.n	800921a <__sflush_r+0xaa>
 8009216:	2b16      	cmp	r3, #22
 8009218:	d11d      	bne.n	8009256 <__sflush_r+0xe6>
 800921a:	602f      	str	r7, [r5, #0]
 800921c:	2000      	movs	r0, #0
 800921e:	e021      	b.n	8009264 <__sflush_r+0xf4>
 8009220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009224:	b21b      	sxth	r3, r3
 8009226:	e01a      	b.n	800925e <__sflush_r+0xee>
 8009228:	690f      	ldr	r7, [r1, #16]
 800922a:	2f00      	cmp	r7, #0
 800922c:	d0f6      	beq.n	800921c <__sflush_r+0xac>
 800922e:	0793      	lsls	r3, r2, #30
 8009230:	bf18      	it	ne
 8009232:	2300      	movne	r3, #0
 8009234:	680e      	ldr	r6, [r1, #0]
 8009236:	bf08      	it	eq
 8009238:	694b      	ldreq	r3, [r1, #20]
 800923a:	1bf6      	subs	r6, r6, r7
 800923c:	600f      	str	r7, [r1, #0]
 800923e:	608b      	str	r3, [r1, #8]
 8009240:	2e00      	cmp	r6, #0
 8009242:	ddeb      	ble.n	800921c <__sflush_r+0xac>
 8009244:	4633      	mov	r3, r6
 8009246:	463a      	mov	r2, r7
 8009248:	4628      	mov	r0, r5
 800924a:	6a21      	ldr	r1, [r4, #32]
 800924c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009250:	47e0      	blx	ip
 8009252:	2800      	cmp	r0, #0
 8009254:	dc07      	bgt.n	8009266 <__sflush_r+0xf6>
 8009256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800925a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009266:	4407      	add	r7, r0
 8009268:	1a36      	subs	r6, r6, r0
 800926a:	e7e9      	b.n	8009240 <__sflush_r+0xd0>
 800926c:	dfbffffe 	.word	0xdfbffffe

08009270 <_fflush_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	690b      	ldr	r3, [r1, #16]
 8009274:	4605      	mov	r5, r0
 8009276:	460c      	mov	r4, r1
 8009278:	b913      	cbnz	r3, 8009280 <_fflush_r+0x10>
 800927a:	2500      	movs	r5, #0
 800927c:	4628      	mov	r0, r5
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	b118      	cbz	r0, 800928a <_fflush_r+0x1a>
 8009282:	6a03      	ldr	r3, [r0, #32]
 8009284:	b90b      	cbnz	r3, 800928a <_fflush_r+0x1a>
 8009286:	f7fc fed9 	bl	800603c <__sinit>
 800928a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0f3      	beq.n	800927a <_fflush_r+0xa>
 8009292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009294:	07d0      	lsls	r0, r2, #31
 8009296:	d404      	bmi.n	80092a2 <_fflush_r+0x32>
 8009298:	0599      	lsls	r1, r3, #22
 800929a:	d402      	bmi.n	80092a2 <_fflush_r+0x32>
 800929c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800929e:	f7fd f870 	bl	8006382 <__retarget_lock_acquire_recursive>
 80092a2:	4628      	mov	r0, r5
 80092a4:	4621      	mov	r1, r4
 80092a6:	f7ff ff63 	bl	8009170 <__sflush_r>
 80092aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092ac:	4605      	mov	r5, r0
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d4e4      	bmi.n	800927c <_fflush_r+0xc>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	059b      	lsls	r3, r3, #22
 80092b6:	d4e1      	bmi.n	800927c <_fflush_r+0xc>
 80092b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ba:	f7fd f863 	bl	8006384 <__retarget_lock_release_recursive>
 80092be:	e7dd      	b.n	800927c <_fflush_r+0xc>

080092c0 <__sccl>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	780b      	ldrb	r3, [r1, #0]
 80092c4:	4604      	mov	r4, r0
 80092c6:	2b5e      	cmp	r3, #94	@ 0x5e
 80092c8:	bf0b      	itete	eq
 80092ca:	784b      	ldrbeq	r3, [r1, #1]
 80092cc:	1c4a      	addne	r2, r1, #1
 80092ce:	1c8a      	addeq	r2, r1, #2
 80092d0:	2100      	movne	r1, #0
 80092d2:	bf08      	it	eq
 80092d4:	2101      	moveq	r1, #1
 80092d6:	3801      	subs	r0, #1
 80092d8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80092dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80092e0:	42a8      	cmp	r0, r5
 80092e2:	d1fb      	bne.n	80092dc <__sccl+0x1c>
 80092e4:	b90b      	cbnz	r3, 80092ea <__sccl+0x2a>
 80092e6:	1e50      	subs	r0, r2, #1
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	f081 0101 	eor.w	r1, r1, #1
 80092ee:	4610      	mov	r0, r2
 80092f0:	54e1      	strb	r1, [r4, r3]
 80092f2:	4602      	mov	r2, r0
 80092f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80092f8:	2d2d      	cmp	r5, #45	@ 0x2d
 80092fa:	d005      	beq.n	8009308 <__sccl+0x48>
 80092fc:	2d5d      	cmp	r5, #93	@ 0x5d
 80092fe:	d016      	beq.n	800932e <__sccl+0x6e>
 8009300:	2d00      	cmp	r5, #0
 8009302:	d0f1      	beq.n	80092e8 <__sccl+0x28>
 8009304:	462b      	mov	r3, r5
 8009306:	e7f2      	b.n	80092ee <__sccl+0x2e>
 8009308:	7846      	ldrb	r6, [r0, #1]
 800930a:	2e5d      	cmp	r6, #93	@ 0x5d
 800930c:	d0fa      	beq.n	8009304 <__sccl+0x44>
 800930e:	42b3      	cmp	r3, r6
 8009310:	dcf8      	bgt.n	8009304 <__sccl+0x44>
 8009312:	461a      	mov	r2, r3
 8009314:	3002      	adds	r0, #2
 8009316:	3201      	adds	r2, #1
 8009318:	4296      	cmp	r6, r2
 800931a:	54a1      	strb	r1, [r4, r2]
 800931c:	dcfb      	bgt.n	8009316 <__sccl+0x56>
 800931e:	1af2      	subs	r2, r6, r3
 8009320:	3a01      	subs	r2, #1
 8009322:	42b3      	cmp	r3, r6
 8009324:	bfa8      	it	ge
 8009326:	2200      	movge	r2, #0
 8009328:	1c5d      	adds	r5, r3, #1
 800932a:	18ab      	adds	r3, r5, r2
 800932c:	e7e1      	b.n	80092f2 <__sccl+0x32>
 800932e:	4610      	mov	r0, r2
 8009330:	e7da      	b.n	80092e8 <__sccl+0x28>

08009332 <__submore>:
 8009332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	460c      	mov	r4, r1
 8009338:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800933a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800933e:	4299      	cmp	r1, r3
 8009340:	d11b      	bne.n	800937a <__submore+0x48>
 8009342:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009346:	f7fd fef5 	bl	8007134 <_malloc_r>
 800934a:	b918      	cbnz	r0, 8009354 <__submore+0x22>
 800934c:	f04f 30ff 	mov.w	r0, #4294967295
 8009350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009358:	63a3      	str	r3, [r4, #56]	@ 0x38
 800935a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800935e:	6360      	str	r0, [r4, #52]	@ 0x34
 8009360:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009364:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009368:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800936c:	7043      	strb	r3, [r0, #1]
 800936e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009372:	7003      	strb	r3, [r0, #0]
 8009374:	6020      	str	r0, [r4, #0]
 8009376:	2000      	movs	r0, #0
 8009378:	e7ea      	b.n	8009350 <__submore+0x1e>
 800937a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800937c:	0077      	lsls	r7, r6, #1
 800937e:	463a      	mov	r2, r7
 8009380:	f000 fbcb 	bl	8009b1a <_realloc_r>
 8009384:	4605      	mov	r5, r0
 8009386:	2800      	cmp	r0, #0
 8009388:	d0e0      	beq.n	800934c <__submore+0x1a>
 800938a:	eb00 0806 	add.w	r8, r0, r6
 800938e:	4601      	mov	r1, r0
 8009390:	4632      	mov	r2, r6
 8009392:	4640      	mov	r0, r8
 8009394:	f000 f830 	bl	80093f8 <memcpy>
 8009398:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800939c:	f8c4 8000 	str.w	r8, [r4]
 80093a0:	e7e9      	b.n	8009376 <__submore+0x44>

080093a2 <memmove>:
 80093a2:	4288      	cmp	r0, r1
 80093a4:	b510      	push	{r4, lr}
 80093a6:	eb01 0402 	add.w	r4, r1, r2
 80093aa:	d902      	bls.n	80093b2 <memmove+0x10>
 80093ac:	4284      	cmp	r4, r0
 80093ae:	4623      	mov	r3, r4
 80093b0:	d807      	bhi.n	80093c2 <memmove+0x20>
 80093b2:	1e43      	subs	r3, r0, #1
 80093b4:	42a1      	cmp	r1, r4
 80093b6:	d008      	beq.n	80093ca <memmove+0x28>
 80093b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093c0:	e7f8      	b.n	80093b4 <memmove+0x12>
 80093c2:	4601      	mov	r1, r0
 80093c4:	4402      	add	r2, r0
 80093c6:	428a      	cmp	r2, r1
 80093c8:	d100      	bne.n	80093cc <memmove+0x2a>
 80093ca:	bd10      	pop	{r4, pc}
 80093cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093d4:	e7f7      	b.n	80093c6 <memmove+0x24>
	...

080093d8 <_sbrk_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	2300      	movs	r3, #0
 80093dc:	4d05      	ldr	r5, [pc, #20]	@ (80093f4 <_sbrk_r+0x1c>)
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f9 fbd6 	bl	8002b94 <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_sbrk_r+0x1a>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_sbrk_r+0x1a>
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	20000560 	.word	0x20000560

080093f8 <memcpy>:
 80093f8:	440a      	add	r2, r1
 80093fa:	4291      	cmp	r1, r2
 80093fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009400:	d100      	bne.n	8009404 <memcpy+0xc>
 8009402:	4770      	bx	lr
 8009404:	b510      	push	{r4, lr}
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	4291      	cmp	r1, r2
 800940c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009410:	d1f9      	bne.n	8009406 <memcpy+0xe>
 8009412:	bd10      	pop	{r4, pc}

08009414 <nan>:
 8009414:	2000      	movs	r0, #0
 8009416:	4901      	ldr	r1, [pc, #4]	@ (800941c <nan+0x8>)
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	7ff80000 	.word	0x7ff80000

08009420 <__assert_func>:
 8009420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009422:	4614      	mov	r4, r2
 8009424:	461a      	mov	r2, r3
 8009426:	4b09      	ldr	r3, [pc, #36]	@ (800944c <__assert_func+0x2c>)
 8009428:	4605      	mov	r5, r0
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68d8      	ldr	r0, [r3, #12]
 800942e:	b954      	cbnz	r4, 8009446 <__assert_func+0x26>
 8009430:	4b07      	ldr	r3, [pc, #28]	@ (8009450 <__assert_func+0x30>)
 8009432:	461c      	mov	r4, r3
 8009434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009438:	9100      	str	r1, [sp, #0]
 800943a:	462b      	mov	r3, r5
 800943c:	4905      	ldr	r1, [pc, #20]	@ (8009454 <__assert_func+0x34>)
 800943e:	f000 fc19 	bl	8009c74 <fiprintf>
 8009442:	f000 fc29 	bl	8009c98 <abort>
 8009446:	4b04      	ldr	r3, [pc, #16]	@ (8009458 <__assert_func+0x38>)
 8009448:	e7f4      	b.n	8009434 <__assert_func+0x14>
 800944a:	bf00      	nop
 800944c:	20000024 	.word	0x20000024
 8009450:	0800a700 	.word	0x0800a700
 8009454:	0800a6d2 	.word	0x0800a6d2
 8009458:	0800a6c5 	.word	0x0800a6c5

0800945c <_calloc_r>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	fba1 5402 	umull	r5, r4, r1, r2
 8009462:	b93c      	cbnz	r4, 8009474 <_calloc_r+0x18>
 8009464:	4629      	mov	r1, r5
 8009466:	f7fd fe65 	bl	8007134 <_malloc_r>
 800946a:	4606      	mov	r6, r0
 800946c:	b928      	cbnz	r0, 800947a <_calloc_r+0x1e>
 800946e:	2600      	movs	r6, #0
 8009470:	4630      	mov	r0, r6
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	220c      	movs	r2, #12
 8009476:	6002      	str	r2, [r0, #0]
 8009478:	e7f9      	b.n	800946e <_calloc_r+0x12>
 800947a:	462a      	mov	r2, r5
 800947c:	4621      	mov	r1, r4
 800947e:	f7fc fed6 	bl	800622e <memset>
 8009482:	e7f5      	b.n	8009470 <_calloc_r+0x14>

08009484 <rshift>:
 8009484:	6903      	ldr	r3, [r0, #16]
 8009486:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800948a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800948e:	f100 0414 	add.w	r4, r0, #20
 8009492:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009496:	dd46      	ble.n	8009526 <rshift+0xa2>
 8009498:	f011 011f 	ands.w	r1, r1, #31
 800949c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094a4:	d10c      	bne.n	80094c0 <rshift+0x3c>
 80094a6:	4629      	mov	r1, r5
 80094a8:	f100 0710 	add.w	r7, r0, #16
 80094ac:	42b1      	cmp	r1, r6
 80094ae:	d335      	bcc.n	800951c <rshift+0x98>
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	1eea      	subs	r2, r5, #3
 80094b6:	4296      	cmp	r6, r2
 80094b8:	bf38      	it	cc
 80094ba:	2300      	movcc	r3, #0
 80094bc:	4423      	add	r3, r4
 80094be:	e015      	b.n	80094ec <rshift+0x68>
 80094c0:	46a1      	mov	r9, r4
 80094c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094c6:	f1c1 0820 	rsb	r8, r1, #32
 80094ca:	40cf      	lsrs	r7, r1
 80094cc:	f105 0e04 	add.w	lr, r5, #4
 80094d0:	4576      	cmp	r6, lr
 80094d2:	46f4      	mov	ip, lr
 80094d4:	d816      	bhi.n	8009504 <rshift+0x80>
 80094d6:	1a9a      	subs	r2, r3, r2
 80094d8:	0092      	lsls	r2, r2, #2
 80094da:	3a04      	subs	r2, #4
 80094dc:	3501      	adds	r5, #1
 80094de:	42ae      	cmp	r6, r5
 80094e0:	bf38      	it	cc
 80094e2:	2200      	movcc	r2, #0
 80094e4:	18a3      	adds	r3, r4, r2
 80094e6:	50a7      	str	r7, [r4, r2]
 80094e8:	b107      	cbz	r7, 80094ec <rshift+0x68>
 80094ea:	3304      	adds	r3, #4
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	eba3 0204 	sub.w	r2, r3, r4
 80094f2:	bf08      	it	eq
 80094f4:	2300      	moveq	r3, #0
 80094f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094fa:	6102      	str	r2, [r0, #16]
 80094fc:	bf08      	it	eq
 80094fe:	6143      	streq	r3, [r0, #20]
 8009500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009504:	f8dc c000 	ldr.w	ip, [ip]
 8009508:	fa0c fc08 	lsl.w	ip, ip, r8
 800950c:	ea4c 0707 	orr.w	r7, ip, r7
 8009510:	f849 7b04 	str.w	r7, [r9], #4
 8009514:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009518:	40cf      	lsrs	r7, r1
 800951a:	e7d9      	b.n	80094d0 <rshift+0x4c>
 800951c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009520:	f847 cf04 	str.w	ip, [r7, #4]!
 8009524:	e7c2      	b.n	80094ac <rshift+0x28>
 8009526:	4623      	mov	r3, r4
 8009528:	e7e0      	b.n	80094ec <rshift+0x68>

0800952a <__hexdig_fun>:
 800952a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800952e:	2b09      	cmp	r3, #9
 8009530:	d802      	bhi.n	8009538 <__hexdig_fun+0xe>
 8009532:	3820      	subs	r0, #32
 8009534:	b2c0      	uxtb	r0, r0
 8009536:	4770      	bx	lr
 8009538:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800953c:	2b05      	cmp	r3, #5
 800953e:	d801      	bhi.n	8009544 <__hexdig_fun+0x1a>
 8009540:	3847      	subs	r0, #71	@ 0x47
 8009542:	e7f7      	b.n	8009534 <__hexdig_fun+0xa>
 8009544:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009548:	2b05      	cmp	r3, #5
 800954a:	d801      	bhi.n	8009550 <__hexdig_fun+0x26>
 800954c:	3827      	subs	r0, #39	@ 0x27
 800954e:	e7f1      	b.n	8009534 <__hexdig_fun+0xa>
 8009550:	2000      	movs	r0, #0
 8009552:	4770      	bx	lr

08009554 <__gethex>:
 8009554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	468a      	mov	sl, r1
 800955a:	4690      	mov	r8, r2
 800955c:	b085      	sub	sp, #20
 800955e:	9302      	str	r3, [sp, #8]
 8009560:	680b      	ldr	r3, [r1, #0]
 8009562:	9001      	str	r0, [sp, #4]
 8009564:	1c9c      	adds	r4, r3, #2
 8009566:	46a1      	mov	r9, r4
 8009568:	f814 0b01 	ldrb.w	r0, [r4], #1
 800956c:	2830      	cmp	r0, #48	@ 0x30
 800956e:	d0fa      	beq.n	8009566 <__gethex+0x12>
 8009570:	eba9 0303 	sub.w	r3, r9, r3
 8009574:	f1a3 0b02 	sub.w	fp, r3, #2
 8009578:	f7ff ffd7 	bl	800952a <__hexdig_fun>
 800957c:	4605      	mov	r5, r0
 800957e:	2800      	cmp	r0, #0
 8009580:	d168      	bne.n	8009654 <__gethex+0x100>
 8009582:	2201      	movs	r2, #1
 8009584:	4648      	mov	r0, r9
 8009586:	499f      	ldr	r1, [pc, #636]	@ (8009804 <__gethex+0x2b0>)
 8009588:	f7fc fe74 	bl	8006274 <strncmp>
 800958c:	4607      	mov	r7, r0
 800958e:	2800      	cmp	r0, #0
 8009590:	d167      	bne.n	8009662 <__gethex+0x10e>
 8009592:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009596:	4626      	mov	r6, r4
 8009598:	f7ff ffc7 	bl	800952a <__hexdig_fun>
 800959c:	2800      	cmp	r0, #0
 800959e:	d062      	beq.n	8009666 <__gethex+0x112>
 80095a0:	4623      	mov	r3, r4
 80095a2:	7818      	ldrb	r0, [r3, #0]
 80095a4:	4699      	mov	r9, r3
 80095a6:	2830      	cmp	r0, #48	@ 0x30
 80095a8:	f103 0301 	add.w	r3, r3, #1
 80095ac:	d0f9      	beq.n	80095a2 <__gethex+0x4e>
 80095ae:	f7ff ffbc 	bl	800952a <__hexdig_fun>
 80095b2:	fab0 f580 	clz	r5, r0
 80095b6:	f04f 0b01 	mov.w	fp, #1
 80095ba:	096d      	lsrs	r5, r5, #5
 80095bc:	464a      	mov	r2, r9
 80095be:	4616      	mov	r6, r2
 80095c0:	7830      	ldrb	r0, [r6, #0]
 80095c2:	3201      	adds	r2, #1
 80095c4:	f7ff ffb1 	bl	800952a <__hexdig_fun>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d1f8      	bne.n	80095be <__gethex+0x6a>
 80095cc:	2201      	movs	r2, #1
 80095ce:	4630      	mov	r0, r6
 80095d0:	498c      	ldr	r1, [pc, #560]	@ (8009804 <__gethex+0x2b0>)
 80095d2:	f7fc fe4f 	bl	8006274 <strncmp>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d13f      	bne.n	800965a <__gethex+0x106>
 80095da:	b944      	cbnz	r4, 80095ee <__gethex+0x9a>
 80095dc:	1c74      	adds	r4, r6, #1
 80095de:	4622      	mov	r2, r4
 80095e0:	4616      	mov	r6, r2
 80095e2:	7830      	ldrb	r0, [r6, #0]
 80095e4:	3201      	adds	r2, #1
 80095e6:	f7ff ffa0 	bl	800952a <__hexdig_fun>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d1f8      	bne.n	80095e0 <__gethex+0x8c>
 80095ee:	1ba4      	subs	r4, r4, r6
 80095f0:	00a7      	lsls	r7, r4, #2
 80095f2:	7833      	ldrb	r3, [r6, #0]
 80095f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80095f8:	2b50      	cmp	r3, #80	@ 0x50
 80095fa:	d13e      	bne.n	800967a <__gethex+0x126>
 80095fc:	7873      	ldrb	r3, [r6, #1]
 80095fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009600:	d033      	beq.n	800966a <__gethex+0x116>
 8009602:	2b2d      	cmp	r3, #45	@ 0x2d
 8009604:	d034      	beq.n	8009670 <__gethex+0x11c>
 8009606:	2400      	movs	r4, #0
 8009608:	1c71      	adds	r1, r6, #1
 800960a:	7808      	ldrb	r0, [r1, #0]
 800960c:	f7ff ff8d 	bl	800952a <__hexdig_fun>
 8009610:	1e43      	subs	r3, r0, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b18      	cmp	r3, #24
 8009616:	d830      	bhi.n	800967a <__gethex+0x126>
 8009618:	f1a0 0210 	sub.w	r2, r0, #16
 800961c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009620:	f7ff ff83 	bl	800952a <__hexdig_fun>
 8009624:	f100 3cff 	add.w	ip, r0, #4294967295
 8009628:	fa5f fc8c 	uxtb.w	ip, ip
 800962c:	f1bc 0f18 	cmp.w	ip, #24
 8009630:	f04f 030a 	mov.w	r3, #10
 8009634:	d91e      	bls.n	8009674 <__gethex+0x120>
 8009636:	b104      	cbz	r4, 800963a <__gethex+0xe6>
 8009638:	4252      	negs	r2, r2
 800963a:	4417      	add	r7, r2
 800963c:	f8ca 1000 	str.w	r1, [sl]
 8009640:	b1ed      	cbz	r5, 800967e <__gethex+0x12a>
 8009642:	f1bb 0f00 	cmp.w	fp, #0
 8009646:	bf0c      	ite	eq
 8009648:	2506      	moveq	r5, #6
 800964a:	2500      	movne	r5, #0
 800964c:	4628      	mov	r0, r5
 800964e:	b005      	add	sp, #20
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	2500      	movs	r5, #0
 8009656:	462c      	mov	r4, r5
 8009658:	e7b0      	b.n	80095bc <__gethex+0x68>
 800965a:	2c00      	cmp	r4, #0
 800965c:	d1c7      	bne.n	80095ee <__gethex+0x9a>
 800965e:	4627      	mov	r7, r4
 8009660:	e7c7      	b.n	80095f2 <__gethex+0x9e>
 8009662:	464e      	mov	r6, r9
 8009664:	462f      	mov	r7, r5
 8009666:	2501      	movs	r5, #1
 8009668:	e7c3      	b.n	80095f2 <__gethex+0x9e>
 800966a:	2400      	movs	r4, #0
 800966c:	1cb1      	adds	r1, r6, #2
 800966e:	e7cc      	b.n	800960a <__gethex+0xb6>
 8009670:	2401      	movs	r4, #1
 8009672:	e7fb      	b.n	800966c <__gethex+0x118>
 8009674:	fb03 0002 	mla	r0, r3, r2, r0
 8009678:	e7ce      	b.n	8009618 <__gethex+0xc4>
 800967a:	4631      	mov	r1, r6
 800967c:	e7de      	b.n	800963c <__gethex+0xe8>
 800967e:	4629      	mov	r1, r5
 8009680:	eba6 0309 	sub.w	r3, r6, r9
 8009684:	3b01      	subs	r3, #1
 8009686:	2b07      	cmp	r3, #7
 8009688:	dc0a      	bgt.n	80096a0 <__gethex+0x14c>
 800968a:	9801      	ldr	r0, [sp, #4]
 800968c:	f7fd fdde 	bl	800724c <_Balloc>
 8009690:	4604      	mov	r4, r0
 8009692:	b940      	cbnz	r0, 80096a6 <__gethex+0x152>
 8009694:	4602      	mov	r2, r0
 8009696:	21e4      	movs	r1, #228	@ 0xe4
 8009698:	4b5b      	ldr	r3, [pc, #364]	@ (8009808 <__gethex+0x2b4>)
 800969a:	485c      	ldr	r0, [pc, #368]	@ (800980c <__gethex+0x2b8>)
 800969c:	f7ff fec0 	bl	8009420 <__assert_func>
 80096a0:	3101      	adds	r1, #1
 80096a2:	105b      	asrs	r3, r3, #1
 80096a4:	e7ef      	b.n	8009686 <__gethex+0x132>
 80096a6:	2300      	movs	r3, #0
 80096a8:	f100 0a14 	add.w	sl, r0, #20
 80096ac:	4655      	mov	r5, sl
 80096ae:	469b      	mov	fp, r3
 80096b0:	45b1      	cmp	r9, r6
 80096b2:	d337      	bcc.n	8009724 <__gethex+0x1d0>
 80096b4:	f845 bb04 	str.w	fp, [r5], #4
 80096b8:	eba5 050a 	sub.w	r5, r5, sl
 80096bc:	10ad      	asrs	r5, r5, #2
 80096be:	6125      	str	r5, [r4, #16]
 80096c0:	4658      	mov	r0, fp
 80096c2:	f7fd feb5 	bl	8007430 <__hi0bits>
 80096c6:	016d      	lsls	r5, r5, #5
 80096c8:	f8d8 6000 	ldr.w	r6, [r8]
 80096cc:	1a2d      	subs	r5, r5, r0
 80096ce:	42b5      	cmp	r5, r6
 80096d0:	dd54      	ble.n	800977c <__gethex+0x228>
 80096d2:	1bad      	subs	r5, r5, r6
 80096d4:	4629      	mov	r1, r5
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7fe fa3d 	bl	8007b56 <__any_on>
 80096dc:	4681      	mov	r9, r0
 80096de:	b178      	cbz	r0, 8009700 <__gethex+0x1ac>
 80096e0:	f04f 0901 	mov.w	r9, #1
 80096e4:	1e6b      	subs	r3, r5, #1
 80096e6:	1159      	asrs	r1, r3, #5
 80096e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80096ec:	f003 021f 	and.w	r2, r3, #31
 80096f0:	fa09 f202 	lsl.w	r2, r9, r2
 80096f4:	420a      	tst	r2, r1
 80096f6:	d003      	beq.n	8009700 <__gethex+0x1ac>
 80096f8:	454b      	cmp	r3, r9
 80096fa:	dc36      	bgt.n	800976a <__gethex+0x216>
 80096fc:	f04f 0902 	mov.w	r9, #2
 8009700:	4629      	mov	r1, r5
 8009702:	4620      	mov	r0, r4
 8009704:	f7ff febe 	bl	8009484 <rshift>
 8009708:	442f      	add	r7, r5
 800970a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800970e:	42bb      	cmp	r3, r7
 8009710:	da42      	bge.n	8009798 <__gethex+0x244>
 8009712:	4621      	mov	r1, r4
 8009714:	9801      	ldr	r0, [sp, #4]
 8009716:	f7fd fdd9 	bl	80072cc <_Bfree>
 800971a:	2300      	movs	r3, #0
 800971c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800971e:	25a3      	movs	r5, #163	@ 0xa3
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	e793      	b.n	800964c <__gethex+0xf8>
 8009724:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009728:	2a2e      	cmp	r2, #46	@ 0x2e
 800972a:	d012      	beq.n	8009752 <__gethex+0x1fe>
 800972c:	2b20      	cmp	r3, #32
 800972e:	d104      	bne.n	800973a <__gethex+0x1e6>
 8009730:	f845 bb04 	str.w	fp, [r5], #4
 8009734:	f04f 0b00 	mov.w	fp, #0
 8009738:	465b      	mov	r3, fp
 800973a:	7830      	ldrb	r0, [r6, #0]
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	f7ff fef4 	bl	800952a <__hexdig_fun>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	f000 000f 	and.w	r0, r0, #15
 8009748:	4098      	lsls	r0, r3
 800974a:	ea4b 0b00 	orr.w	fp, fp, r0
 800974e:	3304      	adds	r3, #4
 8009750:	e7ae      	b.n	80096b0 <__gethex+0x15c>
 8009752:	45b1      	cmp	r9, r6
 8009754:	d8ea      	bhi.n	800972c <__gethex+0x1d8>
 8009756:	2201      	movs	r2, #1
 8009758:	4630      	mov	r0, r6
 800975a:	492a      	ldr	r1, [pc, #168]	@ (8009804 <__gethex+0x2b0>)
 800975c:	9303      	str	r3, [sp, #12]
 800975e:	f7fc fd89 	bl	8006274 <strncmp>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	2800      	cmp	r0, #0
 8009766:	d1e1      	bne.n	800972c <__gethex+0x1d8>
 8009768:	e7a2      	b.n	80096b0 <__gethex+0x15c>
 800976a:	4620      	mov	r0, r4
 800976c:	1ea9      	subs	r1, r5, #2
 800976e:	f7fe f9f2 	bl	8007b56 <__any_on>
 8009772:	2800      	cmp	r0, #0
 8009774:	d0c2      	beq.n	80096fc <__gethex+0x1a8>
 8009776:	f04f 0903 	mov.w	r9, #3
 800977a:	e7c1      	b.n	8009700 <__gethex+0x1ac>
 800977c:	da09      	bge.n	8009792 <__gethex+0x23e>
 800977e:	1b75      	subs	r5, r6, r5
 8009780:	4621      	mov	r1, r4
 8009782:	462a      	mov	r2, r5
 8009784:	9801      	ldr	r0, [sp, #4]
 8009786:	f7fd ffb7 	bl	80076f8 <__lshift>
 800978a:	4604      	mov	r4, r0
 800978c:	1b7f      	subs	r7, r7, r5
 800978e:	f100 0a14 	add.w	sl, r0, #20
 8009792:	f04f 0900 	mov.w	r9, #0
 8009796:	e7b8      	b.n	800970a <__gethex+0x1b6>
 8009798:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800979c:	42bd      	cmp	r5, r7
 800979e:	dd6f      	ble.n	8009880 <__gethex+0x32c>
 80097a0:	1bed      	subs	r5, r5, r7
 80097a2:	42ae      	cmp	r6, r5
 80097a4:	dc34      	bgt.n	8009810 <__gethex+0x2bc>
 80097a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d022      	beq.n	80097f4 <__gethex+0x2a0>
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d024      	beq.n	80097fc <__gethex+0x2a8>
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d115      	bne.n	80097e2 <__gethex+0x28e>
 80097b6:	42ae      	cmp	r6, r5
 80097b8:	d113      	bne.n	80097e2 <__gethex+0x28e>
 80097ba:	2e01      	cmp	r6, #1
 80097bc:	d10b      	bne.n	80097d6 <__gethex+0x282>
 80097be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097c2:	9a02      	ldr	r2, [sp, #8]
 80097c4:	2562      	movs	r5, #98	@ 0x62
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	2301      	movs	r3, #1
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	f8ca 3000 	str.w	r3, [sl]
 80097d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097d2:	601c      	str	r4, [r3, #0]
 80097d4:	e73a      	b.n	800964c <__gethex+0xf8>
 80097d6:	4620      	mov	r0, r4
 80097d8:	1e71      	subs	r1, r6, #1
 80097da:	f7fe f9bc 	bl	8007b56 <__any_on>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1ed      	bne.n	80097be <__gethex+0x26a>
 80097e2:	4621      	mov	r1, r4
 80097e4:	9801      	ldr	r0, [sp, #4]
 80097e6:	f7fd fd71 	bl	80072cc <_Bfree>
 80097ea:	2300      	movs	r3, #0
 80097ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ee:	2550      	movs	r5, #80	@ 0x50
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e72b      	b.n	800964c <__gethex+0xf8>
 80097f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f3      	bne.n	80097e2 <__gethex+0x28e>
 80097fa:	e7e0      	b.n	80097be <__gethex+0x26a>
 80097fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1dd      	bne.n	80097be <__gethex+0x26a>
 8009802:	e7ee      	b.n	80097e2 <__gethex+0x28e>
 8009804:	0800a538 	.word	0x0800a538
 8009808:	0800a3cd 	.word	0x0800a3cd
 800980c:	0800a701 	.word	0x0800a701
 8009810:	1e6f      	subs	r7, r5, #1
 8009812:	f1b9 0f00 	cmp.w	r9, #0
 8009816:	d130      	bne.n	800987a <__gethex+0x326>
 8009818:	b127      	cbz	r7, 8009824 <__gethex+0x2d0>
 800981a:	4639      	mov	r1, r7
 800981c:	4620      	mov	r0, r4
 800981e:	f7fe f99a 	bl	8007b56 <__any_on>
 8009822:	4681      	mov	r9, r0
 8009824:	2301      	movs	r3, #1
 8009826:	4629      	mov	r1, r5
 8009828:	1b76      	subs	r6, r6, r5
 800982a:	2502      	movs	r5, #2
 800982c:	117a      	asrs	r2, r7, #5
 800982e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009832:	f007 071f 	and.w	r7, r7, #31
 8009836:	40bb      	lsls	r3, r7
 8009838:	4213      	tst	r3, r2
 800983a:	4620      	mov	r0, r4
 800983c:	bf18      	it	ne
 800983e:	f049 0902 	orrne.w	r9, r9, #2
 8009842:	f7ff fe1f 	bl	8009484 <rshift>
 8009846:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800984a:	f1b9 0f00 	cmp.w	r9, #0
 800984e:	d047      	beq.n	80098e0 <__gethex+0x38c>
 8009850:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d015      	beq.n	8009884 <__gethex+0x330>
 8009858:	2b03      	cmp	r3, #3
 800985a:	d017      	beq.n	800988c <__gethex+0x338>
 800985c:	2b01      	cmp	r3, #1
 800985e:	d109      	bne.n	8009874 <__gethex+0x320>
 8009860:	f019 0f02 	tst.w	r9, #2
 8009864:	d006      	beq.n	8009874 <__gethex+0x320>
 8009866:	f8da 3000 	ldr.w	r3, [sl]
 800986a:	ea49 0903 	orr.w	r9, r9, r3
 800986e:	f019 0f01 	tst.w	r9, #1
 8009872:	d10e      	bne.n	8009892 <__gethex+0x33e>
 8009874:	f045 0510 	orr.w	r5, r5, #16
 8009878:	e032      	b.n	80098e0 <__gethex+0x38c>
 800987a:	f04f 0901 	mov.w	r9, #1
 800987e:	e7d1      	b.n	8009824 <__gethex+0x2d0>
 8009880:	2501      	movs	r5, #1
 8009882:	e7e2      	b.n	800984a <__gethex+0x2f6>
 8009884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009886:	f1c3 0301 	rsb	r3, r3, #1
 800988a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800988c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0f0      	beq.n	8009874 <__gethex+0x320>
 8009892:	f04f 0c00 	mov.w	ip, #0
 8009896:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800989a:	f104 0314 	add.w	r3, r4, #20
 800989e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80098a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098b0:	d01b      	beq.n	80098ea <__gethex+0x396>
 80098b2:	3201      	adds	r2, #1
 80098b4:	6002      	str	r2, [r0, #0]
 80098b6:	2d02      	cmp	r5, #2
 80098b8:	f104 0314 	add.w	r3, r4, #20
 80098bc:	d13c      	bne.n	8009938 <__gethex+0x3e4>
 80098be:	f8d8 2000 	ldr.w	r2, [r8]
 80098c2:	3a01      	subs	r2, #1
 80098c4:	42b2      	cmp	r2, r6
 80098c6:	d109      	bne.n	80098dc <__gethex+0x388>
 80098c8:	2201      	movs	r2, #1
 80098ca:	1171      	asrs	r1, r6, #5
 80098cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098d0:	f006 061f 	and.w	r6, r6, #31
 80098d4:	fa02 f606 	lsl.w	r6, r2, r6
 80098d8:	421e      	tst	r6, r3
 80098da:	d13a      	bne.n	8009952 <__gethex+0x3fe>
 80098dc:	f045 0520 	orr.w	r5, r5, #32
 80098e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098e2:	601c      	str	r4, [r3, #0]
 80098e4:	9b02      	ldr	r3, [sp, #8]
 80098e6:	601f      	str	r7, [r3, #0]
 80098e8:	e6b0      	b.n	800964c <__gethex+0xf8>
 80098ea:	4299      	cmp	r1, r3
 80098ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80098f0:	d8d9      	bhi.n	80098a6 <__gethex+0x352>
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	459b      	cmp	fp, r3
 80098f6:	db17      	blt.n	8009928 <__gethex+0x3d4>
 80098f8:	6861      	ldr	r1, [r4, #4]
 80098fa:	9801      	ldr	r0, [sp, #4]
 80098fc:	3101      	adds	r1, #1
 80098fe:	f7fd fca5 	bl	800724c <_Balloc>
 8009902:	4681      	mov	r9, r0
 8009904:	b918      	cbnz	r0, 800990e <__gethex+0x3ba>
 8009906:	4602      	mov	r2, r0
 8009908:	2184      	movs	r1, #132	@ 0x84
 800990a:	4b19      	ldr	r3, [pc, #100]	@ (8009970 <__gethex+0x41c>)
 800990c:	e6c5      	b.n	800969a <__gethex+0x146>
 800990e:	6922      	ldr	r2, [r4, #16]
 8009910:	f104 010c 	add.w	r1, r4, #12
 8009914:	3202      	adds	r2, #2
 8009916:	0092      	lsls	r2, r2, #2
 8009918:	300c      	adds	r0, #12
 800991a:	f7ff fd6d 	bl	80093f8 <memcpy>
 800991e:	4621      	mov	r1, r4
 8009920:	9801      	ldr	r0, [sp, #4]
 8009922:	f7fd fcd3 	bl	80072cc <_Bfree>
 8009926:	464c      	mov	r4, r9
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	6122      	str	r2, [r4, #16]
 800992e:	2201      	movs	r2, #1
 8009930:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009934:	615a      	str	r2, [r3, #20]
 8009936:	e7be      	b.n	80098b6 <__gethex+0x362>
 8009938:	6922      	ldr	r2, [r4, #16]
 800993a:	455a      	cmp	r2, fp
 800993c:	dd0b      	ble.n	8009956 <__gethex+0x402>
 800993e:	2101      	movs	r1, #1
 8009940:	4620      	mov	r0, r4
 8009942:	f7ff fd9f 	bl	8009484 <rshift>
 8009946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800994a:	3701      	adds	r7, #1
 800994c:	42bb      	cmp	r3, r7
 800994e:	f6ff aee0 	blt.w	8009712 <__gethex+0x1be>
 8009952:	2501      	movs	r5, #1
 8009954:	e7c2      	b.n	80098dc <__gethex+0x388>
 8009956:	f016 061f 	ands.w	r6, r6, #31
 800995a:	d0fa      	beq.n	8009952 <__gethex+0x3fe>
 800995c:	4453      	add	r3, sl
 800995e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009962:	f7fd fd65 	bl	8007430 <__hi0bits>
 8009966:	f1c6 0620 	rsb	r6, r6, #32
 800996a:	42b0      	cmp	r0, r6
 800996c:	dbe7      	blt.n	800993e <__gethex+0x3ea>
 800996e:	e7f0      	b.n	8009952 <__gethex+0x3fe>
 8009970:	0800a3cd 	.word	0x0800a3cd

08009974 <L_shift>:
 8009974:	f1c2 0208 	rsb	r2, r2, #8
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	f1c2 0620 	rsb	r6, r2, #32
 8009980:	6843      	ldr	r3, [r0, #4]
 8009982:	6804      	ldr	r4, [r0, #0]
 8009984:	fa03 f506 	lsl.w	r5, r3, r6
 8009988:	432c      	orrs	r4, r5
 800998a:	40d3      	lsrs	r3, r2
 800998c:	6004      	str	r4, [r0, #0]
 800998e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009992:	4288      	cmp	r0, r1
 8009994:	d3f4      	bcc.n	8009980 <L_shift+0xc>
 8009996:	bd70      	pop	{r4, r5, r6, pc}

08009998 <__match>:
 8009998:	b530      	push	{r4, r5, lr}
 800999a:	6803      	ldr	r3, [r0, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099a2:	b914      	cbnz	r4, 80099aa <__match+0x12>
 80099a4:	6003      	str	r3, [r0, #0]
 80099a6:	2001      	movs	r0, #1
 80099a8:	bd30      	pop	{r4, r5, pc}
 80099aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80099b2:	2d19      	cmp	r5, #25
 80099b4:	bf98      	it	ls
 80099b6:	3220      	addls	r2, #32
 80099b8:	42a2      	cmp	r2, r4
 80099ba:	d0f0      	beq.n	800999e <__match+0x6>
 80099bc:	2000      	movs	r0, #0
 80099be:	e7f3      	b.n	80099a8 <__match+0x10>

080099c0 <__hexnan>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	2500      	movs	r5, #0
 80099c6:	680b      	ldr	r3, [r1, #0]
 80099c8:	4682      	mov	sl, r0
 80099ca:	115e      	asrs	r6, r3, #5
 80099cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099d0:	f013 031f 	ands.w	r3, r3, #31
 80099d4:	bf18      	it	ne
 80099d6:	3604      	addne	r6, #4
 80099d8:	1f37      	subs	r7, r6, #4
 80099da:	4690      	mov	r8, r2
 80099dc:	46b9      	mov	r9, r7
 80099de:	463c      	mov	r4, r7
 80099e0:	46ab      	mov	fp, r5
 80099e2:	b087      	sub	sp, #28
 80099e4:	6801      	ldr	r1, [r0, #0]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80099ec:	9502      	str	r5, [sp, #8]
 80099ee:	784a      	ldrb	r2, [r1, #1]
 80099f0:	1c4b      	adds	r3, r1, #1
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	b342      	cbz	r2, 8009a48 <__hexnan+0x88>
 80099f6:	4610      	mov	r0, r2
 80099f8:	9105      	str	r1, [sp, #20]
 80099fa:	9204      	str	r2, [sp, #16]
 80099fc:	f7ff fd95 	bl	800952a <__hexdig_fun>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d151      	bne.n	8009aa8 <__hexnan+0xe8>
 8009a04:	9a04      	ldr	r2, [sp, #16]
 8009a06:	9905      	ldr	r1, [sp, #20]
 8009a08:	2a20      	cmp	r2, #32
 8009a0a:	d818      	bhi.n	8009a3e <__hexnan+0x7e>
 8009a0c:	9b02      	ldr	r3, [sp, #8]
 8009a0e:	459b      	cmp	fp, r3
 8009a10:	dd13      	ble.n	8009a3a <__hexnan+0x7a>
 8009a12:	454c      	cmp	r4, r9
 8009a14:	d206      	bcs.n	8009a24 <__hexnan+0x64>
 8009a16:	2d07      	cmp	r5, #7
 8009a18:	dc04      	bgt.n	8009a24 <__hexnan+0x64>
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7ff ffa8 	bl	8009974 <L_shift>
 8009a24:	4544      	cmp	r4, r8
 8009a26:	d952      	bls.n	8009ace <__hexnan+0x10e>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f1a4 0904 	sub.w	r9, r4, #4
 8009a2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a32:	461d      	mov	r5, r3
 8009a34:	464c      	mov	r4, r9
 8009a36:	f8cd b008 	str.w	fp, [sp, #8]
 8009a3a:	9903      	ldr	r1, [sp, #12]
 8009a3c:	e7d7      	b.n	80099ee <__hexnan+0x2e>
 8009a3e:	2a29      	cmp	r2, #41	@ 0x29
 8009a40:	d157      	bne.n	8009af2 <__hexnan+0x132>
 8009a42:	3102      	adds	r1, #2
 8009a44:	f8ca 1000 	str.w	r1, [sl]
 8009a48:	f1bb 0f00 	cmp.w	fp, #0
 8009a4c:	d051      	beq.n	8009af2 <__hexnan+0x132>
 8009a4e:	454c      	cmp	r4, r9
 8009a50:	d206      	bcs.n	8009a60 <__hexnan+0xa0>
 8009a52:	2d07      	cmp	r5, #7
 8009a54:	dc04      	bgt.n	8009a60 <__hexnan+0xa0>
 8009a56:	462a      	mov	r2, r5
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff ff8a 	bl	8009974 <L_shift>
 8009a60:	4544      	cmp	r4, r8
 8009a62:	d936      	bls.n	8009ad2 <__hexnan+0x112>
 8009a64:	4623      	mov	r3, r4
 8009a66:	f1a8 0204 	sub.w	r2, r8, #4
 8009a6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a6e:	429f      	cmp	r7, r3
 8009a70:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a74:	d2f9      	bcs.n	8009a6a <__hexnan+0xaa>
 8009a76:	1b3b      	subs	r3, r7, r4
 8009a78:	f023 0303 	bic.w	r3, r3, #3
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	3401      	adds	r4, #1
 8009a80:	3e03      	subs	r6, #3
 8009a82:	42b4      	cmp	r4, r6
 8009a84:	bf88      	it	hi
 8009a86:	2304      	movhi	r3, #4
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4443      	add	r3, r8
 8009a8c:	f843 2b04 	str.w	r2, [r3], #4
 8009a90:	429f      	cmp	r7, r3
 8009a92:	d2fb      	bcs.n	8009a8c <__hexnan+0xcc>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	b91b      	cbnz	r3, 8009aa0 <__hexnan+0xe0>
 8009a98:	4547      	cmp	r7, r8
 8009a9a:	d128      	bne.n	8009aee <__hexnan+0x12e>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	2005      	movs	r0, #5
 8009aa2:	b007      	add	sp, #28
 8009aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa8:	3501      	adds	r5, #1
 8009aaa:	2d08      	cmp	r5, #8
 8009aac:	f10b 0b01 	add.w	fp, fp, #1
 8009ab0:	dd06      	ble.n	8009ac0 <__hexnan+0x100>
 8009ab2:	4544      	cmp	r4, r8
 8009ab4:	d9c1      	bls.n	8009a3a <__hexnan+0x7a>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2501      	movs	r5, #1
 8009aba:	f844 3c04 	str.w	r3, [r4, #-4]
 8009abe:	3c04      	subs	r4, #4
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	f000 000f 	and.w	r0, r0, #15
 8009ac6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009aca:	6020      	str	r0, [r4, #0]
 8009acc:	e7b5      	b.n	8009a3a <__hexnan+0x7a>
 8009ace:	2508      	movs	r5, #8
 8009ad0:	e7b3      	b.n	8009a3a <__hexnan+0x7a>
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0dd      	beq.n	8009a94 <__hexnan+0xd4>
 8009ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8009adc:	f1c3 0320 	rsb	r3, r3, #32
 8009ae0:	40da      	lsrs	r2, r3
 8009ae2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	f846 3c04 	str.w	r3, [r6, #-4]
 8009aec:	e7d2      	b.n	8009a94 <__hexnan+0xd4>
 8009aee:	3f04      	subs	r7, #4
 8009af0:	e7d0      	b.n	8009a94 <__hexnan+0xd4>
 8009af2:	2004      	movs	r0, #4
 8009af4:	e7d5      	b.n	8009aa2 <__hexnan+0xe2>

08009af6 <__ascii_mbtowc>:
 8009af6:	b082      	sub	sp, #8
 8009af8:	b901      	cbnz	r1, 8009afc <__ascii_mbtowc+0x6>
 8009afa:	a901      	add	r1, sp, #4
 8009afc:	b142      	cbz	r2, 8009b10 <__ascii_mbtowc+0x1a>
 8009afe:	b14b      	cbz	r3, 8009b14 <__ascii_mbtowc+0x1e>
 8009b00:	7813      	ldrb	r3, [r2, #0]
 8009b02:	600b      	str	r3, [r1, #0]
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	1e10      	subs	r0, r2, #0
 8009b08:	bf18      	it	ne
 8009b0a:	2001      	movne	r0, #1
 8009b0c:	b002      	add	sp, #8
 8009b0e:	4770      	bx	lr
 8009b10:	4610      	mov	r0, r2
 8009b12:	e7fb      	b.n	8009b0c <__ascii_mbtowc+0x16>
 8009b14:	f06f 0001 	mvn.w	r0, #1
 8009b18:	e7f8      	b.n	8009b0c <__ascii_mbtowc+0x16>

08009b1a <_realloc_r>:
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	4680      	mov	r8, r0
 8009b20:	4615      	mov	r5, r2
 8009b22:	460c      	mov	r4, r1
 8009b24:	b921      	cbnz	r1, 8009b30 <_realloc_r+0x16>
 8009b26:	4611      	mov	r1, r2
 8009b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2c:	f7fd bb02 	b.w	8007134 <_malloc_r>
 8009b30:	b92a      	cbnz	r2, 8009b3e <_realloc_r+0x24>
 8009b32:	f7fd fa8d 	bl	8007050 <_free_r>
 8009b36:	2400      	movs	r4, #0
 8009b38:	4620      	mov	r0, r4
 8009b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3e:	f000 f8b2 	bl	8009ca6 <_malloc_usable_size_r>
 8009b42:	4285      	cmp	r5, r0
 8009b44:	4606      	mov	r6, r0
 8009b46:	d802      	bhi.n	8009b4e <_realloc_r+0x34>
 8009b48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b4c:	d8f4      	bhi.n	8009b38 <_realloc_r+0x1e>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4640      	mov	r0, r8
 8009b52:	f7fd faef 	bl	8007134 <_malloc_r>
 8009b56:	4607      	mov	r7, r0
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0ec      	beq.n	8009b36 <_realloc_r+0x1c>
 8009b5c:	42b5      	cmp	r5, r6
 8009b5e:	462a      	mov	r2, r5
 8009b60:	4621      	mov	r1, r4
 8009b62:	bf28      	it	cs
 8009b64:	4632      	movcs	r2, r6
 8009b66:	f7ff fc47 	bl	80093f8 <memcpy>
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	f7fd fa6f 	bl	8007050 <_free_r>
 8009b72:	463c      	mov	r4, r7
 8009b74:	e7e0      	b.n	8009b38 <_realloc_r+0x1e>
	...

08009b78 <_strtoul_l.constprop.0>:
 8009b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b7c:	4686      	mov	lr, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	4e33      	ldr	r6, [pc, #204]	@ (8009c50 <_strtoul_l.constprop.0+0xd8>)
 8009b82:	4628      	mov	r0, r5
 8009b84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b88:	5d37      	ldrb	r7, [r6, r4]
 8009b8a:	f017 0708 	ands.w	r7, r7, #8
 8009b8e:	d1f8      	bne.n	8009b82 <_strtoul_l.constprop.0+0xa>
 8009b90:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b92:	d12f      	bne.n	8009bf4 <_strtoul_l.constprop.0+0x7c>
 8009b94:	2701      	movs	r7, #1
 8009b96:	782c      	ldrb	r4, [r5, #0]
 8009b98:	1c85      	adds	r5, r0, #2
 8009b9a:	f033 0010 	bics.w	r0, r3, #16
 8009b9e:	d109      	bne.n	8009bb4 <_strtoul_l.constprop.0+0x3c>
 8009ba0:	2c30      	cmp	r4, #48	@ 0x30
 8009ba2:	d12c      	bne.n	8009bfe <_strtoul_l.constprop.0+0x86>
 8009ba4:	7828      	ldrb	r0, [r5, #0]
 8009ba6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009baa:	2858      	cmp	r0, #88	@ 0x58
 8009bac:	d127      	bne.n	8009bfe <_strtoul_l.constprop.0+0x86>
 8009bae:	2310      	movs	r3, #16
 8009bb0:	786c      	ldrb	r4, [r5, #1]
 8009bb2:	3502      	adds	r5, #2
 8009bb4:	f04f 38ff 	mov.w	r8, #4294967295
 8009bb8:	fbb8 f8f3 	udiv	r8, r8, r3
 8009bbc:	2600      	movs	r6, #0
 8009bbe:	fb03 f908 	mul.w	r9, r3, r8
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	ea6f 0909 	mvn.w	r9, r9
 8009bc8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009bcc:	f1bc 0f09 	cmp.w	ip, #9
 8009bd0:	d81c      	bhi.n	8009c0c <_strtoul_l.constprop.0+0x94>
 8009bd2:	4664      	mov	r4, ip
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	dd2a      	ble.n	8009c2e <_strtoul_l.constprop.0+0xb6>
 8009bd8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009bdc:	d007      	beq.n	8009bee <_strtoul_l.constprop.0+0x76>
 8009bde:	4580      	cmp	r8, r0
 8009be0:	d322      	bcc.n	8009c28 <_strtoul_l.constprop.0+0xb0>
 8009be2:	d101      	bne.n	8009be8 <_strtoul_l.constprop.0+0x70>
 8009be4:	45a1      	cmp	r9, r4
 8009be6:	db1f      	blt.n	8009c28 <_strtoul_l.constprop.0+0xb0>
 8009be8:	2601      	movs	r6, #1
 8009bea:	fb00 4003 	mla	r0, r0, r3, r4
 8009bee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bf2:	e7e9      	b.n	8009bc8 <_strtoul_l.constprop.0+0x50>
 8009bf4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bf6:	bf04      	itt	eq
 8009bf8:	782c      	ldrbeq	r4, [r5, #0]
 8009bfa:	1c85      	addeq	r5, r0, #2
 8009bfc:	e7cd      	b.n	8009b9a <_strtoul_l.constprop.0+0x22>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1d8      	bne.n	8009bb4 <_strtoul_l.constprop.0+0x3c>
 8009c02:	2c30      	cmp	r4, #48	@ 0x30
 8009c04:	bf0c      	ite	eq
 8009c06:	2308      	moveq	r3, #8
 8009c08:	230a      	movne	r3, #10
 8009c0a:	e7d3      	b.n	8009bb4 <_strtoul_l.constprop.0+0x3c>
 8009c0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009c10:	f1bc 0f19 	cmp.w	ip, #25
 8009c14:	d801      	bhi.n	8009c1a <_strtoul_l.constprop.0+0xa2>
 8009c16:	3c37      	subs	r4, #55	@ 0x37
 8009c18:	e7dc      	b.n	8009bd4 <_strtoul_l.constprop.0+0x5c>
 8009c1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009c1e:	f1bc 0f19 	cmp.w	ip, #25
 8009c22:	d804      	bhi.n	8009c2e <_strtoul_l.constprop.0+0xb6>
 8009c24:	3c57      	subs	r4, #87	@ 0x57
 8009c26:	e7d5      	b.n	8009bd4 <_strtoul_l.constprop.0+0x5c>
 8009c28:	f04f 36ff 	mov.w	r6, #4294967295
 8009c2c:	e7df      	b.n	8009bee <_strtoul_l.constprop.0+0x76>
 8009c2e:	1c73      	adds	r3, r6, #1
 8009c30:	d106      	bne.n	8009c40 <_strtoul_l.constprop.0+0xc8>
 8009c32:	2322      	movs	r3, #34	@ 0x22
 8009c34:	4630      	mov	r0, r6
 8009c36:	f8ce 3000 	str.w	r3, [lr]
 8009c3a:	b932      	cbnz	r2, 8009c4a <_strtoul_l.constprop.0+0xd2>
 8009c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c40:	b107      	cbz	r7, 8009c44 <_strtoul_l.constprop.0+0xcc>
 8009c42:	4240      	negs	r0, r0
 8009c44:	2a00      	cmp	r2, #0
 8009c46:	d0f9      	beq.n	8009c3c <_strtoul_l.constprop.0+0xc4>
 8009c48:	b106      	cbz	r6, 8009c4c <_strtoul_l.constprop.0+0xd4>
 8009c4a:	1e69      	subs	r1, r5, #1
 8009c4c:	6011      	str	r1, [r2, #0]
 8009c4e:	e7f5      	b.n	8009c3c <_strtoul_l.constprop.0+0xc4>
 8009c50:	0800a591 	.word	0x0800a591

08009c54 <_strtoul_r>:
 8009c54:	f7ff bf90 	b.w	8009b78 <_strtoul_l.constprop.0>

08009c58 <__ascii_wctomb>:
 8009c58:	4603      	mov	r3, r0
 8009c5a:	4608      	mov	r0, r1
 8009c5c:	b141      	cbz	r1, 8009c70 <__ascii_wctomb+0x18>
 8009c5e:	2aff      	cmp	r2, #255	@ 0xff
 8009c60:	d904      	bls.n	8009c6c <__ascii_wctomb+0x14>
 8009c62:	228a      	movs	r2, #138	@ 0x8a
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	4770      	bx	lr
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	700a      	strb	r2, [r1, #0]
 8009c70:	4770      	bx	lr
	...

08009c74 <fiprintf>:
 8009c74:	b40e      	push	{r1, r2, r3}
 8009c76:	b503      	push	{r0, r1, lr}
 8009c78:	4601      	mov	r1, r0
 8009c7a:	ab03      	add	r3, sp, #12
 8009c7c:	4805      	ldr	r0, [pc, #20]	@ (8009c94 <fiprintf+0x20>)
 8009c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c82:	6800      	ldr	r0, [r0, #0]
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	f000 f83d 	bl	8009d04 <_vfiprintf_r>
 8009c8a:	b002      	add	sp, #8
 8009c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c90:	b003      	add	sp, #12
 8009c92:	4770      	bx	lr
 8009c94:	20000024 	.word	0x20000024

08009c98 <abort>:
 8009c98:	2006      	movs	r0, #6
 8009c9a:	b508      	push	{r3, lr}
 8009c9c:	f000 fa06 	bl	800a0ac <raise>
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f7f8 ff02 	bl	8002aaa <_exit>

08009ca6 <_malloc_usable_size_r>:
 8009ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009caa:	1f18      	subs	r0, r3, #4
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfbc      	itt	lt
 8009cb0:	580b      	ldrlt	r3, [r1, r0]
 8009cb2:	18c0      	addlt	r0, r0, r3
 8009cb4:	4770      	bx	lr

08009cb6 <__sfputc_r>:
 8009cb6:	6893      	ldr	r3, [r2, #8]
 8009cb8:	b410      	push	{r4}
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	6093      	str	r3, [r2, #8]
 8009cc0:	da07      	bge.n	8009cd2 <__sfputc_r+0x1c>
 8009cc2:	6994      	ldr	r4, [r2, #24]
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	db01      	blt.n	8009ccc <__sfputc_r+0x16>
 8009cc8:	290a      	cmp	r1, #10
 8009cca:	d102      	bne.n	8009cd2 <__sfputc_r+0x1c>
 8009ccc:	bc10      	pop	{r4}
 8009cce:	f000 b931 	b.w	8009f34 <__swbuf_r>
 8009cd2:	6813      	ldr	r3, [r2, #0]
 8009cd4:	1c58      	adds	r0, r3, #1
 8009cd6:	6010      	str	r0, [r2, #0]
 8009cd8:	7019      	strb	r1, [r3, #0]
 8009cda:	4608      	mov	r0, r1
 8009cdc:	bc10      	pop	{r4}
 8009cde:	4770      	bx	lr

08009ce0 <__sfputs_r>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	4614      	mov	r4, r2
 8009ce8:	18d5      	adds	r5, r2, r3
 8009cea:	42ac      	cmp	r4, r5
 8009cec:	d101      	bne.n	8009cf2 <__sfputs_r+0x12>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e007      	b.n	8009d02 <__sfputs_r+0x22>
 8009cf2:	463a      	mov	r2, r7
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfa:	f7ff ffdc 	bl	8009cb6 <__sfputc_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d1f3      	bne.n	8009cea <__sfputs_r+0xa>
 8009d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d04 <_vfiprintf_r>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	460d      	mov	r5, r1
 8009d0a:	4614      	mov	r4, r2
 8009d0c:	4698      	mov	r8, r3
 8009d0e:	4606      	mov	r6, r0
 8009d10:	b09d      	sub	sp, #116	@ 0x74
 8009d12:	b118      	cbz	r0, 8009d1c <_vfiprintf_r+0x18>
 8009d14:	6a03      	ldr	r3, [r0, #32]
 8009d16:	b90b      	cbnz	r3, 8009d1c <_vfiprintf_r+0x18>
 8009d18:	f7fc f990 	bl	800603c <__sinit>
 8009d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d1e:	07d9      	lsls	r1, r3, #31
 8009d20:	d405      	bmi.n	8009d2e <_vfiprintf_r+0x2a>
 8009d22:	89ab      	ldrh	r3, [r5, #12]
 8009d24:	059a      	lsls	r2, r3, #22
 8009d26:	d402      	bmi.n	8009d2e <_vfiprintf_r+0x2a>
 8009d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d2a:	f7fc fb2a 	bl	8006382 <__retarget_lock_acquire_recursive>
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	071b      	lsls	r3, r3, #28
 8009d32:	d501      	bpl.n	8009d38 <_vfiprintf_r+0x34>
 8009d34:	692b      	ldr	r3, [r5, #16]
 8009d36:	b99b      	cbnz	r3, 8009d60 <_vfiprintf_r+0x5c>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f000 f938 	bl	8009fb0 <__swsetup_r>
 8009d40:	b170      	cbz	r0, 8009d60 <_vfiprintf_r+0x5c>
 8009d42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d44:	07dc      	lsls	r4, r3, #31
 8009d46:	d504      	bpl.n	8009d52 <_vfiprintf_r+0x4e>
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	b01d      	add	sp, #116	@ 0x74
 8009d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	0598      	lsls	r0, r3, #22
 8009d56:	d4f7      	bmi.n	8009d48 <_vfiprintf_r+0x44>
 8009d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d5a:	f7fc fb13 	bl	8006384 <__retarget_lock_release_recursive>
 8009d5e:	e7f3      	b.n	8009d48 <_vfiprintf_r+0x44>
 8009d60:	2300      	movs	r3, #0
 8009d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d64:	2320      	movs	r3, #32
 8009d66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d6a:	2330      	movs	r3, #48	@ 0x30
 8009d6c:	f04f 0901 	mov.w	r9, #1
 8009d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009f20 <_vfiprintf_r+0x21c>
 8009d78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	469a      	mov	sl, r3
 8009d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d84:	b10a      	cbz	r2, 8009d8a <_vfiprintf_r+0x86>
 8009d86:	2a25      	cmp	r2, #37	@ 0x25
 8009d88:	d1f9      	bne.n	8009d7e <_vfiprintf_r+0x7a>
 8009d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d8e:	d00b      	beq.n	8009da8 <_vfiprintf_r+0xa4>
 8009d90:	465b      	mov	r3, fp
 8009d92:	4622      	mov	r2, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ffa2 	bl	8009ce0 <__sfputs_r>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f000 80a7 	beq.w	8009ef0 <_vfiprintf_r+0x1ec>
 8009da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009da4:	445a      	add	r2, fp
 8009da6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009da8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 809f 	beq.w	8009ef0 <_vfiprintf_r+0x1ec>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f04f 32ff 	mov.w	r2, #4294967295
 8009db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dbc:	f10a 0a01 	add.w	sl, sl, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	9307      	str	r3, [sp, #28]
 8009dc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dca:	4654      	mov	r4, sl
 8009dcc:	2205      	movs	r2, #5
 8009dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd2:	4853      	ldr	r0, [pc, #332]	@ (8009f20 <_vfiprintf_r+0x21c>)
 8009dd4:	f7fc fad7 	bl	8006386 <memchr>
 8009dd8:	9a04      	ldr	r2, [sp, #16]
 8009dda:	b9d8      	cbnz	r0, 8009e14 <_vfiprintf_r+0x110>
 8009ddc:	06d1      	lsls	r1, r2, #27
 8009dde:	bf44      	itt	mi
 8009de0:	2320      	movmi	r3, #32
 8009de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009de6:	0713      	lsls	r3, r2, #28
 8009de8:	bf44      	itt	mi
 8009dea:	232b      	movmi	r3, #43	@ 0x2b
 8009dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009df0:	f89a 3000 	ldrb.w	r3, [sl]
 8009df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009df6:	d015      	beq.n	8009e24 <_vfiprintf_r+0x120>
 8009df8:	4654      	mov	r4, sl
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	f04f 0c0a 	mov.w	ip, #10
 8009e00:	9a07      	ldr	r2, [sp, #28]
 8009e02:	4621      	mov	r1, r4
 8009e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e08:	3b30      	subs	r3, #48	@ 0x30
 8009e0a:	2b09      	cmp	r3, #9
 8009e0c:	d94b      	bls.n	8009ea6 <_vfiprintf_r+0x1a2>
 8009e0e:	b1b0      	cbz	r0, 8009e3e <_vfiprintf_r+0x13a>
 8009e10:	9207      	str	r2, [sp, #28]
 8009e12:	e014      	b.n	8009e3e <_vfiprintf_r+0x13a>
 8009e14:	eba0 0308 	sub.w	r3, r0, r8
 8009e18:	fa09 f303 	lsl.w	r3, r9, r3
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	46a2      	mov	sl, r4
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	e7d2      	b.n	8009dca <_vfiprintf_r+0xc6>
 8009e24:	9b03      	ldr	r3, [sp, #12]
 8009e26:	1d19      	adds	r1, r3, #4
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	9103      	str	r1, [sp, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bfbb      	ittet	lt
 8009e30:	425b      	neglt	r3, r3
 8009e32:	f042 0202 	orrlt.w	r2, r2, #2
 8009e36:	9307      	strge	r3, [sp, #28]
 8009e38:	9307      	strlt	r3, [sp, #28]
 8009e3a:	bfb8      	it	lt
 8009e3c:	9204      	strlt	r2, [sp, #16]
 8009e3e:	7823      	ldrb	r3, [r4, #0]
 8009e40:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e42:	d10a      	bne.n	8009e5a <_vfiprintf_r+0x156>
 8009e44:	7863      	ldrb	r3, [r4, #1]
 8009e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e48:	d132      	bne.n	8009eb0 <_vfiprintf_r+0x1ac>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	3402      	adds	r4, #2
 8009e4e:	1d1a      	adds	r2, r3, #4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	9203      	str	r2, [sp, #12]
 8009e54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e58:	9305      	str	r3, [sp, #20]
 8009e5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009f24 <_vfiprintf_r+0x220>
 8009e5e:	2203      	movs	r2, #3
 8009e60:	4650      	mov	r0, sl
 8009e62:	7821      	ldrb	r1, [r4, #0]
 8009e64:	f7fc fa8f 	bl	8006386 <memchr>
 8009e68:	b138      	cbz	r0, 8009e7a <_vfiprintf_r+0x176>
 8009e6a:	2240      	movs	r2, #64	@ 0x40
 8009e6c:	9b04      	ldr	r3, [sp, #16]
 8009e6e:	eba0 000a 	sub.w	r0, r0, sl
 8009e72:	4082      	lsls	r2, r0
 8009e74:	4313      	orrs	r3, r2
 8009e76:	3401      	adds	r4, #1
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7e:	2206      	movs	r2, #6
 8009e80:	4829      	ldr	r0, [pc, #164]	@ (8009f28 <_vfiprintf_r+0x224>)
 8009e82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e86:	f7fc fa7e 	bl	8006386 <memchr>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d03f      	beq.n	8009f0e <_vfiprintf_r+0x20a>
 8009e8e:	4b27      	ldr	r3, [pc, #156]	@ (8009f2c <_vfiprintf_r+0x228>)
 8009e90:	bb1b      	cbnz	r3, 8009eda <_vfiprintf_r+0x1d6>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	3307      	adds	r3, #7
 8009e96:	f023 0307 	bic.w	r3, r3, #7
 8009e9a:	3308      	adds	r3, #8
 8009e9c:	9303      	str	r3, [sp, #12]
 8009e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea0:	443b      	add	r3, r7
 8009ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ea4:	e76a      	b.n	8009d7c <_vfiprintf_r+0x78>
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eae:	e7a8      	b.n	8009e02 <_vfiprintf_r+0xfe>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f04f 0c0a 	mov.w	ip, #10
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	3401      	adds	r4, #1
 8009eba:	9305      	str	r3, [sp, #20]
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec2:	3a30      	subs	r2, #48	@ 0x30
 8009ec4:	2a09      	cmp	r2, #9
 8009ec6:	d903      	bls.n	8009ed0 <_vfiprintf_r+0x1cc>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0c6      	beq.n	8009e5a <_vfiprintf_r+0x156>
 8009ecc:	9105      	str	r1, [sp, #20]
 8009ece:	e7c4      	b.n	8009e5a <_vfiprintf_r+0x156>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed8:	e7f0      	b.n	8009ebc <_vfiprintf_r+0x1b8>
 8009eda:	ab03      	add	r3, sp, #12
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	462a      	mov	r2, r5
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4b13      	ldr	r3, [pc, #76]	@ (8009f30 <_vfiprintf_r+0x22c>)
 8009ee4:	a904      	add	r1, sp, #16
 8009ee6:	f7fb fa4f 	bl	8005388 <_printf_float>
 8009eea:	4607      	mov	r7, r0
 8009eec:	1c78      	adds	r0, r7, #1
 8009eee:	d1d6      	bne.n	8009e9e <_vfiprintf_r+0x19a>
 8009ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ef2:	07d9      	lsls	r1, r3, #31
 8009ef4:	d405      	bmi.n	8009f02 <_vfiprintf_r+0x1fe>
 8009ef6:	89ab      	ldrh	r3, [r5, #12]
 8009ef8:	059a      	lsls	r2, r3, #22
 8009efa:	d402      	bmi.n	8009f02 <_vfiprintf_r+0x1fe>
 8009efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009efe:	f7fc fa41 	bl	8006384 <__retarget_lock_release_recursive>
 8009f02:	89ab      	ldrh	r3, [r5, #12]
 8009f04:	065b      	lsls	r3, r3, #25
 8009f06:	f53f af1f 	bmi.w	8009d48 <_vfiprintf_r+0x44>
 8009f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f0c:	e71e      	b.n	8009d4c <_vfiprintf_r+0x48>
 8009f0e:	ab03      	add	r3, sp, #12
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	462a      	mov	r2, r5
 8009f14:	4630      	mov	r0, r6
 8009f16:	4b06      	ldr	r3, [pc, #24]	@ (8009f30 <_vfiprintf_r+0x22c>)
 8009f18:	a904      	add	r1, sp, #16
 8009f1a:	f7fb fcd3 	bl	80058c4 <_printf_i>
 8009f1e:	e7e4      	b.n	8009eea <_vfiprintf_r+0x1e6>
 8009f20:	0800a691 	.word	0x0800a691
 8009f24:	0800a697 	.word	0x0800a697
 8009f28:	0800a69b 	.word	0x0800a69b
 8009f2c:	08005389 	.word	0x08005389
 8009f30:	08009ce1 	.word	0x08009ce1

08009f34 <__swbuf_r>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	460e      	mov	r6, r1
 8009f38:	4614      	mov	r4, r2
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	b118      	cbz	r0, 8009f46 <__swbuf_r+0x12>
 8009f3e:	6a03      	ldr	r3, [r0, #32]
 8009f40:	b90b      	cbnz	r3, 8009f46 <__swbuf_r+0x12>
 8009f42:	f7fc f87b 	bl	800603c <__sinit>
 8009f46:	69a3      	ldr	r3, [r4, #24]
 8009f48:	60a3      	str	r3, [r4, #8]
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	071a      	lsls	r2, r3, #28
 8009f4e:	d501      	bpl.n	8009f54 <__swbuf_r+0x20>
 8009f50:	6923      	ldr	r3, [r4, #16]
 8009f52:	b943      	cbnz	r3, 8009f66 <__swbuf_r+0x32>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 f82a 	bl	8009fb0 <__swsetup_r>
 8009f5c:	b118      	cbz	r0, 8009f66 <__swbuf_r+0x32>
 8009f5e:	f04f 37ff 	mov.w	r7, #4294967295
 8009f62:	4638      	mov	r0, r7
 8009f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	6922      	ldr	r2, [r4, #16]
 8009f6a:	b2f6      	uxtb	r6, r6
 8009f6c:	1a98      	subs	r0, r3, r2
 8009f6e:	6963      	ldr	r3, [r4, #20]
 8009f70:	4637      	mov	r7, r6
 8009f72:	4283      	cmp	r3, r0
 8009f74:	dc05      	bgt.n	8009f82 <__swbuf_r+0x4e>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7ff f979 	bl	8009270 <_fflush_r>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d1ed      	bne.n	8009f5e <__swbuf_r+0x2a>
 8009f82:	68a3      	ldr	r3, [r4, #8]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	60a3      	str	r3, [r4, #8]
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	6022      	str	r2, [r4, #0]
 8009f8e:	701e      	strb	r6, [r3, #0]
 8009f90:	6962      	ldr	r2, [r4, #20]
 8009f92:	1c43      	adds	r3, r0, #1
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d004      	beq.n	8009fa2 <__swbuf_r+0x6e>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	07db      	lsls	r3, r3, #31
 8009f9c:	d5e1      	bpl.n	8009f62 <__swbuf_r+0x2e>
 8009f9e:	2e0a      	cmp	r6, #10
 8009fa0:	d1df      	bne.n	8009f62 <__swbuf_r+0x2e>
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f7ff f963 	bl	8009270 <_fflush_r>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d0d9      	beq.n	8009f62 <__swbuf_r+0x2e>
 8009fae:	e7d6      	b.n	8009f5e <__swbuf_r+0x2a>

08009fb0 <__swsetup_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4b29      	ldr	r3, [pc, #164]	@ (800a058 <__swsetup_r+0xa8>)
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	460c      	mov	r4, r1
 8009fba:	b118      	cbz	r0, 8009fc4 <__swsetup_r+0x14>
 8009fbc:	6a03      	ldr	r3, [r0, #32]
 8009fbe:	b90b      	cbnz	r3, 8009fc4 <__swsetup_r+0x14>
 8009fc0:	f7fc f83c 	bl	800603c <__sinit>
 8009fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc8:	0719      	lsls	r1, r3, #28
 8009fca:	d422      	bmi.n	800a012 <__swsetup_r+0x62>
 8009fcc:	06da      	lsls	r2, r3, #27
 8009fce:	d407      	bmi.n	8009fe0 <__swsetup_r+0x30>
 8009fd0:	2209      	movs	r2, #9
 8009fd2:	602a      	str	r2, [r5, #0]
 8009fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	e033      	b.n	800a048 <__swsetup_r+0x98>
 8009fe0:	0758      	lsls	r0, r3, #29
 8009fe2:	d512      	bpl.n	800a00a <__swsetup_r+0x5a>
 8009fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe6:	b141      	cbz	r1, 8009ffa <__swsetup_r+0x4a>
 8009fe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fec:	4299      	cmp	r1, r3
 8009fee:	d002      	beq.n	8009ff6 <__swsetup_r+0x46>
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f7fd f82d 	bl	8007050 <_free_r>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	2300      	movs	r3, #0
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f043 0308 	orr.w	r3, r3, #8
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	b94b      	cbnz	r3, 800a02a <__swsetup_r+0x7a>
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a020:	d003      	beq.n	800a02a <__swsetup_r+0x7a>
 800a022:	4621      	mov	r1, r4
 800a024:	4628      	mov	r0, r5
 800a026:	f000 f882 	bl	800a12e <__smakebuf_r>
 800a02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a02e:	f013 0201 	ands.w	r2, r3, #1
 800a032:	d00a      	beq.n	800a04a <__swsetup_r+0x9a>
 800a034:	2200      	movs	r2, #0
 800a036:	60a2      	str	r2, [r4, #8]
 800a038:	6962      	ldr	r2, [r4, #20]
 800a03a:	4252      	negs	r2, r2
 800a03c:	61a2      	str	r2, [r4, #24]
 800a03e:	6922      	ldr	r2, [r4, #16]
 800a040:	b942      	cbnz	r2, 800a054 <__swsetup_r+0xa4>
 800a042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a046:	d1c5      	bne.n	8009fd4 <__swsetup_r+0x24>
 800a048:	bd38      	pop	{r3, r4, r5, pc}
 800a04a:	0799      	lsls	r1, r3, #30
 800a04c:	bf58      	it	pl
 800a04e:	6962      	ldrpl	r2, [r4, #20]
 800a050:	60a2      	str	r2, [r4, #8]
 800a052:	e7f4      	b.n	800a03e <__swsetup_r+0x8e>
 800a054:	2000      	movs	r0, #0
 800a056:	e7f7      	b.n	800a048 <__swsetup_r+0x98>
 800a058:	20000024 	.word	0x20000024

0800a05c <_raise_r>:
 800a05c:	291f      	cmp	r1, #31
 800a05e:	b538      	push	{r3, r4, r5, lr}
 800a060:	4605      	mov	r5, r0
 800a062:	460c      	mov	r4, r1
 800a064:	d904      	bls.n	800a070 <_raise_r+0x14>
 800a066:	2316      	movs	r3, #22
 800a068:	6003      	str	r3, [r0, #0]
 800a06a:	f04f 30ff 	mov.w	r0, #4294967295
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a072:	b112      	cbz	r2, 800a07a <_raise_r+0x1e>
 800a074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a078:	b94b      	cbnz	r3, 800a08e <_raise_r+0x32>
 800a07a:	4628      	mov	r0, r5
 800a07c:	f000 f830 	bl	800a0e0 <_getpid_r>
 800a080:	4622      	mov	r2, r4
 800a082:	4601      	mov	r1, r0
 800a084:	4628      	mov	r0, r5
 800a086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a08a:	f000 b817 	b.w	800a0bc <_kill_r>
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d00a      	beq.n	800a0a8 <_raise_r+0x4c>
 800a092:	1c59      	adds	r1, r3, #1
 800a094:	d103      	bne.n	800a09e <_raise_r+0x42>
 800a096:	2316      	movs	r3, #22
 800a098:	6003      	str	r3, [r0, #0]
 800a09a:	2001      	movs	r0, #1
 800a09c:	e7e7      	b.n	800a06e <_raise_r+0x12>
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0a6:	4798      	blx	r3
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e7e0      	b.n	800a06e <_raise_r+0x12>

0800a0ac <raise>:
 800a0ac:	4b02      	ldr	r3, [pc, #8]	@ (800a0b8 <raise+0xc>)
 800a0ae:	4601      	mov	r1, r0
 800a0b0:	6818      	ldr	r0, [r3, #0]
 800a0b2:	f7ff bfd3 	b.w	800a05c <_raise_r>
 800a0b6:	bf00      	nop
 800a0b8:	20000024 	.word	0x20000024

0800a0bc <_kill_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4d06      	ldr	r5, [pc, #24]	@ (800a0dc <_kill_r+0x20>)
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	f7f8 fcde 	bl	8002a8a <_kill>
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	d102      	bne.n	800a0d8 <_kill_r+0x1c>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	b103      	cbz	r3, 800a0d8 <_kill_r+0x1c>
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000560 	.word	0x20000560

0800a0e0 <_getpid_r>:
 800a0e0:	f7f8 bccc 	b.w	8002a7c <_getpid>

0800a0e4 <__swhatbuf_r>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	2900      	cmp	r1, #0
 800a0f0:	461e      	mov	r6, r3
 800a0f2:	b096      	sub	sp, #88	@ 0x58
 800a0f4:	da0c      	bge.n	800a110 <__swhatbuf_r+0x2c>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0fe:	bf14      	ite	ne
 800a100:	2340      	movne	r3, #64	@ 0x40
 800a102:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a106:	2000      	movs	r0, #0
 800a108:	6031      	str	r1, [r6, #0]
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	b016      	add	sp, #88	@ 0x58
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	466a      	mov	r2, sp
 800a112:	f000 f849 	bl	800a1a8 <_fstat_r>
 800a116:	2800      	cmp	r0, #0
 800a118:	dbed      	blt.n	800a0f6 <__swhatbuf_r+0x12>
 800a11a:	9901      	ldr	r1, [sp, #4]
 800a11c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a120:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a124:	4259      	negs	r1, r3
 800a126:	4159      	adcs	r1, r3
 800a128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a12c:	e7eb      	b.n	800a106 <__swhatbuf_r+0x22>

0800a12e <__smakebuf_r>:
 800a12e:	898b      	ldrh	r3, [r1, #12]
 800a130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a132:	079d      	lsls	r5, r3, #30
 800a134:	4606      	mov	r6, r0
 800a136:	460c      	mov	r4, r1
 800a138:	d507      	bpl.n	800a14a <__smakebuf_r+0x1c>
 800a13a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a13e:	6023      	str	r3, [r4, #0]
 800a140:	6123      	str	r3, [r4, #16]
 800a142:	2301      	movs	r3, #1
 800a144:	6163      	str	r3, [r4, #20]
 800a146:	b003      	add	sp, #12
 800a148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a14a:	466a      	mov	r2, sp
 800a14c:	ab01      	add	r3, sp, #4
 800a14e:	f7ff ffc9 	bl	800a0e4 <__swhatbuf_r>
 800a152:	9f00      	ldr	r7, [sp, #0]
 800a154:	4605      	mov	r5, r0
 800a156:	4639      	mov	r1, r7
 800a158:	4630      	mov	r0, r6
 800a15a:	f7fc ffeb 	bl	8007134 <_malloc_r>
 800a15e:	b948      	cbnz	r0, 800a174 <__smakebuf_r+0x46>
 800a160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a164:	059a      	lsls	r2, r3, #22
 800a166:	d4ee      	bmi.n	800a146 <__smakebuf_r+0x18>
 800a168:	f023 0303 	bic.w	r3, r3, #3
 800a16c:	f043 0302 	orr.w	r3, r3, #2
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	e7e2      	b.n	800a13a <__smakebuf_r+0xc>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	9b01      	ldr	r3, [sp, #4]
 800a182:	6020      	str	r0, [r4, #0]
 800a184:	b15b      	cbz	r3, 800a19e <__smakebuf_r+0x70>
 800a186:	4630      	mov	r0, r6
 800a188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a18c:	f000 f81e 	bl	800a1cc <_isatty_r>
 800a190:	b128      	cbz	r0, 800a19e <__smakebuf_r+0x70>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f023 0303 	bic.w	r3, r3, #3
 800a198:	f043 0301 	orr.w	r3, r3, #1
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	431d      	orrs	r5, r3
 800a1a2:	81a5      	strh	r5, [r4, #12]
 800a1a4:	e7cf      	b.n	800a146 <__smakebuf_r+0x18>
	...

0800a1a8 <_fstat_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4d06      	ldr	r5, [pc, #24]	@ (800a1c8 <_fstat_r+0x20>)
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	f7f8 fcc7 	bl	8002b48 <_fstat>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d102      	bne.n	800a1c4 <_fstat_r+0x1c>
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	b103      	cbz	r3, 800a1c4 <_fstat_r+0x1c>
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	bd38      	pop	{r3, r4, r5, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000560 	.word	0x20000560

0800a1cc <_isatty_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4d05      	ldr	r5, [pc, #20]	@ (800a1e8 <_isatty_r+0x1c>)
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	602b      	str	r3, [r5, #0]
 800a1d8:	f7f8 fcc5 	bl	8002b66 <_isatty>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d102      	bne.n	800a1e6 <_isatty_r+0x1a>
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	b103      	cbz	r3, 800a1e6 <_isatty_r+0x1a>
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	bd38      	pop	{r3, r4, r5, pc}
 800a1e8:	20000560 	.word	0x20000560

0800a1ec <_init>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr

0800a1f8 <_fini>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr
