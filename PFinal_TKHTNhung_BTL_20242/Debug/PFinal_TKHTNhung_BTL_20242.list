
PFinal_TKHTNhung_BTL_20242.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da40  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800db50  0800db50  0000eb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1b8  0800e1b8  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1b8  0800e1b8  0000f1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1c0  0800e1c0  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1c0  0800e1c0  0000f1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e1c4  0800e1c4  0000f1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e1c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a8  200001d8  0800e3a0  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002380  0800e3a0  00010380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c887  00000000  00000000  00010201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f39  00000000  00000000  0002ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133b  00000000  00000000  00032268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000067d5  00000000  00000000  000335a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c99  00000000  00000000  00039d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f03  00000000  00000000  0005ca11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e6c  00000000  00000000  000f6958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000fe7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db38 	.word	0x0800db38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800db38 	.word	0x0800db38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char * ptr, int len) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <_write+0x28>)
 80010a8:	f003 fdc8 	bl	8004c3c <HAL_UART_Transmit>
  return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002d8 	.word	0x200002d8

080010bc <HAL_UART_RxCpltCallback>:
    char payload[64];
    uint32_t Time;
} UnifiedData_t;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	if (data_rx == '\n'){
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d109      	bne.n	80010e0 <HAL_UART_RxCpltCallback+0x24>
		uart_buff[uart_index] = '\0';
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_RxCpltCallback+0x74>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	5499      	strb	r1, [r3, r2]
		uart_flag = 1;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e00a      	b.n	80010f6 <HAL_UART_RxCpltCallback+0x3a>
	}else{
		uart_buff[uart_index++] = data_rx;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	b2d1      	uxtb	r1, r2
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010ea:	7011      	strb	r1, [r2, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 80010f0:	7819      	ldrb	r1, [r3, #0]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_UART_RxCpltCallback+0x74>)
 80010f4:	5499      	strb	r1, [r3, r2]
	}

	if (uart_flag == 1){
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10a      	bne.n	8001114 <HAL_UART_RxCpltCallback+0x58>
	  uart_flag = 0;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
	  uart_index = 0;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	  osSemaphoreRelease(Sem1_CMDHandle);
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_UART_RxCpltCallback+0x7c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f004 ff0e 	bl	8005f30 <osSemaphoreRelease>
	}
	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4904      	ldr	r1, [pc, #16]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 8001118:	4808      	ldr	r0, [pc, #32]	@ (800113c <HAL_UART_RxCpltCallback+0x80>)
 800111a:	f003 fe1a 	bl	8004d52 <HAL_UART_Receive_IT>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000340 	.word	0x20000340
 800112c:	200003a8 	.word	0x200003a8
 8001130:	20000344 	.word	0x20000344
 8001134:	200003a9 	.word	0x200003a9
 8001138:	20000330 	.word	0x20000330
 800113c:	200002d8 	.word	0x200002d8

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 ff10 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f888 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f000 f9ea 	bl	8001524 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001150:	f000 f9be 	bl	80014d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001154:	f000 f8c8 	bl	80012e8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001158:	f000 f8f4 	bl	8001344 <MX_TIM1_Init>
  MX_TIM4_Init();
 800115c:	f000 f942 	bl	80013e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8001160:	2201      	movs	r2, #1
 8001162:	4927      	ldr	r1, [pc, #156]	@ (8001200 <main+0xc0>)
 8001164:	4827      	ldr	r0, [pc, #156]	@ (8001204 <main+0xc4>)
 8001166:	f003 fdf4 	bl	8004d52 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800116a:	210c      	movs	r1, #12
 800116c:	4826      	ldr	r0, [pc, #152]	@ (8001208 <main+0xc8>)
 800116e:	f002 feb5 	bl	8003edc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001172:	f004 fce5 	bl	8005b40 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem1_CMD */
  Sem1_CMDHandle = osSemaphoreNew(1, 0, &Sem1_CMD_attributes);
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <main+0xcc>)
 8001178:	2100      	movs	r1, #0
 800117a:	2001      	movs	r0, #1
 800117c:	f004 fdfc 	bl	8005d78 <osSemaphoreNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <main+0xd0>)
 8001184:	6013      	str	r3, [r2, #0]

  /* creation of Sem2_UART */
  Sem2_UARTHandle = osSemaphoreNew(1, 1, &Sem2_UART_attributes);
 8001186:	4a23      	ldr	r2, [pc, #140]	@ (8001214 <main+0xd4>)
 8001188:	2101      	movs	r1, #1
 800118a:	2001      	movs	r0, #1
 800118c:	f004 fdf4 	bl	8005d78 <osSemaphoreNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <main+0xd8>)
 8001194:	6013      	str	r3, [r2, #0]

  /* creation of Sem_Task1 */
  Sem_Task1Handle = osSemaphoreNew(1, 0, &Sem_Task1_attributes);
 8001196:	4a21      	ldr	r2, [pc, #132]	@ (800121c <main+0xdc>)
 8001198:	2100      	movs	r1, #0
 800119a:	2001      	movs	r0, #1
 800119c:	f004 fdec 	bl	8005d78 <osSemaphoreNew>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <main+0xe0>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* creation of Sem_Task2 */
  Sem_Task2Handle = osSemaphoreNew(1, 0, &Sem_Task2_attributes);
 80011a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <main+0xe4>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	2001      	movs	r0, #1
 80011ac:	f004 fde4 	bl	8005d78 <osSemaphoreNew>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001228 <main+0xe8>)
 80011b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_MPU9250 */
  Task1_MPU9250Handle = osThreadNew(S_Task1_MPU9250, NULL, &Task1_MPU9250_attributes);
 80011b6:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <main+0xec>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	481d      	ldr	r0, [pc, #116]	@ (8001230 <main+0xf0>)
 80011bc:	f004 fd1d 	bl	8005bfa <osThreadNew>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <main+0xf4>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* creation of Task2_HCSR04 */
  Task2_HCSR04Handle = osThreadNew(S_Task2_HCSR04, NULL, &Task2_HCSR04_attributes);
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <main+0xf8>)
 80011c8:	2100      	movs	r1, #0
 80011ca:	481c      	ldr	r0, [pc, #112]	@ (800123c <main+0xfc>)
 80011cc:	f004 fd15 	bl	8005bfa <osThreadNew>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <main+0x100>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* creation of Task3_UARTCMD */
  Task3_UARTCMDHandle = osThreadNew(S_Task3_UARTCMD, NULL, &Task3_UARTCMD_attributes);
 80011d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <main+0x104>)
 80011d8:	2100      	movs	r1, #0
 80011da:	481b      	ldr	r0, [pc, #108]	@ (8001248 <main+0x108>)
 80011dc:	f004 fd0d 	bl	8005bfa <osThreadNew>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a1a      	ldr	r2, [pc, #104]	@ (800124c <main+0x10c>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* creation of Task4_TimeContr */
  Task4_TimeContrHandle = osThreadNew(S_Task4_TimeControl, NULL, &Task4_TimeContr_attributes);
 80011e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001250 <main+0x110>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	481a      	ldr	r0, [pc, #104]	@ (8001254 <main+0x114>)
 80011ec:	f004 fd05 	bl	8005bfa <osThreadNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <main+0x118>)
 80011f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011f6:	f004 fcc5 	bl	8005b84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011fa:	bf00      	nop
 80011fc:	e7fd      	b.n	80011fa <main+0xba>
 80011fe:	bf00      	nop
 8001200:	20000340 	.word	0x20000340
 8001204:	200002d8 	.word	0x200002d8
 8001208:	20000290 	.word	0x20000290
 800120c:	0800dd1c 	.word	0x0800dd1c
 8001210:	20000330 	.word	0x20000330
 8001214:	0800dd2c 	.word	0x0800dd2c
 8001218:	20000334 	.word	0x20000334
 800121c:	0800dd3c 	.word	0x0800dd3c
 8001220:	20000338 	.word	0x20000338
 8001224:	0800dd4c 	.word	0x0800dd4c
 8001228:	2000033c 	.word	0x2000033c
 800122c:	0800dc8c 	.word	0x0800dc8c
 8001230:	08001641 	.word	0x08001641
 8001234:	20000320 	.word	0x20000320
 8001238:	0800dcb0 	.word	0x0800dcb0
 800123c:	080016fd 	.word	0x080016fd
 8001240:	20000324 	.word	0x20000324
 8001244:	0800dcd4 	.word	0x0800dcd4
 8001248:	0800174d 	.word	0x0800174d
 800124c:	20000328 	.word	0x20000328
 8001250:	0800dcf8 	.word	0x0800dcf8
 8001254:	080018d1 	.word	0x080018d1
 8001258:	2000032c 	.word	0x2000032c

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	@ 0x40
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	2228      	movs	r2, #40	@ 0x28
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f009 f952 	bl	800a514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001290:	2302      	movs	r3, #2
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001294:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800129a:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 f86f 	bl	8003388 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012b0:	f000 fb8d 	bl	80019ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2102      	movs	r1, #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fadc 	bl	800388c <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012da:	f000 fb78 	bl	80019ce <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3740      	adds	r7, #64	@ 0x40
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012ee:	4a13      	ldr	r2, [pc, #76]	@ (800133c <MX_I2C1_Init+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x58>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001326:	f001 f9a1 	bl	800266c <HAL_I2C_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001330:	f000 fb4d 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200001f4 	.word	0x200001f4
 800133c:	40005400 	.word	0x40005400
 8001340:	000186a0 	.word	0x000186a0

08001344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <MX_TIM1_Init+0x9c>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001368:	223f      	movs	r2, #63	@ 0x3f
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_TIM1_Init+0x98>)
 800138e:	f002 fc3b 	bl	8003c08 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001398:	f000 fb19 	bl	80019ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013aa:	f002 ffeb 	bl	8004384 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b4:	f000 fb0b 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013c6:	f003 fb79 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013d0:	f000 fafd 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000248 	.word	0x20000248
 80013e0:	40012c00 	.word	0x40012c00

080013e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	@ 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001416:	4a2d      	ldr	r2, [pc, #180]	@ (80014cc <MX_TIM4_Init+0xe8>)
 8001418:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 800141a:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 800141c:	223f      	movs	r2, #63	@ 0x3f
 800141e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001428:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800142c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800143a:	4823      	ldr	r0, [pc, #140]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 800143c:	f002 fbe4 	bl	8003c08 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001446:	f000 fac2 	bl	80019ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	481c      	ldr	r0, [pc, #112]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001458:	f002 ff94 	bl	8004384 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001462:	f000 fab4 	bl	80019ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001466:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001468:	f002 fce0 	bl	8003e2c <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001472:	f000 faac 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	4810      	ldr	r0, [pc, #64]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001486:	f003 fb19 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001490:	f000 fa9d 	bl	80019ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	@ 0x60
 8001496:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	220c      	movs	r2, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 80014ac:	f002 fea8 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014b6:	f000 fa8a 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ba:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 80014bc:	f000 fb3e 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 80014c0:	bf00      	nop
 80014c2:	3738      	adds	r7, #56	@ 0x38
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000290 	.word	0x20000290
 80014cc:	40000800 	.word	0x40000800

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_USART1_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001508:	f003 fb48 	bl	8004b9c <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 fa5c 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002d8 	.word	0x200002d8
 8001520:	40013800 	.word	0x40013800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a27      	ldr	r2, [pc, #156]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800153e:	f043 0320 	orr.w	r3, r3, #32
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a1b      	ldr	r2, [pc, #108]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001586:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <MX_GPIO_Init+0xbc>)
 8001588:	f001 f836 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800158c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_GPIO_Init+0xc0>)
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4619      	mov	r1, r3
 80015a0:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <MX_GPIO_Init+0xc4>)
 80015a2:	f000 fea5 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	4619      	mov	r1, r3
 80015be:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <MX_GPIO_Init+0xbc>)
 80015c0:	f000 fe96 	bl	80022f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2105      	movs	r1, #5
 80015c8:	2028      	movs	r0, #40	@ 0x28
 80015ca:	f000 fdb4 	bl	8002136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ce:	2028      	movs	r0, #40	@ 0x28
 80015d0:	f000 fdcd 	bl	800216e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010800 	.word	0x40010800
 80015e4:	10310000 	.word	0x10310000
 80015e8:	40010c00 	.word	0x40010c00

080015ec <EDF_Init>:

#define NUM_EDF_TASKS 2

EDF_TaskControlBlock edf_tasks[NUM_EDF_TASKS];

void EDF_Init(void) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    edf_tasks[0].sem = &Sem_Task1Handle;
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <EDF_Init+0x48>)
 80015f2:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <EDF_Init+0x4c>)
 80015f4:	601a      	str	r2, [r3, #0]
    edf_tasks[0].exec_time_ms = 12;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <EDF_Init+0x48>)
 80015f8:	220c      	movs	r2, #12
 80015fa:	605a      	str	r2, [r3, #4]
    edf_tasks[0].deadline_ms = osKernelGetTickCount() + 1000;
 80015fc:	f004 fae8 	bl	8005bd0 <osKernelGetTickCount>
 8001600:	4603      	mov	r3, r0
 8001602:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001606:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <EDF_Init+0x48>)
 8001608:	6093      	str	r3, [r2, #8]
    edf_tasks[0].ready = false;
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <EDF_Init+0x48>)
 800160c:	2200      	movs	r2, #0
 800160e:	731a      	strb	r2, [r3, #12]

    edf_tasks[1].sem = &Sem_Task2Handle;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <EDF_Init+0x48>)
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <EDF_Init+0x50>)
 8001614:	611a      	str	r2, [r3, #16]
    edf_tasks[1].exec_time_ms = 15;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <EDF_Init+0x48>)
 8001618:	220f      	movs	r2, #15
 800161a:	615a      	str	r2, [r3, #20]
    edf_tasks[1].deadline_ms = osKernelGetTickCount() + 1500;
 800161c:	f004 fad8 	bl	8005bd0 <osKernelGetTickCount>
 8001620:	4603      	mov	r3, r0
 8001622:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001626:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <EDF_Init+0x48>)
 8001628:	6193      	str	r3, [r2, #24]
    edf_tasks[1].ready = false;
 800162a:	4b02      	ldr	r3, [pc, #8]	@ (8001634 <EDF_Init+0x48>)
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200003ac 	.word	0x200003ac
 8001638:	20000338 	.word	0x20000338
 800163c:	2000033c 	.word	0x2000033c

08001640 <S_Task1_MPU9250>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task1_MPU9250 */
void S_Task1_MPU9250(void *argument)
{
 8001640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001644:	b0b6      	sub	sp, #216	@ 0xd8
 8001646:	af0c      	add	r7, sp, #48	@ 0x30
 8001648:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	UnifiedData_t pData;

	pData.Time = HAL_GetTick();
 800164a:	f000 fcb5 	bl	8001fb8 <HAL_GetTick>
 800164e:	4603      	mov	r3, r0
 8001650:	65fb      	str	r3, [r7, #92]	@ 0x5c
	pData.type = DATA_MPU;
 8001652:	2301      	movs	r3, #1
 8001654:	763b      	strb	r3, [r7, #24]

	MPU9250_Getdata();
 8001656:	f004 fa1f 	bl	8005a98 <MPU9250_Getdata>

	snprintf(pData.payload, sizeof(pData.payload),
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <S_Task1_MPU9250+0xa0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fee2 	bl	8000428 <__aeabi_f2d>
 8001664:	4604      	mov	r4, r0
 8001666:	460d      	mov	r5, r1
 8001668:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <S_Task1_MPU9250+0xa4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fedb 	bl	8000428 <__aeabi_f2d>
 8001672:	4680      	mov	r8, r0
 8001674:	4689      	mov	r9, r1
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <S_Task1_MPU9250+0xa8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fed4 	bl	8000428 <__aeabi_f2d>
 8001680:	4682      	mov	sl, r0
 8001682:	468b      	mov	fp, r1
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <S_Task1_MPU9250+0xac>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fecd 	bl	8000428 <__aeabi_f2d>
 800168e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <S_Task1_MPU9250+0xb0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fec6 	bl	8000428 <__aeabi_f2d>
 800169c:	e9c7 0100 	strd	r0, r1, [r7]
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <S_Task1_MPU9250+0xb4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe febf 	bl	8000428 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	f107 0118 	add.w	r1, r7, #24
 80016b2:	1c48      	adds	r0, r1, #1
 80016b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80016b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80016c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80016c8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80016cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016d0:	e9cd 4500 	strd	r4, r5, [sp]
 80016d4:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <S_Task1_MPU9250+0xb8>)
 80016d6:	2140      	movs	r1, #64	@ 0x40
 80016d8:	f008 fdf0 	bl	800a2bc <sniprintf>
  {
 80016dc:	bf00      	nop
 80016de:	e7b4      	b.n	800164a <S_Task1_MPU9250+0xa>
 80016e0:	20000424 	.word	0x20000424
 80016e4:	20000428 	.word	0x20000428
 80016e8:	2000042c 	.word	0x2000042c
 80016ec:	20000430 	.word	0x20000430
 80016f0:	20000434 	.word	0x20000434
 80016f4:	20000438 	.word	0x20000438
 80016f8:	0800dbc0 	.word	0x0800dbc0

080016fc <S_Task2_HCSR04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task2_HCSR04 */
void S_Task2_HCSR04(void *argument)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task2_HCSR04 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Sem_Task2Handle, osWaitForever);
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <S_Task2_HCSR04+0x44>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	4618      	mov	r0, r3
 800170e:	f004 fbbd 	bl	8005e8c <osSemaphoreAcquire>
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <S_Task2_HCSR04+0x48>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f04f 31ff 	mov.w	r1, #4294967295
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fbb6 	bl	8005e8c <osSemaphoreAcquire>

	printf("\nTask 2 in: %lu\n", HAL_GetTick());
 8001720:	f000 fc4a 	bl	8001fb8 <HAL_GetTick>
 8001724:	4603      	mov	r3, r0
 8001726:	4619      	mov	r1, r3
 8001728:	4807      	ldr	r0, [pc, #28]	@ (8001748 <S_Task2_HCSR04+0x4c>)
 800172a:	f008 fd57 	bl	800a1dc <iprintf>

	osSemaphoreRelease(Sem2_UARTHandle);
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <S_Task2_HCSR04+0x48>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f004 fbfc 	bl	8005f30 <osSemaphoreRelease>

    HCSR04_Start();
 8001738:	f004 f8d0 	bl	80058dc <HCSR04_Start>
	osSemaphoreAcquire(Sem_Task2Handle, osWaitForever);
 800173c:	bf00      	nop
 800173e:	e7e1      	b.n	8001704 <S_Task2_HCSR04+0x8>
 8001740:	2000033c 	.word	0x2000033c
 8001744:	20000334 	.word	0x20000334
 8001748:	0800dbe4 	.word	0x0800dbe4

0800174c <S_Task3_UARTCMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task3_UARTCMD */
void S_Task3_UARTCMD(void *argument)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task3_UARTCMD */
    int servo_angle = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Sem1_CMDHandle, osWaitForever);
 8001758:	4b4f      	ldr	r3, [pc, #316]	@ (8001898 <S_Task3_UARTCMD+0x14c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fb93 	bl	8005e8c <osSemaphoreAcquire>

	  if (strncmp(uart_buff, ">Servo", 6) == 0) {
 8001766:	2206      	movs	r2, #6
 8001768:	494c      	ldr	r1, [pc, #304]	@ (800189c <S_Task3_UARTCMD+0x150>)
 800176a:	484d      	ldr	r0, [pc, #308]	@ (80018a0 <S_Task3_UARTCMD+0x154>)
 800176c:	f008 feda 	bl	800a524 <strncmp>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d125      	bne.n	80017c2 <S_Task3_UARTCMD+0x76>
	         char *ptr = uart_buff + 6;
 8001776:	4b4b      	ldr	r3, [pc, #300]	@ (80018a4 <S_Task3_UARTCMD+0x158>)
 8001778:	617b      	str	r3, [r7, #20]
	         while (*ptr == ' ') ptr++;
 800177a:	e002      	b.n	8001782 <S_Task3_UARTCMD+0x36>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b20      	cmp	r3, #32
 8001788:	d0f8      	beq.n	800177c <S_Task3_UARTCMD+0x30>
	         servo_angle = atoi(ptr);
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f007 fd6e 	bl	800926c <atoi>
 8001790:	60b8      	str	r0, [r7, #8]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001792:	4b45      	ldr	r3, [pc, #276]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f04f 31ff 	mov.w	r1, #4294967295
 800179a:	4618      	mov	r0, r3
 800179c:	f004 fb76 	bl	8005e8c <osSemaphoreAcquire>
	         printf("Control Servo angel: %d\n", servo_angle);
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	4842      	ldr	r0, [pc, #264]	@ (80018ac <S_Task3_UARTCMD+0x160>)
 80017a4:	f008 fd1a 	bl	800a1dc <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 80017a8:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 fbbf 	bl	8005f30 <osSemaphoreRelease>
	         Servo_Write(&htim4, TIM_CHANNEL_4, servo_angle);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	210c      	movs	r1, #12
 80017ba:	483d      	ldr	r0, [pc, #244]	@ (80018b0 <S_Task3_UARTCMD+0x164>)
 80017bc:	f007 fd08 	bl	80091d0 <Servo_Write>
 80017c0:	e7ca      	b.n	8001758 <S_Task3_UARTCMD+0xc>
	     } else if(strncmp(uart_buff, ">T1", 3) == 0){
 80017c2:	2203      	movs	r2, #3
 80017c4:	493b      	ldr	r1, [pc, #236]	@ (80018b4 <S_Task3_UARTCMD+0x168>)
 80017c6:	4836      	ldr	r0, [pc, #216]	@ (80018a0 <S_Task3_UARTCMD+0x154>)
 80017c8:	f008 feac 	bl	800a524 <strncmp>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d125      	bne.n	800181e <S_Task3_UARTCMD+0xd2>
	         char *ptr = uart_buff + 3;
 80017d2:	4b39      	ldr	r3, [pc, #228]	@ (80018b8 <S_Task3_UARTCMD+0x16c>)
 80017d4:	613b      	str	r3, [r7, #16]
	         while (*ptr == ' ') ptr++;
 80017d6:	e002      	b.n	80017de <S_Task3_UARTCMD+0x92>
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d0f8      	beq.n	80017d8 <S_Task3_UARTCMD+0x8c>
	         edf_tasks[0].deadline_ms = edf_tasks[0].deadline_ms + atoi(ptr);
 80017e6:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <S_Task3_UARTCMD+0x170>)
 80017e8:	689c      	ldr	r4, [r3, #8]
 80017ea:	6938      	ldr	r0, [r7, #16]
 80017ec:	f007 fd3e 	bl	800926c <atoi>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4423      	add	r3, r4
 80017f4:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <S_Task3_UARTCMD+0x170>)
 80017f6:	6093      	str	r3, [r2, #8]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80017f8:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	4618      	mov	r0, r3
 8001802:	f004 fb43 	bl	8005e8c <osSemaphoreAcquire>
	         printf("Change Deadline Task 1 to: %lu\n", edf_tasks[0].deadline_ms);
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <S_Task3_UARTCMD+0x170>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4619      	mov	r1, r3
 800180c:	482c      	ldr	r0, [pc, #176]	@ (80018c0 <S_Task3_UARTCMD+0x174>)
 800180e:	f008 fce5 	bl	800a1dc <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 8001812:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f004 fb8a 	bl	8005f30 <osSemaphoreRelease>
 800181c:	e79c      	b.n	8001758 <S_Task3_UARTCMD+0xc>
	     }else if(strncmp(uart_buff, ">T2", 3) == 0){
 800181e:	2203      	movs	r2, #3
 8001820:	4928      	ldr	r1, [pc, #160]	@ (80018c4 <S_Task3_UARTCMD+0x178>)
 8001822:	481f      	ldr	r0, [pc, #124]	@ (80018a0 <S_Task3_UARTCMD+0x154>)
 8001824:	f008 fe7e 	bl	800a524 <strncmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d123      	bne.n	8001876 <S_Task3_UARTCMD+0x12a>
	         char *ptr = uart_buff + 3;
 800182e:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <S_Task3_UARTCMD+0x16c>)
 8001830:	60fb      	str	r3, [r7, #12]
	         while (*ptr == ' ') ptr++;
 8001832:	e002      	b.n	800183a <S_Task3_UARTCMD+0xee>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3301      	adds	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b20      	cmp	r3, #32
 8001840:	d0f8      	beq.n	8001834 <S_Task3_UARTCMD+0xe8>
	         edf_tasks[1].deadline_ms = atoi(ptr);
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f007 fd12 	bl	800926c <atoi>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <S_Task3_UARTCMD+0x170>)
 800184e:	619a      	str	r2, [r3, #24]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	4618      	mov	r0, r3
 800185a:	f004 fb17 	bl	8005e8c <osSemaphoreAcquire>
	         printf("Change Deadline Task 2 to: %lu\n", edf_tasks[1].deadline_ms);
 800185e:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <S_Task3_UARTCMD+0x170>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	4619      	mov	r1, r3
 8001864:	4818      	ldr	r0, [pc, #96]	@ (80018c8 <S_Task3_UARTCMD+0x17c>)
 8001866:	f008 fcb9 	bl	800a1dc <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f004 fb5e 	bl	8005f30 <osSemaphoreRelease>
 8001874:	e770      	b.n	8001758 <S_Task3_UARTCMD+0xc>
	     }else {
	    	 osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f04f 31ff 	mov.w	r1, #4294967295
 800187e:	4618      	mov	r0, r3
 8001880:	f004 fb04 	bl	8005e8c <osSemaphoreAcquire>
	         printf("Wrong message!\n");
 8001884:	4811      	ldr	r0, [pc, #68]	@ (80018cc <S_Task3_UARTCMD+0x180>)
 8001886:	f008 fd11 	bl	800a2ac <puts>
	         osSemaphoreRelease(Sem2_UARTHandle);
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <S_Task3_UARTCMD+0x15c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f004 fb4e 	bl	8005f30 <osSemaphoreRelease>
	  osSemaphoreAcquire(Sem1_CMDHandle, osWaitForever);
 8001894:	e760      	b.n	8001758 <S_Task3_UARTCMD+0xc>
 8001896:	bf00      	nop
 8001898:	20000330 	.word	0x20000330
 800189c:	0800dbf8 	.word	0x0800dbf8
 80018a0:	20000344 	.word	0x20000344
 80018a4:	2000034a 	.word	0x2000034a
 80018a8:	20000334 	.word	0x20000334
 80018ac:	0800dc00 	.word	0x0800dc00
 80018b0:	20000290 	.word	0x20000290
 80018b4:	0800dc1c 	.word	0x0800dc1c
 80018b8:	20000347 	.word	0x20000347
 80018bc:	200003ac 	.word	0x200003ac
 80018c0:	0800dc20 	.word	0x0800dc20
 80018c4:	0800dc40 	.word	0x0800dc40
 80018c8:	0800dc44 	.word	0x0800dc44
 80018cc:	0800dc64 	.word	0x0800dc64

080018d0 <S_Task4_TimeControl>:
* @retval None
*/
/* USER CODE END Header_S_Task4_TimeControl */
uint32_t now;
void S_Task4_TimeControl(void *argument)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task4_TimeControl */
	uint32_t next_wake_time = osKernelGetTickCount();
 80018d8:	f004 f97a 	bl	8005bd0 <osKernelGetTickCount>
 80018dc:	6178      	str	r0, [r7, #20]
	EDF_Init();
 80018de:	f7ff fe85 	bl	80015ec <EDF_Init>
  /* Infinite loop */
  for(;;)
  {
	now = osKernelGetTickCount();
 80018e2:	f004 f975 	bl	8005bd0 <osKernelGetTickCount>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a2d      	ldr	r2, [pc, #180]	@ (80019a0 <S_Task4_TimeControl+0xd0>)
 80018ea:	6013      	str	r3, [r2, #0]
	int min_idx = -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	613b      	str	r3, [r7, #16]
	uint32_t min_deadline = 0xFFFFFFFF;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < NUM_EDF_TASKS; i++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e01e      	b.n	800193c <S_Task4_TimeControl+0x6c>
		if (edf_tasks[i].deadline_ms <= now) {
 80018fe:	4a29      	ldr	r2, [pc, #164]	@ (80019a4 <S_Task4_TimeControl+0xd4>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	3308      	adds	r3, #8
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <S_Task4_TimeControl+0xd0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d811      	bhi.n	8001936 <S_Task4_TimeControl+0x66>
			if (edf_tasks[i].deadline_ms < min_deadline) {
 8001912:	4a24      	ldr	r2, [pc, #144]	@ (80019a4 <S_Task4_TimeControl+0xd4>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	3308      	adds	r3, #8
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d908      	bls.n	8001936 <S_Task4_TimeControl+0x66>
				min_deadline = edf_tasks[i].deadline_ms;
 8001924:	4a1f      	ldr	r2, [pc, #124]	@ (80019a4 <S_Task4_TimeControl+0xd4>)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	3308      	adds	r3, #8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
				min_idx = i;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < NUM_EDF_TASKS; i++) {
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b01      	cmp	r3, #1
 8001940:	dddd      	ble.n	80018fe <S_Task4_TimeControl+0x2e>
			}
		}
	}

	if (min_idx >= 0) {
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db23      	blt.n	8001990 <S_Task4_TimeControl+0xc0>
        switch (min_idx) {
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <S_Task4_TimeControl+0x86>
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d006      	beq.n	8001962 <S_Task4_TimeControl+0x92>
				break;
			case 1:
				osSemaphoreRelease(Sem_Task2Handle);
				break;
			default:
				break;
 8001954:	e00b      	b.n	800196e <S_Task4_TimeControl+0x9e>
				osSemaphoreRelease(Sem_Task1Handle);
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <S_Task4_TimeControl+0xd8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 fae8 	bl	8005f30 <osSemaphoreRelease>
				break;
 8001960:	e005      	b.n	800196e <S_Task4_TimeControl+0x9e>
				osSemaphoreRelease(Sem_Task2Handle);
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <S_Task4_TimeControl+0xdc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f004 fae2 	bl	8005f30 <osSemaphoreRelease>
				break;
 800196c:	bf00      	nop
		}
		edf_tasks[min_idx].deadline_ms = now + (min_idx == 0 ? 1000 : 1500);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <S_Task4_TimeControl+0xaa>
 8001974:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001978:	e001      	b.n	800197e <S_Task4_TimeControl+0xae>
 800197a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <S_Task4_TimeControl+0xd0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	441a      	add	r2, r3
 8001984:	4907      	ldr	r1, [pc, #28]	@ (80019a4 <S_Task4_TimeControl+0xd4>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	440b      	add	r3, r1
 800198c:	3308      	adds	r3, #8
 800198e:	601a      	str	r2, [r3, #0]
	}

	next_wake_time += 100;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3364      	adds	r3, #100	@ 0x64
 8001994:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_wake_time);
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f004 f9c1 	bl	8005d1e <osDelayUntil>
  {
 800199c:	e7a1      	b.n	80018e2 <S_Task4_TimeControl+0x12>
 800199e:	bf00      	nop
 80019a0:	200003cc 	.word	0x200003cc
 80019a4:	200003ac 	.word	0x200003ac
 80019a8:	20000338 	.word	0x20000338
 80019ac:	2000033c 	.word	0x2000033c

080019b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c0:	d101      	bne.n	80019c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019c2:	f000 fae7 	bl	8001f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d6:	bf00      	nop
 80019d8:	e7fd      	b.n	80019d6 <Error_Handler+0x8>
	...

080019dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e2:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <HAL_MspInit+0x68>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <HAL_MspInit+0x68>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_MspInit+0x68>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_MspInit+0x68>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <HAL_MspInit+0x68>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <HAL_MspInit+0x68>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	210f      	movs	r1, #15
 8001a16:	f06f 0001 	mvn.w	r0, #1
 8001a1a:	f000 fb8c 	bl	8002136 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_MspInit+0x6c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <HAL_MspInit+0x6c>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000

08001a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <HAL_I2C_MspInit+0x70>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d123      	bne.n	8001ab4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <HAL_I2C_MspInit+0x74>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <HAL_I2C_MspInit+0x74>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_I2C_MspInit+0x74>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a84:	23c0      	movs	r3, #192	@ 0xc0
 8001a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a88:	2312      	movs	r3, #18
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <HAL_I2C_MspInit+0x78>)
 8001a98:	f000 fc2a 	bl	80022f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_I2C_MspInit+0x74>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <HAL_I2C_MspInit+0x74>)
 8001aa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa6:	61d3      	str	r3, [r2, #28]
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_I2C_MspInit+0x74>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010c00 	.word	0x40010c00

08001ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <HAL_TIM_Base_MspInit+0x68>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d114      	bne.n	8001b04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_TIM_Base_MspInit+0x6c>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	4a15      	ldr	r2, [pc, #84]	@ (8001b34 <HAL_TIM_Base_MspInit+0x6c>)
 8001ae0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ae4:	6193      	str	r3, [r2, #24]
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_TIM_Base_MspInit+0x6c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2019      	movs	r0, #25
 8001af8:	f000 fb1d 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001afc:	2019      	movs	r0, #25
 8001afe:	f000 fb36 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b02:	e010      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	@ (8001b38 <HAL_TIM_Base_MspInit+0x70>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10b      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_TIM_Base_MspInit+0x6c>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <HAL_TIM_Base_MspInit+0x6c>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_TIM_Base_MspInit+0x6c>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40012c00 	.word	0x40012c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40000800 	.word	0x40000800

08001b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a10      	ldr	r2, [pc, #64]	@ (8001b98 <HAL_TIM_MspPostInit+0x5c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d118      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <HAL_TIM_MspPostInit+0x60>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	@ (8001b9c <HAL_TIM_MspPostInit+0x60>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <HAL_TIM_MspPostInit+0x60>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <HAL_TIM_MspPostInit+0x64>)
 8001b8a:	f000 fbb1 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010c00 	.word	0x40010c00

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a20      	ldr	r2, [pc, #128]	@ (8001c40 <HAL_UART_MspInit+0x9c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d139      	bne.n	8001c38 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <HAL_UART_MspInit+0xa0>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <HAL_UART_MspInit+0xa0>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_UART_MspInit+0xa0>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_UART_MspInit+0xa0>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <HAL_UART_MspInit+0xa0>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_UART_MspInit+0xa0>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	480f      	ldr	r0, [pc, #60]	@ (8001c48 <HAL_UART_MspInit+0xa4>)
 8001c0a:	f000 fb71 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	@ (8001c48 <HAL_UART_MspInit+0xa4>)
 8001c24:	f000 fb64 	bl	80022f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2106      	movs	r1, #6
 8001c2c:	2025      	movs	r0, #37	@ 0x25
 8001c2e:	f000 fa82 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c32:	2025      	movs	r0, #37	@ 0x25
 8001c34:	f000 fa9b 	bl	800216e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800

08001c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	@ 0x38
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_InitTick+0xe8>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a33      	ldr	r2, [pc, #204]	@ (8001d34 <HAL_InitTick+0xe8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_InitTick+0xe8>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c7a:	f107 0210 	add.w	r2, r7, #16
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 ff71 	bl	8003b6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c94:	f001 ff42 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8001c98:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c9a:	e004      	b.n	8001ca6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c9c:	f001 ff3e 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca8:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <HAL_InitTick+0xec>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001cbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cc2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001cdc:	4817      	ldr	r0, [pc, #92]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001cde:	f001 ff93 	bl	8003c08 <HAL_TIM_Base_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11b      	bne.n	8001d28 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001cf0:	4812      	ldr	r0, [pc, #72]	@ (8001d3c <HAL_InitTick+0xf0>)
 8001cf2:	f002 f849 	bl	8003d88 <HAL_TIM_Base_Start_IT>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d111      	bne.n	8001d28 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d04:	201c      	movs	r0, #28
 8001d06:	f000 fa32 	bl	800216e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d808      	bhi.n	8001d22 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	201c      	movs	r0, #28
 8001d16:	f000 fa0e 	bl	8002136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d1a:	4a09      	ldr	r2, [pc, #36]	@ (8001d40 <HAL_InitTick+0xf4>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e002      	b.n	8001d28 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3738      	adds	r7, #56	@ 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	431bde83 	.word	0x431bde83
 8001d3c:	200003d0 	.word	0x200003d0
 8001d40:	20000004 	.word	0x20000004

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <TIM1_UP_IRQHandler+0x10>)
 8001d7e:	f002 f94f 	bl	8004020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000248 	.word	0x20000248

08001d8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <TIM2_IRQHandler+0x10>)
 8001d92:	f002 f945 	bl	8004020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200003d0 	.word	0x200003d0

08001da0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <USART1_IRQHandler+0x10>)
 8001da6:	f002 fff9 	bl	8004d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200002d8 	.word	0x200002d8

08001db4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001db8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001dbc:	f000 fc34 	bl	8002628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <_kill>:

int _kill(int pid, int sig)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ddc:	f008 fc54 	bl	800a688 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2216      	movs	r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
  return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_exit>:

void _exit (int status)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffe7 	bl	8001dd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <_exit+0x12>

08001e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
  }

  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e68:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <_isatty>:

int _isatty(int file)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
	...

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f008 fbd8 	bl	800a688 <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <_sbrk+0x64>)
 8001ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20005000 	.word	0x20005000
 8001f04:	00000400 	.word	0x00000400
 8001f08:	20000418 	.word	0x20000418
 8001f0c:	20002380 	.word	0x20002380

08001f10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f1c:	f7ff fff8 	bl	8001f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f20:	480b      	ldr	r0, [pc, #44]	@ (8001f50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f22:	490c      	ldr	r1, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f24:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f38:	4c09      	ldr	r4, [pc, #36]	@ (8001f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f008 fba5 	bl	800a694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f4a:	f7ff f8f9 	bl	8001140 <main>
  bx lr
 8001f4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f58:	0800e1c8 	.word	0x0800e1c8
  ldr r2, =_sbss
 8001f5c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f60:	20002380 	.word	0x20002380

08001f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC1_2_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_Init+0x28>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_Init+0x28>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f8d1 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f7ff fe64 	bl	8001c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fd2a 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a03      	ldr	r2, [pc, #12]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	2000041c 	.word	0x2000041c

08001fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	@ (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	2000041c 	.word	0x2000041c

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4906      	ldr	r1, [pc, #24]	@ (8002064 <__NVIC_EnableIRQ+0x34>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	@ (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff4f 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff64 	bl	8002014 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ffb2 	bl	80020bc <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff81 	bl	8002068 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff57 	bl	8002030 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d008      	beq.n	80021b4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2204      	movs	r2, #4
 80021a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e020      	b.n	80021f6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 020e 	bic.w	r2, r2, #14
 80021c2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d005      	beq.n	8002224 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2204      	movs	r2, #4
 800221c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e051      	b.n	80022c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020e 	bic.w	r2, r2, #14
 8002232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <HAL_DMA_Abort_IT+0xd4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d029      	beq.n	80022a2 <HAL_DMA_Abort_IT+0xa2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <HAL_DMA_Abort_IT+0xd8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMA_Abort_IT+0x9e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1f      	ldr	r2, [pc, #124]	@ (80022dc <HAL_DMA_Abort_IT+0xdc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01a      	beq.n	8002298 <HAL_DMA_Abort_IT+0x98>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <HAL_DMA_Abort_IT+0xe0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d012      	beq.n	8002292 <HAL_DMA_Abort_IT+0x92>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <HAL_DMA_Abort_IT+0xe4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00a      	beq.n	800228c <HAL_DMA_Abort_IT+0x8c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <HAL_DMA_Abort_IT+0xe8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_DMA_Abort_IT+0x86>
 8002280:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002284:	e00e      	b.n	80022a4 <HAL_DMA_Abort_IT+0xa4>
 8002286:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800228a:	e00b      	b.n	80022a4 <HAL_DMA_Abort_IT+0xa4>
 800228c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002290:	e008      	b.n	80022a4 <HAL_DMA_Abort_IT+0xa4>
 8002292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002296:	e005      	b.n	80022a4 <HAL_DMA_Abort_IT+0xa4>
 8002298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800229c:	e002      	b.n	80022a4 <HAL_DMA_Abort_IT+0xa4>
 800229e:	2310      	movs	r3, #16
 80022a0:	e000      	b.n	80022a4 <HAL_DMA_Abort_IT+0xa4>
 80022a2:	2301      	movs	r3, #1
 80022a4:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <HAL_DMA_Abort_IT+0xec>)
 80022a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
    } 
  }
  return status;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40020008 	.word	0x40020008
 80022d8:	4002001c 	.word	0x4002001c
 80022dc:	40020030 	.word	0x40020030
 80022e0:	40020044 	.word	0x40020044
 80022e4:	40020058 	.word	0x40020058
 80022e8:	4002006c 	.word	0x4002006c
 80022ec:	40020000 	.word	0x40020000

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08b      	sub	sp, #44	@ 0x2c
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e169      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002304:	2201      	movs	r2, #1
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8158 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a9a      	ldr	r2, [pc, #616]	@ (8002590 <HAL_GPIO_Init+0x2a0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d05e      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800232c:	4a98      	ldr	r2, [pc, #608]	@ (8002590 <HAL_GPIO_Init+0x2a0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d875      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002332:	4a98      	ldr	r2, [pc, #608]	@ (8002594 <HAL_GPIO_Init+0x2a4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d058      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002338:	4a96      	ldr	r2, [pc, #600]	@ (8002594 <HAL_GPIO_Init+0x2a4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d86f      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800233e:	4a96      	ldr	r2, [pc, #600]	@ (8002598 <HAL_GPIO_Init+0x2a8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d052      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002344:	4a94      	ldr	r2, [pc, #592]	@ (8002598 <HAL_GPIO_Init+0x2a8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d869      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800234a:	4a94      	ldr	r2, [pc, #592]	@ (800259c <HAL_GPIO_Init+0x2ac>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04c      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002350:	4a92      	ldr	r2, [pc, #584]	@ (800259c <HAL_GPIO_Init+0x2ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d863      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002356:	4a92      	ldr	r2, [pc, #584]	@ (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d046      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800235c:	4a90      	ldr	r2, [pc, #576]	@ (80025a0 <HAL_GPIO_Init+0x2b0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d85d      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d82a      	bhi.n	80023bc <HAL_GPIO_Init+0xcc>
 8002366:	2b12      	cmp	r3, #18
 8002368:	d859      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800236a:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <HAL_GPIO_Init+0x80>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023d7 	.word	0x080023d7
 800237c:	08002419 	.word	0x08002419
 8002380:	0800241f 	.word	0x0800241f
 8002384:	0800241f 	.word	0x0800241f
 8002388:	0800241f 	.word	0x0800241f
 800238c:	0800241f 	.word	0x0800241f
 8002390:	0800241f 	.word	0x0800241f
 8002394:	0800241f 	.word	0x0800241f
 8002398:	0800241f 	.word	0x0800241f
 800239c:	0800241f 	.word	0x0800241f
 80023a0:	0800241f 	.word	0x0800241f
 80023a4:	0800241f 	.word	0x0800241f
 80023a8:	0800241f 	.word	0x0800241f
 80023ac:	0800241f 	.word	0x0800241f
 80023b0:	0800241f 	.word	0x0800241f
 80023b4:	080023cd 	.word	0x080023cd
 80023b8:	080023e1 	.word	0x080023e1
 80023bc:	4a79      	ldr	r2, [pc, #484]	@ (80025a4 <HAL_GPIO_Init+0x2b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023c2:	e02c      	b.n	800241e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e029      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	e024      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	3308      	adds	r3, #8
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e01f      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	330c      	adds	r3, #12
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e01a      	b.n	8002420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023f2:	2304      	movs	r3, #4
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e013      	b.n	8002420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	611a      	str	r2, [r3, #16]
          break;
 800240a:	e009      	b.n	8002420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800240c:	2308      	movs	r3, #8
 800240e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	615a      	str	r2, [r3, #20]
          break;
 8002416:	e003      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x130>
          break;
 800241e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2bff      	cmp	r3, #255	@ 0xff
 8002424:	d801      	bhi.n	800242a <HAL_GPIO_Init+0x13a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	e001      	b.n	800242e <HAL_GPIO_Init+0x13e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	@ 0xff
 8002434:	d802      	bhi.n	800243c <HAL_GPIO_Init+0x14c>
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x152>
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	3b08      	subs	r3, #8
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	210f      	movs	r1, #15
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	401a      	ands	r2, r3
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80b1 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002470:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a4c      	ldr	r2, [pc, #304]	@ (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_GPIO_Init+0x2b8>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002488:	4a48      	ldr	r2, [pc, #288]	@ (80025ac <HAL_GPIO_Init+0x2bc>)
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a40      	ldr	r2, [pc, #256]	@ (80025b0 <HAL_GPIO_Init+0x2c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_GPIO_Init+0x1ec>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3f      	ldr	r2, [pc, #252]	@ (80025b4 <HAL_GPIO_Init+0x2c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_GPIO_Init+0x1e8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3e      	ldr	r2, [pc, #248]	@ (80025b8 <HAL_GPIO_Init+0x2c8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x1e4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3d      	ldr	r2, [pc, #244]	@ (80025bc <HAL_GPIO_Init+0x2cc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_GPIO_Init+0x1e0>
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024dc:	2300      	movs	r3, #0
 80024de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ee:	492f      	ldr	r1, [pc, #188]	@ (80025ac <HAL_GPIO_Init+0x2bc>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002508:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	492c      	ldr	r1, [pc, #176]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002516:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	43db      	mvns	r3, r3
 800251e:	4928      	ldr	r1, [pc, #160]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002520:	4013      	ands	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	4922      	ldr	r1, [pc, #136]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	60cb      	str	r3, [r1, #12]
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	43db      	mvns	r3, r3
 8002546:	491e      	ldr	r1, [pc, #120]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002548:	4013      	ands	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4918      	ldr	r1, [pc, #96]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002566:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	43db      	mvns	r3, r3
 800256e:	4914      	ldr	r1, [pc, #80]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002570:	4013      	ands	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d021      	beq.n	80025c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	490e      	ldr	r1, [pc, #56]	@ (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e021      	b.n	80025d2 <HAL_GPIO_Init+0x2e2>
 800258e:	bf00      	nop
 8002590:	10320000 	.word	0x10320000
 8002594:	10310000 	.word	0x10310000
 8002598:	10220000 	.word	0x10220000
 800259c:	10210000 	.word	0x10210000
 80025a0:	10120000 	.word	0x10120000
 80025a4:	10110000 	.word	0x10110000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_GPIO_Init+0x304>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4909      	ldr	r1, [pc, #36]	@ (80025f4 <HAL_GPIO_Init+0x304>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f ae8e 	bne.w	8002304 <HAL_GPIO_Init+0x14>
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	372c      	adds	r7, #44	@ 0x2c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	611a      	str	r2, [r3, #16]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002632:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f806 	bl	8002658 <HAL_GPIO_EXTI_Callback>
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40010400 	.word	0x40010400

08002658 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e12b      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff f9da 	bl	8001a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	@ 0x24
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d0:	f001 fa24 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 80026d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a81      	ldr	r2, [pc, #516]	@ (80028e0 <HAL_I2C_Init+0x274>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d807      	bhi.n	80026f0 <HAL_I2C_Init+0x84>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4a80      	ldr	r2, [pc, #512]	@ (80028e4 <HAL_I2C_Init+0x278>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	bf94      	ite	ls
 80026e8:	2301      	movls	r3, #1
 80026ea:	2300      	movhi	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e006      	b.n	80026fe <HAL_I2C_Init+0x92>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a7d      	ldr	r2, [pc, #500]	@ (80028e8 <HAL_I2C_Init+0x27c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bf94      	ite	ls
 80026f8:	2301      	movls	r3, #1
 80026fa:	2300      	movhi	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0e7      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a78      	ldr	r2, [pc, #480]	@ (80028ec <HAL_I2C_Init+0x280>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a6a      	ldr	r2, [pc, #424]	@ (80028e0 <HAL_I2C_Init+0x274>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d802      	bhi.n	8002740 <HAL_I2C_Init+0xd4>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3301      	adds	r3, #1
 800273e:	e009      	b.n	8002754 <HAL_I2C_Init+0xe8>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	4a69      	ldr	r2, [pc, #420]	@ (80028f0 <HAL_I2C_Init+0x284>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	3301      	adds	r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002766:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	495c      	ldr	r1, [pc, #368]	@ (80028e0 <HAL_I2C_Init+0x274>)
 8002770:	428b      	cmp	r3, r1
 8002772:	d819      	bhi.n	80027a8 <HAL_I2C_Init+0x13c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e59      	subs	r1, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002788:	400b      	ands	r3, r1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_I2C_Init+0x138>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e59      	subs	r1, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fbb1 f3f3 	udiv	r3, r1, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	e051      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e04f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <HAL_I2C_Init+0x168>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e012      	b.n	80027fa <HAL_I2C_Init+0x18e>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	0099      	lsls	r1, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Init+0x196>
 80027fe:	2301      	movs	r3, #1
 8002800:	e022      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <HAL_I2C_Init+0x1bc>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1e58      	subs	r0, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	440b      	add	r3, r1
 8002818:	fbb0 f3f3 	udiv	r3, r0, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002826:	e00f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	0099      	lsls	r1, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	fbb0 f3f3 	udiv	r3, r0, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	6809      	ldr	r1, [r1, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6911      	ldr	r1, [r2, #16]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68d2      	ldr	r2, [r2, #12]
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	000186a0 	.word	0x000186a0
 80028e4:	001e847f 	.word	0x001e847f
 80028e8:	003d08ff 	.word	0x003d08ff
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	10624dd3 	.word	0x10624dd3

080028f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	@ 0x30
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	817b      	strh	r3, [r7, #10]
 8002906:	460b      	mov	r3, r1
 8002908:	813b      	strh	r3, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002912:	f7ff fb51 	bl	8001fb8 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b20      	cmp	r3, #32
 8002922:	f040 8250 	bne.w	8002dc6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2319      	movs	r3, #25
 800292c:	2201      	movs	r2, #1
 800292e:	4982      	ldr	r1, [pc, #520]	@ (8002b38 <HAL_I2C_Mem_Read+0x244>)
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fb3b 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
 800293e:	e243      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_I2C_Mem_Read+0x5a>
 800294a:	2302      	movs	r3, #2
 800294c:	e23c      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d007      	beq.n	8002974 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2222      	movs	r2, #34	@ 0x22
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80029a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a62      	ldr	r2, [pc, #392]	@ (8002b3c <HAL_I2C_Mem_Read+0x248>)
 80029b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029b6:	88f8      	ldrh	r0, [r7, #6]
 80029b8:	893a      	ldrh	r2, [r7, #8]
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4603      	mov	r3, r0
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa08 	bl	8002ddc <I2C_RequestMemoryRead>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e1f8      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d113      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e1cc      	b.n	8002da0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d11e      	bne.n	8002a4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1e:	b672      	cpsid	i
}
 8002a20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a48:	b662      	cpsie	i
}
 8002a4a:	e035      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d11e      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a8e:	b662      	cpsie	i
}
 8002a90:	e012      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aa0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ab8:	e172      	b.n	8002da0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	f200 811f 	bhi.w	8002d02 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d123      	bne.n	8002b14 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ace:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fbcd 	bl	8003270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e173      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b12:	e145      	b.n	8002da0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d152      	bne.n	8002bc2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b22:	2200      	movs	r2, #0
 8002b24:	4906      	ldr	r1, [pc, #24]	@ (8002b40 <HAL_I2C_Mem_Read+0x24c>)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fa40 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e148      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
 8002b36:	bf00      	nop
 8002b38:	00100002 	.word	0x00100002
 8002b3c:	ffff0000 	.word	0xffff0000
 8002b40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b44:	b672      	cpsid	i
}
 8002b46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b8a:	b662      	cpsie	i
}
 8002b8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bc0:	e0ee      	b.n	8002da0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4981      	ldr	r1, [pc, #516]	@ (8002dd0 <HAL_I2C_Mem_Read+0x4dc>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9ed 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0f5      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bec:	b672      	cpsid	i
}
 8002bee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c22:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd4 <HAL_I2C_Mem_Read+0x4e0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd8 <HAL_I2C_Mem_Read+0x4e4>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a1a      	lsrs	r2, r3, #8
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00da      	lsls	r2, r3, #3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d118      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c6a:	b662      	cpsie	i
}
 8002c6c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0a6      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d1d9      	bne.n	8002c3c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cca:	b662      	cpsie	i
}
 8002ccc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d00:	e04e      	b.n	8002da0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fab2 	bl	8003270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e058      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d124      	bne.n	8002da0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d107      	bne.n	8002d6e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d6c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f ae88 	bne.w	8002aba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3728      	adds	r7, #40	@ 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	00010004 	.word	0x00010004
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	14f8b589 	.word	0x14f8b589

08002ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	817b      	strh	r3, [r7, #10]
 8002dee:	460b      	mov	r3, r1
 8002df0:	813b      	strh	r3, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f8c2 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3c:	d103      	bne.n	8002e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0aa      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	4952      	ldr	r1, [pc, #328]	@ (8002fa8 <I2C_RequestMemoryRead+0x1cc>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f91d 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e097      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f9a8 	bl	80031e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d107      	bne.n	8002eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e076      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb8:	893b      	ldrh	r3, [r7, #8]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	e021      	b.n	8002f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f982 	bl	80031e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d107      	bne.n	8002efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e050      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002efe:	893b      	ldrh	r3, [r7, #8]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0a:	6a39      	ldr	r1, [r7, #32]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f967 	bl	80031e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00d      	beq.n	8002f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d107      	bne.n	8002f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e035      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f82b 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f6a:	d103      	bne.n	8002f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e013      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f78:	897b      	ldrh	r3, [r7, #10]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	4906      	ldr	r1, [pc, #24]	@ (8002fa8 <I2C_RequestMemoryRead+0x1cc>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f886 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	00010002 	.word	0x00010002

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	e048      	b.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d044      	beq.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fff7 	bl	8001fb8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d139      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10d      	bne.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	e00c      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d116      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e023      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10d      	bne.n	8003076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	e00c      	b.n	8003090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	429a      	cmp	r2, r3
 8003094:	d093      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ae:	e071      	b.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030be:	d123      	bne.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e067      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d041      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003110:	f7fe ff52 	bl	8001fb8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d302      	bcc.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d136      	bne.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10c      	bne.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e00b      	b.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e021      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10c      	bne.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e00b      	b.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af6d 	bne.w	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	e034      	b.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f89b 	bl	800332a <I2C_IsAcknowledgeFailed>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e034      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d028      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe fed7 	bl	8001fb8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11d      	bne.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b80      	cmp	r3, #128	@ 0x80
 8003228:	d016      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003262:	2b80      	cmp	r3, #128	@ 0x80
 8003264:	d1c3      	bne.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800327c:	e049      	b.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d119      	bne.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e030      	b.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7fe fe7a 	bl	8001fb8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11d      	bne.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e0:	2b40      	cmp	r3, #64	@ 0x40
 80032e2:	d016      	beq.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	2b40      	cmp	r3, #64	@ 0x40
 800331e:	d1ae      	bne.n	800327e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003340:	d11b      	bne.n	800337a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800334a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
	...

08003388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e272      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8087 	beq.w	80034b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a8:	4b92      	ldr	r3, [pc, #584]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d00c      	beq.n	80033ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033b4:	4b8f      	ldr	r3, [pc, #572]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d112      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5e>
 80033c0:	4b8c      	ldr	r3, [pc, #560]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033cc:	d10b      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ce:	4b89      	ldr	r3, [pc, #548]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d06c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x12c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d168      	bne.n	80034b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e24c      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x76>
 80033f0:	4b80      	ldr	r3, [pc, #512]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7f      	ldr	r2, [pc, #508]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e02e      	b.n	800345c <HAL_RCC_OscConfig+0xd4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x98>
 8003406:	4b7b      	ldr	r3, [pc, #492]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7a      	ldr	r2, [pc, #488]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b78      	ldr	r3, [pc, #480]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a77      	ldr	r2, [pc, #476]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xd4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0xbc>
 800342a:	4b72      	ldr	r3, [pc, #456]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a71      	ldr	r2, [pc, #452]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b6f      	ldr	r3, [pc, #444]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6e      	ldr	r2, [pc, #440]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xd4>
 8003444:	4b6b      	ldr	r3, [pc, #428]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6a      	ldr	r2, [pc, #424]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b68      	ldr	r3, [pc, #416]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a67      	ldr	r2, [pc, #412]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800345a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fda8 	bl	8001fb8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe fda4 	bl	8001fb8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	@ 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e200      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b5d      	ldr	r3, [pc, #372]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xe4>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fd94 	bl	8001fb8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fd90 	bl	8001fb8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1ec      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	4b53      	ldr	r3, [pc, #332]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x10c>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d063      	beq.n	800358a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c2:	4b4c      	ldr	r3, [pc, #304]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ce:	4b49      	ldr	r3, [pc, #292]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d11c      	bne.n	8003514 <HAL_RCC_OscConfig+0x18c>
 80034da:	4b46      	ldr	r3, [pc, #280]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	4b43      	ldr	r3, [pc, #268]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_RCC_OscConfig+0x176>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1c0      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4939      	ldr	r1, [pc, #228]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	e03a      	b.n	800358a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	4b36      	ldr	r3, [pc, #216]	@ (80035f8 <HAL_RCC_OscConfig+0x270>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fd49 	bl	8001fb8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352a:	f7fe fd45 	bl	8001fb8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1a1      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	4b2d      	ldr	r3, [pc, #180]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4927      	ldr	r1, [pc, #156]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	e015      	b.n	800358a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355e:	4b26      	ldr	r3, [pc, #152]	@ (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fe fd28 	bl	8001fb8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356c:	f7fe fd24 	bl	8001fb8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e180      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03a      	beq.n	800360c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d019      	beq.n	80035d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <HAL_RCC_OscConfig+0x274>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fe fd08 	bl	8001fb8 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fe fd04 	bl	8001fb8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e160      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	4b0d      	ldr	r3, [pc, #52]	@ (80035f4 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ca:	2001      	movs	r0, #1
 80035cc:	f000 fafe 	bl	8003bcc <RCC_Delay>
 80035d0:	e01c      	b.n	800360c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d2:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <HAL_RCC_OscConfig+0x274>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d8:	f7fe fcee 	bl	8001fb8 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035de:	e00f      	b.n	8003600 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe fcea 	bl	8001fb8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d908      	bls.n	8003600 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e146      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	42420000 	.word	0x42420000
 80035fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003600:	4b92      	ldr	r3, [pc, #584]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e9      	bne.n	80035e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80a6 	beq.w	8003766 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b8b      	ldr	r3, [pc, #556]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b88      	ldr	r3, [pc, #544]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4a87      	ldr	r2, [pc, #540]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003634:	61d3      	str	r3, [r2, #28]
 8003636:	4b85      	ldr	r3, [pc, #532]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	4b82      	ldr	r3, [pc, #520]	@ (8003850 <HAL_RCC_OscConfig+0x4c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d118      	bne.n	8003684 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003652:	4b7f      	ldr	r3, [pc, #508]	@ (8003850 <HAL_RCC_OscConfig+0x4c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7e      	ldr	r2, [pc, #504]	@ (8003850 <HAL_RCC_OscConfig+0x4c8>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800365c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fe fcab 	bl	8001fb8 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fe fca7 	bl	8001fb8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	@ 0x64
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e103      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	4b75      	ldr	r3, [pc, #468]	@ (8003850 <HAL_RCC_OscConfig+0x4c8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x312>
 800368c:	4b6f      	ldr	r3, [pc, #444]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a6e      	ldr	r2, [pc, #440]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	e02d      	b.n	80036f6 <HAL_RCC_OscConfig+0x36e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x334>
 80036a2:	4b6a      	ldr	r3, [pc, #424]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a69      	ldr	r2, [pc, #420]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6213      	str	r3, [r2, #32]
 80036ae:	4b67      	ldr	r3, [pc, #412]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4a66      	ldr	r2, [pc, #408]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6213      	str	r3, [r2, #32]
 80036ba:	e01c      	b.n	80036f6 <HAL_RCC_OscConfig+0x36e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_OscConfig+0x356>
 80036c4:	4b61      	ldr	r3, [pc, #388]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4a60      	ldr	r2, [pc, #384]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6213      	str	r3, [r2, #32]
 80036d0:	4b5e      	ldr	r3, [pc, #376]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	4a5d      	ldr	r2, [pc, #372]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6213      	str	r3, [r2, #32]
 80036dc:	e00b      	b.n	80036f6 <HAL_RCC_OscConfig+0x36e>
 80036de:	4b5b      	ldr	r3, [pc, #364]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4a5a      	ldr	r2, [pc, #360]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6213      	str	r3, [r2, #32]
 80036ea:	4b58      	ldr	r3, [pc, #352]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4a57      	ldr	r2, [pc, #348]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d015      	beq.n	800372a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fe fc5b 	bl	8001fb8 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fc57 	bl	8001fb8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0b1      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b4b      	ldr	r3, [pc, #300]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ee      	beq.n	8003706 <HAL_RCC_OscConfig+0x37e>
 8003728:	e014      	b.n	8003754 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fe fc45 	bl	8001fb8 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe fc41 	bl	8001fb8 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e09b      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	4b40      	ldr	r3, [pc, #256]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ee      	bne.n	8003732 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4a3b      	ldr	r2, [pc, #236]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003764:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8087 	beq.w	800387e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003770:	4b36      	ldr	r3, [pc, #216]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d061      	beq.n	8003840 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d146      	bne.n	8003812 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b33      	ldr	r3, [pc, #204]	@ (8003854 <HAL_RCC_OscConfig+0x4cc>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe fc15 	bl	8001fb8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fc11 	bl	8001fb8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e06d      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a4:	4b29      	ldr	r3, [pc, #164]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b8:	d108      	bne.n	80037cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	4921      	ldr	r1, [pc, #132]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037cc:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a19      	ldr	r1, [r3, #32]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	430b      	orrs	r3, r1
 80037de:	491b      	ldr	r1, [pc, #108]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <HAL_RCC_OscConfig+0x4cc>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7fe fbe5 	bl	8001fb8 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fe fbe1 	bl	8001fb8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e03d      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x46a>
 8003810:	e035      	b.n	800387e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b10      	ldr	r3, [pc, #64]	@ (8003854 <HAL_RCC_OscConfig+0x4cc>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fbce 	bl	8001fb8 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fe fbca 	bl	8001fb8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e026      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCC_OscConfig+0x4c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x498>
 800383e:	e01e      	b.n	800387e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d107      	bne.n	8003858 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e019      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
 8003854:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003858:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <HAL_RCC_OscConfig+0x500>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	429a      	cmp	r2, r3
 800386a:	d106      	bne.n	800387a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000

0800388c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0d0      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d910      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b67      	ldr	r3, [pc, #412]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 0207 	bic.w	r2, r3, #7
 80038b6:	4965      	ldr	r1, [pc, #404]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b63      	ldr	r3, [pc, #396]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b8      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e8:	4b59      	ldr	r3, [pc, #356]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a58      	ldr	r2, [pc, #352]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003900:	4b53      	ldr	r3, [pc, #332]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a52      	ldr	r2, [pc, #328]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800390a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390c:	4b50      	ldr	r3, [pc, #320]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	494d      	ldr	r1, [pc, #308]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d040      	beq.n	80039ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b47      	ldr	r3, [pc, #284]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d115      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e07f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394a:	4b41      	ldr	r3, [pc, #260]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e073      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06b      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396a:	4b39      	ldr	r3, [pc, #228]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f023 0203 	bic.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4936      	ldr	r1, [pc, #216]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800397c:	f7fe fb1c 	bl	8001fb8 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	e00a      	b.n	800399a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003984:	f7fe fb18 	bl	8001fb8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e053      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 020c 	and.w	r2, r3, #12
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d1eb      	bne.n	8003984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ac:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d210      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 0207 	bic.w	r2, r3, #7
 80039c2:	4922      	ldr	r1, [pc, #136]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e032      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e8:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4916      	ldr	r1, [pc, #88]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a06:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	490e      	ldr	r1, [pc, #56]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a1a:	f000 f821 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	490a      	ldr	r1, [pc, #40]	@ (8003a54 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	5ccb      	ldrb	r3, [r1, r3]
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <HAL_RCC_ClockConfig+0x1cc>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <HAL_RCC_ClockConfig+0x1d0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe f906 	bl	8001c4c <HAL_InitTick>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40021000 	.word	0x40021000
 8003a54:	0800dd5c 	.word	0x0800dd5c
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	20000004 	.word	0x20000004

08003a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d002      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x30>
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x36>
 8003a8e:	e027      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a90:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a92:	613b      	str	r3, [r7, #16]
      break;
 8003a94:	e027      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	0c9b      	lsrs	r3, r3, #18
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003aae:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0c5b      	lsrs	r3, r3, #17
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aba:	5cd3      	ldrb	r3, [r2, r3]
 8003abc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ac2:	fb03 f202 	mul.w	r2, r3, r2
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e004      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	613b      	str	r3, [r7, #16]
      break;
 8003ade:	e002      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ae2:	613b      	str	r3, [r7, #16]
      break;
 8003ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae6:	693b      	ldr	r3, [r7, #16]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	007a1200 	.word	0x007a1200
 8003afc:	0800dd74 	.word	0x0800dd74
 8003b00:	0800dd84 	.word	0x0800dd84
 8003b04:	003d0900 	.word	0x003d0900

08003b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b02      	ldr	r3, [pc, #8]	@ (8003b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	20000000 	.word	0x20000000

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff2 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	@ (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	0800dd6c 	.word	0x0800dd6c

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b48:	f7ff ffde 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0adb      	lsrs	r3, r3, #11
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	@ (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	0800dd6c 	.word	0x0800dd6c

08003b6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	220f      	movs	r2, #15
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b7c:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <HAL_RCC_GetClockConfig+0x58>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b88:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <HAL_RCC_GetClockConfig+0x58>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_RCC_GetClockConfig+0x58>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ba0:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <HAL_RCC_GetClockConfig+0x58>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0207 	and.w	r2, r3, #7
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40022000 	.word	0x40022000

08003bcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <RCC_Delay+0x34>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <RCC_Delay+0x38>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	0a5b      	lsrs	r3, r3, #9
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003be8:	bf00      	nop
  }
  while (Delay --);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	60fa      	str	r2, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f9      	bne.n	8003be8 <RCC_Delay+0x1c>
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	20000000 	.word	0x20000000
 8003c04:	10624dd3 	.word	0x10624dd3

08003c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd ff4a 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fc88 	bl	800455c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d001      	beq.n	8003cc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e032      	b.n	8003d26 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	@ (8003d30 <HAL_TIM_Base_Start+0x88>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_TIM_Base_Start+0x48>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIM_Base_Start+0x48>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <HAL_TIM_Base_Start+0x8c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIM_Base_Start+0x48>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a13      	ldr	r2, [pc, #76]	@ (8003d38 <HAL_TIM_Base_Start+0x90>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d111      	bne.n	8003d14 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d010      	beq.n	8003d24 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	e007      	b.n	8003d24 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800

08003d3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10f      	bne.n	8003d74 <HAL_TIM_Base_Stop+0x38>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d107      	bne.n	8003d74 <HAL_TIM_Base_Stop+0x38>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d001      	beq.n	8003da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e03a      	b.n	8003e16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <HAL_TIM_Base_Start_IT+0x98>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x58>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dca:	d009      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x58>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x58>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a13      	ldr	r2, [pc, #76]	@ (8003e28 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d010      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	e007      	b.n	8003e14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800

08003e2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e041      	b.n	8003ec2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f839 	bl	8003eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 fb76 	bl	800455c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_TIM_PWM_Start+0x24>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	e022      	b.n	8003f46 <HAL_TIM_PWM_Start+0x6a>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d109      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x3e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e015      	b.n	8003f46 <HAL_TIM_PWM_Start+0x6a>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d109      	bne.n	8003f34 <HAL_TIM_PWM_Start+0x58>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e008      	b.n	8003f46 <HAL_TIM_PWM_Start+0x6a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e05e      	b.n	800400c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_PWM_Start+0x82>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f5c:	e013      	b.n	8003f86 <HAL_TIM_PWM_Start+0xaa>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_PWM_Start+0x92>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f6c:	e00b      	b.n	8003f86 <HAL_TIM_PWM_Start+0xaa>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_PWM_Start+0xa2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f7c:	e003      	b.n	8003f86 <HAL_TIM_PWM_Start+0xaa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	6839      	ldr	r1, [r7, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fd70 	bl	8004a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <HAL_TIM_PWM_Start+0x138>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d107      	bne.n	8003fae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a18      	ldr	r2, [pc, #96]	@ (8004014 <HAL_TIM_PWM_Start+0x138>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_TIM_PWM_Start+0xfa>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc0:	d009      	beq.n	8003fd6 <HAL_TIM_PWM_Start+0xfa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <HAL_TIM_PWM_Start+0x13c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIM_PWM_Start+0xfa>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a12      	ldr	r2, [pc, #72]	@ (800401c <HAL_TIM_PWM_Start+0x140>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d111      	bne.n	8003ffa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d010      	beq.n	800400a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	e007      	b.n	800400a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800

08004020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0202 	mvn.w	r2, #2
 8004054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa5a 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa4d 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa5c 	bl	8004536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d020      	beq.n	80040d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01b      	beq.n	80040d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0204 	mvn.w	r2, #4
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa34 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa27 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa36 	bl	8004536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d020      	beq.n	800411c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0208 	mvn.w	r2, #8
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa0e 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa01 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa10 	bl	8004536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d020      	beq.n	8004168 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2208      	movs	r2, #8
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9e8 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9db 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9ea 	bl	8004536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0201 	mvn.w	r2, #1
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fc12 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fced 	bl	8004b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9ba 	bl	8004548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0220 	mvn.w	r2, #32
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fcc0 	bl	8004b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800421a:	2302      	movs	r3, #2
 800421c:	e0ae      	b.n	800437c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	f200 809f 	bhi.w	800436c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800422e:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004269 	.word	0x08004269
 8004238:	0800436d 	.word	0x0800436d
 800423c:	0800436d 	.word	0x0800436d
 8004240:	0800436d 	.word	0x0800436d
 8004244:	080042a9 	.word	0x080042a9
 8004248:	0800436d 	.word	0x0800436d
 800424c:	0800436d 	.word	0x0800436d
 8004250:	0800436d 	.word	0x0800436d
 8004254:	080042eb 	.word	0x080042eb
 8004258:	0800436d 	.word	0x0800436d
 800425c:	0800436d 	.word	0x0800436d
 8004260:	0800436d 	.word	0x0800436d
 8004264:	0800432b 	.word	0x0800432b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f9e2 	bl	8004638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0208 	orr.w	r2, r2, #8
 8004282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0204 	bic.w	r2, r2, #4
 8004292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6999      	ldr	r1, [r3, #24]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	619a      	str	r2, [r3, #24]
      break;
 80042a6:	e064      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fa28 	bl	8004704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6999      	ldr	r1, [r3, #24]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	021a      	lsls	r2, r3, #8
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	619a      	str	r2, [r3, #24]
      break;
 80042e8:	e043      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fa71 	bl	80047d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0208 	orr.w	r2, r2, #8
 8004304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0204 	bic.w	r2, r2, #4
 8004314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69d9      	ldr	r1, [r3, #28]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	61da      	str	r2, [r3, #28]
      break;
 8004328:	e023      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fabb 	bl	80048ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69d9      	ldr	r1, [r3, #28]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	021a      	lsls	r2, r3, #8
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	61da      	str	r2, [r3, #28]
      break;
 800436a:	e002      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c>
 800439c:	2302      	movs	r3, #2
 800439e:	e0b4      	b.n	800450a <HAL_TIM_ConfigClockSource+0x186>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d8:	d03e      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xd4>
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043de:	f200 8087 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	f000 8086 	beq.w	80044f6 <HAL_TIM_ConfigClockSource+0x172>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ee:	d87f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b70      	cmp	r3, #112	@ 0x70
 80043f2:	d01a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xa6>
 80043f4:	2b70      	cmp	r3, #112	@ 0x70
 80043f6:	d87b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b60      	cmp	r3, #96	@ 0x60
 80043fa:	d050      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x11a>
 80043fc:	2b60      	cmp	r3, #96	@ 0x60
 80043fe:	d877      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b50      	cmp	r3, #80	@ 0x50
 8004402:	d03c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xfa>
 8004404:	2b50      	cmp	r3, #80	@ 0x50
 8004406:	d873      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d058      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x13a>
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d86f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d064      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004414:	2b30      	cmp	r3, #48	@ 0x30
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d867      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004424:	2b10      	cmp	r3, #16
 8004426:	d05a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004428:	e062      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	f000 fafc 	bl	8004a36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800444c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e04f      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	f000 fae5 	bl	8004a36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fa5c 	bl	8004948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	@ 0x50
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fab3 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 800449c:	e02c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 fa7a 	bl	80049a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	@ 0x60
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 faa3 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fa3c 	bl	8004948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	@ 0x40
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fa93 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f000 fa8a 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
	...

0800455c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a2f      	ldr	r2, [pc, #188]	@ (800462c <TIM_Base_SetConfig+0xd0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00b      	beq.n	800458c <TIM_Base_SetConfig+0x30>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800457a:	d007      	beq.n	800458c <TIM_Base_SetConfig+0x30>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a2c      	ldr	r2, [pc, #176]	@ (8004630 <TIM_Base_SetConfig+0xd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_Base_SetConfig+0x30>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <TIM_Base_SetConfig+0xd8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d108      	bne.n	800459e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a22      	ldr	r2, [pc, #136]	@ (800462c <TIM_Base_SetConfig+0xd0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_Base_SetConfig+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0x62>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004630 <TIM_Base_SetConfig+0xd4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0x62>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004634 <TIM_Base_SetConfig+0xd8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d108      	bne.n	80045d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0d      	ldr	r2, [pc, #52]	@ (800462c <TIM_Base_SetConfig+0xd0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d103      	bne.n	8004604 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]
  }
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800

08004638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f023 0201 	bic.w	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0303 	bic.w	r3, r3, #3
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 0302 	bic.w	r3, r3, #2
 8004680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <TIM_OC1_SetConfig+0xc8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10c      	bne.n	80046ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0308 	bic.w	r3, r3, #8
 800469a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <TIM_OC1_SetConfig+0xc8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d111      	bne.n	80046da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	621a      	str	r2, [r3, #32]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40012c00 	.word	0x40012c00

08004704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f023 0210 	bic.w	r2, r3, #16
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 0320 	bic.w	r3, r3, #32
 800474e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1d      	ldr	r2, [pc, #116]	@ (80047d4 <TIM_OC2_SetConfig+0xd0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10d      	bne.n	8004780 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800476a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800477e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <TIM_OC2_SetConfig+0xd0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d113      	bne.n	80047b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800478e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00

080047d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <TIM_OC3_SetConfig+0xd0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10d      	bne.n	8004852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800483c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a14      	ldr	r2, [pc, #80]	@ (80048a8 <TIM_OC3_SetConfig+0xd0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d113      	bne.n	8004882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	bf00      	nop
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00

080048ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a0f      	ldr	r2, [pc, #60]	@ (8004944 <TIM_OC4_SetConfig+0x98>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d109      	bne.n	8004920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40012c00 	.word	0x40012c00

08004948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f023 0201 	bic.w	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 030a 	bic.w	r3, r3, #10
 8004984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f023 0210 	bic.w	r2, r3, #16
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	031b      	lsls	r3, r3, #12
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	621a      	str	r2, [r3, #32]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f043 0307 	orr.w	r3, r3, #7
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	021a      	lsls	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	609a      	str	r2, [r3, #8]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	2201      	movs	r2, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	401a      	ands	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e046      	b.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b20:	d009      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a12      	ldr	r2, [pc, #72]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a10      	ldr	r2, [pc, #64]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10c      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800

08004b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e042      	b.n	8004c34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc ffee 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	@ 0x24
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fdb7 	bl	8005754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	@ 0x28
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d175      	bne.n	8004d48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UART_Transmit+0x2c>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e06e      	b.n	8004d4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2221      	movs	r2, #33	@ 0x21
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c7a:	f7fd f99d 	bl	8001fb8 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c94:	d108      	bne.n	8004ca8 <HAL_UART_Transmit+0x6c>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d104      	bne.n	8004ca8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e003      	b.n	8004cb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb0:	e02e      	b.n	8004d10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2180      	movs	r1, #128	@ 0x80
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fb1c 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e03a      	b.n	8004d4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3302      	adds	r3, #2
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e007      	b.n	8004d02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1cb      	bne.n	8004cb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2140      	movs	r1, #64	@ 0x40
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fae8 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d112      	bne.n	8004d92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_UART_Receive_IT+0x26>
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e00b      	b.n	8004d94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	461a      	mov	r2, r3
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fb0f 	bl	80053ac <UART_Start_Receive_IT>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	e000      	b.n	8004d94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b0ba      	sub	sp, #232	@ 0xe8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10f      	bne.n	8004e02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <HAL_UART_IRQHandler+0x66>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fbec 	bl	80055d8 <UART_Receive_IT>
      return;
 8004e00:	e25b      	b.n	80052ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80de 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x22c>
 8004e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80d1 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_UART_IRQHandler+0xae>
 8004e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e42:	f043 0201 	orr.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_UART_IRQHandler+0xd2>
 8004e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e66:	f043 0202 	orr.w	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <HAL_UART_IRQHandler+0xf6>
 8004e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	f043 0204 	orr.w	r2, r3, #4
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d011      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x126>
 8004e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f043 0208 	orr.w	r2, r3, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 81f2 	beq.w	80052b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_UART_IRQHandler+0x14e>
 8004ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fb77 	bl	80055d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <HAL_UART_IRQHandler+0x17a>
 8004f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d04f      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa81 	bl	800541e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d041      	beq.n	8004fae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1d9      	bne.n	8004f2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d013      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f82:	4a7e      	ldr	r2, [pc, #504]	@ (800517c <HAL_UART_IRQHandler+0x3e0>)
 8004f84:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd f938 	bl	8002200 <HAL_DMA_Abort_IT>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	e00e      	b.n	8004fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f993 	bl	80052d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	e00a      	b.n	8004fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f98f 	bl	80052d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	e006      	b.n	8004fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f98b 	bl	80052d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fc2:	e175      	b.n	80052b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	bf00      	nop
    return;
 8004fc6:	e173      	b.n	80052b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	f040 814f 	bne.w	8005270 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8148 	beq.w	8005270 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8141 	beq.w	8005270 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80b6 	beq.w	8005180 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8145 	beq.w	80052b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800502e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005032:	429a      	cmp	r2, r3
 8005034:	f080 813e 	bcs.w	80052b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800503e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b20      	cmp	r3, #32
 8005048:	f000 8088 	beq.w	800515c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005062:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005066:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800506a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005078:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800507c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005084:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1d9      	bne.n	800504c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e1      	bne.n	8005098 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3314      	adds	r3, #20
 80050f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e3      	bne.n	80050d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800512a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800512c:	f023 0310 	bic.w	r3, r3, #16
 8005130:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800513e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005140:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800514c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e3      	bne.n	800511a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005156:	4618      	mov	r0, r3
 8005158:	f7fd f817 	bl	800218a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800516a:	b29b      	uxth	r3, r3
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8b6 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005178:	e09c      	b.n	80052b4 <HAL_UART_IRQHandler+0x518>
 800517a:	bf00      	nop
 800517c:	080054e3 	.word	0x080054e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005188:	b29b      	uxth	r3, r3
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 808e 	beq.w	80052b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800519c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8089 	beq.w	80052b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e3      	bne.n	80051a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	623b      	str	r3, [r7, #32]
   return(result);
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3314      	adds	r3, #20
 80051fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005202:	633a      	str	r2, [r7, #48]	@ 0x30
 8005204:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e3      	bne.n	80051de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	60fb      	str	r3, [r7, #12]
   return(result);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0310 	bic.w	r3, r3, #16
 800523a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005248:	61fa      	str	r2, [r7, #28]
 800524a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	69b9      	ldr	r1, [r7, #24]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	617b      	str	r3, [r7, #20]
   return(result);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e3      	bne.n	8005224 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f83b 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800526e:	e023      	b.n	80052b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <HAL_UART_IRQHandler+0x4f4>
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f93e 	bl	800550a <UART_Transmit_IT>
    return;
 800528e:	e014      	b.n	80052ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00e      	beq.n	80052ba <HAL_UART_IRQHandler+0x51e>
 800529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f97d 	bl	80055a8 <UART_EndTransmit_IT>
    return;
 80052ae:	e004      	b.n	80052ba <HAL_UART_IRQHandler+0x51e>
    return;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <HAL_UART_IRQHandler+0x51e>
      return;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <HAL_UART_IRQHandler+0x51e>
      return;
 80052b8:	bf00      	nop
  }
}
 80052ba:	37e8      	adds	r7, #232	@ 0xe8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b086      	sub	sp, #24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e03b      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d037      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fc fe50 	bl	8001fb8 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <UART_WaitOnFlagUntilTimeout+0x30>
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e03a      	b.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d023      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b80      	cmp	r3, #128	@ 0x80
 8005340:	d020      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d01d      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b08      	cmp	r3, #8
 8005354:	d116      	bne.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f856 	bl	800541e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2208      	movs	r2, #8
 8005376:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e00f      	b.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d0b4      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2222      	movs	r2, #34	@ 0x22
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0220 	orr.w	r2, r2, #32
 8005410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541e:	b480      	push	{r7}
 8005420:	b095      	sub	sp, #84	@ 0x54
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800543c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005446:	643a      	str	r2, [r7, #64]	@ 0x40
 8005448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800544c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e5      	bne.n	8005426 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	61fb      	str	r3, [r7, #28]
   return(result);
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800547a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005492:	2b01      	cmp	r3, #1
 8005494:	d119      	bne.n	80054ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0310 	bic.w	r3, r3, #16
 80054ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054b6:	61ba      	str	r2, [r7, #24]
 80054b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	613b      	str	r3, [r7, #16]
   return(result);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e5      	bne.n	8005496 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054d8:	bf00      	nop
 80054da:	3754      	adds	r7, #84	@ 0x54
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fee8 	bl	80052d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b21      	cmp	r3, #33	@ 0x21
 800551c:	d13e      	bne.n	800559c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005526:	d114      	bne.n	8005552 <UART_Transmit_IT+0x48>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d110      	bne.n	8005552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]
 8005550:	e008      	b.n	8005564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6211      	str	r1, [r2, #32]
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4619      	mov	r1, r3
 8005572:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10f      	bne.n	8005598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fe79 	bl	80052c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08c      	sub	sp, #48	@ 0x30
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b22      	cmp	r3, #34	@ 0x22
 80055ea:	f040 80ae 	bne.w	800574a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f6:	d117      	bne.n	8005628 <UART_Receive_IT+0x50>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d113      	bne.n	8005628 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	b29a      	uxth	r2, r3
 8005618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	629a      	str	r2, [r3, #40]	@ 0x28
 8005626:	e026      	b.n	8005676 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563a:	d007      	beq.n	800564c <UART_Receive_IT+0x74>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <UART_Receive_IT+0x82>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e008      	b.n	800566c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005666:	b2da      	uxtb	r2, r3
 8005668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29b      	uxth	r3, r3
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	4619      	mov	r1, r3
 8005684:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005686:	2b00      	cmp	r3, #0
 8005688:	d15d      	bne.n	8005746 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0220 	bic.w	r2, r2, #32
 8005698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d135      	bne.n	800573c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	613b      	str	r3, [r7, #16]
   return(result);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f023 0310 	bic.w	r3, r3, #16
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f6:	623a      	str	r2, [r7, #32]
 80056f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	69f9      	ldr	r1, [r7, #28]
 80056fc:	6a3a      	ldr	r2, [r7, #32]
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	61bb      	str	r3, [r7, #24]
   return(result);
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e5      	bne.n	80056d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d10a      	bne.n	800572e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fdd5 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
 800573a:	e002      	b.n	8005742 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fb fcbd 	bl	80010bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e002      	b.n	800574c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3730      	adds	r7, #48	@ 0x30
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800578e:	f023 030c 	bic.w	r3, r3, #12
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	430b      	orrs	r3, r1
 800579a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005868 <UART_SetConfig+0x114>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057bc:	f7fe f9c2 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	e002      	b.n	80057ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057c4:	f7fe f9aa 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 80057c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	4a22      	ldr	r2, [pc, #136]	@ (800586c <UART_SetConfig+0x118>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	0119      	lsls	r1, r3, #4
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009a      	lsls	r2, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005800:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <UART_SetConfig+0x118>)
 8005802:	fba3 0302 	umull	r0, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2064      	movs	r0, #100	@ 0x64
 800580a:	fb00 f303 	mul.w	r3, r0, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	3332      	adds	r3, #50	@ 0x32
 8005814:	4a15      	ldr	r2, [pc, #84]	@ (800586c <UART_SetConfig+0x118>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005820:	4419      	add	r1, r3
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009a      	lsls	r2, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	fbb2 f2f3 	udiv	r2, r2, r3
 8005838:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <UART_SetConfig+0x118>)
 800583a:	fba3 0302 	umull	r0, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2064      	movs	r0, #100	@ 0x64
 8005842:	fb00 f303 	mul.w	r3, r0, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	@ 0x32
 800584c:	4a07      	ldr	r2, [pc, #28]	@ (800586c <UART_SetConfig+0x118>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	440a      	add	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40013800 	.word	0x40013800
 800586c:	51eb851f 	.word	0x51eb851f

08005870 <Delay_us>:

HCSR04_State hc04_state = HCSR04_IDLE_STATE;

float Distance;

void Delay_us(uint16_t us){
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	80fb      	strh	r3, [r7, #6]
	htim1.Instance -> CNT = 0;
 800587a:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <Delay_us+0x34>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	625a      	str	r2, [r3, #36]	@ 0x24
	//TIM2 -> CNT = 0; (Cach 2)
	HAL_TIM_Base_Start(&htim1);
 8005882:	4808      	ldr	r0, [pc, #32]	@ (80058a4 <Delay_us+0x34>)
 8005884:	f7fe fa10 	bl	8003ca8 <HAL_TIM_Base_Start>
	while (htim1.Instance -> CNT < us);
 8005888:	bf00      	nop
 800588a:	4b06      	ldr	r3, [pc, #24]	@ (80058a4 <Delay_us+0x34>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	429a      	cmp	r2, r3
 8005894:	d3f9      	bcc.n	800588a <Delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim1);
 8005896:	4803      	ldr	r0, [pc, #12]	@ (80058a4 <Delay_us+0x34>)
 8005898:	f7fe fa50 	bl	8003d3c <HAL_TIM_Base_Stop>
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000248 	.word	0x20000248

080058a8 <pulseGPIO>:
	for (int i = 0;i<ms;i++){
		Delay_us(1000);
	}
}

void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 80058b4:	887b      	ldrh	r3, [r7, #2]
 80058b6:	2201      	movs	r2, #1
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fc fe9c 	bl	80025f8 <HAL_GPIO_WritePin>
	Delay_us(20);
 80058c0:	2014      	movs	r0, #20
 80058c2:	f7ff ffd5 	bl	8005870 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 80058c6:	887b      	ldrh	r3, [r7, #2]
 80058c8:	2200      	movs	r2, #0
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fc fe93 	bl	80025f8 <HAL_GPIO_WritePin>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HCSR04_Start>:

void HCSR04_Start(){
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	if (hc04_state == HCSR04_IDLE_STATE){
 80058e0:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HCSR04_Start+0x20>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <HCSR04_Start+0x1c>
	pulseGPIO(GPIOA, GPIO_PIN_8);
 80058e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058ec:	4804      	ldr	r0, [pc, #16]	@ (8005900 <HCSR04_Start+0x24>)
 80058ee:	f7ff ffdb 	bl	80058a8 <pulseGPIO>
	hc04_state = HCSR04_WAIT_RISING_STATE;
 80058f2:	4b02      	ldr	r3, [pc, #8]	@ (80058fc <HCSR04_Start+0x20>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
	}
}
 80058f8:	bf00      	nop
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000420 	.word	0x20000420
 8005900:	40010800 	.word	0x40010800

08005904 <MPU9250_Read_Accel_Gyro>:
	MPU_Write_Register(ACCEL_CONFIG, 0x00);
	MPU_Write_Register(GYRO_CONFIG,  0x00);
}

//Đọc dữ liệu
void MPU9250_Read_Accel_Gyro(int16_t *accel, int16_t *gyro) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	@ 0x28
 8005908:	af04      	add	r7, sp, #16
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H, 1, data, 14, 100);
 800590e:	2364      	movs	r3, #100	@ 0x64
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	230e      	movs	r3, #14
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2301      	movs	r3, #1
 800591e:	223b      	movs	r2, #59	@ 0x3b
 8005920:	21d0      	movs	r1, #208	@ 0xd0
 8005922:	4820      	ldr	r0, [pc, #128]	@ (80059a4 <MPU9250_Read_Accel_Gyro+0xa0>)
 8005924:	f7fc ffe6 	bl	80028f4 <HAL_I2C_Mem_Read>

	// Gia tốc
	accel[0] = (int16_t) (data[0] << 8 | data[1]);
 8005928:	7a3b      	ldrb	r3, [r7, #8]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	b21a      	sxth	r2, r3
 800592e:	7a7b      	ldrb	r3, [r7, #9]
 8005930:	b21b      	sxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b21a      	sxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	801a      	strh	r2, [r3, #0]
	accel[1] = (int16_t) (data[2] << 8 | data[3]);
 800593a:	7abb      	ldrb	r3, [r7, #10]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	b219      	sxth	r1, r3
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	b21a      	sxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3302      	adds	r3, #2
 8005948:	430a      	orrs	r2, r1
 800594a:	b212      	sxth	r2, r2
 800594c:	801a      	strh	r2, [r3, #0]
	accel[2] = (int16_t) (data[4] << 8 | data[5]);
 800594e:	7b3b      	ldrb	r3, [r7, #12]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	b219      	sxth	r1, r3
 8005954:	7b7b      	ldrb	r3, [r7, #13]
 8005956:	b21a      	sxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	430a      	orrs	r2, r1
 800595e:	b212      	sxth	r2, r2
 8005960:	801a      	strh	r2, [r3, #0]

	// Con quay
	gyro[0] = (int16_t) (data[8] << 8 | data[9]);
 8005962:	7c3b      	ldrb	r3, [r7, #16]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	b21a      	sxth	r2, r3
 8005968:	7c7b      	ldrb	r3, [r7, #17]
 800596a:	b21b      	sxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b21a      	sxth	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t) (data[10] << 8 | data[11]);
 8005974:	7cbb      	ldrb	r3, [r7, #18]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	b219      	sxth	r1, r3
 800597a:	7cfb      	ldrb	r3, [r7, #19]
 800597c:	b21a      	sxth	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	3302      	adds	r3, #2
 8005982:	430a      	orrs	r2, r1
 8005984:	b212      	sxth	r2, r2
 8005986:	801a      	strh	r2, [r3, #0]
	gyro[2] = (int16_t) (data[12] << 8 | data[13]);
 8005988:	7d3b      	ldrb	r3, [r7, #20]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	b219      	sxth	r1, r3
 800598e:	7d7b      	ldrb	r3, [r7, #21]
 8005990:	b21a      	sxth	r2, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	3304      	adds	r3, #4
 8005996:	430a      	orrs	r2, r1
 8005998:	b212      	sxth	r2, r2
 800599a:	801a      	strh	r2, [r3, #0]
}
 800599c:	bf00      	nop
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	200001f4 	.word	0x200001f4

080059a8 <Send_Sensor_Data>:

void Send_Sensor_Data(int16_t *accel, int16_t *gyro) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	    // Chuyển về đơn vị vật lý
	    ax = accel[0] / 16384.0f;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fb f98f 	bl	8000cdc <__aeabi_i2f>
 80059be:	4603      	mov	r3, r0
 80059c0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fb fa91 	bl	8000eec <__aeabi_fdiv>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b2b      	ldr	r3, [pc, #172]	@ (8005a7c <Send_Sensor_Data+0xd4>)
 80059d0:	601a      	str	r2, [r3, #0]
	    ay = accel[1] / 16384.0f;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3302      	adds	r3, #2
 80059d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fb f97e 	bl	8000cdc <__aeabi_i2f>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fb fa80 	bl	8000eec <__aeabi_fdiv>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b23      	ldr	r3, [pc, #140]	@ (8005a80 <Send_Sensor_Data+0xd8>)
 80059f2:	601a      	str	r2, [r3, #0]
	    az = accel[2] / 16384.0f;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fb f96d 	bl	8000cdc <__aeabi_i2f>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fb fa6f 	bl	8000eec <__aeabi_fdiv>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b1c      	ldr	r3, [pc, #112]	@ (8005a84 <Send_Sensor_Data+0xdc>)
 8005a14:	601a      	str	r2, [r3, #0]

	    gx = gyro[0] / 131.0f;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fb f95d 	bl	8000cdc <__aeabi_i2f>
 8005a22:	4603      	mov	r3, r0
 8005a24:	4918      	ldr	r1, [pc, #96]	@ (8005a88 <Send_Sensor_Data+0xe0>)
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fb fa60 	bl	8000eec <__aeabi_fdiv>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4b16      	ldr	r3, [pc, #88]	@ (8005a8c <Send_Sensor_Data+0xe4>)
 8005a32:	601a      	str	r2, [r3, #0]
	    gy = gyro[1] / 131.0f;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	3302      	adds	r3, #2
 8005a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fb f94d 	bl	8000cdc <__aeabi_i2f>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4910      	ldr	r1, [pc, #64]	@ (8005a88 <Send_Sensor_Data+0xe0>)
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fb fa50 	bl	8000eec <__aeabi_fdiv>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <Send_Sensor_Data+0xe8>)
 8005a52:	601a      	str	r2, [r3, #0]
	    gz = gyro[2] / 131.0f;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	3304      	adds	r3, #4
 8005a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fb f93d 	bl	8000cdc <__aeabi_i2f>
 8005a62:	4603      	mov	r3, r0
 8005a64:	4908      	ldr	r1, [pc, #32]	@ (8005a88 <Send_Sensor_Data+0xe0>)
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fb fa40 	bl	8000eec <__aeabi_fdiv>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4b08      	ldr	r3, [pc, #32]	@ (8005a94 <Send_Sensor_Data+0xec>)
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000424 	.word	0x20000424
 8005a80:	20000428 	.word	0x20000428
 8005a84:	2000042c 	.word	0x2000042c
 8005a88:	43030000 	.word	0x43030000
 8005a8c:	20000430 	.word	0x20000430
 8005a90:	20000434 	.word	0x20000434
 8005a94:	20000438 	.word	0x20000438

08005a98 <MPU9250_Getdata>:

void MPU9250_Getdata(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
	MPU9250_Read_Accel_Gyro(accel, gyro);
 8005a9c:	4904      	ldr	r1, [pc, #16]	@ (8005ab0 <MPU9250_Getdata+0x18>)
 8005a9e:	4805      	ldr	r0, [pc, #20]	@ (8005ab4 <MPU9250_Getdata+0x1c>)
 8005aa0:	f7ff ff30 	bl	8005904 <MPU9250_Read_Accel_Gyro>
	Send_Sensor_Data(accel, gyro);
 8005aa4:	4902      	ldr	r1, [pc, #8]	@ (8005ab0 <MPU9250_Getdata+0x18>)
 8005aa6:	4803      	ldr	r0, [pc, #12]	@ (8005ab4 <MPU9250_Getdata+0x1c>)
 8005aa8:	f7ff ff7e 	bl	80059a8 <Send_Sensor_Data>
}
 8005aac:	bf00      	nop
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000444 	.word	0x20000444
 8005ab4:	2000043c 	.word	0x2000043c

08005ab8 <__NVIC_SetPriority>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	6039      	str	r1, [r7, #0]
 8005ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	db0a      	blt.n	8005ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	490c      	ldr	r1, [pc, #48]	@ (8005b04 <__NVIC_SetPriority+0x4c>)
 8005ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad6:	0112      	lsls	r2, r2, #4
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	440b      	add	r3, r1
 8005adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ae0:	e00a      	b.n	8005af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	4908      	ldr	r1, [pc, #32]	@ (8005b08 <__NVIC_SetPriority+0x50>)
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	3b04      	subs	r3, #4
 8005af0:	0112      	lsls	r2, r2, #4
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	440b      	add	r3, r1
 8005af6:	761a      	strb	r2, [r3, #24]
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	e000e100 	.word	0xe000e100
 8005b08:	e000ed00 	.word	0xe000ed00

08005b0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b10:	4b05      	ldr	r3, [pc, #20]	@ (8005b28 <SysTick_Handler+0x1c>)
 8005b12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b14:	f002 fa0c 	bl	8007f30 <xTaskGetSchedulerState>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b1e:	f003 f8cb 	bl	8008cb8 <xPortSysTickHandler>
  }
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	e000e010 	.word	0xe000e010

08005b2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b30:	2100      	movs	r1, #0
 8005b32:	f06f 0004 	mvn.w	r0, #4
 8005b36:	f7ff ffbf 	bl	8005ab8 <__NVIC_SetPriority>
#endif
}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b46:	f3ef 8305 	mrs	r3, IPSR
 8005b4a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b52:	f06f 0305 	mvn.w	r3, #5
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	e00c      	b.n	8005b74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b5a:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <osKernelInitialize+0x40>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b62:	4b07      	ldr	r3, [pc, #28]	@ (8005b80 <osKernelInitialize+0x40>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	607b      	str	r3, [r7, #4]
 8005b6c:	e002      	b.n	8005b74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b74:	687b      	ldr	r3, [r7, #4]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	2000044c 	.word	0x2000044c

08005b84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b8a:	f3ef 8305 	mrs	r3, IPSR
 8005b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b96:	f06f 0305 	mvn.w	r3, #5
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	e010      	b.n	8005bc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <osKernelStart+0x48>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d109      	bne.n	8005bba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ba6:	f7ff ffc1 	bl	8005b2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005baa:	4b08      	ldr	r3, [pc, #32]	@ (8005bcc <osKernelStart+0x48>)
 8005bac:	2202      	movs	r2, #2
 8005bae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005bb0:	f001 fd4c 	bl	800764c <vTaskStartScheduler>
      stat = osOK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	e002      	b.n	8005bc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bc0:	687b      	ldr	r3, [r7, #4]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000044c 	.word	0x2000044c

08005bd0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd6:	f3ef 8305 	mrs	r3, IPSR
 8005bda:	603b      	str	r3, [r7, #0]
  return(result);
 8005bdc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005be2:	f001 fe5d 	bl	80078a0 <xTaskGetTickCountFromISR>
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	e002      	b.n	8005bf0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005bea:	f001 fe4b 	bl	8007884 <xTaskGetTickCount>
 8005bee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005bf0:	687b      	ldr	r3, [r7, #4]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b08e      	sub	sp, #56	@ 0x38
 8005bfe:	af04      	add	r7, sp, #16
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c0a:	f3ef 8305 	mrs	r3, IPSR
 8005c0e:	617b      	str	r3, [r7, #20]
  return(result);
 8005c10:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d17e      	bne.n	8005d14 <osThreadNew+0x11a>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d07b      	beq.n	8005d14 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c1c:	2380      	movs	r3, #128	@ 0x80
 8005c1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c20:	2318      	movs	r3, #24
 8005c22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d045      	beq.n	8005cc0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <osThreadNew+0x48>
        name = attr->name;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <osThreadNew+0x6e>
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	2b38      	cmp	r3, #56	@ 0x38
 8005c5a:	d805      	bhi.n	8005c68 <osThreadNew+0x6e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <osThreadNew+0x72>
        return (NULL);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e054      	b.n	8005d16 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	089b      	lsrs	r3, r3, #2
 8005c7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00e      	beq.n	8005ca2 <osThreadNew+0xa8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2ba7      	cmp	r3, #167	@ 0xa7
 8005c8a:	d90a      	bls.n	8005ca2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <osThreadNew+0xa8>
        mem = 1;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	e010      	b.n	8005cc4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10c      	bne.n	8005cc4 <osThreadNew+0xca>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d108      	bne.n	8005cc4 <osThreadNew+0xca>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <osThreadNew+0xca>
          mem = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	e001      	b.n	8005cc4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d110      	bne.n	8005cec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cd2:	9202      	str	r2, [sp, #8]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f001 fa75 	bl	80071d0 <xTaskCreateStatic>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e013      	b.n	8005d14 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d110      	bne.n	8005d14 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f107 0310 	add.w	r3, r7, #16
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f001 fac3 	bl	8007290 <xTaskCreate>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d001      	beq.n	8005d14 <osThreadNew+0x11a>
            hTask = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d14:	693b      	ldr	r3, [r7, #16]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3728      	adds	r7, #40	@ 0x28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b086      	sub	sp, #24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d26:	f3ef 8305 	mrs	r3, IPSR
 8005d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8005d32:	f06f 0305 	mvn.w	r3, #5
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e019      	b.n	8005d6e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8005d3e:	f001 fda1 	bl	8007884 <xTaskGetTickCount>
 8005d42:	4603      	mov	r3, r0
 8005d44:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <osDelayUntil+0x4a>
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	db06      	blt.n	8005d68 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	6939      	ldr	r1, [r7, #16]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 fbf3 	bl	800754c <vTaskDelayUntil>
 8005d66:	e002      	b.n	8005d6e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005d68:	f06f 0303 	mvn.w	r3, #3
 8005d6c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d6e:	697b      	ldr	r3, [r7, #20]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	@ 0x28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d88:	f3ef 8305 	mrs	r3, IPSR
 8005d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d175      	bne.n	8005e80 <osSemaphoreNew+0x108>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d072      	beq.n	8005e80 <osSemaphoreNew+0x108>
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d86e      	bhi.n	8005e80 <osSemaphoreNew+0x108>
    mem = -1;
 8005da2:	f04f 33ff 	mov.w	r3, #4294967295
 8005da6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d015      	beq.n	8005dda <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <osSemaphoreNew+0x4c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	2b4f      	cmp	r3, #79	@ 0x4f
 8005dbc:	d902      	bls.n	8005dc4 <osSemaphoreNew+0x4c>
        mem = 1;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e00c      	b.n	8005dde <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d108      	bne.n	8005dde <osSemaphoreNew+0x66>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <osSemaphoreNew+0x66>
          mem = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	e001      	b.n	8005dde <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d04c      	beq.n	8005e80 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d128      	bne.n	8005e3e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10a      	bne.n	8005e08 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2203      	movs	r2, #3
 8005df8:	9200      	str	r2, [sp, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2001      	movs	r0, #1
 8005e00:	f000 fa26 	bl	8006250 <xQueueGenericCreateStatic>
 8005e04:	61f8      	str	r0, [r7, #28]
 8005e06:	e005      	b.n	8005e14 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e08:	2203      	movs	r2, #3
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	f000 fa9c 	bl	800634a <xQueueGenericCreate>
 8005e12:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d022      	beq.n	8005e60 <osSemaphoreNew+0xe8>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01f      	beq.n	8005e60 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e20:	2300      	movs	r3, #0
 8005e22:	2200      	movs	r2, #0
 8005e24:	2100      	movs	r1, #0
 8005e26:	69f8      	ldr	r0, [r7, #28]
 8005e28:	f000 fb5c 	bl	80064e4 <xQueueGenericSend>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d016      	beq.n	8005e60 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e32:	69f8      	ldr	r0, [r7, #28]
 8005e34:	f000 fffa 	bl	8006e2c <vQueueDelete>
            hSemaphore = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	e010      	b.n	8005e60 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d108      	bne.n	8005e56 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fada 	bl	8006406 <xQueueCreateCountingSemaphoreStatic>
 8005e52:	61f8      	str	r0, [r7, #28]
 8005e54:	e004      	b.n	8005e60 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fb0d 	bl	8006478 <xQueueCreateCountingSemaphore>
 8005e5e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00c      	beq.n	8005e80 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e001      	b.n	8005e78 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005e78:	6979      	ldr	r1, [r7, #20]
 8005e7a:	69f8      	ldr	r0, [r7, #28]
 8005e7c:	f001 f922 	bl	80070c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005e80:	69fb      	ldr	r3, [r7, #28]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005ea4:	f06f 0303 	mvn.w	r3, #3
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e039      	b.n	8005f20 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eac:	f3ef 8305 	mrs	r3, IPSR
 8005eb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d022      	beq.n	8005efe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005ebe:	f06f 0303 	mvn.w	r3, #3
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e02c      	b.n	8005f20 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f000 ff28 	bl	8006d28 <xQueueReceiveFromISR>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d003      	beq.n	8005ee6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005ede:	f06f 0302 	mvn.w	r3, #2
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e01c      	b.n	8005f20 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d019      	beq.n	8005f20 <osSemaphoreAcquire+0x94>
 8005eec:	4b0f      	ldr	r3, [pc, #60]	@ (8005f2c <osSemaphoreAcquire+0xa0>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	e010      	b.n	8005f20 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6938      	ldr	r0, [r7, #16]
 8005f02:	f000 fe01 	bl	8006b08 <xQueueSemaphoreTake>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d009      	beq.n	8005f20 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f12:	f06f 0301 	mvn.w	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e002      	b.n	8005f20 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005f1a:	f06f 0302 	mvn.w	r3, #2
 8005f1e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f20:	697b      	ldr	r3, [r7, #20]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005f46:	f06f 0303 	mvn.w	r3, #3
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e02c      	b.n	8005fa8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f4e:	f3ef 8305 	mrs	r3, IPSR
 8005f52:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f54:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01a      	beq.n	8005f90 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005f5e:	f107 0308 	add.w	r3, r7, #8
 8005f62:	4619      	mov	r1, r3
 8005f64:	6938      	ldr	r0, [r7, #16]
 8005f66:	f000 fc5d 	bl	8006824 <xQueueGiveFromISR>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d003      	beq.n	8005f78 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005f70:	f06f 0302 	mvn.w	r3, #2
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e017      	b.n	8005fa8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d014      	beq.n	8005fa8 <osSemaphoreRelease+0x78>
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb4 <osSemaphoreRelease+0x84>)
 8005f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	e00b      	b.n	8005fa8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f90:	2300      	movs	r3, #0
 8005f92:	2200      	movs	r2, #0
 8005f94:	2100      	movs	r1, #0
 8005f96:	6938      	ldr	r0, [r7, #16]
 8005f98:	f000 faa4 	bl	80064e4 <xQueueGenericSend>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d002      	beq.n	8005fa8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005fa2:	f06f 0302 	mvn.w	r3, #2
 8005fa6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005fa8:	697b      	ldr	r3, [r7, #20]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4a06      	ldr	r2, [pc, #24]	@ (8005fe0 <vApplicationGetIdleTaskMemory+0x28>)
 8005fc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4a05      	ldr	r2, [pc, #20]	@ (8005fe4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2280      	movs	r2, #128	@ 0x80
 8005fd4:	601a      	str	r2, [r3, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr
 8005fe0:	20000450 	.word	0x20000450
 8005fe4:	200004f8 	.word	0x200004f8

08005fe8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a07      	ldr	r2, [pc, #28]	@ (8006014 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ff8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a06      	ldr	r2, [pc, #24]	@ (8006018 <vApplicationGetTimerTaskMemory+0x30>)
 8005ffe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006006:	601a      	str	r2, [r3, #0]
}
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	200006f8 	.word	0x200006f8
 8006018:	200007a0 	.word	0x200007a0

0800601c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 0208 	add.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f103 0208 	add.w	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 0208 	add.w	r2, r3, #8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d103      	bne.n	80060d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e00c      	b.n	80060f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3308      	adds	r3, #8
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e002      	b.n	80060e6 <vListInsert+0x2e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d2f6      	bcs.n	80060e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6892      	ldr	r2, [r2, #8]
 800613e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6852      	ldr	r2, [r2, #4]
 8006148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d103      	bne.n	800615c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	1e5a      	subs	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr
	...

0800617c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061a8:	f002 fd02 	bl	8008bb0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	441a      	add	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d8:	3b01      	subs	r3, #1
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	441a      	add	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	22ff      	movs	r2, #255	@ 0xff
 80061ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	22ff      	movs	r2, #255	@ 0xff
 80061f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d114      	bne.n	8006228 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01a      	beq.n	800623c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3310      	adds	r3, #16
 800620a:	4618      	mov	r0, r3
 800620c:	f001 fcca 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d012      	beq.n	800623c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006216:	4b0d      	ldr	r3, [pc, #52]	@ (800624c <xQueueGenericReset+0xd0>)
 8006218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	e009      	b.n	800623c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3310      	adds	r3, #16
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fef5 	bl	800601c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3324      	adds	r3, #36	@ 0x24
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fef0 	bl	800601c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800623c:	f002 fce8 	bl	8008c10 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006240:	2301      	movs	r3, #1
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	e000ed04 	.word	0xe000ed04

08006250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	@ 0x38
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	e7fd      	b.n	8006296 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <xQueueGenericCreateStatic+0x56>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <xQueueGenericCreateStatic+0x5a>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <xQueueGenericCreateStatic+0x5c>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	623b      	str	r3, [r7, #32]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d102      	bne.n	80062d4 <xQueueGenericCreateStatic+0x84>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <xQueueGenericCreateStatic+0x88>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <xQueueGenericCreateStatic+0x8a>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	61fb      	str	r3, [r7, #28]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062f6:	2350      	movs	r3, #80	@ 0x50
 80062f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b50      	cmp	r3, #80	@ 0x50
 80062fe:	d00b      	beq.n	8006318 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	61bb      	str	r3, [r7, #24]
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	e7fd      	b.n	8006314 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006318:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800631e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800632c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f840 	bl	80063c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006342:	4618      	mov	r0, r3
 8006344:	3730      	adds	r7, #48	@ 0x30
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800634a:	b580      	push	{r7, lr}
 800634c:	b08a      	sub	sp, #40	@ 0x28
 800634e:	af02      	add	r7, sp, #8
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	4613      	mov	r3, r2
 8006356:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <xQueueGenericCreate+0x2c>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	613b      	str	r3, [r7, #16]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	fb02 f303 	mul.w	r3, r2, r3
 800637e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	3350      	adds	r3, #80	@ 0x50
 8006384:	4618      	mov	r0, r3
 8006386:	f002 fd1b 	bl	8008dc0 <pvPortMalloc>
 800638a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	3350      	adds	r3, #80	@ 0x50
 800639a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063a4:	79fa      	ldrb	r2, [r7, #7]
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f805 	bl	80063c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063b6:	69bb      	ldr	r3, [r7, #24]
	}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e002      	b.n	80063e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063ee:	2101      	movs	r1, #1
 80063f0:	69b8      	ldr	r0, [r7, #24]
 80063f2:	f7ff fec3 	bl	800617c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006406:	b580      	push	{r7, lr}
 8006408:	b08a      	sub	sp, #40	@ 0x28
 800640a:	af02      	add	r7, sp, #8
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	61bb      	str	r3, [r7, #24]
}
 800642a:	bf00      	nop
 800642c:	bf00      	nop
 800642e:	e7fd      	b.n	800642c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d90b      	bls.n	8006450 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	617b      	str	r3, [r7, #20]
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006450:	2302      	movs	r3, #2
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	2100      	movs	r1, #0
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff fef8 	bl	8006250 <xQueueGenericCreateStatic>
 8006460:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800646e:	69fb      	ldr	r3, [r7, #28]
	}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	613b      	str	r3, [r7, #16]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d90b      	bls.n	80064c0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	60fb      	str	r3, [r7, #12]
}
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
 80064be:	e7fd      	b.n	80064bc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064c0:	2202      	movs	r2, #2
 80064c2:	2100      	movs	r1, #0
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ff40 	bl	800634a <xQueueGenericCreate>
 80064ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064d8:	697b      	ldr	r3, [r7, #20]
	}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08e      	sub	sp, #56	@ 0x38
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064f2:	2300      	movs	r3, #0
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <xQueueGenericSend+0x34>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	e7fd      	b.n	8006514 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <xQueueGenericSend+0x42>
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <xQueueGenericSend+0x46>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <xQueueGenericSend+0x48>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <xQueueGenericSend+0x64>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d103      	bne.n	8006556 <xQueueGenericSend+0x72>
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <xQueueGenericSend+0x76>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <xQueueGenericSend+0x78>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <xQueueGenericSend+0x94>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	623b      	str	r3, [r7, #32]
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	e7fd      	b.n	8006574 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006578:	f001 fcda 	bl	8007f30 <xTaskGetSchedulerState>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <xQueueGenericSend+0xa4>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <xQueueGenericSend+0xa8>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <xQueueGenericSend+0xaa>
 800658c:	2300      	movs	r3, #0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <xQueueGenericSend+0xc6>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	61fb      	str	r3, [r7, #28]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065aa:	f002 fb01 	bl	8008bb0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <xQueueGenericSend+0xdc>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d129      	bne.n	8006614 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065c6:	f000 fc6c 	bl	8006ea2 <prvCopyDataToQueue>
 80065ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d010      	beq.n	80065f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	3324      	adds	r3, #36	@ 0x24
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fae3 	bl	8007ba4 <xTaskRemoveFromEventList>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d013      	beq.n	800660c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e4:	4b3f      	ldr	r3, [pc, #252]	@ (80066e4 <xQueueGenericSend+0x200>)
 80065e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	e00a      	b.n	800660c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065fc:	4b39      	ldr	r3, [pc, #228]	@ (80066e4 <xQueueGenericSend+0x200>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800660c:	f002 fb00 	bl	8008c10 <vPortExitCritical>
				return pdPASS;
 8006610:	2301      	movs	r3, #1
 8006612:	e063      	b.n	80066dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800661a:	f002 faf9 	bl	8008c10 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800661e:	2300      	movs	r3, #0
 8006620:	e05c      	b.n	80066dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006624:	2b00      	cmp	r3, #0
 8006626:	d106      	bne.n	8006636 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006628:	f107 0314 	add.w	r3, r7, #20
 800662c:	4618      	mov	r0, r3
 800662e:	f001 fb1d 	bl	8007c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006632:	2301      	movs	r3, #1
 8006634:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006636:	f002 faeb 	bl	8008c10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800663a:	f001 f877 	bl	800772c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800663e:	f002 fab7 	bl	8008bb0 <vPortEnterCritical>
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006648:	b25b      	sxtb	r3, r3
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d103      	bne.n	8006658 <xQueueGenericSend+0x174>
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800665e:	b25b      	sxtb	r3, r3
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d103      	bne.n	800666e <xQueueGenericSend+0x18a>
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800666e:	f002 facf 	bl	8008c10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006672:	1d3a      	adds	r2, r7, #4
 8006674:	f107 0314 	add.w	r3, r7, #20
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fb0c 	bl	8007c98 <xTaskCheckForTimeOut>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d124      	bne.n	80066d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006686:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006688:	f000 fd03 	bl	8007092 <prvIsQueueFull>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	3310      	adds	r3, #16
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fa30 	bl	8007b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066a2:	f000 fc8e 	bl	8006fc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066a6:	f001 f84f 	bl	8007748 <xTaskResumeAll>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f47f af7c 	bne.w	80065aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066b2:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <xQueueGenericSend+0x200>)
 80066b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	e772      	b.n	80065aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066c6:	f000 fc7c 	bl	8006fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ca:	f001 f83d 	bl	8007748 <xTaskResumeAll>
 80066ce:	e76c      	b.n	80065aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066d2:	f000 fc76 	bl	8006fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066d6:	f001 f837 	bl	8007748 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3738      	adds	r7, #56	@ 0x38
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b090      	sub	sp, #64	@ 0x40
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10b      	bne.n	8006718 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	e7fd      	b.n	8006714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <xQueueGenericSendFromISR+0x3e>
 800671e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <xQueueGenericSendFromISR+0x42>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <xQueueGenericSendFromISR+0x44>
 800672a:	2300      	movs	r3, #0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d103      	bne.n	8006756 <xQueueGenericSendFromISR+0x6e>
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <xQueueGenericSendFromISR+0x72>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <xQueueGenericSendFromISR+0x74>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	623b      	str	r3, [r7, #32]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006778:	f002 fae2 	bl	8008d40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800677c:	f3ef 8211 	mrs	r2, BASEPRI
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	61fa      	str	r2, [r7, #28]
 8006792:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006794:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006796:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <xQueueGenericSendFromISR+0xc2>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d12f      	bne.n	800680a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067c0:	f000 fb6f 	bl	8006ea2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d112      	bne.n	80067f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	3324      	adds	r3, #36	@ 0x24
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f9e2 	bl	8007ba4 <xTaskRemoveFromEventList>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e007      	b.n	8006804 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067f8:	3301      	adds	r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	b25a      	sxtb	r2, r3
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006804:	2301      	movs	r3, #1
 8006806:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006808:	e001      	b.n	800680e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800680a:	2300      	movs	r3, #0
 800680c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800680e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006810:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006818:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800681a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800681c:	4618      	mov	r0, r3
 800681e:	3740      	adds	r7, #64	@ 0x40
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08e      	sub	sp, #56	@ 0x38
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	623b      	str	r3, [r7, #32]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61fb      	str	r3, [r7, #28]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueGiveFromISR+0x5c>
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <xQueueGiveFromISR+0x60>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <xQueueGiveFromISR+0x62>
 8006884:	2300      	movs	r3, #0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	61bb      	str	r3, [r7, #24]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068a2:	f002 fa4d 	bl	8008d40 <vPortValidateInterruptPriority>
	__asm volatile
 80068a6:	f3ef 8211 	mrs	r2, BASEPRI
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	617a      	str	r2, [r7, #20]
 80068bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d22b      	bcs.n	800692a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d112      	bne.n	8006914 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	3324      	adds	r3, #36	@ 0x24
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 f952 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00e      	beq.n	8006924 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e007      	b.n	8006924 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006918:	3301      	adds	r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	b25a      	sxtb	r2, r3
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006924:	2301      	movs	r3, #1
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	e001      	b.n	800692e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f383 8811 	msr	BASEPRI, r3
}
 8006938:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800693a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800693c:	4618      	mov	r0, r3
 800693e:	3738      	adds	r7, #56	@ 0x38
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08c      	sub	sp, #48	@ 0x30
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <xQueueReceive+0x32>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	623b      	str	r3, [r7, #32]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <xQueueReceive+0x40>
 800697c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <xQueueReceive+0x44>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <xQueueReceive+0x46>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <xQueueReceive+0x62>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61fb      	str	r3, [r7, #28]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a6:	f001 fac3 	bl	8007f30 <xTaskGetSchedulerState>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d102      	bne.n	80069b6 <xQueueReceive+0x72>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <xQueueReceive+0x76>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <xQueueReceive+0x78>
 80069ba:	2300      	movs	r3, #0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <xQueueReceive+0x94>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	61bb      	str	r3, [r7, #24]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069d8:	f002 f8ea 	bl	8008bb0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01f      	beq.n	8006a28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ec:	f000 fac3 	bl	8006f76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	1e5a      	subs	r2, r3, #1
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00f      	beq.n	8006a20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	3310      	adds	r3, #16
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 f8cd 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a10:	4b3c      	ldr	r3, [pc, #240]	@ (8006b04 <xQueueReceive+0x1c0>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a20:	f002 f8f6 	bl	8008c10 <vPortExitCritical>
				return pdPASS;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e069      	b.n	8006afc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a2e:	f002 f8ef 	bl	8008c10 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e062      	b.n	8006afc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a3c:	f107 0310 	add.w	r3, r7, #16
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 f913 	bl	8007c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a4a:	f002 f8e1 	bl	8008c10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a4e:	f000 fe6d 	bl	800772c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a52:	f002 f8ad 	bl	8008bb0 <vPortEnterCritical>
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d103      	bne.n	8006a6c <xQueueReceive+0x128>
 8006a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d103      	bne.n	8006a82 <xQueueReceive+0x13e>
 8006a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a82:	f002 f8c5 	bl	8008c10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a86:	1d3a      	adds	r2, r7, #4
 8006a88:	f107 0310 	add.w	r3, r7, #16
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 f902 	bl	8007c98 <xTaskCheckForTimeOut>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d123      	bne.n	8006ae2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a9c:	f000 fae3 	bl	8007066 <prvIsQueueEmpty>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d017      	beq.n	8006ad6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	3324      	adds	r3, #36	@ 0x24
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 f826 	bl	8007b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ab6:	f000 fa84 	bl	8006fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aba:	f000 fe45 	bl	8007748 <xTaskResumeAll>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d189      	bne.n	80069d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b04 <xQueueReceive+0x1c0>)
 8006ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	e780      	b.n	80069d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ad8:	f000 fa73 	bl	8006fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006adc:	f000 fe34 	bl	8007748 <xTaskResumeAll>
 8006ae0:	e77a      	b.n	80069d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae4:	f000 fa6d 	bl	8006fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ae8:	f000 fe2e 	bl	8007748 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aee:	f000 faba 	bl	8007066 <prvIsQueueEmpty>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f43f af6f 	beq.w	80069d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006afa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3730      	adds	r7, #48	@ 0x30
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	@ 0x38
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10b      	bne.n	8006b3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	623b      	str	r3, [r7, #32]
}
 8006b36:	bf00      	nop
 8006b38:	bf00      	nop
 8006b3a:	e7fd      	b.n	8006b38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	61fb      	str	r3, [r7, #28]
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b5c:	f001 f9e8 	bl	8007f30 <xTaskGetSchedulerState>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <xQueueSemaphoreTake+0x64>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <xQueueSemaphoreTake+0x68>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <xQueueSemaphoreTake+0x6a>
 8006b70:	2300      	movs	r3, #0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	61bb      	str	r3, [r7, #24]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b8e:	f002 f80f 	bl	8008bb0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d024      	beq.n	8006be8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	1e5a      	subs	r2, r3, #1
 8006ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bae:	f001 fb39 	bl	8008224 <pvTaskIncrementMutexHeldCount>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00f      	beq.n	8006be0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc2:	3310      	adds	r3, #16
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 ffed 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bd0:	4b54      	ldr	r3, [pc, #336]	@ (8006d24 <xQueueSemaphoreTake+0x21c>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006be0:	f002 f816 	bl	8008c10 <vPortExitCritical>
				return pdPASS;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e098      	b.n	8006d1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d112      	bne.n	8006c14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	617b      	str	r3, [r7, #20]
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	e7fd      	b.n	8006c08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c0c:	f002 f800 	bl	8008c10 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e082      	b.n	8006d1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c1a:	f107 030c 	add.w	r3, r7, #12
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 f824 	bl	8007c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c28:	f001 fff2 	bl	8008c10 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c2c:	f000 fd7e 	bl	800772c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c30:	f001 ffbe 	bl	8008bb0 <vPortEnterCritical>
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c3a:	b25b      	sxtb	r3, r3
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d103      	bne.n	8006c4a <xQueueSemaphoreTake+0x142>
 8006c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d103      	bne.n	8006c60 <xQueueSemaphoreTake+0x158>
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c60:	f001 ffd6 	bl	8008c10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c64:	463a      	mov	r2, r7
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 f813 	bl	8007c98 <xTaskCheckForTimeOut>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d132      	bne.n	8006cde <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c7a:	f000 f9f4 	bl	8007066 <prvIsQueueEmpty>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d026      	beq.n	8006cd2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006c8c:	f001 ff90 	bl	8008bb0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 f969 	bl	8007f6c <xTaskPriorityInherit>
 8006c9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006c9c:	f001 ffb8 	bl	8008c10 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	3324      	adds	r3, #36	@ 0x24
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 ff29 	bl	8007b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cb0:	f000 f987 	bl	8006fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cb4:	f000 fd48 	bl	8007748 <xTaskResumeAll>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f47f af67 	bne.w	8006b8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006cc0:	4b18      	ldr	r3, [pc, #96]	@ (8006d24 <xQueueSemaphoreTake+0x21c>)
 8006cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	e75d      	b.n	8006b8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cd4:	f000 f975 	bl	8006fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cd8:	f000 fd36 	bl	8007748 <xTaskResumeAll>
 8006cdc:	e757      	b.n	8006b8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ce0:	f000 f96f 	bl	8006fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ce4:	f000 fd30 	bl	8007748 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ce8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cea:	f000 f9bc 	bl	8007066 <prvIsQueueEmpty>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f43f af4c 	beq.w	8006b8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006cfc:	f001 ff58 	bl	8008bb0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d02:	f000 f8b7 	bl	8006e74 <prvGetDisinheritPriorityAfterTimeout>
 8006d06:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 fa04 	bl	800811c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d14:	f001 ff7c 	bl	8008c10 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3738      	adds	r7, #56	@ 0x38
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08e      	sub	sp, #56	@ 0x38
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10b      	bne.n	8006d56 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	623b      	str	r3, [r7, #32]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d103      	bne.n	8006d64 <xQueueReceiveFromISR+0x3c>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <xQueueReceiveFromISR+0x40>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <xQueueReceiveFromISR+0x42>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	61fb      	str	r3, [r7, #28]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d86:	f001 ffdb 	bl	8008d40 <vPortValidateInterruptPriority>
	__asm volatile
 8006d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	61ba      	str	r2, [r7, #24]
 8006da0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006da2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006daa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d02f      	beq.n	8006e12 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dc0:	f000 f8d9 	bl	8006f76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	1e5a      	subs	r2, r3, #1
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d112      	bne.n	8006dfc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d016      	beq.n	8006e0c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	3310      	adds	r3, #16
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fede 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00e      	beq.n	8006e0c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e007      	b.n	8006e0c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	b25a      	sxtb	r2, r3
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e10:	e001      	b.n	8006e16 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f383 8811 	msr	BASEPRI, r3
}
 8006e20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3738      	adds	r7, #56	@ 0x38
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10b      	bne.n	8006e56 <vQueueDelete+0x2a>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60bb      	str	r3, [r7, #8]
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f95c 	bl	8007114 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f002 f878 	bl	8008f5c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d006      	beq.n	8006e92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	e001      	b.n	8006e96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e96:	68fb      	ldr	r3, [r7, #12]
	}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10d      	bne.n	8006edc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d14d      	bne.n	8006f64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 f8b5 	bl	800803c <xTaskPriorityDisinherit>
 8006ed2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
 8006eda:	e043      	b.n	8006f64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d119      	bne.n	8006f16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6858      	ldr	r0, [r3, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	461a      	mov	r2, r3
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	f003 fc06 	bl	800a6fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	441a      	add	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d32b      	bcc.n	8006f64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	605a      	str	r2, [r3, #4]
 8006f14:	e026      	b.n	8006f64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68d8      	ldr	r0, [r3, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	f003 fbec 	bl	800a6fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	425b      	negs	r3, r3
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d207      	bcs.n	8006f52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	441a      	add	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d105      	bne.n	8006f64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f6c:	697b      	ldr	r3, [r7, #20]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d018      	beq.n	8006fba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f90:	441a      	add	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d303      	bcc.n	8006faa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68d9      	ldr	r1, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6838      	ldr	r0, [r7, #0]
 8006fb6:	f003 fba2 	bl	800a6fe <memcpy>
	}
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fca:	f001 fdf1 	bl	8008bb0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fd6:	e011      	b.n	8006ffc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d012      	beq.n	8007006 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3324      	adds	r3, #36	@ 0x24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fddd 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ff0:	f000 feb6 	bl	8007d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	dce9      	bgt.n	8006fd8 <prvUnlockQueue+0x16>
 8007004:	e000      	b.n	8007008 <prvUnlockQueue+0x46>
					break;
 8007006:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	22ff      	movs	r2, #255	@ 0xff
 800700c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007010:	f001 fdfe 	bl	8008c10 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007014:	f001 fdcc 	bl	8008bb0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800701e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007020:	e011      	b.n	8007046 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d012      	beq.n	8007050 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3310      	adds	r3, #16
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fdb8 	bl	8007ba4 <xTaskRemoveFromEventList>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800703a:	f000 fe91 	bl	8007d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	3b01      	subs	r3, #1
 8007042:	b2db      	uxtb	r3, r3
 8007044:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	dce9      	bgt.n	8007022 <prvUnlockQueue+0x60>
 800704e:	e000      	b.n	8007052 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007050:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	22ff      	movs	r2, #255	@ 0xff
 8007056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800705a:	f001 fdd9 	bl	8008c10 <vPortExitCritical>
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800706e:	f001 fd9f 	bl	8008bb0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800707a:	2301      	movs	r3, #1
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	e001      	b.n	8007084 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007084:	f001 fdc4 	bl	8008c10 <vPortExitCritical>

	return xReturn;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800709a:	f001 fd89 	bl	8008bb0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d102      	bne.n	80070b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e001      	b.n	80070b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070b4:	f001 fdac 	bl	8008c10 <vPortExitCritical>

	return xReturn;
 80070b8:	68fb      	ldr	r3, [r7, #12]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e014      	b.n	80070fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007110 <vQueueAddToRegistry+0x4c>)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10b      	bne.n	80070f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070e0:	490b      	ldr	r1, [pc, #44]	@ (8007110 <vQueueAddToRegistry+0x4c>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070ea:	4a09      	ldr	r2, [pc, #36]	@ (8007110 <vQueueAddToRegistry+0x4c>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	4413      	add	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070f6:	e006      	b.n	8007106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b07      	cmp	r3, #7
 8007102:	d9e7      	bls.n	80070d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	20000ba0 	.word	0x20000ba0

08007114 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e016      	b.n	8007150 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007122:	4a10      	ldr	r2, [pc, #64]	@ (8007164 <vQueueUnregisterQueue+0x50>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	429a      	cmp	r2, r3
 8007130:	d10b      	bne.n	800714a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007132:	4a0c      	ldr	r2, [pc, #48]	@ (8007164 <vQueueUnregisterQueue+0x50>)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2100      	movs	r1, #0
 8007138:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800713c:	4a09      	ldr	r2, [pc, #36]	@ (8007164 <vQueueUnregisterQueue+0x50>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	4413      	add	r3, r2
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]
				break;
 8007148:	e006      	b.n	8007158 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b07      	cmp	r3, #7
 8007154:	d9e5      	bls.n	8007122 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000ba0 	.word	0x20000ba0

08007168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007178:	f001 fd1a 	bl	8008bb0 <vPortEnterCritical>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007182:	b25b      	sxtb	r3, r3
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d103      	bne.n	8007192 <vQueueWaitForMessageRestricted+0x2a>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007198:	b25b      	sxtb	r3, r3
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d103      	bne.n	80071a8 <vQueueWaitForMessageRestricted+0x40>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071a8:	f001 fd32 	bl	8008c10 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	3324      	adds	r3, #36	@ 0x24
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fcc5 	bl	8007b4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071c2:	6978      	ldr	r0, [r7, #20]
 80071c4:	f7ff fefd 	bl	8006fc2 <prvUnlockQueue>
	}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	@ 0x38
 80071d4:	af04      	add	r7, sp, #16
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10b      	bne.n	80071fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	623b      	str	r3, [r7, #32]
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	61fb      	str	r3, [r7, #28]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800721a:	23a8      	movs	r3, #168	@ 0xa8
 800721c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2ba8      	cmp	r3, #168	@ 0xa8
 8007222:	d00b      	beq.n	800723c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61bb      	str	r3, [r7, #24]
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	e7fd      	b.n	8007238 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800723c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800723e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01e      	beq.n	8007282 <xTaskCreateStatic+0xb2>
 8007244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01b      	beq.n	8007282 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007252:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	2202      	movs	r2, #2
 8007258:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800725c:	2300      	movs	r3, #0
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	9302      	str	r3, [sp, #8]
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f851 	bl	800731c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800727a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800727c:	f000 f8f6 	bl	800746c <prvAddNewTaskToReadyList>
 8007280:	e001      	b.n	8007286 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007286:	697b      	ldr	r3, [r7, #20]
	}
 8007288:	4618      	mov	r0, r3
 800728a:	3728      	adds	r7, #40	@ 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08c      	sub	sp, #48	@ 0x30
 8007294:	af04      	add	r7, sp, #16
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f001 fd8b 	bl	8008dc0 <pvPortMalloc>
 80072aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072b2:	20a8      	movs	r0, #168	@ 0xa8
 80072b4:	f001 fd84 	bl	8008dc0 <pvPortMalloc>
 80072b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80072c6:	e005      	b.n	80072d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072c8:	6978      	ldr	r0, [r7, #20]
 80072ca:	f001 fe47 	bl	8008f5c <vPortFree>
 80072ce:	e001      	b.n	80072d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d017      	beq.n	800730a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f80f 	bl	800731c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072fe:	69f8      	ldr	r0, [r7, #28]
 8007300:	f000 f8b4 	bl	800746c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007304:	2301      	movs	r3, #1
 8007306:	61bb      	str	r3, [r7, #24]
 8007308:	e002      	b.n	8007310 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295
 800730e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007310:	69bb      	ldr	r3, [r7, #24]
	}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	461a      	mov	r2, r3
 8007334:	21a5      	movs	r1, #165	@ 0xa5
 8007336:	f003 f8ed 	bl	800a514 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007344:	3b01      	subs	r3, #1
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	617b      	str	r3, [r7, #20]
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01f      	beq.n	80073bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800737c:	2300      	movs	r3, #0
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	e012      	b.n	80073a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	4413      	add	r3, r2
 8007390:	3334      	adds	r3, #52	@ 0x34
 8007392:	460a      	mov	r2, r1
 8007394:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3301      	adds	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d9e9      	bls.n	8007382 <prvInitialiseNewTask+0x66>
 80073ae:	e000      	b.n	80073b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80073b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073ba:	e003      	b.n	80073c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c6:	2b37      	cmp	r3, #55	@ 0x37
 80073c8:	d901      	bls.n	80073ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073ca:	2337      	movs	r3, #55	@ 0x37
 80073cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	2200      	movs	r2, #0
 80073de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	3304      	adds	r3, #4
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fe38 	bl	800605a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	3318      	adds	r3, #24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fe33 	bl	800605a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007408:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007414:	2200      	movs	r2, #0
 8007416:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	3354      	adds	r3, #84	@ 0x54
 800741e:	224c      	movs	r2, #76	@ 0x4c
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f003 f876 	bl	800a514 <memset>
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	4a0d      	ldr	r2, [pc, #52]	@ (8007460 <prvInitialiseNewTask+0x144>)
 800742c:	659a      	str	r2, [r3, #88]	@ 0x58
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	4a0c      	ldr	r2, [pc, #48]	@ (8007464 <prvInitialiseNewTask+0x148>)
 8007432:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	4a0c      	ldr	r2, [pc, #48]	@ (8007468 <prvInitialiseNewTask+0x14c>)
 8007438:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	68f9      	ldr	r1, [r7, #12]
 800743e:	69b8      	ldr	r0, [r7, #24]
 8007440:	f001 fab0 	bl	80089a4 <pxPortInitialiseStack>
 8007444:	4602      	mov	r2, r0
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007456:	bf00      	nop
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20002234 	.word	0x20002234
 8007464:	2000229c 	.word	0x2000229c
 8007468:	20002304 	.word	0x20002304

0800746c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007474:	f001 fb9c 	bl	8008bb0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007478:	4b2d      	ldr	r3, [pc, #180]	@ (8007530 <prvAddNewTaskToReadyList+0xc4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	4a2c      	ldr	r2, [pc, #176]	@ (8007530 <prvAddNewTaskToReadyList+0xc4>)
 8007480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007482:	4b2c      	ldr	r3, [pc, #176]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800748a:	4a2a      	ldr	r2, [pc, #168]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007490:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <prvAddNewTaskToReadyList+0xc4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d110      	bne.n	80074ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007498:	f000 fc86 	bl	8007da8 <prvInitialiseTaskLists>
 800749c:	e00d      	b.n	80074ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800749e:	4b26      	ldr	r3, [pc, #152]	@ (8007538 <prvAddNewTaskToReadyList+0xcc>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074a6:	4b23      	ldr	r3, [pc, #140]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d802      	bhi.n	80074ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ba:	4b20      	ldr	r3, [pc, #128]	@ (800753c <prvAddNewTaskToReadyList+0xd0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	4a1e      	ldr	r2, [pc, #120]	@ (800753c <prvAddNewTaskToReadyList+0xd0>)
 80074c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074c4:	4b1d      	ldr	r3, [pc, #116]	@ (800753c <prvAddNewTaskToReadyList+0xd0>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007540 <prvAddNewTaskToReadyList+0xd4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d903      	bls.n	80074e0 <prvAddNewTaskToReadyList+0x74>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074dc:	4a18      	ldr	r2, [pc, #96]	@ (8007540 <prvAddNewTaskToReadyList+0xd4>)
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4a15      	ldr	r2, [pc, #84]	@ (8007544 <prvAddNewTaskToReadyList+0xd8>)
 80074ee:	441a      	add	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7fe fdbb 	bl	8006072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074fc:	f001 fb88 	bl	8008c10 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007500:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <prvAddNewTaskToReadyList+0xcc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007508:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	429a      	cmp	r2, r3
 8007514:	d207      	bcs.n	8007526 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007516:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <prvAddNewTaskToReadyList+0xdc>)
 8007518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	200010b4 	.word	0x200010b4
 8007534:	20000be0 	.word	0x20000be0
 8007538:	200010c0 	.word	0x200010c0
 800753c:	200010d0 	.word	0x200010d0
 8007540:	200010bc 	.word	0x200010bc
 8007544:	20000be4 	.word	0x20000be4
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	@ 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	617b      	str	r3, [r7, #20]
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	e7fd      	b.n	8007574 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10b      	bne.n	8007596 <vTaskDelayUntil+0x4a>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	613b      	str	r3, [r7, #16]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007596:	4b2a      	ldr	r3, [pc, #168]	@ (8007640 <vTaskDelayUntil+0xf4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <vTaskDelayUntil+0x6a>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	60fb      	str	r3, [r7, #12]
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	e7fd      	b.n	80075b2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80075b6:	f000 f8b9 	bl	800772c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80075ba:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <vTaskDelayUntil+0xf8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	4413      	add	r3, r2
 80075c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6a3a      	ldr	r2, [r7, #32]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d20b      	bcs.n	80075ec <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d211      	bcs.n	8007602 <vTaskDelayUntil+0xb6>
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d90d      	bls.n	8007602 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80075e6:	2301      	movs	r3, #1
 80075e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ea:	e00a      	b.n	8007602 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d303      	bcc.n	80075fe <vTaskDelayUntil+0xb2>
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d901      	bls.n	8007602 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80075fe:	2301      	movs	r3, #1
 8007600:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	d006      	beq.n	800761c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fe18 	bl	800824c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800761c:	f000 f894 	bl	8007748 <xTaskResumeAll>
 8007620:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d107      	bne.n	8007638 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007628:	4b07      	ldr	r3, [pc, #28]	@ (8007648 <vTaskDelayUntil+0xfc>)
 800762a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007638:	bf00      	nop
 800763a:	3728      	adds	r7, #40	@ 0x28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200010dc 	.word	0x200010dc
 8007644:	200010b8 	.word	0x200010b8
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800765a:	463a      	mov	r2, r7
 800765c:	1d39      	adds	r1, r7, #4
 800765e:	f107 0308 	add.w	r3, r7, #8
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fca8 	bl	8005fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	9202      	str	r2, [sp, #8]
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	2300      	movs	r3, #0
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	2300      	movs	r3, #0
 8007678:	460a      	mov	r2, r1
 800767a:	4924      	ldr	r1, [pc, #144]	@ (800770c <vTaskStartScheduler+0xc0>)
 800767c:	4824      	ldr	r0, [pc, #144]	@ (8007710 <vTaskStartScheduler+0xc4>)
 800767e:	f7ff fda7 	bl	80071d0 <xTaskCreateStatic>
 8007682:	4603      	mov	r3, r0
 8007684:	4a23      	ldr	r2, [pc, #140]	@ (8007714 <vTaskStartScheduler+0xc8>)
 8007686:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007688:	4b22      	ldr	r3, [pc, #136]	@ (8007714 <vTaskStartScheduler+0xc8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e001      	b.n	800769a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d102      	bne.n	80076a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076a0:	f000 fe28 	bl	80082f4 <xTimerCreateTimerTask>
 80076a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d11b      	bne.n	80076e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	613b      	str	r3, [r7, #16]
}
 80076be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076c0:	4b15      	ldr	r3, [pc, #84]	@ (8007718 <vTaskStartScheduler+0xcc>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3354      	adds	r3, #84	@ 0x54
 80076c6:	4a15      	ldr	r2, [pc, #84]	@ (800771c <vTaskStartScheduler+0xd0>)
 80076c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076ca:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <vTaskStartScheduler+0xd4>)
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076d2:	4b14      	ldr	r3, [pc, #80]	@ (8007724 <vTaskStartScheduler+0xd8>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076d8:	4b13      	ldr	r3, [pc, #76]	@ (8007728 <vTaskStartScheduler+0xdc>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076de:	f001 f9e3 	bl	8008aa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076e2:	e00f      	b.n	8007704 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d10b      	bne.n	8007704 <vTaskStartScheduler+0xb8>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	60fb      	str	r3, [r7, #12]
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	e7fd      	b.n	8007700 <vTaskStartScheduler+0xb4>
}
 8007704:	bf00      	nop
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	0800dc74 	.word	0x0800dc74
 8007710:	08007d79 	.word	0x08007d79
 8007714:	200010d8 	.word	0x200010d8
 8007718:	20000be0 	.word	0x20000be0
 800771c:	2000001c 	.word	0x2000001c
 8007720:	200010d4 	.word	0x200010d4
 8007724:	200010c0 	.word	0x200010c0
 8007728:	200010b8 	.word	0x200010b8

0800772c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007730:	4b04      	ldr	r3, [pc, #16]	@ (8007744 <vTaskSuspendAll+0x18>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3301      	adds	r3, #1
 8007736:	4a03      	ldr	r2, [pc, #12]	@ (8007744 <vTaskSuspendAll+0x18>)
 8007738:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800773a:	bf00      	nop
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	200010dc 	.word	0x200010dc

08007748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007756:	4b42      	ldr	r3, [pc, #264]	@ (8007860 <xTaskResumeAll+0x118>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <xTaskResumeAll+0x2e>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	603b      	str	r3, [r7, #0]
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	e7fd      	b.n	8007772 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007776:	f001 fa1b 	bl	8008bb0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800777a:	4b39      	ldr	r3, [pc, #228]	@ (8007860 <xTaskResumeAll+0x118>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3b01      	subs	r3, #1
 8007780:	4a37      	ldr	r2, [pc, #220]	@ (8007860 <xTaskResumeAll+0x118>)
 8007782:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007784:	4b36      	ldr	r3, [pc, #216]	@ (8007860 <xTaskResumeAll+0x118>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d162      	bne.n	8007852 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800778c:	4b35      	ldr	r3, [pc, #212]	@ (8007864 <xTaskResumeAll+0x11c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d05e      	beq.n	8007852 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007794:	e02f      	b.n	80077f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007796:	4b34      	ldr	r3, [pc, #208]	@ (8007868 <xTaskResumeAll+0x120>)
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3318      	adds	r3, #24
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fcc0 	bl	8006128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fcbb 	bl	8006128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b6:	4b2d      	ldr	r3, [pc, #180]	@ (800786c <xTaskResumeAll+0x124>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d903      	bls.n	80077c6 <xTaskResumeAll+0x7e>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <xTaskResumeAll+0x124>)
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4a27      	ldr	r2, [pc, #156]	@ (8007870 <xTaskResumeAll+0x128>)
 80077d4:	441a      	add	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7fe fc48 	bl	8006072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e6:	4b23      	ldr	r3, [pc, #140]	@ (8007874 <xTaskResumeAll+0x12c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d302      	bcc.n	80077f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80077f0:	4b21      	ldr	r3, [pc, #132]	@ (8007878 <xTaskResumeAll+0x130>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007868 <xTaskResumeAll+0x120>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1cb      	bne.n	8007796 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007804:	f000 fb74 	bl	8007ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007808:	4b1c      	ldr	r3, [pc, #112]	@ (800787c <xTaskResumeAll+0x134>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d010      	beq.n	8007836 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007814:	f000 f856 	bl	80078c4 <xTaskIncrementTick>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800781e:	4b16      	ldr	r3, [pc, #88]	@ (8007878 <xTaskResumeAll+0x130>)
 8007820:	2201      	movs	r2, #1
 8007822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3b01      	subs	r3, #1
 8007828:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f1      	bne.n	8007814 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007830:	4b12      	ldr	r3, [pc, #72]	@ (800787c <xTaskResumeAll+0x134>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007836:	4b10      	ldr	r3, [pc, #64]	@ (8007878 <xTaskResumeAll+0x130>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800783e:	2301      	movs	r3, #1
 8007840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007842:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <xTaskResumeAll+0x138>)
 8007844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007852:	f001 f9dd 	bl	8008c10 <vPortExitCritical>

	return xAlreadyYielded;
 8007856:	68bb      	ldr	r3, [r7, #8]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	200010dc 	.word	0x200010dc
 8007864:	200010b4 	.word	0x200010b4
 8007868:	20001074 	.word	0x20001074
 800786c:	200010bc 	.word	0x200010bc
 8007870:	20000be4 	.word	0x20000be4
 8007874:	20000be0 	.word	0x20000be0
 8007878:	200010c8 	.word	0x200010c8
 800787c:	200010c4 	.word	0x200010c4
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800788a:	4b04      	ldr	r3, [pc, #16]	@ (800789c <xTaskGetTickCount+0x18>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007890:	687b      	ldr	r3, [r7, #4]
}
 8007892:	4618      	mov	r0, r3
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr
 800789c:	200010b8 	.word	0x200010b8

080078a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078a6:	f001 fa4b 	bl	8008d40 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80078ae:	4b04      	ldr	r3, [pc, #16]	@ (80078c0 <xTaskGetTickCountFromISR+0x20>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078b4:	683b      	ldr	r3, [r7, #0]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200010b8 	.word	0x200010b8

080078c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ce:	4b4f      	ldr	r3, [pc, #316]	@ (8007a0c <xTaskIncrementTick+0x148>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f040 8090 	bne.w	80079f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007a10 <xTaskIncrementTick+0x14c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078e0:	4a4b      	ldr	r2, [pc, #300]	@ (8007a10 <xTaskIncrementTick+0x14c>)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d121      	bne.n	8007930 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078ec:	4b49      	ldr	r3, [pc, #292]	@ (8007a14 <xTaskIncrementTick+0x150>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <xTaskIncrementTick+0x4a>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	603b      	str	r3, [r7, #0]
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	e7fd      	b.n	800790a <xTaskIncrementTick+0x46>
 800790e:	4b41      	ldr	r3, [pc, #260]	@ (8007a14 <xTaskIncrementTick+0x150>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	4b40      	ldr	r3, [pc, #256]	@ (8007a18 <xTaskIncrementTick+0x154>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a3e      	ldr	r2, [pc, #248]	@ (8007a14 <xTaskIncrementTick+0x150>)
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	4a3e      	ldr	r2, [pc, #248]	@ (8007a18 <xTaskIncrementTick+0x154>)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	4b3e      	ldr	r3, [pc, #248]	@ (8007a1c <xTaskIncrementTick+0x158>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	4a3c      	ldr	r2, [pc, #240]	@ (8007a1c <xTaskIncrementTick+0x158>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	f000 fae0 	bl	8007ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007930:	4b3b      	ldr	r3, [pc, #236]	@ (8007a20 <xTaskIncrementTick+0x15c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	429a      	cmp	r2, r3
 8007938:	d349      	bcc.n	80079ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793a:	4b36      	ldr	r3, [pc, #216]	@ (8007a14 <xTaskIncrementTick+0x150>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007944:	4b36      	ldr	r3, [pc, #216]	@ (8007a20 <xTaskIncrementTick+0x15c>)
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	601a      	str	r2, [r3, #0]
					break;
 800794c:	e03f      	b.n	80079ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794e:	4b31      	ldr	r3, [pc, #196]	@ (8007a14 <xTaskIncrementTick+0x150>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d203      	bcs.n	800796e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007966:	4a2e      	ldr	r2, [pc, #184]	@ (8007a20 <xTaskIncrementTick+0x15c>)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800796c:	e02f      	b.n	80079ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	3304      	adds	r3, #4
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fbd8 	bl	8006128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3318      	adds	r3, #24
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fbcf 	bl	8006128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800798e:	4b25      	ldr	r3, [pc, #148]	@ (8007a24 <xTaskIncrementTick+0x160>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d903      	bls.n	800799e <xTaskIncrementTick+0xda>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	4a22      	ldr	r2, [pc, #136]	@ (8007a24 <xTaskIncrementTick+0x160>)
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007a28 <xTaskIncrementTick+0x164>)
 80079ac:	441a      	add	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7fe fb5c 	bl	8006072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079be:	4b1b      	ldr	r3, [pc, #108]	@ (8007a2c <xTaskIncrementTick+0x168>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d3b8      	bcc.n	800793a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079cc:	e7b5      	b.n	800793a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079ce:	4b17      	ldr	r3, [pc, #92]	@ (8007a2c <xTaskIncrementTick+0x168>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d4:	4914      	ldr	r1, [pc, #80]	@ (8007a28 <xTaskIncrementTick+0x164>)
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d901      	bls.n	80079ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80079e6:	2301      	movs	r3, #1
 80079e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079ea:	4b11      	ldr	r3, [pc, #68]	@ (8007a30 <xTaskIncrementTick+0x16c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80079f2:	2301      	movs	r3, #1
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	e004      	b.n	8007a02 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a34 <xTaskIncrementTick+0x170>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007a34 <xTaskIncrementTick+0x170>)
 8007a00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a02:	697b      	ldr	r3, [r7, #20]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200010dc 	.word	0x200010dc
 8007a10:	200010b8 	.word	0x200010b8
 8007a14:	2000106c 	.word	0x2000106c
 8007a18:	20001070 	.word	0x20001070
 8007a1c:	200010cc 	.word	0x200010cc
 8007a20:	200010d4 	.word	0x200010d4
 8007a24:	200010bc 	.word	0x200010bc
 8007a28:	20000be4 	.word	0x20000be4
 8007a2c:	20000be0 	.word	0x20000be0
 8007a30:	200010c8 	.word	0x200010c8
 8007a34:	200010c4 	.word	0x200010c4

08007a38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8007ae8 <vTaskSwitchContext+0xb0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a46:	4b29      	ldr	r3, [pc, #164]	@ (8007aec <vTaskSwitchContext+0xb4>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a4c:	e047      	b.n	8007ade <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007a4e:	4b27      	ldr	r3, [pc, #156]	@ (8007aec <vTaskSwitchContext+0xb4>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a54:	4b26      	ldr	r3, [pc, #152]	@ (8007af0 <vTaskSwitchContext+0xb8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	e011      	b.n	8007a80 <vTaskSwitchContext+0x48>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <vTaskSwitchContext+0x42>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	607b      	str	r3, [r7, #4]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <vTaskSwitchContext+0x3e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	491c      	ldr	r1, [pc, #112]	@ (8007af4 <vTaskSwitchContext+0xbc>)
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0e3      	beq.n	8007a5c <vTaskSwitchContext+0x24>
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4a15      	ldr	r2, [pc, #84]	@ (8007af4 <vTaskSwitchContext+0xbc>)
 8007aa0:	4413      	add	r3, r2
 8007aa2:	60bb      	str	r3, [r7, #8]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	605a      	str	r2, [r3, #4]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d104      	bne.n	8007ac4 <vTaskSwitchContext+0x8c>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	4a0b      	ldr	r2, [pc, #44]	@ (8007af8 <vTaskSwitchContext+0xc0>)
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	4a08      	ldr	r2, [pc, #32]	@ (8007af0 <vTaskSwitchContext+0xb8>)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ad4:	4b08      	ldr	r3, [pc, #32]	@ (8007af8 <vTaskSwitchContext+0xc0>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3354      	adds	r3, #84	@ 0x54
 8007ada:	4a08      	ldr	r2, [pc, #32]	@ (8007afc <vTaskSwitchContext+0xc4>)
 8007adc:	6013      	str	r3, [r2, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr
 8007ae8:	200010dc 	.word	0x200010dc
 8007aec:	200010c8 	.word	0x200010c8
 8007af0:	200010bc 	.word	0x200010bc
 8007af4:	20000be4 	.word	0x20000be4
 8007af8:	20000be0 	.word	0x20000be0
 8007afc:	2000001c 	.word	0x2000001c

08007b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b28:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <vTaskPlaceOnEventList+0x48>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fe fac1 	bl	80060b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b36:	2101      	movs	r1, #1
 8007b38:	6838      	ldr	r0, [r7, #0]
 8007b3a:	f000 fb87 	bl	800824c <prvAddCurrentTaskToDelayedList>
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000be0 	.word	0x20000be0

08007b4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	617b      	str	r3, [r7, #20]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3318      	adds	r3, #24
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7fe fa77 	bl	8006072 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	68b8      	ldr	r0, [r7, #8]
 8007b94:	f000 fb5a 	bl	800824c <prvAddCurrentTaskToDelayedList>
	}
 8007b98:	bf00      	nop
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000be0 	.word	0x20000be0

08007ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	60fb      	str	r3, [r7, #12]
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe faa6 	bl	8006128 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c54 <xTaskRemoveFromEventList+0xb0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d11d      	bne.n	8007c20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe fa9d 	bl	8006128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf2:	4b19      	ldr	r3, [pc, #100]	@ (8007c58 <xTaskRemoveFromEventList+0xb4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d903      	bls.n	8007c02 <xTaskRemoveFromEventList+0x5e>
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	4a16      	ldr	r2, [pc, #88]	@ (8007c58 <xTaskRemoveFromEventList+0xb4>)
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4a13      	ldr	r2, [pc, #76]	@ (8007c5c <xTaskRemoveFromEventList+0xb8>)
 8007c10:	441a      	add	r2, r3
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4619      	mov	r1, r3
 8007c18:	4610      	mov	r0, r2
 8007c1a:	f7fe fa2a 	bl	8006072 <vListInsertEnd>
 8007c1e:	e005      	b.n	8007c2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3318      	adds	r3, #24
 8007c24:	4619      	mov	r1, r3
 8007c26:	480e      	ldr	r0, [pc, #56]	@ (8007c60 <xTaskRemoveFromEventList+0xbc>)
 8007c28:	f7fe fa23 	bl	8006072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c30:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <xTaskRemoveFromEventList+0xc0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d905      	bls.n	8007c46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c68 <xTaskRemoveFromEventList+0xc4>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e001      	b.n	8007c4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c4a:	697b      	ldr	r3, [r7, #20]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200010dc 	.word	0x200010dc
 8007c58:	200010bc 	.word	0x200010bc
 8007c5c:	20000be4 	.word	0x20000be4
 8007c60:	20001074 	.word	0x20001074
 8007c64:	20000be0 	.word	0x20000be0
 8007c68:	200010c8 	.word	0x200010c8

08007c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c74:	4b06      	ldr	r3, [pc, #24]	@ (8007c90 <vTaskInternalSetTimeOutState+0x24>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c7c:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <vTaskInternalSetTimeOutState+0x28>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	605a      	str	r2, [r3, #4]
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	200010cc 	.word	0x200010cc
 8007c94:	200010b8 	.word	0x200010b8

08007c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	613b      	str	r3, [r7, #16]
}
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10b      	bne.n	8007cde <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007cde:	f000 ff67 	bl	8008bb0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d58 <xTaskCheckForTimeOut+0xc0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d102      	bne.n	8007d02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	e023      	b.n	8007d4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b15      	ldr	r3, [pc, #84]	@ (8007d5c <xTaskCheckForTimeOut+0xc4>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d007      	beq.n	8007d1e <xTaskCheckForTimeOut+0x86>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d302      	bcc.n	8007d1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	61fb      	str	r3, [r7, #28]
 8007d1c:	e015      	b.n	8007d4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d20b      	bcs.n	8007d40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ff99 	bl	8007c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	e004      	b.n	8007d4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d4a:	f000 ff61 	bl	8008c10 <vPortExitCritical>

	return xReturn;
 8007d4e:	69fb      	ldr	r3, [r7, #28]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200010b8 	.word	0x200010b8
 8007d5c:	200010cc 	.word	0x200010cc

08007d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d64:	4b03      	ldr	r3, [pc, #12]	@ (8007d74 <vTaskMissedYield+0x14>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	200010c8 	.word	0x200010c8

08007d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d80:	f000 f852 	bl	8007e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d84:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <prvIdleTask+0x28>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d9f9      	bls.n	8007d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d8c:	4b05      	ldr	r3, [pc, #20]	@ (8007da4 <prvIdleTask+0x2c>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d9c:	e7f0      	b.n	8007d80 <prvIdleTask+0x8>
 8007d9e:	bf00      	nop
 8007da0:	20000be4 	.word	0x20000be4
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dae:	2300      	movs	r3, #0
 8007db0:	607b      	str	r3, [r7, #4]
 8007db2:	e00c      	b.n	8007dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4a12      	ldr	r2, [pc, #72]	@ (8007e08 <prvInitialiseTaskLists+0x60>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe f92a 	bl	800601c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b37      	cmp	r3, #55	@ 0x37
 8007dd2:	d9ef      	bls.n	8007db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dd4:	480d      	ldr	r0, [pc, #52]	@ (8007e0c <prvInitialiseTaskLists+0x64>)
 8007dd6:	f7fe f921 	bl	800601c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dda:	480d      	ldr	r0, [pc, #52]	@ (8007e10 <prvInitialiseTaskLists+0x68>)
 8007ddc:	f7fe f91e 	bl	800601c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007de0:	480c      	ldr	r0, [pc, #48]	@ (8007e14 <prvInitialiseTaskLists+0x6c>)
 8007de2:	f7fe f91b 	bl	800601c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007de6:	480c      	ldr	r0, [pc, #48]	@ (8007e18 <prvInitialiseTaskLists+0x70>)
 8007de8:	f7fe f918 	bl	800601c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dec:	480b      	ldr	r0, [pc, #44]	@ (8007e1c <prvInitialiseTaskLists+0x74>)
 8007dee:	f7fe f915 	bl	800601c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007df2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <prvInitialiseTaskLists+0x78>)
 8007df4:	4a05      	ldr	r2, [pc, #20]	@ (8007e0c <prvInitialiseTaskLists+0x64>)
 8007df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e24 <prvInitialiseTaskLists+0x7c>)
 8007dfa:	4a05      	ldr	r2, [pc, #20]	@ (8007e10 <prvInitialiseTaskLists+0x68>)
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000be4 	.word	0x20000be4
 8007e0c:	20001044 	.word	0x20001044
 8007e10:	20001058 	.word	0x20001058
 8007e14:	20001074 	.word	0x20001074
 8007e18:	20001088 	.word	0x20001088
 8007e1c:	200010a0 	.word	0x200010a0
 8007e20:	2000106c 	.word	0x2000106c
 8007e24:	20001070 	.word	0x20001070

08007e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e2e:	e019      	b.n	8007e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e30:	f000 febe 	bl	8008bb0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e34:	4b10      	ldr	r3, [pc, #64]	@ (8007e78 <prvCheckTasksWaitingTermination+0x50>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe f971 	bl	8006128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e46:	4b0d      	ldr	r3, [pc, #52]	@ (8007e7c <prvCheckTasksWaitingTermination+0x54>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007e7c <prvCheckTasksWaitingTermination+0x54>)
 8007e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e50:	4b0b      	ldr	r3, [pc, #44]	@ (8007e80 <prvCheckTasksWaitingTermination+0x58>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4a0a      	ldr	r2, [pc, #40]	@ (8007e80 <prvCheckTasksWaitingTermination+0x58>)
 8007e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e5a:	f000 fed9 	bl	8008c10 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f810 	bl	8007e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e64:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <prvCheckTasksWaitingTermination+0x58>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e1      	bne.n	8007e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20001088 	.word	0x20001088
 8007e7c:	200010b4 	.word	0x200010b4
 8007e80:	2000109c 	.word	0x2000109c

08007e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3354      	adds	r3, #84	@ 0x54
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 fb6d 	bl	800a570 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d108      	bne.n	8007eb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f859 	bl	8008f5c <vPortFree>
				vPortFree( pxTCB );
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 f856 	bl	8008f5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eb0:	e019      	b.n	8007ee6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d103      	bne.n	8007ec4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f84d 	bl	8008f5c <vPortFree>
	}
 8007ec2:	e010      	b.n	8007ee6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d00b      	beq.n	8007ee6 <prvDeleteTCB+0x62>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	60fb      	str	r3, [r7, #12]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <prvDeleteTCB+0x5e>
	}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f28 <prvResetNextTaskUnblockTime+0x38>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f00:	4b0a      	ldr	r3, [pc, #40]	@ (8007f2c <prvResetNextTaskUnblockTime+0x3c>)
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f08:	e008      	b.n	8007f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f0a:	4b07      	ldr	r3, [pc, #28]	@ (8007f28 <prvResetNextTaskUnblockTime+0x38>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4a04      	ldr	r2, [pc, #16]	@ (8007f2c <prvResetNextTaskUnblockTime+0x3c>)
 8007f1a:	6013      	str	r3, [r2, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	2000106c 	.word	0x2000106c
 8007f2c:	200010d4 	.word	0x200010d4

08007f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f36:	4b0b      	ldr	r3, [pc, #44]	@ (8007f64 <xTaskGetSchedulerState+0x34>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d102      	bne.n	8007f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	607b      	str	r3, [r7, #4]
 8007f42:	e008      	b.n	8007f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f44:	4b08      	ldr	r3, [pc, #32]	@ (8007f68 <xTaskGetSchedulerState+0x38>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	e001      	b.n	8007f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f56:	687b      	ldr	r3, [r7, #4]
	}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	200010c0 	.word	0x200010c0
 8007f68:	200010dc 	.word	0x200010dc

08007f6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d051      	beq.n	8008026 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f86:	4b2a      	ldr	r3, [pc, #168]	@ (8008030 <xTaskPriorityInherit+0xc4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d241      	bcs.n	8008014 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	db06      	blt.n	8007fa6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f98:	4b25      	ldr	r3, [pc, #148]	@ (8008030 <xTaskPriorityInherit+0xc4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6959      	ldr	r1, [r3, #20]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8008034 <xTaskPriorityInherit+0xc8>)
 8007fb8:	4413      	add	r3, r2
 8007fba:	4299      	cmp	r1, r3
 8007fbc:	d122      	bne.n	8008004 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe f8b0 	bl	8006128 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fc8:	4b19      	ldr	r3, [pc, #100]	@ (8008030 <xTaskPriorityInherit+0xc4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd6:	4b18      	ldr	r3, [pc, #96]	@ (8008038 <xTaskPriorityInherit+0xcc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d903      	bls.n	8007fe6 <xTaskPriorityInherit+0x7a>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	4a15      	ldr	r2, [pc, #84]	@ (8008038 <xTaskPriorityInherit+0xcc>)
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4a10      	ldr	r2, [pc, #64]	@ (8008034 <xTaskPriorityInherit+0xc8>)
 8007ff4:	441a      	add	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7fe f838 	bl	8006072 <vListInsertEnd>
 8008002:	e004      	b.n	800800e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008004:	4b0a      	ldr	r3, [pc, #40]	@ (8008030 <xTaskPriorityInherit+0xc4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800800e:	2301      	movs	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	e008      	b.n	8008026 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008018:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <xTaskPriorityInherit+0xc4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801e:	429a      	cmp	r2, r3
 8008020:	d201      	bcs.n	8008026 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008022:	2301      	movs	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008026:	68fb      	ldr	r3, [r7, #12]
	}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000be0 	.word	0x20000be0
 8008034:	20000be4 	.word	0x20000be4
 8008038:	200010bc 	.word	0x200010bc

0800803c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d058      	beq.n	8008104 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008052:	4b2f      	ldr	r3, [pc, #188]	@ (8008110 <xTaskPriorityDisinherit+0xd4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d00b      	beq.n	8008074 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60bb      	str	r3, [r7, #8]
}
 800808e:	bf00      	nop
 8008090:	bf00      	nop
 8008092:	e7fd      	b.n	8008090 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008098:	1e5a      	subs	r2, r3, #1
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d02c      	beq.n	8008104 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d128      	bne.n	8008104 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe f836 	bl	8006128 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008114 <xTaskPriorityDisinherit+0xd8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d903      	bls.n	80080e4 <xTaskPriorityDisinherit+0xa8>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	4a0c      	ldr	r2, [pc, #48]	@ (8008114 <xTaskPriorityDisinherit+0xd8>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4a09      	ldr	r2, [pc, #36]	@ (8008118 <xTaskPriorityDisinherit+0xdc>)
 80080f2:	441a      	add	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7fd ffb9 	bl	8006072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008104:	697b      	ldr	r3, [r7, #20]
	}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000be0 	.word	0x20000be0
 8008114:	200010bc 	.word	0x200010bc
 8008118:	20000be4 	.word	0x20000be4

0800811c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800812a:	2301      	movs	r3, #1
 800812c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d06c      	beq.n	800820e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10b      	bne.n	8008154 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	e7fd      	b.n	8008150 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d902      	bls.n	8008164 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	e002      	b.n	800816a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008168:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	429a      	cmp	r2, r3
 8008172:	d04c      	beq.n	800820e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	429a      	cmp	r2, r3
 800817c:	d147      	bne.n	800820e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800817e:	4b26      	ldr	r3, [pc, #152]	@ (8008218 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	429a      	cmp	r2, r3
 8008186:	d10b      	bne.n	80081a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	60bb      	str	r3, [r7, #8]
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	e7fd      	b.n	800819c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	db04      	blt.n	80081be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	6959      	ldr	r1, [r3, #20]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4a13      	ldr	r2, [pc, #76]	@ (800821c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081ce:	4413      	add	r3, r2
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d11c      	bne.n	800820e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fd ffa5 	bl	8006128 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008220 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d903      	bls.n	80081f2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008220 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4a07      	ldr	r2, [pc, #28]	@ (800821c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008200:	441a      	add	r2, r3
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fd ff32 	bl	8006072 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800820e:	bf00      	nop
 8008210:	3720      	adds	r7, #32
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000be0 	.word	0x20000be0
 800821c:	20000be4 	.word	0x20000be4
 8008220:	200010bc 	.word	0x200010bc

08008224 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008228:	4b07      	ldr	r3, [pc, #28]	@ (8008248 <pvTaskIncrementMutexHeldCount+0x24>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008230:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <pvTaskIncrementMutexHeldCount+0x24>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008236:	3201      	adds	r2, #1
 8008238:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800823a:	4b03      	ldr	r3, [pc, #12]	@ (8008248 <pvTaskIncrementMutexHeldCount+0x24>)
 800823c:	681b      	ldr	r3, [r3, #0]
	}
 800823e:	4618      	mov	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000be0 	.word	0x20000be0

0800824c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008256:	4b21      	ldr	r3, [pc, #132]	@ (80082dc <prvAddCurrentTaskToDelayedList+0x90>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800825c:	4b20      	ldr	r3, [pc, #128]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd ff60 	bl	8006128 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d10a      	bne.n	8008286 <prvAddCurrentTaskToDelayedList+0x3a>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008276:	4b1a      	ldr	r3, [pc, #104]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4819      	ldr	r0, [pc, #100]	@ (80082e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008280:	f7fd fef7 	bl	8006072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008284:	e026      	b.n	80082d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800828e:	4b14      	ldr	r3, [pc, #80]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	429a      	cmp	r2, r3
 800829c:	d209      	bcs.n	80082b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829e:	4b12      	ldr	r3, [pc, #72]	@ (80082e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4b0f      	ldr	r3, [pc, #60]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7fd ff04 	bl	80060b8 <vListInsert>
}
 80082b0:	e010      	b.n	80082d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b2:	4b0e      	ldr	r3, [pc, #56]	@ (80082ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b0a      	ldr	r3, [pc, #40]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f7fd fefa 	bl	80060b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c4:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d202      	bcs.n	80082d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ce:	4a08      	ldr	r2, [pc, #32]	@ (80082f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	6013      	str	r3, [r2, #0]
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200010b8 	.word	0x200010b8
 80082e0:	20000be0 	.word	0x20000be0
 80082e4:	200010a0 	.word	0x200010a0
 80082e8:	20001070 	.word	0x20001070
 80082ec:	2000106c 	.word	0x2000106c
 80082f0:	200010d4 	.word	0x200010d4

080082f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	@ 0x28
 80082f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082fe:	f000 fb11 	bl	8008924 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008302:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <xTimerCreateTimerTask+0x84>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d021      	beq.n	800834e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008312:	1d3a      	adds	r2, r7, #4
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	f107 030c 	add.w	r3, r7, #12
 800831c:	4618      	mov	r0, r3
 800831e:	f7fd fe63 	bl	8005fe8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	9202      	str	r2, [sp, #8]
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	2302      	movs	r3, #2
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2300      	movs	r3, #0
 8008332:	460a      	mov	r2, r1
 8008334:	4911      	ldr	r1, [pc, #68]	@ (800837c <xTimerCreateTimerTask+0x88>)
 8008336:	4812      	ldr	r0, [pc, #72]	@ (8008380 <xTimerCreateTimerTask+0x8c>)
 8008338:	f7fe ff4a 	bl	80071d0 <xTaskCreateStatic>
 800833c:	4603      	mov	r3, r0
 800833e:	4a11      	ldr	r2, [pc, #68]	@ (8008384 <xTimerCreateTimerTask+0x90>)
 8008340:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008342:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <xTimerCreateTimerTask+0x90>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800834a:	2301      	movs	r3, #1
 800834c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	613b      	str	r3, [r7, #16]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800836c:	697b      	ldr	r3, [r7, #20]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20001110 	.word	0x20001110
 800837c:	0800dc7c 	.word	0x0800dc7c
 8008380:	080084c1 	.word	0x080084c1
 8008384:	20001114 	.word	0x20001114

08008388 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	@ 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008396:	2300      	movs	r3, #0
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10b      	bne.n	80083b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	623b      	str	r3, [r7, #32]
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083b8:	4b19      	ldr	r3, [pc, #100]	@ (8008420 <xTimerGenericCommand+0x98>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d02a      	beq.n	8008416 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b05      	cmp	r3, #5
 80083d0:	dc18      	bgt.n	8008404 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083d2:	f7ff fdad 	bl	8007f30 <xTaskGetSchedulerState>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d109      	bne.n	80083f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083dc:	4b10      	ldr	r3, [pc, #64]	@ (8008420 <xTimerGenericCommand+0x98>)
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	f107 0110 	add.w	r1, r7, #16
 80083e4:	2300      	movs	r3, #0
 80083e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e8:	f7fe f87c 	bl	80064e4 <xQueueGenericSend>
 80083ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80083ee:	e012      	b.n	8008416 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008420 <xTimerGenericCommand+0x98>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	f107 0110 	add.w	r1, r7, #16
 80083f8:	2300      	movs	r3, #0
 80083fa:	2200      	movs	r2, #0
 80083fc:	f7fe f872 	bl	80064e4 <xQueueGenericSend>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24
 8008402:	e008      	b.n	8008416 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008404:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <xTimerGenericCommand+0x98>)
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	f107 0110 	add.w	r1, r7, #16
 800840c:	2300      	movs	r3, #0
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	f7fe f96a 	bl	80066e8 <xQueueGenericSendFromISR>
 8008414:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008418:	4618      	mov	r0, r3
 800841a:	3728      	adds	r7, #40	@ 0x28
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20001110 	.word	0x20001110

08008424 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af02      	add	r7, sp, #8
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842e:	4b23      	ldr	r3, [pc, #140]	@ (80084bc <prvProcessExpiredTimer+0x98>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	3304      	adds	r3, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd fe73 	bl	8006128 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d023      	beq.n	8008498 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	699a      	ldr	r2, [r3, #24]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	18d1      	adds	r1, r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	6978      	ldr	r0, [r7, #20]
 800845e:	f000 f8d3 	bl	8008608 <prvInsertTimerInActiveList>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d020      	beq.n	80084aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008468:	2300      	movs	r3, #0
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	2300      	movs	r3, #0
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	2100      	movs	r1, #0
 8008472:	6978      	ldr	r0, [r7, #20]
 8008474:	f7ff ff88 	bl	8008388 <xTimerGenericCommand>
 8008478:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d114      	bne.n	80084aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60fb      	str	r3, [r7, #12]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	6978      	ldr	r0, [r7, #20]
 80084b0:	4798      	blx	r3
}
 80084b2:	bf00      	nop
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20001108 	.word	0x20001108

080084c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084c8:	f107 0308 	add.w	r3, r7, #8
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f859 	bl	8008584 <prvGetNextExpireTime>
 80084d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4619      	mov	r1, r3
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f805 	bl	80084e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084de:	f000 f8d5 	bl	800868c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084e2:	bf00      	nop
 80084e4:	e7f0      	b.n	80084c8 <prvTimerTask+0x8>
	...

080084e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084f2:	f7ff f91b 	bl	800772c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084f6:	f107 0308 	add.w	r3, r7, #8
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f864 	bl	80085c8 <prvSampleTimeNow>
 8008500:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d130      	bne.n	800856a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <prvProcessTimerOrBlockTask+0x3c>
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	429a      	cmp	r2, r3
 8008514:	d806      	bhi.n	8008524 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008516:	f7ff f917 	bl	8007748 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff ff81 	bl	8008424 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008522:	e024      	b.n	800856e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d008      	beq.n	800853c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800852a:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <prvProcessTimerOrBlockTask+0x90>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <prvProcessTimerOrBlockTask+0x50>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <prvProcessTimerOrBlockTask+0x52>
 8008538:	2300      	movs	r3, #0
 800853a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800853c:	4b0f      	ldr	r3, [pc, #60]	@ (800857c <prvProcessTimerOrBlockTask+0x94>)
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	4619      	mov	r1, r3
 800854a:	f7fe fe0d 	bl	8007168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800854e:	f7ff f8fb 	bl	8007748 <xTaskResumeAll>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008558:	4b09      	ldr	r3, [pc, #36]	@ (8008580 <prvProcessTimerOrBlockTask+0x98>)
 800855a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	f3bf 8f6f 	isb	sy
}
 8008568:	e001      	b.n	800856e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800856a:	f7ff f8ed 	bl	8007748 <xTaskResumeAll>
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	2000110c 	.word	0x2000110c
 800857c:	20001110 	.word	0x20001110
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800858c:	4b0d      	ldr	r3, [pc, #52]	@ (80085c4 <prvGetNextExpireTime+0x40>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <prvGetNextExpireTime+0x16>
 8008596:	2201      	movs	r2, #1
 8008598:	e000      	b.n	800859c <prvGetNextExpireTime+0x18>
 800859a:	2200      	movs	r2, #0
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085a8:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <prvGetNextExpireTime+0x40>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e001      	b.n	80085b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085b8:	68fb      	ldr	r3, [r7, #12]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc80      	pop	{r7}
 80085c2:	4770      	bx	lr
 80085c4:	20001108 	.word	0x20001108

080085c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085d0:	f7ff f958 	bl	8007884 <xTaskGetTickCount>
 80085d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008604 <prvSampleTimeNow+0x3c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d205      	bcs.n	80085ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085e0:	f000 f93a 	bl	8008858 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e002      	b.n	80085f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085f2:	4a04      	ldr	r2, [pc, #16]	@ (8008604 <prvSampleTimeNow+0x3c>)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085f8:	68fb      	ldr	r3, [r7, #12]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20001118 	.word	0x20001118

08008608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	429a      	cmp	r2, r3
 800862c:	d812      	bhi.n	8008654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	1ad2      	subs	r2, r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	429a      	cmp	r2, r3
 800863a:	d302      	bcc.n	8008642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e01b      	b.n	800867a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008642:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <prvInsertTimerInActiveList+0x7c>)
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3304      	adds	r3, #4
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f7fd fd33 	bl	80060b8 <vListInsert>
 8008652:	e012      	b.n	800867a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d206      	bcs.n	800866a <prvInsertTimerInActiveList+0x62>
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d302      	bcc.n	800866a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008664:	2301      	movs	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e007      	b.n	800867a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800866a:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <prvInsertTimerInActiveList+0x80>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3304      	adds	r3, #4
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f7fd fd1f 	bl	80060b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800867a:	697b      	ldr	r3, [r7, #20]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	2000110c 	.word	0x2000110c
 8008688:	20001108 	.word	0x20001108

0800868c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08e      	sub	sp, #56	@ 0x38
 8008690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008692:	e0ce      	b.n	8008832 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	da19      	bge.n	80086ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800869a:	1d3b      	adds	r3, r7, #4
 800869c:	3304      	adds	r3, #4
 800869e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10b      	bne.n	80086be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	61fb      	str	r3, [r7, #28]
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	e7fd      	b.n	80086ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c4:	6850      	ldr	r0, [r2, #4]
 80086c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c8:	6892      	ldr	r2, [r2, #8]
 80086ca:	4611      	mov	r1, r2
 80086cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f2c0 80ae 	blt.w	8008832 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	3304      	adds	r3, #4
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fd fd1e 	bl	8006128 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086ec:	463b      	mov	r3, r7
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff ff6a 	bl	80085c8 <prvSampleTimeNow>
 80086f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b09      	cmp	r3, #9
 80086fa:	f200 8097 	bhi.w	800882c <prvProcessReceivedCommands+0x1a0>
 80086fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <prvProcessReceivedCommands+0x78>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	0800872d 	.word	0x0800872d
 8008708:	0800872d 	.word	0x0800872d
 800870c:	0800872d 	.word	0x0800872d
 8008710:	080087a3 	.word	0x080087a3
 8008714:	080087b7 	.word	0x080087b7
 8008718:	08008803 	.word	0x08008803
 800871c:	0800872d 	.word	0x0800872d
 8008720:	0800872d 	.word	0x0800872d
 8008724:	080087a3 	.word	0x080087a3
 8008728:	080087b7 	.word	0x080087b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008732:	f043 0301 	orr.w	r3, r3, #1
 8008736:	b2da      	uxtb	r2, r3
 8008738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	18d1      	adds	r1, r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800874c:	f7ff ff5c 	bl	8008608 <prvInsertTimerInActiveList>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d06c      	beq.n	8008830 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800875c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d061      	beq.n	8008830 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	441a      	add	r2, r3
 8008774:	2300      	movs	r3, #0
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	2300      	movs	r3, #0
 800877a:	2100      	movs	r1, #0
 800877c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877e:	f7ff fe03 	bl	8008388 <xTimerGenericCommand>
 8008782:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d152      	bne.n	8008830 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	61bb      	str	r3, [r7, #24]
}
 800879c:	bf00      	nop
 800879e:	bf00      	nop
 80087a0:	e7fd      	b.n	800879e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087b4:	e03d      	b.n	8008832 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087bc:	f043 0301 	orr.w	r3, r3, #1
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	617b      	str	r3, [r7, #20]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	18d1      	adds	r1, r2, r3
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087fc:	f7ff ff04 	bl	8008608 <prvInsertTimerInActiveList>
					break;
 8008800:	e017      	b.n	8008832 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d103      	bne.n	8008818 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008812:	f000 fba3 	bl	8008f5c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008816:	e00c      	b.n	8008832 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800881e:	f023 0301 	bic.w	r3, r3, #1
 8008822:	b2da      	uxtb	r2, r3
 8008824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008826:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800882a:	e002      	b.n	8008832 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800882c:	bf00      	nop
 800882e:	e000      	b.n	8008832 <prvProcessReceivedCommands+0x1a6>
					break;
 8008830:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008832:	4b08      	ldr	r3, [pc, #32]	@ (8008854 <prvProcessReceivedCommands+0x1c8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	1d39      	adds	r1, r7, #4
 8008838:	2200      	movs	r2, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe f882 	bl	8006944 <xQueueReceive>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	f47f af26 	bne.w	8008694 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	3730      	adds	r7, #48	@ 0x30
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20001110 	.word	0x20001110

08008858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800885e:	e049      	b.n	80088f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008860:	4b2e      	ldr	r3, [pc, #184]	@ (800891c <prvSwitchTimerLists+0xc4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886a:	4b2c      	ldr	r3, [pc, #176]	@ (800891c <prvSwitchTimerLists+0xc4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3304      	adds	r3, #4
 8008878:	4618      	mov	r0, r3
 800887a:	f7fd fc55 	bl	8006128 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d02f      	beq.n	80088f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4413      	add	r3, r2
 800889c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d90e      	bls.n	80088c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088b2:	4b1a      	ldr	r3, [pc, #104]	@ (800891c <prvSwitchTimerLists+0xc4>)
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7fd fbfb 	bl	80060b8 <vListInsert>
 80088c2:	e017      	b.n	80088f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088c4:	2300      	movs	r3, #0
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	2300      	movs	r3, #0
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	2100      	movs	r1, #0
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fd5a 	bl	8008388 <xTimerGenericCommand>
 80088d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10b      	bne.n	80088f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	603b      	str	r3, [r7, #0]
}
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	e7fd      	b.n	80088f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088f4:	4b09      	ldr	r3, [pc, #36]	@ (800891c <prvSwitchTimerLists+0xc4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1b0      	bne.n	8008860 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088fe:	4b07      	ldr	r3, [pc, #28]	@ (800891c <prvSwitchTimerLists+0xc4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008904:	4b06      	ldr	r3, [pc, #24]	@ (8008920 <prvSwitchTimerLists+0xc8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a04      	ldr	r2, [pc, #16]	@ (800891c <prvSwitchTimerLists+0xc4>)
 800890a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800890c:	4a04      	ldr	r2, [pc, #16]	@ (8008920 <prvSwitchTimerLists+0xc8>)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	6013      	str	r3, [r2, #0]
}
 8008912:	bf00      	nop
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20001108 	.word	0x20001108
 8008920:	2000110c 	.word	0x2000110c

08008924 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800892a:	f000 f941 	bl	8008bb0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800892e:	4b15      	ldr	r3, [pc, #84]	@ (8008984 <prvCheckForValidListAndQueue+0x60>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d120      	bne.n	8008978 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008936:	4814      	ldr	r0, [pc, #80]	@ (8008988 <prvCheckForValidListAndQueue+0x64>)
 8008938:	f7fd fb70 	bl	800601c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800893c:	4813      	ldr	r0, [pc, #76]	@ (800898c <prvCheckForValidListAndQueue+0x68>)
 800893e:	f7fd fb6d 	bl	800601c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008942:	4b13      	ldr	r3, [pc, #76]	@ (8008990 <prvCheckForValidListAndQueue+0x6c>)
 8008944:	4a10      	ldr	r2, [pc, #64]	@ (8008988 <prvCheckForValidListAndQueue+0x64>)
 8008946:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008948:	4b12      	ldr	r3, [pc, #72]	@ (8008994 <prvCheckForValidListAndQueue+0x70>)
 800894a:	4a10      	ldr	r2, [pc, #64]	@ (800898c <prvCheckForValidListAndQueue+0x68>)
 800894c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800894e:	2300      	movs	r3, #0
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4b11      	ldr	r3, [pc, #68]	@ (8008998 <prvCheckForValidListAndQueue+0x74>)
 8008954:	4a11      	ldr	r2, [pc, #68]	@ (800899c <prvCheckForValidListAndQueue+0x78>)
 8008956:	2110      	movs	r1, #16
 8008958:	200a      	movs	r0, #10
 800895a:	f7fd fc79 	bl	8006250 <xQueueGenericCreateStatic>
 800895e:	4603      	mov	r3, r0
 8008960:	4a08      	ldr	r2, [pc, #32]	@ (8008984 <prvCheckForValidListAndQueue+0x60>)
 8008962:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008964:	4b07      	ldr	r3, [pc, #28]	@ (8008984 <prvCheckForValidListAndQueue+0x60>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800896c:	4b05      	ldr	r3, [pc, #20]	@ (8008984 <prvCheckForValidListAndQueue+0x60>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	490b      	ldr	r1, [pc, #44]	@ (80089a0 <prvCheckForValidListAndQueue+0x7c>)
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fba6 	bl	80070c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008978:	f000 f94a 	bl	8008c10 <vPortExitCritical>
}
 800897c:	bf00      	nop
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20001110 	.word	0x20001110
 8008988:	200010e0 	.word	0x200010e0
 800898c:	200010f4 	.word	0x200010f4
 8008990:	20001108 	.word	0x20001108
 8008994:	2000110c 	.word	0x2000110c
 8008998:	200011bc 	.word	0x200011bc
 800899c:	2000111c 	.word	0x2000111c
 80089a0:	0800dc84 	.word	0x0800dc84

080089a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3b04      	subs	r3, #4
 80089b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80089bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3b04      	subs	r3, #4
 80089c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f023 0201 	bic.w	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089d4:	4a08      	ldr	r2, [pc, #32]	@ (80089f8 <pxPortInitialiseStack+0x54>)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3b14      	subs	r3, #20
 80089de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3b20      	subs	r3, #32
 80089ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089ec:	68fb      	ldr	r3, [r7, #12]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr
 80089f8:	080089fd 	.word	0x080089fd

080089fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a06:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <prvTaskExitError+0x54>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d00b      	beq.n	8008a28 <prvTaskExitError+0x2c>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	60fb      	str	r3, [r7, #12]
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <prvTaskExitError+0x28>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	60bb      	str	r3, [r7, #8]
}
 8008a3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a3c:	bf00      	nop
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0fc      	beq.n	8008a3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr
 8008a50:	2000000c 	.word	0x2000000c
	...

08008a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a60:	4b07      	ldr	r3, [pc, #28]	@ (8008a80 <pxCurrentTCBConst2>)
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a6a:	f380 8809 	msr	PSP, r0
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f380 8811 	msr	BASEPRI, r0
 8008a7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a7e:	4770      	bx	lr

08008a80 <pxCurrentTCBConst2>:
 8008a80:	20000be0 	.word	0x20000be0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a88:	4806      	ldr	r0, [pc, #24]	@ (8008aa4 <prvPortStartFirstTask+0x1c>)
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f380 8808 	msr	MSP, r0
 8008a92:	b662      	cpsie	i
 8008a94:	b661      	cpsie	f
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	df00      	svc	0
 8008aa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aa2:	bf00      	nop
 8008aa4:	e000ed08 	.word	0xe000ed08

08008aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aae:	4b3b      	ldr	r3, [pc, #236]	@ (8008b9c <xPortStartScheduler+0xf4>)
 8008ab0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	22ff      	movs	r2, #255	@ 0xff
 8008abe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	4b33      	ldr	r3, [pc, #204]	@ (8008ba0 <xPortStartScheduler+0xf8>)
 8008ad4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ad6:	4b33      	ldr	r3, [pc, #204]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008ad8:	2207      	movs	r2, #7
 8008ada:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008adc:	e009      	b.n	8008af2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008ade:	4b31      	ldr	r3, [pc, #196]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008ae6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008afa:	2b80      	cmp	r3, #128	@ 0x80
 8008afc:	d0ef      	beq.n	8008ade <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8008afe:	4b29      	ldr	r3, [pc, #164]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f1c3 0307 	rsb	r3, r3, #7
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d00b      	beq.n	8008b22 <xPortStartScheduler+0x7a>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	613b      	str	r3, [r7, #16]
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	e7fd      	b.n	8008b1e <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b22:	4b20      	ldr	r3, [pc, #128]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f1c3 0307 	rsb	r3, r3, #7
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d00b      	beq.n	8008b46 <xPortStartScheduler+0x9e>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	60fb      	str	r3, [r7, #12]
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	e7fd      	b.n	8008b42 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b46:	4b17      	ldr	r3, [pc, #92]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	4a15      	ldr	r2, [pc, #84]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008b4e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b50:	4b14      	ldr	r3, [pc, #80]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b58:	4a12      	ldr	r2, [pc, #72]	@ (8008ba4 <xPortStartScheduler+0xfc>)
 8008b5a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b64:	4b10      	ldr	r3, [pc, #64]	@ (8008ba8 <xPortStartScheduler+0x100>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a0f      	ldr	r2, [pc, #60]	@ (8008ba8 <xPortStartScheduler+0x100>)
 8008b6a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b6e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b70:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba8 <xPortStartScheduler+0x100>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba8 <xPortStartScheduler+0x100>)
 8008b76:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b7a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b7c:	f000 f8be 	bl	8008cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b80:	4b0a      	ldr	r3, [pc, #40]	@ (8008bac <xPortStartScheduler+0x104>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b86:	f7ff ff7f 	bl	8008a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b8a:	f7fe ff55 	bl	8007a38 <vTaskSwitchContext>
	prvTaskExitError();
 8008b8e:	f7ff ff35 	bl	80089fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	e000e400 	.word	0xe000e400
 8008ba0:	2000120c 	.word	0x2000120c
 8008ba4:	20001210 	.word	0x20001210
 8008ba8:	e000ed20 	.word	0xe000ed20
 8008bac:	2000000c 	.word	0x2000000c

08008bb0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	607b      	str	r3, [r7, #4]
}
 8008bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bca:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <vPortEnterCritical+0x58>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8008c08 <vPortEnterCritical+0x58>)
 8008bd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c08 <vPortEnterCritical+0x58>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d110      	bne.n	8008bfe <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8008c0c <vPortEnterCritical+0x5c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00b      	beq.n	8008bfe <vPortEnterCritical+0x4e>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	603b      	str	r3, [r7, #0]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <vPortEnterCritical+0x4a>
	}
}
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr
 8008c08:	2000000c 	.word	0x2000000c
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c16:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <vPortExitCritical+0x50>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <vPortExitCritical+0x26>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	e7fd      	b.n	8008c32 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c36:	4b0a      	ldr	r3, [pc, #40]	@ (8008c60 <vPortExitCritical+0x50>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	4a08      	ldr	r2, [pc, #32]	@ (8008c60 <vPortExitCritical+0x50>)
 8008c3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c40:	4b07      	ldr	r3, [pc, #28]	@ (8008c60 <vPortExitCritical+0x50>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <vPortExitCritical+0x44>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	f383 8811 	msr	BASEPRI, r3
}
 8008c52:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	2000000c 	.word	0x2000000c
	...

08008c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c70:	f3ef 8009 	mrs	r0, PSP
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <pxCurrentTCBConst>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c80:	6010      	str	r0, [r2, #0]
 8008c82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c86:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c8a:	f380 8811 	msr	BASEPRI, r0
 8008c8e:	f7fe fed3 	bl	8007a38 <vTaskSwitchContext>
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f380 8811 	msr	BASEPRI, r0
 8008c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ca6:	f380 8809 	msr	PSP, r0
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	4770      	bx	lr

08008cb0 <pxCurrentTCBConst>:
 8008cb0:	20000be0 	.word	0x20000be0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cd2:	f7fe fdf7 	bl	80078c4 <xTaskIncrementTick>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cdc:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <xPortSysTickHandler+0x40>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f383 8811 	msr	BASEPRI, r3
}
 8008cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d00:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <vPortSetupTimerInterrupt+0x30>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d06:	4b0a      	ldr	r3, [pc, #40]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0c:	4b09      	ldr	r3, [pc, #36]	@ (8008d34 <vPortSetupTimerInterrupt+0x38>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a09      	ldr	r2, [pc, #36]	@ (8008d38 <vPortSetupTimerInterrupt+0x3c>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	4a08      	ldr	r2, [pc, #32]	@ (8008d3c <vPortSetupTimerInterrupt+0x40>)
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d1e:	4b03      	ldr	r3, [pc, #12]	@ (8008d2c <vPortSetupTimerInterrupt+0x30>)
 8008d20:	2207      	movs	r2, #7
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr
 8008d2c:	e000e010 	.word	0xe000e010
 8008d30:	e000e018 	.word	0xe000e018
 8008d34:	20000000 	.word	0x20000000
 8008d38:	10624dd3 	.word	0x10624dd3
 8008d3c:	e000e014 	.word	0xe000e014

08008d40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d46:	f3ef 8305 	mrs	r3, IPSR
 8008d4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b0f      	cmp	r3, #15
 8008d50:	d915      	bls.n	8008d7e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d52:	4a17      	ldr	r2, [pc, #92]	@ (8008db0 <vPortValidateInterruptPriority+0x70>)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d5c:	4b15      	ldr	r3, [pc, #84]	@ (8008db4 <vPortValidateInterruptPriority+0x74>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	7afa      	ldrb	r2, [r7, #11]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d20b      	bcs.n	8008d7e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	607b      	str	r3, [r7, #4]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008db8 <vPortValidateInterruptPriority+0x78>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d86:	4b0d      	ldr	r3, [pc, #52]	@ (8008dbc <vPortValidateInterruptPriority+0x7c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d90b      	bls.n	8008da6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	603b      	str	r3, [r7, #0]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vPortValidateInterruptPriority+0x62>
	}
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr
 8008db0:	e000e3f0 	.word	0xe000e3f0
 8008db4:	2000120c 	.word	0x2000120c
 8008db8:	e000ed0c 	.word	0xe000ed0c
 8008dbc:	20001210 	.word	0x20001210

08008dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08a      	sub	sp, #40	@ 0x28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dcc:	f7fe fcae 	bl	800772c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dd0:	4b5c      	ldr	r3, [pc, #368]	@ (8008f44 <pvPortMalloc+0x184>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dd8:	f000 f924 	bl	8009024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8008f48 <pvPortMalloc+0x188>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4013      	ands	r3, r2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f040 8095 	bne.w	8008f14 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01e      	beq.n	8008e2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008df0:	2208      	movs	r2, #8
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4413      	add	r3, r2
 8008df6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d015      	beq.n	8008e2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f023 0307 	bic.w	r3, r3, #7
 8008e08:	3308      	adds	r3, #8
 8008e0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <pvPortMalloc+0x6e>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	617b      	str	r3, [r7, #20]
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d06f      	beq.n	8008f14 <pvPortMalloc+0x154>
 8008e34:	4b45      	ldr	r3, [pc, #276]	@ (8008f4c <pvPortMalloc+0x18c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d86a      	bhi.n	8008f14 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e3e:	4b44      	ldr	r3, [pc, #272]	@ (8008f50 <pvPortMalloc+0x190>)
 8008e40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e42:	4b43      	ldr	r3, [pc, #268]	@ (8008f50 <pvPortMalloc+0x190>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e48:	e004      	b.n	8008e54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d903      	bls.n	8008e66 <pvPortMalloc+0xa6>
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f1      	bne.n	8008e4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e66:	4b37      	ldr	r3, [pc, #220]	@ (8008f44 <pvPortMalloc+0x184>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d051      	beq.n	8008f14 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2208      	movs	r2, #8
 8008e76:	4413      	add	r3, r2
 8008e78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	1ad2      	subs	r2, r2, r3
 8008e8a:	2308      	movs	r3, #8
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d920      	bls.n	8008ed4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4413      	add	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <pvPortMalloc+0xfc>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	613b      	str	r3, [r7, #16]
}
 8008eb6:	bf00      	nop
 8008eb8:	bf00      	nop
 8008eba:	e7fd      	b.n	8008eb8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	1ad2      	subs	r2, r2, r3
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ece:	69b8      	ldr	r0, [r7, #24]
 8008ed0:	f000 f90a 	bl	80090e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8008f4c <pvPortMalloc+0x18c>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <pvPortMalloc+0x18c>)
 8008ee0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f4c <pvPortMalloc+0x18c>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8008f54 <pvPortMalloc+0x194>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d203      	bcs.n	8008ef6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008eee:	4b17      	ldr	r3, [pc, #92]	@ (8008f4c <pvPortMalloc+0x18c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a18      	ldr	r2, [pc, #96]	@ (8008f54 <pvPortMalloc+0x194>)
 8008ef4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	4b13      	ldr	r3, [pc, #76]	@ (8008f48 <pvPortMalloc+0x188>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	431a      	orrs	r2, r3
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f0a:	4b13      	ldr	r3, [pc, #76]	@ (8008f58 <pvPortMalloc+0x198>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	4a11      	ldr	r2, [pc, #68]	@ (8008f58 <pvPortMalloc+0x198>)
 8008f12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f14:	f7fe fc18 	bl	8007748 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00b      	beq.n	8008f3a <pvPortMalloc+0x17a>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	60fb      	str	r3, [r7, #12]
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop
 8008f38:	e7fd      	b.n	8008f36 <pvPortMalloc+0x176>
	return pvReturn;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3728      	adds	r7, #40	@ 0x28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	2000221c 	.word	0x2000221c
 8008f48:	20002230 	.word	0x20002230
 8008f4c:	20002220 	.word	0x20002220
 8008f50:	20002214 	.word	0x20002214
 8008f54:	20002224 	.word	0x20002224
 8008f58:	20002228 	.word	0x20002228

08008f5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d04f      	beq.n	800900e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f6e:	2308      	movs	r3, #8
 8008f70:	425b      	negs	r3, r3
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	4413      	add	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	4b25      	ldr	r3, [pc, #148]	@ (8009018 <vPortFree+0xbc>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4013      	ands	r3, r2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10b      	bne.n	8008fa2 <vPortFree+0x46>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	60fb      	str	r3, [r7, #12]
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	e7fd      	b.n	8008f9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <vPortFree+0x66>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	60bb      	str	r3, [r7, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	4b14      	ldr	r3, [pc, #80]	@ (8009018 <vPortFree+0xbc>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01e      	beq.n	800900e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d11a      	bne.n	800900e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8009018 <vPortFree+0xbc>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	401a      	ands	r2, r3
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fe8:	f7fe fba0 	bl	800772c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <vPortFree+0xc0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	4a09      	ldr	r2, [pc, #36]	@ (800901c <vPortFree+0xc0>)
 8008ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ffa:	6938      	ldr	r0, [r7, #16]
 8008ffc:	f000 f874 	bl	80090e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009000:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <vPortFree+0xc4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	4a06      	ldr	r2, [pc, #24]	@ (8009020 <vPortFree+0xc4>)
 8009008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800900a:	f7fe fb9d 	bl	8007748 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800900e:	bf00      	nop
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20002230 	.word	0x20002230
 800901c:	20002220 	.word	0x20002220
 8009020:	2000222c 	.word	0x2000222c

08009024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800902a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800902e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009030:	4b27      	ldr	r3, [pc, #156]	@ (80090d0 <prvHeapInit+0xac>)
 8009032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00c      	beq.n	8009058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3307      	adds	r3, #7
 8009042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0307 	bic.w	r3, r3, #7
 800904a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	4a1f      	ldr	r2, [pc, #124]	@ (80090d0 <prvHeapInit+0xac>)
 8009054:	4413      	add	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800905c:	4a1d      	ldr	r2, [pc, #116]	@ (80090d4 <prvHeapInit+0xb0>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009062:	4b1c      	ldr	r3, [pc, #112]	@ (80090d4 <prvHeapInit+0xb0>)
 8009064:	2200      	movs	r2, #0
 8009066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	4413      	add	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009070:	2208      	movs	r2, #8
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	1a9b      	subs	r3, r3, r2
 8009076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f023 0307 	bic.w	r3, r3, #7
 800907e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4a15      	ldr	r2, [pc, #84]	@ (80090d8 <prvHeapInit+0xb4>)
 8009084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009086:	4b14      	ldr	r3, [pc, #80]	@ (80090d8 <prvHeapInit+0xb4>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800908e:	4b12      	ldr	r3, [pc, #72]	@ (80090d8 <prvHeapInit+0xb4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090a4:	4b0c      	ldr	r3, [pc, #48]	@ (80090d8 <prvHeapInit+0xb4>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	4a0a      	ldr	r2, [pc, #40]	@ (80090dc <prvHeapInit+0xb8>)
 80090b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4a09      	ldr	r2, [pc, #36]	@ (80090e0 <prvHeapInit+0xbc>)
 80090ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090bc:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <prvHeapInit+0xc0>)
 80090be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090c2:	601a      	str	r2, [r3, #0]
}
 80090c4:	bf00      	nop
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20001214 	.word	0x20001214
 80090d4:	20002214 	.word	0x20002214
 80090d8:	2000221c 	.word	0x2000221c
 80090dc:	20002224 	.word	0x20002224
 80090e0:	20002220 	.word	0x20002220
 80090e4:	20002230 	.word	0x20002230

080090e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090f0:	4b27      	ldr	r3, [pc, #156]	@ (8009190 <prvInsertBlockIntoFreeList+0xa8>)
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	e002      	b.n	80090fc <prvInsertBlockIntoFreeList+0x14>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	429a      	cmp	r2, r3
 8009104:	d8f7      	bhi.n	80090f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	4413      	add	r3, r2
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	429a      	cmp	r2, r3
 8009116:	d108      	bne.n	800912a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	441a      	add	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	441a      	add	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d118      	bne.n	8009170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b14      	ldr	r3, [pc, #80]	@ (8009194 <prvInsertBlockIntoFreeList+0xac>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d00d      	beq.n	8009166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	441a      	add	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	e008      	b.n	8009178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009166:	4b0b      	ldr	r3, [pc, #44]	@ (8009194 <prvInsertBlockIntoFreeList+0xac>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	e003      	b.n	8009178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	429a      	cmp	r2, r3
 800917e:	d002      	beq.n	8009186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009186:	bf00      	nop
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	bc80      	pop	{r7}
 800918e:	4770      	bx	lr
 8009190:	20002214 	.word	0x20002214
 8009194:	2000221c 	.word	0x2000221c

08009198 <map>:
#include "servo.h"

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	69b9      	ldr	r1, [r7, #24]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	1a8a      	subs	r2, r1, r2
 80091b2:	fb03 f202 	mul.w	r2, r3, r2
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	1acb      	subs	r3, r1, r3
 80091bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	4413      	add	r3, r2
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr
	...

080091d0 <Servo_Write>:

void Servo_Write(TIM_HandleTypeDef *htim, uint16_t channel, uint8_t angle){
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af02      	add	r7, sp, #8
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	807b      	strh	r3, [r7, #2]
 80091dc:	4613      	mov	r3, r2
 80091de:	707b      	strb	r3, [r7, #1]
	uint16_t ccr = map(angle, 0, 180, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
 80091e0:	7878      	ldrb	r0, [r7, #1]
 80091e2:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80091ec:	22b4      	movs	r2, #180	@ 0xb4
 80091ee:	2100      	movs	r1, #0
 80091f0:	f7ff ffd2 	bl	8009198 <map>
 80091f4:	4603      	mov	r3, r0
 80091f6:	81fb      	strh	r3, [r7, #14]
	switch (channel) {
 80091f8:	887b      	ldrh	r3, [r7, #2]
 80091fa:	2b0c      	cmp	r3, #12
 80091fc:	d830      	bhi.n	8009260 <Servo_Write+0x90>
 80091fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009204 <Servo_Write+0x34>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009239 	.word	0x08009239
 8009208:	08009261 	.word	0x08009261
 800920c:	08009261 	.word	0x08009261
 8009210:	08009261 	.word	0x08009261
 8009214:	08009243 	.word	0x08009243
 8009218:	08009261 	.word	0x08009261
 800921c:	08009261 	.word	0x08009261
 8009220:	08009261 	.word	0x08009261
 8009224:	0800924d 	.word	0x0800924d
 8009228:	08009261 	.word	0x08009261
 800922c:	08009261 	.word	0x08009261
 8009230:	08009261 	.word	0x08009261
 8009234:	08009257 	.word	0x08009257
		case TIM_CHANNEL_1:
			htim -> Instance -> CCR1 = ccr;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	89fa      	ldrh	r2, [r7, #14]
 800923e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8009240:	e00f      	b.n	8009262 <Servo_Write+0x92>
		case TIM_CHANNEL_2:
			htim -> Instance -> CCR2 = ccr;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	89fa      	ldrh	r2, [r7, #14]
 8009248:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800924a:	e00a      	b.n	8009262 <Servo_Write+0x92>
		case TIM_CHANNEL_3:
			htim -> Instance -> CCR3 = ccr;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	89fa      	ldrh	r2, [r7, #14]
 8009252:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8009254:	e005      	b.n	8009262 <Servo_Write+0x92>
		case TIM_CHANNEL_4:
			htim -> Instance -> CCR4 = ccr;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	89fa      	ldrh	r2, [r7, #14]
 800925c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800925e:	e000      	b.n	8009262 <Servo_Write+0x92>
		default:
			break;
 8009260:	bf00      	nop
	}
}
 8009262:	bf00      	nop
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop

0800926c <atoi>:
 800926c:	220a      	movs	r2, #10
 800926e:	2100      	movs	r1, #0
 8009270:	f000 b87c 	b.w	800936c <strtol>

08009274 <_strtol_l.constprop.0>:
 8009274:	2b24      	cmp	r3, #36	@ 0x24
 8009276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927a:	4686      	mov	lr, r0
 800927c:	4690      	mov	r8, r2
 800927e:	d801      	bhi.n	8009284 <_strtol_l.constprop.0+0x10>
 8009280:	2b01      	cmp	r3, #1
 8009282:	d106      	bne.n	8009292 <_strtol_l.constprop.0+0x1e>
 8009284:	f001 fa00 	bl	800a688 <__errno>
 8009288:	2316      	movs	r3, #22
 800928a:	6003      	str	r3, [r0, #0]
 800928c:	2000      	movs	r0, #0
 800928e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009292:	460d      	mov	r5, r1
 8009294:	4833      	ldr	r0, [pc, #204]	@ (8009364 <_strtol_l.constprop.0+0xf0>)
 8009296:	462a      	mov	r2, r5
 8009298:	f815 4b01 	ldrb.w	r4, [r5], #1
 800929c:	5d06      	ldrb	r6, [r0, r4]
 800929e:	f016 0608 	ands.w	r6, r6, #8
 80092a2:	d1f8      	bne.n	8009296 <_strtol_l.constprop.0+0x22>
 80092a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80092a6:	d12d      	bne.n	8009304 <_strtol_l.constprop.0+0x90>
 80092a8:	2601      	movs	r6, #1
 80092aa:	782c      	ldrb	r4, [r5, #0]
 80092ac:	1c95      	adds	r5, r2, #2
 80092ae:	f033 0210 	bics.w	r2, r3, #16
 80092b2:	d109      	bne.n	80092c8 <_strtol_l.constprop.0+0x54>
 80092b4:	2c30      	cmp	r4, #48	@ 0x30
 80092b6:	d12a      	bne.n	800930e <_strtol_l.constprop.0+0x9a>
 80092b8:	782a      	ldrb	r2, [r5, #0]
 80092ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80092be:	2a58      	cmp	r2, #88	@ 0x58
 80092c0:	d125      	bne.n	800930e <_strtol_l.constprop.0+0x9a>
 80092c2:	2310      	movs	r3, #16
 80092c4:	786c      	ldrb	r4, [r5, #1]
 80092c6:	3502      	adds	r5, #2
 80092c8:	2200      	movs	r2, #0
 80092ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80092ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80092d2:	fbbc f9f3 	udiv	r9, ip, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80092dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80092e0:	2f09      	cmp	r7, #9
 80092e2:	d81b      	bhi.n	800931c <_strtol_l.constprop.0+0xa8>
 80092e4:	463c      	mov	r4, r7
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	dd27      	ble.n	800933a <_strtol_l.constprop.0+0xc6>
 80092ea:	1c57      	adds	r7, r2, #1
 80092ec:	d007      	beq.n	80092fe <_strtol_l.constprop.0+0x8a>
 80092ee:	4581      	cmp	r9, r0
 80092f0:	d320      	bcc.n	8009334 <_strtol_l.constprop.0+0xc0>
 80092f2:	d101      	bne.n	80092f8 <_strtol_l.constprop.0+0x84>
 80092f4:	45a2      	cmp	sl, r4
 80092f6:	db1d      	blt.n	8009334 <_strtol_l.constprop.0+0xc0>
 80092f8:	2201      	movs	r2, #1
 80092fa:	fb00 4003 	mla	r0, r0, r3, r4
 80092fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009302:	e7eb      	b.n	80092dc <_strtol_l.constprop.0+0x68>
 8009304:	2c2b      	cmp	r4, #43	@ 0x2b
 8009306:	bf04      	itt	eq
 8009308:	782c      	ldrbeq	r4, [r5, #0]
 800930a:	1c95      	addeq	r5, r2, #2
 800930c:	e7cf      	b.n	80092ae <_strtol_l.constprop.0+0x3a>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1da      	bne.n	80092c8 <_strtol_l.constprop.0+0x54>
 8009312:	2c30      	cmp	r4, #48	@ 0x30
 8009314:	bf0c      	ite	eq
 8009316:	2308      	moveq	r3, #8
 8009318:	230a      	movne	r3, #10
 800931a:	e7d5      	b.n	80092c8 <_strtol_l.constprop.0+0x54>
 800931c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009320:	2f19      	cmp	r7, #25
 8009322:	d801      	bhi.n	8009328 <_strtol_l.constprop.0+0xb4>
 8009324:	3c37      	subs	r4, #55	@ 0x37
 8009326:	e7de      	b.n	80092e6 <_strtol_l.constprop.0+0x72>
 8009328:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800932c:	2f19      	cmp	r7, #25
 800932e:	d804      	bhi.n	800933a <_strtol_l.constprop.0+0xc6>
 8009330:	3c57      	subs	r4, #87	@ 0x57
 8009332:	e7d8      	b.n	80092e6 <_strtol_l.constprop.0+0x72>
 8009334:	f04f 32ff 	mov.w	r2, #4294967295
 8009338:	e7e1      	b.n	80092fe <_strtol_l.constprop.0+0x8a>
 800933a:	1c53      	adds	r3, r2, #1
 800933c:	d108      	bne.n	8009350 <_strtol_l.constprop.0+0xdc>
 800933e:	2322      	movs	r3, #34	@ 0x22
 8009340:	4660      	mov	r0, ip
 8009342:	f8ce 3000 	str.w	r3, [lr]
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	d0a0      	beq.n	800928e <_strtol_l.constprop.0+0x1a>
 800934c:	1e69      	subs	r1, r5, #1
 800934e:	e006      	b.n	800935e <_strtol_l.constprop.0+0xea>
 8009350:	b106      	cbz	r6, 8009354 <_strtol_l.constprop.0+0xe0>
 8009352:	4240      	negs	r0, r0
 8009354:	f1b8 0f00 	cmp.w	r8, #0
 8009358:	d099      	beq.n	800928e <_strtol_l.constprop.0+0x1a>
 800935a:	2a00      	cmp	r2, #0
 800935c:	d1f6      	bne.n	800934c <_strtol_l.constprop.0+0xd8>
 800935e:	f8c8 1000 	str.w	r1, [r8]
 8009362:	e794      	b.n	800928e <_strtol_l.constprop.0+0x1a>
 8009364:	0800dd87 	.word	0x0800dd87

08009368 <_strtol_r>:
 8009368:	f7ff bf84 	b.w	8009274 <_strtol_l.constprop.0>

0800936c <strtol>:
 800936c:	4613      	mov	r3, r2
 800936e:	460a      	mov	r2, r1
 8009370:	4601      	mov	r1, r0
 8009372:	4802      	ldr	r0, [pc, #8]	@ (800937c <strtol+0x10>)
 8009374:	6800      	ldr	r0, [r0, #0]
 8009376:	f7ff bf7d 	b.w	8009274 <_strtol_l.constprop.0>
 800937a:	bf00      	nop
 800937c:	2000001c 	.word	0x2000001c

08009380 <__cvt>:
 8009380:	2b00      	cmp	r3, #0
 8009382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009386:	461d      	mov	r5, r3
 8009388:	bfbb      	ittet	lt
 800938a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800938e:	461d      	movlt	r5, r3
 8009390:	2300      	movge	r3, #0
 8009392:	232d      	movlt	r3, #45	@ 0x2d
 8009394:	b088      	sub	sp, #32
 8009396:	4614      	mov	r4, r2
 8009398:	bfb8      	it	lt
 800939a:	4614      	movlt	r4, r2
 800939c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800939e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80093a0:	7013      	strb	r3, [r2, #0]
 80093a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80093a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80093a8:	f023 0820 	bic.w	r8, r3, #32
 80093ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093b0:	d005      	beq.n	80093be <__cvt+0x3e>
 80093b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80093b6:	d100      	bne.n	80093ba <__cvt+0x3a>
 80093b8:	3601      	adds	r6, #1
 80093ba:	2302      	movs	r3, #2
 80093bc:	e000      	b.n	80093c0 <__cvt+0x40>
 80093be:	2303      	movs	r3, #3
 80093c0:	aa07      	add	r2, sp, #28
 80093c2:	9204      	str	r2, [sp, #16]
 80093c4:	aa06      	add	r2, sp, #24
 80093c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80093ca:	e9cd 3600 	strd	r3, r6, [sp]
 80093ce:	4622      	mov	r2, r4
 80093d0:	462b      	mov	r3, r5
 80093d2:	f001 fa31 	bl	800a838 <_dtoa_r>
 80093d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80093da:	4607      	mov	r7, r0
 80093dc:	d119      	bne.n	8009412 <__cvt+0x92>
 80093de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093e0:	07db      	lsls	r3, r3, #31
 80093e2:	d50e      	bpl.n	8009402 <__cvt+0x82>
 80093e4:	eb00 0906 	add.w	r9, r0, r6
 80093e8:	2200      	movs	r2, #0
 80093ea:	2300      	movs	r3, #0
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f7 fada 	bl	80009a8 <__aeabi_dcmpeq>
 80093f4:	b108      	cbz	r0, 80093fa <__cvt+0x7a>
 80093f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80093fa:	2230      	movs	r2, #48	@ 0x30
 80093fc:	9b07      	ldr	r3, [sp, #28]
 80093fe:	454b      	cmp	r3, r9
 8009400:	d31e      	bcc.n	8009440 <__cvt+0xc0>
 8009402:	4638      	mov	r0, r7
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009408:	1bdb      	subs	r3, r3, r7
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	b008      	add	sp, #32
 800940e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009412:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009416:	eb00 0906 	add.w	r9, r0, r6
 800941a:	d1e5      	bne.n	80093e8 <__cvt+0x68>
 800941c:	7803      	ldrb	r3, [r0, #0]
 800941e:	2b30      	cmp	r3, #48	@ 0x30
 8009420:	d10a      	bne.n	8009438 <__cvt+0xb8>
 8009422:	2200      	movs	r2, #0
 8009424:	2300      	movs	r3, #0
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f7 fabd 	bl	80009a8 <__aeabi_dcmpeq>
 800942e:	b918      	cbnz	r0, 8009438 <__cvt+0xb8>
 8009430:	f1c6 0601 	rsb	r6, r6, #1
 8009434:	f8ca 6000 	str.w	r6, [sl]
 8009438:	f8da 3000 	ldr.w	r3, [sl]
 800943c:	4499      	add	r9, r3
 800943e:	e7d3      	b.n	80093e8 <__cvt+0x68>
 8009440:	1c59      	adds	r1, r3, #1
 8009442:	9107      	str	r1, [sp, #28]
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e7d9      	b.n	80093fc <__cvt+0x7c>

08009448 <__exponent>:
 8009448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800944a:	2900      	cmp	r1, #0
 800944c:	bfb6      	itet	lt
 800944e:	232d      	movlt	r3, #45	@ 0x2d
 8009450:	232b      	movge	r3, #43	@ 0x2b
 8009452:	4249      	neglt	r1, r1
 8009454:	2909      	cmp	r1, #9
 8009456:	7002      	strb	r2, [r0, #0]
 8009458:	7043      	strb	r3, [r0, #1]
 800945a:	dd29      	ble.n	80094b0 <__exponent+0x68>
 800945c:	f10d 0307 	add.w	r3, sp, #7
 8009460:	461d      	mov	r5, r3
 8009462:	270a      	movs	r7, #10
 8009464:	fbb1 f6f7 	udiv	r6, r1, r7
 8009468:	461a      	mov	r2, r3
 800946a:	fb07 1416 	mls	r4, r7, r6, r1
 800946e:	3430      	adds	r4, #48	@ 0x30
 8009470:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009474:	460c      	mov	r4, r1
 8009476:	2c63      	cmp	r4, #99	@ 0x63
 8009478:	4631      	mov	r1, r6
 800947a:	f103 33ff 	add.w	r3, r3, #4294967295
 800947e:	dcf1      	bgt.n	8009464 <__exponent+0x1c>
 8009480:	3130      	adds	r1, #48	@ 0x30
 8009482:	1e94      	subs	r4, r2, #2
 8009484:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009488:	4623      	mov	r3, r4
 800948a:	1c41      	adds	r1, r0, #1
 800948c:	42ab      	cmp	r3, r5
 800948e:	d30a      	bcc.n	80094a6 <__exponent+0x5e>
 8009490:	f10d 0309 	add.w	r3, sp, #9
 8009494:	1a9b      	subs	r3, r3, r2
 8009496:	42ac      	cmp	r4, r5
 8009498:	bf88      	it	hi
 800949a:	2300      	movhi	r3, #0
 800949c:	3302      	adds	r3, #2
 800949e:	4403      	add	r3, r0
 80094a0:	1a18      	subs	r0, r3, r0
 80094a2:	b003      	add	sp, #12
 80094a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80094aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80094ae:	e7ed      	b.n	800948c <__exponent+0x44>
 80094b0:	2330      	movs	r3, #48	@ 0x30
 80094b2:	3130      	adds	r1, #48	@ 0x30
 80094b4:	7083      	strb	r3, [r0, #2]
 80094b6:	70c1      	strb	r1, [r0, #3]
 80094b8:	1d03      	adds	r3, r0, #4
 80094ba:	e7f1      	b.n	80094a0 <__exponent+0x58>

080094bc <_printf_float>:
 80094bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	b091      	sub	sp, #68	@ 0x44
 80094c2:	460c      	mov	r4, r1
 80094c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80094c8:	4616      	mov	r6, r2
 80094ca:	461f      	mov	r7, r3
 80094cc:	4605      	mov	r5, r0
 80094ce:	f001 f83b 	bl	800a548 <_localeconv_r>
 80094d2:	6803      	ldr	r3, [r0, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	9308      	str	r3, [sp, #32]
 80094d8:	f7f6 fe3a 	bl	8000150 <strlen>
 80094dc:	2300      	movs	r3, #0
 80094de:	930e      	str	r3, [sp, #56]	@ 0x38
 80094e0:	f8d8 3000 	ldr.w	r3, [r8]
 80094e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80094e6:	3307      	adds	r3, #7
 80094e8:	f023 0307 	bic.w	r3, r3, #7
 80094ec:	f103 0208 	add.w	r2, r3, #8
 80094f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094f4:	f8d4 b000 	ldr.w	fp, [r4]
 80094f8:	f8c8 2000 	str.w	r2, [r8]
 80094fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009500:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009504:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009506:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800950a:	f04f 32ff 	mov.w	r2, #4294967295
 800950e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009512:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009516:	4b9c      	ldr	r3, [pc, #624]	@ (8009788 <_printf_float+0x2cc>)
 8009518:	f7f7 fa78 	bl	8000a0c <__aeabi_dcmpun>
 800951c:	bb70      	cbnz	r0, 800957c <_printf_float+0xc0>
 800951e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009522:	f04f 32ff 	mov.w	r2, #4294967295
 8009526:	4b98      	ldr	r3, [pc, #608]	@ (8009788 <_printf_float+0x2cc>)
 8009528:	f7f7 fa52 	bl	80009d0 <__aeabi_dcmple>
 800952c:	bb30      	cbnz	r0, 800957c <_printf_float+0xc0>
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f7f7 fa41 	bl	80009bc <__aeabi_dcmplt>
 800953a:	b110      	cbz	r0, 8009542 <_printf_float+0x86>
 800953c:	232d      	movs	r3, #45	@ 0x2d
 800953e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009542:	4a92      	ldr	r2, [pc, #584]	@ (800978c <_printf_float+0x2d0>)
 8009544:	4b92      	ldr	r3, [pc, #584]	@ (8009790 <_printf_float+0x2d4>)
 8009546:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800954a:	bf94      	ite	ls
 800954c:	4690      	movls	r8, r2
 800954e:	4698      	movhi	r8, r3
 8009550:	2303      	movs	r3, #3
 8009552:	f04f 0900 	mov.w	r9, #0
 8009556:	6123      	str	r3, [r4, #16]
 8009558:	f02b 0304 	bic.w	r3, fp, #4
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	4633      	mov	r3, r6
 8009560:	4621      	mov	r1, r4
 8009562:	4628      	mov	r0, r5
 8009564:	9700      	str	r7, [sp, #0]
 8009566:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009568:	f000 f9d4 	bl	8009914 <_printf_common>
 800956c:	3001      	adds	r0, #1
 800956e:	f040 8090 	bne.w	8009692 <_printf_float+0x1d6>
 8009572:	f04f 30ff 	mov.w	r0, #4294967295
 8009576:	b011      	add	sp, #68	@ 0x44
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	4642      	mov	r2, r8
 800957e:	464b      	mov	r3, r9
 8009580:	4640      	mov	r0, r8
 8009582:	4649      	mov	r1, r9
 8009584:	f7f7 fa42 	bl	8000a0c <__aeabi_dcmpun>
 8009588:	b148      	cbz	r0, 800959e <_printf_float+0xe2>
 800958a:	464b      	mov	r3, r9
 800958c:	2b00      	cmp	r3, #0
 800958e:	bfb8      	it	lt
 8009590:	232d      	movlt	r3, #45	@ 0x2d
 8009592:	4a80      	ldr	r2, [pc, #512]	@ (8009794 <_printf_float+0x2d8>)
 8009594:	bfb8      	it	lt
 8009596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800959a:	4b7f      	ldr	r3, [pc, #508]	@ (8009798 <_printf_float+0x2dc>)
 800959c:	e7d3      	b.n	8009546 <_printf_float+0x8a>
 800959e:	6863      	ldr	r3, [r4, #4]
 80095a0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	d13f      	bne.n	8009628 <_printf_float+0x16c>
 80095a8:	2306      	movs	r3, #6
 80095aa:	6063      	str	r3, [r4, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	9206      	str	r2, [sp, #24]
 80095b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80095b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80095bc:	aa0d      	add	r2, sp, #52	@ 0x34
 80095be:	9203      	str	r2, [sp, #12]
 80095c0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80095c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	4642      	mov	r2, r8
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	4628      	mov	r0, r5
 80095d0:	464b      	mov	r3, r9
 80095d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80095d4:	f7ff fed4 	bl	8009380 <__cvt>
 80095d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095da:	4680      	mov	r8, r0
 80095dc:	2947      	cmp	r1, #71	@ 0x47
 80095de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80095e0:	d128      	bne.n	8009634 <_printf_float+0x178>
 80095e2:	1cc8      	adds	r0, r1, #3
 80095e4:	db02      	blt.n	80095ec <_printf_float+0x130>
 80095e6:	6863      	ldr	r3, [r4, #4]
 80095e8:	4299      	cmp	r1, r3
 80095ea:	dd40      	ble.n	800966e <_printf_float+0x1b2>
 80095ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80095f0:	fa5f fa8a 	uxtb.w	sl, sl
 80095f4:	4652      	mov	r2, sl
 80095f6:	3901      	subs	r1, #1
 80095f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80095fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80095fe:	f7ff ff23 	bl	8009448 <__exponent>
 8009602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009604:	4681      	mov	r9, r0
 8009606:	1813      	adds	r3, r2, r0
 8009608:	2a01      	cmp	r2, #1
 800960a:	6123      	str	r3, [r4, #16]
 800960c:	dc02      	bgt.n	8009614 <_printf_float+0x158>
 800960e:	6822      	ldr	r2, [r4, #0]
 8009610:	07d2      	lsls	r2, r2, #31
 8009612:	d501      	bpl.n	8009618 <_printf_float+0x15c>
 8009614:	3301      	adds	r3, #1
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800961c:	2b00      	cmp	r3, #0
 800961e:	d09e      	beq.n	800955e <_printf_float+0xa2>
 8009620:	232d      	movs	r3, #45	@ 0x2d
 8009622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009626:	e79a      	b.n	800955e <_printf_float+0xa2>
 8009628:	2947      	cmp	r1, #71	@ 0x47
 800962a:	d1bf      	bne.n	80095ac <_printf_float+0xf0>
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1bd      	bne.n	80095ac <_printf_float+0xf0>
 8009630:	2301      	movs	r3, #1
 8009632:	e7ba      	b.n	80095aa <_printf_float+0xee>
 8009634:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009638:	d9dc      	bls.n	80095f4 <_printf_float+0x138>
 800963a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800963e:	d118      	bne.n	8009672 <_printf_float+0x1b6>
 8009640:	2900      	cmp	r1, #0
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	dd0b      	ble.n	800965e <_printf_float+0x1a2>
 8009646:	6121      	str	r1, [r4, #16]
 8009648:	b913      	cbnz	r3, 8009650 <_printf_float+0x194>
 800964a:	6822      	ldr	r2, [r4, #0]
 800964c:	07d0      	lsls	r0, r2, #31
 800964e:	d502      	bpl.n	8009656 <_printf_float+0x19a>
 8009650:	3301      	adds	r3, #1
 8009652:	440b      	add	r3, r1
 8009654:	6123      	str	r3, [r4, #16]
 8009656:	f04f 0900 	mov.w	r9, #0
 800965a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800965c:	e7dc      	b.n	8009618 <_printf_float+0x15c>
 800965e:	b913      	cbnz	r3, 8009666 <_printf_float+0x1aa>
 8009660:	6822      	ldr	r2, [r4, #0]
 8009662:	07d2      	lsls	r2, r2, #31
 8009664:	d501      	bpl.n	800966a <_printf_float+0x1ae>
 8009666:	3302      	adds	r3, #2
 8009668:	e7f4      	b.n	8009654 <_printf_float+0x198>
 800966a:	2301      	movs	r3, #1
 800966c:	e7f2      	b.n	8009654 <_printf_float+0x198>
 800966e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009674:	4299      	cmp	r1, r3
 8009676:	db05      	blt.n	8009684 <_printf_float+0x1c8>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	6121      	str	r1, [r4, #16]
 800967c:	07d8      	lsls	r0, r3, #31
 800967e:	d5ea      	bpl.n	8009656 <_printf_float+0x19a>
 8009680:	1c4b      	adds	r3, r1, #1
 8009682:	e7e7      	b.n	8009654 <_printf_float+0x198>
 8009684:	2900      	cmp	r1, #0
 8009686:	bfcc      	ite	gt
 8009688:	2201      	movgt	r2, #1
 800968a:	f1c1 0202 	rsble	r2, r1, #2
 800968e:	4413      	add	r3, r2
 8009690:	e7e0      	b.n	8009654 <_printf_float+0x198>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	055a      	lsls	r2, r3, #21
 8009696:	d407      	bmi.n	80096a8 <_printf_float+0x1ec>
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	4642      	mov	r2, r8
 800969c:	4631      	mov	r1, r6
 800969e:	4628      	mov	r0, r5
 80096a0:	47b8      	blx	r7
 80096a2:	3001      	adds	r0, #1
 80096a4:	d12b      	bne.n	80096fe <_printf_float+0x242>
 80096a6:	e764      	b.n	8009572 <_printf_float+0xb6>
 80096a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096ac:	f240 80dc 	bls.w	8009868 <_printf_float+0x3ac>
 80096b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096b4:	2200      	movs	r2, #0
 80096b6:	2300      	movs	r3, #0
 80096b8:	f7f7 f976 	bl	80009a8 <__aeabi_dcmpeq>
 80096bc:	2800      	cmp	r0, #0
 80096be:	d033      	beq.n	8009728 <_printf_float+0x26c>
 80096c0:	2301      	movs	r3, #1
 80096c2:	4631      	mov	r1, r6
 80096c4:	4628      	mov	r0, r5
 80096c6:	4a35      	ldr	r2, [pc, #212]	@ (800979c <_printf_float+0x2e0>)
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	f43f af51 	beq.w	8009572 <_printf_float+0xb6>
 80096d0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80096d4:	4543      	cmp	r3, r8
 80096d6:	db02      	blt.n	80096de <_printf_float+0x222>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	07d8      	lsls	r0, r3, #31
 80096dc:	d50f      	bpl.n	80096fe <_printf_float+0x242>
 80096de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	f43f af42 	beq.w	8009572 <_printf_float+0xb6>
 80096ee:	f04f 0900 	mov.w	r9, #0
 80096f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80096f6:	f104 0a1a 	add.w	sl, r4, #26
 80096fa:	45c8      	cmp	r8, r9
 80096fc:	dc09      	bgt.n	8009712 <_printf_float+0x256>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	079b      	lsls	r3, r3, #30
 8009702:	f100 8102 	bmi.w	800990a <_printf_float+0x44e>
 8009706:	68e0      	ldr	r0, [r4, #12]
 8009708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800970a:	4298      	cmp	r0, r3
 800970c:	bfb8      	it	lt
 800970e:	4618      	movlt	r0, r3
 8009710:	e731      	b.n	8009576 <_printf_float+0xba>
 8009712:	2301      	movs	r3, #1
 8009714:	4652      	mov	r2, sl
 8009716:	4631      	mov	r1, r6
 8009718:	4628      	mov	r0, r5
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	f43f af28 	beq.w	8009572 <_printf_float+0xb6>
 8009722:	f109 0901 	add.w	r9, r9, #1
 8009726:	e7e8      	b.n	80096fa <_printf_float+0x23e>
 8009728:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800972a:	2b00      	cmp	r3, #0
 800972c:	dc38      	bgt.n	80097a0 <_printf_float+0x2e4>
 800972e:	2301      	movs	r3, #1
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	4a19      	ldr	r2, [pc, #100]	@ (800979c <_printf_float+0x2e0>)
 8009736:	47b8      	blx	r7
 8009738:	3001      	adds	r0, #1
 800973a:	f43f af1a 	beq.w	8009572 <_printf_float+0xb6>
 800973e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009742:	ea59 0303 	orrs.w	r3, r9, r3
 8009746:	d102      	bne.n	800974e <_printf_float+0x292>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	07d9      	lsls	r1, r3, #31
 800974c:	d5d7      	bpl.n	80096fe <_printf_float+0x242>
 800974e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009752:	4631      	mov	r1, r6
 8009754:	4628      	mov	r0, r5
 8009756:	47b8      	blx	r7
 8009758:	3001      	adds	r0, #1
 800975a:	f43f af0a 	beq.w	8009572 <_printf_float+0xb6>
 800975e:	f04f 0a00 	mov.w	sl, #0
 8009762:	f104 0b1a 	add.w	fp, r4, #26
 8009766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009768:	425b      	negs	r3, r3
 800976a:	4553      	cmp	r3, sl
 800976c:	dc01      	bgt.n	8009772 <_printf_float+0x2b6>
 800976e:	464b      	mov	r3, r9
 8009770:	e793      	b.n	800969a <_printf_float+0x1de>
 8009772:	2301      	movs	r3, #1
 8009774:	465a      	mov	r2, fp
 8009776:	4631      	mov	r1, r6
 8009778:	4628      	mov	r0, r5
 800977a:	47b8      	blx	r7
 800977c:	3001      	adds	r0, #1
 800977e:	f43f aef8 	beq.w	8009572 <_printf_float+0xb6>
 8009782:	f10a 0a01 	add.w	sl, sl, #1
 8009786:	e7ee      	b.n	8009766 <_printf_float+0x2aa>
 8009788:	7fefffff 	.word	0x7fefffff
 800978c:	0800de87 	.word	0x0800de87
 8009790:	0800de8b 	.word	0x0800de8b
 8009794:	0800de8f 	.word	0x0800de8f
 8009798:	0800de93 	.word	0x0800de93
 800979c:	0800de97 	.word	0x0800de97
 80097a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097a2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80097a6:	4553      	cmp	r3, sl
 80097a8:	bfa8      	it	ge
 80097aa:	4653      	movge	r3, sl
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	4699      	mov	r9, r3
 80097b0:	dc36      	bgt.n	8009820 <_printf_float+0x364>
 80097b2:	f04f 0b00 	mov.w	fp, #0
 80097b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097ba:	f104 021a 	add.w	r2, r4, #26
 80097be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c2:	eba3 0309 	sub.w	r3, r3, r9
 80097c6:	455b      	cmp	r3, fp
 80097c8:	dc31      	bgt.n	800982e <_printf_float+0x372>
 80097ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097cc:	459a      	cmp	sl, r3
 80097ce:	dc3a      	bgt.n	8009846 <_printf_float+0x38a>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	07da      	lsls	r2, r3, #31
 80097d4:	d437      	bmi.n	8009846 <_printf_float+0x38a>
 80097d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097d8:	ebaa 0903 	sub.w	r9, sl, r3
 80097dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097de:	ebaa 0303 	sub.w	r3, sl, r3
 80097e2:	4599      	cmp	r9, r3
 80097e4:	bfa8      	it	ge
 80097e6:	4699      	movge	r9, r3
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	dc33      	bgt.n	8009856 <_printf_float+0x39a>
 80097ee:	f04f 0800 	mov.w	r8, #0
 80097f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097f6:	f104 0b1a 	add.w	fp, r4, #26
 80097fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097fc:	ebaa 0303 	sub.w	r3, sl, r3
 8009800:	eba3 0309 	sub.w	r3, r3, r9
 8009804:	4543      	cmp	r3, r8
 8009806:	f77f af7a 	ble.w	80096fe <_printf_float+0x242>
 800980a:	2301      	movs	r3, #1
 800980c:	465a      	mov	r2, fp
 800980e:	4631      	mov	r1, r6
 8009810:	4628      	mov	r0, r5
 8009812:	47b8      	blx	r7
 8009814:	3001      	adds	r0, #1
 8009816:	f43f aeac 	beq.w	8009572 <_printf_float+0xb6>
 800981a:	f108 0801 	add.w	r8, r8, #1
 800981e:	e7ec      	b.n	80097fa <_printf_float+0x33e>
 8009820:	4642      	mov	r2, r8
 8009822:	4631      	mov	r1, r6
 8009824:	4628      	mov	r0, r5
 8009826:	47b8      	blx	r7
 8009828:	3001      	adds	r0, #1
 800982a:	d1c2      	bne.n	80097b2 <_printf_float+0x2f6>
 800982c:	e6a1      	b.n	8009572 <_printf_float+0xb6>
 800982e:	2301      	movs	r3, #1
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	920a      	str	r2, [sp, #40]	@ 0x28
 8009836:	47b8      	blx	r7
 8009838:	3001      	adds	r0, #1
 800983a:	f43f ae9a 	beq.w	8009572 <_printf_float+0xb6>
 800983e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009840:	f10b 0b01 	add.w	fp, fp, #1
 8009844:	e7bb      	b.n	80097be <_printf_float+0x302>
 8009846:	4631      	mov	r1, r6
 8009848:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	d1c0      	bne.n	80097d6 <_printf_float+0x31a>
 8009854:	e68d      	b.n	8009572 <_printf_float+0xb6>
 8009856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009858:	464b      	mov	r3, r9
 800985a:	4631      	mov	r1, r6
 800985c:	4628      	mov	r0, r5
 800985e:	4442      	add	r2, r8
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	d1c3      	bne.n	80097ee <_printf_float+0x332>
 8009866:	e684      	b.n	8009572 <_printf_float+0xb6>
 8009868:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800986c:	f1ba 0f01 	cmp.w	sl, #1
 8009870:	dc01      	bgt.n	8009876 <_printf_float+0x3ba>
 8009872:	07db      	lsls	r3, r3, #31
 8009874:	d536      	bpl.n	80098e4 <_printf_float+0x428>
 8009876:	2301      	movs	r3, #1
 8009878:	4642      	mov	r2, r8
 800987a:	4631      	mov	r1, r6
 800987c:	4628      	mov	r0, r5
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	f43f ae76 	beq.w	8009572 <_printf_float+0xb6>
 8009886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f ae6e 	beq.w	8009572 <_printf_float+0xb6>
 8009896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098a2:	f7f7 f881 	bl	80009a8 <__aeabi_dcmpeq>
 80098a6:	b9c0      	cbnz	r0, 80098da <_printf_float+0x41e>
 80098a8:	4653      	mov	r3, sl
 80098aa:	f108 0201 	add.w	r2, r8, #1
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b8      	blx	r7
 80098b4:	3001      	adds	r0, #1
 80098b6:	d10c      	bne.n	80098d2 <_printf_float+0x416>
 80098b8:	e65b      	b.n	8009572 <_printf_float+0xb6>
 80098ba:	2301      	movs	r3, #1
 80098bc:	465a      	mov	r2, fp
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f ae54 	beq.w	8009572 <_printf_float+0xb6>
 80098ca:	f108 0801 	add.w	r8, r8, #1
 80098ce:	45d0      	cmp	r8, sl
 80098d0:	dbf3      	blt.n	80098ba <_printf_float+0x3fe>
 80098d2:	464b      	mov	r3, r9
 80098d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80098d8:	e6e0      	b.n	800969c <_printf_float+0x1e0>
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	f104 0b1a 	add.w	fp, r4, #26
 80098e2:	e7f4      	b.n	80098ce <_printf_float+0x412>
 80098e4:	2301      	movs	r3, #1
 80098e6:	4642      	mov	r2, r8
 80098e8:	e7e1      	b.n	80098ae <_printf_float+0x3f2>
 80098ea:	2301      	movs	r3, #1
 80098ec:	464a      	mov	r2, r9
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b8      	blx	r7
 80098f4:	3001      	adds	r0, #1
 80098f6:	f43f ae3c 	beq.w	8009572 <_printf_float+0xb6>
 80098fa:	f108 0801 	add.w	r8, r8, #1
 80098fe:	68e3      	ldr	r3, [r4, #12]
 8009900:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009902:	1a5b      	subs	r3, r3, r1
 8009904:	4543      	cmp	r3, r8
 8009906:	dcf0      	bgt.n	80098ea <_printf_float+0x42e>
 8009908:	e6fd      	b.n	8009706 <_printf_float+0x24a>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	f104 0919 	add.w	r9, r4, #25
 8009912:	e7f4      	b.n	80098fe <_printf_float+0x442>

08009914 <_printf_common>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	4616      	mov	r6, r2
 800991a:	4698      	mov	r8, r3
 800991c:	688a      	ldr	r2, [r1, #8]
 800991e:	690b      	ldr	r3, [r1, #16]
 8009920:	4607      	mov	r7, r0
 8009922:	4293      	cmp	r3, r2
 8009924:	bfb8      	it	lt
 8009926:	4613      	movlt	r3, r2
 8009928:	6033      	str	r3, [r6, #0]
 800992a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800992e:	460c      	mov	r4, r1
 8009930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009934:	b10a      	cbz	r2, 800993a <_printf_common+0x26>
 8009936:	3301      	adds	r3, #1
 8009938:	6033      	str	r3, [r6, #0]
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	0699      	lsls	r1, r3, #26
 800993e:	bf42      	ittt	mi
 8009940:	6833      	ldrmi	r3, [r6, #0]
 8009942:	3302      	addmi	r3, #2
 8009944:	6033      	strmi	r3, [r6, #0]
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	f015 0506 	ands.w	r5, r5, #6
 800994c:	d106      	bne.n	800995c <_printf_common+0x48>
 800994e:	f104 0a19 	add.w	sl, r4, #25
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	6832      	ldr	r2, [r6, #0]
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	42ab      	cmp	r3, r5
 800995a:	dc2b      	bgt.n	80099b4 <_printf_common+0xa0>
 800995c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009960:	6822      	ldr	r2, [r4, #0]
 8009962:	3b00      	subs	r3, #0
 8009964:	bf18      	it	ne
 8009966:	2301      	movne	r3, #1
 8009968:	0692      	lsls	r2, r2, #26
 800996a:	d430      	bmi.n	80099ce <_printf_common+0xba>
 800996c:	4641      	mov	r1, r8
 800996e:	4638      	mov	r0, r7
 8009970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009974:	47c8      	blx	r9
 8009976:	3001      	adds	r0, #1
 8009978:	d023      	beq.n	80099c2 <_printf_common+0xae>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	6922      	ldr	r2, [r4, #16]
 800997e:	f003 0306 	and.w	r3, r3, #6
 8009982:	2b04      	cmp	r3, #4
 8009984:	bf14      	ite	ne
 8009986:	2500      	movne	r5, #0
 8009988:	6833      	ldreq	r3, [r6, #0]
 800998a:	f04f 0600 	mov.w	r6, #0
 800998e:	bf08      	it	eq
 8009990:	68e5      	ldreq	r5, [r4, #12]
 8009992:	f104 041a 	add.w	r4, r4, #26
 8009996:	bf08      	it	eq
 8009998:	1aed      	subeq	r5, r5, r3
 800999a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800999e:	bf08      	it	eq
 80099a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099a4:	4293      	cmp	r3, r2
 80099a6:	bfc4      	itt	gt
 80099a8:	1a9b      	subgt	r3, r3, r2
 80099aa:	18ed      	addgt	r5, r5, r3
 80099ac:	42b5      	cmp	r5, r6
 80099ae:	d11a      	bne.n	80099e6 <_printf_common+0xd2>
 80099b0:	2000      	movs	r0, #0
 80099b2:	e008      	b.n	80099c6 <_printf_common+0xb2>
 80099b4:	2301      	movs	r3, #1
 80099b6:	4652      	mov	r2, sl
 80099b8:	4641      	mov	r1, r8
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c8      	blx	r9
 80099be:	3001      	adds	r0, #1
 80099c0:	d103      	bne.n	80099ca <_printf_common+0xb6>
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ca:	3501      	adds	r5, #1
 80099cc:	e7c1      	b.n	8009952 <_printf_common+0x3e>
 80099ce:	2030      	movs	r0, #48	@ 0x30
 80099d0:	18e1      	adds	r1, r4, r3
 80099d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099dc:	4422      	add	r2, r4
 80099de:	3302      	adds	r3, #2
 80099e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099e4:	e7c2      	b.n	800996c <_printf_common+0x58>
 80099e6:	2301      	movs	r3, #1
 80099e8:	4622      	mov	r2, r4
 80099ea:	4641      	mov	r1, r8
 80099ec:	4638      	mov	r0, r7
 80099ee:	47c8      	blx	r9
 80099f0:	3001      	adds	r0, #1
 80099f2:	d0e6      	beq.n	80099c2 <_printf_common+0xae>
 80099f4:	3601      	adds	r6, #1
 80099f6:	e7d9      	b.n	80099ac <_printf_common+0x98>

080099f8 <_printf_i>:
 80099f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099fc:	7e0f      	ldrb	r7, [r1, #24]
 80099fe:	4691      	mov	r9, r2
 8009a00:	2f78      	cmp	r7, #120	@ 0x78
 8009a02:	4680      	mov	r8, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	469a      	mov	sl, r3
 8009a08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a0e:	d807      	bhi.n	8009a20 <_printf_i+0x28>
 8009a10:	2f62      	cmp	r7, #98	@ 0x62
 8009a12:	d80a      	bhi.n	8009a2a <_printf_i+0x32>
 8009a14:	2f00      	cmp	r7, #0
 8009a16:	f000 80d3 	beq.w	8009bc0 <_printf_i+0x1c8>
 8009a1a:	2f58      	cmp	r7, #88	@ 0x58
 8009a1c:	f000 80ba 	beq.w	8009b94 <_printf_i+0x19c>
 8009a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a28:	e03a      	b.n	8009aa0 <_printf_i+0xa8>
 8009a2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a2e:	2b15      	cmp	r3, #21
 8009a30:	d8f6      	bhi.n	8009a20 <_printf_i+0x28>
 8009a32:	a101      	add	r1, pc, #4	@ (adr r1, 8009a38 <_printf_i+0x40>)
 8009a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a38:	08009a91 	.word	0x08009a91
 8009a3c:	08009aa5 	.word	0x08009aa5
 8009a40:	08009a21 	.word	0x08009a21
 8009a44:	08009a21 	.word	0x08009a21
 8009a48:	08009a21 	.word	0x08009a21
 8009a4c:	08009a21 	.word	0x08009a21
 8009a50:	08009aa5 	.word	0x08009aa5
 8009a54:	08009a21 	.word	0x08009a21
 8009a58:	08009a21 	.word	0x08009a21
 8009a5c:	08009a21 	.word	0x08009a21
 8009a60:	08009a21 	.word	0x08009a21
 8009a64:	08009ba7 	.word	0x08009ba7
 8009a68:	08009acf 	.word	0x08009acf
 8009a6c:	08009b61 	.word	0x08009b61
 8009a70:	08009a21 	.word	0x08009a21
 8009a74:	08009a21 	.word	0x08009a21
 8009a78:	08009bc9 	.word	0x08009bc9
 8009a7c:	08009a21 	.word	0x08009a21
 8009a80:	08009acf 	.word	0x08009acf
 8009a84:	08009a21 	.word	0x08009a21
 8009a88:	08009a21 	.word	0x08009a21
 8009a8c:	08009b69 	.word	0x08009b69
 8009a90:	6833      	ldr	r3, [r6, #0]
 8009a92:	1d1a      	adds	r2, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6032      	str	r2, [r6, #0]
 8009a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e09e      	b.n	8009be2 <_printf_i+0x1ea>
 8009aa4:	6833      	ldr	r3, [r6, #0]
 8009aa6:	6820      	ldr	r0, [r4, #0]
 8009aa8:	1d19      	adds	r1, r3, #4
 8009aaa:	6031      	str	r1, [r6, #0]
 8009aac:	0606      	lsls	r6, r0, #24
 8009aae:	d501      	bpl.n	8009ab4 <_printf_i+0xbc>
 8009ab0:	681d      	ldr	r5, [r3, #0]
 8009ab2:	e003      	b.n	8009abc <_printf_i+0xc4>
 8009ab4:	0645      	lsls	r5, r0, #25
 8009ab6:	d5fb      	bpl.n	8009ab0 <_printf_i+0xb8>
 8009ab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	da03      	bge.n	8009ac8 <_printf_i+0xd0>
 8009ac0:	232d      	movs	r3, #45	@ 0x2d
 8009ac2:	426d      	negs	r5, r5
 8009ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ac8:	230a      	movs	r3, #10
 8009aca:	4859      	ldr	r0, [pc, #356]	@ (8009c30 <_printf_i+0x238>)
 8009acc:	e011      	b.n	8009af2 <_printf_i+0xfa>
 8009ace:	6821      	ldr	r1, [r4, #0]
 8009ad0:	6833      	ldr	r3, [r6, #0]
 8009ad2:	0608      	lsls	r0, r1, #24
 8009ad4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ad8:	d402      	bmi.n	8009ae0 <_printf_i+0xe8>
 8009ada:	0649      	lsls	r1, r1, #25
 8009adc:	bf48      	it	mi
 8009ade:	b2ad      	uxthmi	r5, r5
 8009ae0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ae2:	6033      	str	r3, [r6, #0]
 8009ae4:	bf14      	ite	ne
 8009ae6:	230a      	movne	r3, #10
 8009ae8:	2308      	moveq	r3, #8
 8009aea:	4851      	ldr	r0, [pc, #324]	@ (8009c30 <_printf_i+0x238>)
 8009aec:	2100      	movs	r1, #0
 8009aee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009af2:	6866      	ldr	r6, [r4, #4]
 8009af4:	2e00      	cmp	r6, #0
 8009af6:	bfa8      	it	ge
 8009af8:	6821      	ldrge	r1, [r4, #0]
 8009afa:	60a6      	str	r6, [r4, #8]
 8009afc:	bfa4      	itt	ge
 8009afe:	f021 0104 	bicge.w	r1, r1, #4
 8009b02:	6021      	strge	r1, [r4, #0]
 8009b04:	b90d      	cbnz	r5, 8009b0a <_printf_i+0x112>
 8009b06:	2e00      	cmp	r6, #0
 8009b08:	d04b      	beq.n	8009ba2 <_printf_i+0x1aa>
 8009b0a:	4616      	mov	r6, r2
 8009b0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b10:	fb03 5711 	mls	r7, r3, r1, r5
 8009b14:	5dc7      	ldrb	r7, [r0, r7]
 8009b16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b1a:	462f      	mov	r7, r5
 8009b1c:	42bb      	cmp	r3, r7
 8009b1e:	460d      	mov	r5, r1
 8009b20:	d9f4      	bls.n	8009b0c <_printf_i+0x114>
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d10b      	bne.n	8009b3e <_printf_i+0x146>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	07df      	lsls	r7, r3, #31
 8009b2a:	d508      	bpl.n	8009b3e <_printf_i+0x146>
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	6861      	ldr	r1, [r4, #4]
 8009b30:	4299      	cmp	r1, r3
 8009b32:	bfde      	ittt	le
 8009b34:	2330      	movle	r3, #48	@ 0x30
 8009b36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b3e:	1b92      	subs	r2, r2, r6
 8009b40:	6122      	str	r2, [r4, #16]
 8009b42:	464b      	mov	r3, r9
 8009b44:	4621      	mov	r1, r4
 8009b46:	4640      	mov	r0, r8
 8009b48:	f8cd a000 	str.w	sl, [sp]
 8009b4c:	aa03      	add	r2, sp, #12
 8009b4e:	f7ff fee1 	bl	8009914 <_printf_common>
 8009b52:	3001      	adds	r0, #1
 8009b54:	d14a      	bne.n	8009bec <_printf_i+0x1f4>
 8009b56:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5a:	b004      	add	sp, #16
 8009b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	f043 0320 	orr.w	r3, r3, #32
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	2778      	movs	r7, #120	@ 0x78
 8009b6a:	4832      	ldr	r0, [pc, #200]	@ (8009c34 <_printf_i+0x23c>)
 8009b6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	6831      	ldr	r1, [r6, #0]
 8009b74:	061f      	lsls	r7, r3, #24
 8009b76:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b7a:	d402      	bmi.n	8009b82 <_printf_i+0x18a>
 8009b7c:	065f      	lsls	r7, r3, #25
 8009b7e:	bf48      	it	mi
 8009b80:	b2ad      	uxthmi	r5, r5
 8009b82:	6031      	str	r1, [r6, #0]
 8009b84:	07d9      	lsls	r1, r3, #31
 8009b86:	bf44      	itt	mi
 8009b88:	f043 0320 	orrmi.w	r3, r3, #32
 8009b8c:	6023      	strmi	r3, [r4, #0]
 8009b8e:	b11d      	cbz	r5, 8009b98 <_printf_i+0x1a0>
 8009b90:	2310      	movs	r3, #16
 8009b92:	e7ab      	b.n	8009aec <_printf_i+0xf4>
 8009b94:	4826      	ldr	r0, [pc, #152]	@ (8009c30 <_printf_i+0x238>)
 8009b96:	e7e9      	b.n	8009b6c <_printf_i+0x174>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	f023 0320 	bic.w	r3, r3, #32
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	e7f6      	b.n	8009b90 <_printf_i+0x198>
 8009ba2:	4616      	mov	r6, r2
 8009ba4:	e7bd      	b.n	8009b22 <_printf_i+0x12a>
 8009ba6:	6833      	ldr	r3, [r6, #0]
 8009ba8:	6825      	ldr	r5, [r4, #0]
 8009baa:	1d18      	adds	r0, r3, #4
 8009bac:	6961      	ldr	r1, [r4, #20]
 8009bae:	6030      	str	r0, [r6, #0]
 8009bb0:	062e      	lsls	r6, r5, #24
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	d501      	bpl.n	8009bba <_printf_i+0x1c2>
 8009bb6:	6019      	str	r1, [r3, #0]
 8009bb8:	e002      	b.n	8009bc0 <_printf_i+0x1c8>
 8009bba:	0668      	lsls	r0, r5, #25
 8009bbc:	d5fb      	bpl.n	8009bb6 <_printf_i+0x1be>
 8009bbe:	8019      	strh	r1, [r3, #0]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4616      	mov	r6, r2
 8009bc4:	6123      	str	r3, [r4, #16]
 8009bc6:	e7bc      	b.n	8009b42 <_printf_i+0x14a>
 8009bc8:	6833      	ldr	r3, [r6, #0]
 8009bca:	2100      	movs	r1, #0
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	6032      	str	r2, [r6, #0]
 8009bd0:	681e      	ldr	r6, [r3, #0]
 8009bd2:	6862      	ldr	r2, [r4, #4]
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f000 fd84 	bl	800a6e2 <memchr>
 8009bda:	b108      	cbz	r0, 8009be0 <_printf_i+0x1e8>
 8009bdc:	1b80      	subs	r0, r0, r6
 8009bde:	6060      	str	r0, [r4, #4]
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	2300      	movs	r3, #0
 8009be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bea:	e7aa      	b.n	8009b42 <_printf_i+0x14a>
 8009bec:	4632      	mov	r2, r6
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	47d0      	blx	sl
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d0ad      	beq.n	8009b56 <_printf_i+0x15e>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	079b      	lsls	r3, r3, #30
 8009bfe:	d413      	bmi.n	8009c28 <_printf_i+0x230>
 8009c00:	68e0      	ldr	r0, [r4, #12]
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	4298      	cmp	r0, r3
 8009c06:	bfb8      	it	lt
 8009c08:	4618      	movlt	r0, r3
 8009c0a:	e7a6      	b.n	8009b5a <_printf_i+0x162>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4632      	mov	r2, r6
 8009c10:	4649      	mov	r1, r9
 8009c12:	4640      	mov	r0, r8
 8009c14:	47d0      	blx	sl
 8009c16:	3001      	adds	r0, #1
 8009c18:	d09d      	beq.n	8009b56 <_printf_i+0x15e>
 8009c1a:	3501      	adds	r5, #1
 8009c1c:	68e3      	ldr	r3, [r4, #12]
 8009c1e:	9903      	ldr	r1, [sp, #12]
 8009c20:	1a5b      	subs	r3, r3, r1
 8009c22:	42ab      	cmp	r3, r5
 8009c24:	dcf2      	bgt.n	8009c0c <_printf_i+0x214>
 8009c26:	e7eb      	b.n	8009c00 <_printf_i+0x208>
 8009c28:	2500      	movs	r5, #0
 8009c2a:	f104 0619 	add.w	r6, r4, #25
 8009c2e:	e7f5      	b.n	8009c1c <_printf_i+0x224>
 8009c30:	0800de99 	.word	0x0800de99
 8009c34:	0800deaa 	.word	0x0800deaa

08009c38 <_scanf_float>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	b087      	sub	sp, #28
 8009c3e:	9303      	str	r3, [sp, #12]
 8009c40:	688b      	ldr	r3, [r1, #8]
 8009c42:	4617      	mov	r7, r2
 8009c44:	1e5a      	subs	r2, r3, #1
 8009c46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009c4a:	bf82      	ittt	hi
 8009c4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009c50:	eb03 0b05 	addhi.w	fp, r3, r5
 8009c54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009c58:	460a      	mov	r2, r1
 8009c5a:	f04f 0500 	mov.w	r5, #0
 8009c5e:	bf88      	it	hi
 8009c60:	608b      	strhi	r3, [r1, #8]
 8009c62:	680b      	ldr	r3, [r1, #0]
 8009c64:	4680      	mov	r8, r0
 8009c66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009c6a:	f842 3b1c 	str.w	r3, [r2], #28
 8009c6e:	460c      	mov	r4, r1
 8009c70:	bf98      	it	ls
 8009c72:	f04f 0b00 	movls.w	fp, #0
 8009c76:	4616      	mov	r6, r2
 8009c78:	46aa      	mov	sl, r5
 8009c7a:	46a9      	mov	r9, r5
 8009c7c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c80:	9201      	str	r2, [sp, #4]
 8009c82:	9502      	str	r5, [sp, #8]
 8009c84:	68a2      	ldr	r2, [r4, #8]
 8009c86:	b152      	cbz	r2, 8009c9e <_scanf_float+0x66>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b4e      	cmp	r3, #78	@ 0x4e
 8009c8e:	d865      	bhi.n	8009d5c <_scanf_float+0x124>
 8009c90:	2b40      	cmp	r3, #64	@ 0x40
 8009c92:	d83d      	bhi.n	8009d10 <_scanf_float+0xd8>
 8009c94:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009c98:	b2c8      	uxtb	r0, r1
 8009c9a:	280e      	cmp	r0, #14
 8009c9c:	d93b      	bls.n	8009d16 <_scanf_float+0xde>
 8009c9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ca2:	d003      	beq.n	8009cac <_scanf_float+0x74>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cb0:	f1ba 0f01 	cmp.w	sl, #1
 8009cb4:	f200 8118 	bhi.w	8009ee8 <_scanf_float+0x2b0>
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	f200 8109 	bhi.w	8009ed2 <_scanf_float+0x29a>
 8009cc0:	2001      	movs	r0, #1
 8009cc2:	b007      	add	sp, #28
 8009cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009ccc:	2a0d      	cmp	r2, #13
 8009cce:	d8e6      	bhi.n	8009c9e <_scanf_float+0x66>
 8009cd0:	a101      	add	r1, pc, #4	@ (adr r1, 8009cd8 <_scanf_float+0xa0>)
 8009cd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009e1f 	.word	0x08009e1f
 8009cdc:	08009c9f 	.word	0x08009c9f
 8009ce0:	08009c9f 	.word	0x08009c9f
 8009ce4:	08009c9f 	.word	0x08009c9f
 8009ce8:	08009e7f 	.word	0x08009e7f
 8009cec:	08009e57 	.word	0x08009e57
 8009cf0:	08009c9f 	.word	0x08009c9f
 8009cf4:	08009c9f 	.word	0x08009c9f
 8009cf8:	08009e2d 	.word	0x08009e2d
 8009cfc:	08009c9f 	.word	0x08009c9f
 8009d00:	08009c9f 	.word	0x08009c9f
 8009d04:	08009c9f 	.word	0x08009c9f
 8009d08:	08009c9f 	.word	0x08009c9f
 8009d0c:	08009de5 	.word	0x08009de5
 8009d10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009d14:	e7da      	b.n	8009ccc <_scanf_float+0x94>
 8009d16:	290e      	cmp	r1, #14
 8009d18:	d8c1      	bhi.n	8009c9e <_scanf_float+0x66>
 8009d1a:	a001      	add	r0, pc, #4	@ (adr r0, 8009d20 <_scanf_float+0xe8>)
 8009d1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d20:	08009dd5 	.word	0x08009dd5
 8009d24:	08009c9f 	.word	0x08009c9f
 8009d28:	08009dd5 	.word	0x08009dd5
 8009d2c:	08009e6b 	.word	0x08009e6b
 8009d30:	08009c9f 	.word	0x08009c9f
 8009d34:	08009d7d 	.word	0x08009d7d
 8009d38:	08009dbb 	.word	0x08009dbb
 8009d3c:	08009dbb 	.word	0x08009dbb
 8009d40:	08009dbb 	.word	0x08009dbb
 8009d44:	08009dbb 	.word	0x08009dbb
 8009d48:	08009dbb 	.word	0x08009dbb
 8009d4c:	08009dbb 	.word	0x08009dbb
 8009d50:	08009dbb 	.word	0x08009dbb
 8009d54:	08009dbb 	.word	0x08009dbb
 8009d58:	08009dbb 	.word	0x08009dbb
 8009d5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009d5e:	d809      	bhi.n	8009d74 <_scanf_float+0x13c>
 8009d60:	2b60      	cmp	r3, #96	@ 0x60
 8009d62:	d8b1      	bhi.n	8009cc8 <_scanf_float+0x90>
 8009d64:	2b54      	cmp	r3, #84	@ 0x54
 8009d66:	d07b      	beq.n	8009e60 <_scanf_float+0x228>
 8009d68:	2b59      	cmp	r3, #89	@ 0x59
 8009d6a:	d198      	bne.n	8009c9e <_scanf_float+0x66>
 8009d6c:	2d07      	cmp	r5, #7
 8009d6e:	d196      	bne.n	8009c9e <_scanf_float+0x66>
 8009d70:	2508      	movs	r5, #8
 8009d72:	e02c      	b.n	8009dce <_scanf_float+0x196>
 8009d74:	2b74      	cmp	r3, #116	@ 0x74
 8009d76:	d073      	beq.n	8009e60 <_scanf_float+0x228>
 8009d78:	2b79      	cmp	r3, #121	@ 0x79
 8009d7a:	e7f6      	b.n	8009d6a <_scanf_float+0x132>
 8009d7c:	6821      	ldr	r1, [r4, #0]
 8009d7e:	05c8      	lsls	r0, r1, #23
 8009d80:	d51b      	bpl.n	8009dba <_scanf_float+0x182>
 8009d82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009d86:	6021      	str	r1, [r4, #0]
 8009d88:	f109 0901 	add.w	r9, r9, #1
 8009d8c:	f1bb 0f00 	cmp.w	fp, #0
 8009d90:	d003      	beq.n	8009d9a <_scanf_float+0x162>
 8009d92:	3201      	adds	r2, #1
 8009d94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d98:	60a2      	str	r2, [r4, #8]
 8009d9a:	68a3      	ldr	r3, [r4, #8]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	60a3      	str	r3, [r4, #8]
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	3301      	adds	r3, #1
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	607b      	str	r3, [r7, #4]
 8009dae:	f340 8087 	ble.w	8009ec0 <_scanf_float+0x288>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	e764      	b.n	8009c84 <_scanf_float+0x4c>
 8009dba:	eb1a 0105 	adds.w	r1, sl, r5
 8009dbe:	f47f af6e 	bne.w	8009c9e <_scanf_float+0x66>
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	468a      	mov	sl, r1
 8009dc6:	6822      	ldr	r2, [r4, #0]
 8009dc8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	f806 3b01 	strb.w	r3, [r6], #1
 8009dd2:	e7e2      	b.n	8009d9a <_scanf_float+0x162>
 8009dd4:	6822      	ldr	r2, [r4, #0]
 8009dd6:	0610      	lsls	r0, r2, #24
 8009dd8:	f57f af61 	bpl.w	8009c9e <_scanf_float+0x66>
 8009ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009de0:	6022      	str	r2, [r4, #0]
 8009de2:	e7f4      	b.n	8009dce <_scanf_float+0x196>
 8009de4:	f1ba 0f00 	cmp.w	sl, #0
 8009de8:	d10e      	bne.n	8009e08 <_scanf_float+0x1d0>
 8009dea:	f1b9 0f00 	cmp.w	r9, #0
 8009dee:	d10e      	bne.n	8009e0e <_scanf_float+0x1d6>
 8009df0:	6822      	ldr	r2, [r4, #0]
 8009df2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009df6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009dfa:	d108      	bne.n	8009e0e <_scanf_float+0x1d6>
 8009dfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e00:	f04f 0a01 	mov.w	sl, #1
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	e7e2      	b.n	8009dce <_scanf_float+0x196>
 8009e08:	f1ba 0f02 	cmp.w	sl, #2
 8009e0c:	d055      	beq.n	8009eba <_scanf_float+0x282>
 8009e0e:	2d01      	cmp	r5, #1
 8009e10:	d002      	beq.n	8009e18 <_scanf_float+0x1e0>
 8009e12:	2d04      	cmp	r5, #4
 8009e14:	f47f af43 	bne.w	8009c9e <_scanf_float+0x66>
 8009e18:	3501      	adds	r5, #1
 8009e1a:	b2ed      	uxtb	r5, r5
 8009e1c:	e7d7      	b.n	8009dce <_scanf_float+0x196>
 8009e1e:	f1ba 0f01 	cmp.w	sl, #1
 8009e22:	f47f af3c 	bne.w	8009c9e <_scanf_float+0x66>
 8009e26:	f04f 0a02 	mov.w	sl, #2
 8009e2a:	e7d0      	b.n	8009dce <_scanf_float+0x196>
 8009e2c:	b97d      	cbnz	r5, 8009e4e <_scanf_float+0x216>
 8009e2e:	f1b9 0f00 	cmp.w	r9, #0
 8009e32:	f47f af37 	bne.w	8009ca4 <_scanf_float+0x6c>
 8009e36:	6822      	ldr	r2, [r4, #0]
 8009e38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009e3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009e40:	f040 8103 	bne.w	800a04a <_scanf_float+0x412>
 8009e44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e48:	2501      	movs	r5, #1
 8009e4a:	6022      	str	r2, [r4, #0]
 8009e4c:	e7bf      	b.n	8009dce <_scanf_float+0x196>
 8009e4e:	2d03      	cmp	r5, #3
 8009e50:	d0e2      	beq.n	8009e18 <_scanf_float+0x1e0>
 8009e52:	2d05      	cmp	r5, #5
 8009e54:	e7de      	b.n	8009e14 <_scanf_float+0x1dc>
 8009e56:	2d02      	cmp	r5, #2
 8009e58:	f47f af21 	bne.w	8009c9e <_scanf_float+0x66>
 8009e5c:	2503      	movs	r5, #3
 8009e5e:	e7b6      	b.n	8009dce <_scanf_float+0x196>
 8009e60:	2d06      	cmp	r5, #6
 8009e62:	f47f af1c 	bne.w	8009c9e <_scanf_float+0x66>
 8009e66:	2507      	movs	r5, #7
 8009e68:	e7b1      	b.n	8009dce <_scanf_float+0x196>
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	0591      	lsls	r1, r2, #22
 8009e6e:	f57f af16 	bpl.w	8009c9e <_scanf_float+0x66>
 8009e72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e7c:	e7a7      	b.n	8009dce <_scanf_float+0x196>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009e84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009e88:	d006      	beq.n	8009e98 <_scanf_float+0x260>
 8009e8a:	0550      	lsls	r0, r2, #21
 8009e8c:	f57f af07 	bpl.w	8009c9e <_scanf_float+0x66>
 8009e90:	f1b9 0f00 	cmp.w	r9, #0
 8009e94:	f000 80d9 	beq.w	800a04a <_scanf_float+0x412>
 8009e98:	0591      	lsls	r1, r2, #22
 8009e9a:	bf58      	it	pl
 8009e9c:	9902      	ldrpl	r1, [sp, #8]
 8009e9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ea2:	bf58      	it	pl
 8009ea4:	eba9 0101 	subpl.w	r1, r9, r1
 8009ea8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009eac:	f04f 0900 	mov.w	r9, #0
 8009eb0:	bf58      	it	pl
 8009eb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009eb6:	6022      	str	r2, [r4, #0]
 8009eb8:	e789      	b.n	8009dce <_scanf_float+0x196>
 8009eba:	f04f 0a03 	mov.w	sl, #3
 8009ebe:	e786      	b.n	8009dce <_scanf_float+0x196>
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ec8:	4798      	blx	r3
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f43f aeda 	beq.w	8009c84 <_scanf_float+0x4c>
 8009ed0:	e6e5      	b.n	8009c9e <_scanf_float+0x66>
 8009ed2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ed6:	463a      	mov	r2, r7
 8009ed8:	4640      	mov	r0, r8
 8009eda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ede:	4798      	blx	r3
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	6123      	str	r3, [r4, #16]
 8009ee6:	e6e7      	b.n	8009cb8 <_scanf_float+0x80>
 8009ee8:	1e6b      	subs	r3, r5, #1
 8009eea:	2b06      	cmp	r3, #6
 8009eec:	d824      	bhi.n	8009f38 <_scanf_float+0x300>
 8009eee:	2d02      	cmp	r5, #2
 8009ef0:	d836      	bhi.n	8009f60 <_scanf_float+0x328>
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	429e      	cmp	r6, r3
 8009ef6:	f67f aee3 	bls.w	8009cc0 <_scanf_float+0x88>
 8009efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009efe:	463a      	mov	r2, r7
 8009f00:	4640      	mov	r0, r8
 8009f02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f06:	4798      	blx	r3
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	6123      	str	r3, [r4, #16]
 8009f0e:	e7f0      	b.n	8009ef2 <_scanf_float+0x2ba>
 8009f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f14:	463a      	mov	r2, r7
 8009f16:	4640      	mov	r0, r8
 8009f18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009f1c:	4798      	blx	r3
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	6123      	str	r3, [r4, #16]
 8009f24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f28:	fa5f fa8a 	uxtb.w	sl, sl
 8009f2c:	f1ba 0f02 	cmp.w	sl, #2
 8009f30:	d1ee      	bne.n	8009f10 <_scanf_float+0x2d8>
 8009f32:	3d03      	subs	r5, #3
 8009f34:	b2ed      	uxtb	r5, r5
 8009f36:	1b76      	subs	r6, r6, r5
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	05da      	lsls	r2, r3, #23
 8009f3c:	d530      	bpl.n	8009fa0 <_scanf_float+0x368>
 8009f3e:	055b      	lsls	r3, r3, #21
 8009f40:	d511      	bpl.n	8009f66 <_scanf_float+0x32e>
 8009f42:	9b01      	ldr	r3, [sp, #4]
 8009f44:	429e      	cmp	r6, r3
 8009f46:	f67f aebb 	bls.w	8009cc0 <_scanf_float+0x88>
 8009f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f4e:	463a      	mov	r2, r7
 8009f50:	4640      	mov	r0, r8
 8009f52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f56:	4798      	blx	r3
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	e7f0      	b.n	8009f42 <_scanf_float+0x30a>
 8009f60:	46aa      	mov	sl, r5
 8009f62:	46b3      	mov	fp, r6
 8009f64:	e7de      	b.n	8009f24 <_scanf_float+0x2ec>
 8009f66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	2965      	cmp	r1, #101	@ 0x65
 8009f6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f72:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f76:	6123      	str	r3, [r4, #16]
 8009f78:	d00c      	beq.n	8009f94 <_scanf_float+0x35c>
 8009f7a:	2945      	cmp	r1, #69	@ 0x45
 8009f7c:	d00a      	beq.n	8009f94 <_scanf_float+0x35c>
 8009f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f82:	463a      	mov	r2, r7
 8009f84:	4640      	mov	r0, r8
 8009f86:	4798      	blx	r3
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	1eb5      	subs	r5, r6, #2
 8009f92:	6123      	str	r3, [r4, #16]
 8009f94:	463a      	mov	r2, r7
 8009f96:	4640      	mov	r0, r8
 8009f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f9c:	4798      	blx	r3
 8009f9e:	462e      	mov	r6, r5
 8009fa0:	6822      	ldr	r2, [r4, #0]
 8009fa2:	f012 0210 	ands.w	r2, r2, #16
 8009fa6:	d001      	beq.n	8009fac <_scanf_float+0x374>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	e68a      	b.n	8009cc2 <_scanf_float+0x8a>
 8009fac:	7032      	strb	r2, [r6, #0]
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fb8:	d11c      	bne.n	8009ff4 <_scanf_float+0x3bc>
 8009fba:	9b02      	ldr	r3, [sp, #8]
 8009fbc:	454b      	cmp	r3, r9
 8009fbe:	eba3 0209 	sub.w	r2, r3, r9
 8009fc2:	d123      	bne.n	800a00c <_scanf_float+0x3d4>
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	9901      	ldr	r1, [sp, #4]
 8009fca:	f002 fd9d 	bl	800cb08 <_strtod_r>
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	6825      	ldr	r5, [r4, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f015 0f02 	tst.w	r5, #2
 8009fd8:	4606      	mov	r6, r0
 8009fda:	460f      	mov	r7, r1
 8009fdc:	f103 0204 	add.w	r2, r3, #4
 8009fe0:	d01f      	beq.n	800a022 <_scanf_float+0x3ea>
 8009fe2:	9903      	ldr	r1, [sp, #12]
 8009fe4:	600a      	str	r2, [r1, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	e9c3 6700 	strd	r6, r7, [r3]
 8009fec:	68e3      	ldr	r3, [r4, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	60e3      	str	r3, [r4, #12]
 8009ff2:	e7d9      	b.n	8009fa8 <_scanf_float+0x370>
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0e4      	beq.n	8009fc4 <_scanf_float+0x38c>
 8009ffa:	9905      	ldr	r1, [sp, #20]
 8009ffc:	230a      	movs	r3, #10
 8009ffe:	4640      	mov	r0, r8
 800a000:	3101      	adds	r1, #1
 800a002:	f7ff f9b1 	bl	8009368 <_strtol_r>
 800a006:	9b04      	ldr	r3, [sp, #16]
 800a008:	9e05      	ldr	r6, [sp, #20]
 800a00a:	1ac2      	subs	r2, r0, r3
 800a00c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a010:	429e      	cmp	r6, r3
 800a012:	bf28      	it	cs
 800a014:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a018:	4630      	mov	r0, r6
 800a01a:	490d      	ldr	r1, [pc, #52]	@ (800a050 <_scanf_float+0x418>)
 800a01c:	f000 f982 	bl	800a324 <siprintf>
 800a020:	e7d0      	b.n	8009fc4 <_scanf_float+0x38c>
 800a022:	076d      	lsls	r5, r5, #29
 800a024:	d4dd      	bmi.n	8009fe2 <_scanf_float+0x3aa>
 800a026:	9d03      	ldr	r5, [sp, #12]
 800a028:	602a      	str	r2, [r5, #0]
 800a02a:	681d      	ldr	r5, [r3, #0]
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	f7f6 fcec 	bl	8000a0c <__aeabi_dcmpun>
 800a034:	b120      	cbz	r0, 800a040 <_scanf_float+0x408>
 800a036:	4807      	ldr	r0, [pc, #28]	@ (800a054 <_scanf_float+0x41c>)
 800a038:	f000 fb70 	bl	800a71c <nanf>
 800a03c:	6028      	str	r0, [r5, #0]
 800a03e:	e7d5      	b.n	8009fec <_scanf_float+0x3b4>
 800a040:	4630      	mov	r0, r6
 800a042:	4639      	mov	r1, r7
 800a044:	f7f6 fd40 	bl	8000ac8 <__aeabi_d2f>
 800a048:	e7f8      	b.n	800a03c <_scanf_float+0x404>
 800a04a:	f04f 0900 	mov.w	r9, #0
 800a04e:	e62d      	b.n	8009cac <_scanf_float+0x74>
 800a050:	0800debb 	.word	0x0800debb
 800a054:	0800e154 	.word	0x0800e154

0800a058 <std>:
 800a058:	2300      	movs	r3, #0
 800a05a:	b510      	push	{r4, lr}
 800a05c:	4604      	mov	r4, r0
 800a05e:	e9c0 3300 	strd	r3, r3, [r0]
 800a062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a066:	6083      	str	r3, [r0, #8]
 800a068:	8181      	strh	r1, [r0, #12]
 800a06a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a06c:	81c2      	strh	r2, [r0, #14]
 800a06e:	6183      	str	r3, [r0, #24]
 800a070:	4619      	mov	r1, r3
 800a072:	2208      	movs	r2, #8
 800a074:	305c      	adds	r0, #92	@ 0x5c
 800a076:	f000 fa4d 	bl	800a514 <memset>
 800a07a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b0 <std+0x58>)
 800a07c:	6224      	str	r4, [r4, #32]
 800a07e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a080:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b4 <std+0x5c>)
 800a082:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a084:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <std+0x60>)
 800a086:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a088:	4b0c      	ldr	r3, [pc, #48]	@ (800a0bc <std+0x64>)
 800a08a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a08c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c0 <std+0x68>)
 800a08e:	429c      	cmp	r4, r3
 800a090:	d006      	beq.n	800a0a0 <std+0x48>
 800a092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a096:	4294      	cmp	r4, r2
 800a098:	d002      	beq.n	800a0a0 <std+0x48>
 800a09a:	33d0      	adds	r3, #208	@ 0xd0
 800a09c:	429c      	cmp	r4, r3
 800a09e:	d105      	bne.n	800a0ac <std+0x54>
 800a0a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a8:	f000 bb18 	b.w	800a6dc <__retarget_lock_init_recursive>
 800a0ac:	bd10      	pop	{r4, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0800a365 	.word	0x0800a365
 800a0b4:	0800a387 	.word	0x0800a387
 800a0b8:	0800a3bf 	.word	0x0800a3bf
 800a0bc:	0800a3e3 	.word	0x0800a3e3
 800a0c0:	20002234 	.word	0x20002234

0800a0c4 <stdio_exit_handler>:
 800a0c4:	4a02      	ldr	r2, [pc, #8]	@ (800a0d0 <stdio_exit_handler+0xc>)
 800a0c6:	4903      	ldr	r1, [pc, #12]	@ (800a0d4 <stdio_exit_handler+0x10>)
 800a0c8:	4803      	ldr	r0, [pc, #12]	@ (800a0d8 <stdio_exit_handler+0x14>)
 800a0ca:	f000 b869 	b.w	800a1a0 <_fwalk_sglue>
 800a0ce:	bf00      	nop
 800a0d0:	20000010 	.word	0x20000010
 800a0d4:	0800d145 	.word	0x0800d145
 800a0d8:	20000020 	.word	0x20000020

0800a0dc <cleanup_stdio>:
 800a0dc:	6841      	ldr	r1, [r0, #4]
 800a0de:	4b0c      	ldr	r3, [pc, #48]	@ (800a110 <cleanup_stdio+0x34>)
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	d001      	beq.n	800a0ec <cleanup_stdio+0x10>
 800a0e8:	f003 f82c 	bl	800d144 <_fflush_r>
 800a0ec:	68a1      	ldr	r1, [r4, #8]
 800a0ee:	4b09      	ldr	r3, [pc, #36]	@ (800a114 <cleanup_stdio+0x38>)
 800a0f0:	4299      	cmp	r1, r3
 800a0f2:	d002      	beq.n	800a0fa <cleanup_stdio+0x1e>
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f003 f825 	bl	800d144 <_fflush_r>
 800a0fa:	68e1      	ldr	r1, [r4, #12]
 800a0fc:	4b06      	ldr	r3, [pc, #24]	@ (800a118 <cleanup_stdio+0x3c>)
 800a0fe:	4299      	cmp	r1, r3
 800a100:	d004      	beq.n	800a10c <cleanup_stdio+0x30>
 800a102:	4620      	mov	r0, r4
 800a104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a108:	f003 b81c 	b.w	800d144 <_fflush_r>
 800a10c:	bd10      	pop	{r4, pc}
 800a10e:	bf00      	nop
 800a110:	20002234 	.word	0x20002234
 800a114:	2000229c 	.word	0x2000229c
 800a118:	20002304 	.word	0x20002304

0800a11c <global_stdio_init.part.0>:
 800a11c:	b510      	push	{r4, lr}
 800a11e:	4b0b      	ldr	r3, [pc, #44]	@ (800a14c <global_stdio_init.part.0+0x30>)
 800a120:	4c0b      	ldr	r4, [pc, #44]	@ (800a150 <global_stdio_init.part.0+0x34>)
 800a122:	4a0c      	ldr	r2, [pc, #48]	@ (800a154 <global_stdio_init.part.0+0x38>)
 800a124:	4620      	mov	r0, r4
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	2104      	movs	r1, #4
 800a12a:	2200      	movs	r2, #0
 800a12c:	f7ff ff94 	bl	800a058 <std>
 800a130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a134:	2201      	movs	r2, #1
 800a136:	2109      	movs	r1, #9
 800a138:	f7ff ff8e 	bl	800a058 <std>
 800a13c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a140:	2202      	movs	r2, #2
 800a142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a146:	2112      	movs	r1, #18
 800a148:	f7ff bf86 	b.w	800a058 <std>
 800a14c:	2000236c 	.word	0x2000236c
 800a150:	20002234 	.word	0x20002234
 800a154:	0800a0c5 	.word	0x0800a0c5

0800a158 <__sfp_lock_acquire>:
 800a158:	4801      	ldr	r0, [pc, #4]	@ (800a160 <__sfp_lock_acquire+0x8>)
 800a15a:	f000 bac0 	b.w	800a6de <__retarget_lock_acquire_recursive>
 800a15e:	bf00      	nop
 800a160:	20002375 	.word	0x20002375

0800a164 <__sfp_lock_release>:
 800a164:	4801      	ldr	r0, [pc, #4]	@ (800a16c <__sfp_lock_release+0x8>)
 800a166:	f000 babb 	b.w	800a6e0 <__retarget_lock_release_recursive>
 800a16a:	bf00      	nop
 800a16c:	20002375 	.word	0x20002375

0800a170 <__sinit>:
 800a170:	b510      	push	{r4, lr}
 800a172:	4604      	mov	r4, r0
 800a174:	f7ff fff0 	bl	800a158 <__sfp_lock_acquire>
 800a178:	6a23      	ldr	r3, [r4, #32]
 800a17a:	b11b      	cbz	r3, 800a184 <__sinit+0x14>
 800a17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a180:	f7ff bff0 	b.w	800a164 <__sfp_lock_release>
 800a184:	4b04      	ldr	r3, [pc, #16]	@ (800a198 <__sinit+0x28>)
 800a186:	6223      	str	r3, [r4, #32]
 800a188:	4b04      	ldr	r3, [pc, #16]	@ (800a19c <__sinit+0x2c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1f5      	bne.n	800a17c <__sinit+0xc>
 800a190:	f7ff ffc4 	bl	800a11c <global_stdio_init.part.0>
 800a194:	e7f2      	b.n	800a17c <__sinit+0xc>
 800a196:	bf00      	nop
 800a198:	0800a0dd 	.word	0x0800a0dd
 800a19c:	2000236c 	.word	0x2000236c

0800a1a0 <_fwalk_sglue>:
 800a1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	4688      	mov	r8, r1
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	2600      	movs	r6, #0
 800a1ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1b0:	f1b9 0901 	subs.w	r9, r9, #1
 800a1b4:	d505      	bpl.n	800a1c2 <_fwalk_sglue+0x22>
 800a1b6:	6824      	ldr	r4, [r4, #0]
 800a1b8:	2c00      	cmp	r4, #0
 800a1ba:	d1f7      	bne.n	800a1ac <_fwalk_sglue+0xc>
 800a1bc:	4630      	mov	r0, r6
 800a1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c2:	89ab      	ldrh	r3, [r5, #12]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d907      	bls.n	800a1d8 <_fwalk_sglue+0x38>
 800a1c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	d003      	beq.n	800a1d8 <_fwalk_sglue+0x38>
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	47c0      	blx	r8
 800a1d6:	4306      	orrs	r6, r0
 800a1d8:	3568      	adds	r5, #104	@ 0x68
 800a1da:	e7e9      	b.n	800a1b0 <_fwalk_sglue+0x10>

0800a1dc <iprintf>:
 800a1dc:	b40f      	push	{r0, r1, r2, r3}
 800a1de:	b507      	push	{r0, r1, r2, lr}
 800a1e0:	4906      	ldr	r1, [pc, #24]	@ (800a1fc <iprintf+0x20>)
 800a1e2:	ab04      	add	r3, sp, #16
 800a1e4:	6808      	ldr	r0, [r1, #0]
 800a1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ea:	6881      	ldr	r1, [r0, #8]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	f002 fe11 	bl	800ce14 <_vfiprintf_r>
 800a1f2:	b003      	add	sp, #12
 800a1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f8:	b004      	add	sp, #16
 800a1fa:	4770      	bx	lr
 800a1fc:	2000001c 	.word	0x2000001c

0800a200 <_puts_r>:
 800a200:	6a03      	ldr	r3, [r0, #32]
 800a202:	b570      	push	{r4, r5, r6, lr}
 800a204:	4605      	mov	r5, r0
 800a206:	460e      	mov	r6, r1
 800a208:	6884      	ldr	r4, [r0, #8]
 800a20a:	b90b      	cbnz	r3, 800a210 <_puts_r+0x10>
 800a20c:	f7ff ffb0 	bl	800a170 <__sinit>
 800a210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a212:	07db      	lsls	r3, r3, #31
 800a214:	d405      	bmi.n	800a222 <_puts_r+0x22>
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	0598      	lsls	r0, r3, #22
 800a21a:	d402      	bmi.n	800a222 <_puts_r+0x22>
 800a21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a21e:	f000 fa5e 	bl	800a6de <__retarget_lock_acquire_recursive>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	0719      	lsls	r1, r3, #28
 800a226:	d502      	bpl.n	800a22e <_puts_r+0x2e>
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d135      	bne.n	800a29a <_puts_r+0x9a>
 800a22e:	4621      	mov	r1, r4
 800a230:	4628      	mov	r0, r5
 800a232:	f000 f919 	bl	800a468 <__swsetup_r>
 800a236:	b380      	cbz	r0, 800a29a <_puts_r+0x9a>
 800a238:	f04f 35ff 	mov.w	r5, #4294967295
 800a23c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a23e:	07da      	lsls	r2, r3, #31
 800a240:	d405      	bmi.n	800a24e <_puts_r+0x4e>
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	059b      	lsls	r3, r3, #22
 800a246:	d402      	bmi.n	800a24e <_puts_r+0x4e>
 800a248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a24a:	f000 fa49 	bl	800a6e0 <__retarget_lock_release_recursive>
 800a24e:	4628      	mov	r0, r5
 800a250:	bd70      	pop	{r4, r5, r6, pc}
 800a252:	2b00      	cmp	r3, #0
 800a254:	da04      	bge.n	800a260 <_puts_r+0x60>
 800a256:	69a2      	ldr	r2, [r4, #24]
 800a258:	429a      	cmp	r2, r3
 800a25a:	dc17      	bgt.n	800a28c <_puts_r+0x8c>
 800a25c:	290a      	cmp	r1, #10
 800a25e:	d015      	beq.n	800a28c <_puts_r+0x8c>
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	6022      	str	r2, [r4, #0]
 800a266:	7019      	strb	r1, [r3, #0]
 800a268:	68a3      	ldr	r3, [r4, #8]
 800a26a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a26e:	3b01      	subs	r3, #1
 800a270:	60a3      	str	r3, [r4, #8]
 800a272:	2900      	cmp	r1, #0
 800a274:	d1ed      	bne.n	800a252 <_puts_r+0x52>
 800a276:	2b00      	cmp	r3, #0
 800a278:	da11      	bge.n	800a29e <_puts_r+0x9e>
 800a27a:	4622      	mov	r2, r4
 800a27c:	210a      	movs	r1, #10
 800a27e:	4628      	mov	r0, r5
 800a280:	f000 f8b3 	bl	800a3ea <__swbuf_r>
 800a284:	3001      	adds	r0, #1
 800a286:	d0d7      	beq.n	800a238 <_puts_r+0x38>
 800a288:	250a      	movs	r5, #10
 800a28a:	e7d7      	b.n	800a23c <_puts_r+0x3c>
 800a28c:	4622      	mov	r2, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 f8ab 	bl	800a3ea <__swbuf_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d1e7      	bne.n	800a268 <_puts_r+0x68>
 800a298:	e7ce      	b.n	800a238 <_puts_r+0x38>
 800a29a:	3e01      	subs	r6, #1
 800a29c:	e7e4      	b.n	800a268 <_puts_r+0x68>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	220a      	movs	r2, #10
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e7ee      	b.n	800a288 <_puts_r+0x88>
	...

0800a2ac <puts>:
 800a2ac:	4b02      	ldr	r3, [pc, #8]	@ (800a2b8 <puts+0xc>)
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f7ff bfa5 	b.w	800a200 <_puts_r>
 800a2b6:	bf00      	nop
 800a2b8:	2000001c 	.word	0x2000001c

0800a2bc <sniprintf>:
 800a2bc:	b40c      	push	{r2, r3}
 800a2be:	b530      	push	{r4, r5, lr}
 800a2c0:	4b17      	ldr	r3, [pc, #92]	@ (800a320 <sniprintf+0x64>)
 800a2c2:	1e0c      	subs	r4, r1, #0
 800a2c4:	681d      	ldr	r5, [r3, #0]
 800a2c6:	b09d      	sub	sp, #116	@ 0x74
 800a2c8:	da08      	bge.n	800a2dc <sniprintf+0x20>
 800a2ca:	238b      	movs	r3, #139	@ 0x8b
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	b01d      	add	sp, #116	@ 0x74
 800a2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2d8:	b002      	add	sp, #8
 800a2da:	4770      	bx	lr
 800a2dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a2e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a2e4:	bf0c      	ite	eq
 800a2e6:	4623      	moveq	r3, r4
 800a2e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2ec:	9304      	str	r3, [sp, #16]
 800a2ee:	9307      	str	r3, [sp, #28]
 800a2f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2f4:	9002      	str	r0, [sp, #8]
 800a2f6:	9006      	str	r0, [sp, #24]
 800a2f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	ab21      	add	r3, sp, #132	@ 0x84
 800a300:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a302:	a902      	add	r1, sp, #8
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	f002 fc61 	bl	800cbcc <_svfiprintf_r>
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	bfbc      	itt	lt
 800a30e:	238b      	movlt	r3, #139	@ 0x8b
 800a310:	602b      	strlt	r3, [r5, #0]
 800a312:	2c00      	cmp	r4, #0
 800a314:	d0dd      	beq.n	800a2d2 <sniprintf+0x16>
 800a316:	2200      	movs	r2, #0
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e7d9      	b.n	800a2d2 <sniprintf+0x16>
 800a31e:	bf00      	nop
 800a320:	2000001c 	.word	0x2000001c

0800a324 <siprintf>:
 800a324:	b40e      	push	{r1, r2, r3}
 800a326:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a32a:	b500      	push	{lr}
 800a32c:	b09c      	sub	sp, #112	@ 0x70
 800a32e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a330:	9002      	str	r0, [sp, #8]
 800a332:	9006      	str	r0, [sp, #24]
 800a334:	9107      	str	r1, [sp, #28]
 800a336:	9104      	str	r1, [sp, #16]
 800a338:	4808      	ldr	r0, [pc, #32]	@ (800a35c <siprintf+0x38>)
 800a33a:	4909      	ldr	r1, [pc, #36]	@ (800a360 <siprintf+0x3c>)
 800a33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a340:	9105      	str	r1, [sp, #20]
 800a342:	6800      	ldr	r0, [r0, #0]
 800a344:	a902      	add	r1, sp, #8
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	f002 fc40 	bl	800cbcc <_svfiprintf_r>
 800a34c:	2200      	movs	r2, #0
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	b01c      	add	sp, #112	@ 0x70
 800a354:	f85d eb04 	ldr.w	lr, [sp], #4
 800a358:	b003      	add	sp, #12
 800a35a:	4770      	bx	lr
 800a35c:	2000001c 	.word	0x2000001c
 800a360:	ffff0208 	.word	0xffff0208

0800a364 <__sread>:
 800a364:	b510      	push	{r4, lr}
 800a366:	460c      	mov	r4, r1
 800a368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36c:	f000 f968 	bl	800a640 <_read_r>
 800a370:	2800      	cmp	r0, #0
 800a372:	bfab      	itete	ge
 800a374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a376:	89a3      	ldrhlt	r3, [r4, #12]
 800a378:	181b      	addge	r3, r3, r0
 800a37a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a37e:	bfac      	ite	ge
 800a380:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a382:	81a3      	strhlt	r3, [r4, #12]
 800a384:	bd10      	pop	{r4, pc}

0800a386 <__swrite>:
 800a386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38a:	461f      	mov	r7, r3
 800a38c:	898b      	ldrh	r3, [r1, #12]
 800a38e:	4605      	mov	r5, r0
 800a390:	05db      	lsls	r3, r3, #23
 800a392:	460c      	mov	r4, r1
 800a394:	4616      	mov	r6, r2
 800a396:	d505      	bpl.n	800a3a4 <__swrite+0x1e>
 800a398:	2302      	movs	r3, #2
 800a39a:	2200      	movs	r2, #0
 800a39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a0:	f000 f93c 	bl	800a61c <_lseek_r>
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	4632      	mov	r2, r6
 800a3a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ba:	f000 b953 	b.w	800a664 <_write_r>

0800a3be <__sseek>:
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c6:	f000 f929 	bl	800a61c <_lseek_r>
 800a3ca:	1c43      	adds	r3, r0, #1
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	bf15      	itete	ne
 800a3d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3da:	81a3      	strheq	r3, [r4, #12]
 800a3dc:	bf18      	it	ne
 800a3de:	81a3      	strhne	r3, [r4, #12]
 800a3e0:	bd10      	pop	{r4, pc}

0800a3e2 <__sclose>:
 800a3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e6:	f000 b8b3 	b.w	800a550 <_close_r>

0800a3ea <__swbuf_r>:
 800a3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ec:	460e      	mov	r6, r1
 800a3ee:	4614      	mov	r4, r2
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	b118      	cbz	r0, 800a3fc <__swbuf_r+0x12>
 800a3f4:	6a03      	ldr	r3, [r0, #32]
 800a3f6:	b90b      	cbnz	r3, 800a3fc <__swbuf_r+0x12>
 800a3f8:	f7ff feba 	bl	800a170 <__sinit>
 800a3fc:	69a3      	ldr	r3, [r4, #24]
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	071a      	lsls	r2, r3, #28
 800a404:	d501      	bpl.n	800a40a <__swbuf_r+0x20>
 800a406:	6923      	ldr	r3, [r4, #16]
 800a408:	b943      	cbnz	r3, 800a41c <__swbuf_r+0x32>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4628      	mov	r0, r5
 800a40e:	f000 f82b 	bl	800a468 <__swsetup_r>
 800a412:	b118      	cbz	r0, 800a41c <__swbuf_r+0x32>
 800a414:	f04f 37ff 	mov.w	r7, #4294967295
 800a418:	4638      	mov	r0, r7
 800a41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	6922      	ldr	r2, [r4, #16]
 800a420:	b2f6      	uxtb	r6, r6
 800a422:	1a98      	subs	r0, r3, r2
 800a424:	6963      	ldr	r3, [r4, #20]
 800a426:	4637      	mov	r7, r6
 800a428:	4283      	cmp	r3, r0
 800a42a:	dc05      	bgt.n	800a438 <__swbuf_r+0x4e>
 800a42c:	4621      	mov	r1, r4
 800a42e:	4628      	mov	r0, r5
 800a430:	f002 fe88 	bl	800d144 <_fflush_r>
 800a434:	2800      	cmp	r0, #0
 800a436:	d1ed      	bne.n	800a414 <__swbuf_r+0x2a>
 800a438:	68a3      	ldr	r3, [r4, #8]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	60a3      	str	r3, [r4, #8]
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	701e      	strb	r6, [r3, #0]
 800a446:	6962      	ldr	r2, [r4, #20]
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d004      	beq.n	800a458 <__swbuf_r+0x6e>
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	07db      	lsls	r3, r3, #31
 800a452:	d5e1      	bpl.n	800a418 <__swbuf_r+0x2e>
 800a454:	2e0a      	cmp	r6, #10
 800a456:	d1df      	bne.n	800a418 <__swbuf_r+0x2e>
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f002 fe72 	bl	800d144 <_fflush_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	d0d9      	beq.n	800a418 <__swbuf_r+0x2e>
 800a464:	e7d6      	b.n	800a414 <__swbuf_r+0x2a>
	...

0800a468 <__swsetup_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4b29      	ldr	r3, [pc, #164]	@ (800a510 <__swsetup_r+0xa8>)
 800a46c:	4605      	mov	r5, r0
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	460c      	mov	r4, r1
 800a472:	b118      	cbz	r0, 800a47c <__swsetup_r+0x14>
 800a474:	6a03      	ldr	r3, [r0, #32]
 800a476:	b90b      	cbnz	r3, 800a47c <__swsetup_r+0x14>
 800a478:	f7ff fe7a 	bl	800a170 <__sinit>
 800a47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a480:	0719      	lsls	r1, r3, #28
 800a482:	d422      	bmi.n	800a4ca <__swsetup_r+0x62>
 800a484:	06da      	lsls	r2, r3, #27
 800a486:	d407      	bmi.n	800a498 <__swsetup_r+0x30>
 800a488:	2209      	movs	r2, #9
 800a48a:	602a      	str	r2, [r5, #0]
 800a48c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	81a3      	strh	r3, [r4, #12]
 800a496:	e033      	b.n	800a500 <__swsetup_r+0x98>
 800a498:	0758      	lsls	r0, r3, #29
 800a49a:	d512      	bpl.n	800a4c2 <__swsetup_r+0x5a>
 800a49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a49e:	b141      	cbz	r1, 800a4b2 <__swsetup_r+0x4a>
 800a4a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	d002      	beq.n	800a4ae <__swsetup_r+0x46>
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f000 ff8d 	bl	800b3c8 <_free_r>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6063      	str	r3, [r4, #4]
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	f043 0308 	orr.w	r3, r3, #8
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	b94b      	cbnz	r3, 800a4e2 <__swsetup_r+0x7a>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d8:	d003      	beq.n	800a4e2 <__swsetup_r+0x7a>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f002 fe7e 	bl	800d1de <__smakebuf_r>
 800a4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e6:	f013 0201 	ands.w	r2, r3, #1
 800a4ea:	d00a      	beq.n	800a502 <__swsetup_r+0x9a>
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	60a2      	str	r2, [r4, #8]
 800a4f0:	6962      	ldr	r2, [r4, #20]
 800a4f2:	4252      	negs	r2, r2
 800a4f4:	61a2      	str	r2, [r4, #24]
 800a4f6:	6922      	ldr	r2, [r4, #16]
 800a4f8:	b942      	cbnz	r2, 800a50c <__swsetup_r+0xa4>
 800a4fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4fe:	d1c5      	bne.n	800a48c <__swsetup_r+0x24>
 800a500:	bd38      	pop	{r3, r4, r5, pc}
 800a502:	0799      	lsls	r1, r3, #30
 800a504:	bf58      	it	pl
 800a506:	6962      	ldrpl	r2, [r4, #20]
 800a508:	60a2      	str	r2, [r4, #8]
 800a50a:	e7f4      	b.n	800a4f6 <__swsetup_r+0x8e>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7f7      	b.n	800a500 <__swsetup_r+0x98>
 800a510:	2000001c 	.word	0x2000001c

0800a514 <memset>:
 800a514:	4603      	mov	r3, r0
 800a516:	4402      	add	r2, r0
 800a518:	4293      	cmp	r3, r2
 800a51a:	d100      	bne.n	800a51e <memset+0xa>
 800a51c:	4770      	bx	lr
 800a51e:	f803 1b01 	strb.w	r1, [r3], #1
 800a522:	e7f9      	b.n	800a518 <memset+0x4>

0800a524 <strncmp>:
 800a524:	b510      	push	{r4, lr}
 800a526:	b16a      	cbz	r2, 800a544 <strncmp+0x20>
 800a528:	3901      	subs	r1, #1
 800a52a:	1884      	adds	r4, r0, r2
 800a52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a530:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a534:	429a      	cmp	r2, r3
 800a536:	d103      	bne.n	800a540 <strncmp+0x1c>
 800a538:	42a0      	cmp	r0, r4
 800a53a:	d001      	beq.n	800a540 <strncmp+0x1c>
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	d1f5      	bne.n	800a52c <strncmp+0x8>
 800a540:	1ad0      	subs	r0, r2, r3
 800a542:	bd10      	pop	{r4, pc}
 800a544:	4610      	mov	r0, r2
 800a546:	e7fc      	b.n	800a542 <strncmp+0x1e>

0800a548 <_localeconv_r>:
 800a548:	4800      	ldr	r0, [pc, #0]	@ (800a54c <_localeconv_r+0x4>)
 800a54a:	4770      	bx	lr
 800a54c:	2000015c 	.word	0x2000015c

0800a550 <_close_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	2300      	movs	r3, #0
 800a554:	4d05      	ldr	r5, [pc, #20]	@ (800a56c <_close_r+0x1c>)
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	602b      	str	r3, [r5, #0]
 800a55c:	f7f7 fc71 	bl	8001e42 <_close>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_close_r+0x1a>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_close_r+0x1a>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20002370 	.word	0x20002370

0800a570 <_reclaim_reent>:
 800a570:	4b29      	ldr	r3, [pc, #164]	@ (800a618 <_reclaim_reent+0xa8>)
 800a572:	b570      	push	{r4, r5, r6, lr}
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4604      	mov	r4, r0
 800a578:	4283      	cmp	r3, r0
 800a57a:	d04b      	beq.n	800a614 <_reclaim_reent+0xa4>
 800a57c:	69c3      	ldr	r3, [r0, #28]
 800a57e:	b1ab      	cbz	r3, 800a5ac <_reclaim_reent+0x3c>
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	b16b      	cbz	r3, 800a5a0 <_reclaim_reent+0x30>
 800a584:	2500      	movs	r5, #0
 800a586:	69e3      	ldr	r3, [r4, #28]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	5959      	ldr	r1, [r3, r5]
 800a58c:	2900      	cmp	r1, #0
 800a58e:	d13b      	bne.n	800a608 <_reclaim_reent+0x98>
 800a590:	3504      	adds	r5, #4
 800a592:	2d80      	cmp	r5, #128	@ 0x80
 800a594:	d1f7      	bne.n	800a586 <_reclaim_reent+0x16>
 800a596:	69e3      	ldr	r3, [r4, #28]
 800a598:	4620      	mov	r0, r4
 800a59a:	68d9      	ldr	r1, [r3, #12]
 800a59c:	f000 ff14 	bl	800b3c8 <_free_r>
 800a5a0:	69e3      	ldr	r3, [r4, #28]
 800a5a2:	6819      	ldr	r1, [r3, #0]
 800a5a4:	b111      	cbz	r1, 800a5ac <_reclaim_reent+0x3c>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 ff0e 	bl	800b3c8 <_free_r>
 800a5ac:	6961      	ldr	r1, [r4, #20]
 800a5ae:	b111      	cbz	r1, 800a5b6 <_reclaim_reent+0x46>
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 ff09 	bl	800b3c8 <_free_r>
 800a5b6:	69e1      	ldr	r1, [r4, #28]
 800a5b8:	b111      	cbz	r1, 800a5c0 <_reclaim_reent+0x50>
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 ff04 	bl	800b3c8 <_free_r>
 800a5c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a5c2:	b111      	cbz	r1, 800a5ca <_reclaim_reent+0x5a>
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 feff 	bl	800b3c8 <_free_r>
 800a5ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5cc:	b111      	cbz	r1, 800a5d4 <_reclaim_reent+0x64>
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 fefa 	bl	800b3c8 <_free_r>
 800a5d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a5d6:	b111      	cbz	r1, 800a5de <_reclaim_reent+0x6e>
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 fef5 	bl	800b3c8 <_free_r>
 800a5de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a5e0:	b111      	cbz	r1, 800a5e8 <_reclaim_reent+0x78>
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 fef0 	bl	800b3c8 <_free_r>
 800a5e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a5ea:	b111      	cbz	r1, 800a5f2 <_reclaim_reent+0x82>
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 feeb 	bl	800b3c8 <_free_r>
 800a5f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a5f4:	b111      	cbz	r1, 800a5fc <_reclaim_reent+0x8c>
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f000 fee6 	bl	800b3c8 <_free_r>
 800a5fc:	6a23      	ldr	r3, [r4, #32]
 800a5fe:	b14b      	cbz	r3, 800a614 <_reclaim_reent+0xa4>
 800a600:	4620      	mov	r0, r4
 800a602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a606:	4718      	bx	r3
 800a608:	680e      	ldr	r6, [r1, #0]
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fedc 	bl	800b3c8 <_free_r>
 800a610:	4631      	mov	r1, r6
 800a612:	e7bb      	b.n	800a58c <_reclaim_reent+0x1c>
 800a614:	bd70      	pop	{r4, r5, r6, pc}
 800a616:	bf00      	nop
 800a618:	2000001c 	.word	0x2000001c

0800a61c <_lseek_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	2200      	movs	r2, #0
 800a626:	4d05      	ldr	r5, [pc, #20]	@ (800a63c <_lseek_r+0x20>)
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f7 fc2d 	bl	8001e8a <_lseek>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_lseek_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_lseek_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	20002370 	.word	0x20002370

0800a640 <_read_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4604      	mov	r4, r0
 800a644:	4608      	mov	r0, r1
 800a646:	4611      	mov	r1, r2
 800a648:	2200      	movs	r2, #0
 800a64a:	4d05      	ldr	r5, [pc, #20]	@ (800a660 <_read_r+0x20>)
 800a64c:	602a      	str	r2, [r5, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	f7f7 fbda 	bl	8001e08 <_read>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_read_r+0x1e>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_read_r+0x1e>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20002370 	.word	0x20002370

0800a664 <_write_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	2200      	movs	r2, #0
 800a66e:	4d05      	ldr	r5, [pc, #20]	@ (800a684 <_write_r+0x20>)
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	f7f6 fd0c 	bl	8001090 <_write>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_write_r+0x1e>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_write_r+0x1e>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	20002370 	.word	0x20002370

0800a688 <__errno>:
 800a688:	4b01      	ldr	r3, [pc, #4]	@ (800a690 <__errno+0x8>)
 800a68a:	6818      	ldr	r0, [r3, #0]
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	2000001c 	.word	0x2000001c

0800a694 <__libc_init_array>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	2600      	movs	r6, #0
 800a698:	4d0c      	ldr	r5, [pc, #48]	@ (800a6cc <__libc_init_array+0x38>)
 800a69a:	4c0d      	ldr	r4, [pc, #52]	@ (800a6d0 <__libc_init_array+0x3c>)
 800a69c:	1b64      	subs	r4, r4, r5
 800a69e:	10a4      	asrs	r4, r4, #2
 800a6a0:	42a6      	cmp	r6, r4
 800a6a2:	d109      	bne.n	800a6b8 <__libc_init_array+0x24>
 800a6a4:	f003 fa48 	bl	800db38 <_init>
 800a6a8:	2600      	movs	r6, #0
 800a6aa:	4d0a      	ldr	r5, [pc, #40]	@ (800a6d4 <__libc_init_array+0x40>)
 800a6ac:	4c0a      	ldr	r4, [pc, #40]	@ (800a6d8 <__libc_init_array+0x44>)
 800a6ae:	1b64      	subs	r4, r4, r5
 800a6b0:	10a4      	asrs	r4, r4, #2
 800a6b2:	42a6      	cmp	r6, r4
 800a6b4:	d105      	bne.n	800a6c2 <__libc_init_array+0x2e>
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6bc:	4798      	blx	r3
 800a6be:	3601      	adds	r6, #1
 800a6c0:	e7ee      	b.n	800a6a0 <__libc_init_array+0xc>
 800a6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c6:	4798      	blx	r3
 800a6c8:	3601      	adds	r6, #1
 800a6ca:	e7f2      	b.n	800a6b2 <__libc_init_array+0x1e>
 800a6cc:	0800e1c0 	.word	0x0800e1c0
 800a6d0:	0800e1c0 	.word	0x0800e1c0
 800a6d4:	0800e1c0 	.word	0x0800e1c0
 800a6d8:	0800e1c4 	.word	0x0800e1c4

0800a6dc <__retarget_lock_init_recursive>:
 800a6dc:	4770      	bx	lr

0800a6de <__retarget_lock_acquire_recursive>:
 800a6de:	4770      	bx	lr

0800a6e0 <__retarget_lock_release_recursive>:
 800a6e0:	4770      	bx	lr

0800a6e2 <memchr>:
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	b2c9      	uxtb	r1, r1
 800a6e8:	4402      	add	r2, r0
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	d101      	bne.n	800a6f4 <memchr+0x12>
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	e003      	b.n	800a6fc <memchr+0x1a>
 800a6f4:	7804      	ldrb	r4, [r0, #0]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	428c      	cmp	r4, r1
 800a6fa:	d1f6      	bne.n	800a6ea <memchr+0x8>
 800a6fc:	bd10      	pop	{r4, pc}

0800a6fe <memcpy>:
 800a6fe:	440a      	add	r2, r1
 800a700:	4291      	cmp	r1, r2
 800a702:	f100 33ff 	add.w	r3, r0, #4294967295
 800a706:	d100      	bne.n	800a70a <memcpy+0xc>
 800a708:	4770      	bx	lr
 800a70a:	b510      	push	{r4, lr}
 800a70c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a710:	4291      	cmp	r1, r2
 800a712:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a716:	d1f9      	bne.n	800a70c <memcpy+0xe>
 800a718:	bd10      	pop	{r4, pc}
	...

0800a71c <nanf>:
 800a71c:	4800      	ldr	r0, [pc, #0]	@ (800a720 <nanf+0x4>)
 800a71e:	4770      	bx	lr
 800a720:	7fc00000 	.word	0x7fc00000

0800a724 <quorem>:
 800a724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	6903      	ldr	r3, [r0, #16]
 800a72a:	690c      	ldr	r4, [r1, #16]
 800a72c:	4607      	mov	r7, r0
 800a72e:	42a3      	cmp	r3, r4
 800a730:	db7e      	blt.n	800a830 <quorem+0x10c>
 800a732:	3c01      	subs	r4, #1
 800a734:	00a3      	lsls	r3, r4, #2
 800a736:	f100 0514 	add.w	r5, r0, #20
 800a73a:	f101 0814 	add.w	r8, r1, #20
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a74a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a74e:	3301      	adds	r3, #1
 800a750:	429a      	cmp	r2, r3
 800a752:	fbb2 f6f3 	udiv	r6, r2, r3
 800a756:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a75a:	d32e      	bcc.n	800a7ba <quorem+0x96>
 800a75c:	f04f 0a00 	mov.w	sl, #0
 800a760:	46c4      	mov	ip, r8
 800a762:	46ae      	mov	lr, r5
 800a764:	46d3      	mov	fp, sl
 800a766:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a76a:	b298      	uxth	r0, r3
 800a76c:	fb06 a000 	mla	r0, r6, r0, sl
 800a770:	0c1b      	lsrs	r3, r3, #16
 800a772:	0c02      	lsrs	r2, r0, #16
 800a774:	fb06 2303 	mla	r3, r6, r3, r2
 800a778:	f8de 2000 	ldr.w	r2, [lr]
 800a77c:	b280      	uxth	r0, r0
 800a77e:	b292      	uxth	r2, r2
 800a780:	1a12      	subs	r2, r2, r0
 800a782:	445a      	add	r2, fp
 800a784:	f8de 0000 	ldr.w	r0, [lr]
 800a788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a792:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a796:	b292      	uxth	r2, r2
 800a798:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a79c:	45e1      	cmp	r9, ip
 800a79e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7a2:	f84e 2b04 	str.w	r2, [lr], #4
 800a7a6:	d2de      	bcs.n	800a766 <quorem+0x42>
 800a7a8:	9b00      	ldr	r3, [sp, #0]
 800a7aa:	58eb      	ldr	r3, [r5, r3]
 800a7ac:	b92b      	cbnz	r3, 800a7ba <quorem+0x96>
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	3b04      	subs	r3, #4
 800a7b2:	429d      	cmp	r5, r3
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	d32f      	bcc.n	800a818 <quorem+0xf4>
 800a7b8:	613c      	str	r4, [r7, #16]
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	f001 f9c4 	bl	800bb48 <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	db25      	blt.n	800a810 <quorem+0xec>
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7cc:	f8d1 c000 	ldr.w	ip, [r1]
 800a7d0:	fa1f fe82 	uxth.w	lr, r2
 800a7d4:	fa1f f38c 	uxth.w	r3, ip
 800a7d8:	eba3 030e 	sub.w	r3, r3, lr
 800a7dc:	4403      	add	r3, r0
 800a7de:	0c12      	lsrs	r2, r2, #16
 800a7e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7ee:	45c1      	cmp	r9, r8
 800a7f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7f4:	f841 3b04 	str.w	r3, [r1], #4
 800a7f8:	d2e6      	bcs.n	800a7c8 <quorem+0xa4>
 800a7fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a802:	b922      	cbnz	r2, 800a80e <quorem+0xea>
 800a804:	3b04      	subs	r3, #4
 800a806:	429d      	cmp	r5, r3
 800a808:	461a      	mov	r2, r3
 800a80a:	d30b      	bcc.n	800a824 <quorem+0x100>
 800a80c:	613c      	str	r4, [r7, #16]
 800a80e:	3601      	adds	r6, #1
 800a810:	4630      	mov	r0, r6
 800a812:	b003      	add	sp, #12
 800a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	3b04      	subs	r3, #4
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	d1cb      	bne.n	800a7b8 <quorem+0x94>
 800a820:	3c01      	subs	r4, #1
 800a822:	e7c6      	b.n	800a7b2 <quorem+0x8e>
 800a824:	6812      	ldr	r2, [r2, #0]
 800a826:	3b04      	subs	r3, #4
 800a828:	2a00      	cmp	r2, #0
 800a82a:	d1ef      	bne.n	800a80c <quorem+0xe8>
 800a82c:	3c01      	subs	r4, #1
 800a82e:	e7ea      	b.n	800a806 <quorem+0xe2>
 800a830:	2000      	movs	r0, #0
 800a832:	e7ee      	b.n	800a812 <quorem+0xee>
 800a834:	0000      	movs	r0, r0
	...

0800a838 <_dtoa_r>:
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	4614      	mov	r4, r2
 800a83e:	461d      	mov	r5, r3
 800a840:	69c7      	ldr	r7, [r0, #28]
 800a842:	b097      	sub	sp, #92	@ 0x5c
 800a844:	4683      	mov	fp, r0
 800a846:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a84a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a84c:	b97f      	cbnz	r7, 800a86e <_dtoa_r+0x36>
 800a84e:	2010      	movs	r0, #16
 800a850:	f000 fe02 	bl	800b458 <malloc>
 800a854:	4602      	mov	r2, r0
 800a856:	f8cb 001c 	str.w	r0, [fp, #28]
 800a85a:	b920      	cbnz	r0, 800a866 <_dtoa_r+0x2e>
 800a85c:	21ef      	movs	r1, #239	@ 0xef
 800a85e:	4ba8      	ldr	r3, [pc, #672]	@ (800ab00 <_dtoa_r+0x2c8>)
 800a860:	48a8      	ldr	r0, [pc, #672]	@ (800ab04 <_dtoa_r+0x2cc>)
 800a862:	f002 fd4b 	bl	800d2fc <__assert_func>
 800a866:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a86a:	6007      	str	r7, [r0, #0]
 800a86c:	60c7      	str	r7, [r0, #12]
 800a86e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	b159      	cbz	r1, 800a88e <_dtoa_r+0x56>
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	2301      	movs	r3, #1
 800a87a:	4093      	lsls	r3, r2
 800a87c:	604a      	str	r2, [r1, #4]
 800a87e:	608b      	str	r3, [r1, #8]
 800a880:	4658      	mov	r0, fp
 800a882:	f000 fedf 	bl	800b644 <_Bfree>
 800a886:	2200      	movs	r2, #0
 800a888:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	1e2b      	subs	r3, r5, #0
 800a890:	bfaf      	iteee	ge
 800a892:	2300      	movge	r3, #0
 800a894:	2201      	movlt	r2, #1
 800a896:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a89a:	9303      	strlt	r3, [sp, #12]
 800a89c:	bfa8      	it	ge
 800a89e:	6033      	strge	r3, [r6, #0]
 800a8a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a8a4:	4b98      	ldr	r3, [pc, #608]	@ (800ab08 <_dtoa_r+0x2d0>)
 800a8a6:	bfb8      	it	lt
 800a8a8:	6032      	strlt	r2, [r6, #0]
 800a8aa:	ea33 0308 	bics.w	r3, r3, r8
 800a8ae:	d112      	bne.n	800a8d6 <_dtoa_r+0x9e>
 800a8b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a8bc:	4323      	orrs	r3, r4
 800a8be:	f000 8550 	beq.w	800b362 <_dtoa_r+0xb2a>
 800a8c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800ab0c <_dtoa_r+0x2d4>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f000 8552 	beq.w	800b372 <_dtoa_r+0xb3a>
 800a8ce:	f10a 0303 	add.w	r3, sl, #3
 800a8d2:	f000 bd4c 	b.w	800b36e <_dtoa_r+0xb36>
 800a8d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a8de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f7f6 f85f 	bl	80009a8 <__aeabi_dcmpeq>
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	b158      	cbz	r0, 800a906 <_dtoa_r+0xce>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8f6:	b113      	cbz	r3, 800a8fe <_dtoa_r+0xc6>
 800a8f8:	4b85      	ldr	r3, [pc, #532]	@ (800ab10 <_dtoa_r+0x2d8>)
 800a8fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800ab14 <_dtoa_r+0x2dc>
 800a902:	f000 bd36 	b.w	800b372 <_dtoa_r+0xb3a>
 800a906:	ab14      	add	r3, sp, #80	@ 0x50
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	ab15      	add	r3, sp, #84	@ 0x54
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	4658      	mov	r0, fp
 800a910:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a914:	f001 fa30 	bl	800bd78 <__d2b>
 800a918:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a91c:	4681      	mov	r9, r0
 800a91e:	2e00      	cmp	r6, #0
 800a920:	d077      	beq.n	800aa12 <_dtoa_r+0x1da>
 800a922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a928:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a930:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a934:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a938:	9712      	str	r7, [sp, #72]	@ 0x48
 800a93a:	4619      	mov	r1, r3
 800a93c:	2200      	movs	r2, #0
 800a93e:	4b76      	ldr	r3, [pc, #472]	@ (800ab18 <_dtoa_r+0x2e0>)
 800a940:	f7f5 fc12 	bl	8000168 <__aeabi_dsub>
 800a944:	a368      	add	r3, pc, #416	@ (adr r3, 800aae8 <_dtoa_r+0x2b0>)
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f7f5 fdc5 	bl	80004d8 <__aeabi_dmul>
 800a94e:	a368      	add	r3, pc, #416	@ (adr r3, 800aaf0 <_dtoa_r+0x2b8>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f5 fc0a 	bl	800016c <__adddf3>
 800a958:	4604      	mov	r4, r0
 800a95a:	4630      	mov	r0, r6
 800a95c:	460d      	mov	r5, r1
 800a95e:	f7f5 fd51 	bl	8000404 <__aeabi_i2d>
 800a962:	a365      	add	r3, pc, #404	@ (adr r3, 800aaf8 <_dtoa_r+0x2c0>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fdb6 	bl	80004d8 <__aeabi_dmul>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fbfa 	bl	800016c <__adddf3>
 800a978:	4604      	mov	r4, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	f7f6 f85c 	bl	8000a38 <__aeabi_d2iz>
 800a980:	2200      	movs	r2, #0
 800a982:	4607      	mov	r7, r0
 800a984:	2300      	movs	r3, #0
 800a986:	4620      	mov	r0, r4
 800a988:	4629      	mov	r1, r5
 800a98a:	f7f6 f817 	bl	80009bc <__aeabi_dcmplt>
 800a98e:	b140      	cbz	r0, 800a9a2 <_dtoa_r+0x16a>
 800a990:	4638      	mov	r0, r7
 800a992:	f7f5 fd37 	bl	8000404 <__aeabi_i2d>
 800a996:	4622      	mov	r2, r4
 800a998:	462b      	mov	r3, r5
 800a99a:	f7f6 f805 	bl	80009a8 <__aeabi_dcmpeq>
 800a99e:	b900      	cbnz	r0, 800a9a2 <_dtoa_r+0x16a>
 800a9a0:	3f01      	subs	r7, #1
 800a9a2:	2f16      	cmp	r7, #22
 800a9a4:	d853      	bhi.n	800aa4e <_dtoa_r+0x216>
 800a9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9aa:	4b5c      	ldr	r3, [pc, #368]	@ (800ab1c <_dtoa_r+0x2e4>)
 800a9ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f7f6 f802 	bl	80009bc <__aeabi_dcmplt>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d04a      	beq.n	800aa52 <_dtoa_r+0x21a>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	3f01      	subs	r7, #1
 800a9c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a9c4:	1b9b      	subs	r3, r3, r6
 800a9c6:	1e5a      	subs	r2, r3, #1
 800a9c8:	bf46      	itte	mi
 800a9ca:	f1c3 0801 	rsbmi	r8, r3, #1
 800a9ce:	2300      	movmi	r3, #0
 800a9d0:	f04f 0800 	movpl.w	r8, #0
 800a9d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9d6:	bf48      	it	mi
 800a9d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	db3b      	blt.n	800aa56 <_dtoa_r+0x21e>
 800a9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e0:	970e      	str	r7, [sp, #56]	@ 0x38
 800a9e2:	443b      	add	r3, r7
 800a9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d866      	bhi.n	800aabe <_dtoa_r+0x286>
 800a9f0:	2b05      	cmp	r3, #5
 800a9f2:	bfc4      	itt	gt
 800a9f4:	3b04      	subgt	r3, #4
 800a9f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a9f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9fa:	bfc8      	it	gt
 800a9fc:	2400      	movgt	r4, #0
 800a9fe:	f1a3 0302 	sub.w	r3, r3, #2
 800aa02:	bfd8      	it	le
 800aa04:	2401      	movle	r4, #1
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d864      	bhi.n	800aad4 <_dtoa_r+0x29c>
 800aa0a:	e8df f003 	tbb	[pc, r3]
 800aa0e:	382b      	.short	0x382b
 800aa10:	5636      	.short	0x5636
 800aa12:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aa16:	441e      	add	r6, r3
 800aa18:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	bfc1      	itttt	gt
 800aa20:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa24:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa28:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa30:	bfd6      	itet	le
 800aa32:	f1c3 0320 	rsble	r3, r3, #32
 800aa36:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa3a:	fa04 f003 	lslle.w	r0, r4, r3
 800aa3e:	f7f5 fcd1 	bl	80003e4 <__aeabi_ui2d>
 800aa42:	2201      	movs	r2, #1
 800aa44:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa48:	3e01      	subs	r6, #1
 800aa4a:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa4c:	e775      	b.n	800a93a <_dtoa_r+0x102>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e7b6      	b.n	800a9c0 <_dtoa_r+0x188>
 800aa52:	900f      	str	r0, [sp, #60]	@ 0x3c
 800aa54:	e7b5      	b.n	800a9c2 <_dtoa_r+0x18a>
 800aa56:	427b      	negs	r3, r7
 800aa58:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	eba8 0807 	sub.w	r8, r8, r7
 800aa60:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa62:	e7c2      	b.n	800a9ea <_dtoa_r+0x1b2>
 800aa64:	2300      	movs	r3, #0
 800aa66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	dc35      	bgt.n	800aada <_dtoa_r+0x2a2>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	461a      	mov	r2, r3
 800aa72:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aa76:	9221      	str	r2, [sp, #132]	@ 0x84
 800aa78:	e00b      	b.n	800aa92 <_dtoa_r+0x25a>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e7f3      	b.n	800aa66 <_dtoa_r+0x22e>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa84:	18fb      	adds	r3, r7, r3
 800aa86:	9308      	str	r3, [sp, #32]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	9307      	str	r3, [sp, #28]
 800aa8e:	bfb8      	it	lt
 800aa90:	2301      	movlt	r3, #1
 800aa92:	2100      	movs	r1, #0
 800aa94:	2204      	movs	r2, #4
 800aa96:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa9a:	f102 0514 	add.w	r5, r2, #20
 800aa9e:	429d      	cmp	r5, r3
 800aaa0:	d91f      	bls.n	800aae2 <_dtoa_r+0x2aa>
 800aaa2:	6041      	str	r1, [r0, #4]
 800aaa4:	4658      	mov	r0, fp
 800aaa6:	f000 fd8d 	bl	800b5c4 <_Balloc>
 800aaaa:	4682      	mov	sl, r0
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d139      	bne.n	800ab24 <_dtoa_r+0x2ec>
 800aab0:	4602      	mov	r2, r0
 800aab2:	f240 11af 	movw	r1, #431	@ 0x1af
 800aab6:	4b1a      	ldr	r3, [pc, #104]	@ (800ab20 <_dtoa_r+0x2e8>)
 800aab8:	e6d2      	b.n	800a860 <_dtoa_r+0x28>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e7e0      	b.n	800aa80 <_dtoa_r+0x248>
 800aabe:	2401      	movs	r4, #1
 800aac0:	2300      	movs	r3, #0
 800aac2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aac4:	9320      	str	r3, [sp, #128]	@ 0x80
 800aac6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaca:	2200      	movs	r2, #0
 800aacc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aad0:	2312      	movs	r3, #18
 800aad2:	e7d0      	b.n	800aa76 <_dtoa_r+0x23e>
 800aad4:	2301      	movs	r3, #1
 800aad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aad8:	e7f5      	b.n	800aac6 <_dtoa_r+0x28e>
 800aada:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aadc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aae0:	e7d7      	b.n	800aa92 <_dtoa_r+0x25a>
 800aae2:	3101      	adds	r1, #1
 800aae4:	0052      	lsls	r2, r2, #1
 800aae6:	e7d8      	b.n	800aa9a <_dtoa_r+0x262>
 800aae8:	636f4361 	.word	0x636f4361
 800aaec:	3fd287a7 	.word	0x3fd287a7
 800aaf0:	8b60c8b3 	.word	0x8b60c8b3
 800aaf4:	3fc68a28 	.word	0x3fc68a28
 800aaf8:	509f79fb 	.word	0x509f79fb
 800aafc:	3fd34413 	.word	0x3fd34413
 800ab00:	0800decd 	.word	0x0800decd
 800ab04:	0800dee4 	.word	0x0800dee4
 800ab08:	7ff00000 	.word	0x7ff00000
 800ab0c:	0800dec9 	.word	0x0800dec9
 800ab10:	0800de98 	.word	0x0800de98
 800ab14:	0800de97 	.word	0x0800de97
 800ab18:	3ff80000 	.word	0x3ff80000
 800ab1c:	0800dfe0 	.word	0x0800dfe0
 800ab20:	0800df3c 	.word	0x0800df3c
 800ab24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab28:	6018      	str	r0, [r3, #0]
 800ab2a:	9b07      	ldr	r3, [sp, #28]
 800ab2c:	2b0e      	cmp	r3, #14
 800ab2e:	f200 80a4 	bhi.w	800ac7a <_dtoa_r+0x442>
 800ab32:	2c00      	cmp	r4, #0
 800ab34:	f000 80a1 	beq.w	800ac7a <_dtoa_r+0x442>
 800ab38:	2f00      	cmp	r7, #0
 800ab3a:	dd33      	ble.n	800aba4 <_dtoa_r+0x36c>
 800ab3c:	4b86      	ldr	r3, [pc, #536]	@ (800ad58 <_dtoa_r+0x520>)
 800ab3e:	f007 020f 	and.w	r2, r7, #15
 800ab42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab46:	05f8      	lsls	r0, r7, #23
 800ab48:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab54:	d516      	bpl.n	800ab84 <_dtoa_r+0x34c>
 800ab56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab5a:	4b80      	ldr	r3, [pc, #512]	@ (800ad5c <_dtoa_r+0x524>)
 800ab5c:	2603      	movs	r6, #3
 800ab5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab62:	f7f5 fde3 	bl	800072c <__aeabi_ddiv>
 800ab66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab6a:	f004 040f 	and.w	r4, r4, #15
 800ab6e:	4d7b      	ldr	r5, [pc, #492]	@ (800ad5c <_dtoa_r+0x524>)
 800ab70:	b954      	cbnz	r4, 800ab88 <_dtoa_r+0x350>
 800ab72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab7a:	f7f5 fdd7 	bl	800072c <__aeabi_ddiv>
 800ab7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab82:	e028      	b.n	800abd6 <_dtoa_r+0x39e>
 800ab84:	2602      	movs	r6, #2
 800ab86:	e7f2      	b.n	800ab6e <_dtoa_r+0x336>
 800ab88:	07e1      	lsls	r1, r4, #31
 800ab8a:	d508      	bpl.n	800ab9e <_dtoa_r+0x366>
 800ab8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab94:	f7f5 fca0 	bl	80004d8 <__aeabi_dmul>
 800ab98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab9c:	3601      	adds	r6, #1
 800ab9e:	1064      	asrs	r4, r4, #1
 800aba0:	3508      	adds	r5, #8
 800aba2:	e7e5      	b.n	800ab70 <_dtoa_r+0x338>
 800aba4:	f000 80d2 	beq.w	800ad4c <_dtoa_r+0x514>
 800aba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abac:	427c      	negs	r4, r7
 800abae:	4b6a      	ldr	r3, [pc, #424]	@ (800ad58 <_dtoa_r+0x520>)
 800abb0:	f004 020f 	and.w	r2, r4, #15
 800abb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	f7f5 fc8c 	bl	80004d8 <__aeabi_dmul>
 800abc0:	2602      	movs	r6, #2
 800abc2:	2300      	movs	r3, #0
 800abc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc8:	4d64      	ldr	r5, [pc, #400]	@ (800ad5c <_dtoa_r+0x524>)
 800abca:	1124      	asrs	r4, r4, #4
 800abcc:	2c00      	cmp	r4, #0
 800abce:	f040 80b2 	bne.w	800ad36 <_dtoa_r+0x4fe>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1d3      	bne.n	800ab7e <_dtoa_r+0x346>
 800abd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800abda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 80b7 	beq.w	800ad50 <_dtoa_r+0x518>
 800abe2:	2200      	movs	r2, #0
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	4b5d      	ldr	r3, [pc, #372]	@ (800ad60 <_dtoa_r+0x528>)
 800abea:	f7f5 fee7 	bl	80009bc <__aeabi_dcmplt>
 800abee:	2800      	cmp	r0, #0
 800abf0:	f000 80ae 	beq.w	800ad50 <_dtoa_r+0x518>
 800abf4:	9b07      	ldr	r3, [sp, #28]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 80aa 	beq.w	800ad50 <_dtoa_r+0x518>
 800abfc:	9b08      	ldr	r3, [sp, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dd37      	ble.n	800ac72 <_dtoa_r+0x43a>
 800ac02:	1e7b      	subs	r3, r7, #1
 800ac04:	4620      	mov	r0, r4
 800ac06:	9304      	str	r3, [sp, #16]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4b55      	ldr	r3, [pc, #340]	@ (800ad64 <_dtoa_r+0x52c>)
 800ac0e:	f7f5 fc63 	bl	80004d8 <__aeabi_dmul>
 800ac12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac16:	9c08      	ldr	r4, [sp, #32]
 800ac18:	3601      	adds	r6, #1
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f7f5 fbf2 	bl	8000404 <__aeabi_i2d>
 800ac20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac24:	f7f5 fc58 	bl	80004d8 <__aeabi_dmul>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4b4f      	ldr	r3, [pc, #316]	@ (800ad68 <_dtoa_r+0x530>)
 800ac2c:	f7f5 fa9e 	bl	800016c <__adddf3>
 800ac30:	4605      	mov	r5, r0
 800ac32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac36:	2c00      	cmp	r4, #0
 800ac38:	f040 809a 	bne.w	800ad70 <_dtoa_r+0x538>
 800ac3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac40:	2200      	movs	r2, #0
 800ac42:	4b4a      	ldr	r3, [pc, #296]	@ (800ad6c <_dtoa_r+0x534>)
 800ac44:	f7f5 fa90 	bl	8000168 <__aeabi_dsub>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac50:	462a      	mov	r2, r5
 800ac52:	4633      	mov	r3, r6
 800ac54:	f7f5 fed0 	bl	80009f8 <__aeabi_dcmpgt>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	f040 828e 	bne.w	800b17a <_dtoa_r+0x942>
 800ac5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac62:	462a      	mov	r2, r5
 800ac64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac68:	f7f5 fea8 	bl	80009bc <__aeabi_dcmplt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f040 8127 	bne.w	800aec0 <_dtoa_r+0x688>
 800ac72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ac7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f2c0 8163 	blt.w	800af48 <_dtoa_r+0x710>
 800ac82:	2f0e      	cmp	r7, #14
 800ac84:	f300 8160 	bgt.w	800af48 <_dtoa_r+0x710>
 800ac88:	4b33      	ldr	r3, [pc, #204]	@ (800ad58 <_dtoa_r+0x520>)
 800ac8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	da03      	bge.n	800aca4 <_dtoa_r+0x46c>
 800ac9c:	9b07      	ldr	r3, [sp, #28]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f340 8100 	ble.w	800aea4 <_dtoa_r+0x66c>
 800aca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aca8:	4656      	mov	r6, sl
 800acaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acae:	4620      	mov	r0, r4
 800acb0:	4629      	mov	r1, r5
 800acb2:	f7f5 fd3b 	bl	800072c <__aeabi_ddiv>
 800acb6:	f7f5 febf 	bl	8000a38 <__aeabi_d2iz>
 800acba:	4680      	mov	r8, r0
 800acbc:	f7f5 fba2 	bl	8000404 <__aeabi_i2d>
 800acc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc4:	f7f5 fc08 	bl	80004d8 <__aeabi_dmul>
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	f7f5 fa4a 	bl	8000168 <__aeabi_dsub>
 800acd4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800acd8:	9d07      	ldr	r5, [sp, #28]
 800acda:	f806 4b01 	strb.w	r4, [r6], #1
 800acde:	eba6 040a 	sub.w	r4, r6, sl
 800ace2:	42a5      	cmp	r5, r4
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	f040 8116 	bne.w	800af18 <_dtoa_r+0x6e0>
 800acec:	f7f5 fa3e 	bl	800016c <__adddf3>
 800acf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acf4:	4604      	mov	r4, r0
 800acf6:	460d      	mov	r5, r1
 800acf8:	f7f5 fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f040 80f8 	bne.w	800aef2 <_dtoa_r+0x6ba>
 800ad02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad06:	4620      	mov	r0, r4
 800ad08:	4629      	mov	r1, r5
 800ad0a:	f7f5 fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 800ad0e:	b118      	cbz	r0, 800ad18 <_dtoa_r+0x4e0>
 800ad10:	f018 0f01 	tst.w	r8, #1
 800ad14:	f040 80ed 	bne.w	800aef2 <_dtoa_r+0x6ba>
 800ad18:	4649      	mov	r1, r9
 800ad1a:	4658      	mov	r0, fp
 800ad1c:	f000 fc92 	bl	800b644 <_Bfree>
 800ad20:	2300      	movs	r3, #0
 800ad22:	7033      	strb	r3, [r6, #0]
 800ad24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ad26:	3701      	adds	r7, #1
 800ad28:	601f      	str	r7, [r3, #0]
 800ad2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 8320 	beq.w	800b372 <_dtoa_r+0xb3a>
 800ad32:	601e      	str	r6, [r3, #0]
 800ad34:	e31d      	b.n	800b372 <_dtoa_r+0xb3a>
 800ad36:	07e2      	lsls	r2, r4, #31
 800ad38:	d505      	bpl.n	800ad46 <_dtoa_r+0x50e>
 800ad3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad3e:	f7f5 fbcb 	bl	80004d8 <__aeabi_dmul>
 800ad42:	2301      	movs	r3, #1
 800ad44:	3601      	adds	r6, #1
 800ad46:	1064      	asrs	r4, r4, #1
 800ad48:	3508      	adds	r5, #8
 800ad4a:	e73f      	b.n	800abcc <_dtoa_r+0x394>
 800ad4c:	2602      	movs	r6, #2
 800ad4e:	e742      	b.n	800abd6 <_dtoa_r+0x39e>
 800ad50:	9c07      	ldr	r4, [sp, #28]
 800ad52:	9704      	str	r7, [sp, #16]
 800ad54:	e761      	b.n	800ac1a <_dtoa_r+0x3e2>
 800ad56:	bf00      	nop
 800ad58:	0800dfe0 	.word	0x0800dfe0
 800ad5c:	0800dfb8 	.word	0x0800dfb8
 800ad60:	3ff00000 	.word	0x3ff00000
 800ad64:	40240000 	.word	0x40240000
 800ad68:	401c0000 	.word	0x401c0000
 800ad6c:	40140000 	.word	0x40140000
 800ad70:	4b70      	ldr	r3, [pc, #448]	@ (800af34 <_dtoa_r+0x6fc>)
 800ad72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad7c:	4454      	add	r4, sl
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	d045      	beq.n	800ae0e <_dtoa_r+0x5d6>
 800ad82:	2000      	movs	r0, #0
 800ad84:	496c      	ldr	r1, [pc, #432]	@ (800af38 <_dtoa_r+0x700>)
 800ad86:	f7f5 fcd1 	bl	800072c <__aeabi_ddiv>
 800ad8a:	4633      	mov	r3, r6
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	f7f5 f9eb 	bl	8000168 <__aeabi_dsub>
 800ad92:	4656      	mov	r6, sl
 800ad94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9c:	f7f5 fe4c 	bl	8000a38 <__aeabi_d2iz>
 800ada0:	4605      	mov	r5, r0
 800ada2:	f7f5 fb2f 	bl	8000404 <__aeabi_i2d>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adae:	f7f5 f9db 	bl	8000168 <__aeabi_dsub>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	3530      	adds	r5, #48	@ 0x30
 800adb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adc0:	f806 5b01 	strb.w	r5, [r6], #1
 800adc4:	f7f5 fdfa 	bl	80009bc <__aeabi_dcmplt>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d163      	bne.n	800ae94 <_dtoa_r+0x65c>
 800adcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800add0:	2000      	movs	r0, #0
 800add2:	495a      	ldr	r1, [pc, #360]	@ (800af3c <_dtoa_r+0x704>)
 800add4:	f7f5 f9c8 	bl	8000168 <__aeabi_dsub>
 800add8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800addc:	f7f5 fdee 	bl	80009bc <__aeabi_dcmplt>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	f040 8087 	bne.w	800aef4 <_dtoa_r+0x6bc>
 800ade6:	42a6      	cmp	r6, r4
 800ade8:	f43f af43 	beq.w	800ac72 <_dtoa_r+0x43a>
 800adec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adf0:	2200      	movs	r2, #0
 800adf2:	4b53      	ldr	r3, [pc, #332]	@ (800af40 <_dtoa_r+0x708>)
 800adf4:	f7f5 fb70 	bl	80004d8 <__aeabi_dmul>
 800adf8:	2200      	movs	r2, #0
 800adfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae02:	4b4f      	ldr	r3, [pc, #316]	@ (800af40 <_dtoa_r+0x708>)
 800ae04:	f7f5 fb68 	bl	80004d8 <__aeabi_dmul>
 800ae08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae0c:	e7c4      	b.n	800ad98 <_dtoa_r+0x560>
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4628      	mov	r0, r5
 800ae12:	f7f5 fb61 	bl	80004d8 <__aeabi_dmul>
 800ae16:	4656      	mov	r6, sl
 800ae18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ae1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae22:	f7f5 fe09 	bl	8000a38 <__aeabi_d2iz>
 800ae26:	4605      	mov	r5, r0
 800ae28:	f7f5 faec 	bl	8000404 <__aeabi_i2d>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae34:	f7f5 f998 	bl	8000168 <__aeabi_dsub>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	3530      	adds	r5, #48	@ 0x30
 800ae3e:	f806 5b01 	strb.w	r5, [r6], #1
 800ae42:	42a6      	cmp	r6, r4
 800ae44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae48:	f04f 0200 	mov.w	r2, #0
 800ae4c:	d124      	bne.n	800ae98 <_dtoa_r+0x660>
 800ae4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae52:	4b39      	ldr	r3, [pc, #228]	@ (800af38 <_dtoa_r+0x700>)
 800ae54:	f7f5 f98a 	bl	800016c <__adddf3>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae60:	f7f5 fdca 	bl	80009f8 <__aeabi_dcmpgt>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d145      	bne.n	800aef4 <_dtoa_r+0x6bc>
 800ae68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	4932      	ldr	r1, [pc, #200]	@ (800af38 <_dtoa_r+0x700>)
 800ae70:	f7f5 f97a 	bl	8000168 <__aeabi_dsub>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7c:	f7f5 fd9e 	bl	80009bc <__aeabi_dcmplt>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	f43f aef6 	beq.w	800ac72 <_dtoa_r+0x43a>
 800ae86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ae88:	1e73      	subs	r3, r6, #1
 800ae8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae90:	2b30      	cmp	r3, #48	@ 0x30
 800ae92:	d0f8      	beq.n	800ae86 <_dtoa_r+0x64e>
 800ae94:	9f04      	ldr	r7, [sp, #16]
 800ae96:	e73f      	b.n	800ad18 <_dtoa_r+0x4e0>
 800ae98:	4b29      	ldr	r3, [pc, #164]	@ (800af40 <_dtoa_r+0x708>)
 800ae9a:	f7f5 fb1d 	bl	80004d8 <__aeabi_dmul>
 800ae9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aea2:	e7bc      	b.n	800ae1e <_dtoa_r+0x5e6>
 800aea4:	d10c      	bne.n	800aec0 <_dtoa_r+0x688>
 800aea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4b25      	ldr	r3, [pc, #148]	@ (800af44 <_dtoa_r+0x70c>)
 800aeae:	f7f5 fb13 	bl	80004d8 <__aeabi_dmul>
 800aeb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeb6:	f7f5 fd95 	bl	80009e4 <__aeabi_dcmpge>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	f000 815b 	beq.w	800b176 <_dtoa_r+0x93e>
 800aec0:	2400      	movs	r4, #0
 800aec2:	4625      	mov	r5, r4
 800aec4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aec6:	4656      	mov	r6, sl
 800aec8:	43db      	mvns	r3, r3
 800aeca:	9304      	str	r3, [sp, #16]
 800aecc:	2700      	movs	r7, #0
 800aece:	4621      	mov	r1, r4
 800aed0:	4658      	mov	r0, fp
 800aed2:	f000 fbb7 	bl	800b644 <_Bfree>
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	d0dc      	beq.n	800ae94 <_dtoa_r+0x65c>
 800aeda:	b12f      	cbz	r7, 800aee8 <_dtoa_r+0x6b0>
 800aedc:	42af      	cmp	r7, r5
 800aede:	d003      	beq.n	800aee8 <_dtoa_r+0x6b0>
 800aee0:	4639      	mov	r1, r7
 800aee2:	4658      	mov	r0, fp
 800aee4:	f000 fbae 	bl	800b644 <_Bfree>
 800aee8:	4629      	mov	r1, r5
 800aeea:	4658      	mov	r0, fp
 800aeec:	f000 fbaa 	bl	800b644 <_Bfree>
 800aef0:	e7d0      	b.n	800ae94 <_dtoa_r+0x65c>
 800aef2:	9704      	str	r7, [sp, #16]
 800aef4:	4633      	mov	r3, r6
 800aef6:	461e      	mov	r6, r3
 800aef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aefc:	2a39      	cmp	r2, #57	@ 0x39
 800aefe:	d107      	bne.n	800af10 <_dtoa_r+0x6d8>
 800af00:	459a      	cmp	sl, r3
 800af02:	d1f8      	bne.n	800aef6 <_dtoa_r+0x6be>
 800af04:	9a04      	ldr	r2, [sp, #16]
 800af06:	3201      	adds	r2, #1
 800af08:	9204      	str	r2, [sp, #16]
 800af0a:	2230      	movs	r2, #48	@ 0x30
 800af0c:	f88a 2000 	strb.w	r2, [sl]
 800af10:	781a      	ldrb	r2, [r3, #0]
 800af12:	3201      	adds	r2, #1
 800af14:	701a      	strb	r2, [r3, #0]
 800af16:	e7bd      	b.n	800ae94 <_dtoa_r+0x65c>
 800af18:	2200      	movs	r2, #0
 800af1a:	4b09      	ldr	r3, [pc, #36]	@ (800af40 <_dtoa_r+0x708>)
 800af1c:	f7f5 fadc 	bl	80004d8 <__aeabi_dmul>
 800af20:	2200      	movs	r2, #0
 800af22:	2300      	movs	r3, #0
 800af24:	4604      	mov	r4, r0
 800af26:	460d      	mov	r5, r1
 800af28:	f7f5 fd3e 	bl	80009a8 <__aeabi_dcmpeq>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f43f aebc 	beq.w	800acaa <_dtoa_r+0x472>
 800af32:	e6f1      	b.n	800ad18 <_dtoa_r+0x4e0>
 800af34:	0800dfe0 	.word	0x0800dfe0
 800af38:	3fe00000 	.word	0x3fe00000
 800af3c:	3ff00000 	.word	0x3ff00000
 800af40:	40240000 	.word	0x40240000
 800af44:	40140000 	.word	0x40140000
 800af48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	f000 80db 	beq.w	800b106 <_dtoa_r+0x8ce>
 800af50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800af52:	2a01      	cmp	r2, #1
 800af54:	f300 80bf 	bgt.w	800b0d6 <_dtoa_r+0x89e>
 800af58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af5a:	2a00      	cmp	r2, #0
 800af5c:	f000 80b7 	beq.w	800b0ce <_dtoa_r+0x896>
 800af60:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af64:	4646      	mov	r6, r8
 800af66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af6a:	2101      	movs	r1, #1
 800af6c:	441a      	add	r2, r3
 800af6e:	4658      	mov	r0, fp
 800af70:	4498      	add	r8, r3
 800af72:	9209      	str	r2, [sp, #36]	@ 0x24
 800af74:	f000 fc64 	bl	800b840 <__i2b>
 800af78:	4605      	mov	r5, r0
 800af7a:	b15e      	cbz	r6, 800af94 <_dtoa_r+0x75c>
 800af7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dd08      	ble.n	800af94 <_dtoa_r+0x75c>
 800af82:	42b3      	cmp	r3, r6
 800af84:	bfa8      	it	ge
 800af86:	4633      	movge	r3, r6
 800af88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af8a:	eba8 0803 	sub.w	r8, r8, r3
 800af8e:	1af6      	subs	r6, r6, r3
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	9309      	str	r3, [sp, #36]	@ 0x24
 800af94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af96:	b1f3      	cbz	r3, 800afd6 <_dtoa_r+0x79e>
 800af98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 80b7 	beq.w	800b10e <_dtoa_r+0x8d6>
 800afa0:	b18c      	cbz	r4, 800afc6 <_dtoa_r+0x78e>
 800afa2:	4629      	mov	r1, r5
 800afa4:	4622      	mov	r2, r4
 800afa6:	4658      	mov	r0, fp
 800afa8:	f000 fd08 	bl	800b9bc <__pow5mult>
 800afac:	464a      	mov	r2, r9
 800afae:	4601      	mov	r1, r0
 800afb0:	4605      	mov	r5, r0
 800afb2:	4658      	mov	r0, fp
 800afb4:	f000 fc5a 	bl	800b86c <__multiply>
 800afb8:	4649      	mov	r1, r9
 800afba:	9004      	str	r0, [sp, #16]
 800afbc:	4658      	mov	r0, fp
 800afbe:	f000 fb41 	bl	800b644 <_Bfree>
 800afc2:	9b04      	ldr	r3, [sp, #16]
 800afc4:	4699      	mov	r9, r3
 800afc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afc8:	1b1a      	subs	r2, r3, r4
 800afca:	d004      	beq.n	800afd6 <_dtoa_r+0x79e>
 800afcc:	4649      	mov	r1, r9
 800afce:	4658      	mov	r0, fp
 800afd0:	f000 fcf4 	bl	800b9bc <__pow5mult>
 800afd4:	4681      	mov	r9, r0
 800afd6:	2101      	movs	r1, #1
 800afd8:	4658      	mov	r0, fp
 800afda:	f000 fc31 	bl	800b840 <__i2b>
 800afde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afe0:	4604      	mov	r4, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 81c9 	beq.w	800b37a <_dtoa_r+0xb42>
 800afe8:	461a      	mov	r2, r3
 800afea:	4601      	mov	r1, r0
 800afec:	4658      	mov	r0, fp
 800afee:	f000 fce5 	bl	800b9bc <__pow5mult>
 800aff2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aff4:	4604      	mov	r4, r0
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	f300 808f 	bgt.w	800b11a <_dtoa_r+0x8e2>
 800affc:	9b02      	ldr	r3, [sp, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f040 8087 	bne.w	800b112 <_dtoa_r+0x8da>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f040 8083 	bne.w	800b116 <_dtoa_r+0x8de>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b016:	0d1b      	lsrs	r3, r3, #20
 800b018:	051b      	lsls	r3, r3, #20
 800b01a:	b12b      	cbz	r3, 800b028 <_dtoa_r+0x7f0>
 800b01c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01e:	f108 0801 	add.w	r8, r8, #1
 800b022:	3301      	adds	r3, #1
 800b024:	9309      	str	r3, [sp, #36]	@ 0x24
 800b026:	2301      	movs	r3, #1
 800b028:	930a      	str	r3, [sp, #40]	@ 0x28
 800b02a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 81aa 	beq.w	800b386 <_dtoa_r+0xb4e>
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b038:	6918      	ldr	r0, [r3, #16]
 800b03a:	f000 fbb5 	bl	800b7a8 <__hi0bits>
 800b03e:	f1c0 0020 	rsb	r0, r0, #32
 800b042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b044:	4418      	add	r0, r3
 800b046:	f010 001f 	ands.w	r0, r0, #31
 800b04a:	d071      	beq.n	800b130 <_dtoa_r+0x8f8>
 800b04c:	f1c0 0320 	rsb	r3, r0, #32
 800b050:	2b04      	cmp	r3, #4
 800b052:	dd65      	ble.n	800b120 <_dtoa_r+0x8e8>
 800b054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b056:	f1c0 001c 	rsb	r0, r0, #28
 800b05a:	4403      	add	r3, r0
 800b05c:	4480      	add	r8, r0
 800b05e:	4406      	add	r6, r0
 800b060:	9309      	str	r3, [sp, #36]	@ 0x24
 800b062:	f1b8 0f00 	cmp.w	r8, #0
 800b066:	dd05      	ble.n	800b074 <_dtoa_r+0x83c>
 800b068:	4649      	mov	r1, r9
 800b06a:	4642      	mov	r2, r8
 800b06c:	4658      	mov	r0, fp
 800b06e:	f000 fcff 	bl	800ba70 <__lshift>
 800b072:	4681      	mov	r9, r0
 800b074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	dd05      	ble.n	800b086 <_dtoa_r+0x84e>
 800b07a:	4621      	mov	r1, r4
 800b07c:	461a      	mov	r2, r3
 800b07e:	4658      	mov	r0, fp
 800b080:	f000 fcf6 	bl	800ba70 <__lshift>
 800b084:	4604      	mov	r4, r0
 800b086:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d053      	beq.n	800b134 <_dtoa_r+0x8fc>
 800b08c:	4621      	mov	r1, r4
 800b08e:	4648      	mov	r0, r9
 800b090:	f000 fd5a 	bl	800bb48 <__mcmp>
 800b094:	2800      	cmp	r0, #0
 800b096:	da4d      	bge.n	800b134 <_dtoa_r+0x8fc>
 800b098:	1e7b      	subs	r3, r7, #1
 800b09a:	4649      	mov	r1, r9
 800b09c:	9304      	str	r3, [sp, #16]
 800b09e:	220a      	movs	r2, #10
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4658      	mov	r0, fp
 800b0a4:	f000 faf0 	bl	800b688 <__multadd>
 800b0a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0aa:	4681      	mov	r9, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 816c 	beq.w	800b38a <_dtoa_r+0xb52>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	220a      	movs	r2, #10
 800b0b8:	4658      	mov	r0, fp
 800b0ba:	f000 fae5 	bl	800b688 <__multadd>
 800b0be:	9b08      	ldr	r3, [sp, #32]
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dc61      	bgt.n	800b18a <_dtoa_r+0x952>
 800b0c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	dc3b      	bgt.n	800b144 <_dtoa_r+0x90c>
 800b0cc:	e05d      	b.n	800b18a <_dtoa_r+0x952>
 800b0ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0d4:	e746      	b.n	800af64 <_dtoa_r+0x72c>
 800b0d6:	9b07      	ldr	r3, [sp, #28]
 800b0d8:	1e5c      	subs	r4, r3, #1
 800b0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	bfbf      	itttt	lt
 800b0e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b0e4:	1ae3      	sublt	r3, r4, r3
 800b0e6:	18d2      	addlt	r2, r2, r3
 800b0e8:	bfa8      	it	ge
 800b0ea:	1b1c      	subge	r4, r3, r4
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	bfbe      	ittt	lt
 800b0f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b0f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b0f4:	2400      	movlt	r4, #0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	bfb5      	itete	lt
 800b0fa:	eba8 0603 	sublt.w	r6, r8, r3
 800b0fe:	4646      	movge	r6, r8
 800b100:	2300      	movlt	r3, #0
 800b102:	9b07      	ldrge	r3, [sp, #28]
 800b104:	e730      	b.n	800af68 <_dtoa_r+0x730>
 800b106:	4646      	mov	r6, r8
 800b108:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b10a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b10c:	e735      	b.n	800af7a <_dtoa_r+0x742>
 800b10e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b110:	e75c      	b.n	800afcc <_dtoa_r+0x794>
 800b112:	2300      	movs	r3, #0
 800b114:	e788      	b.n	800b028 <_dtoa_r+0x7f0>
 800b116:	9b02      	ldr	r3, [sp, #8]
 800b118:	e786      	b.n	800b028 <_dtoa_r+0x7f0>
 800b11a:	2300      	movs	r3, #0
 800b11c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b11e:	e788      	b.n	800b032 <_dtoa_r+0x7fa>
 800b120:	d09f      	beq.n	800b062 <_dtoa_r+0x82a>
 800b122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b124:	331c      	adds	r3, #28
 800b126:	441a      	add	r2, r3
 800b128:	4498      	add	r8, r3
 800b12a:	441e      	add	r6, r3
 800b12c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b12e:	e798      	b.n	800b062 <_dtoa_r+0x82a>
 800b130:	4603      	mov	r3, r0
 800b132:	e7f6      	b.n	800b122 <_dtoa_r+0x8ea>
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	9704      	str	r7, [sp, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dc20      	bgt.n	800b17e <_dtoa_r+0x946>
 800b13c:	9308      	str	r3, [sp, #32]
 800b13e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b140:	2b02      	cmp	r3, #2
 800b142:	dd1e      	ble.n	800b182 <_dtoa_r+0x94a>
 800b144:	9b08      	ldr	r3, [sp, #32]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f47f aebc 	bne.w	800aec4 <_dtoa_r+0x68c>
 800b14c:	4621      	mov	r1, r4
 800b14e:	2205      	movs	r2, #5
 800b150:	4658      	mov	r0, fp
 800b152:	f000 fa99 	bl	800b688 <__multadd>
 800b156:	4601      	mov	r1, r0
 800b158:	4604      	mov	r4, r0
 800b15a:	4648      	mov	r0, r9
 800b15c:	f000 fcf4 	bl	800bb48 <__mcmp>
 800b160:	2800      	cmp	r0, #0
 800b162:	f77f aeaf 	ble.w	800aec4 <_dtoa_r+0x68c>
 800b166:	2331      	movs	r3, #49	@ 0x31
 800b168:	4656      	mov	r6, sl
 800b16a:	f806 3b01 	strb.w	r3, [r6], #1
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	3301      	adds	r3, #1
 800b172:	9304      	str	r3, [sp, #16]
 800b174:	e6aa      	b.n	800aecc <_dtoa_r+0x694>
 800b176:	9c07      	ldr	r4, [sp, #28]
 800b178:	9704      	str	r7, [sp, #16]
 800b17a:	4625      	mov	r5, r4
 800b17c:	e7f3      	b.n	800b166 <_dtoa_r+0x92e>
 800b17e:	9b07      	ldr	r3, [sp, #28]
 800b180:	9308      	str	r3, [sp, #32]
 800b182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 8104 	beq.w	800b392 <_dtoa_r+0xb5a>
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	dd05      	ble.n	800b19a <_dtoa_r+0x962>
 800b18e:	4629      	mov	r1, r5
 800b190:	4632      	mov	r2, r6
 800b192:	4658      	mov	r0, fp
 800b194:	f000 fc6c 	bl	800ba70 <__lshift>
 800b198:	4605      	mov	r5, r0
 800b19a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05a      	beq.n	800b256 <_dtoa_r+0xa1e>
 800b1a0:	4658      	mov	r0, fp
 800b1a2:	6869      	ldr	r1, [r5, #4]
 800b1a4:	f000 fa0e 	bl	800b5c4 <_Balloc>
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	b928      	cbnz	r0, 800b1b8 <_dtoa_r+0x980>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1b2:	4b83      	ldr	r3, [pc, #524]	@ (800b3c0 <_dtoa_r+0xb88>)
 800b1b4:	f7ff bb54 	b.w	800a860 <_dtoa_r+0x28>
 800b1b8:	692a      	ldr	r2, [r5, #16]
 800b1ba:	f105 010c 	add.w	r1, r5, #12
 800b1be:	3202      	adds	r2, #2
 800b1c0:	0092      	lsls	r2, r2, #2
 800b1c2:	300c      	adds	r0, #12
 800b1c4:	f7ff fa9b 	bl	800a6fe <memcpy>
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4658      	mov	r0, fp
 800b1ce:	f000 fc4f 	bl	800ba70 <__lshift>
 800b1d2:	462f      	mov	r7, r5
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	f10a 0301 	add.w	r3, sl, #1
 800b1da:	9307      	str	r3, [sp, #28]
 800b1dc:	9b08      	ldr	r3, [sp, #32]
 800b1de:	4453      	add	r3, sl
 800b1e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1e2:	9b02      	ldr	r3, [sp, #8]
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1ea:	9b07      	ldr	r3, [sp, #28]
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	4648      	mov	r0, r9
 800b1f2:	9302      	str	r3, [sp, #8]
 800b1f4:	f7ff fa96 	bl	800a724 <quorem>
 800b1f8:	4639      	mov	r1, r7
 800b1fa:	9008      	str	r0, [sp, #32]
 800b1fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b200:	4648      	mov	r0, r9
 800b202:	f000 fca1 	bl	800bb48 <__mcmp>
 800b206:	462a      	mov	r2, r5
 800b208:	9009      	str	r0, [sp, #36]	@ 0x24
 800b20a:	4621      	mov	r1, r4
 800b20c:	4658      	mov	r0, fp
 800b20e:	f000 fcb7 	bl	800bb80 <__mdiff>
 800b212:	68c2      	ldr	r2, [r0, #12]
 800b214:	4606      	mov	r6, r0
 800b216:	bb02      	cbnz	r2, 800b25a <_dtoa_r+0xa22>
 800b218:	4601      	mov	r1, r0
 800b21a:	4648      	mov	r0, r9
 800b21c:	f000 fc94 	bl	800bb48 <__mcmp>
 800b220:	4602      	mov	r2, r0
 800b222:	4631      	mov	r1, r6
 800b224:	4658      	mov	r0, fp
 800b226:	920c      	str	r2, [sp, #48]	@ 0x30
 800b228:	f000 fa0c 	bl	800b644 <_Bfree>
 800b22c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b22e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b230:	9e07      	ldr	r6, [sp, #28]
 800b232:	ea43 0102 	orr.w	r1, r3, r2
 800b236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b238:	4319      	orrs	r1, r3
 800b23a:	d110      	bne.n	800b25e <_dtoa_r+0xa26>
 800b23c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b240:	d029      	beq.n	800b296 <_dtoa_r+0xa5e>
 800b242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	dd02      	ble.n	800b24e <_dtoa_r+0xa16>
 800b248:	9b08      	ldr	r3, [sp, #32]
 800b24a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b24e:	9b02      	ldr	r3, [sp, #8]
 800b250:	f883 8000 	strb.w	r8, [r3]
 800b254:	e63b      	b.n	800aece <_dtoa_r+0x696>
 800b256:	4628      	mov	r0, r5
 800b258:	e7bb      	b.n	800b1d2 <_dtoa_r+0x99a>
 800b25a:	2201      	movs	r2, #1
 800b25c:	e7e1      	b.n	800b222 <_dtoa_r+0x9ea>
 800b25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b260:	2b00      	cmp	r3, #0
 800b262:	db04      	blt.n	800b26e <_dtoa_r+0xa36>
 800b264:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b266:	430b      	orrs	r3, r1
 800b268:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b26a:	430b      	orrs	r3, r1
 800b26c:	d120      	bne.n	800b2b0 <_dtoa_r+0xa78>
 800b26e:	2a00      	cmp	r2, #0
 800b270:	dded      	ble.n	800b24e <_dtoa_r+0xa16>
 800b272:	4649      	mov	r1, r9
 800b274:	2201      	movs	r2, #1
 800b276:	4658      	mov	r0, fp
 800b278:	f000 fbfa 	bl	800ba70 <__lshift>
 800b27c:	4621      	mov	r1, r4
 800b27e:	4681      	mov	r9, r0
 800b280:	f000 fc62 	bl	800bb48 <__mcmp>
 800b284:	2800      	cmp	r0, #0
 800b286:	dc03      	bgt.n	800b290 <_dtoa_r+0xa58>
 800b288:	d1e1      	bne.n	800b24e <_dtoa_r+0xa16>
 800b28a:	f018 0f01 	tst.w	r8, #1
 800b28e:	d0de      	beq.n	800b24e <_dtoa_r+0xa16>
 800b290:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b294:	d1d8      	bne.n	800b248 <_dtoa_r+0xa10>
 800b296:	2339      	movs	r3, #57	@ 0x39
 800b298:	9a02      	ldr	r2, [sp, #8]
 800b29a:	7013      	strb	r3, [r2, #0]
 800b29c:	4633      	mov	r3, r6
 800b29e:	461e      	mov	r6, r3
 800b2a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	2a39      	cmp	r2, #57	@ 0x39
 800b2a8:	d052      	beq.n	800b350 <_dtoa_r+0xb18>
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	701a      	strb	r2, [r3, #0]
 800b2ae:	e60e      	b.n	800aece <_dtoa_r+0x696>
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	dd07      	ble.n	800b2c4 <_dtoa_r+0xa8c>
 800b2b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2b8:	d0ed      	beq.n	800b296 <_dtoa_r+0xa5e>
 800b2ba:	9a02      	ldr	r2, [sp, #8]
 800b2bc:	f108 0301 	add.w	r3, r8, #1
 800b2c0:	7013      	strb	r3, [r2, #0]
 800b2c2:	e604      	b.n	800aece <_dtoa_r+0x696>
 800b2c4:	9b07      	ldr	r3, [sp, #28]
 800b2c6:	9a07      	ldr	r2, [sp, #28]
 800b2c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b2cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d028      	beq.n	800b324 <_dtoa_r+0xaec>
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	220a      	movs	r2, #10
 800b2d8:	4658      	mov	r0, fp
 800b2da:	f000 f9d5 	bl	800b688 <__multadd>
 800b2de:	42af      	cmp	r7, r5
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	f04f 020a 	mov.w	r2, #10
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	4658      	mov	r0, fp
 800b2ee:	d107      	bne.n	800b300 <_dtoa_r+0xac8>
 800b2f0:	f000 f9ca 	bl	800b688 <__multadd>
 800b2f4:	4607      	mov	r7, r0
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	9b07      	ldr	r3, [sp, #28]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	9307      	str	r3, [sp, #28]
 800b2fe:	e774      	b.n	800b1ea <_dtoa_r+0x9b2>
 800b300:	f000 f9c2 	bl	800b688 <__multadd>
 800b304:	4629      	mov	r1, r5
 800b306:	4607      	mov	r7, r0
 800b308:	2300      	movs	r3, #0
 800b30a:	220a      	movs	r2, #10
 800b30c:	4658      	mov	r0, fp
 800b30e:	f000 f9bb 	bl	800b688 <__multadd>
 800b312:	4605      	mov	r5, r0
 800b314:	e7f0      	b.n	800b2f8 <_dtoa_r+0xac0>
 800b316:	9b08      	ldr	r3, [sp, #32]
 800b318:	2700      	movs	r7, #0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfcc      	ite	gt
 800b31e:	461e      	movgt	r6, r3
 800b320:	2601      	movle	r6, #1
 800b322:	4456      	add	r6, sl
 800b324:	4649      	mov	r1, r9
 800b326:	2201      	movs	r2, #1
 800b328:	4658      	mov	r0, fp
 800b32a:	f000 fba1 	bl	800ba70 <__lshift>
 800b32e:	4621      	mov	r1, r4
 800b330:	4681      	mov	r9, r0
 800b332:	f000 fc09 	bl	800bb48 <__mcmp>
 800b336:	2800      	cmp	r0, #0
 800b338:	dcb0      	bgt.n	800b29c <_dtoa_r+0xa64>
 800b33a:	d102      	bne.n	800b342 <_dtoa_r+0xb0a>
 800b33c:	f018 0f01 	tst.w	r8, #1
 800b340:	d1ac      	bne.n	800b29c <_dtoa_r+0xa64>
 800b342:	4633      	mov	r3, r6
 800b344:	461e      	mov	r6, r3
 800b346:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b34a:	2a30      	cmp	r2, #48	@ 0x30
 800b34c:	d0fa      	beq.n	800b344 <_dtoa_r+0xb0c>
 800b34e:	e5be      	b.n	800aece <_dtoa_r+0x696>
 800b350:	459a      	cmp	sl, r3
 800b352:	d1a4      	bne.n	800b29e <_dtoa_r+0xa66>
 800b354:	9b04      	ldr	r3, [sp, #16]
 800b356:	3301      	adds	r3, #1
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	2331      	movs	r3, #49	@ 0x31
 800b35c:	f88a 3000 	strb.w	r3, [sl]
 800b360:	e5b5      	b.n	800aece <_dtoa_r+0x696>
 800b362:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b364:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b3c4 <_dtoa_r+0xb8c>
 800b368:	b11b      	cbz	r3, 800b372 <_dtoa_r+0xb3a>
 800b36a:	f10a 0308 	add.w	r3, sl, #8
 800b36e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	4650      	mov	r0, sl
 800b374:	b017      	add	sp, #92	@ 0x5c
 800b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	f77f ae3d 	ble.w	800affc <_dtoa_r+0x7c4>
 800b382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b384:	930a      	str	r3, [sp, #40]	@ 0x28
 800b386:	2001      	movs	r0, #1
 800b388:	e65b      	b.n	800b042 <_dtoa_r+0x80a>
 800b38a:	9b08      	ldr	r3, [sp, #32]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f77f aed6 	ble.w	800b13e <_dtoa_r+0x906>
 800b392:	4656      	mov	r6, sl
 800b394:	4621      	mov	r1, r4
 800b396:	4648      	mov	r0, r9
 800b398:	f7ff f9c4 	bl	800a724 <quorem>
 800b39c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3a0:	9b08      	ldr	r3, [sp, #32]
 800b3a2:	f806 8b01 	strb.w	r8, [r6], #1
 800b3a6:	eba6 020a 	sub.w	r2, r6, sl
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	ddb3      	ble.n	800b316 <_dtoa_r+0xade>
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	220a      	movs	r2, #10
 800b3b4:	4658      	mov	r0, fp
 800b3b6:	f000 f967 	bl	800b688 <__multadd>
 800b3ba:	4681      	mov	r9, r0
 800b3bc:	e7ea      	b.n	800b394 <_dtoa_r+0xb5c>
 800b3be:	bf00      	nop
 800b3c0:	0800df3c 	.word	0x0800df3c
 800b3c4:	0800dec0 	.word	0x0800dec0

0800b3c8 <_free_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	d040      	beq.n	800b452 <_free_r+0x8a>
 800b3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d4:	1f0c      	subs	r4, r1, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bfb8      	it	lt
 800b3da:	18e4      	addlt	r4, r4, r3
 800b3dc:	f000 f8e6 	bl	800b5ac <__malloc_lock>
 800b3e0:	4a1c      	ldr	r2, [pc, #112]	@ (800b454 <_free_r+0x8c>)
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	b933      	cbnz	r3, 800b3f4 <_free_r+0x2c>
 800b3e6:	6063      	str	r3, [r4, #4]
 800b3e8:	6014      	str	r4, [r2, #0]
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3f0:	f000 b8e2 	b.w	800b5b8 <__malloc_unlock>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d908      	bls.n	800b40a <_free_r+0x42>
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	1821      	adds	r1, r4, r0
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf01      	itttt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	1809      	addeq	r1, r1, r0
 800b406:	6021      	streq	r1, [r4, #0]
 800b408:	e7ed      	b.n	800b3e6 <_free_r+0x1e>
 800b40a:	461a      	mov	r2, r3
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	b10b      	cbz	r3, 800b414 <_free_r+0x4c>
 800b410:	42a3      	cmp	r3, r4
 800b412:	d9fa      	bls.n	800b40a <_free_r+0x42>
 800b414:	6811      	ldr	r1, [r2, #0]
 800b416:	1850      	adds	r0, r2, r1
 800b418:	42a0      	cmp	r0, r4
 800b41a:	d10b      	bne.n	800b434 <_free_r+0x6c>
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	4401      	add	r1, r0
 800b420:	1850      	adds	r0, r2, r1
 800b422:	4283      	cmp	r3, r0
 800b424:	6011      	str	r1, [r2, #0]
 800b426:	d1e0      	bne.n	800b3ea <_free_r+0x22>
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	4408      	add	r0, r1
 800b42e:	6010      	str	r0, [r2, #0]
 800b430:	6053      	str	r3, [r2, #4]
 800b432:	e7da      	b.n	800b3ea <_free_r+0x22>
 800b434:	d902      	bls.n	800b43c <_free_r+0x74>
 800b436:	230c      	movs	r3, #12
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	e7d6      	b.n	800b3ea <_free_r+0x22>
 800b43c:	6820      	ldr	r0, [r4, #0]
 800b43e:	1821      	adds	r1, r4, r0
 800b440:	428b      	cmp	r3, r1
 800b442:	bf01      	itttt	eq
 800b444:	6819      	ldreq	r1, [r3, #0]
 800b446:	685b      	ldreq	r3, [r3, #4]
 800b448:	1809      	addeq	r1, r1, r0
 800b44a:	6021      	streq	r1, [r4, #0]
 800b44c:	6063      	str	r3, [r4, #4]
 800b44e:	6054      	str	r4, [r2, #4]
 800b450:	e7cb      	b.n	800b3ea <_free_r+0x22>
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	2000237c 	.word	0x2000237c

0800b458 <malloc>:
 800b458:	4b02      	ldr	r3, [pc, #8]	@ (800b464 <malloc+0xc>)
 800b45a:	4601      	mov	r1, r0
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f000 b825 	b.w	800b4ac <_malloc_r>
 800b462:	bf00      	nop
 800b464:	2000001c 	.word	0x2000001c

0800b468 <sbrk_aligned>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	4e0f      	ldr	r6, [pc, #60]	@ (800b4a8 <sbrk_aligned+0x40>)
 800b46c:	460c      	mov	r4, r1
 800b46e:	6831      	ldr	r1, [r6, #0]
 800b470:	4605      	mov	r5, r0
 800b472:	b911      	cbnz	r1, 800b47a <sbrk_aligned+0x12>
 800b474:	f001 ff2c 	bl	800d2d0 <_sbrk_r>
 800b478:	6030      	str	r0, [r6, #0]
 800b47a:	4621      	mov	r1, r4
 800b47c:	4628      	mov	r0, r5
 800b47e:	f001 ff27 	bl	800d2d0 <_sbrk_r>
 800b482:	1c43      	adds	r3, r0, #1
 800b484:	d103      	bne.n	800b48e <sbrk_aligned+0x26>
 800b486:	f04f 34ff 	mov.w	r4, #4294967295
 800b48a:	4620      	mov	r0, r4
 800b48c:	bd70      	pop	{r4, r5, r6, pc}
 800b48e:	1cc4      	adds	r4, r0, #3
 800b490:	f024 0403 	bic.w	r4, r4, #3
 800b494:	42a0      	cmp	r0, r4
 800b496:	d0f8      	beq.n	800b48a <sbrk_aligned+0x22>
 800b498:	1a21      	subs	r1, r4, r0
 800b49a:	4628      	mov	r0, r5
 800b49c:	f001 ff18 	bl	800d2d0 <_sbrk_r>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d1f2      	bne.n	800b48a <sbrk_aligned+0x22>
 800b4a4:	e7ef      	b.n	800b486 <sbrk_aligned+0x1e>
 800b4a6:	bf00      	nop
 800b4a8:	20002378 	.word	0x20002378

0800b4ac <_malloc_r>:
 800b4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	1ccd      	adds	r5, r1, #3
 800b4b2:	f025 0503 	bic.w	r5, r5, #3
 800b4b6:	3508      	adds	r5, #8
 800b4b8:	2d0c      	cmp	r5, #12
 800b4ba:	bf38      	it	cc
 800b4bc:	250c      	movcc	r5, #12
 800b4be:	2d00      	cmp	r5, #0
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	db01      	blt.n	800b4c8 <_malloc_r+0x1c>
 800b4c4:	42a9      	cmp	r1, r5
 800b4c6:	d904      	bls.n	800b4d2 <_malloc_r+0x26>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	6033      	str	r3, [r6, #0]
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5a8 <_malloc_r+0xfc>
 800b4d6:	f000 f869 	bl	800b5ac <__malloc_lock>
 800b4da:	f8d8 3000 	ldr.w	r3, [r8]
 800b4de:	461c      	mov	r4, r3
 800b4e0:	bb44      	cbnz	r4, 800b534 <_malloc_r+0x88>
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7ff ffbf 	bl	800b468 <sbrk_aligned>
 800b4ea:	1c43      	adds	r3, r0, #1
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	d158      	bne.n	800b5a2 <_malloc_r+0xf6>
 800b4f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b4f4:	4627      	mov	r7, r4
 800b4f6:	2f00      	cmp	r7, #0
 800b4f8:	d143      	bne.n	800b582 <_malloc_r+0xd6>
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	d04b      	beq.n	800b596 <_malloc_r+0xea>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	4639      	mov	r1, r7
 800b502:	4630      	mov	r0, r6
 800b504:	eb04 0903 	add.w	r9, r4, r3
 800b508:	f001 fee2 	bl	800d2d0 <_sbrk_r>
 800b50c:	4581      	cmp	r9, r0
 800b50e:	d142      	bne.n	800b596 <_malloc_r+0xea>
 800b510:	6821      	ldr	r1, [r4, #0]
 800b512:	4630      	mov	r0, r6
 800b514:	1a6d      	subs	r5, r5, r1
 800b516:	4629      	mov	r1, r5
 800b518:	f7ff ffa6 	bl	800b468 <sbrk_aligned>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d03a      	beq.n	800b596 <_malloc_r+0xea>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	442b      	add	r3, r5
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	f8d8 3000 	ldr.w	r3, [r8]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	bb62      	cbnz	r2, 800b588 <_malloc_r+0xdc>
 800b52e:	f8c8 7000 	str.w	r7, [r8]
 800b532:	e00f      	b.n	800b554 <_malloc_r+0xa8>
 800b534:	6822      	ldr	r2, [r4, #0]
 800b536:	1b52      	subs	r2, r2, r5
 800b538:	d420      	bmi.n	800b57c <_malloc_r+0xd0>
 800b53a:	2a0b      	cmp	r2, #11
 800b53c:	d917      	bls.n	800b56e <_malloc_r+0xc2>
 800b53e:	1961      	adds	r1, r4, r5
 800b540:	42a3      	cmp	r3, r4
 800b542:	6025      	str	r5, [r4, #0]
 800b544:	bf18      	it	ne
 800b546:	6059      	strne	r1, [r3, #4]
 800b548:	6863      	ldr	r3, [r4, #4]
 800b54a:	bf08      	it	eq
 800b54c:	f8c8 1000 	streq.w	r1, [r8]
 800b550:	5162      	str	r2, [r4, r5]
 800b552:	604b      	str	r3, [r1, #4]
 800b554:	4630      	mov	r0, r6
 800b556:	f000 f82f 	bl	800b5b8 <__malloc_unlock>
 800b55a:	f104 000b 	add.w	r0, r4, #11
 800b55e:	1d23      	adds	r3, r4, #4
 800b560:	f020 0007 	bic.w	r0, r0, #7
 800b564:	1ac2      	subs	r2, r0, r3
 800b566:	bf1c      	itt	ne
 800b568:	1a1b      	subne	r3, r3, r0
 800b56a:	50a3      	strne	r3, [r4, r2]
 800b56c:	e7af      	b.n	800b4ce <_malloc_r+0x22>
 800b56e:	6862      	ldr	r2, [r4, #4]
 800b570:	42a3      	cmp	r3, r4
 800b572:	bf0c      	ite	eq
 800b574:	f8c8 2000 	streq.w	r2, [r8]
 800b578:	605a      	strne	r2, [r3, #4]
 800b57a:	e7eb      	b.n	800b554 <_malloc_r+0xa8>
 800b57c:	4623      	mov	r3, r4
 800b57e:	6864      	ldr	r4, [r4, #4]
 800b580:	e7ae      	b.n	800b4e0 <_malloc_r+0x34>
 800b582:	463c      	mov	r4, r7
 800b584:	687f      	ldr	r7, [r7, #4]
 800b586:	e7b6      	b.n	800b4f6 <_malloc_r+0x4a>
 800b588:	461a      	mov	r2, r3
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d1fb      	bne.n	800b588 <_malloc_r+0xdc>
 800b590:	2300      	movs	r3, #0
 800b592:	6053      	str	r3, [r2, #4]
 800b594:	e7de      	b.n	800b554 <_malloc_r+0xa8>
 800b596:	230c      	movs	r3, #12
 800b598:	4630      	mov	r0, r6
 800b59a:	6033      	str	r3, [r6, #0]
 800b59c:	f000 f80c 	bl	800b5b8 <__malloc_unlock>
 800b5a0:	e794      	b.n	800b4cc <_malloc_r+0x20>
 800b5a2:	6005      	str	r5, [r0, #0]
 800b5a4:	e7d6      	b.n	800b554 <_malloc_r+0xa8>
 800b5a6:	bf00      	nop
 800b5a8:	2000237c 	.word	0x2000237c

0800b5ac <__malloc_lock>:
 800b5ac:	4801      	ldr	r0, [pc, #4]	@ (800b5b4 <__malloc_lock+0x8>)
 800b5ae:	f7ff b896 	b.w	800a6de <__retarget_lock_acquire_recursive>
 800b5b2:	bf00      	nop
 800b5b4:	20002374 	.word	0x20002374

0800b5b8 <__malloc_unlock>:
 800b5b8:	4801      	ldr	r0, [pc, #4]	@ (800b5c0 <__malloc_unlock+0x8>)
 800b5ba:	f7ff b891 	b.w	800a6e0 <__retarget_lock_release_recursive>
 800b5be:	bf00      	nop
 800b5c0:	20002374 	.word	0x20002374

0800b5c4 <_Balloc>:
 800b5c4:	b570      	push	{r4, r5, r6, lr}
 800b5c6:	69c6      	ldr	r6, [r0, #28]
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	b976      	cbnz	r6, 800b5ec <_Balloc+0x28>
 800b5ce:	2010      	movs	r0, #16
 800b5d0:	f7ff ff42 	bl	800b458 <malloc>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	61e0      	str	r0, [r4, #28]
 800b5d8:	b920      	cbnz	r0, 800b5e4 <_Balloc+0x20>
 800b5da:	216b      	movs	r1, #107	@ 0x6b
 800b5dc:	4b17      	ldr	r3, [pc, #92]	@ (800b63c <_Balloc+0x78>)
 800b5de:	4818      	ldr	r0, [pc, #96]	@ (800b640 <_Balloc+0x7c>)
 800b5e0:	f001 fe8c 	bl	800d2fc <__assert_func>
 800b5e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5e8:	6006      	str	r6, [r0, #0]
 800b5ea:	60c6      	str	r6, [r0, #12]
 800b5ec:	69e6      	ldr	r6, [r4, #28]
 800b5ee:	68f3      	ldr	r3, [r6, #12]
 800b5f0:	b183      	cbz	r3, 800b614 <_Balloc+0x50>
 800b5f2:	69e3      	ldr	r3, [r4, #28]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5fa:	b9b8      	cbnz	r0, 800b62c <_Balloc+0x68>
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	fa01 f605 	lsl.w	r6, r1, r5
 800b602:	1d72      	adds	r2, r6, #5
 800b604:	4620      	mov	r0, r4
 800b606:	0092      	lsls	r2, r2, #2
 800b608:	f001 fe96 	bl	800d338 <_calloc_r>
 800b60c:	b160      	cbz	r0, 800b628 <_Balloc+0x64>
 800b60e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b612:	e00e      	b.n	800b632 <_Balloc+0x6e>
 800b614:	2221      	movs	r2, #33	@ 0x21
 800b616:	2104      	movs	r1, #4
 800b618:	4620      	mov	r0, r4
 800b61a:	f001 fe8d 	bl	800d338 <_calloc_r>
 800b61e:	69e3      	ldr	r3, [r4, #28]
 800b620:	60f0      	str	r0, [r6, #12]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1e4      	bne.n	800b5f2 <_Balloc+0x2e>
 800b628:	2000      	movs	r0, #0
 800b62a:	bd70      	pop	{r4, r5, r6, pc}
 800b62c:	6802      	ldr	r2, [r0, #0]
 800b62e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b632:	2300      	movs	r3, #0
 800b634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b638:	e7f7      	b.n	800b62a <_Balloc+0x66>
 800b63a:	bf00      	nop
 800b63c:	0800decd 	.word	0x0800decd
 800b640:	0800df4d 	.word	0x0800df4d

0800b644 <_Bfree>:
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	69c6      	ldr	r6, [r0, #28]
 800b648:	4605      	mov	r5, r0
 800b64a:	460c      	mov	r4, r1
 800b64c:	b976      	cbnz	r6, 800b66c <_Bfree+0x28>
 800b64e:	2010      	movs	r0, #16
 800b650:	f7ff ff02 	bl	800b458 <malloc>
 800b654:	4602      	mov	r2, r0
 800b656:	61e8      	str	r0, [r5, #28]
 800b658:	b920      	cbnz	r0, 800b664 <_Bfree+0x20>
 800b65a:	218f      	movs	r1, #143	@ 0x8f
 800b65c:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <_Bfree+0x3c>)
 800b65e:	4809      	ldr	r0, [pc, #36]	@ (800b684 <_Bfree+0x40>)
 800b660:	f001 fe4c 	bl	800d2fc <__assert_func>
 800b664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b668:	6006      	str	r6, [r0, #0]
 800b66a:	60c6      	str	r6, [r0, #12]
 800b66c:	b13c      	cbz	r4, 800b67e <_Bfree+0x3a>
 800b66e:	69eb      	ldr	r3, [r5, #28]
 800b670:	6862      	ldr	r2, [r4, #4]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b678:	6021      	str	r1, [r4, #0]
 800b67a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b67e:	bd70      	pop	{r4, r5, r6, pc}
 800b680:	0800decd 	.word	0x0800decd
 800b684:	0800df4d 	.word	0x0800df4d

0800b688 <__multadd>:
 800b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68c:	4607      	mov	r7, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	461e      	mov	r6, r3
 800b692:	2000      	movs	r0, #0
 800b694:	690d      	ldr	r5, [r1, #16]
 800b696:	f101 0c14 	add.w	ip, r1, #20
 800b69a:	f8dc 3000 	ldr.w	r3, [ip]
 800b69e:	3001      	adds	r0, #1
 800b6a0:	b299      	uxth	r1, r3
 800b6a2:	fb02 6101 	mla	r1, r2, r1, r6
 800b6a6:	0c1e      	lsrs	r6, r3, #16
 800b6a8:	0c0b      	lsrs	r3, r1, #16
 800b6aa:	fb02 3306 	mla	r3, r2, r6, r3
 800b6ae:	b289      	uxth	r1, r1
 800b6b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6b4:	4285      	cmp	r5, r0
 800b6b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b6be:	dcec      	bgt.n	800b69a <__multadd+0x12>
 800b6c0:	b30e      	cbz	r6, 800b706 <__multadd+0x7e>
 800b6c2:	68a3      	ldr	r3, [r4, #8]
 800b6c4:	42ab      	cmp	r3, r5
 800b6c6:	dc19      	bgt.n	800b6fc <__multadd+0x74>
 800b6c8:	6861      	ldr	r1, [r4, #4]
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	3101      	adds	r1, #1
 800b6ce:	f7ff ff79 	bl	800b5c4 <_Balloc>
 800b6d2:	4680      	mov	r8, r0
 800b6d4:	b928      	cbnz	r0, 800b6e2 <__multadd+0x5a>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	21ba      	movs	r1, #186	@ 0xba
 800b6da:	4b0c      	ldr	r3, [pc, #48]	@ (800b70c <__multadd+0x84>)
 800b6dc:	480c      	ldr	r0, [pc, #48]	@ (800b710 <__multadd+0x88>)
 800b6de:	f001 fe0d 	bl	800d2fc <__assert_func>
 800b6e2:	6922      	ldr	r2, [r4, #16]
 800b6e4:	f104 010c 	add.w	r1, r4, #12
 800b6e8:	3202      	adds	r2, #2
 800b6ea:	0092      	lsls	r2, r2, #2
 800b6ec:	300c      	adds	r0, #12
 800b6ee:	f7ff f806 	bl	800a6fe <memcpy>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	f7ff ffa5 	bl	800b644 <_Bfree>
 800b6fa:	4644      	mov	r4, r8
 800b6fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b700:	3501      	adds	r5, #1
 800b702:	615e      	str	r6, [r3, #20]
 800b704:	6125      	str	r5, [r4, #16]
 800b706:	4620      	mov	r0, r4
 800b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70c:	0800df3c 	.word	0x0800df3c
 800b710:	0800df4d 	.word	0x0800df4d

0800b714 <__s2b>:
 800b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b718:	4615      	mov	r5, r2
 800b71a:	2209      	movs	r2, #9
 800b71c:	461f      	mov	r7, r3
 800b71e:	3308      	adds	r3, #8
 800b720:	460c      	mov	r4, r1
 800b722:	fb93 f3f2 	sdiv	r3, r3, r2
 800b726:	4606      	mov	r6, r0
 800b728:	2201      	movs	r2, #1
 800b72a:	2100      	movs	r1, #0
 800b72c:	429a      	cmp	r2, r3
 800b72e:	db09      	blt.n	800b744 <__s2b+0x30>
 800b730:	4630      	mov	r0, r6
 800b732:	f7ff ff47 	bl	800b5c4 <_Balloc>
 800b736:	b940      	cbnz	r0, 800b74a <__s2b+0x36>
 800b738:	4602      	mov	r2, r0
 800b73a:	21d3      	movs	r1, #211	@ 0xd3
 800b73c:	4b18      	ldr	r3, [pc, #96]	@ (800b7a0 <__s2b+0x8c>)
 800b73e:	4819      	ldr	r0, [pc, #100]	@ (800b7a4 <__s2b+0x90>)
 800b740:	f001 fddc 	bl	800d2fc <__assert_func>
 800b744:	0052      	lsls	r2, r2, #1
 800b746:	3101      	adds	r1, #1
 800b748:	e7f0      	b.n	800b72c <__s2b+0x18>
 800b74a:	9b08      	ldr	r3, [sp, #32]
 800b74c:	2d09      	cmp	r5, #9
 800b74e:	6143      	str	r3, [r0, #20]
 800b750:	f04f 0301 	mov.w	r3, #1
 800b754:	6103      	str	r3, [r0, #16]
 800b756:	dd16      	ble.n	800b786 <__s2b+0x72>
 800b758:	f104 0909 	add.w	r9, r4, #9
 800b75c:	46c8      	mov	r8, r9
 800b75e:	442c      	add	r4, r5
 800b760:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b764:	4601      	mov	r1, r0
 800b766:	220a      	movs	r2, #10
 800b768:	4630      	mov	r0, r6
 800b76a:	3b30      	subs	r3, #48	@ 0x30
 800b76c:	f7ff ff8c 	bl	800b688 <__multadd>
 800b770:	45a0      	cmp	r8, r4
 800b772:	d1f5      	bne.n	800b760 <__s2b+0x4c>
 800b774:	f1a5 0408 	sub.w	r4, r5, #8
 800b778:	444c      	add	r4, r9
 800b77a:	1b2d      	subs	r5, r5, r4
 800b77c:	1963      	adds	r3, r4, r5
 800b77e:	42bb      	cmp	r3, r7
 800b780:	db04      	blt.n	800b78c <__s2b+0x78>
 800b782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b786:	2509      	movs	r5, #9
 800b788:	340a      	adds	r4, #10
 800b78a:	e7f6      	b.n	800b77a <__s2b+0x66>
 800b78c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b790:	4601      	mov	r1, r0
 800b792:	220a      	movs	r2, #10
 800b794:	4630      	mov	r0, r6
 800b796:	3b30      	subs	r3, #48	@ 0x30
 800b798:	f7ff ff76 	bl	800b688 <__multadd>
 800b79c:	e7ee      	b.n	800b77c <__s2b+0x68>
 800b79e:	bf00      	nop
 800b7a0:	0800df3c 	.word	0x0800df3c
 800b7a4:	0800df4d 	.word	0x0800df4d

0800b7a8 <__hi0bits>:
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b7ae:	bf3a      	itte	cc
 800b7b0:	0403      	lslcc	r3, r0, #16
 800b7b2:	2010      	movcc	r0, #16
 800b7b4:	2000      	movcs	r0, #0
 800b7b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7ba:	bf3c      	itt	cc
 800b7bc:	021b      	lslcc	r3, r3, #8
 800b7be:	3008      	addcc	r0, #8
 800b7c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7c4:	bf3c      	itt	cc
 800b7c6:	011b      	lslcc	r3, r3, #4
 800b7c8:	3004      	addcc	r0, #4
 800b7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7ce:	bf3c      	itt	cc
 800b7d0:	009b      	lslcc	r3, r3, #2
 800b7d2:	3002      	addcc	r0, #2
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	db05      	blt.n	800b7e4 <__hi0bits+0x3c>
 800b7d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7dc:	f100 0001 	add.w	r0, r0, #1
 800b7e0:	bf08      	it	eq
 800b7e2:	2020      	moveq	r0, #32
 800b7e4:	4770      	bx	lr

0800b7e6 <__lo0bits>:
 800b7e6:	6803      	ldr	r3, [r0, #0]
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	f013 0007 	ands.w	r0, r3, #7
 800b7ee:	d00b      	beq.n	800b808 <__lo0bits+0x22>
 800b7f0:	07d9      	lsls	r1, r3, #31
 800b7f2:	d421      	bmi.n	800b838 <__lo0bits+0x52>
 800b7f4:	0798      	lsls	r0, r3, #30
 800b7f6:	bf49      	itett	mi
 800b7f8:	085b      	lsrmi	r3, r3, #1
 800b7fa:	089b      	lsrpl	r3, r3, #2
 800b7fc:	2001      	movmi	r0, #1
 800b7fe:	6013      	strmi	r3, [r2, #0]
 800b800:	bf5c      	itt	pl
 800b802:	2002      	movpl	r0, #2
 800b804:	6013      	strpl	r3, [r2, #0]
 800b806:	4770      	bx	lr
 800b808:	b299      	uxth	r1, r3
 800b80a:	b909      	cbnz	r1, 800b810 <__lo0bits+0x2a>
 800b80c:	2010      	movs	r0, #16
 800b80e:	0c1b      	lsrs	r3, r3, #16
 800b810:	b2d9      	uxtb	r1, r3
 800b812:	b909      	cbnz	r1, 800b818 <__lo0bits+0x32>
 800b814:	3008      	adds	r0, #8
 800b816:	0a1b      	lsrs	r3, r3, #8
 800b818:	0719      	lsls	r1, r3, #28
 800b81a:	bf04      	itt	eq
 800b81c:	091b      	lsreq	r3, r3, #4
 800b81e:	3004      	addeq	r0, #4
 800b820:	0799      	lsls	r1, r3, #30
 800b822:	bf04      	itt	eq
 800b824:	089b      	lsreq	r3, r3, #2
 800b826:	3002      	addeq	r0, #2
 800b828:	07d9      	lsls	r1, r3, #31
 800b82a:	d403      	bmi.n	800b834 <__lo0bits+0x4e>
 800b82c:	085b      	lsrs	r3, r3, #1
 800b82e:	f100 0001 	add.w	r0, r0, #1
 800b832:	d003      	beq.n	800b83c <__lo0bits+0x56>
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	4770      	bx	lr
 800b838:	2000      	movs	r0, #0
 800b83a:	4770      	bx	lr
 800b83c:	2020      	movs	r0, #32
 800b83e:	4770      	bx	lr

0800b840 <__i2b>:
 800b840:	b510      	push	{r4, lr}
 800b842:	460c      	mov	r4, r1
 800b844:	2101      	movs	r1, #1
 800b846:	f7ff febd 	bl	800b5c4 <_Balloc>
 800b84a:	4602      	mov	r2, r0
 800b84c:	b928      	cbnz	r0, 800b85a <__i2b+0x1a>
 800b84e:	f240 1145 	movw	r1, #325	@ 0x145
 800b852:	4b04      	ldr	r3, [pc, #16]	@ (800b864 <__i2b+0x24>)
 800b854:	4804      	ldr	r0, [pc, #16]	@ (800b868 <__i2b+0x28>)
 800b856:	f001 fd51 	bl	800d2fc <__assert_func>
 800b85a:	2301      	movs	r3, #1
 800b85c:	6144      	str	r4, [r0, #20]
 800b85e:	6103      	str	r3, [r0, #16]
 800b860:	bd10      	pop	{r4, pc}
 800b862:	bf00      	nop
 800b864:	0800df3c 	.word	0x0800df3c
 800b868:	0800df4d 	.word	0x0800df4d

0800b86c <__multiply>:
 800b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	4614      	mov	r4, r2
 800b872:	690a      	ldr	r2, [r1, #16]
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	460f      	mov	r7, r1
 800b878:	429a      	cmp	r2, r3
 800b87a:	bfa2      	ittt	ge
 800b87c:	4623      	movge	r3, r4
 800b87e:	460c      	movge	r4, r1
 800b880:	461f      	movge	r7, r3
 800b882:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b886:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b88a:	68a3      	ldr	r3, [r4, #8]
 800b88c:	6861      	ldr	r1, [r4, #4]
 800b88e:	eb0a 0609 	add.w	r6, sl, r9
 800b892:	42b3      	cmp	r3, r6
 800b894:	b085      	sub	sp, #20
 800b896:	bfb8      	it	lt
 800b898:	3101      	addlt	r1, #1
 800b89a:	f7ff fe93 	bl	800b5c4 <_Balloc>
 800b89e:	b930      	cbnz	r0, 800b8ae <__multiply+0x42>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b8a6:	4b43      	ldr	r3, [pc, #268]	@ (800b9b4 <__multiply+0x148>)
 800b8a8:	4843      	ldr	r0, [pc, #268]	@ (800b9b8 <__multiply+0x14c>)
 800b8aa:	f001 fd27 	bl	800d2fc <__assert_func>
 800b8ae:	f100 0514 	add.w	r5, r0, #20
 800b8b2:	462b      	mov	r3, r5
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8ba:	4543      	cmp	r3, r8
 800b8bc:	d321      	bcc.n	800b902 <__multiply+0x96>
 800b8be:	f107 0114 	add.w	r1, r7, #20
 800b8c2:	f104 0214 	add.w	r2, r4, #20
 800b8c6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b8ca:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b8ce:	9302      	str	r3, [sp, #8]
 800b8d0:	1b13      	subs	r3, r2, r4
 800b8d2:	3b15      	subs	r3, #21
 800b8d4:	f023 0303 	bic.w	r3, r3, #3
 800b8d8:	3304      	adds	r3, #4
 800b8da:	f104 0715 	add.w	r7, r4, #21
 800b8de:	42ba      	cmp	r2, r7
 800b8e0:	bf38      	it	cc
 800b8e2:	2304      	movcc	r3, #4
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	9b02      	ldr	r3, [sp, #8]
 800b8e8:	9103      	str	r1, [sp, #12]
 800b8ea:	428b      	cmp	r3, r1
 800b8ec:	d80c      	bhi.n	800b908 <__multiply+0x9c>
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	dd03      	ble.n	800b8fa <__multiply+0x8e>
 800b8f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d05a      	beq.n	800b9b0 <__multiply+0x144>
 800b8fa:	6106      	str	r6, [r0, #16]
 800b8fc:	b005      	add	sp, #20
 800b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b902:	f843 2b04 	str.w	r2, [r3], #4
 800b906:	e7d8      	b.n	800b8ba <__multiply+0x4e>
 800b908:	f8b1 a000 	ldrh.w	sl, [r1]
 800b90c:	f1ba 0f00 	cmp.w	sl, #0
 800b910:	d023      	beq.n	800b95a <__multiply+0xee>
 800b912:	46a9      	mov	r9, r5
 800b914:	f04f 0c00 	mov.w	ip, #0
 800b918:	f104 0e14 	add.w	lr, r4, #20
 800b91c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b920:	f8d9 3000 	ldr.w	r3, [r9]
 800b924:	fa1f fb87 	uxth.w	fp, r7
 800b928:	b29b      	uxth	r3, r3
 800b92a:	fb0a 330b 	mla	r3, sl, fp, r3
 800b92e:	4463      	add	r3, ip
 800b930:	f8d9 c000 	ldr.w	ip, [r9]
 800b934:	0c3f      	lsrs	r7, r7, #16
 800b936:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b93a:	fb0a c707 	mla	r7, sl, r7, ip
 800b93e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b942:	b29b      	uxth	r3, r3
 800b944:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b948:	4572      	cmp	r2, lr
 800b94a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b94e:	f849 3b04 	str.w	r3, [r9], #4
 800b952:	d8e3      	bhi.n	800b91c <__multiply+0xb0>
 800b954:	9b01      	ldr	r3, [sp, #4]
 800b956:	f845 c003 	str.w	ip, [r5, r3]
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	3104      	adds	r1, #4
 800b95e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b962:	f1b9 0f00 	cmp.w	r9, #0
 800b966:	d021      	beq.n	800b9ac <__multiply+0x140>
 800b968:	46ae      	mov	lr, r5
 800b96a:	f04f 0a00 	mov.w	sl, #0
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	f104 0c14 	add.w	ip, r4, #20
 800b974:	f8bc b000 	ldrh.w	fp, [ip]
 800b978:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	fb09 770b 	mla	r7, r9, fp, r7
 800b982:	4457      	add	r7, sl
 800b984:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b988:	f84e 3b04 	str.w	r3, [lr], #4
 800b98c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b990:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b994:	f8be 3000 	ldrh.w	r3, [lr]
 800b998:	4562      	cmp	r2, ip
 800b99a:	fb09 330a 	mla	r3, r9, sl, r3
 800b99e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b9a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9a6:	d8e5      	bhi.n	800b974 <__multiply+0x108>
 800b9a8:	9f01      	ldr	r7, [sp, #4]
 800b9aa:	51eb      	str	r3, [r5, r7]
 800b9ac:	3504      	adds	r5, #4
 800b9ae:	e79a      	b.n	800b8e6 <__multiply+0x7a>
 800b9b0:	3e01      	subs	r6, #1
 800b9b2:	e79c      	b.n	800b8ee <__multiply+0x82>
 800b9b4:	0800df3c 	.word	0x0800df3c
 800b9b8:	0800df4d 	.word	0x0800df4d

0800b9bc <__pow5mult>:
 800b9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c0:	4615      	mov	r5, r2
 800b9c2:	f012 0203 	ands.w	r2, r2, #3
 800b9c6:	4607      	mov	r7, r0
 800b9c8:	460e      	mov	r6, r1
 800b9ca:	d007      	beq.n	800b9dc <__pow5mult+0x20>
 800b9cc:	4c25      	ldr	r4, [pc, #148]	@ (800ba64 <__pow5mult+0xa8>)
 800b9ce:	3a01      	subs	r2, #1
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9d6:	f7ff fe57 	bl	800b688 <__multadd>
 800b9da:	4606      	mov	r6, r0
 800b9dc:	10ad      	asrs	r5, r5, #2
 800b9de:	d03d      	beq.n	800ba5c <__pow5mult+0xa0>
 800b9e0:	69fc      	ldr	r4, [r7, #28]
 800b9e2:	b97c      	cbnz	r4, 800ba04 <__pow5mult+0x48>
 800b9e4:	2010      	movs	r0, #16
 800b9e6:	f7ff fd37 	bl	800b458 <malloc>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	61f8      	str	r0, [r7, #28]
 800b9ee:	b928      	cbnz	r0, 800b9fc <__pow5mult+0x40>
 800b9f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba68 <__pow5mult+0xac>)
 800b9f6:	481d      	ldr	r0, [pc, #116]	@ (800ba6c <__pow5mult+0xb0>)
 800b9f8:	f001 fc80 	bl	800d2fc <__assert_func>
 800b9fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba00:	6004      	str	r4, [r0, #0]
 800ba02:	60c4      	str	r4, [r0, #12]
 800ba04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba0c:	b94c      	cbnz	r4, 800ba22 <__pow5mult+0x66>
 800ba0e:	f240 2171 	movw	r1, #625	@ 0x271
 800ba12:	4638      	mov	r0, r7
 800ba14:	f7ff ff14 	bl	800b840 <__i2b>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	f04f 0900 	mov.w	r9, #0
 800ba26:	07eb      	lsls	r3, r5, #31
 800ba28:	d50a      	bpl.n	800ba40 <__pow5mult+0x84>
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	4638      	mov	r0, r7
 800ba30:	f7ff ff1c 	bl	800b86c <__multiply>
 800ba34:	4680      	mov	r8, r0
 800ba36:	4631      	mov	r1, r6
 800ba38:	4638      	mov	r0, r7
 800ba3a:	f7ff fe03 	bl	800b644 <_Bfree>
 800ba3e:	4646      	mov	r6, r8
 800ba40:	106d      	asrs	r5, r5, #1
 800ba42:	d00b      	beq.n	800ba5c <__pow5mult+0xa0>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	b938      	cbnz	r0, 800ba58 <__pow5mult+0x9c>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7ff ff0d 	bl	800b86c <__multiply>
 800ba52:	6020      	str	r0, [r4, #0]
 800ba54:	f8c0 9000 	str.w	r9, [r0]
 800ba58:	4604      	mov	r4, r0
 800ba5a:	e7e4      	b.n	800ba26 <__pow5mult+0x6a>
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba62:	bf00      	nop
 800ba64:	0800dfa8 	.word	0x0800dfa8
 800ba68:	0800decd 	.word	0x0800decd
 800ba6c:	0800df4d 	.word	0x0800df4d

0800ba70 <__lshift>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	460c      	mov	r4, r1
 800ba76:	4607      	mov	r7, r0
 800ba78:	4691      	mov	r9, r2
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	6849      	ldr	r1, [r1, #4]
 800ba7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba88:	f108 0601 	add.w	r6, r8, #1
 800ba8c:	42b3      	cmp	r3, r6
 800ba8e:	db0b      	blt.n	800baa8 <__lshift+0x38>
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff fd97 	bl	800b5c4 <_Balloc>
 800ba96:	4605      	mov	r5, r0
 800ba98:	b948      	cbnz	r0, 800baae <__lshift+0x3e>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800baa0:	4b27      	ldr	r3, [pc, #156]	@ (800bb40 <__lshift+0xd0>)
 800baa2:	4828      	ldr	r0, [pc, #160]	@ (800bb44 <__lshift+0xd4>)
 800baa4:	f001 fc2a 	bl	800d2fc <__assert_func>
 800baa8:	3101      	adds	r1, #1
 800baaa:	005b      	lsls	r3, r3, #1
 800baac:	e7ee      	b.n	800ba8c <__lshift+0x1c>
 800baae:	2300      	movs	r3, #0
 800bab0:	f100 0114 	add.w	r1, r0, #20
 800bab4:	f100 0210 	add.w	r2, r0, #16
 800bab8:	4618      	mov	r0, r3
 800baba:	4553      	cmp	r3, sl
 800babc:	db33      	blt.n	800bb26 <__lshift+0xb6>
 800babe:	6920      	ldr	r0, [r4, #16]
 800bac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bac4:	f104 0314 	add.w	r3, r4, #20
 800bac8:	f019 091f 	ands.w	r9, r9, #31
 800bacc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bad4:	d02b      	beq.n	800bb2e <__lshift+0xbe>
 800bad6:	468a      	mov	sl, r1
 800bad8:	2200      	movs	r2, #0
 800bada:	f1c9 0e20 	rsb	lr, r9, #32
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	fa00 f009 	lsl.w	r0, r0, r9
 800bae4:	4310      	orrs	r0, r2
 800bae6:	f84a 0b04 	str.w	r0, [sl], #4
 800baea:	f853 2b04 	ldr.w	r2, [r3], #4
 800baee:	459c      	cmp	ip, r3
 800baf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800baf4:	d8f3      	bhi.n	800bade <__lshift+0x6e>
 800baf6:	ebac 0304 	sub.w	r3, ip, r4
 800bafa:	3b15      	subs	r3, #21
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	3304      	adds	r3, #4
 800bb02:	f104 0015 	add.w	r0, r4, #21
 800bb06:	4584      	cmp	ip, r0
 800bb08:	bf38      	it	cc
 800bb0a:	2304      	movcc	r3, #4
 800bb0c:	50ca      	str	r2, [r1, r3]
 800bb0e:	b10a      	cbz	r2, 800bb14 <__lshift+0xa4>
 800bb10:	f108 0602 	add.w	r6, r8, #2
 800bb14:	3e01      	subs	r6, #1
 800bb16:	4638      	mov	r0, r7
 800bb18:	4621      	mov	r1, r4
 800bb1a:	612e      	str	r6, [r5, #16]
 800bb1c:	f7ff fd92 	bl	800b644 <_Bfree>
 800bb20:	4628      	mov	r0, r5
 800bb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb26:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	e7c5      	b.n	800baba <__lshift+0x4a>
 800bb2e:	3904      	subs	r1, #4
 800bb30:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb34:	459c      	cmp	ip, r3
 800bb36:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb3a:	d8f9      	bhi.n	800bb30 <__lshift+0xc0>
 800bb3c:	e7ea      	b.n	800bb14 <__lshift+0xa4>
 800bb3e:	bf00      	nop
 800bb40:	0800df3c 	.word	0x0800df3c
 800bb44:	0800df4d 	.word	0x0800df4d

0800bb48 <__mcmp>:
 800bb48:	4603      	mov	r3, r0
 800bb4a:	690a      	ldr	r2, [r1, #16]
 800bb4c:	6900      	ldr	r0, [r0, #16]
 800bb4e:	b530      	push	{r4, r5, lr}
 800bb50:	1a80      	subs	r0, r0, r2
 800bb52:	d10e      	bne.n	800bb72 <__mcmp+0x2a>
 800bb54:	3314      	adds	r3, #20
 800bb56:	3114      	adds	r1, #20
 800bb58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb68:	4295      	cmp	r5, r2
 800bb6a:	d003      	beq.n	800bb74 <__mcmp+0x2c>
 800bb6c:	d205      	bcs.n	800bb7a <__mcmp+0x32>
 800bb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb72:	bd30      	pop	{r4, r5, pc}
 800bb74:	42a3      	cmp	r3, r4
 800bb76:	d3f3      	bcc.n	800bb60 <__mcmp+0x18>
 800bb78:	e7fb      	b.n	800bb72 <__mcmp+0x2a>
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	e7f9      	b.n	800bb72 <__mcmp+0x2a>
	...

0800bb80 <__mdiff>:
 800bb80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	4689      	mov	r9, r1
 800bb86:	4606      	mov	r6, r0
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4648      	mov	r0, r9
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	f7ff ffdb 	bl	800bb48 <__mcmp>
 800bb92:	1e05      	subs	r5, r0, #0
 800bb94:	d112      	bne.n	800bbbc <__mdiff+0x3c>
 800bb96:	4629      	mov	r1, r5
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7ff fd13 	bl	800b5c4 <_Balloc>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	b928      	cbnz	r0, 800bbae <__mdiff+0x2e>
 800bba2:	f240 2137 	movw	r1, #567	@ 0x237
 800bba6:	4b3e      	ldr	r3, [pc, #248]	@ (800bca0 <__mdiff+0x120>)
 800bba8:	483e      	ldr	r0, [pc, #248]	@ (800bca4 <__mdiff+0x124>)
 800bbaa:	f001 fba7 	bl	800d2fc <__assert_func>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	b003      	add	sp, #12
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	bfbc      	itt	lt
 800bbbe:	464b      	movlt	r3, r9
 800bbc0:	46a1      	movlt	r9, r4
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bbc8:	bfba      	itte	lt
 800bbca:	461c      	movlt	r4, r3
 800bbcc:	2501      	movlt	r5, #1
 800bbce:	2500      	movge	r5, #0
 800bbd0:	f7ff fcf8 	bl	800b5c4 <_Balloc>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	b918      	cbnz	r0, 800bbe0 <__mdiff+0x60>
 800bbd8:	f240 2145 	movw	r1, #581	@ 0x245
 800bbdc:	4b30      	ldr	r3, [pc, #192]	@ (800bca0 <__mdiff+0x120>)
 800bbde:	e7e3      	b.n	800bba8 <__mdiff+0x28>
 800bbe0:	f100 0b14 	add.w	fp, r0, #20
 800bbe4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbe8:	f109 0310 	add.w	r3, r9, #16
 800bbec:	60c5      	str	r5, [r0, #12]
 800bbee:	f04f 0c00 	mov.w	ip, #0
 800bbf2:	f109 0514 	add.w	r5, r9, #20
 800bbf6:	46d9      	mov	r9, fp
 800bbf8:	6926      	ldr	r6, [r4, #16]
 800bbfa:	f104 0e14 	add.w	lr, r4, #20
 800bbfe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	9b01      	ldr	r3, [sp, #4]
 800bc0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc12:	b281      	uxth	r1, r0
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	fa1f f38a 	uxth.w	r3, sl
 800bc1a:	1a5b      	subs	r3, r3, r1
 800bc1c:	0c00      	lsrs	r0, r0, #16
 800bc1e:	4463      	add	r3, ip
 800bc20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc2e:	4576      	cmp	r6, lr
 800bc30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc34:	f849 3b04 	str.w	r3, [r9], #4
 800bc38:	d8e6      	bhi.n	800bc08 <__mdiff+0x88>
 800bc3a:	1b33      	subs	r3, r6, r4
 800bc3c:	3b15      	subs	r3, #21
 800bc3e:	f023 0303 	bic.w	r3, r3, #3
 800bc42:	3415      	adds	r4, #21
 800bc44:	3304      	adds	r3, #4
 800bc46:	42a6      	cmp	r6, r4
 800bc48:	bf38      	it	cc
 800bc4a:	2304      	movcc	r3, #4
 800bc4c:	441d      	add	r5, r3
 800bc4e:	445b      	add	r3, fp
 800bc50:	461e      	mov	r6, r3
 800bc52:	462c      	mov	r4, r5
 800bc54:	4544      	cmp	r4, r8
 800bc56:	d30e      	bcc.n	800bc76 <__mdiff+0xf6>
 800bc58:	f108 0103 	add.w	r1, r8, #3
 800bc5c:	1b49      	subs	r1, r1, r5
 800bc5e:	f021 0103 	bic.w	r1, r1, #3
 800bc62:	3d03      	subs	r5, #3
 800bc64:	45a8      	cmp	r8, r5
 800bc66:	bf38      	it	cc
 800bc68:	2100      	movcc	r1, #0
 800bc6a:	440b      	add	r3, r1
 800bc6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc70:	b199      	cbz	r1, 800bc9a <__mdiff+0x11a>
 800bc72:	6117      	str	r7, [r2, #16]
 800bc74:	e79e      	b.n	800bbb4 <__mdiff+0x34>
 800bc76:	46e6      	mov	lr, ip
 800bc78:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc7c:	fa1f fc81 	uxth.w	ip, r1
 800bc80:	44f4      	add	ip, lr
 800bc82:	0c08      	lsrs	r0, r1, #16
 800bc84:	4471      	add	r1, lr
 800bc86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc8a:	b289      	uxth	r1, r1
 800bc8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc94:	f846 1b04 	str.w	r1, [r6], #4
 800bc98:	e7dc      	b.n	800bc54 <__mdiff+0xd4>
 800bc9a:	3f01      	subs	r7, #1
 800bc9c:	e7e6      	b.n	800bc6c <__mdiff+0xec>
 800bc9e:	bf00      	nop
 800bca0:	0800df3c 	.word	0x0800df3c
 800bca4:	0800df4d 	.word	0x0800df4d

0800bca8 <__ulp>:
 800bca8:	4b0e      	ldr	r3, [pc, #56]	@ (800bce4 <__ulp+0x3c>)
 800bcaa:	400b      	ands	r3, r1
 800bcac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc08      	bgt.n	800bcc6 <__ulp+0x1e>
 800bcb4:	425b      	negs	r3, r3
 800bcb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bcba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bcbe:	da04      	bge.n	800bcca <__ulp+0x22>
 800bcc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bcc4:	4113      	asrs	r3, r2
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	e008      	b.n	800bcdc <__ulp+0x34>
 800bcca:	f1a2 0314 	sub.w	r3, r2, #20
 800bcce:	2b1e      	cmp	r3, #30
 800bcd0:	bfd6      	itet	le
 800bcd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bcd6:	2201      	movgt	r2, #1
 800bcd8:	40da      	lsrle	r2, r3
 800bcda:	2300      	movs	r3, #0
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4610      	mov	r0, r2
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	7ff00000 	.word	0x7ff00000

0800bce8 <__b2d>:
 800bce8:	6902      	ldr	r2, [r0, #16]
 800bcea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcec:	f100 0614 	add.w	r6, r0, #20
 800bcf0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bcf4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bcf8:	4f1e      	ldr	r7, [pc, #120]	@ (800bd74 <__b2d+0x8c>)
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f7ff fd54 	bl	800b7a8 <__hi0bits>
 800bd00:	4603      	mov	r3, r0
 800bd02:	f1c0 0020 	rsb	r0, r0, #32
 800bd06:	2b0a      	cmp	r3, #10
 800bd08:	f1a2 0504 	sub.w	r5, r2, #4
 800bd0c:	6008      	str	r0, [r1, #0]
 800bd0e:	dc12      	bgt.n	800bd36 <__b2d+0x4e>
 800bd10:	42ae      	cmp	r6, r5
 800bd12:	bf2c      	ite	cs
 800bd14:	2200      	movcs	r2, #0
 800bd16:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bd1a:	f1c3 0c0b 	rsb	ip, r3, #11
 800bd1e:	3315      	adds	r3, #21
 800bd20:	fa24 fe0c 	lsr.w	lr, r4, ip
 800bd24:	fa04 f303 	lsl.w	r3, r4, r3
 800bd28:	fa22 f20c 	lsr.w	r2, r2, ip
 800bd2c:	ea4e 0107 	orr.w	r1, lr, r7
 800bd30:	431a      	orrs	r2, r3
 800bd32:	4610      	mov	r0, r2
 800bd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd36:	42ae      	cmp	r6, r5
 800bd38:	bf36      	itet	cc
 800bd3a:	f1a2 0508 	subcc.w	r5, r2, #8
 800bd3e:	2200      	movcs	r2, #0
 800bd40:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bd44:	3b0b      	subs	r3, #11
 800bd46:	d012      	beq.n	800bd6e <__b2d+0x86>
 800bd48:	f1c3 0720 	rsb	r7, r3, #32
 800bd4c:	fa22 f107 	lsr.w	r1, r2, r7
 800bd50:	409c      	lsls	r4, r3
 800bd52:	430c      	orrs	r4, r1
 800bd54:	42b5      	cmp	r5, r6
 800bd56:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800bd5a:	bf94      	ite	ls
 800bd5c:	2400      	movls	r4, #0
 800bd5e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800bd62:	409a      	lsls	r2, r3
 800bd64:	40fc      	lsrs	r4, r7
 800bd66:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bd6a:	4322      	orrs	r2, r4
 800bd6c:	e7e1      	b.n	800bd32 <__b2d+0x4a>
 800bd6e:	ea44 0107 	orr.w	r1, r4, r7
 800bd72:	e7de      	b.n	800bd32 <__b2d+0x4a>
 800bd74:	3ff00000 	.word	0x3ff00000

0800bd78 <__d2b>:
 800bd78:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	4690      	mov	r8, r2
 800bd80:	4699      	mov	r9, r3
 800bd82:	9e08      	ldr	r6, [sp, #32]
 800bd84:	f7ff fc1e 	bl	800b5c4 <_Balloc>
 800bd88:	4604      	mov	r4, r0
 800bd8a:	b930      	cbnz	r0, 800bd9a <__d2b+0x22>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd92:	4b23      	ldr	r3, [pc, #140]	@ (800be20 <__d2b+0xa8>)
 800bd94:	4823      	ldr	r0, [pc, #140]	@ (800be24 <__d2b+0xac>)
 800bd96:	f001 fab1 	bl	800d2fc <__assert_func>
 800bd9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bda2:	b10d      	cbz	r5, 800bda8 <__d2b+0x30>
 800bda4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	f1b8 0300 	subs.w	r3, r8, #0
 800bdae:	d024      	beq.n	800bdfa <__d2b+0x82>
 800bdb0:	4668      	mov	r0, sp
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	f7ff fd17 	bl	800b7e6 <__lo0bits>
 800bdb8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdbc:	b1d8      	cbz	r0, 800bdf6 <__d2b+0x7e>
 800bdbe:	f1c0 0320 	rsb	r3, r0, #32
 800bdc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc6:	430b      	orrs	r3, r1
 800bdc8:	40c2      	lsrs	r2, r0
 800bdca:	6163      	str	r3, [r4, #20]
 800bdcc:	9201      	str	r2, [sp, #4]
 800bdce:	9b01      	ldr	r3, [sp, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	bf0c      	ite	eq
 800bdd4:	2201      	moveq	r2, #1
 800bdd6:	2202      	movne	r2, #2
 800bdd8:	61a3      	str	r3, [r4, #24]
 800bdda:	6122      	str	r2, [r4, #16]
 800bddc:	b1ad      	cbz	r5, 800be0a <__d2b+0x92>
 800bdde:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bde2:	4405      	add	r5, r0
 800bde4:	6035      	str	r5, [r6, #0]
 800bde6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bdea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdec:	6018      	str	r0, [r3, #0]
 800bdee:	4620      	mov	r0, r4
 800bdf0:	b002      	add	sp, #8
 800bdf2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bdf6:	6161      	str	r1, [r4, #20]
 800bdf8:	e7e9      	b.n	800bdce <__d2b+0x56>
 800bdfa:	a801      	add	r0, sp, #4
 800bdfc:	f7ff fcf3 	bl	800b7e6 <__lo0bits>
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	6163      	str	r3, [r4, #20]
 800be06:	3020      	adds	r0, #32
 800be08:	e7e7      	b.n	800bdda <__d2b+0x62>
 800be0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be12:	6030      	str	r0, [r6, #0]
 800be14:	6918      	ldr	r0, [r3, #16]
 800be16:	f7ff fcc7 	bl	800b7a8 <__hi0bits>
 800be1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be1e:	e7e4      	b.n	800bdea <__d2b+0x72>
 800be20:	0800df3c 	.word	0x0800df3c
 800be24:	0800df4d 	.word	0x0800df4d

0800be28 <__ratio>:
 800be28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	b085      	sub	sp, #20
 800be2e:	e9cd 1000 	strd	r1, r0, [sp]
 800be32:	a902      	add	r1, sp, #8
 800be34:	f7ff ff58 	bl	800bce8 <__b2d>
 800be38:	468b      	mov	fp, r1
 800be3a:	4606      	mov	r6, r0
 800be3c:	460f      	mov	r7, r1
 800be3e:	9800      	ldr	r0, [sp, #0]
 800be40:	a903      	add	r1, sp, #12
 800be42:	f7ff ff51 	bl	800bce8 <__b2d>
 800be46:	460d      	mov	r5, r1
 800be48:	9b01      	ldr	r3, [sp, #4]
 800be4a:	4689      	mov	r9, r1
 800be4c:	6919      	ldr	r1, [r3, #16]
 800be4e:	9b00      	ldr	r3, [sp, #0]
 800be50:	4604      	mov	r4, r0
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	4630      	mov	r0, r6
 800be56:	1ac9      	subs	r1, r1, r3
 800be58:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800be5c:	1a9b      	subs	r3, r3, r2
 800be5e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800be62:	2b00      	cmp	r3, #0
 800be64:	bfcd      	iteet	gt
 800be66:	463a      	movgt	r2, r7
 800be68:	462a      	movle	r2, r5
 800be6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be6e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800be72:	bfd8      	it	le
 800be74:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800be78:	464b      	mov	r3, r9
 800be7a:	4622      	mov	r2, r4
 800be7c:	4659      	mov	r1, fp
 800be7e:	f7f4 fc55 	bl	800072c <__aeabi_ddiv>
 800be82:	b005      	add	sp, #20
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be88 <__copybits>:
 800be88:	3901      	subs	r1, #1
 800be8a:	b570      	push	{r4, r5, r6, lr}
 800be8c:	1149      	asrs	r1, r1, #5
 800be8e:	6914      	ldr	r4, [r2, #16]
 800be90:	3101      	adds	r1, #1
 800be92:	f102 0314 	add.w	r3, r2, #20
 800be96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be9e:	1f05      	subs	r5, r0, #4
 800bea0:	42a3      	cmp	r3, r4
 800bea2:	d30c      	bcc.n	800bebe <__copybits+0x36>
 800bea4:	1aa3      	subs	r3, r4, r2
 800bea6:	3b11      	subs	r3, #17
 800bea8:	f023 0303 	bic.w	r3, r3, #3
 800beac:	3211      	adds	r2, #17
 800beae:	42a2      	cmp	r2, r4
 800beb0:	bf88      	it	hi
 800beb2:	2300      	movhi	r3, #0
 800beb4:	4418      	add	r0, r3
 800beb6:	2300      	movs	r3, #0
 800beb8:	4288      	cmp	r0, r1
 800beba:	d305      	bcc.n	800bec8 <__copybits+0x40>
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	f853 6b04 	ldr.w	r6, [r3], #4
 800bec2:	f845 6f04 	str.w	r6, [r5, #4]!
 800bec6:	e7eb      	b.n	800bea0 <__copybits+0x18>
 800bec8:	f840 3b04 	str.w	r3, [r0], #4
 800becc:	e7f4      	b.n	800beb8 <__copybits+0x30>

0800bece <__any_on>:
 800bece:	f100 0214 	add.w	r2, r0, #20
 800bed2:	6900      	ldr	r0, [r0, #16]
 800bed4:	114b      	asrs	r3, r1, #5
 800bed6:	4298      	cmp	r0, r3
 800bed8:	b510      	push	{r4, lr}
 800beda:	db11      	blt.n	800bf00 <__any_on+0x32>
 800bedc:	dd0a      	ble.n	800bef4 <__any_on+0x26>
 800bede:	f011 011f 	ands.w	r1, r1, #31
 800bee2:	d007      	beq.n	800bef4 <__any_on+0x26>
 800bee4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bee8:	fa24 f001 	lsr.w	r0, r4, r1
 800beec:	fa00 f101 	lsl.w	r1, r0, r1
 800bef0:	428c      	cmp	r4, r1
 800bef2:	d10b      	bne.n	800bf0c <__any_on+0x3e>
 800bef4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bef8:	4293      	cmp	r3, r2
 800befa:	d803      	bhi.n	800bf04 <__any_on+0x36>
 800befc:	2000      	movs	r0, #0
 800befe:	bd10      	pop	{r4, pc}
 800bf00:	4603      	mov	r3, r0
 800bf02:	e7f7      	b.n	800bef4 <__any_on+0x26>
 800bf04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf08:	2900      	cmp	r1, #0
 800bf0a:	d0f5      	beq.n	800bef8 <__any_on+0x2a>
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	e7f6      	b.n	800befe <__any_on+0x30>

0800bf10 <sulp>:
 800bf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf14:	460f      	mov	r7, r1
 800bf16:	4690      	mov	r8, r2
 800bf18:	f7ff fec6 	bl	800bca8 <__ulp>
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	f1b8 0f00 	cmp.w	r8, #0
 800bf24:	d011      	beq.n	800bf4a <sulp+0x3a>
 800bf26:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bf2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	dd0b      	ble.n	800bf4a <sulp+0x3a>
 800bf32:	2400      	movs	r4, #0
 800bf34:	051b      	lsls	r3, r3, #20
 800bf36:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf3a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bf3e:	4622      	mov	r2, r4
 800bf40:	462b      	mov	r3, r5
 800bf42:	f7f4 fac9 	bl	80004d8 <__aeabi_dmul>
 800bf46:	4604      	mov	r4, r0
 800bf48:	460d      	mov	r5, r1
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf52:	0000      	movs	r0, r0
 800bf54:	0000      	movs	r0, r0
	...

0800bf58 <_strtod_l>:
 800bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5c:	b09f      	sub	sp, #124	@ 0x7c
 800bf5e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bf60:	2200      	movs	r2, #0
 800bf62:	460c      	mov	r4, r1
 800bf64:	921a      	str	r2, [sp, #104]	@ 0x68
 800bf66:	f04f 0a00 	mov.w	sl, #0
 800bf6a:	f04f 0b00 	mov.w	fp, #0
 800bf6e:	460a      	mov	r2, r1
 800bf70:	9005      	str	r0, [sp, #20]
 800bf72:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf74:	7811      	ldrb	r1, [r2, #0]
 800bf76:	292b      	cmp	r1, #43	@ 0x2b
 800bf78:	d048      	beq.n	800c00c <_strtod_l+0xb4>
 800bf7a:	d836      	bhi.n	800bfea <_strtod_l+0x92>
 800bf7c:	290d      	cmp	r1, #13
 800bf7e:	d830      	bhi.n	800bfe2 <_strtod_l+0x8a>
 800bf80:	2908      	cmp	r1, #8
 800bf82:	d830      	bhi.n	800bfe6 <_strtod_l+0x8e>
 800bf84:	2900      	cmp	r1, #0
 800bf86:	d039      	beq.n	800bffc <_strtod_l+0xa4>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bf8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bf8e:	782a      	ldrb	r2, [r5, #0]
 800bf90:	2a30      	cmp	r2, #48	@ 0x30
 800bf92:	f040 80b1 	bne.w	800c0f8 <_strtod_l+0x1a0>
 800bf96:	786a      	ldrb	r2, [r5, #1]
 800bf98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf9c:	2a58      	cmp	r2, #88	@ 0x58
 800bf9e:	d16c      	bne.n	800c07a <_strtod_l+0x122>
 800bfa0:	9302      	str	r3, [sp, #8]
 800bfa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfa4:	4a8e      	ldr	r2, [pc, #568]	@ (800c1e0 <_strtod_l+0x288>)
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	ab1a      	add	r3, sp, #104	@ 0x68
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	9805      	ldr	r0, [sp, #20]
 800bfae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bfb0:	a919      	add	r1, sp, #100	@ 0x64
 800bfb2:	f001 fa3d 	bl	800d430 <__gethex>
 800bfb6:	f010 060f 	ands.w	r6, r0, #15
 800bfba:	4604      	mov	r4, r0
 800bfbc:	d005      	beq.n	800bfca <_strtod_l+0x72>
 800bfbe:	2e06      	cmp	r6, #6
 800bfc0:	d126      	bne.n	800c010 <_strtod_l+0xb8>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	9519      	str	r5, [sp, #100]	@ 0x64
 800bfc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f040 8584 	bne.w	800cada <_strtod_l+0xb82>
 800bfd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfd4:	b1bb      	cbz	r3, 800c006 <_strtod_l+0xae>
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800bfdc:	b01f      	add	sp, #124	@ 0x7c
 800bfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe2:	2920      	cmp	r1, #32
 800bfe4:	d1d0      	bne.n	800bf88 <_strtod_l+0x30>
 800bfe6:	3201      	adds	r2, #1
 800bfe8:	e7c3      	b.n	800bf72 <_strtod_l+0x1a>
 800bfea:	292d      	cmp	r1, #45	@ 0x2d
 800bfec:	d1cc      	bne.n	800bf88 <_strtod_l+0x30>
 800bfee:	2101      	movs	r1, #1
 800bff0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bff2:	1c51      	adds	r1, r2, #1
 800bff4:	9119      	str	r1, [sp, #100]	@ 0x64
 800bff6:	7852      	ldrb	r2, [r2, #1]
 800bff8:	2a00      	cmp	r2, #0
 800bffa:	d1c7      	bne.n	800bf8c <_strtod_l+0x34>
 800bffc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bffe:	9419      	str	r4, [sp, #100]	@ 0x64
 800c000:	2b00      	cmp	r3, #0
 800c002:	f040 8568 	bne.w	800cad6 <_strtod_l+0xb7e>
 800c006:	4650      	mov	r0, sl
 800c008:	4659      	mov	r1, fp
 800c00a:	e7e7      	b.n	800bfdc <_strtod_l+0x84>
 800c00c:	2100      	movs	r1, #0
 800c00e:	e7ef      	b.n	800bff0 <_strtod_l+0x98>
 800c010:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c012:	b13a      	cbz	r2, 800c024 <_strtod_l+0xcc>
 800c014:	2135      	movs	r1, #53	@ 0x35
 800c016:	a81c      	add	r0, sp, #112	@ 0x70
 800c018:	f7ff ff36 	bl	800be88 <__copybits>
 800c01c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c01e:	9805      	ldr	r0, [sp, #20]
 800c020:	f7ff fb10 	bl	800b644 <_Bfree>
 800c024:	3e01      	subs	r6, #1
 800c026:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c028:	2e04      	cmp	r6, #4
 800c02a:	d806      	bhi.n	800c03a <_strtod_l+0xe2>
 800c02c:	e8df f006 	tbb	[pc, r6]
 800c030:	201d0314 	.word	0x201d0314
 800c034:	14          	.byte	0x14
 800c035:	00          	.byte	0x00
 800c036:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c03a:	05e1      	lsls	r1, r4, #23
 800c03c:	bf48      	it	mi
 800c03e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c042:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c046:	0d1b      	lsrs	r3, r3, #20
 800c048:	051b      	lsls	r3, r3, #20
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1bd      	bne.n	800bfca <_strtod_l+0x72>
 800c04e:	f7fe fb1b 	bl	800a688 <__errno>
 800c052:	2322      	movs	r3, #34	@ 0x22
 800c054:	6003      	str	r3, [r0, #0]
 800c056:	e7b8      	b.n	800bfca <_strtod_l+0x72>
 800c058:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c05c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c060:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c064:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c068:	e7e7      	b.n	800c03a <_strtod_l+0xe2>
 800c06a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800c1e4 <_strtod_l+0x28c>
 800c06e:	e7e4      	b.n	800c03a <_strtod_l+0xe2>
 800c070:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c074:	f04f 3aff 	mov.w	sl, #4294967295
 800c078:	e7df      	b.n	800c03a <_strtod_l+0xe2>
 800c07a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c080:	785b      	ldrb	r3, [r3, #1]
 800c082:	2b30      	cmp	r3, #48	@ 0x30
 800c084:	d0f9      	beq.n	800c07a <_strtod_l+0x122>
 800c086:	2b00      	cmp	r3, #0
 800c088:	d09f      	beq.n	800bfca <_strtod_l+0x72>
 800c08a:	2301      	movs	r3, #1
 800c08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c08e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c090:	220a      	movs	r2, #10
 800c092:	930c      	str	r3, [sp, #48]	@ 0x30
 800c094:	2300      	movs	r3, #0
 800c096:	461f      	mov	r7, r3
 800c098:	9308      	str	r3, [sp, #32]
 800c09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c09c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c09e:	7805      	ldrb	r5, [r0, #0]
 800c0a0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c0a4:	b2d9      	uxtb	r1, r3
 800c0a6:	2909      	cmp	r1, #9
 800c0a8:	d928      	bls.n	800c0fc <_strtod_l+0x1a4>
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	494e      	ldr	r1, [pc, #312]	@ (800c1e8 <_strtod_l+0x290>)
 800c0ae:	f7fe fa39 	bl	800a524 <strncmp>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d032      	beq.n	800c11c <_strtod_l+0x1c4>
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	462a      	mov	r2, r5
 800c0ba:	4681      	mov	r9, r0
 800c0bc:	463d      	mov	r5, r7
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2a65      	cmp	r2, #101	@ 0x65
 800c0c2:	d001      	beq.n	800c0c8 <_strtod_l+0x170>
 800c0c4:	2a45      	cmp	r2, #69	@ 0x45
 800c0c6:	d114      	bne.n	800c0f2 <_strtod_l+0x19a>
 800c0c8:	b91d      	cbnz	r5, 800c0d2 <_strtod_l+0x17a>
 800c0ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0cc:	4302      	orrs	r2, r0
 800c0ce:	d095      	beq.n	800bffc <_strtod_l+0xa4>
 800c0d0:	2500      	movs	r5, #0
 800c0d2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c0d4:	1c62      	adds	r2, r4, #1
 800c0d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0d8:	7862      	ldrb	r2, [r4, #1]
 800c0da:	2a2b      	cmp	r2, #43	@ 0x2b
 800c0dc:	d077      	beq.n	800c1ce <_strtod_l+0x276>
 800c0de:	2a2d      	cmp	r2, #45	@ 0x2d
 800c0e0:	d07b      	beq.n	800c1da <_strtod_l+0x282>
 800c0e2:	f04f 0c00 	mov.w	ip, #0
 800c0e6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c0ea:	2909      	cmp	r1, #9
 800c0ec:	f240 8082 	bls.w	800c1f4 <_strtod_l+0x29c>
 800c0f0:	9419      	str	r4, [sp, #100]	@ 0x64
 800c0f2:	f04f 0800 	mov.w	r8, #0
 800c0f6:	e0a2      	b.n	800c23e <_strtod_l+0x2e6>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e7c7      	b.n	800c08c <_strtod_l+0x134>
 800c0fc:	2f08      	cmp	r7, #8
 800c0fe:	bfd5      	itete	le
 800c100:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c102:	9908      	ldrgt	r1, [sp, #32]
 800c104:	fb02 3301 	mlale	r3, r2, r1, r3
 800c108:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c10c:	f100 0001 	add.w	r0, r0, #1
 800c110:	bfd4      	ite	le
 800c112:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c114:	9308      	strgt	r3, [sp, #32]
 800c116:	3701      	adds	r7, #1
 800c118:	9019      	str	r0, [sp, #100]	@ 0x64
 800c11a:	e7bf      	b.n	800c09c <_strtod_l+0x144>
 800c11c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	9219      	str	r2, [sp, #100]	@ 0x64
 800c122:	785a      	ldrb	r2, [r3, #1]
 800c124:	b37f      	cbz	r7, 800c186 <_strtod_l+0x22e>
 800c126:	4681      	mov	r9, r0
 800c128:	463d      	mov	r5, r7
 800c12a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c12e:	2b09      	cmp	r3, #9
 800c130:	d912      	bls.n	800c158 <_strtod_l+0x200>
 800c132:	2301      	movs	r3, #1
 800c134:	e7c4      	b.n	800c0c0 <_strtod_l+0x168>
 800c136:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c138:	3001      	adds	r0, #1
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c13e:	785a      	ldrb	r2, [r3, #1]
 800c140:	2a30      	cmp	r2, #48	@ 0x30
 800c142:	d0f8      	beq.n	800c136 <_strtod_l+0x1de>
 800c144:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c148:	2b08      	cmp	r3, #8
 800c14a:	f200 84cb 	bhi.w	800cae4 <_strtod_l+0xb8c>
 800c14e:	4681      	mov	r9, r0
 800c150:	2000      	movs	r0, #0
 800c152:	4605      	mov	r5, r0
 800c154:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c156:	930c      	str	r3, [sp, #48]	@ 0x30
 800c158:	3a30      	subs	r2, #48	@ 0x30
 800c15a:	f100 0301 	add.w	r3, r0, #1
 800c15e:	d02a      	beq.n	800c1b6 <_strtod_l+0x25e>
 800c160:	4499      	add	r9, r3
 800c162:	210a      	movs	r1, #10
 800c164:	462b      	mov	r3, r5
 800c166:	eb00 0c05 	add.w	ip, r0, r5
 800c16a:	4563      	cmp	r3, ip
 800c16c:	d10d      	bne.n	800c18a <_strtod_l+0x232>
 800c16e:	1c69      	adds	r1, r5, #1
 800c170:	4401      	add	r1, r0
 800c172:	4428      	add	r0, r5
 800c174:	2808      	cmp	r0, #8
 800c176:	dc16      	bgt.n	800c1a6 <_strtod_l+0x24e>
 800c178:	230a      	movs	r3, #10
 800c17a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c17c:	fb03 2300 	mla	r3, r3, r0, r2
 800c180:	930a      	str	r3, [sp, #40]	@ 0x28
 800c182:	2300      	movs	r3, #0
 800c184:	e018      	b.n	800c1b8 <_strtod_l+0x260>
 800c186:	4638      	mov	r0, r7
 800c188:	e7da      	b.n	800c140 <_strtod_l+0x1e8>
 800c18a:	2b08      	cmp	r3, #8
 800c18c:	f103 0301 	add.w	r3, r3, #1
 800c190:	dc03      	bgt.n	800c19a <_strtod_l+0x242>
 800c192:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c194:	434e      	muls	r6, r1
 800c196:	960a      	str	r6, [sp, #40]	@ 0x28
 800c198:	e7e7      	b.n	800c16a <_strtod_l+0x212>
 800c19a:	2b10      	cmp	r3, #16
 800c19c:	bfde      	ittt	le
 800c19e:	9e08      	ldrle	r6, [sp, #32]
 800c1a0:	434e      	mulle	r6, r1
 800c1a2:	9608      	strle	r6, [sp, #32]
 800c1a4:	e7e1      	b.n	800c16a <_strtod_l+0x212>
 800c1a6:	280f      	cmp	r0, #15
 800c1a8:	dceb      	bgt.n	800c182 <_strtod_l+0x22a>
 800c1aa:	230a      	movs	r3, #10
 800c1ac:	9808      	ldr	r0, [sp, #32]
 800c1ae:	fb03 2300 	mla	r3, r3, r0, r2
 800c1b2:	9308      	str	r3, [sp, #32]
 800c1b4:	e7e5      	b.n	800c182 <_strtod_l+0x22a>
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	1c50      	adds	r0, r2, #1
 800c1be:	9019      	str	r0, [sp, #100]	@ 0x64
 800c1c0:	7852      	ldrb	r2, [r2, #1]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	e7b1      	b.n	800c12a <_strtod_l+0x1d2>
 800c1c6:	f04f 0900 	mov.w	r9, #0
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e77d      	b.n	800c0ca <_strtod_l+0x172>
 800c1ce:	f04f 0c00 	mov.w	ip, #0
 800c1d2:	1ca2      	adds	r2, r4, #2
 800c1d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1d6:	78a2      	ldrb	r2, [r4, #2]
 800c1d8:	e785      	b.n	800c0e6 <_strtod_l+0x18e>
 800c1da:	f04f 0c01 	mov.w	ip, #1
 800c1de:	e7f8      	b.n	800c1d2 <_strtod_l+0x27a>
 800c1e0:	0800e0c0 	.word	0x0800e0c0
 800c1e4:	7ff00000 	.word	0x7ff00000
 800c1e8:	0800e0a8 	.word	0x0800e0a8
 800c1ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1ee:	1c51      	adds	r1, r2, #1
 800c1f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1f2:	7852      	ldrb	r2, [r2, #1]
 800c1f4:	2a30      	cmp	r2, #48	@ 0x30
 800c1f6:	d0f9      	beq.n	800c1ec <_strtod_l+0x294>
 800c1f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c1fc:	2908      	cmp	r1, #8
 800c1fe:	f63f af78 	bhi.w	800c0f2 <_strtod_l+0x19a>
 800c202:	f04f 080a 	mov.w	r8, #10
 800c206:	3a30      	subs	r2, #48	@ 0x30
 800c208:	920e      	str	r2, [sp, #56]	@ 0x38
 800c20a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c20c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c20e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c210:	1c56      	adds	r6, r2, #1
 800c212:	9619      	str	r6, [sp, #100]	@ 0x64
 800c214:	7852      	ldrb	r2, [r2, #1]
 800c216:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c21a:	f1be 0f09 	cmp.w	lr, #9
 800c21e:	d939      	bls.n	800c294 <_strtod_l+0x33c>
 800c220:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c222:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c226:	1a76      	subs	r6, r6, r1
 800c228:	2e08      	cmp	r6, #8
 800c22a:	dc03      	bgt.n	800c234 <_strtod_l+0x2dc>
 800c22c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c22e:	4588      	cmp	r8, r1
 800c230:	bfa8      	it	ge
 800c232:	4688      	movge	r8, r1
 800c234:	f1bc 0f00 	cmp.w	ip, #0
 800c238:	d001      	beq.n	800c23e <_strtod_l+0x2e6>
 800c23a:	f1c8 0800 	rsb	r8, r8, #0
 800c23e:	2d00      	cmp	r5, #0
 800c240:	d14e      	bne.n	800c2e0 <_strtod_l+0x388>
 800c242:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c244:	4308      	orrs	r0, r1
 800c246:	f47f aec0 	bne.w	800bfca <_strtod_l+0x72>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f47f aed6 	bne.w	800bffc <_strtod_l+0xa4>
 800c250:	2a69      	cmp	r2, #105	@ 0x69
 800c252:	d028      	beq.n	800c2a6 <_strtod_l+0x34e>
 800c254:	dc25      	bgt.n	800c2a2 <_strtod_l+0x34a>
 800c256:	2a49      	cmp	r2, #73	@ 0x49
 800c258:	d025      	beq.n	800c2a6 <_strtod_l+0x34e>
 800c25a:	2a4e      	cmp	r2, #78	@ 0x4e
 800c25c:	f47f aece 	bne.w	800bffc <_strtod_l+0xa4>
 800c260:	499a      	ldr	r1, [pc, #616]	@ (800c4cc <_strtod_l+0x574>)
 800c262:	a819      	add	r0, sp, #100	@ 0x64
 800c264:	f001 fb06 	bl	800d874 <__match>
 800c268:	2800      	cmp	r0, #0
 800c26a:	f43f aec7 	beq.w	800bffc <_strtod_l+0xa4>
 800c26e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b28      	cmp	r3, #40	@ 0x28
 800c274:	d12e      	bne.n	800c2d4 <_strtod_l+0x37c>
 800c276:	4996      	ldr	r1, [pc, #600]	@ (800c4d0 <_strtod_l+0x578>)
 800c278:	aa1c      	add	r2, sp, #112	@ 0x70
 800c27a:	a819      	add	r0, sp, #100	@ 0x64
 800c27c:	f001 fb0e 	bl	800d89c <__hexnan>
 800c280:	2805      	cmp	r0, #5
 800c282:	d127      	bne.n	800c2d4 <_strtod_l+0x37c>
 800c284:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c286:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c28a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c28e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c292:	e69a      	b.n	800bfca <_strtod_l+0x72>
 800c294:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c296:	fb08 2101 	mla	r1, r8, r1, r2
 800c29a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c29e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2a0:	e7b5      	b.n	800c20e <_strtod_l+0x2b6>
 800c2a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800c2a4:	e7da      	b.n	800c25c <_strtod_l+0x304>
 800c2a6:	498b      	ldr	r1, [pc, #556]	@ (800c4d4 <_strtod_l+0x57c>)
 800c2a8:	a819      	add	r0, sp, #100	@ 0x64
 800c2aa:	f001 fae3 	bl	800d874 <__match>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f43f aea4 	beq.w	800bffc <_strtod_l+0xa4>
 800c2b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2b6:	4988      	ldr	r1, [pc, #544]	@ (800c4d8 <_strtod_l+0x580>)
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	a819      	add	r0, sp, #100	@ 0x64
 800c2bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2be:	f001 fad9 	bl	800d874 <__match>
 800c2c2:	b910      	cbnz	r0, 800c2ca <_strtod_l+0x372>
 800c2c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2ca:	f04f 0a00 	mov.w	sl, #0
 800c2ce:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800c4dc <_strtod_l+0x584>
 800c2d2:	e67a      	b.n	800bfca <_strtod_l+0x72>
 800c2d4:	4882      	ldr	r0, [pc, #520]	@ (800c4e0 <_strtod_l+0x588>)
 800c2d6:	f001 f80b 	bl	800d2f0 <nan>
 800c2da:	4682      	mov	sl, r0
 800c2dc:	468b      	mov	fp, r1
 800c2de:	e674      	b.n	800bfca <_strtod_l+0x72>
 800c2e0:	eba8 0309 	sub.w	r3, r8, r9
 800c2e4:	2f00      	cmp	r7, #0
 800c2e6:	bf08      	it	eq
 800c2e8:	462f      	moveq	r7, r5
 800c2ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2ec:	2d10      	cmp	r5, #16
 800c2ee:	462c      	mov	r4, r5
 800c2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f2:	bfa8      	it	ge
 800c2f4:	2410      	movge	r4, #16
 800c2f6:	f7f4 f875 	bl	80003e4 <__aeabi_ui2d>
 800c2fa:	2d09      	cmp	r5, #9
 800c2fc:	4682      	mov	sl, r0
 800c2fe:	468b      	mov	fp, r1
 800c300:	dc11      	bgt.n	800c326 <_strtod_l+0x3ce>
 800c302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c304:	2b00      	cmp	r3, #0
 800c306:	f43f ae60 	beq.w	800bfca <_strtod_l+0x72>
 800c30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c30c:	dd76      	ble.n	800c3fc <_strtod_l+0x4a4>
 800c30e:	2b16      	cmp	r3, #22
 800c310:	dc5d      	bgt.n	800c3ce <_strtod_l+0x476>
 800c312:	4974      	ldr	r1, [pc, #464]	@ (800c4e4 <_strtod_l+0x58c>)
 800c314:	4652      	mov	r2, sl
 800c316:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c31a:	465b      	mov	r3, fp
 800c31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c320:	f7f4 f8da 	bl	80004d8 <__aeabi_dmul>
 800c324:	e7d9      	b.n	800c2da <_strtod_l+0x382>
 800c326:	4b6f      	ldr	r3, [pc, #444]	@ (800c4e4 <_strtod_l+0x58c>)
 800c328:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c32c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c330:	f7f4 f8d2 	bl	80004d8 <__aeabi_dmul>
 800c334:	4682      	mov	sl, r0
 800c336:	9808      	ldr	r0, [sp, #32]
 800c338:	468b      	mov	fp, r1
 800c33a:	f7f4 f853 	bl	80003e4 <__aeabi_ui2d>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4650      	mov	r0, sl
 800c344:	4659      	mov	r1, fp
 800c346:	f7f3 ff11 	bl	800016c <__adddf3>
 800c34a:	2d0f      	cmp	r5, #15
 800c34c:	4682      	mov	sl, r0
 800c34e:	468b      	mov	fp, r1
 800c350:	ddd7      	ble.n	800c302 <_strtod_l+0x3aa>
 800c352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c354:	1b2c      	subs	r4, r5, r4
 800c356:	441c      	add	r4, r3
 800c358:	2c00      	cmp	r4, #0
 800c35a:	f340 8096 	ble.w	800c48a <_strtod_l+0x532>
 800c35e:	f014 030f 	ands.w	r3, r4, #15
 800c362:	d00a      	beq.n	800c37a <_strtod_l+0x422>
 800c364:	495f      	ldr	r1, [pc, #380]	@ (800c4e4 <_strtod_l+0x58c>)
 800c366:	4652      	mov	r2, sl
 800c368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c370:	465b      	mov	r3, fp
 800c372:	f7f4 f8b1 	bl	80004d8 <__aeabi_dmul>
 800c376:	4682      	mov	sl, r0
 800c378:	468b      	mov	fp, r1
 800c37a:	f034 040f 	bics.w	r4, r4, #15
 800c37e:	d073      	beq.n	800c468 <_strtod_l+0x510>
 800c380:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c384:	dd48      	ble.n	800c418 <_strtod_l+0x4c0>
 800c386:	2400      	movs	r4, #0
 800c388:	46a0      	mov	r8, r4
 800c38a:	46a1      	mov	r9, r4
 800c38c:	940a      	str	r4, [sp, #40]	@ 0x28
 800c38e:	2322      	movs	r3, #34	@ 0x22
 800c390:	f04f 0a00 	mov.w	sl, #0
 800c394:	9a05      	ldr	r2, [sp, #20]
 800c396:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800c4dc <_strtod_l+0x584>
 800c39a:	6013      	str	r3, [r2, #0]
 800c39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f43f ae13 	beq.w	800bfca <_strtod_l+0x72>
 800c3a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3a6:	9805      	ldr	r0, [sp, #20]
 800c3a8:	f7ff f94c 	bl	800b644 <_Bfree>
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	9805      	ldr	r0, [sp, #20]
 800c3b0:	f7ff f948 	bl	800b644 <_Bfree>
 800c3b4:	4641      	mov	r1, r8
 800c3b6:	9805      	ldr	r0, [sp, #20]
 800c3b8:	f7ff f944 	bl	800b644 <_Bfree>
 800c3bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3be:	9805      	ldr	r0, [sp, #20]
 800c3c0:	f7ff f940 	bl	800b644 <_Bfree>
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	9805      	ldr	r0, [sp, #20]
 800c3c8:	f7ff f93c 	bl	800b644 <_Bfree>
 800c3cc:	e5fd      	b.n	800bfca <_strtod_l+0x72>
 800c3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	dbbc      	blt.n	800c352 <_strtod_l+0x3fa>
 800c3d8:	4c42      	ldr	r4, [pc, #264]	@ (800c4e4 <_strtod_l+0x58c>)
 800c3da:	f1c5 050f 	rsb	r5, r5, #15
 800c3de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c3e2:	4652      	mov	r2, sl
 800c3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3e8:	465b      	mov	r3, fp
 800c3ea:	f7f4 f875 	bl	80004d8 <__aeabi_dmul>
 800c3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3f0:	1b5d      	subs	r5, r3, r5
 800c3f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c3f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c3fa:	e791      	b.n	800c320 <_strtod_l+0x3c8>
 800c3fc:	3316      	adds	r3, #22
 800c3fe:	dba8      	blt.n	800c352 <_strtod_l+0x3fa>
 800c400:	4b38      	ldr	r3, [pc, #224]	@ (800c4e4 <_strtod_l+0x58c>)
 800c402:	eba9 0808 	sub.w	r8, r9, r8
 800c406:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c40a:	4650      	mov	r0, sl
 800c40c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c410:	4659      	mov	r1, fp
 800c412:	f7f4 f98b 	bl	800072c <__aeabi_ddiv>
 800c416:	e760      	b.n	800c2da <_strtod_l+0x382>
 800c418:	4b33      	ldr	r3, [pc, #204]	@ (800c4e8 <_strtod_l+0x590>)
 800c41a:	4650      	mov	r0, sl
 800c41c:	9308      	str	r3, [sp, #32]
 800c41e:	2300      	movs	r3, #0
 800c420:	4659      	mov	r1, fp
 800c422:	461e      	mov	r6, r3
 800c424:	1124      	asrs	r4, r4, #4
 800c426:	2c01      	cmp	r4, #1
 800c428:	dc21      	bgt.n	800c46e <_strtod_l+0x516>
 800c42a:	b10b      	cbz	r3, 800c430 <_strtod_l+0x4d8>
 800c42c:	4682      	mov	sl, r0
 800c42e:	468b      	mov	fp, r1
 800c430:	492d      	ldr	r1, [pc, #180]	@ (800c4e8 <_strtod_l+0x590>)
 800c432:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c436:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c43a:	4652      	mov	r2, sl
 800c43c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c440:	465b      	mov	r3, fp
 800c442:	f7f4 f849 	bl	80004d8 <__aeabi_dmul>
 800c446:	4b25      	ldr	r3, [pc, #148]	@ (800c4dc <_strtod_l+0x584>)
 800c448:	460a      	mov	r2, r1
 800c44a:	400b      	ands	r3, r1
 800c44c:	4927      	ldr	r1, [pc, #156]	@ (800c4ec <_strtod_l+0x594>)
 800c44e:	4682      	mov	sl, r0
 800c450:	428b      	cmp	r3, r1
 800c452:	d898      	bhi.n	800c386 <_strtod_l+0x42e>
 800c454:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c458:	428b      	cmp	r3, r1
 800c45a:	bf86      	itte	hi
 800c45c:	f04f 3aff 	movhi.w	sl, #4294967295
 800c460:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c4f0 <_strtod_l+0x598>
 800c464:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c468:	2300      	movs	r3, #0
 800c46a:	9308      	str	r3, [sp, #32]
 800c46c:	e07a      	b.n	800c564 <_strtod_l+0x60c>
 800c46e:	07e2      	lsls	r2, r4, #31
 800c470:	d505      	bpl.n	800c47e <_strtod_l+0x526>
 800c472:	9b08      	ldr	r3, [sp, #32]
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f4 f82e 	bl	80004d8 <__aeabi_dmul>
 800c47c:	2301      	movs	r3, #1
 800c47e:	9a08      	ldr	r2, [sp, #32]
 800c480:	3601      	adds	r6, #1
 800c482:	3208      	adds	r2, #8
 800c484:	1064      	asrs	r4, r4, #1
 800c486:	9208      	str	r2, [sp, #32]
 800c488:	e7cd      	b.n	800c426 <_strtod_l+0x4ce>
 800c48a:	d0ed      	beq.n	800c468 <_strtod_l+0x510>
 800c48c:	4264      	negs	r4, r4
 800c48e:	f014 020f 	ands.w	r2, r4, #15
 800c492:	d00a      	beq.n	800c4aa <_strtod_l+0x552>
 800c494:	4b13      	ldr	r3, [pc, #76]	@ (800c4e4 <_strtod_l+0x58c>)
 800c496:	4650      	mov	r0, sl
 800c498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c49c:	4659      	mov	r1, fp
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f7f4 f943 	bl	800072c <__aeabi_ddiv>
 800c4a6:	4682      	mov	sl, r0
 800c4a8:	468b      	mov	fp, r1
 800c4aa:	1124      	asrs	r4, r4, #4
 800c4ac:	d0dc      	beq.n	800c468 <_strtod_l+0x510>
 800c4ae:	2c1f      	cmp	r4, #31
 800c4b0:	dd20      	ble.n	800c4f4 <_strtod_l+0x59c>
 800c4b2:	2400      	movs	r4, #0
 800c4b4:	46a0      	mov	r8, r4
 800c4b6:	46a1      	mov	r9, r4
 800c4b8:	940a      	str	r4, [sp, #40]	@ 0x28
 800c4ba:	2322      	movs	r3, #34	@ 0x22
 800c4bc:	9a05      	ldr	r2, [sp, #20]
 800c4be:	f04f 0a00 	mov.w	sl, #0
 800c4c2:	f04f 0b00 	mov.w	fp, #0
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	e768      	b.n	800c39c <_strtod_l+0x444>
 800c4ca:	bf00      	nop
 800c4cc:	0800de94 	.word	0x0800de94
 800c4d0:	0800e0ac 	.word	0x0800e0ac
 800c4d4:	0800de8c 	.word	0x0800de8c
 800c4d8:	0800dec3 	.word	0x0800dec3
 800c4dc:	7ff00000 	.word	0x7ff00000
 800c4e0:	0800e154 	.word	0x0800e154
 800c4e4:	0800dfe0 	.word	0x0800dfe0
 800c4e8:	0800dfb8 	.word	0x0800dfb8
 800c4ec:	7ca00000 	.word	0x7ca00000
 800c4f0:	7fefffff 	.word	0x7fefffff
 800c4f4:	f014 0310 	ands.w	r3, r4, #16
 800c4f8:	bf18      	it	ne
 800c4fa:	236a      	movne	r3, #106	@ 0x6a
 800c4fc:	4650      	mov	r0, sl
 800c4fe:	9308      	str	r3, [sp, #32]
 800c500:	4659      	mov	r1, fp
 800c502:	2300      	movs	r3, #0
 800c504:	4ea9      	ldr	r6, [pc, #676]	@ (800c7ac <_strtod_l+0x854>)
 800c506:	07e2      	lsls	r2, r4, #31
 800c508:	d504      	bpl.n	800c514 <_strtod_l+0x5bc>
 800c50a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c50e:	f7f3 ffe3 	bl	80004d8 <__aeabi_dmul>
 800c512:	2301      	movs	r3, #1
 800c514:	1064      	asrs	r4, r4, #1
 800c516:	f106 0608 	add.w	r6, r6, #8
 800c51a:	d1f4      	bne.n	800c506 <_strtod_l+0x5ae>
 800c51c:	b10b      	cbz	r3, 800c522 <_strtod_l+0x5ca>
 800c51e:	4682      	mov	sl, r0
 800c520:	468b      	mov	fp, r1
 800c522:	9b08      	ldr	r3, [sp, #32]
 800c524:	b1b3      	cbz	r3, 800c554 <_strtod_l+0x5fc>
 800c526:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c52a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c52e:	2b00      	cmp	r3, #0
 800c530:	4659      	mov	r1, fp
 800c532:	dd0f      	ble.n	800c554 <_strtod_l+0x5fc>
 800c534:	2b1f      	cmp	r3, #31
 800c536:	dd57      	ble.n	800c5e8 <_strtod_l+0x690>
 800c538:	2b34      	cmp	r3, #52	@ 0x34
 800c53a:	bfd8      	it	le
 800c53c:	f04f 33ff 	movle.w	r3, #4294967295
 800c540:	f04f 0a00 	mov.w	sl, #0
 800c544:	bfcf      	iteee	gt
 800c546:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c54a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c54e:	4093      	lslle	r3, r2
 800c550:	ea03 0b01 	andle.w	fp, r3, r1
 800c554:	2200      	movs	r2, #0
 800c556:	2300      	movs	r3, #0
 800c558:	4650      	mov	r0, sl
 800c55a:	4659      	mov	r1, fp
 800c55c:	f7f4 fa24 	bl	80009a8 <__aeabi_dcmpeq>
 800c560:	2800      	cmp	r0, #0
 800c562:	d1a6      	bne.n	800c4b2 <_strtod_l+0x55a>
 800c564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c566:	463a      	mov	r2, r7
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c56c:	462b      	mov	r3, r5
 800c56e:	9805      	ldr	r0, [sp, #20]
 800c570:	f7ff f8d0 	bl	800b714 <__s2b>
 800c574:	900a      	str	r0, [sp, #40]	@ 0x28
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f af05 	beq.w	800c386 <_strtod_l+0x42e>
 800c57c:	2400      	movs	r4, #0
 800c57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c580:	eba9 0308 	sub.w	r3, r9, r8
 800c584:	2a00      	cmp	r2, #0
 800c586:	bfa8      	it	ge
 800c588:	2300      	movge	r3, #0
 800c58a:	46a0      	mov	r8, r4
 800c58c:	9312      	str	r3, [sp, #72]	@ 0x48
 800c58e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c592:	9316      	str	r3, [sp, #88]	@ 0x58
 800c594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c596:	9805      	ldr	r0, [sp, #20]
 800c598:	6859      	ldr	r1, [r3, #4]
 800c59a:	f7ff f813 	bl	800b5c4 <_Balloc>
 800c59e:	4681      	mov	r9, r0
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	f43f aef4 	beq.w	800c38e <_strtod_l+0x436>
 800c5a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5a8:	300c      	adds	r0, #12
 800c5aa:	691a      	ldr	r2, [r3, #16]
 800c5ac:	f103 010c 	add.w	r1, r3, #12
 800c5b0:	3202      	adds	r2, #2
 800c5b2:	0092      	lsls	r2, r2, #2
 800c5b4:	f7fe f8a3 	bl	800a6fe <memcpy>
 800c5b8:	ab1c      	add	r3, sp, #112	@ 0x70
 800c5ba:	9301      	str	r3, [sp, #4]
 800c5bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	4652      	mov	r2, sl
 800c5c2:	465b      	mov	r3, fp
 800c5c4:	9805      	ldr	r0, [sp, #20]
 800c5c6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c5ca:	f7ff fbd5 	bl	800bd78 <__d2b>
 800c5ce:	901a      	str	r0, [sp, #104]	@ 0x68
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	f43f aedc 	beq.w	800c38e <_strtod_l+0x436>
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	9805      	ldr	r0, [sp, #20]
 800c5da:	f7ff f931 	bl	800b840 <__i2b>
 800c5de:	4680      	mov	r8, r0
 800c5e0:	b948      	cbnz	r0, 800c5f6 <_strtod_l+0x69e>
 800c5e2:	f04f 0800 	mov.w	r8, #0
 800c5e6:	e6d2      	b.n	800c38e <_strtod_l+0x436>
 800c5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f0:	ea03 0a0a 	and.w	sl, r3, sl
 800c5f4:	e7ae      	b.n	800c554 <_strtod_l+0x5fc>
 800c5f6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c5f8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c5fa:	2d00      	cmp	r5, #0
 800c5fc:	bfab      	itete	ge
 800c5fe:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c600:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c602:	18ef      	addge	r7, r5, r3
 800c604:	1b5e      	sublt	r6, r3, r5
 800c606:	9b08      	ldr	r3, [sp, #32]
 800c608:	bfa8      	it	ge
 800c60a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c60c:	eba5 0503 	sub.w	r5, r5, r3
 800c610:	4415      	add	r5, r2
 800c612:	4b67      	ldr	r3, [pc, #412]	@ (800c7b0 <_strtod_l+0x858>)
 800c614:	f105 35ff 	add.w	r5, r5, #4294967295
 800c618:	bfb8      	it	lt
 800c61a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c61c:	429d      	cmp	r5, r3
 800c61e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c622:	da50      	bge.n	800c6c6 <_strtod_l+0x76e>
 800c624:	1b5b      	subs	r3, r3, r5
 800c626:	2b1f      	cmp	r3, #31
 800c628:	f04f 0101 	mov.w	r1, #1
 800c62c:	eba2 0203 	sub.w	r2, r2, r3
 800c630:	dc3d      	bgt.n	800c6ae <_strtod_l+0x756>
 800c632:	fa01 f303 	lsl.w	r3, r1, r3
 800c636:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c638:	2300      	movs	r3, #0
 800c63a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c63c:	18bd      	adds	r5, r7, r2
 800c63e:	9b08      	ldr	r3, [sp, #32]
 800c640:	42af      	cmp	r7, r5
 800c642:	4416      	add	r6, r2
 800c644:	441e      	add	r6, r3
 800c646:	463b      	mov	r3, r7
 800c648:	bfa8      	it	ge
 800c64a:	462b      	movge	r3, r5
 800c64c:	42b3      	cmp	r3, r6
 800c64e:	bfa8      	it	ge
 800c650:	4633      	movge	r3, r6
 800c652:	2b00      	cmp	r3, #0
 800c654:	bfc2      	ittt	gt
 800c656:	1aed      	subgt	r5, r5, r3
 800c658:	1af6      	subgt	r6, r6, r3
 800c65a:	1aff      	subgt	r7, r7, r3
 800c65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c65e:	2b00      	cmp	r3, #0
 800c660:	dd16      	ble.n	800c690 <_strtod_l+0x738>
 800c662:	4641      	mov	r1, r8
 800c664:	461a      	mov	r2, r3
 800c666:	9805      	ldr	r0, [sp, #20]
 800c668:	f7ff f9a8 	bl	800b9bc <__pow5mult>
 800c66c:	4680      	mov	r8, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	d0b7      	beq.n	800c5e2 <_strtod_l+0x68a>
 800c672:	4601      	mov	r1, r0
 800c674:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c676:	9805      	ldr	r0, [sp, #20]
 800c678:	f7ff f8f8 	bl	800b86c <__multiply>
 800c67c:	900e      	str	r0, [sp, #56]	@ 0x38
 800c67e:	2800      	cmp	r0, #0
 800c680:	f43f ae85 	beq.w	800c38e <_strtod_l+0x436>
 800c684:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c686:	9805      	ldr	r0, [sp, #20]
 800c688:	f7fe ffdc 	bl	800b644 <_Bfree>
 800c68c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c68e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c690:	2d00      	cmp	r5, #0
 800c692:	dc1d      	bgt.n	800c6d0 <_strtod_l+0x778>
 800c694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c696:	2b00      	cmp	r3, #0
 800c698:	dd23      	ble.n	800c6e2 <_strtod_l+0x78a>
 800c69a:	4649      	mov	r1, r9
 800c69c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c69e:	9805      	ldr	r0, [sp, #20]
 800c6a0:	f7ff f98c 	bl	800b9bc <__pow5mult>
 800c6a4:	4681      	mov	r9, r0
 800c6a6:	b9e0      	cbnz	r0, 800c6e2 <_strtod_l+0x78a>
 800c6a8:	f04f 0900 	mov.w	r9, #0
 800c6ac:	e66f      	b.n	800c38e <_strtod_l+0x436>
 800c6ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c6b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c6b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c6ba:	35e2      	adds	r5, #226	@ 0xe2
 800c6bc:	fa01 f305 	lsl.w	r3, r1, r5
 800c6c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c6c4:	e7ba      	b.n	800c63c <_strtod_l+0x6e4>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6ce:	e7b5      	b.n	800c63c <_strtod_l+0x6e4>
 800c6d0:	462a      	mov	r2, r5
 800c6d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6d4:	9805      	ldr	r0, [sp, #20]
 800c6d6:	f7ff f9cb 	bl	800ba70 <__lshift>
 800c6da:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d1d9      	bne.n	800c694 <_strtod_l+0x73c>
 800c6e0:	e655      	b.n	800c38e <_strtod_l+0x436>
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	dd07      	ble.n	800c6f6 <_strtod_l+0x79e>
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	4632      	mov	r2, r6
 800c6ea:	9805      	ldr	r0, [sp, #20]
 800c6ec:	f7ff f9c0 	bl	800ba70 <__lshift>
 800c6f0:	4681      	mov	r9, r0
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d0d8      	beq.n	800c6a8 <_strtod_l+0x750>
 800c6f6:	2f00      	cmp	r7, #0
 800c6f8:	dd08      	ble.n	800c70c <_strtod_l+0x7b4>
 800c6fa:	4641      	mov	r1, r8
 800c6fc:	463a      	mov	r2, r7
 800c6fe:	9805      	ldr	r0, [sp, #20]
 800c700:	f7ff f9b6 	bl	800ba70 <__lshift>
 800c704:	4680      	mov	r8, r0
 800c706:	2800      	cmp	r0, #0
 800c708:	f43f ae41 	beq.w	800c38e <_strtod_l+0x436>
 800c70c:	464a      	mov	r2, r9
 800c70e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c710:	9805      	ldr	r0, [sp, #20]
 800c712:	f7ff fa35 	bl	800bb80 <__mdiff>
 800c716:	4604      	mov	r4, r0
 800c718:	2800      	cmp	r0, #0
 800c71a:	f43f ae38 	beq.w	800c38e <_strtod_l+0x436>
 800c71e:	68c3      	ldr	r3, [r0, #12]
 800c720:	4641      	mov	r1, r8
 800c722:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c724:	2300      	movs	r3, #0
 800c726:	60c3      	str	r3, [r0, #12]
 800c728:	f7ff fa0e 	bl	800bb48 <__mcmp>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	da45      	bge.n	800c7bc <_strtod_l+0x864>
 800c730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c732:	ea53 030a 	orrs.w	r3, r3, sl
 800c736:	d16b      	bne.n	800c810 <_strtod_l+0x8b8>
 800c738:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d167      	bne.n	800c810 <_strtod_l+0x8b8>
 800c740:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c744:	0d1b      	lsrs	r3, r3, #20
 800c746:	051b      	lsls	r3, r3, #20
 800c748:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c74c:	d960      	bls.n	800c810 <_strtod_l+0x8b8>
 800c74e:	6963      	ldr	r3, [r4, #20]
 800c750:	b913      	cbnz	r3, 800c758 <_strtod_l+0x800>
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	2b01      	cmp	r3, #1
 800c756:	dd5b      	ble.n	800c810 <_strtod_l+0x8b8>
 800c758:	4621      	mov	r1, r4
 800c75a:	2201      	movs	r2, #1
 800c75c:	9805      	ldr	r0, [sp, #20]
 800c75e:	f7ff f987 	bl	800ba70 <__lshift>
 800c762:	4641      	mov	r1, r8
 800c764:	4604      	mov	r4, r0
 800c766:	f7ff f9ef 	bl	800bb48 <__mcmp>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	dd50      	ble.n	800c810 <_strtod_l+0x8b8>
 800c76e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c772:	9a08      	ldr	r2, [sp, #32]
 800c774:	0d1b      	lsrs	r3, r3, #20
 800c776:	051b      	lsls	r3, r3, #20
 800c778:	2a00      	cmp	r2, #0
 800c77a:	d06a      	beq.n	800c852 <_strtod_l+0x8fa>
 800c77c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c780:	d867      	bhi.n	800c852 <_strtod_l+0x8fa>
 800c782:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c786:	f67f ae98 	bls.w	800c4ba <_strtod_l+0x562>
 800c78a:	4650      	mov	r0, sl
 800c78c:	4659      	mov	r1, fp
 800c78e:	4b09      	ldr	r3, [pc, #36]	@ (800c7b4 <_strtod_l+0x85c>)
 800c790:	2200      	movs	r2, #0
 800c792:	f7f3 fea1 	bl	80004d8 <__aeabi_dmul>
 800c796:	4b08      	ldr	r3, [pc, #32]	@ (800c7b8 <_strtod_l+0x860>)
 800c798:	4682      	mov	sl, r0
 800c79a:	400b      	ands	r3, r1
 800c79c:	468b      	mov	fp, r1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f47f ae00 	bne.w	800c3a4 <_strtod_l+0x44c>
 800c7a4:	2322      	movs	r3, #34	@ 0x22
 800c7a6:	9a05      	ldr	r2, [sp, #20]
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	e5fb      	b.n	800c3a4 <_strtod_l+0x44c>
 800c7ac:	0800e0d8 	.word	0x0800e0d8
 800c7b0:	fffffc02 	.word	0xfffffc02
 800c7b4:	39500000 	.word	0x39500000
 800c7b8:	7ff00000 	.word	0x7ff00000
 800c7bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c7c0:	d165      	bne.n	800c88e <_strtod_l+0x936>
 800c7c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7c8:	b35a      	cbz	r2, 800c822 <_strtod_l+0x8ca>
 800c7ca:	4a99      	ldr	r2, [pc, #612]	@ (800ca30 <_strtod_l+0xad8>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d12b      	bne.n	800c828 <_strtod_l+0x8d0>
 800c7d0:	9b08      	ldr	r3, [sp, #32]
 800c7d2:	4651      	mov	r1, sl
 800c7d4:	b303      	cbz	r3, 800c818 <_strtod_l+0x8c0>
 800c7d6:	465a      	mov	r2, fp
 800c7d8:	4b96      	ldr	r3, [pc, #600]	@ (800ca34 <_strtod_l+0xadc>)
 800c7da:	4013      	ands	r3, r2
 800c7dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e4:	d81b      	bhi.n	800c81e <_strtod_l+0x8c6>
 800c7e6:	0d1b      	lsrs	r3, r3, #20
 800c7e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f0:	4299      	cmp	r1, r3
 800c7f2:	d119      	bne.n	800c828 <_strtod_l+0x8d0>
 800c7f4:	4b90      	ldr	r3, [pc, #576]	@ (800ca38 <_strtod_l+0xae0>)
 800c7f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d102      	bne.n	800c802 <_strtod_l+0x8aa>
 800c7fc:	3101      	adds	r1, #1
 800c7fe:	f43f adc6 	beq.w	800c38e <_strtod_l+0x436>
 800c802:	f04f 0a00 	mov.w	sl, #0
 800c806:	4b8b      	ldr	r3, [pc, #556]	@ (800ca34 <_strtod_l+0xadc>)
 800c808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c80a:	401a      	ands	r2, r3
 800c80c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c810:	9b08      	ldr	r3, [sp, #32]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1b9      	bne.n	800c78a <_strtod_l+0x832>
 800c816:	e5c5      	b.n	800c3a4 <_strtod_l+0x44c>
 800c818:	f04f 33ff 	mov.w	r3, #4294967295
 800c81c:	e7e8      	b.n	800c7f0 <_strtod_l+0x898>
 800c81e:	4613      	mov	r3, r2
 800c820:	e7e6      	b.n	800c7f0 <_strtod_l+0x898>
 800c822:	ea53 030a 	orrs.w	r3, r3, sl
 800c826:	d0a2      	beq.n	800c76e <_strtod_l+0x816>
 800c828:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c82a:	b1db      	cbz	r3, 800c864 <_strtod_l+0x90c>
 800c82c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c82e:	4213      	tst	r3, r2
 800c830:	d0ee      	beq.n	800c810 <_strtod_l+0x8b8>
 800c832:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c834:	4650      	mov	r0, sl
 800c836:	4659      	mov	r1, fp
 800c838:	9a08      	ldr	r2, [sp, #32]
 800c83a:	b1bb      	cbz	r3, 800c86c <_strtod_l+0x914>
 800c83c:	f7ff fb68 	bl	800bf10 <sulp>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c848:	f7f3 fc90 	bl	800016c <__adddf3>
 800c84c:	4682      	mov	sl, r0
 800c84e:	468b      	mov	fp, r1
 800c850:	e7de      	b.n	800c810 <_strtod_l+0x8b8>
 800c852:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c856:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c85a:	f04f 3aff 	mov.w	sl, #4294967295
 800c85e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c862:	e7d5      	b.n	800c810 <_strtod_l+0x8b8>
 800c864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c866:	ea13 0f0a 	tst.w	r3, sl
 800c86a:	e7e1      	b.n	800c830 <_strtod_l+0x8d8>
 800c86c:	f7ff fb50 	bl	800bf10 <sulp>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c878:	f7f3 fc76 	bl	8000168 <__aeabi_dsub>
 800c87c:	2200      	movs	r2, #0
 800c87e:	2300      	movs	r3, #0
 800c880:	4682      	mov	sl, r0
 800c882:	468b      	mov	fp, r1
 800c884:	f7f4 f890 	bl	80009a8 <__aeabi_dcmpeq>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d0c1      	beq.n	800c810 <_strtod_l+0x8b8>
 800c88c:	e615      	b.n	800c4ba <_strtod_l+0x562>
 800c88e:	4641      	mov	r1, r8
 800c890:	4620      	mov	r0, r4
 800c892:	f7ff fac9 	bl	800be28 <__ratio>
 800c896:	2200      	movs	r2, #0
 800c898:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c89c:	4606      	mov	r6, r0
 800c89e:	460f      	mov	r7, r1
 800c8a0:	f7f4 f896 	bl	80009d0 <__aeabi_dcmple>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d06d      	beq.n	800c984 <_strtod_l+0xa2c>
 800c8a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d178      	bne.n	800c9a0 <_strtod_l+0xa48>
 800c8ae:	f1ba 0f00 	cmp.w	sl, #0
 800c8b2:	d156      	bne.n	800c962 <_strtod_l+0xa0a>
 800c8b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d158      	bne.n	800c970 <_strtod_l+0xa18>
 800c8be:	2200      	movs	r2, #0
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	4b5d      	ldr	r3, [pc, #372]	@ (800ca3c <_strtod_l+0xae4>)
 800c8c6:	f7f4 f879 	bl	80009bc <__aeabi_dcmplt>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d157      	bne.n	800c97e <_strtod_l+0xa26>
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4b5a      	ldr	r3, [pc, #360]	@ (800ca40 <_strtod_l+0xae8>)
 800c8d6:	f7f3 fdff 	bl	80004d8 <__aeabi_dmul>
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c8e2:	9606      	str	r6, [sp, #24]
 800c8e4:	9307      	str	r3, [sp, #28]
 800c8e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8ea:	4d52      	ldr	r5, [pc, #328]	@ (800ca34 <_strtod_l+0xadc>)
 800c8ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8f2:	401d      	ands	r5, r3
 800c8f4:	4b53      	ldr	r3, [pc, #332]	@ (800ca44 <_strtod_l+0xaec>)
 800c8f6:	429d      	cmp	r5, r3
 800c8f8:	f040 80aa 	bne.w	800ca50 <_strtod_l+0xaf8>
 800c8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8fe:	4650      	mov	r0, sl
 800c900:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c904:	4659      	mov	r1, fp
 800c906:	f7ff f9cf 	bl	800bca8 <__ulp>
 800c90a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c90e:	f7f3 fde3 	bl	80004d8 <__aeabi_dmul>
 800c912:	4652      	mov	r2, sl
 800c914:	465b      	mov	r3, fp
 800c916:	f7f3 fc29 	bl	800016c <__adddf3>
 800c91a:	460b      	mov	r3, r1
 800c91c:	4945      	ldr	r1, [pc, #276]	@ (800ca34 <_strtod_l+0xadc>)
 800c91e:	4a4a      	ldr	r2, [pc, #296]	@ (800ca48 <_strtod_l+0xaf0>)
 800c920:	4019      	ands	r1, r3
 800c922:	4291      	cmp	r1, r2
 800c924:	4682      	mov	sl, r0
 800c926:	d942      	bls.n	800c9ae <_strtod_l+0xa56>
 800c928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c92a:	4b43      	ldr	r3, [pc, #268]	@ (800ca38 <_strtod_l+0xae0>)
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d103      	bne.n	800c938 <_strtod_l+0x9e0>
 800c930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c932:	3301      	adds	r3, #1
 800c934:	f43f ad2b 	beq.w	800c38e <_strtod_l+0x436>
 800c938:	f04f 3aff 	mov.w	sl, #4294967295
 800c93c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800ca38 <_strtod_l+0xae0>
 800c940:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c942:	9805      	ldr	r0, [sp, #20]
 800c944:	f7fe fe7e 	bl	800b644 <_Bfree>
 800c948:	4649      	mov	r1, r9
 800c94a:	9805      	ldr	r0, [sp, #20]
 800c94c:	f7fe fe7a 	bl	800b644 <_Bfree>
 800c950:	4641      	mov	r1, r8
 800c952:	9805      	ldr	r0, [sp, #20]
 800c954:	f7fe fe76 	bl	800b644 <_Bfree>
 800c958:	4621      	mov	r1, r4
 800c95a:	9805      	ldr	r0, [sp, #20]
 800c95c:	f7fe fe72 	bl	800b644 <_Bfree>
 800c960:	e618      	b.n	800c594 <_strtod_l+0x63c>
 800c962:	f1ba 0f01 	cmp.w	sl, #1
 800c966:	d103      	bne.n	800c970 <_strtod_l+0xa18>
 800c968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f43f ada5 	beq.w	800c4ba <_strtod_l+0x562>
 800c970:	2200      	movs	r2, #0
 800c972:	4b36      	ldr	r3, [pc, #216]	@ (800ca4c <_strtod_l+0xaf4>)
 800c974:	2600      	movs	r6, #0
 800c976:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c97a:	4f30      	ldr	r7, [pc, #192]	@ (800ca3c <_strtod_l+0xae4>)
 800c97c:	e7b3      	b.n	800c8e6 <_strtod_l+0x98e>
 800c97e:	2600      	movs	r6, #0
 800c980:	4f2f      	ldr	r7, [pc, #188]	@ (800ca40 <_strtod_l+0xae8>)
 800c982:	e7ac      	b.n	800c8de <_strtod_l+0x986>
 800c984:	4630      	mov	r0, r6
 800c986:	4639      	mov	r1, r7
 800c988:	4b2d      	ldr	r3, [pc, #180]	@ (800ca40 <_strtod_l+0xae8>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	f7f3 fda4 	bl	80004d8 <__aeabi_dmul>
 800c990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c992:	4606      	mov	r6, r0
 800c994:	460f      	mov	r7, r1
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0a1      	beq.n	800c8de <_strtod_l+0x986>
 800c99a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c99e:	e7a2      	b.n	800c8e6 <_strtod_l+0x98e>
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	4b26      	ldr	r3, [pc, #152]	@ (800ca3c <_strtod_l+0xae4>)
 800c9a4:	4616      	mov	r6, r2
 800c9a6:	461f      	mov	r7, r3
 800c9a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c9ac:	e79b      	b.n	800c8e6 <_strtod_l+0x98e>
 800c9ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c9b2:	9b08      	ldr	r3, [sp, #32]
 800c9b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1c1      	bne.n	800c940 <_strtod_l+0x9e8>
 800c9bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9c0:	0d1b      	lsrs	r3, r3, #20
 800c9c2:	051b      	lsls	r3, r3, #20
 800c9c4:	429d      	cmp	r5, r3
 800c9c6:	d1bb      	bne.n	800c940 <_strtod_l+0x9e8>
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	f7f4 fb2a 	bl	8001024 <__aeabi_d2lz>
 800c9d0:	f7f3 fd54 	bl	800047c <__aeabi_l2d>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4630      	mov	r0, r6
 800c9da:	4639      	mov	r1, r7
 800c9dc:	f7f3 fbc4 	bl	8000168 <__aeabi_dsub>
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c9e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9ee:	ea46 060a 	orr.w	r6, r6, sl
 800c9f2:	431e      	orrs	r6, r3
 800c9f4:	d069      	beq.n	800caca <_strtod_l+0xb72>
 800c9f6:	a30a      	add	r3, pc, #40	@ (adr r3, 800ca20 <_strtod_l+0xac8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7f3 ffde 	bl	80009bc <__aeabi_dcmplt>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	f47f accf 	bne.w	800c3a4 <_strtod_l+0x44c>
 800ca06:	a308      	add	r3, pc, #32	@ (adr r3, 800ca28 <_strtod_l+0xad0>)
 800ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca10:	f7f3 fff2 	bl	80009f8 <__aeabi_dcmpgt>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d093      	beq.n	800c940 <_strtod_l+0x9e8>
 800ca18:	e4c4      	b.n	800c3a4 <_strtod_l+0x44c>
 800ca1a:	bf00      	nop
 800ca1c:	f3af 8000 	nop.w
 800ca20:	94a03595 	.word	0x94a03595
 800ca24:	3fdfffff 	.word	0x3fdfffff
 800ca28:	35afe535 	.word	0x35afe535
 800ca2c:	3fe00000 	.word	0x3fe00000
 800ca30:	000fffff 	.word	0x000fffff
 800ca34:	7ff00000 	.word	0x7ff00000
 800ca38:	7fefffff 	.word	0x7fefffff
 800ca3c:	3ff00000 	.word	0x3ff00000
 800ca40:	3fe00000 	.word	0x3fe00000
 800ca44:	7fe00000 	.word	0x7fe00000
 800ca48:	7c9fffff 	.word	0x7c9fffff
 800ca4c:	bff00000 	.word	0xbff00000
 800ca50:	9b08      	ldr	r3, [sp, #32]
 800ca52:	b323      	cbz	r3, 800ca9e <_strtod_l+0xb46>
 800ca54:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ca58:	d821      	bhi.n	800ca9e <_strtod_l+0xb46>
 800ca5a:	a327      	add	r3, pc, #156	@ (adr r3, 800caf8 <_strtod_l+0xba0>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	4630      	mov	r0, r6
 800ca62:	4639      	mov	r1, r7
 800ca64:	f7f3 ffb4 	bl	80009d0 <__aeabi_dcmple>
 800ca68:	b1a0      	cbz	r0, 800ca94 <_strtod_l+0xb3c>
 800ca6a:	4639      	mov	r1, r7
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f7f4 f80b 	bl	8000a88 <__aeabi_d2uiz>
 800ca72:	2801      	cmp	r0, #1
 800ca74:	bf38      	it	cc
 800ca76:	2001      	movcc	r0, #1
 800ca78:	f7f3 fcb4 	bl	80003e4 <__aeabi_ui2d>
 800ca7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460f      	mov	r7, r1
 800ca82:	b9fb      	cbnz	r3, 800cac4 <_strtod_l+0xb6c>
 800ca84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca88:	9014      	str	r0, [sp, #80]	@ 0x50
 800ca8a:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ca90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca96:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ca9a:	1b5b      	subs	r3, r3, r5
 800ca9c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800caa2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800caa6:	f7ff f8ff 	bl	800bca8 <__ulp>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4650      	mov	r0, sl
 800cab0:	4659      	mov	r1, fp
 800cab2:	f7f3 fd11 	bl	80004d8 <__aeabi_dmul>
 800cab6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800caba:	f7f3 fb57 	bl	800016c <__adddf3>
 800cabe:	4682      	mov	sl, r0
 800cac0:	468b      	mov	fp, r1
 800cac2:	e776      	b.n	800c9b2 <_strtod_l+0xa5a>
 800cac4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cac8:	e7e0      	b.n	800ca8c <_strtod_l+0xb34>
 800caca:	a30d      	add	r3, pc, #52	@ (adr r3, 800cb00 <_strtod_l+0xba8>)
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	f7f3 ff74 	bl	80009bc <__aeabi_dcmplt>
 800cad4:	e79e      	b.n	800ca14 <_strtod_l+0xabc>
 800cad6:	2300      	movs	r3, #0
 800cad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cadc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	f7ff ba77 	b.w	800bfd2 <_strtod_l+0x7a>
 800cae4:	2a65      	cmp	r2, #101	@ 0x65
 800cae6:	f43f ab6e 	beq.w	800c1c6 <_strtod_l+0x26e>
 800caea:	2a45      	cmp	r2, #69	@ 0x45
 800caec:	f43f ab6b 	beq.w	800c1c6 <_strtod_l+0x26e>
 800caf0:	2301      	movs	r3, #1
 800caf2:	f7ff bba6 	b.w	800c242 <_strtod_l+0x2ea>
 800caf6:	bf00      	nop
 800caf8:	ffc00000 	.word	0xffc00000
 800cafc:	41dfffff 	.word	0x41dfffff
 800cb00:	94a03595 	.word	0x94a03595
 800cb04:	3fcfffff 	.word	0x3fcfffff

0800cb08 <_strtod_r>:
 800cb08:	4b01      	ldr	r3, [pc, #4]	@ (800cb10 <_strtod_r+0x8>)
 800cb0a:	f7ff ba25 	b.w	800bf58 <_strtod_l>
 800cb0e:	bf00      	nop
 800cb10:	2000006c 	.word	0x2000006c

0800cb14 <__ssputs_r>:
 800cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb18:	461f      	mov	r7, r3
 800cb1a:	688e      	ldr	r6, [r1, #8]
 800cb1c:	4682      	mov	sl, r0
 800cb1e:	42be      	cmp	r6, r7
 800cb20:	460c      	mov	r4, r1
 800cb22:	4690      	mov	r8, r2
 800cb24:	680b      	ldr	r3, [r1, #0]
 800cb26:	d82d      	bhi.n	800cb84 <__ssputs_r+0x70>
 800cb28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb30:	d026      	beq.n	800cb80 <__ssputs_r+0x6c>
 800cb32:	6965      	ldr	r5, [r4, #20]
 800cb34:	6909      	ldr	r1, [r1, #16]
 800cb36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb3a:	eba3 0901 	sub.w	r9, r3, r1
 800cb3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb42:	1c7b      	adds	r3, r7, #1
 800cb44:	444b      	add	r3, r9
 800cb46:	106d      	asrs	r5, r5, #1
 800cb48:	429d      	cmp	r5, r3
 800cb4a:	bf38      	it	cc
 800cb4c:	461d      	movcc	r5, r3
 800cb4e:	0553      	lsls	r3, r2, #21
 800cb50:	d527      	bpl.n	800cba2 <__ssputs_r+0x8e>
 800cb52:	4629      	mov	r1, r5
 800cb54:	f7fe fcaa 	bl	800b4ac <_malloc_r>
 800cb58:	4606      	mov	r6, r0
 800cb5a:	b360      	cbz	r0, 800cbb6 <__ssputs_r+0xa2>
 800cb5c:	464a      	mov	r2, r9
 800cb5e:	6921      	ldr	r1, [r4, #16]
 800cb60:	f7fd fdcd 	bl	800a6fe <memcpy>
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb6e:	81a3      	strh	r3, [r4, #12]
 800cb70:	6126      	str	r6, [r4, #16]
 800cb72:	444e      	add	r6, r9
 800cb74:	6026      	str	r6, [r4, #0]
 800cb76:	463e      	mov	r6, r7
 800cb78:	6165      	str	r5, [r4, #20]
 800cb7a:	eba5 0509 	sub.w	r5, r5, r9
 800cb7e:	60a5      	str	r5, [r4, #8]
 800cb80:	42be      	cmp	r6, r7
 800cb82:	d900      	bls.n	800cb86 <__ssputs_r+0x72>
 800cb84:	463e      	mov	r6, r7
 800cb86:	4632      	mov	r2, r6
 800cb88:	4641      	mov	r1, r8
 800cb8a:	6820      	ldr	r0, [r4, #0]
 800cb8c:	f000 fb63 	bl	800d256 <memmove>
 800cb90:	2000      	movs	r0, #0
 800cb92:	68a3      	ldr	r3, [r4, #8]
 800cb94:	1b9b      	subs	r3, r3, r6
 800cb96:	60a3      	str	r3, [r4, #8]
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	4433      	add	r3, r6
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba2:	462a      	mov	r2, r5
 800cba4:	f000 ff27 	bl	800d9f6 <_realloc_r>
 800cba8:	4606      	mov	r6, r0
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d1e0      	bne.n	800cb70 <__ssputs_r+0x5c>
 800cbae:	4650      	mov	r0, sl
 800cbb0:	6921      	ldr	r1, [r4, #16]
 800cbb2:	f7fe fc09 	bl	800b3c8 <_free_r>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	f8ca 3000 	str.w	r3, [sl]
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc6:	81a3      	strh	r3, [r4, #12]
 800cbc8:	e7e9      	b.n	800cb9e <__ssputs_r+0x8a>
	...

0800cbcc <_svfiprintf_r>:
 800cbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd0:	4698      	mov	r8, r3
 800cbd2:	898b      	ldrh	r3, [r1, #12]
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	061b      	lsls	r3, r3, #24
 800cbd8:	460d      	mov	r5, r1
 800cbda:	4614      	mov	r4, r2
 800cbdc:	b09d      	sub	sp, #116	@ 0x74
 800cbde:	d510      	bpl.n	800cc02 <_svfiprintf_r+0x36>
 800cbe0:	690b      	ldr	r3, [r1, #16]
 800cbe2:	b973      	cbnz	r3, 800cc02 <_svfiprintf_r+0x36>
 800cbe4:	2140      	movs	r1, #64	@ 0x40
 800cbe6:	f7fe fc61 	bl	800b4ac <_malloc_r>
 800cbea:	6028      	str	r0, [r5, #0]
 800cbec:	6128      	str	r0, [r5, #16]
 800cbee:	b930      	cbnz	r0, 800cbfe <_svfiprintf_r+0x32>
 800cbf0:	230c      	movs	r3, #12
 800cbf2:	603b      	str	r3, [r7, #0]
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	b01d      	add	sp, #116	@ 0x74
 800cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfe:	2340      	movs	r3, #64	@ 0x40
 800cc00:	616b      	str	r3, [r5, #20]
 800cc02:	2300      	movs	r3, #0
 800cc04:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc06:	2320      	movs	r3, #32
 800cc08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc0c:	2330      	movs	r3, #48	@ 0x30
 800cc0e:	f04f 0901 	mov.w	r9, #1
 800cc12:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cdb0 <_svfiprintf_r+0x1e4>
 800cc1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc1e:	4623      	mov	r3, r4
 800cc20:	469a      	mov	sl, r3
 800cc22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc26:	b10a      	cbz	r2, 800cc2c <_svfiprintf_r+0x60>
 800cc28:	2a25      	cmp	r2, #37	@ 0x25
 800cc2a:	d1f9      	bne.n	800cc20 <_svfiprintf_r+0x54>
 800cc2c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc30:	d00b      	beq.n	800cc4a <_svfiprintf_r+0x7e>
 800cc32:	465b      	mov	r3, fp
 800cc34:	4622      	mov	r2, r4
 800cc36:	4629      	mov	r1, r5
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff ff6b 	bl	800cb14 <__ssputs_r>
 800cc3e:	3001      	adds	r0, #1
 800cc40:	f000 80a7 	beq.w	800cd92 <_svfiprintf_r+0x1c6>
 800cc44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc46:	445a      	add	r2, fp
 800cc48:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc4a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f000 809f 	beq.w	800cd92 <_svfiprintf_r+0x1c6>
 800cc54:	2300      	movs	r3, #0
 800cc56:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc5e:	f10a 0a01 	add.w	sl, sl, #1
 800cc62:	9304      	str	r3, [sp, #16]
 800cc64:	9307      	str	r3, [sp, #28]
 800cc66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc6c:	4654      	mov	r4, sl
 800cc6e:	2205      	movs	r2, #5
 800cc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc74:	484e      	ldr	r0, [pc, #312]	@ (800cdb0 <_svfiprintf_r+0x1e4>)
 800cc76:	f7fd fd34 	bl	800a6e2 <memchr>
 800cc7a:	9a04      	ldr	r2, [sp, #16]
 800cc7c:	b9d8      	cbnz	r0, 800ccb6 <_svfiprintf_r+0xea>
 800cc7e:	06d0      	lsls	r0, r2, #27
 800cc80:	bf44      	itt	mi
 800cc82:	2320      	movmi	r3, #32
 800cc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc88:	0711      	lsls	r1, r2, #28
 800cc8a:	bf44      	itt	mi
 800cc8c:	232b      	movmi	r3, #43	@ 0x2b
 800cc8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc92:	f89a 3000 	ldrb.w	r3, [sl]
 800cc96:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc98:	d015      	beq.n	800ccc6 <_svfiprintf_r+0xfa>
 800cc9a:	4654      	mov	r4, sl
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	f04f 0c0a 	mov.w	ip, #10
 800cca2:	9a07      	ldr	r2, [sp, #28]
 800cca4:	4621      	mov	r1, r4
 800cca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccaa:	3b30      	subs	r3, #48	@ 0x30
 800ccac:	2b09      	cmp	r3, #9
 800ccae:	d94b      	bls.n	800cd48 <_svfiprintf_r+0x17c>
 800ccb0:	b1b0      	cbz	r0, 800cce0 <_svfiprintf_r+0x114>
 800ccb2:	9207      	str	r2, [sp, #28]
 800ccb4:	e014      	b.n	800cce0 <_svfiprintf_r+0x114>
 800ccb6:	eba0 0308 	sub.w	r3, r0, r8
 800ccba:	fa09 f303 	lsl.w	r3, r9, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	46a2      	mov	sl, r4
 800ccc2:	9304      	str	r3, [sp, #16]
 800ccc4:	e7d2      	b.n	800cc6c <_svfiprintf_r+0xa0>
 800ccc6:	9b03      	ldr	r3, [sp, #12]
 800ccc8:	1d19      	adds	r1, r3, #4
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	9103      	str	r1, [sp, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	bfbb      	ittet	lt
 800ccd2:	425b      	neglt	r3, r3
 800ccd4:	f042 0202 	orrlt.w	r2, r2, #2
 800ccd8:	9307      	strge	r3, [sp, #28]
 800ccda:	9307      	strlt	r3, [sp, #28]
 800ccdc:	bfb8      	it	lt
 800ccde:	9204      	strlt	r2, [sp, #16]
 800cce0:	7823      	ldrb	r3, [r4, #0]
 800cce2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cce4:	d10a      	bne.n	800ccfc <_svfiprintf_r+0x130>
 800cce6:	7863      	ldrb	r3, [r4, #1]
 800cce8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccea:	d132      	bne.n	800cd52 <_svfiprintf_r+0x186>
 800ccec:	9b03      	ldr	r3, [sp, #12]
 800ccee:	3402      	adds	r4, #2
 800ccf0:	1d1a      	adds	r2, r3, #4
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	9203      	str	r2, [sp, #12]
 800ccf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccfa:	9305      	str	r3, [sp, #20]
 800ccfc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cdb4 <_svfiprintf_r+0x1e8>
 800cd00:	2203      	movs	r2, #3
 800cd02:	4650      	mov	r0, sl
 800cd04:	7821      	ldrb	r1, [r4, #0]
 800cd06:	f7fd fcec 	bl	800a6e2 <memchr>
 800cd0a:	b138      	cbz	r0, 800cd1c <_svfiprintf_r+0x150>
 800cd0c:	2240      	movs	r2, #64	@ 0x40
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	eba0 000a 	sub.w	r0, r0, sl
 800cd14:	4082      	lsls	r2, r0
 800cd16:	4313      	orrs	r3, r2
 800cd18:	3401      	adds	r4, #1
 800cd1a:	9304      	str	r3, [sp, #16]
 800cd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd20:	2206      	movs	r2, #6
 800cd22:	4825      	ldr	r0, [pc, #148]	@ (800cdb8 <_svfiprintf_r+0x1ec>)
 800cd24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd28:	f7fd fcdb 	bl	800a6e2 <memchr>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d036      	beq.n	800cd9e <_svfiprintf_r+0x1d2>
 800cd30:	4b22      	ldr	r3, [pc, #136]	@ (800cdbc <_svfiprintf_r+0x1f0>)
 800cd32:	bb1b      	cbnz	r3, 800cd7c <_svfiprintf_r+0x1b0>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	3307      	adds	r3, #7
 800cd38:	f023 0307 	bic.w	r3, r3, #7
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd42:	4433      	add	r3, r6
 800cd44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd46:	e76a      	b.n	800cc1e <_svfiprintf_r+0x52>
 800cd48:	460c      	mov	r4, r1
 800cd4a:	2001      	movs	r0, #1
 800cd4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd50:	e7a8      	b.n	800cca4 <_svfiprintf_r+0xd8>
 800cd52:	2300      	movs	r3, #0
 800cd54:	f04f 0c0a 	mov.w	ip, #10
 800cd58:	4619      	mov	r1, r3
 800cd5a:	3401      	adds	r4, #1
 800cd5c:	9305      	str	r3, [sp, #20]
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd64:	3a30      	subs	r2, #48	@ 0x30
 800cd66:	2a09      	cmp	r2, #9
 800cd68:	d903      	bls.n	800cd72 <_svfiprintf_r+0x1a6>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0c6      	beq.n	800ccfc <_svfiprintf_r+0x130>
 800cd6e:	9105      	str	r1, [sp, #20]
 800cd70:	e7c4      	b.n	800ccfc <_svfiprintf_r+0x130>
 800cd72:	4604      	mov	r4, r0
 800cd74:	2301      	movs	r3, #1
 800cd76:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd7a:	e7f0      	b.n	800cd5e <_svfiprintf_r+0x192>
 800cd7c:	ab03      	add	r3, sp, #12
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	462a      	mov	r2, r5
 800cd82:	4638      	mov	r0, r7
 800cd84:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc0 <_svfiprintf_r+0x1f4>)
 800cd86:	a904      	add	r1, sp, #16
 800cd88:	f7fc fb98 	bl	80094bc <_printf_float>
 800cd8c:	1c42      	adds	r2, r0, #1
 800cd8e:	4606      	mov	r6, r0
 800cd90:	d1d6      	bne.n	800cd40 <_svfiprintf_r+0x174>
 800cd92:	89ab      	ldrh	r3, [r5, #12]
 800cd94:	065b      	lsls	r3, r3, #25
 800cd96:	f53f af2d 	bmi.w	800cbf4 <_svfiprintf_r+0x28>
 800cd9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd9c:	e72c      	b.n	800cbf8 <_svfiprintf_r+0x2c>
 800cd9e:	ab03      	add	r3, sp, #12
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	462a      	mov	r2, r5
 800cda4:	4638      	mov	r0, r7
 800cda6:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <_svfiprintf_r+0x1f4>)
 800cda8:	a904      	add	r1, sp, #16
 800cdaa:	f7fc fe25 	bl	80099f8 <_printf_i>
 800cdae:	e7ed      	b.n	800cd8c <_svfiprintf_r+0x1c0>
 800cdb0:	0800e100 	.word	0x0800e100
 800cdb4:	0800e106 	.word	0x0800e106
 800cdb8:	0800e10a 	.word	0x0800e10a
 800cdbc:	080094bd 	.word	0x080094bd
 800cdc0:	0800cb15 	.word	0x0800cb15

0800cdc4 <__sfputc_r>:
 800cdc4:	6893      	ldr	r3, [r2, #8]
 800cdc6:	b410      	push	{r4}
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	6093      	str	r3, [r2, #8]
 800cdce:	da07      	bge.n	800cde0 <__sfputc_r+0x1c>
 800cdd0:	6994      	ldr	r4, [r2, #24]
 800cdd2:	42a3      	cmp	r3, r4
 800cdd4:	db01      	blt.n	800cdda <__sfputc_r+0x16>
 800cdd6:	290a      	cmp	r1, #10
 800cdd8:	d102      	bne.n	800cde0 <__sfputc_r+0x1c>
 800cdda:	bc10      	pop	{r4}
 800cddc:	f7fd bb05 	b.w	800a3ea <__swbuf_r>
 800cde0:	6813      	ldr	r3, [r2, #0]
 800cde2:	1c58      	adds	r0, r3, #1
 800cde4:	6010      	str	r0, [r2, #0]
 800cde6:	7019      	strb	r1, [r3, #0]
 800cde8:	4608      	mov	r0, r1
 800cdea:	bc10      	pop	{r4}
 800cdec:	4770      	bx	lr

0800cdee <__sfputs_r>:
 800cdee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	460f      	mov	r7, r1
 800cdf4:	4614      	mov	r4, r2
 800cdf6:	18d5      	adds	r5, r2, r3
 800cdf8:	42ac      	cmp	r4, r5
 800cdfa:	d101      	bne.n	800ce00 <__sfputs_r+0x12>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e007      	b.n	800ce10 <__sfputs_r+0x22>
 800ce00:	463a      	mov	r2, r7
 800ce02:	4630      	mov	r0, r6
 800ce04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce08:	f7ff ffdc 	bl	800cdc4 <__sfputc_r>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d1f3      	bne.n	800cdf8 <__sfputs_r+0xa>
 800ce10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce14 <_vfiprintf_r>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	460d      	mov	r5, r1
 800ce1a:	4614      	mov	r4, r2
 800ce1c:	4698      	mov	r8, r3
 800ce1e:	4606      	mov	r6, r0
 800ce20:	b09d      	sub	sp, #116	@ 0x74
 800ce22:	b118      	cbz	r0, 800ce2c <_vfiprintf_r+0x18>
 800ce24:	6a03      	ldr	r3, [r0, #32]
 800ce26:	b90b      	cbnz	r3, 800ce2c <_vfiprintf_r+0x18>
 800ce28:	f7fd f9a2 	bl	800a170 <__sinit>
 800ce2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce2e:	07d9      	lsls	r1, r3, #31
 800ce30:	d405      	bmi.n	800ce3e <_vfiprintf_r+0x2a>
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	059a      	lsls	r2, r3, #22
 800ce36:	d402      	bmi.n	800ce3e <_vfiprintf_r+0x2a>
 800ce38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce3a:	f7fd fc50 	bl	800a6de <__retarget_lock_acquire_recursive>
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	071b      	lsls	r3, r3, #28
 800ce42:	d501      	bpl.n	800ce48 <_vfiprintf_r+0x34>
 800ce44:	692b      	ldr	r3, [r5, #16]
 800ce46:	b99b      	cbnz	r3, 800ce70 <_vfiprintf_r+0x5c>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f7fd fb0c 	bl	800a468 <__swsetup_r>
 800ce50:	b170      	cbz	r0, 800ce70 <_vfiprintf_r+0x5c>
 800ce52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce54:	07dc      	lsls	r4, r3, #31
 800ce56:	d504      	bpl.n	800ce62 <_vfiprintf_r+0x4e>
 800ce58:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5c:	b01d      	add	sp, #116	@ 0x74
 800ce5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce62:	89ab      	ldrh	r3, [r5, #12]
 800ce64:	0598      	lsls	r0, r3, #22
 800ce66:	d4f7      	bmi.n	800ce58 <_vfiprintf_r+0x44>
 800ce68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce6a:	f7fd fc39 	bl	800a6e0 <__retarget_lock_release_recursive>
 800ce6e:	e7f3      	b.n	800ce58 <_vfiprintf_r+0x44>
 800ce70:	2300      	movs	r3, #0
 800ce72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce74:	2320      	movs	r3, #32
 800ce76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce7a:	2330      	movs	r3, #48	@ 0x30
 800ce7c:	f04f 0901 	mov.w	r9, #1
 800ce80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d030 <_vfiprintf_r+0x21c>
 800ce88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	469a      	mov	sl, r3
 800ce90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce94:	b10a      	cbz	r2, 800ce9a <_vfiprintf_r+0x86>
 800ce96:	2a25      	cmp	r2, #37	@ 0x25
 800ce98:	d1f9      	bne.n	800ce8e <_vfiprintf_r+0x7a>
 800ce9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce9e:	d00b      	beq.n	800ceb8 <_vfiprintf_r+0xa4>
 800cea0:	465b      	mov	r3, fp
 800cea2:	4622      	mov	r2, r4
 800cea4:	4629      	mov	r1, r5
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7ff ffa1 	bl	800cdee <__sfputs_r>
 800ceac:	3001      	adds	r0, #1
 800ceae:	f000 80a7 	beq.w	800d000 <_vfiprintf_r+0x1ec>
 800ceb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceb4:	445a      	add	r2, fp
 800ceb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ceb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 809f 	beq.w	800d000 <_vfiprintf_r+0x1ec>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295
 800cec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cecc:	f10a 0a01 	add.w	sl, sl, #1
 800ced0:	9304      	str	r3, [sp, #16]
 800ced2:	9307      	str	r3, [sp, #28]
 800ced4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ced8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ceda:	4654      	mov	r4, sl
 800cedc:	2205      	movs	r2, #5
 800cede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee2:	4853      	ldr	r0, [pc, #332]	@ (800d030 <_vfiprintf_r+0x21c>)
 800cee4:	f7fd fbfd 	bl	800a6e2 <memchr>
 800cee8:	9a04      	ldr	r2, [sp, #16]
 800ceea:	b9d8      	cbnz	r0, 800cf24 <_vfiprintf_r+0x110>
 800ceec:	06d1      	lsls	r1, r2, #27
 800ceee:	bf44      	itt	mi
 800cef0:	2320      	movmi	r3, #32
 800cef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cef6:	0713      	lsls	r3, r2, #28
 800cef8:	bf44      	itt	mi
 800cefa:	232b      	movmi	r3, #43	@ 0x2b
 800cefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf00:	f89a 3000 	ldrb.w	r3, [sl]
 800cf04:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf06:	d015      	beq.n	800cf34 <_vfiprintf_r+0x120>
 800cf08:	4654      	mov	r4, sl
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	f04f 0c0a 	mov.w	ip, #10
 800cf10:	9a07      	ldr	r2, [sp, #28]
 800cf12:	4621      	mov	r1, r4
 800cf14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf18:	3b30      	subs	r3, #48	@ 0x30
 800cf1a:	2b09      	cmp	r3, #9
 800cf1c:	d94b      	bls.n	800cfb6 <_vfiprintf_r+0x1a2>
 800cf1e:	b1b0      	cbz	r0, 800cf4e <_vfiprintf_r+0x13a>
 800cf20:	9207      	str	r2, [sp, #28]
 800cf22:	e014      	b.n	800cf4e <_vfiprintf_r+0x13a>
 800cf24:	eba0 0308 	sub.w	r3, r0, r8
 800cf28:	fa09 f303 	lsl.w	r3, r9, r3
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	46a2      	mov	sl, r4
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	e7d2      	b.n	800ceda <_vfiprintf_r+0xc6>
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	1d19      	adds	r1, r3, #4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	9103      	str	r1, [sp, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bfbb      	ittet	lt
 800cf40:	425b      	neglt	r3, r3
 800cf42:	f042 0202 	orrlt.w	r2, r2, #2
 800cf46:	9307      	strge	r3, [sp, #28]
 800cf48:	9307      	strlt	r3, [sp, #28]
 800cf4a:	bfb8      	it	lt
 800cf4c:	9204      	strlt	r2, [sp, #16]
 800cf4e:	7823      	ldrb	r3, [r4, #0]
 800cf50:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf52:	d10a      	bne.n	800cf6a <_vfiprintf_r+0x156>
 800cf54:	7863      	ldrb	r3, [r4, #1]
 800cf56:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf58:	d132      	bne.n	800cfc0 <_vfiprintf_r+0x1ac>
 800cf5a:	9b03      	ldr	r3, [sp, #12]
 800cf5c:	3402      	adds	r4, #2
 800cf5e:	1d1a      	adds	r2, r3, #4
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	9203      	str	r2, [sp, #12]
 800cf64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf68:	9305      	str	r3, [sp, #20]
 800cf6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d034 <_vfiprintf_r+0x220>
 800cf6e:	2203      	movs	r2, #3
 800cf70:	4650      	mov	r0, sl
 800cf72:	7821      	ldrb	r1, [r4, #0]
 800cf74:	f7fd fbb5 	bl	800a6e2 <memchr>
 800cf78:	b138      	cbz	r0, 800cf8a <_vfiprintf_r+0x176>
 800cf7a:	2240      	movs	r2, #64	@ 0x40
 800cf7c:	9b04      	ldr	r3, [sp, #16]
 800cf7e:	eba0 000a 	sub.w	r0, r0, sl
 800cf82:	4082      	lsls	r2, r0
 800cf84:	4313      	orrs	r3, r2
 800cf86:	3401      	adds	r4, #1
 800cf88:	9304      	str	r3, [sp, #16]
 800cf8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf8e:	2206      	movs	r2, #6
 800cf90:	4829      	ldr	r0, [pc, #164]	@ (800d038 <_vfiprintf_r+0x224>)
 800cf92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf96:	f7fd fba4 	bl	800a6e2 <memchr>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d03f      	beq.n	800d01e <_vfiprintf_r+0x20a>
 800cf9e:	4b27      	ldr	r3, [pc, #156]	@ (800d03c <_vfiprintf_r+0x228>)
 800cfa0:	bb1b      	cbnz	r3, 800cfea <_vfiprintf_r+0x1d6>
 800cfa2:	9b03      	ldr	r3, [sp, #12]
 800cfa4:	3307      	adds	r3, #7
 800cfa6:	f023 0307 	bic.w	r3, r3, #7
 800cfaa:	3308      	adds	r3, #8
 800cfac:	9303      	str	r3, [sp, #12]
 800cfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb0:	443b      	add	r3, r7
 800cfb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfb4:	e76a      	b.n	800ce8c <_vfiprintf_r+0x78>
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	2001      	movs	r0, #1
 800cfba:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfbe:	e7a8      	b.n	800cf12 <_vfiprintf_r+0xfe>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f04f 0c0a 	mov.w	ip, #10
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	3401      	adds	r4, #1
 800cfca:	9305      	str	r3, [sp, #20]
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfd2:	3a30      	subs	r2, #48	@ 0x30
 800cfd4:	2a09      	cmp	r2, #9
 800cfd6:	d903      	bls.n	800cfe0 <_vfiprintf_r+0x1cc>
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d0c6      	beq.n	800cf6a <_vfiprintf_r+0x156>
 800cfdc:	9105      	str	r1, [sp, #20]
 800cfde:	e7c4      	b.n	800cf6a <_vfiprintf_r+0x156>
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfe8:	e7f0      	b.n	800cfcc <_vfiprintf_r+0x1b8>
 800cfea:	ab03      	add	r3, sp, #12
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	462a      	mov	r2, r5
 800cff0:	4630      	mov	r0, r6
 800cff2:	4b13      	ldr	r3, [pc, #76]	@ (800d040 <_vfiprintf_r+0x22c>)
 800cff4:	a904      	add	r1, sp, #16
 800cff6:	f7fc fa61 	bl	80094bc <_printf_float>
 800cffa:	4607      	mov	r7, r0
 800cffc:	1c78      	adds	r0, r7, #1
 800cffe:	d1d6      	bne.n	800cfae <_vfiprintf_r+0x19a>
 800d000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d002:	07d9      	lsls	r1, r3, #31
 800d004:	d405      	bmi.n	800d012 <_vfiprintf_r+0x1fe>
 800d006:	89ab      	ldrh	r3, [r5, #12]
 800d008:	059a      	lsls	r2, r3, #22
 800d00a:	d402      	bmi.n	800d012 <_vfiprintf_r+0x1fe>
 800d00c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d00e:	f7fd fb67 	bl	800a6e0 <__retarget_lock_release_recursive>
 800d012:	89ab      	ldrh	r3, [r5, #12]
 800d014:	065b      	lsls	r3, r3, #25
 800d016:	f53f af1f 	bmi.w	800ce58 <_vfiprintf_r+0x44>
 800d01a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d01c:	e71e      	b.n	800ce5c <_vfiprintf_r+0x48>
 800d01e:	ab03      	add	r3, sp, #12
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	462a      	mov	r2, r5
 800d024:	4630      	mov	r0, r6
 800d026:	4b06      	ldr	r3, [pc, #24]	@ (800d040 <_vfiprintf_r+0x22c>)
 800d028:	a904      	add	r1, sp, #16
 800d02a:	f7fc fce5 	bl	80099f8 <_printf_i>
 800d02e:	e7e4      	b.n	800cffa <_vfiprintf_r+0x1e6>
 800d030:	0800e100 	.word	0x0800e100
 800d034:	0800e106 	.word	0x0800e106
 800d038:	0800e10a 	.word	0x0800e10a
 800d03c:	080094bd 	.word	0x080094bd
 800d040:	0800cdef 	.word	0x0800cdef

0800d044 <__sflush_r>:
 800d044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	0716      	lsls	r6, r2, #28
 800d04c:	4605      	mov	r5, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	d454      	bmi.n	800d0fc <__sflush_r+0xb8>
 800d052:	684b      	ldr	r3, [r1, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	dc02      	bgt.n	800d05e <__sflush_r+0x1a>
 800d058:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	dd48      	ble.n	800d0f0 <__sflush_r+0xac>
 800d05e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d060:	2e00      	cmp	r6, #0
 800d062:	d045      	beq.n	800d0f0 <__sflush_r+0xac>
 800d064:	2300      	movs	r3, #0
 800d066:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d06a:	682f      	ldr	r7, [r5, #0]
 800d06c:	6a21      	ldr	r1, [r4, #32]
 800d06e:	602b      	str	r3, [r5, #0]
 800d070:	d030      	beq.n	800d0d4 <__sflush_r+0x90>
 800d072:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	0759      	lsls	r1, r3, #29
 800d078:	d505      	bpl.n	800d086 <__sflush_r+0x42>
 800d07a:	6863      	ldr	r3, [r4, #4]
 800d07c:	1ad2      	subs	r2, r2, r3
 800d07e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d080:	b10b      	cbz	r3, 800d086 <__sflush_r+0x42>
 800d082:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d084:	1ad2      	subs	r2, r2, r3
 800d086:	2300      	movs	r3, #0
 800d088:	4628      	mov	r0, r5
 800d08a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d08c:	6a21      	ldr	r1, [r4, #32]
 800d08e:	47b0      	blx	r6
 800d090:	1c43      	adds	r3, r0, #1
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	d106      	bne.n	800d0a4 <__sflush_r+0x60>
 800d096:	6829      	ldr	r1, [r5, #0]
 800d098:	291d      	cmp	r1, #29
 800d09a:	d82b      	bhi.n	800d0f4 <__sflush_r+0xb0>
 800d09c:	4a28      	ldr	r2, [pc, #160]	@ (800d140 <__sflush_r+0xfc>)
 800d09e:	410a      	asrs	r2, r1
 800d0a0:	07d6      	lsls	r6, r2, #31
 800d0a2:	d427      	bmi.n	800d0f4 <__sflush_r+0xb0>
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	6062      	str	r2, [r4, #4]
 800d0a8:	6922      	ldr	r2, [r4, #16]
 800d0aa:	04d9      	lsls	r1, r3, #19
 800d0ac:	6022      	str	r2, [r4, #0]
 800d0ae:	d504      	bpl.n	800d0ba <__sflush_r+0x76>
 800d0b0:	1c42      	adds	r2, r0, #1
 800d0b2:	d101      	bne.n	800d0b8 <__sflush_r+0x74>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b903      	cbnz	r3, 800d0ba <__sflush_r+0x76>
 800d0b8:	6560      	str	r0, [r4, #84]	@ 0x54
 800d0ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0bc:	602f      	str	r7, [r5, #0]
 800d0be:	b1b9      	cbz	r1, 800d0f0 <__sflush_r+0xac>
 800d0c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0c4:	4299      	cmp	r1, r3
 800d0c6:	d002      	beq.n	800d0ce <__sflush_r+0x8a>
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f7fe f97d 	bl	800b3c8 <_free_r>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0d2:	e00d      	b.n	800d0f0 <__sflush_r+0xac>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	47b0      	blx	r6
 800d0da:	4602      	mov	r2, r0
 800d0dc:	1c50      	adds	r0, r2, #1
 800d0de:	d1c9      	bne.n	800d074 <__sflush_r+0x30>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0c6      	beq.n	800d074 <__sflush_r+0x30>
 800d0e6:	2b1d      	cmp	r3, #29
 800d0e8:	d001      	beq.n	800d0ee <__sflush_r+0xaa>
 800d0ea:	2b16      	cmp	r3, #22
 800d0ec:	d11d      	bne.n	800d12a <__sflush_r+0xe6>
 800d0ee:	602f      	str	r7, [r5, #0]
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	e021      	b.n	800d138 <__sflush_r+0xf4>
 800d0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0f8:	b21b      	sxth	r3, r3
 800d0fa:	e01a      	b.n	800d132 <__sflush_r+0xee>
 800d0fc:	690f      	ldr	r7, [r1, #16]
 800d0fe:	2f00      	cmp	r7, #0
 800d100:	d0f6      	beq.n	800d0f0 <__sflush_r+0xac>
 800d102:	0793      	lsls	r3, r2, #30
 800d104:	bf18      	it	ne
 800d106:	2300      	movne	r3, #0
 800d108:	680e      	ldr	r6, [r1, #0]
 800d10a:	bf08      	it	eq
 800d10c:	694b      	ldreq	r3, [r1, #20]
 800d10e:	1bf6      	subs	r6, r6, r7
 800d110:	600f      	str	r7, [r1, #0]
 800d112:	608b      	str	r3, [r1, #8]
 800d114:	2e00      	cmp	r6, #0
 800d116:	ddeb      	ble.n	800d0f0 <__sflush_r+0xac>
 800d118:	4633      	mov	r3, r6
 800d11a:	463a      	mov	r2, r7
 800d11c:	4628      	mov	r0, r5
 800d11e:	6a21      	ldr	r1, [r4, #32]
 800d120:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d124:	47e0      	blx	ip
 800d126:	2800      	cmp	r0, #0
 800d128:	dc07      	bgt.n	800d13a <__sflush_r+0xf6>
 800d12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d132:	f04f 30ff 	mov.w	r0, #4294967295
 800d136:	81a3      	strh	r3, [r4, #12]
 800d138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d13a:	4407      	add	r7, r0
 800d13c:	1a36      	subs	r6, r6, r0
 800d13e:	e7e9      	b.n	800d114 <__sflush_r+0xd0>
 800d140:	dfbffffe 	.word	0xdfbffffe

0800d144 <_fflush_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	690b      	ldr	r3, [r1, #16]
 800d148:	4605      	mov	r5, r0
 800d14a:	460c      	mov	r4, r1
 800d14c:	b913      	cbnz	r3, 800d154 <_fflush_r+0x10>
 800d14e:	2500      	movs	r5, #0
 800d150:	4628      	mov	r0, r5
 800d152:	bd38      	pop	{r3, r4, r5, pc}
 800d154:	b118      	cbz	r0, 800d15e <_fflush_r+0x1a>
 800d156:	6a03      	ldr	r3, [r0, #32]
 800d158:	b90b      	cbnz	r3, 800d15e <_fflush_r+0x1a>
 800d15a:	f7fd f809 	bl	800a170 <__sinit>
 800d15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0f3      	beq.n	800d14e <_fflush_r+0xa>
 800d166:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d168:	07d0      	lsls	r0, r2, #31
 800d16a:	d404      	bmi.n	800d176 <_fflush_r+0x32>
 800d16c:	0599      	lsls	r1, r3, #22
 800d16e:	d402      	bmi.n	800d176 <_fflush_r+0x32>
 800d170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d172:	f7fd fab4 	bl	800a6de <__retarget_lock_acquire_recursive>
 800d176:	4628      	mov	r0, r5
 800d178:	4621      	mov	r1, r4
 800d17a:	f7ff ff63 	bl	800d044 <__sflush_r>
 800d17e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d180:	4605      	mov	r5, r0
 800d182:	07da      	lsls	r2, r3, #31
 800d184:	d4e4      	bmi.n	800d150 <_fflush_r+0xc>
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	059b      	lsls	r3, r3, #22
 800d18a:	d4e1      	bmi.n	800d150 <_fflush_r+0xc>
 800d18c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d18e:	f7fd faa7 	bl	800a6e0 <__retarget_lock_release_recursive>
 800d192:	e7dd      	b.n	800d150 <_fflush_r+0xc>

0800d194 <__swhatbuf_r>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	460c      	mov	r4, r1
 800d198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19c:	4615      	mov	r5, r2
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	461e      	mov	r6, r3
 800d1a2:	b096      	sub	sp, #88	@ 0x58
 800d1a4:	da0c      	bge.n	800d1c0 <__swhatbuf_r+0x2c>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d1ae:	bf14      	ite	ne
 800d1b0:	2340      	movne	r3, #64	@ 0x40
 800d1b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	6031      	str	r1, [r6, #0]
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	b016      	add	sp, #88	@ 0x58
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	466a      	mov	r2, sp
 800d1c2:	f000 f863 	bl	800d28c <_fstat_r>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	dbed      	blt.n	800d1a6 <__swhatbuf_r+0x12>
 800d1ca:	9901      	ldr	r1, [sp, #4]
 800d1cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1d4:	4259      	negs	r1, r3
 800d1d6:	4159      	adcs	r1, r3
 800d1d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1dc:	e7eb      	b.n	800d1b6 <__swhatbuf_r+0x22>

0800d1de <__smakebuf_r>:
 800d1de:	898b      	ldrh	r3, [r1, #12]
 800d1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1e2:	079d      	lsls	r5, r3, #30
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	d507      	bpl.n	800d1fa <__smakebuf_r+0x1c>
 800d1ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	6123      	str	r3, [r4, #16]
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	6163      	str	r3, [r4, #20]
 800d1f6:	b003      	add	sp, #12
 800d1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1fa:	466a      	mov	r2, sp
 800d1fc:	ab01      	add	r3, sp, #4
 800d1fe:	f7ff ffc9 	bl	800d194 <__swhatbuf_r>
 800d202:	9f00      	ldr	r7, [sp, #0]
 800d204:	4605      	mov	r5, r0
 800d206:	4639      	mov	r1, r7
 800d208:	4630      	mov	r0, r6
 800d20a:	f7fe f94f 	bl	800b4ac <_malloc_r>
 800d20e:	b948      	cbnz	r0, 800d224 <__smakebuf_r+0x46>
 800d210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d214:	059a      	lsls	r2, r3, #22
 800d216:	d4ee      	bmi.n	800d1f6 <__smakebuf_r+0x18>
 800d218:	f023 0303 	bic.w	r3, r3, #3
 800d21c:	f043 0302 	orr.w	r3, r3, #2
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	e7e2      	b.n	800d1ea <__smakebuf_r+0xc>
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	9b01      	ldr	r3, [sp, #4]
 800d232:	6020      	str	r0, [r4, #0]
 800d234:	b15b      	cbz	r3, 800d24e <__smakebuf_r+0x70>
 800d236:	4630      	mov	r0, r6
 800d238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d23c:	f000 f838 	bl	800d2b0 <_isatty_r>
 800d240:	b128      	cbz	r0, 800d24e <__smakebuf_r+0x70>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f023 0303 	bic.w	r3, r3, #3
 800d248:	f043 0301 	orr.w	r3, r3, #1
 800d24c:	81a3      	strh	r3, [r4, #12]
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	431d      	orrs	r5, r3
 800d252:	81a5      	strh	r5, [r4, #12]
 800d254:	e7cf      	b.n	800d1f6 <__smakebuf_r+0x18>

0800d256 <memmove>:
 800d256:	4288      	cmp	r0, r1
 800d258:	b510      	push	{r4, lr}
 800d25a:	eb01 0402 	add.w	r4, r1, r2
 800d25e:	d902      	bls.n	800d266 <memmove+0x10>
 800d260:	4284      	cmp	r4, r0
 800d262:	4623      	mov	r3, r4
 800d264:	d807      	bhi.n	800d276 <memmove+0x20>
 800d266:	1e43      	subs	r3, r0, #1
 800d268:	42a1      	cmp	r1, r4
 800d26a:	d008      	beq.n	800d27e <memmove+0x28>
 800d26c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d270:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d274:	e7f8      	b.n	800d268 <memmove+0x12>
 800d276:	4601      	mov	r1, r0
 800d278:	4402      	add	r2, r0
 800d27a:	428a      	cmp	r2, r1
 800d27c:	d100      	bne.n	800d280 <memmove+0x2a>
 800d27e:	bd10      	pop	{r4, pc}
 800d280:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d284:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d288:	e7f7      	b.n	800d27a <memmove+0x24>
	...

0800d28c <_fstat_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	2300      	movs	r3, #0
 800d290:	4d06      	ldr	r5, [pc, #24]	@ (800d2ac <_fstat_r+0x20>)
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	4611      	mov	r1, r2
 800d298:	602b      	str	r3, [r5, #0]
 800d29a:	f7f4 fddd 	bl	8001e58 <_fstat>
 800d29e:	1c43      	adds	r3, r0, #1
 800d2a0:	d102      	bne.n	800d2a8 <_fstat_r+0x1c>
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	b103      	cbz	r3, 800d2a8 <_fstat_r+0x1c>
 800d2a6:	6023      	str	r3, [r4, #0]
 800d2a8:	bd38      	pop	{r3, r4, r5, pc}
 800d2aa:	bf00      	nop
 800d2ac:	20002370 	.word	0x20002370

0800d2b0 <_isatty_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	4d05      	ldr	r5, [pc, #20]	@ (800d2cc <_isatty_r+0x1c>)
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	4608      	mov	r0, r1
 800d2ba:	602b      	str	r3, [r5, #0]
 800d2bc:	f7f4 fddb 	bl	8001e76 <_isatty>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d102      	bne.n	800d2ca <_isatty_r+0x1a>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	b103      	cbz	r3, 800d2ca <_isatty_r+0x1a>
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	20002370 	.word	0x20002370

0800d2d0 <_sbrk_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	4d05      	ldr	r5, [pc, #20]	@ (800d2ec <_sbrk_r+0x1c>)
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	602b      	str	r3, [r5, #0]
 800d2dc:	f7f4 fde2 	bl	8001ea4 <_sbrk>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_sbrk_r+0x1a>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_sbrk_r+0x1a>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	20002370 	.word	0x20002370

0800d2f0 <nan>:
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	4901      	ldr	r1, [pc, #4]	@ (800d2f8 <nan+0x8>)
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	7ff80000 	.word	0x7ff80000

0800d2fc <__assert_func>:
 800d2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2fe:	4614      	mov	r4, r2
 800d300:	461a      	mov	r2, r3
 800d302:	4b09      	ldr	r3, [pc, #36]	@ (800d328 <__assert_func+0x2c>)
 800d304:	4605      	mov	r5, r0
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68d8      	ldr	r0, [r3, #12]
 800d30a:	b954      	cbnz	r4, 800d322 <__assert_func+0x26>
 800d30c:	4b07      	ldr	r3, [pc, #28]	@ (800d32c <__assert_func+0x30>)
 800d30e:	461c      	mov	r4, r3
 800d310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d314:	9100      	str	r1, [sp, #0]
 800d316:	462b      	mov	r3, r5
 800d318:	4905      	ldr	r1, [pc, #20]	@ (800d330 <__assert_func+0x34>)
 800d31a:	f000 fba7 	bl	800da6c <fiprintf>
 800d31e:	f000 fbb7 	bl	800da90 <abort>
 800d322:	4b04      	ldr	r3, [pc, #16]	@ (800d334 <__assert_func+0x38>)
 800d324:	e7f4      	b.n	800d310 <__assert_func+0x14>
 800d326:	bf00      	nop
 800d328:	2000001c 	.word	0x2000001c
 800d32c:	0800e154 	.word	0x0800e154
 800d330:	0800e126 	.word	0x0800e126
 800d334:	0800e119 	.word	0x0800e119

0800d338 <_calloc_r>:
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	fba1 5402 	umull	r5, r4, r1, r2
 800d33e:	b93c      	cbnz	r4, 800d350 <_calloc_r+0x18>
 800d340:	4629      	mov	r1, r5
 800d342:	f7fe f8b3 	bl	800b4ac <_malloc_r>
 800d346:	4606      	mov	r6, r0
 800d348:	b928      	cbnz	r0, 800d356 <_calloc_r+0x1e>
 800d34a:	2600      	movs	r6, #0
 800d34c:	4630      	mov	r0, r6
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	220c      	movs	r2, #12
 800d352:	6002      	str	r2, [r0, #0]
 800d354:	e7f9      	b.n	800d34a <_calloc_r+0x12>
 800d356:	462a      	mov	r2, r5
 800d358:	4621      	mov	r1, r4
 800d35a:	f7fd f8db 	bl	800a514 <memset>
 800d35e:	e7f5      	b.n	800d34c <_calloc_r+0x14>

0800d360 <rshift>:
 800d360:	6903      	ldr	r3, [r0, #16]
 800d362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d366:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d36a:	f100 0414 	add.w	r4, r0, #20
 800d36e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d372:	dd46      	ble.n	800d402 <rshift+0xa2>
 800d374:	f011 011f 	ands.w	r1, r1, #31
 800d378:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d37c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d380:	d10c      	bne.n	800d39c <rshift+0x3c>
 800d382:	4629      	mov	r1, r5
 800d384:	f100 0710 	add.w	r7, r0, #16
 800d388:	42b1      	cmp	r1, r6
 800d38a:	d335      	bcc.n	800d3f8 <rshift+0x98>
 800d38c:	1a9b      	subs	r3, r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	1eea      	subs	r2, r5, #3
 800d392:	4296      	cmp	r6, r2
 800d394:	bf38      	it	cc
 800d396:	2300      	movcc	r3, #0
 800d398:	4423      	add	r3, r4
 800d39a:	e015      	b.n	800d3c8 <rshift+0x68>
 800d39c:	46a1      	mov	r9, r4
 800d39e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d3a2:	f1c1 0820 	rsb	r8, r1, #32
 800d3a6:	40cf      	lsrs	r7, r1
 800d3a8:	f105 0e04 	add.w	lr, r5, #4
 800d3ac:	4576      	cmp	r6, lr
 800d3ae:	46f4      	mov	ip, lr
 800d3b0:	d816      	bhi.n	800d3e0 <rshift+0x80>
 800d3b2:	1a9a      	subs	r2, r3, r2
 800d3b4:	0092      	lsls	r2, r2, #2
 800d3b6:	3a04      	subs	r2, #4
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	42ae      	cmp	r6, r5
 800d3bc:	bf38      	it	cc
 800d3be:	2200      	movcc	r2, #0
 800d3c0:	18a3      	adds	r3, r4, r2
 800d3c2:	50a7      	str	r7, [r4, r2]
 800d3c4:	b107      	cbz	r7, 800d3c8 <rshift+0x68>
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	42a3      	cmp	r3, r4
 800d3ca:	eba3 0204 	sub.w	r2, r3, r4
 800d3ce:	bf08      	it	eq
 800d3d0:	2300      	moveq	r3, #0
 800d3d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d3d6:	6102      	str	r2, [r0, #16]
 800d3d8:	bf08      	it	eq
 800d3da:	6143      	streq	r3, [r0, #20]
 800d3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3e0:	f8dc c000 	ldr.w	ip, [ip]
 800d3e4:	fa0c fc08 	lsl.w	ip, ip, r8
 800d3e8:	ea4c 0707 	orr.w	r7, ip, r7
 800d3ec:	f849 7b04 	str.w	r7, [r9], #4
 800d3f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d3f4:	40cf      	lsrs	r7, r1
 800d3f6:	e7d9      	b.n	800d3ac <rshift+0x4c>
 800d3f8:	f851 cb04 	ldr.w	ip, [r1], #4
 800d3fc:	f847 cf04 	str.w	ip, [r7, #4]!
 800d400:	e7c2      	b.n	800d388 <rshift+0x28>
 800d402:	4623      	mov	r3, r4
 800d404:	e7e0      	b.n	800d3c8 <rshift+0x68>

0800d406 <__hexdig_fun>:
 800d406:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d40a:	2b09      	cmp	r3, #9
 800d40c:	d802      	bhi.n	800d414 <__hexdig_fun+0xe>
 800d40e:	3820      	subs	r0, #32
 800d410:	b2c0      	uxtb	r0, r0
 800d412:	4770      	bx	lr
 800d414:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d418:	2b05      	cmp	r3, #5
 800d41a:	d801      	bhi.n	800d420 <__hexdig_fun+0x1a>
 800d41c:	3847      	subs	r0, #71	@ 0x47
 800d41e:	e7f7      	b.n	800d410 <__hexdig_fun+0xa>
 800d420:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d424:	2b05      	cmp	r3, #5
 800d426:	d801      	bhi.n	800d42c <__hexdig_fun+0x26>
 800d428:	3827      	subs	r0, #39	@ 0x27
 800d42a:	e7f1      	b.n	800d410 <__hexdig_fun+0xa>
 800d42c:	2000      	movs	r0, #0
 800d42e:	4770      	bx	lr

0800d430 <__gethex>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	468a      	mov	sl, r1
 800d436:	4690      	mov	r8, r2
 800d438:	b085      	sub	sp, #20
 800d43a:	9302      	str	r3, [sp, #8]
 800d43c:	680b      	ldr	r3, [r1, #0]
 800d43e:	9001      	str	r0, [sp, #4]
 800d440:	1c9c      	adds	r4, r3, #2
 800d442:	46a1      	mov	r9, r4
 800d444:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d448:	2830      	cmp	r0, #48	@ 0x30
 800d44a:	d0fa      	beq.n	800d442 <__gethex+0x12>
 800d44c:	eba9 0303 	sub.w	r3, r9, r3
 800d450:	f1a3 0b02 	sub.w	fp, r3, #2
 800d454:	f7ff ffd7 	bl	800d406 <__hexdig_fun>
 800d458:	4605      	mov	r5, r0
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d168      	bne.n	800d530 <__gethex+0x100>
 800d45e:	2201      	movs	r2, #1
 800d460:	4648      	mov	r0, r9
 800d462:	499f      	ldr	r1, [pc, #636]	@ (800d6e0 <__gethex+0x2b0>)
 800d464:	f7fd f85e 	bl	800a524 <strncmp>
 800d468:	4607      	mov	r7, r0
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d167      	bne.n	800d53e <__gethex+0x10e>
 800d46e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d472:	4626      	mov	r6, r4
 800d474:	f7ff ffc7 	bl	800d406 <__hexdig_fun>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d062      	beq.n	800d542 <__gethex+0x112>
 800d47c:	4623      	mov	r3, r4
 800d47e:	7818      	ldrb	r0, [r3, #0]
 800d480:	4699      	mov	r9, r3
 800d482:	2830      	cmp	r0, #48	@ 0x30
 800d484:	f103 0301 	add.w	r3, r3, #1
 800d488:	d0f9      	beq.n	800d47e <__gethex+0x4e>
 800d48a:	f7ff ffbc 	bl	800d406 <__hexdig_fun>
 800d48e:	fab0 f580 	clz	r5, r0
 800d492:	f04f 0b01 	mov.w	fp, #1
 800d496:	096d      	lsrs	r5, r5, #5
 800d498:	464a      	mov	r2, r9
 800d49a:	4616      	mov	r6, r2
 800d49c:	7830      	ldrb	r0, [r6, #0]
 800d49e:	3201      	adds	r2, #1
 800d4a0:	f7ff ffb1 	bl	800d406 <__hexdig_fun>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d1f8      	bne.n	800d49a <__gethex+0x6a>
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	498c      	ldr	r1, [pc, #560]	@ (800d6e0 <__gethex+0x2b0>)
 800d4ae:	f7fd f839 	bl	800a524 <strncmp>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d13f      	bne.n	800d536 <__gethex+0x106>
 800d4b6:	b944      	cbnz	r4, 800d4ca <__gethex+0x9a>
 800d4b8:	1c74      	adds	r4, r6, #1
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	4616      	mov	r6, r2
 800d4be:	7830      	ldrb	r0, [r6, #0]
 800d4c0:	3201      	adds	r2, #1
 800d4c2:	f7ff ffa0 	bl	800d406 <__hexdig_fun>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d1f8      	bne.n	800d4bc <__gethex+0x8c>
 800d4ca:	1ba4      	subs	r4, r4, r6
 800d4cc:	00a7      	lsls	r7, r4, #2
 800d4ce:	7833      	ldrb	r3, [r6, #0]
 800d4d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d4d4:	2b50      	cmp	r3, #80	@ 0x50
 800d4d6:	d13e      	bne.n	800d556 <__gethex+0x126>
 800d4d8:	7873      	ldrb	r3, [r6, #1]
 800d4da:	2b2b      	cmp	r3, #43	@ 0x2b
 800d4dc:	d033      	beq.n	800d546 <__gethex+0x116>
 800d4de:	2b2d      	cmp	r3, #45	@ 0x2d
 800d4e0:	d034      	beq.n	800d54c <__gethex+0x11c>
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	1c71      	adds	r1, r6, #1
 800d4e6:	7808      	ldrb	r0, [r1, #0]
 800d4e8:	f7ff ff8d 	bl	800d406 <__hexdig_fun>
 800d4ec:	1e43      	subs	r3, r0, #1
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	2b18      	cmp	r3, #24
 800d4f2:	d830      	bhi.n	800d556 <__gethex+0x126>
 800d4f4:	f1a0 0210 	sub.w	r2, r0, #16
 800d4f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d4fc:	f7ff ff83 	bl	800d406 <__hexdig_fun>
 800d500:	f100 3cff 	add.w	ip, r0, #4294967295
 800d504:	fa5f fc8c 	uxtb.w	ip, ip
 800d508:	f1bc 0f18 	cmp.w	ip, #24
 800d50c:	f04f 030a 	mov.w	r3, #10
 800d510:	d91e      	bls.n	800d550 <__gethex+0x120>
 800d512:	b104      	cbz	r4, 800d516 <__gethex+0xe6>
 800d514:	4252      	negs	r2, r2
 800d516:	4417      	add	r7, r2
 800d518:	f8ca 1000 	str.w	r1, [sl]
 800d51c:	b1ed      	cbz	r5, 800d55a <__gethex+0x12a>
 800d51e:	f1bb 0f00 	cmp.w	fp, #0
 800d522:	bf0c      	ite	eq
 800d524:	2506      	moveq	r5, #6
 800d526:	2500      	movne	r5, #0
 800d528:	4628      	mov	r0, r5
 800d52a:	b005      	add	sp, #20
 800d52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d530:	2500      	movs	r5, #0
 800d532:	462c      	mov	r4, r5
 800d534:	e7b0      	b.n	800d498 <__gethex+0x68>
 800d536:	2c00      	cmp	r4, #0
 800d538:	d1c7      	bne.n	800d4ca <__gethex+0x9a>
 800d53a:	4627      	mov	r7, r4
 800d53c:	e7c7      	b.n	800d4ce <__gethex+0x9e>
 800d53e:	464e      	mov	r6, r9
 800d540:	462f      	mov	r7, r5
 800d542:	2501      	movs	r5, #1
 800d544:	e7c3      	b.n	800d4ce <__gethex+0x9e>
 800d546:	2400      	movs	r4, #0
 800d548:	1cb1      	adds	r1, r6, #2
 800d54a:	e7cc      	b.n	800d4e6 <__gethex+0xb6>
 800d54c:	2401      	movs	r4, #1
 800d54e:	e7fb      	b.n	800d548 <__gethex+0x118>
 800d550:	fb03 0002 	mla	r0, r3, r2, r0
 800d554:	e7ce      	b.n	800d4f4 <__gethex+0xc4>
 800d556:	4631      	mov	r1, r6
 800d558:	e7de      	b.n	800d518 <__gethex+0xe8>
 800d55a:	4629      	mov	r1, r5
 800d55c:	eba6 0309 	sub.w	r3, r6, r9
 800d560:	3b01      	subs	r3, #1
 800d562:	2b07      	cmp	r3, #7
 800d564:	dc0a      	bgt.n	800d57c <__gethex+0x14c>
 800d566:	9801      	ldr	r0, [sp, #4]
 800d568:	f7fe f82c 	bl	800b5c4 <_Balloc>
 800d56c:	4604      	mov	r4, r0
 800d56e:	b940      	cbnz	r0, 800d582 <__gethex+0x152>
 800d570:	4602      	mov	r2, r0
 800d572:	21e4      	movs	r1, #228	@ 0xe4
 800d574:	4b5b      	ldr	r3, [pc, #364]	@ (800d6e4 <__gethex+0x2b4>)
 800d576:	485c      	ldr	r0, [pc, #368]	@ (800d6e8 <__gethex+0x2b8>)
 800d578:	f7ff fec0 	bl	800d2fc <__assert_func>
 800d57c:	3101      	adds	r1, #1
 800d57e:	105b      	asrs	r3, r3, #1
 800d580:	e7ef      	b.n	800d562 <__gethex+0x132>
 800d582:	2300      	movs	r3, #0
 800d584:	f100 0a14 	add.w	sl, r0, #20
 800d588:	4655      	mov	r5, sl
 800d58a:	469b      	mov	fp, r3
 800d58c:	45b1      	cmp	r9, r6
 800d58e:	d337      	bcc.n	800d600 <__gethex+0x1d0>
 800d590:	f845 bb04 	str.w	fp, [r5], #4
 800d594:	eba5 050a 	sub.w	r5, r5, sl
 800d598:	10ad      	asrs	r5, r5, #2
 800d59a:	6125      	str	r5, [r4, #16]
 800d59c:	4658      	mov	r0, fp
 800d59e:	f7fe f903 	bl	800b7a8 <__hi0bits>
 800d5a2:	016d      	lsls	r5, r5, #5
 800d5a4:	f8d8 6000 	ldr.w	r6, [r8]
 800d5a8:	1a2d      	subs	r5, r5, r0
 800d5aa:	42b5      	cmp	r5, r6
 800d5ac:	dd54      	ble.n	800d658 <__gethex+0x228>
 800d5ae:	1bad      	subs	r5, r5, r6
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f7fe fc8b 	bl	800bece <__any_on>
 800d5b8:	4681      	mov	r9, r0
 800d5ba:	b178      	cbz	r0, 800d5dc <__gethex+0x1ac>
 800d5bc:	f04f 0901 	mov.w	r9, #1
 800d5c0:	1e6b      	subs	r3, r5, #1
 800d5c2:	1159      	asrs	r1, r3, #5
 800d5c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d5c8:	f003 021f 	and.w	r2, r3, #31
 800d5cc:	fa09 f202 	lsl.w	r2, r9, r2
 800d5d0:	420a      	tst	r2, r1
 800d5d2:	d003      	beq.n	800d5dc <__gethex+0x1ac>
 800d5d4:	454b      	cmp	r3, r9
 800d5d6:	dc36      	bgt.n	800d646 <__gethex+0x216>
 800d5d8:	f04f 0902 	mov.w	r9, #2
 800d5dc:	4629      	mov	r1, r5
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff febe 	bl	800d360 <rshift>
 800d5e4:	442f      	add	r7, r5
 800d5e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5ea:	42bb      	cmp	r3, r7
 800d5ec:	da42      	bge.n	800d674 <__gethex+0x244>
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	9801      	ldr	r0, [sp, #4]
 800d5f2:	f7fe f827 	bl	800b644 <_Bfree>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5fa:	25a3      	movs	r5, #163	@ 0xa3
 800d5fc:	6013      	str	r3, [r2, #0]
 800d5fe:	e793      	b.n	800d528 <__gethex+0xf8>
 800d600:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d604:	2a2e      	cmp	r2, #46	@ 0x2e
 800d606:	d012      	beq.n	800d62e <__gethex+0x1fe>
 800d608:	2b20      	cmp	r3, #32
 800d60a:	d104      	bne.n	800d616 <__gethex+0x1e6>
 800d60c:	f845 bb04 	str.w	fp, [r5], #4
 800d610:	f04f 0b00 	mov.w	fp, #0
 800d614:	465b      	mov	r3, fp
 800d616:	7830      	ldrb	r0, [r6, #0]
 800d618:	9303      	str	r3, [sp, #12]
 800d61a:	f7ff fef4 	bl	800d406 <__hexdig_fun>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	f000 000f 	and.w	r0, r0, #15
 800d624:	4098      	lsls	r0, r3
 800d626:	ea4b 0b00 	orr.w	fp, fp, r0
 800d62a:	3304      	adds	r3, #4
 800d62c:	e7ae      	b.n	800d58c <__gethex+0x15c>
 800d62e:	45b1      	cmp	r9, r6
 800d630:	d8ea      	bhi.n	800d608 <__gethex+0x1d8>
 800d632:	2201      	movs	r2, #1
 800d634:	4630      	mov	r0, r6
 800d636:	492a      	ldr	r1, [pc, #168]	@ (800d6e0 <__gethex+0x2b0>)
 800d638:	9303      	str	r3, [sp, #12]
 800d63a:	f7fc ff73 	bl	800a524 <strncmp>
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	2800      	cmp	r0, #0
 800d642:	d1e1      	bne.n	800d608 <__gethex+0x1d8>
 800d644:	e7a2      	b.n	800d58c <__gethex+0x15c>
 800d646:	4620      	mov	r0, r4
 800d648:	1ea9      	subs	r1, r5, #2
 800d64a:	f7fe fc40 	bl	800bece <__any_on>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d0c2      	beq.n	800d5d8 <__gethex+0x1a8>
 800d652:	f04f 0903 	mov.w	r9, #3
 800d656:	e7c1      	b.n	800d5dc <__gethex+0x1ac>
 800d658:	da09      	bge.n	800d66e <__gethex+0x23e>
 800d65a:	1b75      	subs	r5, r6, r5
 800d65c:	4621      	mov	r1, r4
 800d65e:	462a      	mov	r2, r5
 800d660:	9801      	ldr	r0, [sp, #4]
 800d662:	f7fe fa05 	bl	800ba70 <__lshift>
 800d666:	4604      	mov	r4, r0
 800d668:	1b7f      	subs	r7, r7, r5
 800d66a:	f100 0a14 	add.w	sl, r0, #20
 800d66e:	f04f 0900 	mov.w	r9, #0
 800d672:	e7b8      	b.n	800d5e6 <__gethex+0x1b6>
 800d674:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d678:	42bd      	cmp	r5, r7
 800d67a:	dd6f      	ble.n	800d75c <__gethex+0x32c>
 800d67c:	1bed      	subs	r5, r5, r7
 800d67e:	42ae      	cmp	r6, r5
 800d680:	dc34      	bgt.n	800d6ec <__gethex+0x2bc>
 800d682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d022      	beq.n	800d6d0 <__gethex+0x2a0>
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d024      	beq.n	800d6d8 <__gethex+0x2a8>
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d115      	bne.n	800d6be <__gethex+0x28e>
 800d692:	42ae      	cmp	r6, r5
 800d694:	d113      	bne.n	800d6be <__gethex+0x28e>
 800d696:	2e01      	cmp	r6, #1
 800d698:	d10b      	bne.n	800d6b2 <__gethex+0x282>
 800d69a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d69e:	9a02      	ldr	r2, [sp, #8]
 800d6a0:	2562      	movs	r5, #98	@ 0x62
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	6123      	str	r3, [r4, #16]
 800d6a8:	f8ca 3000 	str.w	r3, [sl]
 800d6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ae:	601c      	str	r4, [r3, #0]
 800d6b0:	e73a      	b.n	800d528 <__gethex+0xf8>
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	1e71      	subs	r1, r6, #1
 800d6b6:	f7fe fc0a 	bl	800bece <__any_on>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d1ed      	bne.n	800d69a <__gethex+0x26a>
 800d6be:	4621      	mov	r1, r4
 800d6c0:	9801      	ldr	r0, [sp, #4]
 800d6c2:	f7fd ffbf 	bl	800b644 <_Bfree>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6ca:	2550      	movs	r5, #80	@ 0x50
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	e72b      	b.n	800d528 <__gethex+0xf8>
 800d6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1f3      	bne.n	800d6be <__gethex+0x28e>
 800d6d6:	e7e0      	b.n	800d69a <__gethex+0x26a>
 800d6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1dd      	bne.n	800d69a <__gethex+0x26a>
 800d6de:	e7ee      	b.n	800d6be <__gethex+0x28e>
 800d6e0:	0800e0a8 	.word	0x0800e0a8
 800d6e4:	0800df3c 	.word	0x0800df3c
 800d6e8:	0800e155 	.word	0x0800e155
 800d6ec:	1e6f      	subs	r7, r5, #1
 800d6ee:	f1b9 0f00 	cmp.w	r9, #0
 800d6f2:	d130      	bne.n	800d756 <__gethex+0x326>
 800d6f4:	b127      	cbz	r7, 800d700 <__gethex+0x2d0>
 800d6f6:	4639      	mov	r1, r7
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f7fe fbe8 	bl	800bece <__any_on>
 800d6fe:	4681      	mov	r9, r0
 800d700:	2301      	movs	r3, #1
 800d702:	4629      	mov	r1, r5
 800d704:	1b76      	subs	r6, r6, r5
 800d706:	2502      	movs	r5, #2
 800d708:	117a      	asrs	r2, r7, #5
 800d70a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d70e:	f007 071f 	and.w	r7, r7, #31
 800d712:	40bb      	lsls	r3, r7
 800d714:	4213      	tst	r3, r2
 800d716:	4620      	mov	r0, r4
 800d718:	bf18      	it	ne
 800d71a:	f049 0902 	orrne.w	r9, r9, #2
 800d71e:	f7ff fe1f 	bl	800d360 <rshift>
 800d722:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d726:	f1b9 0f00 	cmp.w	r9, #0
 800d72a:	d047      	beq.n	800d7bc <__gethex+0x38c>
 800d72c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d730:	2b02      	cmp	r3, #2
 800d732:	d015      	beq.n	800d760 <__gethex+0x330>
 800d734:	2b03      	cmp	r3, #3
 800d736:	d017      	beq.n	800d768 <__gethex+0x338>
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d109      	bne.n	800d750 <__gethex+0x320>
 800d73c:	f019 0f02 	tst.w	r9, #2
 800d740:	d006      	beq.n	800d750 <__gethex+0x320>
 800d742:	f8da 3000 	ldr.w	r3, [sl]
 800d746:	ea49 0903 	orr.w	r9, r9, r3
 800d74a:	f019 0f01 	tst.w	r9, #1
 800d74e:	d10e      	bne.n	800d76e <__gethex+0x33e>
 800d750:	f045 0510 	orr.w	r5, r5, #16
 800d754:	e032      	b.n	800d7bc <__gethex+0x38c>
 800d756:	f04f 0901 	mov.w	r9, #1
 800d75a:	e7d1      	b.n	800d700 <__gethex+0x2d0>
 800d75c:	2501      	movs	r5, #1
 800d75e:	e7e2      	b.n	800d726 <__gethex+0x2f6>
 800d760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d762:	f1c3 0301 	rsb	r3, r3, #1
 800d766:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d0f0      	beq.n	800d750 <__gethex+0x320>
 800d76e:	f04f 0c00 	mov.w	ip, #0
 800d772:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d776:	f104 0314 	add.w	r3, r4, #20
 800d77a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d77e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d782:	4618      	mov	r0, r3
 800d784:	f853 2b04 	ldr.w	r2, [r3], #4
 800d788:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d78c:	d01b      	beq.n	800d7c6 <__gethex+0x396>
 800d78e:	3201      	adds	r2, #1
 800d790:	6002      	str	r2, [r0, #0]
 800d792:	2d02      	cmp	r5, #2
 800d794:	f104 0314 	add.w	r3, r4, #20
 800d798:	d13c      	bne.n	800d814 <__gethex+0x3e4>
 800d79a:	f8d8 2000 	ldr.w	r2, [r8]
 800d79e:	3a01      	subs	r2, #1
 800d7a0:	42b2      	cmp	r2, r6
 800d7a2:	d109      	bne.n	800d7b8 <__gethex+0x388>
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	1171      	asrs	r1, r6, #5
 800d7a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d7ac:	f006 061f 	and.w	r6, r6, #31
 800d7b0:	fa02 f606 	lsl.w	r6, r2, r6
 800d7b4:	421e      	tst	r6, r3
 800d7b6:	d13a      	bne.n	800d82e <__gethex+0x3fe>
 800d7b8:	f045 0520 	orr.w	r5, r5, #32
 800d7bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7be:	601c      	str	r4, [r3, #0]
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	601f      	str	r7, [r3, #0]
 800d7c4:	e6b0      	b.n	800d528 <__gethex+0xf8>
 800d7c6:	4299      	cmp	r1, r3
 800d7c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800d7cc:	d8d9      	bhi.n	800d782 <__gethex+0x352>
 800d7ce:	68a3      	ldr	r3, [r4, #8]
 800d7d0:	459b      	cmp	fp, r3
 800d7d2:	db17      	blt.n	800d804 <__gethex+0x3d4>
 800d7d4:	6861      	ldr	r1, [r4, #4]
 800d7d6:	9801      	ldr	r0, [sp, #4]
 800d7d8:	3101      	adds	r1, #1
 800d7da:	f7fd fef3 	bl	800b5c4 <_Balloc>
 800d7de:	4681      	mov	r9, r0
 800d7e0:	b918      	cbnz	r0, 800d7ea <__gethex+0x3ba>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	2184      	movs	r1, #132	@ 0x84
 800d7e6:	4b19      	ldr	r3, [pc, #100]	@ (800d84c <__gethex+0x41c>)
 800d7e8:	e6c5      	b.n	800d576 <__gethex+0x146>
 800d7ea:	6922      	ldr	r2, [r4, #16]
 800d7ec:	f104 010c 	add.w	r1, r4, #12
 800d7f0:	3202      	adds	r2, #2
 800d7f2:	0092      	lsls	r2, r2, #2
 800d7f4:	300c      	adds	r0, #12
 800d7f6:	f7fc ff82 	bl	800a6fe <memcpy>
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	9801      	ldr	r0, [sp, #4]
 800d7fe:	f7fd ff21 	bl	800b644 <_Bfree>
 800d802:	464c      	mov	r4, r9
 800d804:	6923      	ldr	r3, [r4, #16]
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	6122      	str	r2, [r4, #16]
 800d80a:	2201      	movs	r2, #1
 800d80c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d810:	615a      	str	r2, [r3, #20]
 800d812:	e7be      	b.n	800d792 <__gethex+0x362>
 800d814:	6922      	ldr	r2, [r4, #16]
 800d816:	455a      	cmp	r2, fp
 800d818:	dd0b      	ble.n	800d832 <__gethex+0x402>
 800d81a:	2101      	movs	r1, #1
 800d81c:	4620      	mov	r0, r4
 800d81e:	f7ff fd9f 	bl	800d360 <rshift>
 800d822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d826:	3701      	adds	r7, #1
 800d828:	42bb      	cmp	r3, r7
 800d82a:	f6ff aee0 	blt.w	800d5ee <__gethex+0x1be>
 800d82e:	2501      	movs	r5, #1
 800d830:	e7c2      	b.n	800d7b8 <__gethex+0x388>
 800d832:	f016 061f 	ands.w	r6, r6, #31
 800d836:	d0fa      	beq.n	800d82e <__gethex+0x3fe>
 800d838:	4453      	add	r3, sl
 800d83a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d83e:	f7fd ffb3 	bl	800b7a8 <__hi0bits>
 800d842:	f1c6 0620 	rsb	r6, r6, #32
 800d846:	42b0      	cmp	r0, r6
 800d848:	dbe7      	blt.n	800d81a <__gethex+0x3ea>
 800d84a:	e7f0      	b.n	800d82e <__gethex+0x3fe>
 800d84c:	0800df3c 	.word	0x0800df3c

0800d850 <L_shift>:
 800d850:	f1c2 0208 	rsb	r2, r2, #8
 800d854:	0092      	lsls	r2, r2, #2
 800d856:	b570      	push	{r4, r5, r6, lr}
 800d858:	f1c2 0620 	rsb	r6, r2, #32
 800d85c:	6843      	ldr	r3, [r0, #4]
 800d85e:	6804      	ldr	r4, [r0, #0]
 800d860:	fa03 f506 	lsl.w	r5, r3, r6
 800d864:	432c      	orrs	r4, r5
 800d866:	40d3      	lsrs	r3, r2
 800d868:	6004      	str	r4, [r0, #0]
 800d86a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d86e:	4288      	cmp	r0, r1
 800d870:	d3f4      	bcc.n	800d85c <L_shift+0xc>
 800d872:	bd70      	pop	{r4, r5, r6, pc}

0800d874 <__match>:
 800d874:	b530      	push	{r4, r5, lr}
 800d876:	6803      	ldr	r3, [r0, #0]
 800d878:	3301      	adds	r3, #1
 800d87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d87e:	b914      	cbnz	r4, 800d886 <__match+0x12>
 800d880:	6003      	str	r3, [r0, #0]
 800d882:	2001      	movs	r0, #1
 800d884:	bd30      	pop	{r4, r5, pc}
 800d886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d88a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d88e:	2d19      	cmp	r5, #25
 800d890:	bf98      	it	ls
 800d892:	3220      	addls	r2, #32
 800d894:	42a2      	cmp	r2, r4
 800d896:	d0f0      	beq.n	800d87a <__match+0x6>
 800d898:	2000      	movs	r0, #0
 800d89a:	e7f3      	b.n	800d884 <__match+0x10>

0800d89c <__hexnan>:
 800d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a0:	2500      	movs	r5, #0
 800d8a2:	680b      	ldr	r3, [r1, #0]
 800d8a4:	4682      	mov	sl, r0
 800d8a6:	115e      	asrs	r6, r3, #5
 800d8a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d8ac:	f013 031f 	ands.w	r3, r3, #31
 800d8b0:	bf18      	it	ne
 800d8b2:	3604      	addne	r6, #4
 800d8b4:	1f37      	subs	r7, r6, #4
 800d8b6:	4690      	mov	r8, r2
 800d8b8:	46b9      	mov	r9, r7
 800d8ba:	463c      	mov	r4, r7
 800d8bc:	46ab      	mov	fp, r5
 800d8be:	b087      	sub	sp, #28
 800d8c0:	6801      	ldr	r1, [r0, #0]
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	f846 5c04 	str.w	r5, [r6, #-4]
 800d8c8:	9502      	str	r5, [sp, #8]
 800d8ca:	784a      	ldrb	r2, [r1, #1]
 800d8cc:	1c4b      	adds	r3, r1, #1
 800d8ce:	9303      	str	r3, [sp, #12]
 800d8d0:	b342      	cbz	r2, 800d924 <__hexnan+0x88>
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	9105      	str	r1, [sp, #20]
 800d8d6:	9204      	str	r2, [sp, #16]
 800d8d8:	f7ff fd95 	bl	800d406 <__hexdig_fun>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d151      	bne.n	800d984 <__hexnan+0xe8>
 800d8e0:	9a04      	ldr	r2, [sp, #16]
 800d8e2:	9905      	ldr	r1, [sp, #20]
 800d8e4:	2a20      	cmp	r2, #32
 800d8e6:	d818      	bhi.n	800d91a <__hexnan+0x7e>
 800d8e8:	9b02      	ldr	r3, [sp, #8]
 800d8ea:	459b      	cmp	fp, r3
 800d8ec:	dd13      	ble.n	800d916 <__hexnan+0x7a>
 800d8ee:	454c      	cmp	r4, r9
 800d8f0:	d206      	bcs.n	800d900 <__hexnan+0x64>
 800d8f2:	2d07      	cmp	r5, #7
 800d8f4:	dc04      	bgt.n	800d900 <__hexnan+0x64>
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f7ff ffa8 	bl	800d850 <L_shift>
 800d900:	4544      	cmp	r4, r8
 800d902:	d952      	bls.n	800d9aa <__hexnan+0x10e>
 800d904:	2300      	movs	r3, #0
 800d906:	f1a4 0904 	sub.w	r9, r4, #4
 800d90a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d90e:	461d      	mov	r5, r3
 800d910:	464c      	mov	r4, r9
 800d912:	f8cd b008 	str.w	fp, [sp, #8]
 800d916:	9903      	ldr	r1, [sp, #12]
 800d918:	e7d7      	b.n	800d8ca <__hexnan+0x2e>
 800d91a:	2a29      	cmp	r2, #41	@ 0x29
 800d91c:	d157      	bne.n	800d9ce <__hexnan+0x132>
 800d91e:	3102      	adds	r1, #2
 800d920:	f8ca 1000 	str.w	r1, [sl]
 800d924:	f1bb 0f00 	cmp.w	fp, #0
 800d928:	d051      	beq.n	800d9ce <__hexnan+0x132>
 800d92a:	454c      	cmp	r4, r9
 800d92c:	d206      	bcs.n	800d93c <__hexnan+0xa0>
 800d92e:	2d07      	cmp	r5, #7
 800d930:	dc04      	bgt.n	800d93c <__hexnan+0xa0>
 800d932:	462a      	mov	r2, r5
 800d934:	4649      	mov	r1, r9
 800d936:	4620      	mov	r0, r4
 800d938:	f7ff ff8a 	bl	800d850 <L_shift>
 800d93c:	4544      	cmp	r4, r8
 800d93e:	d936      	bls.n	800d9ae <__hexnan+0x112>
 800d940:	4623      	mov	r3, r4
 800d942:	f1a8 0204 	sub.w	r2, r8, #4
 800d946:	f853 1b04 	ldr.w	r1, [r3], #4
 800d94a:	429f      	cmp	r7, r3
 800d94c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d950:	d2f9      	bcs.n	800d946 <__hexnan+0xaa>
 800d952:	1b3b      	subs	r3, r7, r4
 800d954:	f023 0303 	bic.w	r3, r3, #3
 800d958:	3304      	adds	r3, #4
 800d95a:	3401      	adds	r4, #1
 800d95c:	3e03      	subs	r6, #3
 800d95e:	42b4      	cmp	r4, r6
 800d960:	bf88      	it	hi
 800d962:	2304      	movhi	r3, #4
 800d964:	2200      	movs	r2, #0
 800d966:	4443      	add	r3, r8
 800d968:	f843 2b04 	str.w	r2, [r3], #4
 800d96c:	429f      	cmp	r7, r3
 800d96e:	d2fb      	bcs.n	800d968 <__hexnan+0xcc>
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	b91b      	cbnz	r3, 800d97c <__hexnan+0xe0>
 800d974:	4547      	cmp	r7, r8
 800d976:	d128      	bne.n	800d9ca <__hexnan+0x12e>
 800d978:	2301      	movs	r3, #1
 800d97a:	603b      	str	r3, [r7, #0]
 800d97c:	2005      	movs	r0, #5
 800d97e:	b007      	add	sp, #28
 800d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d984:	3501      	adds	r5, #1
 800d986:	2d08      	cmp	r5, #8
 800d988:	f10b 0b01 	add.w	fp, fp, #1
 800d98c:	dd06      	ble.n	800d99c <__hexnan+0x100>
 800d98e:	4544      	cmp	r4, r8
 800d990:	d9c1      	bls.n	800d916 <__hexnan+0x7a>
 800d992:	2300      	movs	r3, #0
 800d994:	2501      	movs	r5, #1
 800d996:	f844 3c04 	str.w	r3, [r4, #-4]
 800d99a:	3c04      	subs	r4, #4
 800d99c:	6822      	ldr	r2, [r4, #0]
 800d99e:	f000 000f 	and.w	r0, r0, #15
 800d9a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d9a6:	6020      	str	r0, [r4, #0]
 800d9a8:	e7b5      	b.n	800d916 <__hexnan+0x7a>
 800d9aa:	2508      	movs	r5, #8
 800d9ac:	e7b3      	b.n	800d916 <__hexnan+0x7a>
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d0dd      	beq.n	800d970 <__hexnan+0xd4>
 800d9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b8:	f1c3 0320 	rsb	r3, r3, #32
 800d9bc:	40da      	lsrs	r2, r3
 800d9be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d9c8:	e7d2      	b.n	800d970 <__hexnan+0xd4>
 800d9ca:	3f04      	subs	r7, #4
 800d9cc:	e7d0      	b.n	800d970 <__hexnan+0xd4>
 800d9ce:	2004      	movs	r0, #4
 800d9d0:	e7d5      	b.n	800d97e <__hexnan+0xe2>

0800d9d2 <__ascii_mbtowc>:
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	b901      	cbnz	r1, 800d9d8 <__ascii_mbtowc+0x6>
 800d9d6:	a901      	add	r1, sp, #4
 800d9d8:	b142      	cbz	r2, 800d9ec <__ascii_mbtowc+0x1a>
 800d9da:	b14b      	cbz	r3, 800d9f0 <__ascii_mbtowc+0x1e>
 800d9dc:	7813      	ldrb	r3, [r2, #0]
 800d9de:	600b      	str	r3, [r1, #0]
 800d9e0:	7812      	ldrb	r2, [r2, #0]
 800d9e2:	1e10      	subs	r0, r2, #0
 800d9e4:	bf18      	it	ne
 800d9e6:	2001      	movne	r0, #1
 800d9e8:	b002      	add	sp, #8
 800d9ea:	4770      	bx	lr
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	e7fb      	b.n	800d9e8 <__ascii_mbtowc+0x16>
 800d9f0:	f06f 0001 	mvn.w	r0, #1
 800d9f4:	e7f8      	b.n	800d9e8 <__ascii_mbtowc+0x16>

0800d9f6 <_realloc_r>:
 800d9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fa:	4680      	mov	r8, r0
 800d9fc:	4615      	mov	r5, r2
 800d9fe:	460c      	mov	r4, r1
 800da00:	b921      	cbnz	r1, 800da0c <_realloc_r+0x16>
 800da02:	4611      	mov	r1, r2
 800da04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da08:	f7fd bd50 	b.w	800b4ac <_malloc_r>
 800da0c:	b92a      	cbnz	r2, 800da1a <_realloc_r+0x24>
 800da0e:	f7fd fcdb 	bl	800b3c8 <_free_r>
 800da12:	2400      	movs	r4, #0
 800da14:	4620      	mov	r0, r4
 800da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da1a:	f000 f840 	bl	800da9e <_malloc_usable_size_r>
 800da1e:	4285      	cmp	r5, r0
 800da20:	4606      	mov	r6, r0
 800da22:	d802      	bhi.n	800da2a <_realloc_r+0x34>
 800da24:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da28:	d8f4      	bhi.n	800da14 <_realloc_r+0x1e>
 800da2a:	4629      	mov	r1, r5
 800da2c:	4640      	mov	r0, r8
 800da2e:	f7fd fd3d 	bl	800b4ac <_malloc_r>
 800da32:	4607      	mov	r7, r0
 800da34:	2800      	cmp	r0, #0
 800da36:	d0ec      	beq.n	800da12 <_realloc_r+0x1c>
 800da38:	42b5      	cmp	r5, r6
 800da3a:	462a      	mov	r2, r5
 800da3c:	4621      	mov	r1, r4
 800da3e:	bf28      	it	cs
 800da40:	4632      	movcs	r2, r6
 800da42:	f7fc fe5c 	bl	800a6fe <memcpy>
 800da46:	4621      	mov	r1, r4
 800da48:	4640      	mov	r0, r8
 800da4a:	f7fd fcbd 	bl	800b3c8 <_free_r>
 800da4e:	463c      	mov	r4, r7
 800da50:	e7e0      	b.n	800da14 <_realloc_r+0x1e>

0800da52 <__ascii_wctomb>:
 800da52:	4603      	mov	r3, r0
 800da54:	4608      	mov	r0, r1
 800da56:	b141      	cbz	r1, 800da6a <__ascii_wctomb+0x18>
 800da58:	2aff      	cmp	r2, #255	@ 0xff
 800da5a:	d904      	bls.n	800da66 <__ascii_wctomb+0x14>
 800da5c:	228a      	movs	r2, #138	@ 0x8a
 800da5e:	f04f 30ff 	mov.w	r0, #4294967295
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	4770      	bx	lr
 800da66:	2001      	movs	r0, #1
 800da68:	700a      	strb	r2, [r1, #0]
 800da6a:	4770      	bx	lr

0800da6c <fiprintf>:
 800da6c:	b40e      	push	{r1, r2, r3}
 800da6e:	b503      	push	{r0, r1, lr}
 800da70:	4601      	mov	r1, r0
 800da72:	ab03      	add	r3, sp, #12
 800da74:	4805      	ldr	r0, [pc, #20]	@ (800da8c <fiprintf+0x20>)
 800da76:	f853 2b04 	ldr.w	r2, [r3], #4
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	f7ff f9c9 	bl	800ce14 <_vfiprintf_r>
 800da82:	b002      	add	sp, #8
 800da84:	f85d eb04 	ldr.w	lr, [sp], #4
 800da88:	b003      	add	sp, #12
 800da8a:	4770      	bx	lr
 800da8c:	2000001c 	.word	0x2000001c

0800da90 <abort>:
 800da90:	2006      	movs	r0, #6
 800da92:	b508      	push	{r3, lr}
 800da94:	f000 f834 	bl	800db00 <raise>
 800da98:	2001      	movs	r0, #1
 800da9a:	f7f4 f9aa 	bl	8001df2 <_exit>

0800da9e <_malloc_usable_size_r>:
 800da9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daa2:	1f18      	subs	r0, r3, #4
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	bfbc      	itt	lt
 800daa8:	580b      	ldrlt	r3, [r1, r0]
 800daaa:	18c0      	addlt	r0, r0, r3
 800daac:	4770      	bx	lr

0800daae <_raise_r>:
 800daae:	291f      	cmp	r1, #31
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4605      	mov	r5, r0
 800dab4:	460c      	mov	r4, r1
 800dab6:	d904      	bls.n	800dac2 <_raise_r+0x14>
 800dab8:	2316      	movs	r3, #22
 800daba:	6003      	str	r3, [r0, #0]
 800dabc:	f04f 30ff 	mov.w	r0, #4294967295
 800dac0:	bd38      	pop	{r3, r4, r5, pc}
 800dac2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dac4:	b112      	cbz	r2, 800dacc <_raise_r+0x1e>
 800dac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daca:	b94b      	cbnz	r3, 800dae0 <_raise_r+0x32>
 800dacc:	4628      	mov	r0, r5
 800dace:	f000 f831 	bl	800db34 <_getpid_r>
 800dad2:	4622      	mov	r2, r4
 800dad4:	4601      	mov	r1, r0
 800dad6:	4628      	mov	r0, r5
 800dad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dadc:	f000 b818 	b.w	800db10 <_kill_r>
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d00a      	beq.n	800dafa <_raise_r+0x4c>
 800dae4:	1c59      	adds	r1, r3, #1
 800dae6:	d103      	bne.n	800daf0 <_raise_r+0x42>
 800dae8:	2316      	movs	r3, #22
 800daea:	6003      	str	r3, [r0, #0]
 800daec:	2001      	movs	r0, #1
 800daee:	e7e7      	b.n	800dac0 <_raise_r+0x12>
 800daf0:	2100      	movs	r1, #0
 800daf2:	4620      	mov	r0, r4
 800daf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800daf8:	4798      	blx	r3
 800dafa:	2000      	movs	r0, #0
 800dafc:	e7e0      	b.n	800dac0 <_raise_r+0x12>
	...

0800db00 <raise>:
 800db00:	4b02      	ldr	r3, [pc, #8]	@ (800db0c <raise+0xc>)
 800db02:	4601      	mov	r1, r0
 800db04:	6818      	ldr	r0, [r3, #0]
 800db06:	f7ff bfd2 	b.w	800daae <_raise_r>
 800db0a:	bf00      	nop
 800db0c:	2000001c 	.word	0x2000001c

0800db10 <_kill_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	2300      	movs	r3, #0
 800db14:	4d06      	ldr	r5, [pc, #24]	@ (800db30 <_kill_r+0x20>)
 800db16:	4604      	mov	r4, r0
 800db18:	4608      	mov	r0, r1
 800db1a:	4611      	mov	r1, r2
 800db1c:	602b      	str	r3, [r5, #0]
 800db1e:	f7f4 f958 	bl	8001dd2 <_kill>
 800db22:	1c43      	adds	r3, r0, #1
 800db24:	d102      	bne.n	800db2c <_kill_r+0x1c>
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	b103      	cbz	r3, 800db2c <_kill_r+0x1c>
 800db2a:	6023      	str	r3, [r4, #0]
 800db2c:	bd38      	pop	{r3, r4, r5, pc}
 800db2e:	bf00      	nop
 800db30:	20002370 	.word	0x20002370

0800db34 <_getpid_r>:
 800db34:	f7f4 b946 	b.w	8001dc4 <_getpid>

0800db38 <_init>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	bf00      	nop
 800db3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3e:	bc08      	pop	{r3}
 800db40:	469e      	mov	lr, r3
 800db42:	4770      	bx	lr

0800db44 <_fini>:
 800db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db46:	bf00      	nop
 800db48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4a:	bc08      	pop	{r3}
 800db4c:	469e      	mov	lr, r3
 800db4e:	4770      	bx	lr
