/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "string.h"
#include "stdbool.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define SEM_UART_USE 1
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* Definitions for Task1_LedRed */
osThreadId_t Task1_LedRedHandle;
const osThreadAttr_t Task1_LedRed_attributes = {
  .name = "Task1_LedRed",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Task2_LedBlue */
osThreadId_t Task2_LedBlueHandle;
const osThreadAttr_t Task2_LedBlue_attributes = {
  .name = "Task2_LedBlue",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Task3_PrintUart */
osThreadId_t Task3_PrintUartHandle;
const osThreadAttr_t Task3_PrintUart_attributes = {
  .name = "Task3_PrintUart",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for qMsgQueue */
osMessageQueueId_t qMsgQueueHandle;
const osMessageQueueAttr_t qMsgQueue_attributes = {
  .name = "qMsgQueue"
};
/* Definitions for semUart */
osSemaphoreId_t semUartHandle;
const osSemaphoreAttr_t semUart_attributes = {
  .name = "semUart"
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
void S_Task1_LedRed(void *argument);
void S_Task2_LedBlue(void *argument);
void S_Task3_PrintUart(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char * ptr, int len) {
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
  return len;
}

typedef struct {
  bool Value;
  uint8_t Source;
}
Datax;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUart */
  semUartHandle = osSemaphoreNew(1, 1, &semUart_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMsgQueue */
  qMsgQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &qMsgQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_LedRed */
  Task1_LedRedHandle = osThreadNew(S_Task1_LedRed, NULL, &Task1_LedRed_attributes);

  /* creation of Task2_LedBlue */
  Task2_LedBlueHandle = osThreadNew(S_Task2_LedBlue, NULL, &Task2_LedBlue_attributes);

  /* creation of Task3_PrintUart */
  Task3_PrintUartHandle = osThreadNew(S_Task3_PrintUart, NULL, &Task3_PrintUart_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_S_Task1_LedRed */
/**
  * @brief  Function implementing the Task1_LedRed thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task1_LedRed */
void S_Task1_LedRed(void *argument)
{
  /* USER CODE BEGIN 5 */
	uint32_t next_wake_time = osKernelGetTickCount();
	Datax pData;

	pData.Source = 1;

	bool ledStatus = false;
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
#endif
//	printf("Task 1 in: %ld\n", osKernelGetTickCount());

#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
#endif

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ledStatus);

	pData.Value = ledStatus;
	osMessageQueuePut(qMsgQueueHandle, &pData, 2, 100);

	ledStatus = !ledStatus;


#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
#endif
//	printf("Task 1 out: %ld\n\n", osKernelGetTickCount());

#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
#endif

	next_wake_time += 1000;
	osDelayUntil(next_wake_time);

  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_S_Task2_LedBlue */
/**
* @brief Function implementing the Task2_LedBlue thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task2_LedBlue */
void S_Task2_LedBlue(void *argument)
{
  /* USER CODE BEGIN S_Task2_LedBlue */
	uint32_t next_wake_time = osKernelGetTickCount();
	Datax pData;

	pData.Source = 2;
	bool ledStatus = false;
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
#endif
//	printf("Task 2 in: %ld\n", osKernelGetTickCount());
#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
#endif

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ledStatus);

	pData.Value = ledStatus;
	osMessageQueuePut(qMsgQueueHandle, &pData, 1, 100);

	ledStatus = !ledStatus;

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
#endif
//	printf("Task 2 out: %ld\n\n", osKernelGetTickCount());
#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
#endif

	next_wake_time += 1500;
	osDelayUntil(next_wake_time);
  }
  /* USER CODE END S_Task2_LedBlue */
}

/* USER CODE BEGIN Header_S_Task3_PrintUart */
/**
* @brief Function implementing the Task3_PrintUart thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task3_PrintUart */
void S_Task3_PrintUart(void *argument)
{
  /* USER CODE BEGIN S_Task3_PrintUart */
	Datax pDataGet;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(qMsgQueueHandle, &pDataGet, NULL, osWaitForever);

	printf("Get data from Task: %d   Led status: %d\n", pDataGet.Source, pDataGet.Value);
    osDelay(1);
  }
  /* USER CODE END S_Task3_PrintUart */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
