/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t countGlobal = 0;
uint8_t flag_exti1 = 0;
uint32_t timebuffer1 = 0;
uint32_t timebuffer2 = 0;

//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
//	if (GPIO_Pin == GPIO_PIN_0){
//
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
//	}
//
//	if (GPIO_Pin == GPIO_PIN_1){
////		flag_exti1 = 1;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
//	}
//
////	if (flag_exti0 == 1 && flag_exti1 == 0){
////		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
////	}else if (flag_exti0 == 0 && flag_exti1 == 1){
////		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
////	}else {
////		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
////
////	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_0)
  {
    // Bắt đầu xử lý PA0 (ưu tiên thấp)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
    for (volatile int i = 0; i < 3000000; i++);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
  }
  else if (GPIO_Pin == GPIO_PIN_1)
  {
    // Xử lý PA1 (ưu tiên cao)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
    for (volatile int i = 0; i < 500000; i++);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
  }
}

const uint8_t font[10][5] = {
    {0x07, 0x05, 0x05, 0x05, 0x07}, // 0
    {0x01, 0x01, 0x01, 0x01, 0x01}, // 1
	{0x07, 0x04, 0x07, 0x01, 0x07}, // 2
    {0x07, 0x01, 0x07, 0x01, 0x07}, // 3
	{0x01, 0x01, 0x07, 0x05, 0x05}, // 4
	{0x07, 0x01, 0x07, 0x04, 0x07}, // 5
	{0x07, 0x05, 0x07, 0x04, 0x07}, // 6
    {0x01, 0x01, 0x01, 0x01, 0x07}, // 7
    {0x07, 0x05, 0x07, 0x05, 0x07}, // 8
    {0x07, 0x01, 0x07, 0x05, 0x07}  // 9
};


uint8_t current_row = 0;
uint8_t display_buffer[5][7]; // 5 rows x 7 columns
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init(uint8_t num1, uint8_t num2) {
    num1 = (num1 > 9) ? 0 : num1;
    num2 = (num2 > 9) ? 0 : num2;

    for(uint8_t row = 0; row < 5; row++) {

        for(uint8_t col = 0; col < 3; col++) {
            display_buffer[row][col] = (font[num1][row] >> (2 - col)) & 0x01;
        }


        display_buffer[row][3] = 0;


        for(uint8_t col = 0; col < 3; col++) {
            display_buffer[row][col+4] = (font[num2][row] >> (2 - col)) & 0x01;
        }
    }
}


void Matrix_Scan() {
    // Tắt Row
    HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin | ROW5_Pin, GPIO_PIN_RESET);

    // Tắt colum
    HAL_GPIO_WritePin(GPIOA, COL1_Pin | COL2_Pin | COL3_Pin | COL4_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOB, COL5_Pin | COL6_Pin | COL7_Pin, GPIO_PIN_SET);

    for(uint8_t col = 0; col < 7; col++) {
        if(display_buffer[current_row][col]) {
            if(col < 4) {
                HAL_GPIO_WritePin(GPIOA, COL1_Pin << col, GPIO_PIN_RESET);
            } else {
                HAL_GPIO_WritePin(GPIOB, COL5_Pin << (col - 4), GPIO_PIN_RESET);
            }
        }
    }


    HAL_GPIO_WritePin(GPIOA, ROW1_Pin << current_row, GPIO_PIN_SET);


    current_row = (current_row + 1) % 5;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  uint8_t count = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//    if (flag_exti1)
//    {
//        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
//        HAL_Delay(500);
//        flag_exti0 = 0;
//    }
//    if (flag_exti0)
//    {
//        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
//        HAL_Delay(500);
//        flag_exti1 = 0;
//    }

//    uint8_t firstNum = count / 10;
//    uint8_t secNum = count % 10;
//
//    if (HAL_GetTick() - timebuffer1 > 100){
//    	Display_Init(firstNum, secNum);
//    	count ++;
//        if (count == 100){
//        	count = 0;
//        }
//        timebuffer1 = HAL_GetTick();
//    }
//
//    if (HAL_GetTick() - timebuffer2 > 2){
//    	Matrix_Scan();
//        timebuffer2 = HAL_GetTick();
//    }

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  HAL_Delay(100);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|ROW1_Pin|ROW2_Pin
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL5_Pin|COL6_Pin|COL7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin COL1_Pin COL2_Pin COL3_Pin
                           COL4_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|COL1_Pin|COL2_Pin|COL3_Pin
                          |COL4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : COL5_Pin COL6_Pin COL7_Pin PB3 */
  GPIO_InitStruct.Pin = COL5_Pin|COL6_Pin|COL7_Pin|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
