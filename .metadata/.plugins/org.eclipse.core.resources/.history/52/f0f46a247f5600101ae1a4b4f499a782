/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdint.h"
#include "string.h"
#include "HCSR04.h"
#include "Servo.h"
#include "MPU9250.h"
#include <stdlib.h>
#include <ctype.h>
#include "stdbool.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;

/* Definitions for Task1_MPU9250 */
osThreadId_t Task1_MPU9250Handle;
const osThreadAttr_t Task1_MPU9250_attributes = {
  .name = "Task1_MPU9250",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Task2_HCSR04 */
osThreadId_t Task2_HCSR04Handle;
const osThreadAttr_t Task2_HCSR04_attributes = {
  .name = "Task2_HCSR04",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for Task3_UARTCMD */
osThreadId_t Task3_UARTCMDHandle;
const osThreadAttr_t Task3_UARTCMD_attributes = {
  .name = "Task3_UARTCMD",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for Task4_TimeContr */
osThreadId_t Task4_TimeContrHandle;
const osThreadAttr_t Task4_TimeContr_attributes = {
  .name = "Task4_TimeContr",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime,
};
/* Definitions for Sem1_CMD */
osSemaphoreId_t Sem1_CMDHandle;
const osSemaphoreAttr_t Sem1_CMD_attributes = {
  .name = "Sem1_CMD"
};
/* Definitions for Sem2_UART */
osSemaphoreId_t Sem2_UARTHandle;
const osSemaphoreAttr_t Sem2_UART_attributes = {
  .name = "Sem2_UART"
};
/* Definitions for Sem_Task1 */
osSemaphoreId_t Sem_Task1Handle;
const osSemaphoreAttr_t Sem_Task1_attributes = {
  .name = "Sem_Task1"
};
/* Definitions for Sem_Task2 */
osSemaphoreId_t Sem_Task2Handle;
const osSemaphoreAttr_t Sem_Task2_attributes = {
  .name = "Sem_Task2"
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM4_Init(void);
void S_Task1_MPU9250(void *argument);
void S_Task2_HCSR04(void *argument);
void S_Task3_UARTCMD(void *argument);
void S_Task4_TimeControl(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char * ptr, int len) {
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
  return len;
}

uint8_t data_rx;
char uart_buff[100];
uint8_t uart_index = 0;
uint8_t uart_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

	if (data_rx == '\n'){
		uart_buff[uart_index] = '\0';
		uart_flag = 1;
	}else{
		uart_buff[uart_index++] = data_rx;
	}

	if (uart_flag == 1){
	  uart_flag = 0;
	  uart_index = 0;
	  osSemaphoreRelease(Sem1_CMDHandle);
	}
	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  MX_TIM1_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem1_CMD */
  Sem1_CMDHandle = osSemaphoreNew(1, 0, &Sem1_CMD_attributes);

  /* creation of Sem2_UART */
  Sem2_UARTHandle = osSemaphoreNew(1, 1, &Sem2_UART_attributes);

  /* creation of Sem_Task1 */
  Sem_Task1Handle = osSemaphoreNew(1, 0, &Sem_Task1_attributes);

  /* creation of Sem_Task2 */
  Sem_Task2Handle = osSemaphoreNew(1, 0, &Sem_Task2_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_MPU9250 */
  Task1_MPU9250Handle = osThreadNew(S_Task1_MPU9250, NULL, &Task1_MPU9250_attributes);

  /* creation of Task2_HCSR04 */
  Task2_HCSR04Handle = osThreadNew(S_Task2_HCSR04, NULL, &Task2_HCSR04_attributes);

  /* creation of Task3_UARTCMD */
  Task3_UARTCMDHandle = osThreadNew(S_Task3_UARTCMD, NULL, &Task3_UARTCMD_attributes);

  /* creation of Task4_TimeContr */
  Task4_TimeContrHandle = osThreadNew(S_Task4_TimeControl, NULL, &Task4_TimeContr_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 63;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 63;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 19999;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

typedef struct {
	*osSemaphoreId_t sem;
    uint32_t period_ms;      // Chu kỳ hoặc deadline (ms)
    uint32_t last_run;       // Thời điểm chạy lần cuối (ms)
    bool ready;              // Đánh dấu đã đến thời điểm chạy
} TaskControlBlock;

TaskControlBlock tasks[2] = {
    {Sem_Task1Handle, 1000, 0, false}, // Task1: 1000
    {Sem_Task2Handle, 1500, 0, false}, // Task2: 1500
};
/* USER CODE END 4 */

/* USER CODE BEGIN Header_S_Task1_MPU9250 */
/**
  * @brief  Function implementing the Task1_MPU9250 thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task1_MPU9250 */
void S_Task1_MPU9250(void *argument)
{
  /* USER CODE BEGIN 5 */
//	uint32_t next_wake_time = osKernelGetTickCount();
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Sem_Task1Handle, osWaitForever);
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);

	printf("\nTask 1 in: %lu\n", HAL_GetTick());

	osSemaphoreRelease(Sem2_UARTHandle);

	MPU9250_Getdata();

	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);

	printf("Data MPU: ax: %.2f  ay: %.2f  az: %.2f\n", ax, ay, az);
	printf("gx: %.2f  gy: %.2f  gz: %.2f\n", gx, gy, gz);

	osSemaphoreRelease(Sem2_UARTHandle);

//	next_wake_time += tasks[0].period_ms;
//	osDelayUntil(next_wake_time);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_S_Task2_HCSR04 */
/**
* @brief Function implementing the Task2_HCSR04 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task2_HCSR04 */
void S_Task2_HCSR04(void *argument)
{
  /* USER CODE BEGIN S_Task2_HCSR04 */
//	uint32_t next_wake_time = osKernelGetTickCount();
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Sem_Task2Handle, osWaitForever);
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);

	printf("\nTask 2 in: %lu\n", HAL_GetTick());

	osSemaphoreRelease(Sem2_UARTHandle);

    HCSR04_Start();



//	next_wake_time += tasks[1].period_ms;
//	osDelayUntil(next_wake_time);
  }
  /* USER CODE END S_Task2_HCSR04 */
}

/* USER CODE BEGIN Header_S_Task3_UARTCMD */
/**
* @brief Function implementing the Task3_UARTCMD thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task3_UARTCMD */
void S_Task3_UARTCMD(void *argument)
{
  /* USER CODE BEGIN S_Task3_UARTCMD */
    int servo_angle = 0;
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Sem1_CMDHandle, osWaitForever);

	  if (strncmp(uart_buff, ">Servo", 6) == 0) {
	         char *ptr = uart_buff + 6;
	         while (*ptr == ' ') ptr++;
	         servo_angle = atoi(ptr);
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
	         printf("Control Servo angel: %d\n", servo_angle);
	         osSemaphoreRelease(Sem2_UARTHandle);
	         Servo_Write(&htim4, TIM_CHANNEL_4, servo_angle);
	     } else if(strncmp(uart_buff, ">T1", 3) == 0){
	         char *ptr = uart_buff + 3;
	         while (*ptr == ' ') ptr++;
	         tasks[0].period_ms = atoi(ptr);
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
	         printf("Change time cycle Task 1 to: %lu\n", tasks[0].period_ms);
	         osSemaphoreRelease(Sem2_UARTHandle);
	     }else if(strncmp(uart_buff, ">T2", 3) == 0){
	         char *ptr = uart_buff + 3;
	         while (*ptr == ' ') ptr++;
	         tasks[1].period_ms = atoi(ptr);
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
	         printf("Change time cycle Task 2 to: %lu\n", tasks[1].period_ms);
	         osSemaphoreRelease(Sem2_UARTHandle);
	     }else {
	    	 osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
	         printf("Wrong message!\n");
	         osSemaphoreRelease(Sem2_UARTHandle);
	     }

  }
  /* USER CODE END S_Task3_UARTCMD */
}

/* USER CODE BEGIN Header_S_Task4_TimeControl */
/**
* @brief Function implementing the Task4_TimeContr thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task4_TimeControl */
uint32_t now;
void S_Task4_TimeControl(void *argument)
{
  /* USER CODE BEGIN S_Task4_TimeControl */
  /* Infinite loop */
  for(;;)
  {
	now = osKernelGetTickCount();
    for (int i = 0; i < 2; i++) {
        if ((now - tasks[i].last_run) >= tasks[i].period_ms) {
            osSemaphoreRelease(tasks[i].sem);
            tasks[i].last_run = now;
        }
    }
    osDelay(500);
  }
  /* USER CODE END S_Task4_TimeControl */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM2 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
