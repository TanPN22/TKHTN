/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t flag_exti0 = 0;
uint8_t flag_exti1 = 0;

uint8_t font_number[10][15][2] = {
    {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {1,0}, {1,4}, {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}},
    {{2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}},
    {{0,0}, {0,1}, {0,2}, {0,4}, {1,0}, {1,2}, {1,4}, {2,0}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}, {0,0}},
    {{0,0}, {0,4}, {1,0}, {1,2}, {1,4}, {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}},
    {{0,0}, {0,1}, {0,2}, {1,2}, {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}},
    {{0,0}, {0,1}, {0,2}, {0,4}, {1,0}, {1,2}, {2,0}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}},
    {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {1,0}, {1,2}, {2,0}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}, {0,0}},
    {{0,0}, {0,1}, {1,2}, {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}},
    {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {1,0}, {1,2}, {1,4}, {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}},
    {{0,0}, {0,1}, {0,2}, {0,4}, {1,0}, {1,2}, {1,4}, {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {0,0}, {0,0}, {0,0}}
};

uint8_t matrix_buffer[7][5] = {0};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void MatrixSetPos(uint8_t x, uint8_t y, uint8_t Status);
void Draw_Digit(uint8_t digit, uint8_t col_offset);
void Display_Number(uint8_t tens, uint8_t units);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MatrixSetPos(uint8_t x, uint8_t y, uint8_t Status)
{
    HAL_GPIO_WritePin(GPIOA, ROW1_Pin << y, !Status);

    if (x >= 4) {
        HAL_GPIO_WritePin(GPIOB, COL5_Pin << (x - 4), Status);
    } else {
        HAL_GPIO_WritePin(GPIOA, COL1_Pin << x, Status);
    }
}

void Draw_Digit(uint8_t digit, uint8_t col_offset)
{
    for (uint8_t x = 0; x < 3; x++)
        for (uint8_t y = 0; y < 5; y++)
            matrix_buffer[x + col_offset][y] = 0;

    for (uint8_t i = 0; i < 15; i++)
    {
        uint8_t col = font_number[digit][i][0];
        uint8_t row = font_number[digit][i][1];
        if (col == 0 && row == 0 && i > 0) break;
        matrix_buffer[col + col_offset][row] = 1;
    }
}

void Display_Number(uint8_t tens, uint8_t units)
{
    Draw_Digit(tens, 0);
    Draw_Digit(units, 4);

    for (uint8_t i = 0; i < 50; i++)
    {
        for (uint8_t col = 0; col < 7; col++)
        {
            HAL_GPIO_WritePin(GPIOA, COL1_Pin | COL2_Pin | COL3_Pin | COL4_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOB, COL5_Pin | COL6_Pin | COL7_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOA, ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin | ROW5_Pin, GPIO_PIN_SET);

            for (uint8_t row = 0; row < 5; row++)
                if (matrix_buffer[col][row])
                    MatrixSetPos(col, row, 1);
            HAL_Delay(1);
        }
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  uint8_t count = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (flag_exti0)
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
        HAL_Delay(500);
        flag_exti0 = 0;
    }
    if (flag_exti1)
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
        HAL_Delay(500);
        flag_exti1 = 0;
    }

    uint8_t tens = count / 10;
    uint8_t units = count % 10;
    Display_Number(tens, units);

    count++;
    if (count > 99) count = 0;
    HAL_Delay(100);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|ROW1_Pin|ROW2_Pin
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL5_Pin|COL6_Pin|COL7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA3 ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin ROW5_Pin COL1_Pin COL2_Pin
                           COL3_Pin COL4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|ROW1_Pin|ROW2_Pin|ROW3_Pin
                          |ROW4_Pin|ROW5_Pin|COL1_Pin|COL2_Pin
                          |COL3_Pin|COL4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : COL5_Pin COL6_Pin COL7_Pin */
  GPIO_InitStruct.Pin = COL5_Pin|COL6_Pin|COL7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 14, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
