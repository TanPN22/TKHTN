
MCB20242_Hub_WSN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000985c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08009970  08009970  0000a970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fcc  08009fcc  0000b1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009fcc  08009fcc  0000afcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fd4  08009fd4  0000b1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd4  08009fd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fd8  08009fd8  0000afd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08009fdc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  200001ec  0800a1c8  0000b1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  0800a1c8  0000b620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c051  00000000  00000000  0000b215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b0  00000000  00000000  00017266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00019618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000933  00000000  00000000  0001a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000385c  00000000  00000000  0001ab63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000feea  00000000  00000000  0001e3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889a1  00000000  00000000  0002e2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000495c  00000000  00000000  000b6c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000bb5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08009954 	.word	0x08009954

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08009954 	.word	0x08009954

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b99e 	b.w	8000ebc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83c 	bl	8000c04 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460d      	mov	r5, r1
 8000ba2:	f7ff ff0b 	bl	80009bc <__aeabi_dcmplt>
 8000ba6:	b928      	cbnz	r0, 8000bb4 <__aeabi_d2lz+0x1c>
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4629      	mov	r1, r5
 8000bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb0:	f000 b80a 	b.w	8000bc8 <__aeabi_d2ulz>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bba:	f000 f805 	bl	8000bc8 <__aeabi_d2ulz>
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc4:	bd38      	pop	{r3, r4, r5, pc}
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2ulz>:
 8000bc8:	b5d0      	push	{r4, r6, r7, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <__aeabi_d2ulz+0x34>)
 8000bce:	4606      	mov	r6, r0
 8000bd0:	460f      	mov	r7, r1
 8000bd2:	f7ff fc81 	bl	80004d8 <__aeabi_dmul>
 8000bd6:	f7ff ff57 	bl	8000a88 <__aeabi_d2uiz>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	f7ff fc02 	bl	80003e4 <__aeabi_ui2d>
 8000be0:	2200      	movs	r2, #0
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <__aeabi_d2ulz+0x38>)
 8000be4:	f7ff fc78 	bl	80004d8 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4630      	mov	r0, r6
 8000bee:	4639      	mov	r1, r7
 8000bf0:	f7ff faba 	bl	8000168 <__aeabi_dsub>
 8000bf4:	f7ff ff48 	bl	8000a88 <__aeabi_d2uiz>
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfc:	3df00000 	.word	0x3df00000
 8000c00:	41f00000 	.word	0x41f00000

08000c04 <__udivmoddi4>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	9d08      	ldr	r5, [sp, #32]
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d14e      	bne.n	8000cae <__udivmoddi4+0xaa>
 8000c10:	4694      	mov	ip, r2
 8000c12:	458c      	cmp	ip, r1
 8000c14:	4686      	mov	lr, r0
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	d962      	bls.n	8000ce2 <__udivmoddi4+0xde>
 8000c1c:	b14a      	cbz	r2, 8000c32 <__udivmoddi4+0x2e>
 8000c1e:	f1c2 0320 	rsb	r3, r2, #32
 8000c22:	4091      	lsls	r1, r2
 8000c24:	fa20 f303 	lsr.w	r3, r0, r3
 8000c28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	fa1f f68c 	uxth.w	r6, ip
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb04 f106 	mul.w	r1, r4, r6
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x64>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5a:	f080 8110 	bcs.w	8000e7e <__udivmoddi4+0x27a>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 810d 	bls.w	8000e7e <__udivmoddi4+0x27a>
 8000c64:	3c02      	subs	r4, #2
 8000c66:	4463      	add	r3, ip
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x94>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	f080 80fa 	bcs.w	8000e82 <__udivmoddi4+0x27e>
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	f240 80f7 	bls.w	8000e82 <__udivmoddi4+0x27e>
 8000c94:	4463      	add	r3, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	2100      	movs	r1, #0
 8000c9a:	1b9b      	subs	r3, r3, r6
 8000c9c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa6>
 8000ca2:	40d3      	lsrs	r3, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xba>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb4>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa6>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x150>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xcc>
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	f0c0 80ee 	bcc.w	8000eac <__udivmoddi4+0x2a8>
 8000cd0:	1a86      	subs	r6, r0, r2
 8000cd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d0e6      	beq.n	8000caa <__udivmoddi4+0xa6>
 8000cdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce0:	e7e3      	b.n	8000caa <__udivmoddi4+0xa6>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	f040 808f 	bne.w	8000e06 <__udivmoddi4+0x202>
 8000ce8:	eba1 040c 	sub.w	r4, r1, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x11c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x11a>
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <__udivmoddi4+0x2b0>
 8000d1e:	4626      	mov	r6, r4
 8000d20:	1a1c      	subs	r4, r3, r0
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	429f      	cmp	r7, r3
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x148>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x146>
 8000d44:	429f      	cmp	r7, r3
 8000d46:	f200 80ae 	bhi.w	8000ea6 <__udivmoddi4+0x2a2>
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	1bdb      	subs	r3, r3, r7
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x9c>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa24 f607 	lsr.w	r6, r4, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	fb09 6618 	mls	r6, r9, r8, r6
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	408c      	lsls	r4, r1
 8000d7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	431c      	orrs	r4, r3
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d90a      	bls.n	8000daa <__udivmoddi4+0x1a6>
 8000d94:	eb1c 0303 	adds.w	r3, ip, r3
 8000d98:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d9c:	f080 8081 	bcs.w	8000ea2 <__udivmoddi4+0x29e>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	d97e      	bls.n	8000ea2 <__udivmoddi4+0x29e>
 8000da4:	f1a8 0802 	sub.w	r8, r8, #2
 8000da8:	4463      	add	r3, ip
 8000daa:	1a1e      	subs	r6, r3, r0
 8000dac:	fbb6 f3f9 	udiv	r3, r6, r9
 8000db0:	fb09 6613 	mls	r6, r9, r3, r6
 8000db4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x1d0>
 8000dc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dca:	d266      	bcs.n	8000e9a <__udivmoddi4+0x296>
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d964      	bls.n	8000e9a <__udivmoddi4+0x296>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	4464      	add	r4, ip
 8000dd4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dd8:	fba0 8302 	umull	r8, r3, r0, r2
 8000ddc:	eba4 040e 	sub.w	r4, r4, lr
 8000de0:	429c      	cmp	r4, r3
 8000de2:	46c6      	mov	lr, r8
 8000de4:	461e      	mov	r6, r3
 8000de6:	d350      	bcc.n	8000e8a <__udivmoddi4+0x286>
 8000de8:	d04d      	beq.n	8000e86 <__udivmoddi4+0x282>
 8000dea:	b155      	cbz	r5, 8000e02 <__udivmoddi4+0x1fe>
 8000dec:	ebba 030e 	subs.w	r3, sl, lr
 8000df0:	eb64 0406 	sbc.w	r4, r4, r6
 8000df4:	fa04 f707 	lsl.w	r7, r4, r7
 8000df8:	40cb      	lsrs	r3, r1
 8000dfa:	431f      	orrs	r7, r3
 8000dfc:	40cc      	lsrs	r4, r1
 8000dfe:	e9c5 7400 	strd	r7, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e751      	b.n	8000caa <__udivmoddi4+0xa6>
 8000e06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0a:	f1c2 0320 	rsb	r3, r2, #32
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e20:	fb08 1110 	mls	r1, r8, r0, r1
 8000e24:	4094      	lsls	r4, r2
 8000e26:	431c      	orrs	r4, r3
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x248>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29a>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29a>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e52:	fb08 3311 	mls	r3, r8, r1, r3
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x272>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x292>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x292>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f2      	b.n	8000c68 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e708      	b.n	8000c98 <__udivmoddi4+0x94>
 8000e86:	45c2      	cmp	sl, r8
 8000e88:	d2af      	bcs.n	8000dea <__udivmoddi4+0x1e6>
 8000e8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e8e:	eb63 060c 	sbc.w	r6, r3, ip
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a9      	b.n	8000dea <__udivmoddi4+0x1e6>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x272>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e79a      	b.n	8000dd4 <__udivmoddi4+0x1d0>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x248>
 8000ea2:	46b0      	mov	r8, r6
 8000ea4:	e781      	b.n	8000daa <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74f      	b.n	8000d4c <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e711      	b.n	8000cd8 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e732      	b.n	8000d20 <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6958      	ldr	r0, [r3, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	f001 fdf0 	bl	8002ad0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	f107 010f 	add.w	r1, r7, #15
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	2201      	movs	r2, #1
 8000f00:	f002 fdb1 	bl	8003a66 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f04:	bf00      	nop
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f9b0 	bl	8004272 <HAL_SPI_GetState>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d1f6      	bne.n	8000f06 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6998      	ldr	r0, [r3, #24]
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	2201      	movs	r2, #1
 8000f28:	f002 fee1 	bl	8003cee <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000f2c:	bf00      	nop
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 f99c 	bl	8004272 <HAL_SPI_GetState>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d1f6      	bne.n	8000f2e <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6958      	ldr	r0, [r3, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4619      	mov	r1, r3
 8000f52:	f001 fdbd 	bl	8002ad0 <HAL_GPIO_WritePin>
	return rxByte;
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6958      	ldr	r0, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f001 fda0 	bl	8002ad0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6998      	ldr	r0, [r3, #24]
 8000f96:	f107 010f 	add.w	r1, r7, #15
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f002 fd61 	bl	8003a66 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fa4:	bf00      	nop
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 f960 	bl	8004272 <HAL_SPI_GetState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1f6      	bne.n	8000fa6 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6998      	ldr	r0, [r3, #24]
 8000fbe:	1cb9      	adds	r1, r7, #2
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f002 fd4e 	bl	8003a66 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8000fca:	bf00      	nop
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f94d 	bl	8004272 <HAL_SPI_GetState>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d1f6      	bne.n	8000fcc <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6958      	ldr	r0, [r3, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f001 fd6e 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <lora_init>:



uint8_t lora_init(lora_t * module){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6858      	ldr	r0, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f001 fd5b 	bl	8002ad0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f001 faa2 	bl	8002564 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6858      	ldr	r0, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	f001 fd4d 	bl	8002ad0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f001 fa94 	bl	8002564 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 800103c:	2142      	movs	r1, #66	@ 0x42
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff3e 	bl	8000ec0 <lora_read_reg>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d001      	beq.n	8001052 <lora_init+0x56>
		return 1;
 800104e:	2301      	movs	r3, #1
 8001050:	e052      	b.n	80010f8 <lora_init+0xfc>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	2101      	movs	r1, #1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff82 	bl	8000f60 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <lora_init+0x104>)
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f95e 	bl	800132c <lora_set_frequency>
	lora_set_bandwidth(module, BANDWIDTH[module->bandwidth]);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	795b      	ldrb	r3, [r3, #5]
 8001074:	461a      	mov	r2, r3
 8001076:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <lora_init+0x108>)
 8001078:	5c9b      	ldrb	r3, [r3, r2]
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f99b 	bl	80013b8 <lora_set_bandwidth>
	lora_set_gain(module,module->powergain);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f9b7 	bl	80013fc <lora_set_gain>
	lora_set_spreading_factor(module, module->spreadingfactor);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	79db      	ldrb	r3, [r3, #7]
 8001092:	4619      	mov	r1, r3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f9d5 	bl	8001444 <lora_set_spreading_factor>
	lora_set_coding_rate(module, module->codingrate);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a1b      	ldrb	r3, [r3, #8]
 800109e:	4619      	mov	r1, r3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f9fb 	bl	800149c <lora_set_coding_rate>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210e      	movs	r1, #14
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff58 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	210f      	movs	r1, #15
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff53 	bl	8000f60 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 80010ba:	210c      	movs	r1, #12
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff feff 	bl	8000ec0 <lora_read_reg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f043 0303 	orr.w	r3, r3, #3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	210c      	movs	r1, #12
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff44 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 80010d8:	2204      	movs	r2, #4
 80010da:	2126      	movs	r1, #38	@ 0x26
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff3f 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 80010e2:	228f      	movs	r2, #143	@ 0x8f
 80010e4:	2109      	movs	r1, #9
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff3a 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 80010ec:	2281      	movs	r2, #129	@ 0x81
 80010ee:	2101      	movs	r1, #1
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff35 	bl	8000f60 <lora_write_reg>
	return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08009b18 	.word	0x08009b18
 8001104:	08009b38 	.word	0x08009b38

08001108 <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 8001114:	2112      	movs	r1, #18
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fed2 	bl	8000ec0 <lora_read_reg>
 800111c:	4603      	mov	r3, r0
 800111e:	60bb      	str	r3, [r7, #8]
//	lora_read_reg(module, REG_MODEM_CONFIG_1);
//	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	2112      	movs	r1, #18
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff19 	bl	8000f60 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01d      	beq.n	8001174 <lora_prasePacket+0x6c>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <lora_prasePacket+0x6c>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 8001142:	2113      	movs	r1, #19
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff febb 	bl	8000ec0 <lora_read_reg>
 800114a:	4603      	mov	r3, r0
 800114c:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 800114e:	2110      	movs	r1, #16
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff feb5 	bl	8000ec0 <lora_read_reg>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	210d      	movs	r1, #13
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff feff 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8001162:	2281      	movs	r2, #129	@ 0x81
 8001164:	2101      	movs	r1, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fefa 	bl	8000f60 <lora_write_reg>
		packetIndex = 0;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <lora_prasePacket+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e010      	b.n	8001196 <lora_prasePacket+0x8e>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001174:	2101      	movs	r1, #1
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fea2 	bl	8000ec0 <lora_read_reg>
 800117c:	4603      	mov	r3, r0
 800117e:	2b86      	cmp	r3, #134	@ 0x86
 8001180:	d009      	beq.n	8001196 <lora_prasePacket+0x8e>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210d      	movs	r1, #13
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff feea 	bl	8000f60 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800118c:	2286      	movs	r2, #134	@ 0x86
 800118e:	2101      	movs	r1, #1
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fee5 	bl	8000f60 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <lora_prasePacket+0x9e>
		return -1;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	e000      	b.n	80011a8 <lora_prasePacket+0xa0>
	}
	return packetLength;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000208 	.word	0x20000208

080011b4 <lora_available>:

uint8_t lora_available(lora_t * module){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 80011bc:	2113      	movs	r1, #19
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fe7e 	bl	8000ec0 <lora_read_reg>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <lora_available+0x24>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000208 	.word	0x20000208

080011dc <lora_read>:

uint8_t lora_read(lora_t * module){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffe5 	bl	80011b4 <lora_available>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <lora_read+0x18>
		return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e00a      	b.n	800120a <lora_read+0x2e>
	packetIndex++;
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <lora_read+0x38>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <lora_read+0x38>)
 80011fe:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fe5c 	bl	8000ec0 <lora_read_reg>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000208 	.word	0x20000208

08001218 <lora_begin_packet>:

uint8_t lora_begin_packet(lora_t * module){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	//int ret;
	if ((lora_read_reg(module, REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8001220:	2101      	movs	r1, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fe4c 	bl	8000ec0 <lora_read_reg>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d101      	bne.n	8001236 <lora_begin_packet+0x1e>
    return 1;
 8001232:	2301      	movs	r3, #1
 8001234:	e014      	b.n	8001260 <lora_begin_packet+0x48>
  }
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001236:	2281      	movs	r2, #129	@ 0x81
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe90 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 8001240:	2272      	movs	r2, #114	@ 0x72
 8001242:	211d      	movs	r1, #29
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe8b 	bl	8000f60 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	210d      	movs	r1, #13
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe86 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module, REG_PAYLOAD_LENGTH, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2122      	movs	r1, #34	@ 0x22
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fe81 	bl	8000f60 <lora_write_reg>
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <lora_tx>:

void lora_tx(lora_t * module, uint8_t * buf, uint8_t size){
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	71fb      	strb	r3, [r7, #7]
	int currentLength = lora_read_reg(module, REG_PAYLOAD_LENGTH);
 8001276:	2122      	movs	r1, #34	@ 0x22
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff fe21 	bl	8000ec0 <lora_read_reg>
 800127e:	4603      	mov	r3, r0
 8001280:	613b      	str	r3, [r7, #16]
  if ((currentLength + size > MAX_PKT_LENGTH)){
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4413      	add	r3, r2
 8001288:	2bff      	cmp	r3, #255	@ 0xff
 800128a:	dd03      	ble.n	8001294 <lora_tx+0x2c>
    size = MAX_PKT_LENGTH - currentLength;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	71fb      	strb	r3, [r7, #7]
  }

  for (int i = 0; i < size; i++) {
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00b      	b.n	80012b2 <lora_tx+0x4a>
    lora_write_reg(module, REG_FIFO, buf[i]);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fe5a 	bl	8000f60 <lora_write_reg>
  for (int i = 0; i < size; i++) {
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbef      	blt.n	800129a <lora_tx+0x32>
  }
  lora_write_reg(module, REG_PAYLOAD_LENGTH, currentLength + size);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	2122      	movs	r1, #34	@ 0x22
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff fe49 	bl	8000f60 <lora_write_reg>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <lora_end_packet>:

uint8_t lora_end_packet(lora_t * module){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 80012de:	2364      	movs	r3, #100	@ 0x64
 80012e0:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80012e2:	2283      	movs	r2, #131	@ 0x83
 80012e4:	2101      	movs	r1, #1
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fe3a 	bl	8000f60 <lora_write_reg>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80012ec:	e00a      	b.n	8001304 <lora_end_packet+0x2e>
		if(--timeout==0){
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d104      	bne.n	8001304 <lora_end_packet+0x2e>
			HAL_Delay(1);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f001 f932 	bl	8002564 <HAL_Delay>
			return 1;
 8001300:	2301      	movs	r3, #1
 8001302:	e00e      	b.n	8001322 <lora_end_packet+0x4c>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001304:	2112      	movs	r1, #18
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fdda 	bl	8000ec0 <lora_read_reg>
 800130c:	4603      	mov	r3, r0
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0eb      	beq.n	80012ee <lora_end_packet+0x18>
		}
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001316:	2208      	movs	r2, #8
 8001318:	2112      	movs	r1, #18
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe20 	bl	8000f60 <lora_write_reg>
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <lora_set_frequency>:

void lora_set_frequency(lora_t * module, uint64_t freq){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8001338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133c:	f04f 0000 	mov.w	r0, #0
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	04d9      	lsls	r1, r3, #19
 8001346:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800134a:	04d0      	lsls	r0, r2, #19
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <lora_set_frequency+0x88>)
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	f7ff fc09 	bl	8000b68 <__aeabi_uldivmod>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 800135e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	0c02      	lsrs	r2, r0, #16
 800136c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001370:	0c0b      	lsrs	r3, r1, #16
 8001372:	b2d3      	uxtb	r3, r2
 8001374:	461a      	mov	r2, r3
 8001376:	2106      	movs	r1, #6
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fdf1 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 800137e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	0a02      	lsrs	r2, r0, #8
 800138c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001390:	0a0b      	lsrs	r3, r1, #8
 8001392:	b2d3      	uxtb	r3, r2
 8001394:	461a      	mov	r2, r3
 8001396:	2107      	movs	r1, #7
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fde1 	bl	8000f60 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800139e:	7c3b      	ldrb	r3, [r7, #16]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2108      	movs	r1, #8
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff fddb 	bl	8000f60 <lora_write_reg>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	01e84800 	.word	0x01e84800

080013b8 <lora_set_bandwidth>:
void lora_set_bandwidth(lora_t * module, uint8_t bandwidth){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
	uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 80013c4:	211d      	movs	r1, #29
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fd7a 	bl	8000ec0 <lora_read_reg>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
	modem_config_1 &= 0x0F;                // Xóa các bit 7-4
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	73fb      	strb	r3, [r7, #15]
	modem_config_1 |= (bandwidth << 4);    // Thiết lập bandwidth
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	461a      	mov	r2, r3
 80013ec:	211d      	movs	r1, #29
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fdb6 	bl	8000f60 <lora_write_reg>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <lora_set_gain>:
void lora_set_gain(lora_t * module, uint8_t power_gain){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
    // Đọc giá trị hiện tại của thanh ghi REG_PA_CONFIG
    uint8_t pa_config = lora_read_reg(module, REG_PA_CONFIG);
 8001408:	2109      	movs	r1, #9
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fd58 	bl	8000ec0 <lora_read_reg>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit liên quan đến công suất phát (bit 0-3)
    pa_config &= 0xF0;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	73fb      	strb	r3, [r7, #15]
    // Gán giá trị power_gain trực tiếp vào các bit 0-3
    pa_config |= (power_gain & 0x0F);  // Chỉ lấy phần liên quan đến các bit 0-3
 800141c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	b25a      	sxtb	r2, r3
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị mới vào thanh ghi REG_PA_CONFIG
    lora_write_reg(module, REG_PA_CONFIG, pa_config);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	461a      	mov	r2, r3
 8001434:	2109      	movs	r1, #9
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fd92 	bl	8000f60 <lora_write_reg>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <lora_set_spreading_factor>:
void lora_set_spreading_factor(lora_t *module, uint8_t spreading_factor) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị spreading factor có hợp lệ không
    if (spreading_factor < SF_7) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b06      	cmp	r3, #6
 8001454:	d801      	bhi.n	800145a <lora_set_spreading_factor+0x16>
        // Nếu SF < 7 thì set = 7
    	spreading_factor =7;
 8001456:	2307      	movs	r3, #7
 8001458:	70fb      	strb	r3, [r7, #3]
    }
    if (spreading_factor > SF_12) {
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d901      	bls.n	8001464 <lora_set_spreading_factor+0x20>
        // Nếu SF > 7 thì set = 12
    	spreading_factor =12;
 8001460:	230c      	movs	r3, #12
 8001462:	70fb      	strb	r3, [r7, #3]
        }
    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_2
    uint8_t modem_config_2 = lora_read_reg(module, REG_MODEM_CONFIG_2);
 8001464:	211e      	movs	r1, #30
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fd2a 	bl	8000ec0 <lora_read_reg>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
    // Xóa các bit 7-4 (liên quan đến SF) để chuẩn bị ghi giá trị mới
    modem_config_2 &= 0x0F;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	73fb      	strb	r3, [r7, #15]
    // Thiết lập giá trị spreading factor mới
    modem_config_2 |= (spreading_factor << 4);
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	b25a      	sxtb	r2, r3
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
    // Ghi lại giá trị vào REG_MODEM_CONFIG_2
    lora_write_reg(module, REG_MODEM_CONFIG_2, modem_config_2);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	461a      	mov	r2, r3
 800148c:	211e      	movs	r1, #30
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fd66 	bl	8000f60 <lora_write_reg>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <lora_set_coding_rate>:
void lora_set_coding_rate(lora_t *module, uint8_t coding_rate) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
    // Kiểm tra giá trị coding rate < 1 thì set = 1
    if (coding_rate < CR_4_5) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <lora_set_coding_rate+0x16>
        coding_rate =1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	70fb      	strb	r3, [r7, #3]
    }
    // Kiểm tra giá trị coding rate > 1 thì set = 4
       if (coding_rate > CR_4_8) {
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d901      	bls.n	80014bc <lora_set_coding_rate+0x20>
           coding_rate = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	70fb      	strb	r3, [r7, #3]
       }
    HAL_Delay(1); // Thêm độ trễ để ổn định trước khi thực hiện bất kỳ tác vụ nào
 80014bc:	2001      	movs	r0, #1
 80014be:	f001 f851 	bl	8002564 <HAL_Delay>

    // Đọc giá trị hiện tại từ thanh ghi REG_MODEM_CONFIG_1
    uint8_t modem_config_1 = lora_read_reg(module, REG_MODEM_CONFIG_1);
 80014c2:	211d      	movs	r1, #29
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fcfb 	bl	8000ec0 <lora_read_reg>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi để đảm bảo đọc hoàn tất
 80014ce:	2001      	movs	r0, #1
 80014d0:	f001 f848 	bl	8002564 <HAL_Delay>

    // Xóa các bit 3-1 (liên quan đến CR) để chuẩn bị ghi giá trị mới
    modem_config_1 &= 0xF1;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	f023 030e 	bic.w	r3, r3, #14
 80014da:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi cập nhật giá trị trong bộ nhớ tạm
 80014dc:	2001      	movs	r0, #1
 80014de:	f001 f841 	bl	8002564 <HAL_Delay>

    // Thiết lập giá trị coding rate mới (CR nằm ở bit 3-1)
    modem_config_1 |= (coding_rate << 1);
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1); // Đợi sau khi chuẩn bị giá trị mới
 80014f2:	2001      	movs	r0, #1
 80014f4:	f001 f836 	bl	8002564 <HAL_Delay>

    // Ghi lại giá trị vào REG_MODEM_CONFIG_1
    lora_write_reg(module, REG_MODEM_CONFIG_1, modem_config_1);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	461a      	mov	r2, r3
 80014fc:	211d      	movs	r1, #29
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fd2e 	bl	8000f60 <lora_write_reg>
    HAL_Delay(1); // Đợi để đảm bảo quá trình ghi vào thanh ghi hoàn tất
 8001504:	2001      	movs	r0, #1
 8001506:	f001 f82d 	bl	8002564 <HAL_Delay>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <_write>:

UART_HandleTypeDef huart3;


/* USER CODE BEGIN PV */
int _write(int fd, char * ptr, int len) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart3, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	b29a      	uxth	r2, r3
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <_write+0x28>)
 800152c:	f003 f809 	bl	8004542 <HAL_UART_Transmit>
  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000278 	.word	0x20000278

08001540 <lora_Init>:
char data_receive[80];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lora_Init(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	//cấu hình lora
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <lora_Init+0x70>)
 8001546:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <lora_Init+0x74>)
 8001548:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <lora_Init+0x70>)
 800154c:	2201      	movs	r2, #1
 800154e:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;				// NSS pin to which port is connected
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <lora_Init+0x70>)
 8001552:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <lora_Init+0x78>)
 8001554:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;					// NSS pin to which pin is connected
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <lora_Init+0x70>)
 8001558:	2210      	movs	r2, #16
 800155a:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;			// RESET pin to which port is connected
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <lora_Init+0x70>)
 800155e:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <lora_Init+0x74>)
 8001560:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;			// RESET pin to which pin is connected
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <lora_Init+0x70>)
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <lora_Init+0x70>)
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <lora_Init+0x7c>)
 800156c:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <lora_Init+0x80>)
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <lora_Init+0x70>)
 8001572:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;								// 433MHZ Frequency
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <lora_Init+0x80>)
 8001576:	2200      	movs	r2, #0
 8001578:	711a      	strb	r2, [r3, #4]
	//lora.frequency = FREQ_865MHZ;								// 865MHZ Frequency
	//lora.frequency = FREQ_866MHZ;								// 866MHZ Frequency
	//lora.frequency = FREQ_867MHZ;								// 867MHZ Frequency
	lora.bandwidth = BW_125KHz;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <lora_Init+0x80>)
 800157c:	2207      	movs	r2, #7
 800157e:	715a      	strb	r2, [r3, #5]
	lora.powergain = POWER_20db;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <lora_Init+0x80>)
 8001582:	22ff      	movs	r2, #255	@ 0xff
 8001584:	719a      	strb	r2, [r3, #6]
	lora.spreadingfactor = SF_7;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <lora_Init+0x80>)
 8001588:	2207      	movs	r2, #7
 800158a:	71da      	strb	r2, [r3, #7]
	lora.codingrate = CR_4_5;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <lora_Init+0x80>)
 800158e:	2201      	movs	r2, #1
 8001590:	721a      	strb	r2, [r3, #8]


	while(lora_init(&lora)){										// Initialize the lora module
 8001592:	e003      	b.n	800159c <lora_Init+0x5c>
		HAL_Delay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f000 ffe4 	bl	8002564 <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <lora_Init+0x80>)
 800159e:	f7ff fd2d 	bl	8000ffc <lora_init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f5      	bne.n	8001594 <lora_Init+0x54>
	}

}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002c0 	.word	0x200002c0
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40010800 	.word	0x40010800
 80015bc:	20000220 	.word	0x20000220
 80015c0:	200002dc 	.word	0x200002dc

080015c4 <send_broadcast>:

char dataBroadcast[] = "RG0P";
void send_broadcast(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	lora_begin_packet(&lora);
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <send_broadcast+0x28>)
 80015ca:	f7ff fe25 	bl	8001218 <lora_begin_packet>
	lora_tx(&lora, (uint8_t*)dataBroadcast, strlen(dataBroadcast));
 80015ce:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <send_broadcast+0x2c>)
 80015d0:	f7fe fdbe 	bl	8000150 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4905      	ldr	r1, [pc, #20]	@ (80015f0 <send_broadcast+0x2c>)
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <send_broadcast+0x28>)
 80015de:	f7ff fe43 	bl	8001268 <lora_tx>
	lora_end_packet(&lora);
 80015e2:	4802      	ldr	r0, [pc, #8]	@ (80015ec <send_broadcast+0x28>)
 80015e4:	f7ff fe77 	bl	80012d6 <lora_end_packet>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002dc 	.word	0x200002dc
 80015f0:	20000010 	.word	0x20000010

080015f4 <send_stt>:
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
    lora_end_packet(&lora);
    printf("Send ACK to %d\r\n", node_id);
}

void send_stt(uint8_t node_id) {
 80015f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f8:	b09b      	sub	sp, #108	@ 0x6c
 80015fa:	af08      	add	r7, sp, #32
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
    char buf[64];
    sprintf(buf, "%d %d %.1f %.1f %.1f %.1f", node_id, nodeCount, T_min, T_max, H_min, H_max);
 8001600:	79fe      	ldrb	r6, [r7, #7]
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <send_stt+0xa8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <send_stt+0xac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff0b 	bl	8000428 <__aeabi_f2d>
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <send_stt+0xb0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff04 	bl	8000428 <__aeabi_f2d>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <send_stt+0xb4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fefd 	bl	8000428 <__aeabi_f2d>
 800162e:	4682      	mov	sl, r0
 8001630:	468b      	mov	fp, r1
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <send_stt+0xb8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fef6 	bl	8000428 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	f107 0008 	add.w	r0, r7, #8
 8001644:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001648:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800164c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001650:	e9cd 4500 	strd	r4, r5, [sp]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4632      	mov	r2, r6
 8001658:	4915      	ldr	r1, [pc, #84]	@ (80016b0 <send_stt+0xbc>)
 800165a:	f004 f919 	bl	8005890 <siprintf>
    lora_begin_packet(&lora);
 800165e:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <send_stt+0xc0>)
 8001660:	f7ff fdda 	bl	8001218 <lora_begin_packet>
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fd71 	bl	8000150 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	b2da      	uxtb	r2, r3
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4619      	mov	r1, r3
 8001678:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <send_stt+0xc0>)
 800167a:	f7ff fdf5 	bl	8001268 <lora_tx>
    lora_end_packet(&lora);
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <send_stt+0xc0>)
 8001680:	f7ff fe29 	bl	80012d6 <lora_end_packet>
    printf("Send STT to %d: %s\r\n", node_id, buf);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	4619      	mov	r1, r3
 800168c:	480a      	ldr	r0, [pc, #40]	@ (80016b8 <send_stt+0xc4>)
 800168e:	f004 f85b 	bl	8005748 <iprintf>
}
 8001692:	bf00      	nop
 8001694:	374c      	adds	r7, #76	@ 0x4c
 8001696:	46bd      	mov	sp, r7
 8001698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800169c:	200002e8 	.word	0x200002e8
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000008 	.word	0x20000008
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	0800998c 	.word	0x0800998c
 80016b4:	200002dc 	.word	0x200002dc
 80016b8:	080099a8 	.word	0x080099a8

080016bc <send_ok>:

void send_ok(uint8_t node_id) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    char buf[16];
    sprintf(buf, "%d Ok", node_id);
 80016c6:	79fa      	ldrb	r2, [r7, #7]
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	490f      	ldr	r1, [pc, #60]	@ (800170c <send_ok+0x50>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f8de 	bl	8005890 <siprintf>
    lora_begin_packet(&lora);
 80016d4:	480e      	ldr	r0, [pc, #56]	@ (8001710 <send_ok+0x54>)
 80016d6:	f7ff fd9f 	bl	8001218 <lora_begin_packet>
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd36 	bl	8000150 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <send_ok+0x54>)
 80016f0:	f7ff fdba 	bl	8001268 <lora_tx>
    lora_end_packet(&lora);
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <send_ok+0x54>)
 80016f6:	f7ff fdee 	bl	80012d6 <lora_end_packet>
    printf("Send Ok to %d\r\n", node_id);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <send_ok+0x58>)
 8001700:	f004 f822 	bl	8005748 <iprintf>
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	080099c0 	.word	0x080099c0
 8001710:	200002dc 	.word	0x200002dc
 8001714:	080099c8 	.word	0x080099c8

08001718 <send_request>:

void send_request(uint8_t node_id) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
    char buf[16];
    sprintf(buf, "%d R", node_id);
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	490f      	ldr	r1, [pc, #60]	@ (8001768 <send_request+0x50>)
 800172a:	4618      	mov	r0, r3
 800172c:	f004 f8b0 	bl	8005890 <siprintf>
    lora_begin_packet(&lora);
 8001730:	480e      	ldr	r0, [pc, #56]	@ (800176c <send_request+0x54>)
 8001732:	f7ff fd71 	bl	8001218 <lora_begin_packet>
    lora_tx(&lora, (uint8_t*)buf, strlen(buf));
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fd08 	bl	8000150 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	b2da      	uxtb	r2, r3
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	4808      	ldr	r0, [pc, #32]	@ (800176c <send_request+0x54>)
 800174c:	f7ff fd8c 	bl	8001268 <lora_tx>
    lora_end_packet(&lora);
 8001750:	4806      	ldr	r0, [pc, #24]	@ (800176c <send_request+0x54>)
 8001752:	f7ff fdc0 	bl	80012d6 <lora_end_packet>

    printf("Send Request to %d\r\n", node_id);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4619      	mov	r1, r3
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <send_request+0x58>)
 800175c:	f003 fff4 	bl	8005748 <iprintf>
}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	080099d8 	.word	0x080099d8
 800176c:	200002dc 	.word	0x200002dc
 8001770:	080099e0 	.word	0x080099e0

08001774 <search_Node>:

int search_Node(){
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	b09b      	sub	sp, #108	@ 0x6c
 8001778:	af02      	add	r7, sp, #8
	send_broadcast();
 800177a:	f7ff ff23 	bl	80015c4 <send_broadcast>
	char buf[60];
	uint32_t timeStart = HAL_GetTick();
 800177e:	f000 fee7 	bl	8002550 <HAL_GetTick>
 8001782:	6538      	str	r0, [r7, #80]	@ 0x50
	while (HAL_GetTick() - timeStart <= SEARCH_NODE_TIMEOUT){
 8001784:	e0bf      	b.n	8001906 <search_Node+0x192>

		uint8_t ret = lora_prasePacket(&lora);
 8001786:	4867      	ldr	r0, [pc, #412]	@ (8001924 <search_Node+0x1b0>)
 8001788:	f7ff fcbe 	bl	8001108 <lora_prasePacket>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		uint8_t i = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (ret) {
 8001798:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80b2 	beq.w	8001906 <search_Node+0x192>
		i = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		while (lora_available(&lora) && i < sizeof(buf) - 1) {
 80017a8:	e00f      	b.n	80017ca <search_Node+0x56>
			buf[i++] = lora_read(&lora);
 80017aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	f887 205f 	strb.w	r2, [r7, #95]	@ 0x5f
 80017b4:	461c      	mov	r4, r3
 80017b6:	485b      	ldr	r0, [pc, #364]	@ (8001924 <search_Node+0x1b0>)
 80017b8:	f7ff fd10 	bl	80011dc <lora_read>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80017c4:	443b      	add	r3, r7
 80017c6:	f803 2c50 	strb.w	r2, [r3, #-80]
		while (lora_available(&lora) && i < sizeof(buf) - 1) {
 80017ca:	4856      	ldr	r0, [pc, #344]	@ (8001924 <search_Node+0x1b0>)
 80017cc:	f7ff fcf2 	bl	80011b4 <lora_available>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <search_Node+0x6a>
 80017d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017da:	2b3a      	cmp	r3, #58	@ 0x3a
 80017dc:	d9e5      	bls.n	80017aa <search_Node+0x36>
		}
		buf[i] = '\0';
 80017de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017e2:	3360      	adds	r3, #96	@ 0x60
 80017e4:	443b      	add	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	f803 2c50 	strb.w	r2, [r3, #-80]

		if (strncmp(buf, "RG", 2) == 0) {
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2202      	movs	r2, #2
 80017f2:	494d      	ldr	r1, [pc, #308]	@ (8001928 <search_Node+0x1b4>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 f986 	bl	8005b06 <strncmp>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 8082 	bne.w	8001906 <search_Node+0x192>
            int node_id;
            float lat, lon;
			sscanf(buf + 3, "%d %f %f", &node_id, &lat, &lon);
 8001802:	f107 0010 	add.w	r0, r7, #16
 8001806:	3003      	adds	r0, #3
 8001808:	f107 0108 	add.w	r1, r7, #8
 800180c:	f107 020c 	add.w	r2, r7, #12
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	460b      	mov	r3, r1
 8001816:	4945      	ldr	r1, [pc, #276]	@ (800192c <search_Node+0x1b8>)
 8001818:	f004 f85a 	bl	80058d0 <siscanf>
//			send_ack(node_id);
			// Thêm node vào danh sách nếu chưa có
			int exists = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	65bb      	str	r3, [r7, #88]	@ 0x58
			for (int i = 0; i < nodeCount; i++) {
 8001820:	2300      	movs	r3, #0
 8001822:	657b      	str	r3, [r7, #84]	@ 0x54
 8001824:	e011      	b.n	800184a <search_Node+0xd6>
				if (nodes[i].id == node_id) {
 8001826:	4942      	ldr	r1, [pc, #264]	@ (8001930 <search_Node+0x1bc>)
 8001828:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	429a      	cmp	r2, r3
 800183c:	d102      	bne.n	8001844 <search_Node+0xd0>
					exists = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	65bb      	str	r3, [r7, #88]	@ 0x58
					break;
 8001842:	e007      	b.n	8001854 <search_Node+0xe0>
			for (int i = 0; i < nodeCount; i++) {
 8001844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001846:	3301      	adds	r3, #1
 8001848:	657b      	str	r3, [r7, #84]	@ 0x54
 800184a:	4b3a      	ldr	r3, [pc, #232]	@ (8001934 <search_Node+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001850:	429a      	cmp	r2, r3
 8001852:	dbe8      	blt.n	8001826 <search_Node+0xb2>
				}
			}
			if (!exists && nodeCount < MAX_NODES) {
 8001854:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001856:	2b00      	cmp	r3, #0
 8001858:	d12a      	bne.n	80018b0 <search_Node+0x13c>
 800185a:	4b36      	ldr	r3, [pc, #216]	@ (8001934 <search_Node+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b13      	cmp	r3, #19
 8001860:	dc26      	bgt.n	80018b0 <search_Node+0x13c>
				nodes[nodeCount].id = node_id;
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <search_Node+0x1c0>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	b2c8      	uxtb	r0, r1
 800186a:	4931      	ldr	r1, [pc, #196]	@ (8001930 <search_Node+0x1bc>)
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	4602      	mov	r2, r0
 8001878:	701a      	strb	r2, [r3, #0]
				nodes[nodeCount].latitude = lat;
 800187a:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <search_Node+0x1c0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	482b      	ldr	r0, [pc, #172]	@ (8001930 <search_Node+0x1bc>)
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4403      	add	r3, r0
 800188c:	3304      	adds	r3, #4
 800188e:	6019      	str	r1, [r3, #0]
				nodes[nodeCount].longitude = lon;
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <search_Node+0x1c0>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4826      	ldr	r0, [pc, #152]	@ (8001930 <search_Node+0x1bc>)
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4403      	add	r3, r0
 80018a2:	3308      	adds	r3, #8
 80018a4:	6019      	str	r1, [r3, #0]
				nodeCount++;
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <search_Node+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a21      	ldr	r2, [pc, #132]	@ (8001934 <search_Node+0x1c0>)
 80018ae:	6013      	str	r3, [r2, #0]
			}

			HAL_Delay(100);
 80018b0:	2064      	movs	r0, #100	@ 0x64
 80018b2:	f000 fe57 	bl	8002564 <HAL_Delay>

			send_stt(node_id);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe9a 	bl	80015f4 <send_stt>


			printf("Node register: %s\r\n", buf);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	481c      	ldr	r0, [pc, #112]	@ (8001938 <search_Node+0x1c4>)
 80018c8:	f003 ff3e 	bl	8005748 <iprintf>
			printf("Node ID: %d, x: %f, y: %f\n", node_id, lat, lon);
 80018cc:	68fe      	ldr	r6, [r7, #12]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fda9 	bl	8000428 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fda3 	bl	8000428 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9cd 2300 	strd	r2, r3, [sp]
 80018ea:	4622      	mov	r2, r4
 80018ec:	462b      	mov	r3, r5
 80018ee:	4631      	mov	r1, r6
 80018f0:	4812      	ldr	r0, [pc, #72]	@ (800193c <search_Node+0x1c8>)
 80018f2:	f003 ff29 	bl	8005748 <iprintf>

			sprintf(data_receive, buf);
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4619      	mov	r1, r3
 80018fc:	4810      	ldr	r0, [pc, #64]	@ (8001940 <search_Node+0x1cc>)
 80018fe:	f003 ffc7 	bl	8005890 <siprintf>
			return 1;
 8001902:	2301      	movs	r3, #1
 8001904:	e009      	b.n	800191a <search_Node+0x1a6>
	while (HAL_GetTick() - timeStart <= SEARCH_NODE_TIMEOUT){
 8001906:	f000 fe23 	bl	8002550 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001914:	f67f af37 	bls.w	8001786 <search_Node+0x12>
			}
		}
	}
	return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3764      	adds	r7, #100	@ 0x64
 800191e:	46bd      	mov	sp, r7
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001922:	bf00      	nop
 8001924:	200002dc 	.word	0x200002dc
 8001928:	080099f8 	.word	0x080099f8
 800192c:	080099fc 	.word	0x080099fc
 8001930:	200002ec 	.word	0x200002ec
 8001934:	200002e8 	.word	0x200002e8
 8001938:	08009a08 	.word	0x08009a08
 800193c:	08009a1c 	.word	0x08009a1c
 8001940:	2000047c 	.word	0x2000047c

08001944 <receive_data>:
	lora_begin_packet(&lora);
	lora_tx(&lora, (uint8_t *)data, strlen(data));
	lora_end_packet(&lora);
}

int receive_data(uint8_t *node_id, float *t, float *h, uint8_t nodeid_i) {
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b099      	sub	sp, #100	@ 0x64
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[60];
//    uint8_t ret = lora_prasePacket(&lora);
	uint8_t ret =0;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	uint32_t timeStart = HAL_GetTick();
 8001958:	f000 fdfa 	bl	8002550 <HAL_GetTick>
 800195c:	6538      	str	r0, [r7, #80]	@ 0x50

	uint8_t retryNum = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	while(!ret){
 8001964:	e05c      	b.n	8001a20 <receive_data+0xdc>
	  ret = lora_prasePacket(&lora);
 8001966:	4833      	ldr	r0, [pc, #204]	@ (8001a34 <receive_data+0xf0>)
 8001968:	f7ff fbce 	bl	8001108 <lora_prasePacket>
 800196c:	4603      	mov	r3, r0
 800196e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  if(ret){
 8001972:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001976:	2b00      	cmp	r3, #0
 8001978:	d035      	beq.n	80019e6 <receive_data+0xa2>
	   //Nhận gói tin
	   uint8_t i = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	   memset(buf, 0, sizeof(buf));
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	223c      	movs	r2, #60	@ 0x3c
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f004 f8a5 	bl	8005ad8 <memset>

	   retryNum = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	    while (lora_available(&lora)) {
 8001994:	e00f      	b.n	80019b6 <receive_data+0x72>
	    	buf[i++] = lora_read(&lora);
 8001996:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	f887 204e 	strb.w	r2, [r7, #78]	@ 0x4e
 80019a0:	461c      	mov	r4, r3
 80019a2:	4824      	ldr	r0, [pc, #144]	@ (8001a34 <receive_data+0xf0>)
 80019a4:	f7ff fc1a 	bl	80011dc <lora_read>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 80019b0:	443b      	add	r3, r7
 80019b2:	f803 2c48 	strb.w	r2, [r3, #-72]
	    while (lora_available(&lora)) {
 80019b6:	481f      	ldr	r0, [pc, #124]	@ (8001a34 <receive_data+0xf0>)
 80019b8:	f7ff fbfc 	bl	80011b4 <lora_available>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1e9      	bne.n	8001996 <receive_data+0x52>
	   }
	    buf[i] = '\0'; // Kết thúc chuỗi
 80019c2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80019c6:	3358      	adds	r3, #88	@ 0x58
 80019c8:	443b      	add	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	f803 2c48 	strb.w	r2, [r3, #-72]

	    sscanf(buf, "%d %f %f", node_id, t, h);
 80019d0:	f107 0010 	add.w	r0, r7, #16
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	@ (8001a38 <receive_data+0xf4>)
 80019de:	f003 ff77 	bl	80058d0 <siscanf>

	    return 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e021      	b.n	8001a2a <receive_data+0xe6>
	  }


	if (HAL_GetTick() - timeStart >= 1000){
 80019e6:	f000 fdb3 	bl	8002550 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019f4:	d30b      	bcc.n	8001a0e <receive_data+0xca>
		retryNum += 1;
 80019f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019fa:	3301      	adds	r3, #1
 80019fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		send_request(nodeid_i);
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe88 	bl	8001718 <send_request>
		timeStart = HAL_GetTick();
 8001a08:	f000 fda2 	bl	8002550 <HAL_GetTick>
 8001a0c:	6538      	str	r0, [r7, #80]	@ 0x50
	}
	if (retryNum >=4){
 8001a0e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d904      	bls.n	8001a20 <receive_data+0xdc>
		retryNum = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		return 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e004      	b.n	8001a2a <receive_data+0xe6>
	while(!ret){
 8001a20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d09e      	beq.n	8001966 <receive_data+0x22>
	}
	}
    return 0;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	375c      	adds	r7, #92	@ 0x5c
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002dc 	.word	0x200002dc
 8001a38:	080099fc 	.word	0x080099fc

08001a3c <get_data_Node>:

void get_data_Node(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
    for (int i = 0; i < nodeCount; i++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e05f      	b.n	8001b08 <get_data_Node+0xcc>
        uint8_t node_id = nodes[i].id;
 8001a48:	4934      	ldr	r1, [pc, #208]	@ (8001b1c <get_data_Node+0xe0>)
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	74fb      	strb	r3, [r7, #19]
        int retries = 0, data_ok = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
        while (retries < MAX_RETRIES && !data_ok) {
 8001a62:	e048      	b.n	8001af6 <get_data_Node+0xba>
            send_request(node_id);
 8001a64:	7cfb      	ldrb	r3, [r7, #19]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe56 	bl	8001718 <send_request>
            HAL_Delay(50);
 8001a6c:	2032      	movs	r0, #50	@ 0x32
 8001a6e:	f000 fd79 	bl	8002564 <HAL_Delay>
            uint32_t t0 = HAL_GetTick();
 8001a72:	f000 fd6d 	bl	8002550 <HAL_GetTick>
 8001a76:	60f8      	str	r0, [r7, #12]
            while (HAL_GetTick() - t0 < DATA_PACKET_TIMEOUT_MS) {
 8001a78:	e032      	b.n	8001ae0 <get_data_Node+0xa4>
                uint8_t recv_id;
                float t1, h1;
                if (receive_data(&recv_id, &t1, &h1, nodes[i].id) && recv_id == node_id) {
 8001a7a:	4928      	ldr	r1, [pc, #160]	@ (8001b1c <get_data_Node+0xe0>)
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	463a      	mov	r2, r7
 8001a8c:	1d39      	adds	r1, r7, #4
 8001a8e:	f107 000b 	add.w	r0, r7, #11
 8001a92:	f7ff ff57 	bl	8001944 <receive_data>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d021      	beq.n	8001ae0 <get_data_Node+0xa4>
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	7cfa      	ldrb	r2, [r7, #19]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11d      	bne.n	8001ae0 <get_data_Node+0xa4>
                    nodes[i].t = t1;
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	481d      	ldr	r0, [pc, #116]	@ (8001b1c <get_data_Node+0xe0>)
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4403      	add	r3, r0
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	6019      	str	r1, [r3, #0]
                    nodes[i].h = h1;
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	4818      	ldr	r0, [pc, #96]	@ (8001b1c <get_data_Node+0xe0>)
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4403      	add	r3, r0
 8001ac8:	3310      	adds	r3, #16
 8001aca:	6019      	str	r1, [r3, #0]
//                    send_ack(node_id);
                    HAL_Delay(100);
 8001acc:	2064      	movs	r0, #100	@ 0x64
 8001ace:	f000 fd49 	bl	8002564 <HAL_Delay>

                    send_ok(node_id);
 8001ad2:	7cfb      	ldrb	r3, [r7, #19]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fdf1 	bl	80016bc <send_ok>
                    data_ok = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e007      	b.n	8001af0 <get_data_Node+0xb4>
            while (HAL_GetTick() - t0 < DATA_PACKET_TIMEOUT_MS) {
 8001ae0:	f000 fd36 	bl	8002550 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001aee:	d3c4      	bcc.n	8001a7a <get_data_Node+0x3e>
                    break;
                }
            }
            retries++;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
        while (retries < MAX_RETRIES && !data_ok) {
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	dc02      	bgt.n	8001b02 <get_data_Node+0xc6>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0b0      	beq.n	8001a64 <get_data_Node+0x28>
    for (int i = 0; i < nodeCount; i++) {
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3301      	adds	r3, #1
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <get_data_Node+0xe4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	db9a      	blt.n	8001a48 <get_data_Node+0xc>
        }
    }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200002ec 	.word	0x200002ec
 8001b20:	200002e8 	.word	0x200002e8

08001b24 <send_data_PC>:

void send_data_PC() {
 8001b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b28:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 8001b2c:	af08      	add	r7, sp, #32
    char json_buf[512] = {0};
 8001b2e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001b32:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 ffc8 	bl	8005ad8 <memset>
    char node_buf[128];
    int first = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284

    strcpy(json_buf, "[\r\n");
 8001b4e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001b52:	4a58      	ldr	r2, [pc, #352]	@ (8001cb4 <send_data_PC+0x190>)
 8001b54:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < MAX_NODES; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8001b5c:	e081      	b.n	8001c62 <send_data_PC+0x13e>
        if (nodes[i].id == 0) continue; // Bỏ qua node chưa khởi tạo
 8001b5e:	4956      	ldr	r1, [pc, #344]	@ (8001cb8 <send_data_PC+0x194>)
 8001b60:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d070      	beq.n	8001c56 <send_data_PC+0x132>

        // Format từng node
        snprintf(node_buf, sizeof(node_buf),
            "  {\"id\": %d, \"x\": %.5f, \"y\": %.5f, \"temp\": %.2f, \"humid\": %.2f}",
            nodes[i].id,
 8001b74:	4950      	ldr	r1, [pc, #320]	@ (8001cb8 <send_data_PC+0x194>)
 8001b76:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	781b      	ldrb	r3, [r3, #0]
        snprintf(node_buf, sizeof(node_buf),
 8001b86:	461e      	mov	r6, r3
            nodes[i].latitude,
 8001b88:	494b      	ldr	r1, [pc, #300]	@ (8001cb8 <send_data_PC+0x194>)
 8001b8a:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3304      	adds	r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
        snprintf(node_buf, sizeof(node_buf),
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc43 	bl	8000428 <__aeabi_f2d>
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	460d      	mov	r5, r1
            nodes[i].longitude,
 8001ba6:	4944      	ldr	r1, [pc, #272]	@ (8001cb8 <send_data_PC+0x194>)
 8001ba8:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	681b      	ldr	r3, [r3, #0]
        snprintf(node_buf, sizeof(node_buf),
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc34 	bl	8000428 <__aeabi_f2d>
 8001bc0:	4680      	mov	r8, r0
 8001bc2:	4689      	mov	r9, r1
            nodes[i].t,
 8001bc4:	493c      	ldr	r1, [pc, #240]	@ (8001cb8 <send_data_PC+0x194>)
 8001bc6:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	330c      	adds	r3, #12
 8001bd6:	681b      	ldr	r3, [r3, #0]
        snprintf(node_buf, sizeof(node_buf),
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc25 	bl	8000428 <__aeabi_f2d>
 8001bde:	4682      	mov	sl, r0
 8001be0:	468b      	mov	fp, r1
            nodes[i].h
 8001be2:	4935      	ldr	r1, [pc, #212]	@ (8001cb8 <send_data_PC+0x194>)
 8001be4:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3310      	adds	r3, #16
 8001bf4:	681b      	ldr	r3, [r3, #0]
        snprintf(node_buf, sizeof(node_buf),
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fc16 	bl	8000428 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4638      	mov	r0, r7
 8001c02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c06:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c0a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c0e:	e9cd 4500 	strd	r4, r5, [sp]
 8001c12:	4633      	mov	r3, r6
 8001c14:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <send_data_PC+0x198>)
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	f003 fe06 	bl	8005828 <sniprintf>
        );

        // Thêm dấu phẩy nếu không phải node đầu tiên
        if (!first) {
 8001c1c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10d      	bne.n	8001c40 <send_data_PC+0x11c>
            strcat(json_buf, ",\r\n");
 8001c24:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fa91 	bl	8000150 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c36:	4413      	add	r3, r2
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <send_data_PC+0x19c>)
 8001c3a:	6810      	ldr	r0, [r2, #0]
 8001c3c:	6018      	str	r0, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <send_data_PC+0x122>
        } else {
            first = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
        }
        strcat(json_buf, node_buf);
 8001c46:	463a      	mov	r2, r7
 8001c48:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 ff4a 	bl	8005ae8 <strcat>
 8001c54:	e000      	b.n	8001c58 <send_data_PC+0x134>
        if (nodes[i].id == 0) continue; // Bỏ qua node chưa khởi tạo
 8001c56:	bf00      	nop
    for (int i = 0; i < MAX_NODES; i++) {
 8001c58:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8001c62:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8001c66:	2b13      	cmp	r3, #19
 8001c68:	f77f af79 	ble.w	8001b5e <send_data_PC+0x3a>
    }

    strcat(json_buf, "\r\n]\r\n");
 8001c6c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fa6d 	bl	8000150 <strlen>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a10      	ldr	r2, [pc, #64]	@ (8001cc4 <send_data_PC+0x1a0>)
 8001c82:	6810      	ldr	r0, [r2, #0]
 8001c84:	6018      	str	r0, [r3, #0]
 8001c86:	8892      	ldrh	r2, [r2, #4]
 8001c88:	809a      	strh	r2, [r3, #4]

    // Gửi qua UART3
    HAL_UART_Transmit(&huart3, (uint8_t*)json_buf, strlen(json_buf), 1000);
 8001c8a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fa5e 	bl	8000150 <strlen>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001c9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca0:	4809      	ldr	r0, [pc, #36]	@ (8001cc8 <send_data_PC+0x1a4>)
 8001ca2:	f002 fc4e 	bl	8004542 <HAL_UART_Transmit>
}
 8001ca6:	bf00      	nop
 8001ca8:	f507 7723 	add.w	r7, r7, #652	@ 0x28c
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	000a0d5b 	.word	0x000a0d5b
 8001cb8:	200002ec 	.word	0x200002ec
 8001cbc:	08009a38 	.word	0x08009a38
 8001cc0:	08009a78 	.word	0x08009a78
 8001cc4:	08009a7c 	.word	0x08009a7c
 8001cc8:	20000278 	.word	0x20000278

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd2:	f000 fbe5 	bl	80024a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd6:	f000 f86d 	bl	8001db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cda:	f000 f941 	bl	8001f60 <MX_GPIO_Init>
  MX_RTC_Init();
 8001cde:	f000 f8c3 	bl	8001e68 <MX_RTC_Init>
  MX_SPI1_Init();
 8001ce2:	f000 f8dd 	bl	8001ea0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001ce6:	f000 f911 	bl	8001f0c <MX_USART3_UART_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 8001cea:	2201      	movs	r2, #1
 8001cec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cf0:	4827      	ldr	r0, [pc, #156]	@ (8001d90 <main+0xc4>)
 8001cf2:	f000 feed 	bl	8002ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cfc:	4824      	ldr	r0, [pc, #144]	@ (8001d90 <main+0xc4>)
 8001cfe:	f000 fee7 	bl	8002ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d08:	4821      	ldr	r0, [pc, #132]	@ (8001d90 <main+0xc4>)
 8001d0a:	f000 fee1 	bl	8002ad0 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 2 */
  lora_Init();
 8001d0e:	f7ff fc17 	bl	8001540 <lora_Init>
  /* USER CODE END 2 */
  printf("Starting.......\n");
 8001d12:	4820      	ldr	r0, [pc, #128]	@ (8001d94 <main+0xc8>)
 8001d14:	f003 fd80 	bl	8005818 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE BEGIN 3 */
	  //Step 0: Reset Node table
	  printf("Step 0: Reset Node table\n");
 8001d18:	481f      	ldr	r0, [pc, #124]	@ (8001d98 <main+0xcc>)
 8001d1a:	f003 fd7d 	bl	8005818 <puts>
	  nodeCount = 0;
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <main+0xd0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
	  memset(nodes, 0, sizeof(nodes));
 8001d24:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001d28:	2100      	movs	r1, #0
 8001d2a:	481d      	ldr	r0, [pc, #116]	@ (8001da0 <main+0xd4>)
 8001d2c:	f003 fed4 	bl	8005ad8 <memset>

	  //Step 1: Search Node
	  printf("Step 1: Search Node\n");
 8001d30:	481c      	ldr	r0, [pc, #112]	@ (8001da4 <main+0xd8>)
 8001d32:	f003 fd71 	bl	8005818 <puts>
	  uint32_t timeSearch = HAL_GetTick();
 8001d36:	f000 fc0b 	bl	8002550 <HAL_GetTick>
 8001d3a:	6038      	str	r0, [r7, #0]
	  while (HAL_GetTick() - timeSearch <= 5000){
 8001d3c:	e001      	b.n	8001d42 <main+0x76>
		  search_Node();
 8001d3e:	f7ff fd19 	bl	8001774 <search_Node>
	  while (HAL_GetTick() - timeSearch <= 5000){
 8001d42:	f000 fc05 	bl	8002550 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d9f4      	bls.n	8001d3e <main+0x72>
	  }

	 //Step 2: Get data from Node
	  printf("Step 2: Get data\n");
 8001d54:	4814      	ldr	r0, [pc, #80]	@ (8001da8 <main+0xdc>)
 8001d56:	f003 fd5f 	bl	8005818 <puts>
	  get_data_Node();
 8001d5a:	f7ff fe6f 	bl	8001a3c <get_data_Node>

	  //Step 3: Send data to PC
	  printf("Step 3: Send data to PC\n");
 8001d5e:	4813      	ldr	r0, [pc, #76]	@ (8001dac <main+0xe0>)
 8001d60:	f003 fd5a 	bl	8005818 <puts>
	  send_data_PC();
 8001d64:	f7ff fede 	bl	8001b24 <send_data_PC>

	  printf("Step 4: Sleep %d second\n", TIME_CYCLE_GET * 1000);
 8001d68:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001d6c:	4810      	ldr	r0, [pc, #64]	@ (8001db0 <main+0xe4>)
 8001d6e:	f003 fceb 	bl	8005748 <iprintf>
	  for (int i = 0; i <= TIME_CYCLE_GET; i ++){
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	e006      	b.n	8001d86 <main+0xba>
		  HAL_Delay(1000);
 8001d78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d7c:	f000 fbf2 	bl	8002564 <HAL_Delay>
	  for (int i = 0; i <= TIME_CYCLE_GET; i ++){
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3301      	adds	r3, #1
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0a      	cmp	r3, #10
 8001d8a:	ddf5      	ble.n	8001d78 <main+0xac>
  {
 8001d8c:	e7c4      	b.n	8001d18 <main+0x4c>
 8001d8e:	bf00      	nop
 8001d90:	40010800 	.word	0x40010800
 8001d94:	08009a84 	.word	0x08009a84
 8001d98:	08009a94 	.word	0x08009a94
 8001d9c:	200002e8 	.word	0x200002e8
 8001da0:	200002ec 	.word	0x200002ec
 8001da4:	08009ab0 	.word	0x08009ab0
 8001da8:	08009ac4 	.word	0x08009ac4
 8001dac:	08009ad8 	.word	0x08009ad8
 8001db0:	08009af0 	.word	0x08009af0

08001db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b094      	sub	sp, #80	@ 0x50
 8001db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dbe:	2228      	movs	r2, #40	@ 0x28
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fe88 	bl	8005ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001de4:	230a      	movs	r3, #10
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de8:	2301      	movs	r3, #1
 8001dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dec:	2310      	movs	r3, #16
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001df0:	2301      	movs	r3, #1
 8001df2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df4:	2302      	movs	r3, #2
 8001df6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001dfc:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fea8 	bl	8002b5c <HAL_RCC_OscConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001e12:	f000 f929 	bl	8002068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e16:	230f      	movs	r3, #15
 8001e18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2102      	movs	r1, #2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 f914 	bl	8003060 <HAL_RCC_ClockConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e3e:	f000 f913 	bl	8002068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e42:	2301      	movs	r3, #1
 8001e44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 fa94 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e5a:	f000 f905 	bl	8002068 <Error_Handler>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3750      	adds	r7, #80	@ 0x50
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <MX_RTC_Init+0x30>)
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e9c <MX_RTC_Init+0x34>)
 8001e70:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <MX_RTC_Init+0x30>)
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <MX_RTC_Init+0x30>)
 8001e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e80:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_RTC_Init+0x30>)
 8001e84:	f001 fbe6 	bl	8003654 <HAL_RTC_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001e8e:	f000 f8eb 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000020c 	.word	0x2000020c
 8001e9c:	40002800 	.word	0x40002800

08001ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ea6:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <MX_SPI1_Init+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eec:	220a      	movs	r2, #10
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ef2:	f001 fd34 	bl	800395e <HAL_SPI_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001efc:	f000 f8b4 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000220 	.word	0x20000220
 8001f08:	40013000 	.word	0x40013000

08001f0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <MX_USART3_UART_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <MX_USART3_UART_Init+0x4c>)
 8001f44:	f002 faad 	bl	80044a2 <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f4e:	f000 f88b 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000278 	.word	0x20000278
 8001f5c:	40004800 	.word	0x40004800

08001f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 0310 	add.w	r3, r7, #16
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f74:	4b38      	ldr	r3, [pc, #224]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a37      	ldr	r2, [pc, #220]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a31      	ldr	r2, [pc, #196]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b2f      	ldr	r3, [pc, #188]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <MX_GPIO_Init+0xf8>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Data_DHT_Pin|NSS_Pin|Led_5_Pin|Led_4_Pin, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f640 4114 	movw	r1, #3092	@ 0xc14
 8001fc2:	4826      	ldr	r0, [pc, #152]	@ (800205c <MX_GPIO_Init+0xfc>)
 8001fc4:	f000 fd84 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4824      	ldr	r0, [pc, #144]	@ (8002060 <MX_GPIO_Init+0x100>)
 8001fce:	f000 fd7f 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Data_DHT_Pin NSS_Pin Led_5_Pin Led_4_Pin */
  GPIO_InitStruct.Pin = Data_DHT_Pin|NSS_Pin|Led_5_Pin|Led_4_Pin;
 8001fd2:	f640 4314 	movw	r3, #3092	@ 0xc14
 8001fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	4619      	mov	r1, r3
 8001fea:	481c      	ldr	r0, [pc, #112]	@ (800205c <MX_GPIO_Init+0xfc>)
 8001fec:	f000 fbec 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <MX_GPIO_Init+0x104>)
 8001ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	4619      	mov	r1, r3
 8002002:	4817      	ldr	r0, [pc, #92]	@ (8002060 <MX_GPIO_Init+0x100>)
 8002004:	f000 fbe0 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200c:	2301      	movs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2302      	movs	r3, #2
 8002016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4619      	mov	r1, r3
 800201e:	4810      	ldr	r0, [pc, #64]	@ (8002060 <MX_GPIO_Init+0x100>)
 8002020:	f000 fbd2 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_6_Pin */
  GPIO_InitStruct.Pin = Led_6_Pin;
 8002024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_GPIO_Init+0x104>)
 800202c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led_6_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	4808      	ldr	r0, [pc, #32]	@ (800205c <MX_GPIO_Init+0xfc>)
 800203a:	f000 fbc5 	bl	80027c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	2006      	movs	r0, #6
 8002044:	f000 fb89 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002048:	2006      	movs	r0, #6
 800204a:	f000 fba2 	bl	8002792 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	40010800 	.word	0x40010800
 8002060:	40010c00 	.word	0x40010c00
 8002064:	10110000 	.word	0x10110000

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <Error_Handler+0x8>

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_MspInit+0x5c>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6193      	str	r3, [r2, #24]
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a0e      	ldr	r2, [pc, #56]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <HAL_MspInit+0x5c>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_MspInit+0x60>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_MspInit+0x60>)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000

080020d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a13      	ldr	r2, [pc, #76]	@ (8002134 <HAL_RTC_MspInit+0x5c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d120      	bne.n	800212c <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80020ea:	f000 fd2b 	bl	8002b44 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_RTC_MspInit+0x60>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <HAL_RTC_MspInit+0x60>)
 80020f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <HAL_RTC_MspInit+0x60>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_RTC_MspInit+0x64>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2003      	movs	r0, #3
 8002112:	f000 fb22 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002116:	2003      	movs	r0, #3
 8002118:	f000 fb3b 	bl	8002792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2029      	movs	r0, #41	@ 0x29
 8002122:	f000 fb1a 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002126:	2029      	movs	r0, #41	@ 0x29
 8002128:	f000 fb33 	bl	8002792 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40002800 	.word	0x40002800
 8002138:	40021000 	.word	0x40021000
 800213c:	4242043c 	.word	0x4242043c

08002140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1b      	ldr	r2, [pc, #108]	@ (80021c8 <HAL_SPI_MspInit+0x88>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d12f      	bne.n	80021c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_SPI_MspInit+0x8c>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_SPI_MspInit+0x8c>)
 8002166:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <HAL_SPI_MspInit+0x8c>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <HAL_SPI_MspInit+0x8c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <HAL_SPI_MspInit+0x8c>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_SPI_MspInit+0x8c>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002190:	23a0      	movs	r3, #160	@ 0xa0
 8002192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	4619      	mov	r1, r3
 80021a2:	480b      	ldr	r0, [pc, #44]	@ (80021d0 <HAL_SPI_MspInit+0x90>)
 80021a4:	f000 fb10 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a8:	2340      	movs	r3, #64	@ 0x40
 80021aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4619      	mov	r1, r3
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <HAL_SPI_MspInit+0x90>)
 80021bc:	f000 fb04 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40013000 	.word	0x40013000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010800 	.word	0x40010800

080021d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <HAL_UART_MspInit+0x8c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d131      	bne.n	8002258 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_UART_MspInit+0x90>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_UART_MspInit+0x90>)
 80021fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021fe:	61d3      	str	r3, [r2, #28]
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_UART_MspInit+0x90>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_UART_MspInit+0x90>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a14      	ldr	r2, [pc, #80]	@ (8002264 <HAL_UART_MspInit+0x90>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_UART_MspInit+0x90>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	4619      	mov	r1, r3
 8002238:	480b      	ldr	r0, [pc, #44]	@ (8002268 <HAL_UART_MspInit+0x94>)
 800223a:	f000 fac5 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800223e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	4805      	ldr	r0, [pc, #20]	@ (8002268 <HAL_UART_MspInit+0x94>)
 8002254:	f000 fab8 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40004800 	.word	0x40004800
 8002264:	40021000 	.word	0x40021000
 8002268:	40010c00 	.word	0x40010c00

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <NMI_Handler+0x4>

08002274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <MemManage_Handler+0x4>

08002284 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <UsageFault_Handler+0x4>

08002294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 f936 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <RTC_IRQHandler+0x10>)
 80022ca:	f001 faff 	bl	80038cc <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000020c 	.word	0x2000020c

080022d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80022dc:	2001      	movs	r0, #1
 80022de:	f000 fc0f 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <RTC_Alarm_IRQHandler+0x10>)
 80022ee:	f001 fa3d 	bl	800376c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000020c 	.word	0x2000020c

080022fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return 1;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <_kill>:

int _kill(int pid, int sig)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002314:	f003 fc54 	bl	8005bc0 <__errno>
 8002318:	4603      	mov	r3, r0
 800231a:	2216      	movs	r2, #22
 800231c:	601a      	str	r2, [r3, #0]
  return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_exit>:

void _exit (int status)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002332:	f04f 31ff 	mov.w	r1, #4294967295
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffe7 	bl	800230a <_kill>
  while (1) {}    /* Make sure we hang here */
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <_exit+0x12>

08002340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e00a      	b.n	8002368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002352:	f3af 8000 	nop.w
 8002356:	4601      	mov	r1, r0
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	60ba      	str	r2, [r7, #8]
 800235e:	b2ca      	uxtb	r2, r1
 8002360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	dbf0      	blt.n	8002352 <_read+0x12>
  }

  return len;
 8002370:	687b      	ldr	r3, [r7, #4]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_close>:
  }
  return len;
}

int _close(int file)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a0:	605a      	str	r2, [r3, #4]
  return 0;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f003 fbd8 	bl	8005bc0 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
 }
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20005000 	.word	0x20005000
 800243c:	00000400 	.word	0x00000400
 8002440:	200004cc 	.word	0x200004cc
 8002444:	20000620 	.word	0x20000620

08002448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002454:	f7ff fff8 	bl	8002448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002458:	480b      	ldr	r0, [pc, #44]	@ (8002488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800245a:	490c      	ldr	r1, [pc, #48]	@ (800248c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800245c:	4a0c      	ldr	r2, [pc, #48]	@ (8002490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a09      	ldr	r2, [pc, #36]	@ (8002494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002470:	4c09      	ldr	r4, [pc, #36]	@ (8002498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800247e:	f003 fba5 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002482:	f7ff fc23 	bl	8001ccc <main>
  bx lr
 8002486:	4770      	bx	lr
  ldr r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800248c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002490:	08009fdc 	.word	0x08009fdc
  ldr r2, =_sbss
 8002494:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002498:	20000620 	.word	0x20000620

0800249c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC1_2_IRQHandler>
	...

080024a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <HAL_Init+0x28>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <HAL_Init+0x28>)
 80024aa:	f043 0310 	orr.w	r3, r3, #16
 80024ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 f947 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	200f      	movs	r0, #15
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fdda 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40022000 	.word	0x40022000

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f95f 	bl	80027ae <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 f927 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	@ (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000018 	.word	0x20000018
 8002524:	20000020 	.word	0x20000020
 8002528:	2000001c 	.word	0x2000001c

0800252c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_IncTick+0x1c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b05      	ldr	r3, [pc, #20]	@ (800254c <HAL_IncTick+0x20>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a03      	ldr	r2, [pc, #12]	@ (800254c <HAL_IncTick+0x20>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000020 	.word	0x20000020
 800254c:	200004d0 	.word	0x200004d0

08002550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b02      	ldr	r3, [pc, #8]	@ (8002560 <HAL_GetTick+0x10>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	200004d0 	.word	0x200004d0

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff fff0 	bl	8002550 <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffe0 	bl	8002550 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000020 	.word	0x20000020

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	@ (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4906      	ldr	r1, [pc, #24]	@ (8002644 <__NVIC_EnableIRQ+0x34>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	@ (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	@ (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	@ 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	@ 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff90 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff2d 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff42 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff90 	bl	800269c <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5f 	bl	8002648 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff35 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b08b      	sub	sp, #44	@ 0x2c
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027da:	e169      	b.n	8002ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027dc:	2201      	movs	r2, #1
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 8158 	bne.w	8002aaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a9a      	ldr	r2, [pc, #616]	@ (8002a68 <HAL_GPIO_Init+0x2a0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d05e      	beq.n	80028c2 <HAL_GPIO_Init+0xfa>
 8002804:	4a98      	ldr	r2, [pc, #608]	@ (8002a68 <HAL_GPIO_Init+0x2a0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d875      	bhi.n	80028f6 <HAL_GPIO_Init+0x12e>
 800280a:	4a98      	ldr	r2, [pc, #608]	@ (8002a6c <HAL_GPIO_Init+0x2a4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d058      	beq.n	80028c2 <HAL_GPIO_Init+0xfa>
 8002810:	4a96      	ldr	r2, [pc, #600]	@ (8002a6c <HAL_GPIO_Init+0x2a4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d86f      	bhi.n	80028f6 <HAL_GPIO_Init+0x12e>
 8002816:	4a96      	ldr	r2, [pc, #600]	@ (8002a70 <HAL_GPIO_Init+0x2a8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d052      	beq.n	80028c2 <HAL_GPIO_Init+0xfa>
 800281c:	4a94      	ldr	r2, [pc, #592]	@ (8002a70 <HAL_GPIO_Init+0x2a8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d869      	bhi.n	80028f6 <HAL_GPIO_Init+0x12e>
 8002822:	4a94      	ldr	r2, [pc, #592]	@ (8002a74 <HAL_GPIO_Init+0x2ac>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d04c      	beq.n	80028c2 <HAL_GPIO_Init+0xfa>
 8002828:	4a92      	ldr	r2, [pc, #584]	@ (8002a74 <HAL_GPIO_Init+0x2ac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d863      	bhi.n	80028f6 <HAL_GPIO_Init+0x12e>
 800282e:	4a92      	ldr	r2, [pc, #584]	@ (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d046      	beq.n	80028c2 <HAL_GPIO_Init+0xfa>
 8002834:	4a90      	ldr	r2, [pc, #576]	@ (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d85d      	bhi.n	80028f6 <HAL_GPIO_Init+0x12e>
 800283a:	2b12      	cmp	r3, #18
 800283c:	d82a      	bhi.n	8002894 <HAL_GPIO_Init+0xcc>
 800283e:	2b12      	cmp	r3, #18
 8002840:	d859      	bhi.n	80028f6 <HAL_GPIO_Init+0x12e>
 8002842:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <HAL_GPIO_Init+0x80>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	080028c3 	.word	0x080028c3
 800284c:	0800289d 	.word	0x0800289d
 8002850:	080028af 	.word	0x080028af
 8002854:	080028f1 	.word	0x080028f1
 8002858:	080028f7 	.word	0x080028f7
 800285c:	080028f7 	.word	0x080028f7
 8002860:	080028f7 	.word	0x080028f7
 8002864:	080028f7 	.word	0x080028f7
 8002868:	080028f7 	.word	0x080028f7
 800286c:	080028f7 	.word	0x080028f7
 8002870:	080028f7 	.word	0x080028f7
 8002874:	080028f7 	.word	0x080028f7
 8002878:	080028f7 	.word	0x080028f7
 800287c:	080028f7 	.word	0x080028f7
 8002880:	080028f7 	.word	0x080028f7
 8002884:	080028f7 	.word	0x080028f7
 8002888:	080028f7 	.word	0x080028f7
 800288c:	080028a5 	.word	0x080028a5
 8002890:	080028b9 	.word	0x080028b9
 8002894:	4a79      	ldr	r2, [pc, #484]	@ (8002a7c <HAL_GPIO_Init+0x2b4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800289a:	e02c      	b.n	80028f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	623b      	str	r3, [r7, #32]
          break;
 80028a2:	e029      	b.n	80028f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	3304      	adds	r3, #4
 80028aa:	623b      	str	r3, [r7, #32]
          break;
 80028ac:	e024      	b.n	80028f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	3308      	adds	r3, #8
 80028b4:	623b      	str	r3, [r7, #32]
          break;
 80028b6:	e01f      	b.n	80028f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	330c      	adds	r3, #12
 80028be:	623b      	str	r3, [r7, #32]
          break;
 80028c0:	e01a      	b.n	80028f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ca:	2304      	movs	r3, #4
 80028cc:	623b      	str	r3, [r7, #32]
          break;
 80028ce:	e013      	b.n	80028f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028d8:	2308      	movs	r3, #8
 80028da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	611a      	str	r2, [r3, #16]
          break;
 80028e2:	e009      	b.n	80028f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e4:	2308      	movs	r3, #8
 80028e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	615a      	str	r2, [r3, #20]
          break;
 80028ee:	e003      	b.n	80028f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
          break;
 80028f4:	e000      	b.n	80028f8 <HAL_GPIO_Init+0x130>
          break;
 80028f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2bff      	cmp	r3, #255	@ 0xff
 80028fc:	d801      	bhi.n	8002902 <HAL_GPIO_Init+0x13a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	e001      	b.n	8002906 <HAL_GPIO_Init+0x13e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2bff      	cmp	r3, #255	@ 0xff
 800290c:	d802      	bhi.n	8002914 <HAL_GPIO_Init+0x14c>
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	e002      	b.n	800291a <HAL_GPIO_Init+0x152>
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	3b08      	subs	r3, #8
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	210f      	movs	r1, #15
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	6a39      	ldr	r1, [r7, #32]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	431a      	orrs	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80b1 	beq.w	8002aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002948:	4b4d      	ldr	r3, [pc, #308]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6193      	str	r3, [r2, #24]
 8002954:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002960:	4a48      	ldr	r2, [pc, #288]	@ (8002a84 <HAL_GPIO_Init+0x2bc>)
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a40      	ldr	r2, [pc, #256]	@ (8002a88 <HAL_GPIO_Init+0x2c0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d013      	beq.n	80029b4 <HAL_GPIO_Init+0x1ec>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a8c <HAL_GPIO_Init+0x2c4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00d      	beq.n	80029b0 <HAL_GPIO_Init+0x1e8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3e      	ldr	r2, [pc, #248]	@ (8002a90 <HAL_GPIO_Init+0x2c8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <HAL_GPIO_Init+0x1e4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a94 <HAL_GPIO_Init+0x2cc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_GPIO_Init+0x1e0>
 80029a4:	2303      	movs	r3, #3
 80029a6:	e006      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029a8:	2304      	movs	r3, #4
 80029aa:	e004      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e002      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029b4:	2300      	movs	r3, #0
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	f002 0203 	and.w	r2, r2, #3
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	4093      	lsls	r3, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029c6:	492f      	ldr	r1, [pc, #188]	@ (8002a84 <HAL_GPIO_Init+0x2bc>)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	492c      	ldr	r1, [pc, #176]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
 80029ec:	e006      	b.n	80029fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4928      	ldr	r1, [pc, #160]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a08:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4922      	ldr	r1, [pc, #136]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a16:	4b20      	ldr	r3, [pc, #128]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	491e      	ldr	r1, [pc, #120]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4918      	ldr	r1, [pc, #96]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a3e:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	4914      	ldr	r1, [pc, #80]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d021      	beq.n	8002a9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a58:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	490e      	ldr	r1, [pc, #56]	@ (8002a98 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e021      	b.n	8002aaa <HAL_GPIO_Init+0x2e2>
 8002a66:	bf00      	nop
 8002a68:	10320000 	.word	0x10320000
 8002a6c:	10310000 	.word	0x10310000
 8002a70:	10220000 	.word	0x10220000
 8002a74:	10210000 	.word	0x10210000
 8002a78:	10120000 	.word	0x10120000
 8002a7c:	10110000 	.word	0x10110000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40010800 	.word	0x40010800
 8002a8c:	40010c00 	.word	0x40010c00
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40011400 	.word	0x40011400
 8002a98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_GPIO_Init+0x304>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4909      	ldr	r1, [pc, #36]	@ (8002acc <HAL_GPIO_Init+0x304>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	3301      	adds	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f47f ae8e 	bne.w	80027dc <HAL_GPIO_Init+0x14>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	372c      	adds	r7, #44	@ 0x2c
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	40010400 	.word	0x40010400

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	611a      	str	r2, [r3, #16]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f806 	bl	8002b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	420e0020 	.word	0x420e0020

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e272      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b7c:	4b92      	ldr	r3, [pc, #584]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b88:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d112      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
 8002b94:	4b8c      	ldr	r3, [pc, #560]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba0:	d10b      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	4b89      	ldr	r3, [pc, #548]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d06c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x12c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d168      	bne.n	8002c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e24c      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x76>
 8002bc4:	4b80      	ldr	r3, [pc, #512]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a7f      	ldr	r2, [pc, #508]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e02e      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b7b      	ldr	r3, [pc, #492]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7a      	ldr	r2, [pc, #488]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b78      	ldr	r3, [pc, #480]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a77      	ldr	r2, [pc, #476]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0xbc>
 8002bfe:	4b72      	ldr	r3, [pc, #456]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a71      	ldr	r2, [pc, #452]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002c18:	4b6b      	ldr	r3, [pc, #428]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b68      	ldr	r3, [pc, #416]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a67      	ldr	r2, [pc, #412]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff fc8a 	bl	8002550 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff fc86 	bl	8002550 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	@ 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e200      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe4>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fc76 	bl	8002550 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff fc72 	bl	8002550 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	@ 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1ec      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b53      	ldr	r3, [pc, #332]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x10c>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ca2:	4b49      	ldr	r3, [pc, #292]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
 8002cae:	4b46      	ldr	r3, [pc, #280]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b43      	ldr	r3, [pc, #268]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1c0      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4939      	ldr	r1, [pc, #228]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7ff fc2b 	bl	8002550 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7ff fc27 	bl	8002550 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1a1      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4927      	ldr	r1, [pc, #156]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff fc0a 	bl	8002550 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7ff fc06 	bl	8002550 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e180      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03a      	beq.n	8002de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d019      	beq.n	8002da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7ff fbea 	bl	8002550 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d80:	f7ff fbe6 	bl	8002550 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e160      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f000 face 	bl	8003340 <RCC_Delay>
 8002da4:	e01c      	b.n	8002de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da6:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7ff fbd0 	bl	8002550 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e00f      	b.n	8002dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7ff fbcc 	bl	8002550 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e146      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	42420000 	.word	0x42420000
 8002dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b92      	ldr	r3, [pc, #584]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e9      	bne.n	8002db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a6 	beq.w	8002f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b8b      	ldr	r3, [pc, #556]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b88      	ldr	r3, [pc, #544]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a87      	ldr	r2, [pc, #540]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]
 8002e0a:	4b85      	ldr	r3, [pc, #532]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b82      	ldr	r3, [pc, #520]	@ (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b7f      	ldr	r3, [pc, #508]	@ (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7ff fb8d 	bl	8002550 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7ff fb89 	bl	8002550 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	@ 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e103      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x312>
 8002e60:	4b6f      	ldr	r3, [pc, #444]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a6e      	ldr	r2, [pc, #440]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e02d      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002e76:	4b6a      	ldr	r3, [pc, #424]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a69      	ldr	r2, [pc, #420]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	4b67      	ldr	r3, [pc, #412]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a66      	ldr	r2, [pc, #408]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	e01c      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x356>
 8002e98:	4b61      	ldr	r3, [pc, #388]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a60      	ldr	r2, [pc, #384]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a5a      	ldr	r2, [pc, #360]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b58      	ldr	r3, [pc, #352]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a57      	ldr	r2, [pc, #348]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7ff fb3d 	bl	8002550 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7ff fb39 	bl	8002550 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0b1      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RCC_OscConfig+0x37e>
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7ff fb27 	bl	8002550 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7ff fb23 	bl	8002550 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e09b      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	4b40      	ldr	r3, [pc, #256]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ee      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a3b      	ldr	r2, [pc, #236]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f44:	4b36      	ldr	r3, [pc, #216]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d061      	beq.n	8003014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d146      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b33      	ldr	r3, [pc, #204]	@ (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff faf7 	bl	8002550 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7ff faf3 	bl	8002550 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e06d      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f78:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4921      	ldr	r1, [pc, #132]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a19      	ldr	r1, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	491b      	ldr	r1, [pc, #108]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7ff fac7 	bl	8002550 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7ff fac3 	bl	8002550 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e03d      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x46a>
 8002fe4:	e035      	b.n	8003052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff fab0 	bl	8002550 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7ff faac 	bl	8002550 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e026      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x498>
 8003012:	e01e      	b.n	8003052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e019      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
 8003028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_OscConfig+0x500>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	429a      	cmp	r2, r3
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0d0      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b6a      	ldr	r3, [pc, #424]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d910      	bls.n	80030a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b67      	ldr	r3, [pc, #412]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 0207 	bic.w	r2, r3, #7
 800308a:	4965      	ldr	r1, [pc, #404]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b63      	ldr	r3, [pc, #396]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0b8      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030bc:	4b59      	ldr	r3, [pc, #356]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a58      	ldr	r2, [pc, #352]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d4:	4b53      	ldr	r3, [pc, #332]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a52      	ldr	r2, [pc, #328]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4b50      	ldr	r3, [pc, #320]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	494d      	ldr	r1, [pc, #308]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d040      	beq.n	8003180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4b47      	ldr	r3, [pc, #284]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d115      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e07f      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b41      	ldr	r3, [pc, #260]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e073      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06b      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b39      	ldr	r3, [pc, #228]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4936      	ldr	r1, [pc, #216]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003150:	f7ff f9fe 	bl	8002550 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7ff f9fa 	bl	8002550 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e053      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2d      	ldr	r3, [pc, #180]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b27      	ldr	r3, [pc, #156]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d210      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b24      	ldr	r3, [pc, #144]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	4922      	ldr	r1, [pc, #136]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e032      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031bc:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4916      	ldr	r1, [pc, #88]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031da:	4b12      	ldr	r3, [pc, #72]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	490e      	ldr	r1, [pc, #56]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ee:	f000 f821 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	490a      	ldr	r1, [pc, #40]	@ (8003228 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	5ccb      	ldrb	r3, [r1, r3]
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	4a09      	ldr	r2, [pc, #36]	@ (800322c <HAL_RCC_ClockConfig+0x1cc>)
 8003208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800320a:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <HAL_RCC_ClockConfig+0x1d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f95c 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40022000 	.word	0x40022000
 8003224:	40021000 	.word	0x40021000
 8003228:	08009b44 	.word	0x08009b44
 800322c:	20000018 	.word	0x20000018
 8003230:	2000001c 	.word	0x2000001c

08003234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800324e:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x30>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x36>
 8003262:	e027      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003266:	613b      	str	r3, [r7, #16]
      break;
 8003268:	e027      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	4a17      	ldr	r2, [pc, #92]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003282:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0c5b      	lsrs	r3, r3, #17
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	4a11      	ldr	r2, [pc, #68]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a0d      	ldr	r2, [pc, #52]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003296:	fb03 f202 	mul.w	r2, r3, r2
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e004      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0c      	ldr	r2, [pc, #48]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	613b      	str	r3, [r7, #16]
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 80032b6:	613b      	str	r3, [r7, #16]
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	693b      	ldr	r3, [r7, #16]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	08009b5c 	.word	0x08009b5c
 80032d4:	08009b6c 	.word	0x08009b6c
 80032d8:	003d0900 	.word	0x003d0900

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b02      	ldr	r3, [pc, #8]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x10>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	20000018 	.word	0x20000018

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f4:	f7ff fff2 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	@ (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	08009b54 	.word	0x08009b54

08003318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800331c:	f7ff ffde 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0adb      	lsrs	r3, r3, #11
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	@ (800333c <HAL_RCC_GetPCLK2Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	08009b54 	.word	0x08009b54

08003340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003348:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <RCC_Delay+0x34>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <RCC_Delay+0x38>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0a5b      	lsrs	r3, r3, #9
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800335c:	bf00      	nop
  }
  while (Delay --);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	60fa      	str	r2, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f9      	bne.n	800335c <RCC_Delay+0x1c>
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000018 	.word	0x20000018
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d07d      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339c:	4b4f      	ldr	r3, [pc, #316]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b4c      	ldr	r3, [pc, #304]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	4a4b      	ldr	r2, [pc, #300]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	61d3      	str	r3, [r2, #28]
 80033b4:	4b49      	ldr	r3, [pc, #292]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	4b46      	ldr	r3, [pc, #280]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d118      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d0:	4b43      	ldr	r3, [pc, #268]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a42      	ldr	r2, [pc, #264]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033dc:	f7ff f8b8 	bl	8002550 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	e008      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e4:	f7ff f8b4 	bl	8002550 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	@ 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e06d      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b3a      	ldr	r3, [pc, #232]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003402:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02e      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	429a      	cmp	r2, r3
 800341e:	d027      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003420:	4b2e      	ldr	r3, [pc, #184]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003428:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800342a:	4b2e      	ldr	r3, [pc, #184]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003430:	4b2c      	ldr	r3, [pc, #176]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003436:	4a29      	ldr	r2, [pc, #164]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d014      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7ff f883 	bl	8002550 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7ff f87f 	bl	8002550 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e036      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ee      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003470:	4b1a      	ldr	r3, [pc, #104]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4917      	ldr	r1, [pc, #92]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	4313      	orrs	r3, r2
 8003480:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003488:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	4a13      	ldr	r2, [pc, #76]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003492:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a0:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	490b      	ldr	r1, [pc, #44]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034be:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007000 	.word	0x40007000
 80034e4:	42420440 	.word	0x42420440

080034e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b10      	cmp	r3, #16
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b10      	cmp	r3, #16
 800350e:	f200 808a 	bhi.w	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d045      	beq.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d075      	beq.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800351e:	e082      	b.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003520:	4b46      	ldr	r3, [pc, #280]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003526:	4b45      	ldr	r3, [pc, #276]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d07b      	beq.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0c9b      	lsrs	r3, r3, #18
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a41      	ldr	r2, [pc, #260]	@ (8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d015      	beq.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800354a:	4b3c      	ldr	r3, [pc, #240]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	0c5b      	lsrs	r3, r3, #17
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	4a3b      	ldr	r2, [pc, #236]	@ (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00d      	beq.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003564:	4a38      	ldr	r2, [pc, #224]	@ (8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fbb2 f2f3 	udiv	r2, r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	e004      	b.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4a34      	ldr	r2, [pc, #208]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003580:	4b2e      	ldr	r3, [pc, #184]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358c:	d102      	bne.n	8003594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	61bb      	str	r3, [r7, #24]
      break;
 8003592:	e04a      	b.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4a2d      	ldr	r2, [pc, #180]	@ (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
      break;
 80035a2:	e042      	b.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80035a4:	4b25      	ldr	r3, [pc, #148]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b4:	d108      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80035c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e01f      	b.n	8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d2:	d109      	bne.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80035d4:	4b19      	ldr	r3, [pc, #100]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80035e0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e00f      	b.n	8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035f2:	d11c      	bne.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035f4:	4b11      	ldr	r3, [pc, #68]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d016      	beq.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003600:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003604:	61bb      	str	r3, [r7, #24]
      break;
 8003606:	e012      	b.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003608:	e011      	b.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800360a:	f7ff fe85 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0b9b      	lsrs	r3, r3, #14
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	3301      	adds	r3, #1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	61bb      	str	r3, [r7, #24]
      break;
 8003624:	e004      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800362e:	bf00      	nop
    }
  }
  return (frequency);
 8003630:	69bb      	ldr	r3, [r7, #24]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	08009b70 	.word	0x08009b70
 8003644:	08009b80 	.word	0x08009b80
 8003648:	007a1200 	.word	0x007a1200
 800364c:	003d0900 	.word	0x003d0900
 8003650:	aaaaaaab 	.word	0xaaaaaaab

08003654 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e07a      	b.n	8003760 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7c5b      	ldrb	r3, [r3, #17]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe fd2c 	bl	80020d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8a3 	bl	80037d2 <HAL_RTC_WaitForSynchro>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e061      	b.n	8003760 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8c5 	bl	800382c <RTC_EnterInitMode>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2204      	movs	r2, #4
 80036ac:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e056      	b.n	8003760 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0207 	bic.w	r2, r2, #7
 80036c0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80036ca:	4b27      	ldr	r3, [pc, #156]	@ (8003768 <HAL_RTC_Init+0x114>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <HAL_RTC_Init+0x114>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80036d6:	4b24      	ldr	r3, [pc, #144]	@ (8003768 <HAL_RTC_Init+0x114>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4921      	ldr	r1, [pc, #132]	@ (8003768 <HAL_RTC_Init+0x114>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d003      	beq.n	80036fa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e00e      	b.n	8003718 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80036fa:	2001      	movs	r0, #1
 80036fc:	f7ff fef4 	bl	80034e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003700:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2204      	movs	r2, #4
 800370c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e026      	b.n	8003760 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b01      	subs	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	0c1a      	lsrs	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f002 020f 	and.w	r2, r2, #15
 8003724:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	b292      	uxth	r2, r2
 800372e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8a3 	bl	800387c <RTC_ExitInitMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2204      	movs	r2, #4
 8003740:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e00c      	b.n	8003760 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800375e:	2300      	movs	r3, #0
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40006c00 	.word	0x40006c00

0800376c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d011      	beq.n	80037a6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f815 	bl	80037c0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0202 	bic.w	r2, r2, #2
 80037a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80037a6:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <HAL_RTC_AlarmIRQHandler+0x50>)
 80037a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037ac:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	745a      	strb	r2, [r3, #17]
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e01d      	b.n	8003824 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0208 	bic.w	r2, r2, #8
 80037f6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80037f8:	f7fe feaa 	bl	8002550 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80037fe:	e009      	b.n	8003814 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003800:	f7fe fea6 	bl	8002550 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800380e:	d901      	bls.n	8003814 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e007      	b.n	8003824 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ee      	beq.n	8003800 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003838:	f7fe fe8a 	bl	8002550 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800383e:	e009      	b.n	8003854 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003840:	f7fe fe86 	bl	8002550 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800384e:	d901      	bls.n	8003854 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e00f      	b.n	8003874 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ee      	beq.n	8003840 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0210 	orr.w	r2, r2, #16
 8003870:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0210 	bic.w	r2, r2, #16
 8003896:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003898:	f7fe fe5a 	bl	8002550 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800389e:	e009      	b.n	80038b4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038a0:	f7fe fe56 	bl	8002550 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ae:	d901      	bls.n	80038b4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e007      	b.n	80038c4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0ee      	beq.n	80038a0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d027      	beq.n	8003932 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f824 	bl	800394c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0204 	mvn.w	r2, #4
 800390c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2204      	movs	r2, #4
 8003912:	745a      	strb	r2, [r3, #17]
 8003914:	e005      	b.n	8003922 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f80f 	bl	800393a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e076      	b.n	8003a5e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003980:	d009      	beq.n	8003996 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	61da      	str	r2, [r3, #28]
 8003988:	e005      	b.n	8003996 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fe fbc5 	bl	8002140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	0c1a      	lsrs	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 0204 	and.w	r2, r2, #4
 8003a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b088      	sub	sp, #32
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a76:	f7fe fd6b 	bl	8002550 <HAL_GetTick>
 8003a7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e12a      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_Transmit+0x36>
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e122      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_SPI_Transmit+0x48>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e11b      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afc:	d10f      	bne.n	8003b1e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d007      	beq.n	8003b3c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b44:	d152      	bne.n	8003bec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_SPI_Transmit+0xee>
 8003b4e:	8b7b      	ldrh	r3, [r7, #26]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d145      	bne.n	8003be0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b78:	e032      	b.n	8003be0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d112      	bne.n	8003bae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	881a      	ldrh	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bac:	e018      	b.n	8003be0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bae:	f7fe fccf 	bl	8002550 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_Transmit+0x160>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Transmit+0x166>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e082      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1c7      	bne.n	8003b7a <HAL_SPI_Transmit+0x114>
 8003bea:	e053      	b.n	8003c94 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_SPI_Transmit+0x194>
 8003bf4:	8b7b      	ldrh	r3, [r7, #26]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d147      	bne.n	8003c8a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c20:	e033      	b.n	8003c8a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d113      	bne.n	8003c58 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c56:	e018      	b.n	8003c8a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c58:	f7fe fc7a 	bl	8002550 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d803      	bhi.n	8003c70 <HAL_SPI_Transmit+0x20a>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d102      	bne.n	8003c76 <HAL_SPI_Transmit+0x210>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e02d      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1c6      	bne.n	8003c22 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	6839      	ldr	r1, [r7, #0]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fbd1 	bl	8004440 <SPI_EndRxTxTransaction>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b088      	sub	sp, #32
 8003cf2:	af02      	add	r7, sp, #8
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e104      	b.n	8003f18 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d16:	d112      	bne.n	8003d3e <HAL_SPI_Receive+0x50>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10e      	bne.n	8003d3e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2204      	movs	r2, #4
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d28:	88fa      	ldrh	r2, [r7, #6]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f8f3 	bl	8003f20 <HAL_SPI_TransmitReceive>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	e0ec      	b.n	8003f18 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d3e:	f7fe fc07 	bl	8002550 <HAL_GetTick>
 8003d42:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_Receive+0x62>
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0e1      	b.n	8003f18 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_SPI_Receive+0x74>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e0da      	b.n	8003f18 <HAL_SPI_Receive+0x22a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db0:	d10f      	bne.n	8003dd2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	d007      	beq.n	8003df0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d170      	bne.n	8003eda <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003df8:	e035      	b.n	8003e66 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d115      	bne.n	8003e34 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f103 020c 	add.w	r2, r3, #12
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e32:	e018      	b.n	8003e66 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e34:	f7fe fb8c 	bl	8002550 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d803      	bhi.n	8003e4c <HAL_SPI_Receive+0x15e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Receive+0x164>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e058      	b.n	8003f18 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1c4      	bne.n	8003dfa <HAL_SPI_Receive+0x10c>
 8003e70:	e038      	b.n	8003ee4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d113      	bne.n	8003ea8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ea6:	e018      	b.n	8003eda <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea8:	f7fe fb52 	bl	8002550 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d803      	bhi.n	8003ec0 <HAL_SPI_Receive+0x1d2>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d102      	bne.n	8003ec6 <HAL_SPI_Receive+0x1d8>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e01e      	b.n	8003f18 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1c6      	bne.n	8003e72 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa57 	bl	800439c <SPI_EndRxTransaction>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	@ 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f32:	f7fe fb0d 	bl	8002550 <HAL_GetTick>
 8003f36:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f3e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d00c      	beq.n	8003f6a <HAL_SPI_TransmitReceive+0x4a>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f56:	d106      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x46>
 8003f60:	7ffb      	ldrb	r3, [r7, #31]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d001      	beq.n	8003f6a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	e17f      	b.n	800426a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x5c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x5c>
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e174      	b.n	800426a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x6e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e16d      	b.n	800426a <HAL_SPI_TransmitReceive+0x34a>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d003      	beq.n	8003faa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2205      	movs	r2, #5
 8003fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	887a      	ldrh	r2, [r7, #2]
 8003fd2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b40      	cmp	r3, #64	@ 0x40
 8003fec:	d007      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ffc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004006:	d17e      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_SPI_TransmitReceive+0xf6>
 8004010:	8afb      	ldrh	r3, [r7, #22]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d16c      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	881a      	ldrh	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403a:	e059      	b.n	80040f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d11b      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x162>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d016      	beq.n	8004082 <HAL_SPI_TransmitReceive+0x162>
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	2b01      	cmp	r3, #1
 8004058:	d113      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	881a      	ldrh	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	1c9a      	adds	r2, r3, #2
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d119      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x1a4>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d014      	beq.n	80040c4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	b292      	uxth	r2, r2
 80040a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040c0:	2301      	movs	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040c4:	f7fe fa44 	bl	8002550 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d80d      	bhi.n	80040f0 <HAL_SPI_TransmitReceive+0x1d0>
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d009      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0bc      	b.n	800426a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1a0      	bne.n	800403c <HAL_SPI_TransmitReceive+0x11c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d19b      	bne.n	800403c <HAL_SPI_TransmitReceive+0x11c>
 8004104:	e082      	b.n	800420c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x1f4>
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d171      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413a:	e05d      	b.n	80041f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d11c      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x264>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d017      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x264>
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	2b01      	cmp	r3, #1
 8004158:	d114      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d119      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x2a6>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d014      	beq.n	80041c6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041c2:	2301      	movs	r3, #1
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041c6:	f7fe f9c3 	bl	8002550 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d803      	bhi.n	80041de <HAL_SPI_TransmitReceive+0x2be>
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d102      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x2c4>
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e038      	b.n	800426a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d19c      	bne.n	800413c <HAL_SPI_TransmitReceive+0x21c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d197      	bne.n	800413c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800420c:	6a3a      	ldr	r2, [r7, #32]
 800420e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f915 	bl	8004440 <SPI_EndRxTxTransaction>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e01d      	b.n	800426a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004268:	2300      	movs	r3, #0
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3728      	adds	r7, #40	@ 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004280:	b2db      	uxtb	r3, r3
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800429c:	f7fe f958 	bl	8002550 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042ac:	f7fe f950 	bl	8002550 <HAL_GetTick>
 80042b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042b2:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	015b      	lsls	r3, r3, #5
 80042b8:	0d1b      	lsrs	r3, r3, #20
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c2:	e054      	b.n	800436e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d050      	beq.n	800436e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042cc:	f7fe f940 	bl	8002550 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d902      	bls.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d13d      	bne.n	800435e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042fa:	d111      	bne.n	8004320 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004304:	d004      	beq.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430e:	d107      	bne.n	8004320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800431e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004328:	d10f      	bne.n	800434a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e017      	b.n	800438e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3b01      	subs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	429a      	cmp	r2, r3
 800438a:	d19b      	bne.n	80042c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000018 	.word	0x20000018

0800439c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043b0:	d111      	bne.n	80043d6 <SPI_EndRxTransaction+0x3a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ba:	d004      	beq.n	80043c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c4:	d107      	bne.n	80043d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043de:	d117      	bne.n	8004410 <SPI_EndRxTransaction+0x74>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e8:	d112      	bne.n	8004410 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2101      	movs	r1, #1
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff49 	bl	800428c <SPI_WaitFlagStateUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01a      	beq.n	8004436 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e013      	b.n	8004438 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	@ 0x80
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ff36 	bl	800428c <SPI_WaitFlagStateUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e000      	b.n	8004438 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2201      	movs	r2, #1
 8004454:	2102      	movs	r1, #2
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff ff18 	bl	800428c <SPI_WaitFlagStateUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e013      	b.n	800449a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	@ 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff ff05 	bl	800428c <SPI_WaitFlagStateUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e000      	b.n	800449a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e042      	b.n	800453a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fd fe83 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2224      	movs	r2, #36	@ 0x24
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f972 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800450a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800451a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b08a      	sub	sp, #40	@ 0x28
 8004546:	af02      	add	r7, sp, #8
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	d175      	bne.n	800464e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_UART_Transmit+0x2c>
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06e      	b.n	8004650 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2221      	movs	r2, #33	@ 0x21
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004580:	f7fd ffe6 	bl	8002550 <HAL_GetTick>
 8004584:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800459a:	d108      	bne.n	80045ae <HAL_UART_Transmit+0x6c>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e003      	b.n	80045b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045b6:	e02e      	b.n	8004616 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	@ 0x80
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f848 	bl	8004658 <UART_WaitOnFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e03a      	b.n	8004650 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	3302      	adds	r3, #2
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e007      	b.n	8004608 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	781a      	ldrb	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1cb      	bne.n	80045b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	2140      	movs	r1, #64	@ 0x40
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f814 	bl	8004658 <UART_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e006      	b.n	8004650 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004668:	e03b      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d037      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fd ff6d 	bl	8002550 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <UART_WaitOnFlagUntilTimeout+0x30>
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e03a      	b.n	8004702 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d023      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b80      	cmp	r3, #128	@ 0x80
 800469e:	d020      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b40      	cmp	r3, #64	@ 0x40
 80046a4:	d01d      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d116      	bne.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f81d 	bl	800470a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2208      	movs	r2, #8
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e00f      	b.n	8004702 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4013      	ands	r3, r2
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	bf0c      	ite	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	2300      	movne	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d0b4      	beq.n	800466a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800470a:	b480      	push	{r7}
 800470c:	b095      	sub	sp, #84	@ 0x54
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004732:	643a      	str	r2, [r7, #64]	@ 0x40
 8004734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3314      	adds	r3, #20
 800474c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	61fb      	str	r3, [r7, #28]
   return(result);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800476c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	2b01      	cmp	r3, #1
 8004780:	d119      	bne.n	80047b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	60bb      	str	r3, [r7, #8]
   return(result);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f023 0310 	bic.w	r3, r3, #16
 8004798:	647b      	str	r3, [r7, #68]	@ 0x44
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047a2:	61ba      	str	r2, [r7, #24]
 80047a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	613b      	str	r3, [r7, #16]
   return(result);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e5      	bne.n	8004782 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047c4:	bf00      	nop
 80047c6:	3754      	adds	r7, #84	@ 0x54
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
	...

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800480a:	f023 030c 	bic.w	r3, r3, #12
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	430b      	orrs	r3, r1
 8004816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2c      	ldr	r2, [pc, #176]	@ (80048e4 <UART_SetConfig+0x114>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d103      	bne.n	8004840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004838:	f7fe fd6e 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	e002      	b.n	8004846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7fe fd56 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8004844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <UART_SetConfig+0x118>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	0119      	lsls	r1, r3, #4
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	fbb2 f2f3 	udiv	r2, r2, r3
 800487c:	4b1a      	ldr	r3, [pc, #104]	@ (80048e8 <UART_SetConfig+0x118>)
 800487e:	fba3 0302 	umull	r0, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2064      	movs	r0, #100	@ 0x64
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	3332      	adds	r3, #50	@ 0x32
 8004890:	4a15      	ldr	r2, [pc, #84]	@ (80048e8 <UART_SetConfig+0x118>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800489c:	4419      	add	r1, r3
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009a      	lsls	r2, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <UART_SetConfig+0x118>)
 80048b6:	fba3 0302 	umull	r0, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2064      	movs	r0, #100	@ 0x64
 80048be:	fb00 f303 	mul.w	r3, r0, r3
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	3332      	adds	r3, #50	@ 0x32
 80048c8:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <UART_SetConfig+0x118>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	440a      	add	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40013800 	.word	0x40013800
 80048e8:	51eb851f 	.word	0x51eb851f

080048ec <__cvt>:
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f2:	461d      	mov	r5, r3
 80048f4:	bfbb      	ittet	lt
 80048f6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80048fa:	461d      	movlt	r5, r3
 80048fc:	2300      	movge	r3, #0
 80048fe:	232d      	movlt	r3, #45	@ 0x2d
 8004900:	b088      	sub	sp, #32
 8004902:	4614      	mov	r4, r2
 8004904:	bfb8      	it	lt
 8004906:	4614      	movlt	r4, r2
 8004908:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800490a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800490c:	7013      	strb	r3, [r2, #0]
 800490e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004910:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004914:	f023 0820 	bic.w	r8, r3, #32
 8004918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800491c:	d005      	beq.n	800492a <__cvt+0x3e>
 800491e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004922:	d100      	bne.n	8004926 <__cvt+0x3a>
 8004924:	3601      	adds	r6, #1
 8004926:	2302      	movs	r3, #2
 8004928:	e000      	b.n	800492c <__cvt+0x40>
 800492a:	2303      	movs	r3, #3
 800492c:	aa07      	add	r2, sp, #28
 800492e:	9204      	str	r2, [sp, #16]
 8004930:	aa06      	add	r2, sp, #24
 8004932:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004936:	e9cd 3600 	strd	r3, r6, [sp]
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f001 fa07 	bl	8005d50 <_dtoa_r>
 8004942:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004946:	4607      	mov	r7, r0
 8004948:	d119      	bne.n	800497e <__cvt+0x92>
 800494a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800494c:	07db      	lsls	r3, r3, #31
 800494e:	d50e      	bpl.n	800496e <__cvt+0x82>
 8004950:	eb00 0906 	add.w	r9, r0, r6
 8004954:	2200      	movs	r2, #0
 8004956:	2300      	movs	r3, #0
 8004958:	4620      	mov	r0, r4
 800495a:	4629      	mov	r1, r5
 800495c:	f7fc f824 	bl	80009a8 <__aeabi_dcmpeq>
 8004960:	b108      	cbz	r0, 8004966 <__cvt+0x7a>
 8004962:	f8cd 901c 	str.w	r9, [sp, #28]
 8004966:	2230      	movs	r2, #48	@ 0x30
 8004968:	9b07      	ldr	r3, [sp, #28]
 800496a:	454b      	cmp	r3, r9
 800496c:	d31e      	bcc.n	80049ac <__cvt+0xc0>
 800496e:	4638      	mov	r0, r7
 8004970:	9b07      	ldr	r3, [sp, #28]
 8004972:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004974:	1bdb      	subs	r3, r3, r7
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	b008      	add	sp, #32
 800497a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004982:	eb00 0906 	add.w	r9, r0, r6
 8004986:	d1e5      	bne.n	8004954 <__cvt+0x68>
 8004988:	7803      	ldrb	r3, [r0, #0]
 800498a:	2b30      	cmp	r3, #48	@ 0x30
 800498c:	d10a      	bne.n	80049a4 <__cvt+0xb8>
 800498e:	2200      	movs	r2, #0
 8004990:	2300      	movs	r3, #0
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fc f807 	bl	80009a8 <__aeabi_dcmpeq>
 800499a:	b918      	cbnz	r0, 80049a4 <__cvt+0xb8>
 800499c:	f1c6 0601 	rsb	r6, r6, #1
 80049a0:	f8ca 6000 	str.w	r6, [sl]
 80049a4:	f8da 3000 	ldr.w	r3, [sl]
 80049a8:	4499      	add	r9, r3
 80049aa:	e7d3      	b.n	8004954 <__cvt+0x68>
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	9107      	str	r1, [sp, #28]
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e7d9      	b.n	8004968 <__cvt+0x7c>

080049b4 <__exponent>:
 80049b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049b6:	2900      	cmp	r1, #0
 80049b8:	bfb6      	itet	lt
 80049ba:	232d      	movlt	r3, #45	@ 0x2d
 80049bc:	232b      	movge	r3, #43	@ 0x2b
 80049be:	4249      	neglt	r1, r1
 80049c0:	2909      	cmp	r1, #9
 80049c2:	7002      	strb	r2, [r0, #0]
 80049c4:	7043      	strb	r3, [r0, #1]
 80049c6:	dd29      	ble.n	8004a1c <__exponent+0x68>
 80049c8:	f10d 0307 	add.w	r3, sp, #7
 80049cc:	461d      	mov	r5, r3
 80049ce:	270a      	movs	r7, #10
 80049d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80049d4:	461a      	mov	r2, r3
 80049d6:	fb07 1416 	mls	r4, r7, r6, r1
 80049da:	3430      	adds	r4, #48	@ 0x30
 80049dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049e0:	460c      	mov	r4, r1
 80049e2:	2c63      	cmp	r4, #99	@ 0x63
 80049e4:	4631      	mov	r1, r6
 80049e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80049ea:	dcf1      	bgt.n	80049d0 <__exponent+0x1c>
 80049ec:	3130      	adds	r1, #48	@ 0x30
 80049ee:	1e94      	subs	r4, r2, #2
 80049f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049f4:	4623      	mov	r3, r4
 80049f6:	1c41      	adds	r1, r0, #1
 80049f8:	42ab      	cmp	r3, r5
 80049fa:	d30a      	bcc.n	8004a12 <__exponent+0x5e>
 80049fc:	f10d 0309 	add.w	r3, sp, #9
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	42ac      	cmp	r4, r5
 8004a04:	bf88      	it	hi
 8004a06:	2300      	movhi	r3, #0
 8004a08:	3302      	adds	r3, #2
 8004a0a:	4403      	add	r3, r0
 8004a0c:	1a18      	subs	r0, r3, r0
 8004a0e:	b003      	add	sp, #12
 8004a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a1a:	e7ed      	b.n	80049f8 <__exponent+0x44>
 8004a1c:	2330      	movs	r3, #48	@ 0x30
 8004a1e:	3130      	adds	r1, #48	@ 0x30
 8004a20:	7083      	strb	r3, [r0, #2]
 8004a22:	70c1      	strb	r1, [r0, #3]
 8004a24:	1d03      	adds	r3, r0, #4
 8004a26:	e7f1      	b.n	8004a0c <__exponent+0x58>

08004a28 <_printf_float>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	b091      	sub	sp, #68	@ 0x44
 8004a2e:	460c      	mov	r4, r1
 8004a30:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004a34:	4616      	mov	r6, r2
 8004a36:	461f      	mov	r7, r3
 8004a38:	4605      	mov	r5, r0
 8004a3a:	f001 f877 	bl	8005b2c <_localeconv_r>
 8004a3e:	6803      	ldr	r3, [r0, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	9308      	str	r3, [sp, #32]
 8004a44:	f7fb fb84 	bl	8000150 <strlen>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a50:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a52:	3307      	adds	r3, #7
 8004a54:	f023 0307 	bic.w	r3, r3, #7
 8004a58:	f103 0208 	add.w	r2, r3, #8
 8004a5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a60:	f8d4 b000 	ldr.w	fp, [r4]
 8004a64:	f8c8 2000 	str.w	r2, [r8]
 8004a68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a72:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a76:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a82:	4b9c      	ldr	r3, [pc, #624]	@ (8004cf4 <_printf_float+0x2cc>)
 8004a84:	f7fb ffc2 	bl	8000a0c <__aeabi_dcmpun>
 8004a88:	bb70      	cbnz	r0, 8004ae8 <_printf_float+0xc0>
 8004a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a92:	4b98      	ldr	r3, [pc, #608]	@ (8004cf4 <_printf_float+0x2cc>)
 8004a94:	f7fb ff9c 	bl	80009d0 <__aeabi_dcmple>
 8004a98:	bb30      	cbnz	r0, 8004ae8 <_printf_float+0xc0>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	f7fb ff8b 	bl	80009bc <__aeabi_dcmplt>
 8004aa6:	b110      	cbz	r0, 8004aae <_printf_float+0x86>
 8004aa8:	232d      	movs	r3, #45	@ 0x2d
 8004aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aae:	4a92      	ldr	r2, [pc, #584]	@ (8004cf8 <_printf_float+0x2d0>)
 8004ab0:	4b92      	ldr	r3, [pc, #584]	@ (8004cfc <_printf_float+0x2d4>)
 8004ab2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ab6:	bf94      	ite	ls
 8004ab8:	4690      	movls	r8, r2
 8004aba:	4698      	movhi	r8, r3
 8004abc:	2303      	movs	r3, #3
 8004abe:	f04f 0900 	mov.w	r9, #0
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f02b 0304 	bic.w	r3, fp, #4
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	4633      	mov	r3, r6
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	9700      	str	r7, [sp, #0]
 8004ad2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004ad4:	f000 f9d4 	bl	8004e80 <_printf_common>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f040 8090 	bne.w	8004bfe <_printf_float+0x1d6>
 8004ade:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae2:	b011      	add	sp, #68	@ 0x44
 8004ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	4640      	mov	r0, r8
 8004aee:	4649      	mov	r1, r9
 8004af0:	f7fb ff8c 	bl	8000a0c <__aeabi_dcmpun>
 8004af4:	b148      	cbz	r0, 8004b0a <_printf_float+0xe2>
 8004af6:	464b      	mov	r3, r9
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bfb8      	it	lt
 8004afc:	232d      	movlt	r3, #45	@ 0x2d
 8004afe:	4a80      	ldr	r2, [pc, #512]	@ (8004d00 <_printf_float+0x2d8>)
 8004b00:	bfb8      	it	lt
 8004b02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b06:	4b7f      	ldr	r3, [pc, #508]	@ (8004d04 <_printf_float+0x2dc>)
 8004b08:	e7d3      	b.n	8004ab2 <_printf_float+0x8a>
 8004b0a:	6863      	ldr	r3, [r4, #4]
 8004b0c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	d13f      	bne.n	8004b94 <_printf_float+0x16c>
 8004b14:	2306      	movs	r3, #6
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	9206      	str	r2, [sp, #24]
 8004b22:	aa0e      	add	r2, sp, #56	@ 0x38
 8004b24:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004b28:	aa0d      	add	r2, sp, #52	@ 0x34
 8004b2a:	9203      	str	r2, [sp, #12]
 8004b2c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004b30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b34:	6863      	ldr	r3, [r4, #4]
 8004b36:	4642      	mov	r2, r8
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b40:	f7ff fed4 	bl	80048ec <__cvt>
 8004b44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b46:	4680      	mov	r8, r0
 8004b48:	2947      	cmp	r1, #71	@ 0x47
 8004b4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b4c:	d128      	bne.n	8004ba0 <_printf_float+0x178>
 8004b4e:	1cc8      	adds	r0, r1, #3
 8004b50:	db02      	blt.n	8004b58 <_printf_float+0x130>
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	4299      	cmp	r1, r3
 8004b56:	dd40      	ble.n	8004bda <_printf_float+0x1b2>
 8004b58:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b5c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b60:	4652      	mov	r2, sl
 8004b62:	3901      	subs	r1, #1
 8004b64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b68:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b6a:	f7ff ff23 	bl	80049b4 <__exponent>
 8004b6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b70:	4681      	mov	r9, r0
 8004b72:	1813      	adds	r3, r2, r0
 8004b74:	2a01      	cmp	r2, #1
 8004b76:	6123      	str	r3, [r4, #16]
 8004b78:	dc02      	bgt.n	8004b80 <_printf_float+0x158>
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	07d2      	lsls	r2, r2, #31
 8004b7e:	d501      	bpl.n	8004b84 <_printf_float+0x15c>
 8004b80:	3301      	adds	r3, #1
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d09e      	beq.n	8004aca <_printf_float+0xa2>
 8004b8c:	232d      	movs	r3, #45	@ 0x2d
 8004b8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b92:	e79a      	b.n	8004aca <_printf_float+0xa2>
 8004b94:	2947      	cmp	r1, #71	@ 0x47
 8004b96:	d1bf      	bne.n	8004b18 <_printf_float+0xf0>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1bd      	bne.n	8004b18 <_printf_float+0xf0>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e7ba      	b.n	8004b16 <_printf_float+0xee>
 8004ba0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ba4:	d9dc      	bls.n	8004b60 <_printf_float+0x138>
 8004ba6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004baa:	d118      	bne.n	8004bde <_printf_float+0x1b6>
 8004bac:	2900      	cmp	r1, #0
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	dd0b      	ble.n	8004bca <_printf_float+0x1a2>
 8004bb2:	6121      	str	r1, [r4, #16]
 8004bb4:	b913      	cbnz	r3, 8004bbc <_printf_float+0x194>
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	07d0      	lsls	r0, r2, #31
 8004bba:	d502      	bpl.n	8004bc2 <_printf_float+0x19a>
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	440b      	add	r3, r1
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	f04f 0900 	mov.w	r9, #0
 8004bc6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bc8:	e7dc      	b.n	8004b84 <_printf_float+0x15c>
 8004bca:	b913      	cbnz	r3, 8004bd2 <_printf_float+0x1aa>
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	07d2      	lsls	r2, r2, #31
 8004bd0:	d501      	bpl.n	8004bd6 <_printf_float+0x1ae>
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	e7f4      	b.n	8004bc0 <_printf_float+0x198>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e7f2      	b.n	8004bc0 <_printf_float+0x198>
 8004bda:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004be0:	4299      	cmp	r1, r3
 8004be2:	db05      	blt.n	8004bf0 <_printf_float+0x1c8>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	6121      	str	r1, [r4, #16]
 8004be8:	07d8      	lsls	r0, r3, #31
 8004bea:	d5ea      	bpl.n	8004bc2 <_printf_float+0x19a>
 8004bec:	1c4b      	adds	r3, r1, #1
 8004bee:	e7e7      	b.n	8004bc0 <_printf_float+0x198>
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	bfcc      	ite	gt
 8004bf4:	2201      	movgt	r2, #1
 8004bf6:	f1c1 0202 	rsble	r2, r1, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	e7e0      	b.n	8004bc0 <_printf_float+0x198>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	055a      	lsls	r2, r3, #21
 8004c02:	d407      	bmi.n	8004c14 <_printf_float+0x1ec>
 8004c04:	6923      	ldr	r3, [r4, #16]
 8004c06:	4642      	mov	r2, r8
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d12b      	bne.n	8004c6a <_printf_float+0x242>
 8004c12:	e764      	b.n	8004ade <_printf_float+0xb6>
 8004c14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c18:	f240 80dc 	bls.w	8004dd4 <_printf_float+0x3ac>
 8004c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c20:	2200      	movs	r2, #0
 8004c22:	2300      	movs	r3, #0
 8004c24:	f7fb fec0 	bl	80009a8 <__aeabi_dcmpeq>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d033      	beq.n	8004c94 <_printf_float+0x26c>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	4a35      	ldr	r2, [pc, #212]	@ (8004d08 <_printf_float+0x2e0>)
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f af51 	beq.w	8004ade <_printf_float+0xb6>
 8004c3c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004c40:	4543      	cmp	r3, r8
 8004c42:	db02      	blt.n	8004c4a <_printf_float+0x222>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	07d8      	lsls	r0, r3, #31
 8004c48:	d50f      	bpl.n	8004c6a <_printf_float+0x242>
 8004c4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	f43f af42 	beq.w	8004ade <_printf_float+0xb6>
 8004c5a:	f04f 0900 	mov.w	r9, #0
 8004c5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c62:	f104 0a1a 	add.w	sl, r4, #26
 8004c66:	45c8      	cmp	r8, r9
 8004c68:	dc09      	bgt.n	8004c7e <_printf_float+0x256>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	f100 8102 	bmi.w	8004e76 <_printf_float+0x44e>
 8004c72:	68e0      	ldr	r0, [r4, #12]
 8004c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c76:	4298      	cmp	r0, r3
 8004c78:	bfb8      	it	lt
 8004c7a:	4618      	movlt	r0, r3
 8004c7c:	e731      	b.n	8004ae2 <_printf_float+0xba>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4652      	mov	r2, sl
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f af28 	beq.w	8004ade <_printf_float+0xb6>
 8004c8e:	f109 0901 	add.w	r9, r9, #1
 8004c92:	e7e8      	b.n	8004c66 <_printf_float+0x23e>
 8004c94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dc38      	bgt.n	8004d0c <_printf_float+0x2e4>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <_printf_float+0x2e0>)
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f af1a 	beq.w	8004ade <_printf_float+0xb6>
 8004caa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004cae:	ea59 0303 	orrs.w	r3, r9, r3
 8004cb2:	d102      	bne.n	8004cba <_printf_float+0x292>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	07d9      	lsls	r1, r3, #31
 8004cb8:	d5d7      	bpl.n	8004c6a <_printf_float+0x242>
 8004cba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f43f af0a 	beq.w	8004ade <_printf_float+0xb6>
 8004cca:	f04f 0a00 	mov.w	sl, #0
 8004cce:	f104 0b1a 	add.w	fp, r4, #26
 8004cd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cd4:	425b      	negs	r3, r3
 8004cd6:	4553      	cmp	r3, sl
 8004cd8:	dc01      	bgt.n	8004cde <_printf_float+0x2b6>
 8004cda:	464b      	mov	r3, r9
 8004cdc:	e793      	b.n	8004c06 <_printf_float+0x1de>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	465a      	mov	r2, fp
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f aef8 	beq.w	8004ade <_printf_float+0xb6>
 8004cee:	f10a 0a01 	add.w	sl, sl, #1
 8004cf2:	e7ee      	b.n	8004cd2 <_printf_float+0x2aa>
 8004cf4:	7fefffff 	.word	0x7fefffff
 8004cf8:	08009b82 	.word	0x08009b82
 8004cfc:	08009b86 	.word	0x08009b86
 8004d00:	08009b8a 	.word	0x08009b8a
 8004d04:	08009b8e 	.word	0x08009b8e
 8004d08:	08009f20 	.word	0x08009f20
 8004d0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d0e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d12:	4553      	cmp	r3, sl
 8004d14:	bfa8      	it	ge
 8004d16:	4653      	movge	r3, sl
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	4699      	mov	r9, r3
 8004d1c:	dc36      	bgt.n	8004d8c <_printf_float+0x364>
 8004d1e:	f04f 0b00 	mov.w	fp, #0
 8004d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d26:	f104 021a 	add.w	r2, r4, #26
 8004d2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d2e:	eba3 0309 	sub.w	r3, r3, r9
 8004d32:	455b      	cmp	r3, fp
 8004d34:	dc31      	bgt.n	8004d9a <_printf_float+0x372>
 8004d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d38:	459a      	cmp	sl, r3
 8004d3a:	dc3a      	bgt.n	8004db2 <_printf_float+0x38a>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	07da      	lsls	r2, r3, #31
 8004d40:	d437      	bmi.n	8004db2 <_printf_float+0x38a>
 8004d42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d44:	ebaa 0903 	sub.w	r9, sl, r3
 8004d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d4a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d4e:	4599      	cmp	r9, r3
 8004d50:	bfa8      	it	ge
 8004d52:	4699      	movge	r9, r3
 8004d54:	f1b9 0f00 	cmp.w	r9, #0
 8004d58:	dc33      	bgt.n	8004dc2 <_printf_float+0x39a>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d62:	f104 0b1a 	add.w	fp, r4, #26
 8004d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d68:	ebaa 0303 	sub.w	r3, sl, r3
 8004d6c:	eba3 0309 	sub.w	r3, r3, r9
 8004d70:	4543      	cmp	r3, r8
 8004d72:	f77f af7a 	ble.w	8004c6a <_printf_float+0x242>
 8004d76:	2301      	movs	r3, #1
 8004d78:	465a      	mov	r2, fp
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f aeac 	beq.w	8004ade <_printf_float+0xb6>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	e7ec      	b.n	8004d66 <_printf_float+0x33e>
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b8      	blx	r7
 8004d94:	3001      	adds	r0, #1
 8004d96:	d1c2      	bne.n	8004d1e <_printf_float+0x2f6>
 8004d98:	e6a1      	b.n	8004ade <_printf_float+0xb6>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	920a      	str	r2, [sp, #40]	@ 0x28
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f ae9a 	beq.w	8004ade <_printf_float+0xb6>
 8004daa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dac:	f10b 0b01 	add.w	fp, fp, #1
 8004db0:	e7bb      	b.n	8004d2a <_printf_float+0x302>
 8004db2:	4631      	mov	r1, r6
 8004db4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d1c0      	bne.n	8004d42 <_printf_float+0x31a>
 8004dc0:	e68d      	b.n	8004ade <_printf_float+0xb6>
 8004dc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	4442      	add	r2, r8
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d1c3      	bne.n	8004d5a <_printf_float+0x332>
 8004dd2:	e684      	b.n	8004ade <_printf_float+0xb6>
 8004dd4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004dd8:	f1ba 0f01 	cmp.w	sl, #1
 8004ddc:	dc01      	bgt.n	8004de2 <_printf_float+0x3ba>
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	d536      	bpl.n	8004e50 <_printf_float+0x428>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4642      	mov	r2, r8
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f ae76 	beq.w	8004ade <_printf_float+0xb6>
 8004df2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004df6:	4631      	mov	r1, r6
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	f43f ae6e 	beq.w	8004ade <_printf_float+0xb6>
 8004e02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e0e:	f7fb fdcb 	bl	80009a8 <__aeabi_dcmpeq>
 8004e12:	b9c0      	cbnz	r0, 8004e46 <_printf_float+0x41e>
 8004e14:	4653      	mov	r3, sl
 8004e16:	f108 0201 	add.w	r2, r8, #1
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	d10c      	bne.n	8004e3e <_printf_float+0x416>
 8004e24:	e65b      	b.n	8004ade <_printf_float+0xb6>
 8004e26:	2301      	movs	r3, #1
 8004e28:	465a      	mov	r2, fp
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f ae54 	beq.w	8004ade <_printf_float+0xb6>
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	45d0      	cmp	r8, sl
 8004e3c:	dbf3      	blt.n	8004e26 <_printf_float+0x3fe>
 8004e3e:	464b      	mov	r3, r9
 8004e40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e44:	e6e0      	b.n	8004c08 <_printf_float+0x1e0>
 8004e46:	f04f 0800 	mov.w	r8, #0
 8004e4a:	f104 0b1a 	add.w	fp, r4, #26
 8004e4e:	e7f4      	b.n	8004e3a <_printf_float+0x412>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4642      	mov	r2, r8
 8004e54:	e7e1      	b.n	8004e1a <_printf_float+0x3f2>
 8004e56:	2301      	movs	r3, #1
 8004e58:	464a      	mov	r2, r9
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae3c 	beq.w	8004ade <_printf_float+0xb6>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	4543      	cmp	r3, r8
 8004e72:	dcf0      	bgt.n	8004e56 <_printf_float+0x42e>
 8004e74:	e6fd      	b.n	8004c72 <_printf_float+0x24a>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	f104 0919 	add.w	r9, r4, #25
 8004e7e:	e7f4      	b.n	8004e6a <_printf_float+0x442>

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4698      	mov	r8, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfb8      	it	lt
 8004e92:	4613      	movlt	r3, r2
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc2b      	bgt.n	8004f20 <_printf_common+0xa0>
 8004ec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	3b00      	subs	r3, #0
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d430      	bmi.n	8004f3a <_printf_common+0xba>
 8004ed8:	4641      	mov	r1, r8
 8004eda:	4638      	mov	r0, r7
 8004edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ee0:	47c8      	blx	r9
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d023      	beq.n	8004f2e <_printf_common+0xae>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf14      	ite	ne
 8004ef2:	2500      	movne	r5, #0
 8004ef4:	6833      	ldreq	r3, [r6, #0]
 8004ef6:	f04f 0600 	mov.w	r6, #0
 8004efa:	bf08      	it	eq
 8004efc:	68e5      	ldreq	r5, [r4, #12]
 8004efe:	f104 041a 	add.w	r4, r4, #26
 8004f02:	bf08      	it	eq
 8004f04:	1aed      	subeq	r5, r5, r3
 8004f06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f0a:	bf08      	it	eq
 8004f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f10:	4293      	cmp	r3, r2
 8004f12:	bfc4      	itt	gt
 8004f14:	1a9b      	subgt	r3, r3, r2
 8004f16:	18ed      	addgt	r5, r5, r3
 8004f18:	42b5      	cmp	r5, r6
 8004f1a:	d11a      	bne.n	8004f52 <_printf_common+0xd2>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e008      	b.n	8004f32 <_printf_common+0xb2>
 8004f20:	2301      	movs	r3, #1
 8004f22:	4652      	mov	r2, sl
 8004f24:	4641      	mov	r1, r8
 8004f26:	4638      	mov	r0, r7
 8004f28:	47c8      	blx	r9
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d103      	bne.n	8004f36 <_printf_common+0xb6>
 8004f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f36:	3501      	adds	r5, #1
 8004f38:	e7c1      	b.n	8004ebe <_printf_common+0x3e>
 8004f3a:	2030      	movs	r0, #48	@ 0x30
 8004f3c:	18e1      	adds	r1, r4, r3
 8004f3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f48:	4422      	add	r2, r4
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f50:	e7c2      	b.n	8004ed8 <_printf_common+0x58>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4622      	mov	r2, r4
 8004f56:	4641      	mov	r1, r8
 8004f58:	4638      	mov	r0, r7
 8004f5a:	47c8      	blx	r9
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d0e6      	beq.n	8004f2e <_printf_common+0xae>
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7d9      	b.n	8004f18 <_printf_common+0x98>

08004f64 <_printf_i>:
 8004f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	7e0f      	ldrb	r7, [r1, #24]
 8004f6a:	4691      	mov	r9, r2
 8004f6c:	2f78      	cmp	r7, #120	@ 0x78
 8004f6e:	4680      	mov	r8, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	469a      	mov	sl, r3
 8004f74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f7a:	d807      	bhi.n	8004f8c <_printf_i+0x28>
 8004f7c:	2f62      	cmp	r7, #98	@ 0x62
 8004f7e:	d80a      	bhi.n	8004f96 <_printf_i+0x32>
 8004f80:	2f00      	cmp	r7, #0
 8004f82:	f000 80d3 	beq.w	800512c <_printf_i+0x1c8>
 8004f86:	2f58      	cmp	r7, #88	@ 0x58
 8004f88:	f000 80ba 	beq.w	8005100 <_printf_i+0x19c>
 8004f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f94:	e03a      	b.n	800500c <_printf_i+0xa8>
 8004f96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f9a:	2b15      	cmp	r3, #21
 8004f9c:	d8f6      	bhi.n	8004f8c <_printf_i+0x28>
 8004f9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004fa4 <_printf_i+0x40>)
 8004fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	08005011 	.word	0x08005011
 8004fac:	08004f8d 	.word	0x08004f8d
 8004fb0:	08004f8d 	.word	0x08004f8d
 8004fb4:	08004f8d 	.word	0x08004f8d
 8004fb8:	08004f8d 	.word	0x08004f8d
 8004fbc:	08005011 	.word	0x08005011
 8004fc0:	08004f8d 	.word	0x08004f8d
 8004fc4:	08004f8d 	.word	0x08004f8d
 8004fc8:	08004f8d 	.word	0x08004f8d
 8004fcc:	08004f8d 	.word	0x08004f8d
 8004fd0:	08005113 	.word	0x08005113
 8004fd4:	0800503b 	.word	0x0800503b
 8004fd8:	080050cd 	.word	0x080050cd
 8004fdc:	08004f8d 	.word	0x08004f8d
 8004fe0:	08004f8d 	.word	0x08004f8d
 8004fe4:	08005135 	.word	0x08005135
 8004fe8:	08004f8d 	.word	0x08004f8d
 8004fec:	0800503b 	.word	0x0800503b
 8004ff0:	08004f8d 	.word	0x08004f8d
 8004ff4:	08004f8d 	.word	0x08004f8d
 8004ff8:	080050d5 	.word	0x080050d5
 8004ffc:	6833      	ldr	r3, [r6, #0]
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6032      	str	r2, [r6, #0]
 8005004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005008:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800500c:	2301      	movs	r3, #1
 800500e:	e09e      	b.n	800514e <_printf_i+0x1ea>
 8005010:	6833      	ldr	r3, [r6, #0]
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	1d19      	adds	r1, r3, #4
 8005016:	6031      	str	r1, [r6, #0]
 8005018:	0606      	lsls	r6, r0, #24
 800501a:	d501      	bpl.n	8005020 <_printf_i+0xbc>
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	e003      	b.n	8005028 <_printf_i+0xc4>
 8005020:	0645      	lsls	r5, r0, #25
 8005022:	d5fb      	bpl.n	800501c <_printf_i+0xb8>
 8005024:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005028:	2d00      	cmp	r5, #0
 800502a:	da03      	bge.n	8005034 <_printf_i+0xd0>
 800502c:	232d      	movs	r3, #45	@ 0x2d
 800502e:	426d      	negs	r5, r5
 8005030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005034:	230a      	movs	r3, #10
 8005036:	4859      	ldr	r0, [pc, #356]	@ (800519c <_printf_i+0x238>)
 8005038:	e011      	b.n	800505e <_printf_i+0xfa>
 800503a:	6821      	ldr	r1, [r4, #0]
 800503c:	6833      	ldr	r3, [r6, #0]
 800503e:	0608      	lsls	r0, r1, #24
 8005040:	f853 5b04 	ldr.w	r5, [r3], #4
 8005044:	d402      	bmi.n	800504c <_printf_i+0xe8>
 8005046:	0649      	lsls	r1, r1, #25
 8005048:	bf48      	it	mi
 800504a:	b2ad      	uxthmi	r5, r5
 800504c:	2f6f      	cmp	r7, #111	@ 0x6f
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	bf14      	ite	ne
 8005052:	230a      	movne	r3, #10
 8005054:	2308      	moveq	r3, #8
 8005056:	4851      	ldr	r0, [pc, #324]	@ (800519c <_printf_i+0x238>)
 8005058:	2100      	movs	r1, #0
 800505a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800505e:	6866      	ldr	r6, [r4, #4]
 8005060:	2e00      	cmp	r6, #0
 8005062:	bfa8      	it	ge
 8005064:	6821      	ldrge	r1, [r4, #0]
 8005066:	60a6      	str	r6, [r4, #8]
 8005068:	bfa4      	itt	ge
 800506a:	f021 0104 	bicge.w	r1, r1, #4
 800506e:	6021      	strge	r1, [r4, #0]
 8005070:	b90d      	cbnz	r5, 8005076 <_printf_i+0x112>
 8005072:	2e00      	cmp	r6, #0
 8005074:	d04b      	beq.n	800510e <_printf_i+0x1aa>
 8005076:	4616      	mov	r6, r2
 8005078:	fbb5 f1f3 	udiv	r1, r5, r3
 800507c:	fb03 5711 	mls	r7, r3, r1, r5
 8005080:	5dc7      	ldrb	r7, [r0, r7]
 8005082:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005086:	462f      	mov	r7, r5
 8005088:	42bb      	cmp	r3, r7
 800508a:	460d      	mov	r5, r1
 800508c:	d9f4      	bls.n	8005078 <_printf_i+0x114>
 800508e:	2b08      	cmp	r3, #8
 8005090:	d10b      	bne.n	80050aa <_printf_i+0x146>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	07df      	lsls	r7, r3, #31
 8005096:	d508      	bpl.n	80050aa <_printf_i+0x146>
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	6861      	ldr	r1, [r4, #4]
 800509c:	4299      	cmp	r1, r3
 800509e:	bfde      	ittt	le
 80050a0:	2330      	movle	r3, #48	@ 0x30
 80050a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050aa:	1b92      	subs	r2, r2, r6
 80050ac:	6122      	str	r2, [r4, #16]
 80050ae:	464b      	mov	r3, r9
 80050b0:	4621      	mov	r1, r4
 80050b2:	4640      	mov	r0, r8
 80050b4:	f8cd a000 	str.w	sl, [sp]
 80050b8:	aa03      	add	r2, sp, #12
 80050ba:	f7ff fee1 	bl	8004e80 <_printf_common>
 80050be:	3001      	adds	r0, #1
 80050c0:	d14a      	bne.n	8005158 <_printf_i+0x1f4>
 80050c2:	f04f 30ff 	mov.w	r0, #4294967295
 80050c6:	b004      	add	sp, #16
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	f043 0320 	orr.w	r3, r3, #32
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	2778      	movs	r7, #120	@ 0x78
 80050d6:	4832      	ldr	r0, [pc, #200]	@ (80051a0 <_printf_i+0x23c>)
 80050d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	061f      	lsls	r7, r3, #24
 80050e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80050e6:	d402      	bmi.n	80050ee <_printf_i+0x18a>
 80050e8:	065f      	lsls	r7, r3, #25
 80050ea:	bf48      	it	mi
 80050ec:	b2ad      	uxthmi	r5, r5
 80050ee:	6031      	str	r1, [r6, #0]
 80050f0:	07d9      	lsls	r1, r3, #31
 80050f2:	bf44      	itt	mi
 80050f4:	f043 0320 	orrmi.w	r3, r3, #32
 80050f8:	6023      	strmi	r3, [r4, #0]
 80050fa:	b11d      	cbz	r5, 8005104 <_printf_i+0x1a0>
 80050fc:	2310      	movs	r3, #16
 80050fe:	e7ab      	b.n	8005058 <_printf_i+0xf4>
 8005100:	4826      	ldr	r0, [pc, #152]	@ (800519c <_printf_i+0x238>)
 8005102:	e7e9      	b.n	80050d8 <_printf_i+0x174>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	f023 0320 	bic.w	r3, r3, #32
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	e7f6      	b.n	80050fc <_printf_i+0x198>
 800510e:	4616      	mov	r6, r2
 8005110:	e7bd      	b.n	800508e <_printf_i+0x12a>
 8005112:	6833      	ldr	r3, [r6, #0]
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	1d18      	adds	r0, r3, #4
 8005118:	6961      	ldr	r1, [r4, #20]
 800511a:	6030      	str	r0, [r6, #0]
 800511c:	062e      	lsls	r6, r5, #24
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	d501      	bpl.n	8005126 <_printf_i+0x1c2>
 8005122:	6019      	str	r1, [r3, #0]
 8005124:	e002      	b.n	800512c <_printf_i+0x1c8>
 8005126:	0668      	lsls	r0, r5, #25
 8005128:	d5fb      	bpl.n	8005122 <_printf_i+0x1be>
 800512a:	8019      	strh	r1, [r3, #0]
 800512c:	2300      	movs	r3, #0
 800512e:	4616      	mov	r6, r2
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	e7bc      	b.n	80050ae <_printf_i+0x14a>
 8005134:	6833      	ldr	r3, [r6, #0]
 8005136:	2100      	movs	r1, #0
 8005138:	1d1a      	adds	r2, r3, #4
 800513a:	6032      	str	r2, [r6, #0]
 800513c:	681e      	ldr	r6, [r3, #0]
 800513e:	6862      	ldr	r2, [r4, #4]
 8005140:	4630      	mov	r0, r6
 8005142:	f000 fd6a 	bl	8005c1a <memchr>
 8005146:	b108      	cbz	r0, 800514c <_printf_i+0x1e8>
 8005148:	1b80      	subs	r0, r0, r6
 800514a:	6060      	str	r0, [r4, #4]
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	6123      	str	r3, [r4, #16]
 8005150:	2300      	movs	r3, #0
 8005152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005156:	e7aa      	b.n	80050ae <_printf_i+0x14a>
 8005158:	4632      	mov	r2, r6
 800515a:	4649      	mov	r1, r9
 800515c:	4640      	mov	r0, r8
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	47d0      	blx	sl
 8005162:	3001      	adds	r0, #1
 8005164:	d0ad      	beq.n	80050c2 <_printf_i+0x15e>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	079b      	lsls	r3, r3, #30
 800516a:	d413      	bmi.n	8005194 <_printf_i+0x230>
 800516c:	68e0      	ldr	r0, [r4, #12]
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	4298      	cmp	r0, r3
 8005172:	bfb8      	it	lt
 8005174:	4618      	movlt	r0, r3
 8005176:	e7a6      	b.n	80050c6 <_printf_i+0x162>
 8005178:	2301      	movs	r3, #1
 800517a:	4632      	mov	r2, r6
 800517c:	4649      	mov	r1, r9
 800517e:	4640      	mov	r0, r8
 8005180:	47d0      	blx	sl
 8005182:	3001      	adds	r0, #1
 8005184:	d09d      	beq.n	80050c2 <_printf_i+0x15e>
 8005186:	3501      	adds	r5, #1
 8005188:	68e3      	ldr	r3, [r4, #12]
 800518a:	9903      	ldr	r1, [sp, #12]
 800518c:	1a5b      	subs	r3, r3, r1
 800518e:	42ab      	cmp	r3, r5
 8005190:	dcf2      	bgt.n	8005178 <_printf_i+0x214>
 8005192:	e7eb      	b.n	800516c <_printf_i+0x208>
 8005194:	2500      	movs	r5, #0
 8005196:	f104 0619 	add.w	r6, r4, #25
 800519a:	e7f5      	b.n	8005188 <_printf_i+0x224>
 800519c:	08009b92 	.word	0x08009b92
 80051a0:	08009ba3 	.word	0x08009ba3

080051a4 <_scanf_float>:
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	b087      	sub	sp, #28
 80051aa:	9303      	str	r3, [sp, #12]
 80051ac:	688b      	ldr	r3, [r1, #8]
 80051ae:	4617      	mov	r7, r2
 80051b0:	1e5a      	subs	r2, r3, #1
 80051b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80051b6:	bf82      	ittt	hi
 80051b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80051bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80051c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80051c4:	460a      	mov	r2, r1
 80051c6:	f04f 0500 	mov.w	r5, #0
 80051ca:	bf88      	it	hi
 80051cc:	608b      	strhi	r3, [r1, #8]
 80051ce:	680b      	ldr	r3, [r1, #0]
 80051d0:	4680      	mov	r8, r0
 80051d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80051d6:	f842 3b1c 	str.w	r3, [r2], #28
 80051da:	460c      	mov	r4, r1
 80051dc:	bf98      	it	ls
 80051de:	f04f 0b00 	movls.w	fp, #0
 80051e2:	4616      	mov	r6, r2
 80051e4:	46aa      	mov	sl, r5
 80051e6:	46a9      	mov	r9, r5
 80051e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051ec:	9201      	str	r2, [sp, #4]
 80051ee:	9502      	str	r5, [sp, #8]
 80051f0:	68a2      	ldr	r2, [r4, #8]
 80051f2:	b152      	cbz	r2, 800520a <_scanf_float+0x66>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80051fa:	d865      	bhi.n	80052c8 <_scanf_float+0x124>
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d83d      	bhi.n	800527c <_scanf_float+0xd8>
 8005200:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005204:	b2c8      	uxtb	r0, r1
 8005206:	280e      	cmp	r0, #14
 8005208:	d93b      	bls.n	8005282 <_scanf_float+0xde>
 800520a:	f1b9 0f00 	cmp.w	r9, #0
 800520e:	d003      	beq.n	8005218 <_scanf_float+0x74>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	f10a 3aff 	add.w	sl, sl, #4294967295
 800521c:	f1ba 0f01 	cmp.w	sl, #1
 8005220:	f200 8118 	bhi.w	8005454 <_scanf_float+0x2b0>
 8005224:	9b01      	ldr	r3, [sp, #4]
 8005226:	429e      	cmp	r6, r3
 8005228:	f200 8109 	bhi.w	800543e <_scanf_float+0x29a>
 800522c:	2001      	movs	r0, #1
 800522e:	b007      	add	sp, #28
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005238:	2a0d      	cmp	r2, #13
 800523a:	d8e6      	bhi.n	800520a <_scanf_float+0x66>
 800523c:	a101      	add	r1, pc, #4	@ (adr r1, 8005244 <_scanf_float+0xa0>)
 800523e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005242:	bf00      	nop
 8005244:	0800538b 	.word	0x0800538b
 8005248:	0800520b 	.word	0x0800520b
 800524c:	0800520b 	.word	0x0800520b
 8005250:	0800520b 	.word	0x0800520b
 8005254:	080053eb 	.word	0x080053eb
 8005258:	080053c3 	.word	0x080053c3
 800525c:	0800520b 	.word	0x0800520b
 8005260:	0800520b 	.word	0x0800520b
 8005264:	08005399 	.word	0x08005399
 8005268:	0800520b 	.word	0x0800520b
 800526c:	0800520b 	.word	0x0800520b
 8005270:	0800520b 	.word	0x0800520b
 8005274:	0800520b 	.word	0x0800520b
 8005278:	08005351 	.word	0x08005351
 800527c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005280:	e7da      	b.n	8005238 <_scanf_float+0x94>
 8005282:	290e      	cmp	r1, #14
 8005284:	d8c1      	bhi.n	800520a <_scanf_float+0x66>
 8005286:	a001      	add	r0, pc, #4	@ (adr r0, 800528c <_scanf_float+0xe8>)
 8005288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800528c:	08005341 	.word	0x08005341
 8005290:	0800520b 	.word	0x0800520b
 8005294:	08005341 	.word	0x08005341
 8005298:	080053d7 	.word	0x080053d7
 800529c:	0800520b 	.word	0x0800520b
 80052a0:	080052e9 	.word	0x080052e9
 80052a4:	08005327 	.word	0x08005327
 80052a8:	08005327 	.word	0x08005327
 80052ac:	08005327 	.word	0x08005327
 80052b0:	08005327 	.word	0x08005327
 80052b4:	08005327 	.word	0x08005327
 80052b8:	08005327 	.word	0x08005327
 80052bc:	08005327 	.word	0x08005327
 80052c0:	08005327 	.word	0x08005327
 80052c4:	08005327 	.word	0x08005327
 80052c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80052ca:	d809      	bhi.n	80052e0 <_scanf_float+0x13c>
 80052cc:	2b60      	cmp	r3, #96	@ 0x60
 80052ce:	d8b1      	bhi.n	8005234 <_scanf_float+0x90>
 80052d0:	2b54      	cmp	r3, #84	@ 0x54
 80052d2:	d07b      	beq.n	80053cc <_scanf_float+0x228>
 80052d4:	2b59      	cmp	r3, #89	@ 0x59
 80052d6:	d198      	bne.n	800520a <_scanf_float+0x66>
 80052d8:	2d07      	cmp	r5, #7
 80052da:	d196      	bne.n	800520a <_scanf_float+0x66>
 80052dc:	2508      	movs	r5, #8
 80052de:	e02c      	b.n	800533a <_scanf_float+0x196>
 80052e0:	2b74      	cmp	r3, #116	@ 0x74
 80052e2:	d073      	beq.n	80053cc <_scanf_float+0x228>
 80052e4:	2b79      	cmp	r3, #121	@ 0x79
 80052e6:	e7f6      	b.n	80052d6 <_scanf_float+0x132>
 80052e8:	6821      	ldr	r1, [r4, #0]
 80052ea:	05c8      	lsls	r0, r1, #23
 80052ec:	d51b      	bpl.n	8005326 <_scanf_float+0x182>
 80052ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80052f2:	6021      	str	r1, [r4, #0]
 80052f4:	f109 0901 	add.w	r9, r9, #1
 80052f8:	f1bb 0f00 	cmp.w	fp, #0
 80052fc:	d003      	beq.n	8005306 <_scanf_float+0x162>
 80052fe:	3201      	adds	r2, #1
 8005300:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005304:	60a2      	str	r2, [r4, #8]
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	3b01      	subs	r3, #1
 800530a:	60a3      	str	r3, [r4, #8]
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	3301      	adds	r3, #1
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	f340 8087 	ble.w	800542c <_scanf_float+0x288>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	e764      	b.n	80051f0 <_scanf_float+0x4c>
 8005326:	eb1a 0105 	adds.w	r1, sl, r5
 800532a:	f47f af6e 	bne.w	800520a <_scanf_float+0x66>
 800532e:	460d      	mov	r5, r1
 8005330:	468a      	mov	sl, r1
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	f806 3b01 	strb.w	r3, [r6], #1
 800533e:	e7e2      	b.n	8005306 <_scanf_float+0x162>
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	0610      	lsls	r0, r2, #24
 8005344:	f57f af61 	bpl.w	800520a <_scanf_float+0x66>
 8005348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800534c:	6022      	str	r2, [r4, #0]
 800534e:	e7f4      	b.n	800533a <_scanf_float+0x196>
 8005350:	f1ba 0f00 	cmp.w	sl, #0
 8005354:	d10e      	bne.n	8005374 <_scanf_float+0x1d0>
 8005356:	f1b9 0f00 	cmp.w	r9, #0
 800535a:	d10e      	bne.n	800537a <_scanf_float+0x1d6>
 800535c:	6822      	ldr	r2, [r4, #0]
 800535e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005362:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005366:	d108      	bne.n	800537a <_scanf_float+0x1d6>
 8005368:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800536c:	f04f 0a01 	mov.w	sl, #1
 8005370:	6022      	str	r2, [r4, #0]
 8005372:	e7e2      	b.n	800533a <_scanf_float+0x196>
 8005374:	f1ba 0f02 	cmp.w	sl, #2
 8005378:	d055      	beq.n	8005426 <_scanf_float+0x282>
 800537a:	2d01      	cmp	r5, #1
 800537c:	d002      	beq.n	8005384 <_scanf_float+0x1e0>
 800537e:	2d04      	cmp	r5, #4
 8005380:	f47f af43 	bne.w	800520a <_scanf_float+0x66>
 8005384:	3501      	adds	r5, #1
 8005386:	b2ed      	uxtb	r5, r5
 8005388:	e7d7      	b.n	800533a <_scanf_float+0x196>
 800538a:	f1ba 0f01 	cmp.w	sl, #1
 800538e:	f47f af3c 	bne.w	800520a <_scanf_float+0x66>
 8005392:	f04f 0a02 	mov.w	sl, #2
 8005396:	e7d0      	b.n	800533a <_scanf_float+0x196>
 8005398:	b97d      	cbnz	r5, 80053ba <_scanf_float+0x216>
 800539a:	f1b9 0f00 	cmp.w	r9, #0
 800539e:	f47f af37 	bne.w	8005210 <_scanf_float+0x6c>
 80053a2:	6822      	ldr	r2, [r4, #0]
 80053a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80053a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80053ac:	f040 8103 	bne.w	80055b6 <_scanf_float+0x412>
 80053b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80053b4:	2501      	movs	r5, #1
 80053b6:	6022      	str	r2, [r4, #0]
 80053b8:	e7bf      	b.n	800533a <_scanf_float+0x196>
 80053ba:	2d03      	cmp	r5, #3
 80053bc:	d0e2      	beq.n	8005384 <_scanf_float+0x1e0>
 80053be:	2d05      	cmp	r5, #5
 80053c0:	e7de      	b.n	8005380 <_scanf_float+0x1dc>
 80053c2:	2d02      	cmp	r5, #2
 80053c4:	f47f af21 	bne.w	800520a <_scanf_float+0x66>
 80053c8:	2503      	movs	r5, #3
 80053ca:	e7b6      	b.n	800533a <_scanf_float+0x196>
 80053cc:	2d06      	cmp	r5, #6
 80053ce:	f47f af1c 	bne.w	800520a <_scanf_float+0x66>
 80053d2:	2507      	movs	r5, #7
 80053d4:	e7b1      	b.n	800533a <_scanf_float+0x196>
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	0591      	lsls	r1, r2, #22
 80053da:	f57f af16 	bpl.w	800520a <_scanf_float+0x66>
 80053de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80053e2:	6022      	str	r2, [r4, #0]
 80053e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80053e8:	e7a7      	b.n	800533a <_scanf_float+0x196>
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80053f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80053f4:	d006      	beq.n	8005404 <_scanf_float+0x260>
 80053f6:	0550      	lsls	r0, r2, #21
 80053f8:	f57f af07 	bpl.w	800520a <_scanf_float+0x66>
 80053fc:	f1b9 0f00 	cmp.w	r9, #0
 8005400:	f000 80d9 	beq.w	80055b6 <_scanf_float+0x412>
 8005404:	0591      	lsls	r1, r2, #22
 8005406:	bf58      	it	pl
 8005408:	9902      	ldrpl	r1, [sp, #8]
 800540a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800540e:	bf58      	it	pl
 8005410:	eba9 0101 	subpl.w	r1, r9, r1
 8005414:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005418:	f04f 0900 	mov.w	r9, #0
 800541c:	bf58      	it	pl
 800541e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	e789      	b.n	800533a <_scanf_float+0x196>
 8005426:	f04f 0a03 	mov.w	sl, #3
 800542a:	e786      	b.n	800533a <_scanf_float+0x196>
 800542c:	4639      	mov	r1, r7
 800542e:	4640      	mov	r0, r8
 8005430:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005434:	4798      	blx	r3
 8005436:	2800      	cmp	r0, #0
 8005438:	f43f aeda 	beq.w	80051f0 <_scanf_float+0x4c>
 800543c:	e6e5      	b.n	800520a <_scanf_float+0x66>
 800543e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005442:	463a      	mov	r2, r7
 8005444:	4640      	mov	r0, r8
 8005446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800544a:	4798      	blx	r3
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	3b01      	subs	r3, #1
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	e6e7      	b.n	8005224 <_scanf_float+0x80>
 8005454:	1e6b      	subs	r3, r5, #1
 8005456:	2b06      	cmp	r3, #6
 8005458:	d824      	bhi.n	80054a4 <_scanf_float+0x300>
 800545a:	2d02      	cmp	r5, #2
 800545c:	d836      	bhi.n	80054cc <_scanf_float+0x328>
 800545e:	9b01      	ldr	r3, [sp, #4]
 8005460:	429e      	cmp	r6, r3
 8005462:	f67f aee3 	bls.w	800522c <_scanf_float+0x88>
 8005466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800546a:	463a      	mov	r2, r7
 800546c:	4640      	mov	r0, r8
 800546e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005472:	4798      	blx	r3
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	3b01      	subs	r3, #1
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	e7f0      	b.n	800545e <_scanf_float+0x2ba>
 800547c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005480:	463a      	mov	r2, r7
 8005482:	4640      	mov	r0, r8
 8005484:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005488:	4798      	blx	r3
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	3b01      	subs	r3, #1
 800548e:	6123      	str	r3, [r4, #16]
 8005490:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005494:	fa5f fa8a 	uxtb.w	sl, sl
 8005498:	f1ba 0f02 	cmp.w	sl, #2
 800549c:	d1ee      	bne.n	800547c <_scanf_float+0x2d8>
 800549e:	3d03      	subs	r5, #3
 80054a0:	b2ed      	uxtb	r5, r5
 80054a2:	1b76      	subs	r6, r6, r5
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	05da      	lsls	r2, r3, #23
 80054a8:	d530      	bpl.n	800550c <_scanf_float+0x368>
 80054aa:	055b      	lsls	r3, r3, #21
 80054ac:	d511      	bpl.n	80054d2 <_scanf_float+0x32e>
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	429e      	cmp	r6, r3
 80054b2:	f67f aebb 	bls.w	800522c <_scanf_float+0x88>
 80054b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054ba:	463a      	mov	r2, r7
 80054bc:	4640      	mov	r0, r8
 80054be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054c2:	4798      	blx	r3
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	e7f0      	b.n	80054ae <_scanf_float+0x30a>
 80054cc:	46aa      	mov	sl, r5
 80054ce:	46b3      	mov	fp, r6
 80054d0:	e7de      	b.n	8005490 <_scanf_float+0x2ec>
 80054d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	2965      	cmp	r1, #101	@ 0x65
 80054da:	f103 33ff 	add.w	r3, r3, #4294967295
 80054de:	f106 35ff 	add.w	r5, r6, #4294967295
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	d00c      	beq.n	8005500 <_scanf_float+0x35c>
 80054e6:	2945      	cmp	r1, #69	@ 0x45
 80054e8:	d00a      	beq.n	8005500 <_scanf_float+0x35c>
 80054ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054ee:	463a      	mov	r2, r7
 80054f0:	4640      	mov	r0, r8
 80054f2:	4798      	blx	r3
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	1eb5      	subs	r5, r6, #2
 80054fe:	6123      	str	r3, [r4, #16]
 8005500:	463a      	mov	r2, r7
 8005502:	4640      	mov	r0, r8
 8005504:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005508:	4798      	blx	r3
 800550a:	462e      	mov	r6, r5
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	f012 0210 	ands.w	r2, r2, #16
 8005512:	d001      	beq.n	8005518 <_scanf_float+0x374>
 8005514:	2000      	movs	r0, #0
 8005516:	e68a      	b.n	800522e <_scanf_float+0x8a>
 8005518:	7032      	strb	r2, [r6, #0]
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005524:	d11c      	bne.n	8005560 <_scanf_float+0x3bc>
 8005526:	9b02      	ldr	r3, [sp, #8]
 8005528:	454b      	cmp	r3, r9
 800552a:	eba3 0209 	sub.w	r2, r3, r9
 800552e:	d123      	bne.n	8005578 <_scanf_float+0x3d4>
 8005530:	2200      	movs	r2, #0
 8005532:	4640      	mov	r0, r8
 8005534:	9901      	ldr	r1, [sp, #4]
 8005536:	f002 fd73 	bl	8008020 <_strtod_r>
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	6825      	ldr	r5, [r4, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f015 0f02 	tst.w	r5, #2
 8005544:	4606      	mov	r6, r0
 8005546:	460f      	mov	r7, r1
 8005548:	f103 0204 	add.w	r2, r3, #4
 800554c:	d01f      	beq.n	800558e <_scanf_float+0x3ea>
 800554e:	9903      	ldr	r1, [sp, #12]
 8005550:	600a      	str	r2, [r1, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	e9c3 6700 	strd	r6, r7, [r3]
 8005558:	68e3      	ldr	r3, [r4, #12]
 800555a:	3301      	adds	r3, #1
 800555c:	60e3      	str	r3, [r4, #12]
 800555e:	e7d9      	b.n	8005514 <_scanf_float+0x370>
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0e4      	beq.n	8005530 <_scanf_float+0x38c>
 8005566:	9905      	ldr	r1, [sp, #20]
 8005568:	230a      	movs	r3, #10
 800556a:	4640      	mov	r0, r8
 800556c:	3101      	adds	r1, #1
 800556e:	f002 fdd7 	bl	8008120 <_strtol_r>
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	9e05      	ldr	r6, [sp, #20]
 8005576:	1ac2      	subs	r2, r0, r3
 8005578:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800557c:	429e      	cmp	r6, r3
 800557e:	bf28      	it	cs
 8005580:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005584:	4630      	mov	r0, r6
 8005586:	490d      	ldr	r1, [pc, #52]	@ (80055bc <_scanf_float+0x418>)
 8005588:	f000 f982 	bl	8005890 <siprintf>
 800558c:	e7d0      	b.n	8005530 <_scanf_float+0x38c>
 800558e:	076d      	lsls	r5, r5, #29
 8005590:	d4dd      	bmi.n	800554e <_scanf_float+0x3aa>
 8005592:	9d03      	ldr	r5, [sp, #12]
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	681d      	ldr	r5, [r3, #0]
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	f7fb fa36 	bl	8000a0c <__aeabi_dcmpun>
 80055a0:	b120      	cbz	r0, 80055ac <_scanf_float+0x408>
 80055a2:	4807      	ldr	r0, [pc, #28]	@ (80055c0 <_scanf_float+0x41c>)
 80055a4:	f000 fb48 	bl	8005c38 <nanf>
 80055a8:	6028      	str	r0, [r5, #0]
 80055aa:	e7d5      	b.n	8005558 <_scanf_float+0x3b4>
 80055ac:	4630      	mov	r0, r6
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fb fa8a 	bl	8000ac8 <__aeabi_d2f>
 80055b4:	e7f8      	b.n	80055a8 <_scanf_float+0x404>
 80055b6:	f04f 0900 	mov.w	r9, #0
 80055ba:	e62d      	b.n	8005218 <_scanf_float+0x74>
 80055bc:	08009bb4 	.word	0x08009bb4
 80055c0:	08009f68 	.word	0x08009f68

080055c4 <std>:
 80055c4:	2300      	movs	r3, #0
 80055c6:	b510      	push	{r4, lr}
 80055c8:	4604      	mov	r4, r0
 80055ca:	e9c0 3300 	strd	r3, r3, [r0]
 80055ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055d2:	6083      	str	r3, [r0, #8]
 80055d4:	8181      	strh	r1, [r0, #12]
 80055d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80055d8:	81c2      	strh	r2, [r0, #14]
 80055da:	6183      	str	r3, [r0, #24]
 80055dc:	4619      	mov	r1, r3
 80055de:	2208      	movs	r2, #8
 80055e0:	305c      	adds	r0, #92	@ 0x5c
 80055e2:	f000 fa79 	bl	8005ad8 <memset>
 80055e6:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <std+0x58>)
 80055e8:	6224      	str	r4, [r4, #32]
 80055ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80055ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <std+0x5c>)
 80055ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <std+0x60>)
 80055f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <std+0x64>)
 80055f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80055f8:	4b0c      	ldr	r3, [pc, #48]	@ (800562c <std+0x68>)
 80055fa:	429c      	cmp	r4, r3
 80055fc:	d006      	beq.n	800560c <std+0x48>
 80055fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005602:	4294      	cmp	r4, r2
 8005604:	d002      	beq.n	800560c <std+0x48>
 8005606:	33d0      	adds	r3, #208	@ 0xd0
 8005608:	429c      	cmp	r4, r3
 800560a:	d105      	bne.n	8005618 <std+0x54>
 800560c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005614:	f000 bafe 	b.w	8005c14 <__retarget_lock_init_recursive>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	bf00      	nop
 800561c:	08005925 	.word	0x08005925
 8005620:	0800594b 	.word	0x0800594b
 8005624:	08005983 	.word	0x08005983
 8005628:	080059a7 	.word	0x080059a7
 800562c:	200004d4 	.word	0x200004d4

08005630 <stdio_exit_handler>:
 8005630:	4a02      	ldr	r2, [pc, #8]	@ (800563c <stdio_exit_handler+0xc>)
 8005632:	4903      	ldr	r1, [pc, #12]	@ (8005640 <stdio_exit_handler+0x10>)
 8005634:	4803      	ldr	r0, [pc, #12]	@ (8005644 <stdio_exit_handler+0x14>)
 8005636:	f000 b869 	b.w	800570c <_fwalk_sglue>
 800563a:	bf00      	nop
 800563c:	20000024 	.word	0x20000024
 8005640:	08008d81 	.word	0x08008d81
 8005644:	20000034 	.word	0x20000034

08005648 <cleanup_stdio>:
 8005648:	6841      	ldr	r1, [r0, #4]
 800564a:	4b0c      	ldr	r3, [pc, #48]	@ (800567c <cleanup_stdio+0x34>)
 800564c:	b510      	push	{r4, lr}
 800564e:	4299      	cmp	r1, r3
 8005650:	4604      	mov	r4, r0
 8005652:	d001      	beq.n	8005658 <cleanup_stdio+0x10>
 8005654:	f003 fb94 	bl	8008d80 <_fflush_r>
 8005658:	68a1      	ldr	r1, [r4, #8]
 800565a:	4b09      	ldr	r3, [pc, #36]	@ (8005680 <cleanup_stdio+0x38>)
 800565c:	4299      	cmp	r1, r3
 800565e:	d002      	beq.n	8005666 <cleanup_stdio+0x1e>
 8005660:	4620      	mov	r0, r4
 8005662:	f003 fb8d 	bl	8008d80 <_fflush_r>
 8005666:	68e1      	ldr	r1, [r4, #12]
 8005668:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <cleanup_stdio+0x3c>)
 800566a:	4299      	cmp	r1, r3
 800566c:	d004      	beq.n	8005678 <cleanup_stdio+0x30>
 800566e:	4620      	mov	r0, r4
 8005670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005674:	f003 bb84 	b.w	8008d80 <_fflush_r>
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	200004d4 	.word	0x200004d4
 8005680:	2000053c 	.word	0x2000053c
 8005684:	200005a4 	.word	0x200005a4

08005688 <global_stdio_init.part.0>:
 8005688:	b510      	push	{r4, lr}
 800568a:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <global_stdio_init.part.0+0x30>)
 800568c:	4c0b      	ldr	r4, [pc, #44]	@ (80056bc <global_stdio_init.part.0+0x34>)
 800568e:	4a0c      	ldr	r2, [pc, #48]	@ (80056c0 <global_stdio_init.part.0+0x38>)
 8005690:	4620      	mov	r0, r4
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	2104      	movs	r1, #4
 8005696:	2200      	movs	r2, #0
 8005698:	f7ff ff94 	bl	80055c4 <std>
 800569c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056a0:	2201      	movs	r2, #1
 80056a2:	2109      	movs	r1, #9
 80056a4:	f7ff ff8e 	bl	80055c4 <std>
 80056a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056ac:	2202      	movs	r2, #2
 80056ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b2:	2112      	movs	r1, #18
 80056b4:	f7ff bf86 	b.w	80055c4 <std>
 80056b8:	2000060c 	.word	0x2000060c
 80056bc:	200004d4 	.word	0x200004d4
 80056c0:	08005631 	.word	0x08005631

080056c4 <__sfp_lock_acquire>:
 80056c4:	4801      	ldr	r0, [pc, #4]	@ (80056cc <__sfp_lock_acquire+0x8>)
 80056c6:	f000 baa6 	b.w	8005c16 <__retarget_lock_acquire_recursive>
 80056ca:	bf00      	nop
 80056cc:	20000615 	.word	0x20000615

080056d0 <__sfp_lock_release>:
 80056d0:	4801      	ldr	r0, [pc, #4]	@ (80056d8 <__sfp_lock_release+0x8>)
 80056d2:	f000 baa1 	b.w	8005c18 <__retarget_lock_release_recursive>
 80056d6:	bf00      	nop
 80056d8:	20000615 	.word	0x20000615

080056dc <__sinit>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	4604      	mov	r4, r0
 80056e0:	f7ff fff0 	bl	80056c4 <__sfp_lock_acquire>
 80056e4:	6a23      	ldr	r3, [r4, #32]
 80056e6:	b11b      	cbz	r3, 80056f0 <__sinit+0x14>
 80056e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ec:	f7ff bff0 	b.w	80056d0 <__sfp_lock_release>
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <__sinit+0x28>)
 80056f2:	6223      	str	r3, [r4, #32]
 80056f4:	4b04      	ldr	r3, [pc, #16]	@ (8005708 <__sinit+0x2c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f5      	bne.n	80056e8 <__sinit+0xc>
 80056fc:	f7ff ffc4 	bl	8005688 <global_stdio_init.part.0>
 8005700:	e7f2      	b.n	80056e8 <__sinit+0xc>
 8005702:	bf00      	nop
 8005704:	08005649 	.word	0x08005649
 8005708:	2000060c 	.word	0x2000060c

0800570c <_fwalk_sglue>:
 800570c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005710:	4607      	mov	r7, r0
 8005712:	4688      	mov	r8, r1
 8005714:	4614      	mov	r4, r2
 8005716:	2600      	movs	r6, #0
 8005718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800571c:	f1b9 0901 	subs.w	r9, r9, #1
 8005720:	d505      	bpl.n	800572e <_fwalk_sglue+0x22>
 8005722:	6824      	ldr	r4, [r4, #0]
 8005724:	2c00      	cmp	r4, #0
 8005726:	d1f7      	bne.n	8005718 <_fwalk_sglue+0xc>
 8005728:	4630      	mov	r0, r6
 800572a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d907      	bls.n	8005744 <_fwalk_sglue+0x38>
 8005734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005738:	3301      	adds	r3, #1
 800573a:	d003      	beq.n	8005744 <_fwalk_sglue+0x38>
 800573c:	4629      	mov	r1, r5
 800573e:	4638      	mov	r0, r7
 8005740:	47c0      	blx	r8
 8005742:	4306      	orrs	r6, r0
 8005744:	3568      	adds	r5, #104	@ 0x68
 8005746:	e7e9      	b.n	800571c <_fwalk_sglue+0x10>

08005748 <iprintf>:
 8005748:	b40f      	push	{r0, r1, r2, r3}
 800574a:	b507      	push	{r0, r1, r2, lr}
 800574c:	4906      	ldr	r1, [pc, #24]	@ (8005768 <iprintf+0x20>)
 800574e:	ab04      	add	r3, sp, #16
 8005750:	6808      	ldr	r0, [r1, #0]
 8005752:	f853 2b04 	ldr.w	r2, [r3], #4
 8005756:	6881      	ldr	r1, [r0, #8]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	f003 f82d 	bl	80087b8 <_vfiprintf_r>
 800575e:	b003      	add	sp, #12
 8005760:	f85d eb04 	ldr.w	lr, [sp], #4
 8005764:	b004      	add	sp, #16
 8005766:	4770      	bx	lr
 8005768:	20000030 	.word	0x20000030

0800576c <_puts_r>:
 800576c:	6a03      	ldr	r3, [r0, #32]
 800576e:	b570      	push	{r4, r5, r6, lr}
 8005770:	4605      	mov	r5, r0
 8005772:	460e      	mov	r6, r1
 8005774:	6884      	ldr	r4, [r0, #8]
 8005776:	b90b      	cbnz	r3, 800577c <_puts_r+0x10>
 8005778:	f7ff ffb0 	bl	80056dc <__sinit>
 800577c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800577e:	07db      	lsls	r3, r3, #31
 8005780:	d405      	bmi.n	800578e <_puts_r+0x22>
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	0598      	lsls	r0, r3, #22
 8005786:	d402      	bmi.n	800578e <_puts_r+0x22>
 8005788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800578a:	f000 fa44 	bl	8005c16 <__retarget_lock_acquire_recursive>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	0719      	lsls	r1, r3, #28
 8005792:	d502      	bpl.n	800579a <_puts_r+0x2e>
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d135      	bne.n	8005806 <_puts_r+0x9a>
 800579a:	4621      	mov	r1, r4
 800579c:	4628      	mov	r0, r5
 800579e:	f000 f945 	bl	8005a2c <__swsetup_r>
 80057a2:	b380      	cbz	r0, 8005806 <_puts_r+0x9a>
 80057a4:	f04f 35ff 	mov.w	r5, #4294967295
 80057a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057aa:	07da      	lsls	r2, r3, #31
 80057ac:	d405      	bmi.n	80057ba <_puts_r+0x4e>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	059b      	lsls	r3, r3, #22
 80057b2:	d402      	bmi.n	80057ba <_puts_r+0x4e>
 80057b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057b6:	f000 fa2f 	bl	8005c18 <__retarget_lock_release_recursive>
 80057ba:	4628      	mov	r0, r5
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da04      	bge.n	80057cc <_puts_r+0x60>
 80057c2:	69a2      	ldr	r2, [r4, #24]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	dc17      	bgt.n	80057f8 <_puts_r+0x8c>
 80057c8:	290a      	cmp	r1, #10
 80057ca:	d015      	beq.n	80057f8 <_puts_r+0x8c>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	6022      	str	r2, [r4, #0]
 80057d2:	7019      	strb	r1, [r3, #0]
 80057d4:	68a3      	ldr	r3, [r4, #8]
 80057d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057da:	3b01      	subs	r3, #1
 80057dc:	60a3      	str	r3, [r4, #8]
 80057de:	2900      	cmp	r1, #0
 80057e0:	d1ed      	bne.n	80057be <_puts_r+0x52>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da11      	bge.n	800580a <_puts_r+0x9e>
 80057e6:	4622      	mov	r2, r4
 80057e8:	210a      	movs	r1, #10
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f8df 	bl	80059ae <__swbuf_r>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d0d7      	beq.n	80057a4 <_puts_r+0x38>
 80057f4:	250a      	movs	r5, #10
 80057f6:	e7d7      	b.n	80057a8 <_puts_r+0x3c>
 80057f8:	4622      	mov	r2, r4
 80057fa:	4628      	mov	r0, r5
 80057fc:	f000 f8d7 	bl	80059ae <__swbuf_r>
 8005800:	3001      	adds	r0, #1
 8005802:	d1e7      	bne.n	80057d4 <_puts_r+0x68>
 8005804:	e7ce      	b.n	80057a4 <_puts_r+0x38>
 8005806:	3e01      	subs	r6, #1
 8005808:	e7e4      	b.n	80057d4 <_puts_r+0x68>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	220a      	movs	r2, #10
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	e7ee      	b.n	80057f4 <_puts_r+0x88>
	...

08005818 <puts>:
 8005818:	4b02      	ldr	r3, [pc, #8]	@ (8005824 <puts+0xc>)
 800581a:	4601      	mov	r1, r0
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f7ff bfa5 	b.w	800576c <_puts_r>
 8005822:	bf00      	nop
 8005824:	20000030 	.word	0x20000030

08005828 <sniprintf>:
 8005828:	b40c      	push	{r2, r3}
 800582a:	b530      	push	{r4, r5, lr}
 800582c:	4b17      	ldr	r3, [pc, #92]	@ (800588c <sniprintf+0x64>)
 800582e:	1e0c      	subs	r4, r1, #0
 8005830:	681d      	ldr	r5, [r3, #0]
 8005832:	b09d      	sub	sp, #116	@ 0x74
 8005834:	da08      	bge.n	8005848 <sniprintf+0x20>
 8005836:	238b      	movs	r3, #139	@ 0x8b
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	b01d      	add	sp, #116	@ 0x74
 8005840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005844:	b002      	add	sp, #8
 8005846:	4770      	bx	lr
 8005848:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800584c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005850:	bf0c      	ite	eq
 8005852:	4623      	moveq	r3, r4
 8005854:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005858:	9304      	str	r3, [sp, #16]
 800585a:	9307      	str	r3, [sp, #28]
 800585c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005860:	9002      	str	r0, [sp, #8]
 8005862:	9006      	str	r0, [sp, #24]
 8005864:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005868:	4628      	mov	r0, r5
 800586a:	ab21      	add	r3, sp, #132	@ 0x84
 800586c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800586e:	a902      	add	r1, sp, #8
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	f002 fcb3 	bl	80081dc <_svfiprintf_r>
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	bfbc      	itt	lt
 800587a:	238b      	movlt	r3, #139	@ 0x8b
 800587c:	602b      	strlt	r3, [r5, #0]
 800587e:	2c00      	cmp	r4, #0
 8005880:	d0dd      	beq.n	800583e <sniprintf+0x16>
 8005882:	2200      	movs	r2, #0
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e7d9      	b.n	800583e <sniprintf+0x16>
 800588a:	bf00      	nop
 800588c:	20000030 	.word	0x20000030

08005890 <siprintf>:
 8005890:	b40e      	push	{r1, r2, r3}
 8005892:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005896:	b500      	push	{lr}
 8005898:	b09c      	sub	sp, #112	@ 0x70
 800589a:	ab1d      	add	r3, sp, #116	@ 0x74
 800589c:	9002      	str	r0, [sp, #8]
 800589e:	9006      	str	r0, [sp, #24]
 80058a0:	9107      	str	r1, [sp, #28]
 80058a2:	9104      	str	r1, [sp, #16]
 80058a4:	4808      	ldr	r0, [pc, #32]	@ (80058c8 <siprintf+0x38>)
 80058a6:	4909      	ldr	r1, [pc, #36]	@ (80058cc <siprintf+0x3c>)
 80058a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ac:	9105      	str	r1, [sp, #20]
 80058ae:	6800      	ldr	r0, [r0, #0]
 80058b0:	a902      	add	r1, sp, #8
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	f002 fc92 	bl	80081dc <_svfiprintf_r>
 80058b8:	2200      	movs	r2, #0
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	b01c      	add	sp, #112	@ 0x70
 80058c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c4:	b003      	add	sp, #12
 80058c6:	4770      	bx	lr
 80058c8:	20000030 	.word	0x20000030
 80058cc:	ffff0208 	.word	0xffff0208

080058d0 <siscanf>:
 80058d0:	b40e      	push	{r1, r2, r3}
 80058d2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80058d6:	b530      	push	{r4, r5, lr}
 80058d8:	b09c      	sub	sp, #112	@ 0x70
 80058da:	ac1f      	add	r4, sp, #124	@ 0x7c
 80058dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80058e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80058e4:	9002      	str	r0, [sp, #8]
 80058e6:	9006      	str	r0, [sp, #24]
 80058e8:	f7fa fc32 	bl	8000150 <strlen>
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <siscanf+0x4c>)
 80058ee:	9003      	str	r0, [sp, #12]
 80058f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058f2:	2300      	movs	r3, #0
 80058f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058f6:	9314      	str	r3, [sp, #80]	@ 0x50
 80058f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058fc:	9007      	str	r0, [sp, #28]
 80058fe:	4808      	ldr	r0, [pc, #32]	@ (8005920 <siscanf+0x50>)
 8005900:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005904:	462a      	mov	r2, r5
 8005906:	4623      	mov	r3, r4
 8005908:	a902      	add	r1, sp, #8
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	9401      	str	r4, [sp, #4]
 800590e:	f002 fdb9 	bl	8008484 <__ssvfiscanf_r>
 8005912:	b01c      	add	sp, #112	@ 0x70
 8005914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005918:	b003      	add	sp, #12
 800591a:	4770      	bx	lr
 800591c:	08005947 	.word	0x08005947
 8005920:	20000030 	.word	0x20000030

08005924 <__sread>:
 8005924:	b510      	push	{r4, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	f000 f924 	bl	8005b78 <_read_r>
 8005930:	2800      	cmp	r0, #0
 8005932:	bfab      	itete	ge
 8005934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005936:	89a3      	ldrhlt	r3, [r4, #12]
 8005938:	181b      	addge	r3, r3, r0
 800593a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800593e:	bfac      	ite	ge
 8005940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005942:	81a3      	strhlt	r3, [r4, #12]
 8005944:	bd10      	pop	{r4, pc}

08005946 <__seofread>:
 8005946:	2000      	movs	r0, #0
 8005948:	4770      	bx	lr

0800594a <__swrite>:
 800594a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594e:	461f      	mov	r7, r3
 8005950:	898b      	ldrh	r3, [r1, #12]
 8005952:	4605      	mov	r5, r0
 8005954:	05db      	lsls	r3, r3, #23
 8005956:	460c      	mov	r4, r1
 8005958:	4616      	mov	r6, r2
 800595a:	d505      	bpl.n	8005968 <__swrite+0x1e>
 800595c:	2302      	movs	r3, #2
 800595e:	2200      	movs	r2, #0
 8005960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005964:	f000 f8f6 	bl	8005b54 <_lseek_r>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	4632      	mov	r2, r6
 800596c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	4628      	mov	r0, r5
 8005974:	463b      	mov	r3, r7
 8005976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800597a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597e:	f000 b90d 	b.w	8005b9c <_write_r>

08005982 <__sseek>:
 8005982:	b510      	push	{r4, lr}
 8005984:	460c      	mov	r4, r1
 8005986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598a:	f000 f8e3 	bl	8005b54 <_lseek_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	bf15      	itete	ne
 8005994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800599a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800599e:	81a3      	strheq	r3, [r4, #12]
 80059a0:	bf18      	it	ne
 80059a2:	81a3      	strhne	r3, [r4, #12]
 80059a4:	bd10      	pop	{r4, pc}

080059a6 <__sclose>:
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 b8c3 	b.w	8005b34 <_close_r>

080059ae <__swbuf_r>:
 80059ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b0:	460e      	mov	r6, r1
 80059b2:	4614      	mov	r4, r2
 80059b4:	4605      	mov	r5, r0
 80059b6:	b118      	cbz	r0, 80059c0 <__swbuf_r+0x12>
 80059b8:	6a03      	ldr	r3, [r0, #32]
 80059ba:	b90b      	cbnz	r3, 80059c0 <__swbuf_r+0x12>
 80059bc:	f7ff fe8e 	bl	80056dc <__sinit>
 80059c0:	69a3      	ldr	r3, [r4, #24]
 80059c2:	60a3      	str	r3, [r4, #8]
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	071a      	lsls	r2, r3, #28
 80059c8:	d501      	bpl.n	80059ce <__swbuf_r+0x20>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	b943      	cbnz	r3, 80059e0 <__swbuf_r+0x32>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 f82b 	bl	8005a2c <__swsetup_r>
 80059d6:	b118      	cbz	r0, 80059e0 <__swbuf_r+0x32>
 80059d8:	f04f 37ff 	mov.w	r7, #4294967295
 80059dc:	4638      	mov	r0, r7
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	6922      	ldr	r2, [r4, #16]
 80059e4:	b2f6      	uxtb	r6, r6
 80059e6:	1a98      	subs	r0, r3, r2
 80059e8:	6963      	ldr	r3, [r4, #20]
 80059ea:	4637      	mov	r7, r6
 80059ec:	4283      	cmp	r3, r0
 80059ee:	dc05      	bgt.n	80059fc <__swbuf_r+0x4e>
 80059f0:	4621      	mov	r1, r4
 80059f2:	4628      	mov	r0, r5
 80059f4:	f003 f9c4 	bl	8008d80 <_fflush_r>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d1ed      	bne.n	80059d8 <__swbuf_r+0x2a>
 80059fc:	68a3      	ldr	r3, [r4, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	60a3      	str	r3, [r4, #8]
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	6022      	str	r2, [r4, #0]
 8005a08:	701e      	strb	r6, [r3, #0]
 8005a0a:	6962      	ldr	r2, [r4, #20]
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d004      	beq.n	8005a1c <__swbuf_r+0x6e>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	07db      	lsls	r3, r3, #31
 8005a16:	d5e1      	bpl.n	80059dc <__swbuf_r+0x2e>
 8005a18:	2e0a      	cmp	r6, #10
 8005a1a:	d1df      	bne.n	80059dc <__swbuf_r+0x2e>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f003 f9ae 	bl	8008d80 <_fflush_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0d9      	beq.n	80059dc <__swbuf_r+0x2e>
 8005a28:	e7d6      	b.n	80059d8 <__swbuf_r+0x2a>
	...

08005a2c <__swsetup_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <__swsetup_r+0xa8>)
 8005a30:	4605      	mov	r5, r0
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	460c      	mov	r4, r1
 8005a36:	b118      	cbz	r0, 8005a40 <__swsetup_r+0x14>
 8005a38:	6a03      	ldr	r3, [r0, #32]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <__swsetup_r+0x14>
 8005a3c:	f7ff fe4e 	bl	80056dc <__sinit>
 8005a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a44:	0719      	lsls	r1, r3, #28
 8005a46:	d422      	bmi.n	8005a8e <__swsetup_r+0x62>
 8005a48:	06da      	lsls	r2, r3, #27
 8005a4a:	d407      	bmi.n	8005a5c <__swsetup_r+0x30>
 8005a4c:	2209      	movs	r2, #9
 8005a4e:	602a      	str	r2, [r5, #0]
 8005a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	e033      	b.n	8005ac4 <__swsetup_r+0x98>
 8005a5c:	0758      	lsls	r0, r3, #29
 8005a5e:	d512      	bpl.n	8005a86 <__swsetup_r+0x5a>
 8005a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a62:	b141      	cbz	r1, 8005a76 <__swsetup_r+0x4a>
 8005a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	d002      	beq.n	8005a72 <__swsetup_r+0x46>
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f000 ff37 	bl	80068e0 <_free_r>
 8005a72:	2300      	movs	r3, #0
 8005a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6063      	str	r3, [r4, #4]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	b94b      	cbnz	r3, 8005aa6 <__swsetup_r+0x7a>
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9c:	d003      	beq.n	8005aa6 <__swsetup_r+0x7a>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f003 f9ba 	bl	8008e1a <__smakebuf_r>
 8005aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aaa:	f013 0201 	ands.w	r2, r3, #1
 8005aae:	d00a      	beq.n	8005ac6 <__swsetup_r+0x9a>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	60a2      	str	r2, [r4, #8]
 8005ab4:	6962      	ldr	r2, [r4, #20]
 8005ab6:	4252      	negs	r2, r2
 8005ab8:	61a2      	str	r2, [r4, #24]
 8005aba:	6922      	ldr	r2, [r4, #16]
 8005abc:	b942      	cbnz	r2, 8005ad0 <__swsetup_r+0xa4>
 8005abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ac2:	d1c5      	bne.n	8005a50 <__swsetup_r+0x24>
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	0799      	lsls	r1, r3, #30
 8005ac8:	bf58      	it	pl
 8005aca:	6962      	ldrpl	r2, [r4, #20]
 8005acc:	60a2      	str	r2, [r4, #8]
 8005ace:	e7f4      	b.n	8005aba <__swsetup_r+0x8e>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e7f7      	b.n	8005ac4 <__swsetup_r+0x98>
 8005ad4:	20000030 	.word	0x20000030

08005ad8 <memset>:
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4402      	add	r2, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <memset+0xa>
 8005ae0:	4770      	bx	lr
 8005ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae6:	e7f9      	b.n	8005adc <memset+0x4>

08005ae8 <strcat>:
 8005ae8:	4602      	mov	r2, r0
 8005aea:	b510      	push	{r4, lr}
 8005aec:	7814      	ldrb	r4, [r2, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	3201      	adds	r2, #1
 8005af2:	2c00      	cmp	r4, #0
 8005af4:	d1fa      	bne.n	8005aec <strcat+0x4>
 8005af6:	3b01      	subs	r3, #1
 8005af8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005afc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	d1f9      	bne.n	8005af8 <strcat+0x10>
 8005b04:	bd10      	pop	{r4, pc}

08005b06 <strncmp>:
 8005b06:	b510      	push	{r4, lr}
 8005b08:	b16a      	cbz	r2, 8005b26 <strncmp+0x20>
 8005b0a:	3901      	subs	r1, #1
 8005b0c:	1884      	adds	r4, r0, r2
 8005b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d103      	bne.n	8005b22 <strncmp+0x1c>
 8005b1a:	42a0      	cmp	r0, r4
 8005b1c:	d001      	beq.n	8005b22 <strncmp+0x1c>
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	d1f5      	bne.n	8005b0e <strncmp+0x8>
 8005b22:	1ad0      	subs	r0, r2, r3
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	4610      	mov	r0, r2
 8005b28:	e7fc      	b.n	8005b24 <strncmp+0x1e>
	...

08005b2c <_localeconv_r>:
 8005b2c:	4800      	ldr	r0, [pc, #0]	@ (8005b30 <_localeconv_r+0x4>)
 8005b2e:	4770      	bx	lr
 8005b30:	20000170 	.word	0x20000170

08005b34 <_close_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	2300      	movs	r3, #0
 8005b38:	4d05      	ldr	r5, [pc, #20]	@ (8005b50 <_close_r+0x1c>)
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fc fc1b 	bl	800237a <_close>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_close_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_close_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	20000610 	.word	0x20000610

08005b54 <_lseek_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4d05      	ldr	r5, [pc, #20]	@ (8005b74 <_lseek_r+0x20>)
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fc fc2d 	bl	80023c2 <_lseek>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_lseek_r+0x1e>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_lseek_r+0x1e>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	20000610 	.word	0x20000610

08005b78 <_read_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	2200      	movs	r2, #0
 8005b82:	4d05      	ldr	r5, [pc, #20]	@ (8005b98 <_read_r+0x20>)
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fc fbda 	bl	8002340 <_read>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_read_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_read_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	20000610 	.word	0x20000610

08005b9c <_write_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4d05      	ldr	r5, [pc, #20]	@ (8005bbc <_write_r+0x20>)
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fb fcb2 	bl	8001514 <_write>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_write_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_write_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20000610 	.word	0x20000610

08005bc0 <__errno>:
 8005bc0:	4b01      	ldr	r3, [pc, #4]	@ (8005bc8 <__errno+0x8>)
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000030 	.word	0x20000030

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	2600      	movs	r6, #0
 8005bd0:	4d0c      	ldr	r5, [pc, #48]	@ (8005c04 <__libc_init_array+0x38>)
 8005bd2:	4c0d      	ldr	r4, [pc, #52]	@ (8005c08 <__libc_init_array+0x3c>)
 8005bd4:	1b64      	subs	r4, r4, r5
 8005bd6:	10a4      	asrs	r4, r4, #2
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	f003 feba 	bl	8009954 <_init>
 8005be0:	2600      	movs	r6, #0
 8005be2:	4d0a      	ldr	r5, [pc, #40]	@ (8005c0c <__libc_init_array+0x40>)
 8005be4:	4c0a      	ldr	r4, [pc, #40]	@ (8005c10 <__libc_init_array+0x44>)
 8005be6:	1b64      	subs	r4, r4, r5
 8005be8:	10a4      	asrs	r4, r4, #2
 8005bea:	42a6      	cmp	r6, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf4:	4798      	blx	r3
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfe:	4798      	blx	r3
 8005c00:	3601      	adds	r6, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	08009fd4 	.word	0x08009fd4
 8005c08:	08009fd4 	.word	0x08009fd4
 8005c0c:	08009fd4 	.word	0x08009fd4
 8005c10:	08009fd8 	.word	0x08009fd8

08005c14 <__retarget_lock_init_recursive>:
 8005c14:	4770      	bx	lr

08005c16 <__retarget_lock_acquire_recursive>:
 8005c16:	4770      	bx	lr

08005c18 <__retarget_lock_release_recursive>:
 8005c18:	4770      	bx	lr

08005c1a <memchr>:
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	b2c9      	uxtb	r1, r1
 8005c20:	4402      	add	r2, r0
 8005c22:	4293      	cmp	r3, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	d101      	bne.n	8005c2c <memchr+0x12>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e003      	b.n	8005c34 <memchr+0x1a>
 8005c2c:	7804      	ldrb	r4, [r0, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	428c      	cmp	r4, r1
 8005c32:	d1f6      	bne.n	8005c22 <memchr+0x8>
 8005c34:	bd10      	pop	{r4, pc}
	...

08005c38 <nanf>:
 8005c38:	4800      	ldr	r0, [pc, #0]	@ (8005c3c <nanf+0x4>)
 8005c3a:	4770      	bx	lr
 8005c3c:	7fc00000 	.word	0x7fc00000

08005c40 <quorem>:
 8005c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	6903      	ldr	r3, [r0, #16]
 8005c46:	690c      	ldr	r4, [r1, #16]
 8005c48:	4607      	mov	r7, r0
 8005c4a:	42a3      	cmp	r3, r4
 8005c4c:	db7e      	blt.n	8005d4c <quorem+0x10c>
 8005c4e:	3c01      	subs	r4, #1
 8005c50:	00a3      	lsls	r3, r4, #2
 8005c52:	f100 0514 	add.w	r5, r0, #20
 8005c56:	f101 0814 	add.w	r8, r1, #20
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c76:	d32e      	bcc.n	8005cd6 <quorem+0x96>
 8005c78:	f04f 0a00 	mov.w	sl, #0
 8005c7c:	46c4      	mov	ip, r8
 8005c7e:	46ae      	mov	lr, r5
 8005c80:	46d3      	mov	fp, sl
 8005c82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c86:	b298      	uxth	r0, r3
 8005c88:	fb06 a000 	mla	r0, r6, r0, sl
 8005c8c:	0c1b      	lsrs	r3, r3, #16
 8005c8e:	0c02      	lsrs	r2, r0, #16
 8005c90:	fb06 2303 	mla	r3, r6, r3, r2
 8005c94:	f8de 2000 	ldr.w	r2, [lr]
 8005c98:	b280      	uxth	r0, r0
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	1a12      	subs	r2, r2, r0
 8005c9e:	445a      	add	r2, fp
 8005ca0:	f8de 0000 	ldr.w	r0, [lr]
 8005ca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005cae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005cb8:	45e1      	cmp	r9, ip
 8005cba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005cbe:	f84e 2b04 	str.w	r2, [lr], #4
 8005cc2:	d2de      	bcs.n	8005c82 <quorem+0x42>
 8005cc4:	9b00      	ldr	r3, [sp, #0]
 8005cc6:	58eb      	ldr	r3, [r5, r3]
 8005cc8:	b92b      	cbnz	r3, 8005cd6 <quorem+0x96>
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	3b04      	subs	r3, #4
 8005cce:	429d      	cmp	r5, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	d32f      	bcc.n	8005d34 <quorem+0xf4>
 8005cd4:	613c      	str	r4, [r7, #16]
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f001 f9c2 	bl	8007060 <__mcmp>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	db25      	blt.n	8005d2c <quorem+0xec>
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ce8:	f8d1 c000 	ldr.w	ip, [r1]
 8005cec:	fa1f fe82 	uxth.w	lr, r2
 8005cf0:	fa1f f38c 	uxth.w	r3, ip
 8005cf4:	eba3 030e 	sub.w	r3, r3, lr
 8005cf8:	4403      	add	r3, r0
 8005cfa:	0c12      	lsrs	r2, r2, #16
 8005cfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d0a:	45c1      	cmp	r9, r8
 8005d0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d10:	f841 3b04 	str.w	r3, [r1], #4
 8005d14:	d2e6      	bcs.n	8005ce4 <quorem+0xa4>
 8005d16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d1e:	b922      	cbnz	r2, 8005d2a <quorem+0xea>
 8005d20:	3b04      	subs	r3, #4
 8005d22:	429d      	cmp	r5, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	d30b      	bcc.n	8005d40 <quorem+0x100>
 8005d28:	613c      	str	r4, [r7, #16]
 8005d2a:	3601      	adds	r6, #1
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	b003      	add	sp, #12
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	3b04      	subs	r3, #4
 8005d38:	2a00      	cmp	r2, #0
 8005d3a:	d1cb      	bne.n	8005cd4 <quorem+0x94>
 8005d3c:	3c01      	subs	r4, #1
 8005d3e:	e7c6      	b.n	8005cce <quorem+0x8e>
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	3b04      	subs	r3, #4
 8005d44:	2a00      	cmp	r2, #0
 8005d46:	d1ef      	bne.n	8005d28 <quorem+0xe8>
 8005d48:	3c01      	subs	r4, #1
 8005d4a:	e7ea      	b.n	8005d22 <quorem+0xe2>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e7ee      	b.n	8005d2e <quorem+0xee>

08005d50 <_dtoa_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	4614      	mov	r4, r2
 8005d56:	461d      	mov	r5, r3
 8005d58:	69c7      	ldr	r7, [r0, #28]
 8005d5a:	b097      	sub	sp, #92	@ 0x5c
 8005d5c:	4683      	mov	fp, r0
 8005d5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005d64:	b97f      	cbnz	r7, 8005d86 <_dtoa_r+0x36>
 8005d66:	2010      	movs	r0, #16
 8005d68:	f000 fe02 	bl	8006970 <malloc>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d72:	b920      	cbnz	r0, 8005d7e <_dtoa_r+0x2e>
 8005d74:	21ef      	movs	r1, #239	@ 0xef
 8005d76:	4ba8      	ldr	r3, [pc, #672]	@ (8006018 <_dtoa_r+0x2c8>)
 8005d78:	48a8      	ldr	r0, [pc, #672]	@ (800601c <_dtoa_r+0x2cc>)
 8005d7a:	f003 f95b 	bl	8009034 <__assert_func>
 8005d7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d82:	6007      	str	r7, [r0, #0]
 8005d84:	60c7      	str	r7, [r0, #12]
 8005d86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d8a:	6819      	ldr	r1, [r3, #0]
 8005d8c:	b159      	cbz	r1, 8005da6 <_dtoa_r+0x56>
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	2301      	movs	r3, #1
 8005d92:	4093      	lsls	r3, r2
 8005d94:	604a      	str	r2, [r1, #4]
 8005d96:	608b      	str	r3, [r1, #8]
 8005d98:	4658      	mov	r0, fp
 8005d9a:	f000 fedf 	bl	8006b5c <_Bfree>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	1e2b      	subs	r3, r5, #0
 8005da8:	bfaf      	iteee	ge
 8005daa:	2300      	movge	r3, #0
 8005dac:	2201      	movlt	r2, #1
 8005dae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005db2:	9303      	strlt	r3, [sp, #12]
 8005db4:	bfa8      	it	ge
 8005db6:	6033      	strge	r3, [r6, #0]
 8005db8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005dbc:	4b98      	ldr	r3, [pc, #608]	@ (8006020 <_dtoa_r+0x2d0>)
 8005dbe:	bfb8      	it	lt
 8005dc0:	6032      	strlt	r2, [r6, #0]
 8005dc2:	ea33 0308 	bics.w	r3, r3, r8
 8005dc6:	d112      	bne.n	8005dee <_dtoa_r+0x9e>
 8005dc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005dcc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005dd4:	4323      	orrs	r3, r4
 8005dd6:	f000 8550 	beq.w	800687a <_dtoa_r+0xb2a>
 8005dda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ddc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006024 <_dtoa_r+0x2d4>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8552 	beq.w	800688a <_dtoa_r+0xb3a>
 8005de6:	f10a 0303 	add.w	r3, sl, #3
 8005dea:	f000 bd4c 	b.w	8006886 <_dtoa_r+0xb36>
 8005dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f7fa fdd3 	bl	80009a8 <__aeabi_dcmpeq>
 8005e02:	4607      	mov	r7, r0
 8005e04:	b158      	cbz	r0, 8005e1e <_dtoa_r+0xce>
 8005e06:	2301      	movs	r3, #1
 8005e08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e0e:	b113      	cbz	r3, 8005e16 <_dtoa_r+0xc6>
 8005e10:	4b85      	ldr	r3, [pc, #532]	@ (8006028 <_dtoa_r+0x2d8>)
 8005e12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800602c <_dtoa_r+0x2dc>
 8005e1a:	f000 bd36 	b.w	800688a <_dtoa_r+0xb3a>
 8005e1e:	ab14      	add	r3, sp, #80	@ 0x50
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	ab15      	add	r3, sp, #84	@ 0x54
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4658      	mov	r0, fp
 8005e28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e2c:	f001 fa30 	bl	8007290 <__d2b>
 8005e30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e34:	4681      	mov	r9, r0
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	d077      	beq.n	8005f2a <_dtoa_r+0x1da>
 8005e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e50:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e52:	4619      	mov	r1, r3
 8005e54:	2200      	movs	r2, #0
 8005e56:	4b76      	ldr	r3, [pc, #472]	@ (8006030 <_dtoa_r+0x2e0>)
 8005e58:	f7fa f986 	bl	8000168 <__aeabi_dsub>
 8005e5c:	a368      	add	r3, pc, #416	@ (adr r3, 8006000 <_dtoa_r+0x2b0>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa fb39 	bl	80004d8 <__aeabi_dmul>
 8005e66:	a368      	add	r3, pc, #416	@ (adr r3, 8006008 <_dtoa_r+0x2b8>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa f97e 	bl	800016c <__adddf3>
 8005e70:	4604      	mov	r4, r0
 8005e72:	4630      	mov	r0, r6
 8005e74:	460d      	mov	r5, r1
 8005e76:	f7fa fac5 	bl	8000404 <__aeabi_i2d>
 8005e7a:	a365      	add	r3, pc, #404	@ (adr r3, 8006010 <_dtoa_r+0x2c0>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f7fa fb2a 	bl	80004d8 <__aeabi_dmul>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	f7fa f96e 	bl	800016c <__adddf3>
 8005e90:	4604      	mov	r4, r0
 8005e92:	460d      	mov	r5, r1
 8005e94:	f7fa fdd0 	bl	8000a38 <__aeabi_d2iz>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	f7fa fd8b 	bl	80009bc <__aeabi_dcmplt>
 8005ea6:	b140      	cbz	r0, 8005eba <_dtoa_r+0x16a>
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7fa faab 	bl	8000404 <__aeabi_i2d>
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	f7fa fd79 	bl	80009a8 <__aeabi_dcmpeq>
 8005eb6:	b900      	cbnz	r0, 8005eba <_dtoa_r+0x16a>
 8005eb8:	3f01      	subs	r7, #1
 8005eba:	2f16      	cmp	r7, #22
 8005ebc:	d853      	bhi.n	8005f66 <_dtoa_r+0x216>
 8005ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8006034 <_dtoa_r+0x2e4>)
 8005ec4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa fd76 	bl	80009bc <__aeabi_dcmplt>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d04a      	beq.n	8005f6a <_dtoa_r+0x21a>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	3f01      	subs	r7, #1
 8005ed8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005eda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005edc:	1b9b      	subs	r3, r3, r6
 8005ede:	1e5a      	subs	r2, r3, #1
 8005ee0:	bf46      	itte	mi
 8005ee2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ee6:	2300      	movmi	r3, #0
 8005ee8:	f04f 0800 	movpl.w	r8, #0
 8005eec:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eee:	bf48      	it	mi
 8005ef0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005ef2:	2f00      	cmp	r7, #0
 8005ef4:	db3b      	blt.n	8005f6e <_dtoa_r+0x21e>
 8005ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005efa:	443b      	add	r3, r7
 8005efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efe:	2300      	movs	r3, #0
 8005f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f04:	2b09      	cmp	r3, #9
 8005f06:	d866      	bhi.n	8005fd6 <_dtoa_r+0x286>
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	bfc4      	itt	gt
 8005f0c:	3b04      	subgt	r3, #4
 8005f0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005f10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f12:	bfc8      	it	gt
 8005f14:	2400      	movgt	r4, #0
 8005f16:	f1a3 0302 	sub.w	r3, r3, #2
 8005f1a:	bfd8      	it	le
 8005f1c:	2401      	movle	r4, #1
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d864      	bhi.n	8005fec <_dtoa_r+0x29c>
 8005f22:	e8df f003 	tbb	[pc, r3]
 8005f26:	382b      	.short	0x382b
 8005f28:	5636      	.short	0x5636
 8005f2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f2e:	441e      	add	r6, r3
 8005f30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	bfc1      	itttt	gt
 8005f38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f48:	bfd6      	itet	le
 8005f4a:	f1c3 0320 	rsble	r3, r3, #32
 8005f4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f52:	fa04 f003 	lslle.w	r0, r4, r3
 8005f56:	f7fa fa45 	bl	80003e4 <__aeabi_ui2d>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f60:	3e01      	subs	r6, #1
 8005f62:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f64:	e775      	b.n	8005e52 <_dtoa_r+0x102>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e7b6      	b.n	8005ed8 <_dtoa_r+0x188>
 8005f6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f6c:	e7b5      	b.n	8005eda <_dtoa_r+0x18a>
 8005f6e:	427b      	negs	r3, r7
 8005f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f72:	2300      	movs	r3, #0
 8005f74:	eba8 0807 	sub.w	r8, r8, r7
 8005f78:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f7a:	e7c2      	b.n	8005f02 <_dtoa_r+0x1b2>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dc35      	bgt.n	8005ff2 <_dtoa_r+0x2a2>
 8005f86:	2301      	movs	r3, #1
 8005f88:	461a      	mov	r2, r3
 8005f8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005f8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005f90:	e00b      	b.n	8005faa <_dtoa_r+0x25a>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e7f3      	b.n	8005f7e <_dtoa_r+0x22e>
 8005f96:	2300      	movs	r3, #0
 8005f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	9308      	str	r3, [sp, #32]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	9307      	str	r3, [sp, #28]
 8005fa6:	bfb8      	it	lt
 8005fa8:	2301      	movlt	r3, #1
 8005faa:	2100      	movs	r1, #0
 8005fac:	2204      	movs	r2, #4
 8005fae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005fb2:	f102 0514 	add.w	r5, r2, #20
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	d91f      	bls.n	8005ffa <_dtoa_r+0x2aa>
 8005fba:	6041      	str	r1, [r0, #4]
 8005fbc:	4658      	mov	r0, fp
 8005fbe:	f000 fd8d 	bl	8006adc <_Balloc>
 8005fc2:	4682      	mov	sl, r0
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d139      	bne.n	800603c <_dtoa_r+0x2ec>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	f240 11af 	movw	r1, #431	@ 0x1af
 8005fce:	4b1a      	ldr	r3, [pc, #104]	@ (8006038 <_dtoa_r+0x2e8>)
 8005fd0:	e6d2      	b.n	8005d78 <_dtoa_r+0x28>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7e0      	b.n	8005f98 <_dtoa_r+0x248>
 8005fd6:	2401      	movs	r4, #1
 8005fd8:	2300      	movs	r3, #0
 8005fda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005fdc:	9320      	str	r3, [sp, #128]	@ 0x80
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fe8:	2312      	movs	r3, #18
 8005fea:	e7d0      	b.n	8005f8e <_dtoa_r+0x23e>
 8005fec:	2301      	movs	r3, #1
 8005fee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ff0:	e7f5      	b.n	8005fde <_dtoa_r+0x28e>
 8005ff2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ff4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ff8:	e7d7      	b.n	8005faa <_dtoa_r+0x25a>
 8005ffa:	3101      	adds	r1, #1
 8005ffc:	0052      	lsls	r2, r2, #1
 8005ffe:	e7d8      	b.n	8005fb2 <_dtoa_r+0x262>
 8006000:	636f4361 	.word	0x636f4361
 8006004:	3fd287a7 	.word	0x3fd287a7
 8006008:	8b60c8b3 	.word	0x8b60c8b3
 800600c:	3fc68a28 	.word	0x3fc68a28
 8006010:	509f79fb 	.word	0x509f79fb
 8006014:	3fd34413 	.word	0x3fd34413
 8006018:	08009bc6 	.word	0x08009bc6
 800601c:	08009bdd 	.word	0x08009bdd
 8006020:	7ff00000 	.word	0x7ff00000
 8006024:	08009bc2 	.word	0x08009bc2
 8006028:	08009f21 	.word	0x08009f21
 800602c:	08009f20 	.word	0x08009f20
 8006030:	3ff80000 	.word	0x3ff80000
 8006034:	08009cd8 	.word	0x08009cd8
 8006038:	08009c35 	.word	0x08009c35
 800603c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006040:	6018      	str	r0, [r3, #0]
 8006042:	9b07      	ldr	r3, [sp, #28]
 8006044:	2b0e      	cmp	r3, #14
 8006046:	f200 80a4 	bhi.w	8006192 <_dtoa_r+0x442>
 800604a:	2c00      	cmp	r4, #0
 800604c:	f000 80a1 	beq.w	8006192 <_dtoa_r+0x442>
 8006050:	2f00      	cmp	r7, #0
 8006052:	dd33      	ble.n	80060bc <_dtoa_r+0x36c>
 8006054:	4b86      	ldr	r3, [pc, #536]	@ (8006270 <_dtoa_r+0x520>)
 8006056:	f007 020f 	and.w	r2, r7, #15
 800605a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800605e:	05f8      	lsls	r0, r7, #23
 8006060:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006064:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006068:	ea4f 1427 	mov.w	r4, r7, asr #4
 800606c:	d516      	bpl.n	800609c <_dtoa_r+0x34c>
 800606e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006072:	4b80      	ldr	r3, [pc, #512]	@ (8006274 <_dtoa_r+0x524>)
 8006074:	2603      	movs	r6, #3
 8006076:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800607a:	f7fa fb57 	bl	800072c <__aeabi_ddiv>
 800607e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006082:	f004 040f 	and.w	r4, r4, #15
 8006086:	4d7b      	ldr	r5, [pc, #492]	@ (8006274 <_dtoa_r+0x524>)
 8006088:	b954      	cbnz	r4, 80060a0 <_dtoa_r+0x350>
 800608a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006092:	f7fa fb4b 	bl	800072c <__aeabi_ddiv>
 8006096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800609a:	e028      	b.n	80060ee <_dtoa_r+0x39e>
 800609c:	2602      	movs	r6, #2
 800609e:	e7f2      	b.n	8006086 <_dtoa_r+0x336>
 80060a0:	07e1      	lsls	r1, r4, #31
 80060a2:	d508      	bpl.n	80060b6 <_dtoa_r+0x366>
 80060a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060ac:	f7fa fa14 	bl	80004d8 <__aeabi_dmul>
 80060b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060b4:	3601      	adds	r6, #1
 80060b6:	1064      	asrs	r4, r4, #1
 80060b8:	3508      	adds	r5, #8
 80060ba:	e7e5      	b.n	8006088 <_dtoa_r+0x338>
 80060bc:	f000 80d2 	beq.w	8006264 <_dtoa_r+0x514>
 80060c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060c4:	427c      	negs	r4, r7
 80060c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006270 <_dtoa_r+0x520>)
 80060c8:	f004 020f 	and.w	r2, r4, #15
 80060cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f7fa fa00 	bl	80004d8 <__aeabi_dmul>
 80060d8:	2602      	movs	r6, #2
 80060da:	2300      	movs	r3, #0
 80060dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e0:	4d64      	ldr	r5, [pc, #400]	@ (8006274 <_dtoa_r+0x524>)
 80060e2:	1124      	asrs	r4, r4, #4
 80060e4:	2c00      	cmp	r4, #0
 80060e6:	f040 80b2 	bne.w	800624e <_dtoa_r+0x4fe>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1d3      	bne.n	8006096 <_dtoa_r+0x346>
 80060ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80b7 	beq.w	8006268 <_dtoa_r+0x518>
 80060fa:	2200      	movs	r2, #0
 80060fc:	4620      	mov	r0, r4
 80060fe:	4629      	mov	r1, r5
 8006100:	4b5d      	ldr	r3, [pc, #372]	@ (8006278 <_dtoa_r+0x528>)
 8006102:	f7fa fc5b 	bl	80009bc <__aeabi_dcmplt>
 8006106:	2800      	cmp	r0, #0
 8006108:	f000 80ae 	beq.w	8006268 <_dtoa_r+0x518>
 800610c:	9b07      	ldr	r3, [sp, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80aa 	beq.w	8006268 <_dtoa_r+0x518>
 8006114:	9b08      	ldr	r3, [sp, #32]
 8006116:	2b00      	cmp	r3, #0
 8006118:	dd37      	ble.n	800618a <_dtoa_r+0x43a>
 800611a:	1e7b      	subs	r3, r7, #1
 800611c:	4620      	mov	r0, r4
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	2200      	movs	r2, #0
 8006122:	4629      	mov	r1, r5
 8006124:	4b55      	ldr	r3, [pc, #340]	@ (800627c <_dtoa_r+0x52c>)
 8006126:	f7fa f9d7 	bl	80004d8 <__aeabi_dmul>
 800612a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800612e:	9c08      	ldr	r4, [sp, #32]
 8006130:	3601      	adds	r6, #1
 8006132:	4630      	mov	r0, r6
 8006134:	f7fa f966 	bl	8000404 <__aeabi_i2d>
 8006138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800613c:	f7fa f9cc 	bl	80004d8 <__aeabi_dmul>
 8006140:	2200      	movs	r2, #0
 8006142:	4b4f      	ldr	r3, [pc, #316]	@ (8006280 <_dtoa_r+0x530>)
 8006144:	f7fa f812 	bl	800016c <__adddf3>
 8006148:	4605      	mov	r5, r0
 800614a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800614e:	2c00      	cmp	r4, #0
 8006150:	f040 809a 	bne.w	8006288 <_dtoa_r+0x538>
 8006154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006158:	2200      	movs	r2, #0
 800615a:	4b4a      	ldr	r3, [pc, #296]	@ (8006284 <_dtoa_r+0x534>)
 800615c:	f7fa f804 	bl	8000168 <__aeabi_dsub>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006168:	462a      	mov	r2, r5
 800616a:	4633      	mov	r3, r6
 800616c:	f7fa fc44 	bl	80009f8 <__aeabi_dcmpgt>
 8006170:	2800      	cmp	r0, #0
 8006172:	f040 828e 	bne.w	8006692 <_dtoa_r+0x942>
 8006176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800617a:	462a      	mov	r2, r5
 800617c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006180:	f7fa fc1c 	bl	80009bc <__aeabi_dcmplt>
 8006184:	2800      	cmp	r0, #0
 8006186:	f040 8127 	bne.w	80063d8 <_dtoa_r+0x688>
 800618a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800618e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006192:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006194:	2b00      	cmp	r3, #0
 8006196:	f2c0 8163 	blt.w	8006460 <_dtoa_r+0x710>
 800619a:	2f0e      	cmp	r7, #14
 800619c:	f300 8160 	bgt.w	8006460 <_dtoa_r+0x710>
 80061a0:	4b33      	ldr	r3, [pc, #204]	@ (8006270 <_dtoa_r+0x520>)
 80061a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	da03      	bge.n	80061bc <_dtoa_r+0x46c>
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f340 8100 	ble.w	80063bc <_dtoa_r+0x66c>
 80061bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061c0:	4656      	mov	r6, sl
 80061c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c6:	4620      	mov	r0, r4
 80061c8:	4629      	mov	r1, r5
 80061ca:	f7fa faaf 	bl	800072c <__aeabi_ddiv>
 80061ce:	f7fa fc33 	bl	8000a38 <__aeabi_d2iz>
 80061d2:	4680      	mov	r8, r0
 80061d4:	f7fa f916 	bl	8000404 <__aeabi_i2d>
 80061d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061dc:	f7fa f97c 	bl	80004d8 <__aeabi_dmul>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4620      	mov	r0, r4
 80061e6:	4629      	mov	r1, r5
 80061e8:	f7f9 ffbe 	bl	8000168 <__aeabi_dsub>
 80061ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80061f0:	9d07      	ldr	r5, [sp, #28]
 80061f2:	f806 4b01 	strb.w	r4, [r6], #1
 80061f6:	eba6 040a 	sub.w	r4, r6, sl
 80061fa:	42a5      	cmp	r5, r4
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	f040 8116 	bne.w	8006430 <_dtoa_r+0x6e0>
 8006204:	f7f9 ffb2 	bl	800016c <__adddf3>
 8006208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	f7fa fbf2 	bl	80009f8 <__aeabi_dcmpgt>
 8006214:	2800      	cmp	r0, #0
 8006216:	f040 80f8 	bne.w	800640a <_dtoa_r+0x6ba>
 800621a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 8006226:	b118      	cbz	r0, 8006230 <_dtoa_r+0x4e0>
 8006228:	f018 0f01 	tst.w	r8, #1
 800622c:	f040 80ed 	bne.w	800640a <_dtoa_r+0x6ba>
 8006230:	4649      	mov	r1, r9
 8006232:	4658      	mov	r0, fp
 8006234:	f000 fc92 	bl	8006b5c <_Bfree>
 8006238:	2300      	movs	r3, #0
 800623a:	7033      	strb	r3, [r6, #0]
 800623c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800623e:	3701      	adds	r7, #1
 8006240:	601f      	str	r7, [r3, #0]
 8006242:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8320 	beq.w	800688a <_dtoa_r+0xb3a>
 800624a:	601e      	str	r6, [r3, #0]
 800624c:	e31d      	b.n	800688a <_dtoa_r+0xb3a>
 800624e:	07e2      	lsls	r2, r4, #31
 8006250:	d505      	bpl.n	800625e <_dtoa_r+0x50e>
 8006252:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006256:	f7fa f93f 	bl	80004d8 <__aeabi_dmul>
 800625a:	2301      	movs	r3, #1
 800625c:	3601      	adds	r6, #1
 800625e:	1064      	asrs	r4, r4, #1
 8006260:	3508      	adds	r5, #8
 8006262:	e73f      	b.n	80060e4 <_dtoa_r+0x394>
 8006264:	2602      	movs	r6, #2
 8006266:	e742      	b.n	80060ee <_dtoa_r+0x39e>
 8006268:	9c07      	ldr	r4, [sp, #28]
 800626a:	9704      	str	r7, [sp, #16]
 800626c:	e761      	b.n	8006132 <_dtoa_r+0x3e2>
 800626e:	bf00      	nop
 8006270:	08009cd8 	.word	0x08009cd8
 8006274:	08009cb0 	.word	0x08009cb0
 8006278:	3ff00000 	.word	0x3ff00000
 800627c:	40240000 	.word	0x40240000
 8006280:	401c0000 	.word	0x401c0000
 8006284:	40140000 	.word	0x40140000
 8006288:	4b70      	ldr	r3, [pc, #448]	@ (800644c <_dtoa_r+0x6fc>)
 800628a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800628c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006294:	4454      	add	r4, sl
 8006296:	2900      	cmp	r1, #0
 8006298:	d045      	beq.n	8006326 <_dtoa_r+0x5d6>
 800629a:	2000      	movs	r0, #0
 800629c:	496c      	ldr	r1, [pc, #432]	@ (8006450 <_dtoa_r+0x700>)
 800629e:	f7fa fa45 	bl	800072c <__aeabi_ddiv>
 80062a2:	4633      	mov	r3, r6
 80062a4:	462a      	mov	r2, r5
 80062a6:	f7f9 ff5f 	bl	8000168 <__aeabi_dsub>
 80062aa:	4656      	mov	r6, sl
 80062ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b4:	f7fa fbc0 	bl	8000a38 <__aeabi_d2iz>
 80062b8:	4605      	mov	r5, r0
 80062ba:	f7fa f8a3 	bl	8000404 <__aeabi_i2d>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062c6:	f7f9 ff4f 	bl	8000168 <__aeabi_dsub>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	3530      	adds	r5, #48	@ 0x30
 80062d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062d8:	f806 5b01 	strb.w	r5, [r6], #1
 80062dc:	f7fa fb6e 	bl	80009bc <__aeabi_dcmplt>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d163      	bne.n	80063ac <_dtoa_r+0x65c>
 80062e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062e8:	2000      	movs	r0, #0
 80062ea:	495a      	ldr	r1, [pc, #360]	@ (8006454 <_dtoa_r+0x704>)
 80062ec:	f7f9 ff3c 	bl	8000168 <__aeabi_dsub>
 80062f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062f4:	f7fa fb62 	bl	80009bc <__aeabi_dcmplt>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	f040 8087 	bne.w	800640c <_dtoa_r+0x6bc>
 80062fe:	42a6      	cmp	r6, r4
 8006300:	f43f af43 	beq.w	800618a <_dtoa_r+0x43a>
 8006304:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006308:	2200      	movs	r2, #0
 800630a:	4b53      	ldr	r3, [pc, #332]	@ (8006458 <_dtoa_r+0x708>)
 800630c:	f7fa f8e4 	bl	80004d8 <__aeabi_dmul>
 8006310:	2200      	movs	r2, #0
 8006312:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800631a:	4b4f      	ldr	r3, [pc, #316]	@ (8006458 <_dtoa_r+0x708>)
 800631c:	f7fa f8dc 	bl	80004d8 <__aeabi_dmul>
 8006320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006324:	e7c4      	b.n	80062b0 <_dtoa_r+0x560>
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	f7fa f8d5 	bl	80004d8 <__aeabi_dmul>
 800632e:	4656      	mov	r6, sl
 8006330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006334:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800633a:	f7fa fb7d 	bl	8000a38 <__aeabi_d2iz>
 800633e:	4605      	mov	r5, r0
 8006340:	f7fa f860 	bl	8000404 <__aeabi_i2d>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800634c:	f7f9 ff0c 	bl	8000168 <__aeabi_dsub>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	3530      	adds	r5, #48	@ 0x30
 8006356:	f806 5b01 	strb.w	r5, [r6], #1
 800635a:	42a6      	cmp	r6, r4
 800635c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	d124      	bne.n	80063b0 <_dtoa_r+0x660>
 8006366:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800636a:	4b39      	ldr	r3, [pc, #228]	@ (8006450 <_dtoa_r+0x700>)
 800636c:	f7f9 fefe 	bl	800016c <__adddf3>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006378:	f7fa fb3e 	bl	80009f8 <__aeabi_dcmpgt>
 800637c:	2800      	cmp	r0, #0
 800637e:	d145      	bne.n	800640c <_dtoa_r+0x6bc>
 8006380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006384:	2000      	movs	r0, #0
 8006386:	4932      	ldr	r1, [pc, #200]	@ (8006450 <_dtoa_r+0x700>)
 8006388:	f7f9 feee 	bl	8000168 <__aeabi_dsub>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006394:	f7fa fb12 	bl	80009bc <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	f43f aef6 	beq.w	800618a <_dtoa_r+0x43a>
 800639e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80063a0:	1e73      	subs	r3, r6, #1
 80063a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063a8:	2b30      	cmp	r3, #48	@ 0x30
 80063aa:	d0f8      	beq.n	800639e <_dtoa_r+0x64e>
 80063ac:	9f04      	ldr	r7, [sp, #16]
 80063ae:	e73f      	b.n	8006230 <_dtoa_r+0x4e0>
 80063b0:	4b29      	ldr	r3, [pc, #164]	@ (8006458 <_dtoa_r+0x708>)
 80063b2:	f7fa f891 	bl	80004d8 <__aeabi_dmul>
 80063b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ba:	e7bc      	b.n	8006336 <_dtoa_r+0x5e6>
 80063bc:	d10c      	bne.n	80063d8 <_dtoa_r+0x688>
 80063be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b25      	ldr	r3, [pc, #148]	@ (800645c <_dtoa_r+0x70c>)
 80063c6:	f7fa f887 	bl	80004d8 <__aeabi_dmul>
 80063ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ce:	f7fa fb09 	bl	80009e4 <__aeabi_dcmpge>
 80063d2:	2800      	cmp	r0, #0
 80063d4:	f000 815b 	beq.w	800668e <_dtoa_r+0x93e>
 80063d8:	2400      	movs	r4, #0
 80063da:	4625      	mov	r5, r4
 80063dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063de:	4656      	mov	r6, sl
 80063e0:	43db      	mvns	r3, r3
 80063e2:	9304      	str	r3, [sp, #16]
 80063e4:	2700      	movs	r7, #0
 80063e6:	4621      	mov	r1, r4
 80063e8:	4658      	mov	r0, fp
 80063ea:	f000 fbb7 	bl	8006b5c <_Bfree>
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	d0dc      	beq.n	80063ac <_dtoa_r+0x65c>
 80063f2:	b12f      	cbz	r7, 8006400 <_dtoa_r+0x6b0>
 80063f4:	42af      	cmp	r7, r5
 80063f6:	d003      	beq.n	8006400 <_dtoa_r+0x6b0>
 80063f8:	4639      	mov	r1, r7
 80063fa:	4658      	mov	r0, fp
 80063fc:	f000 fbae 	bl	8006b5c <_Bfree>
 8006400:	4629      	mov	r1, r5
 8006402:	4658      	mov	r0, fp
 8006404:	f000 fbaa 	bl	8006b5c <_Bfree>
 8006408:	e7d0      	b.n	80063ac <_dtoa_r+0x65c>
 800640a:	9704      	str	r7, [sp, #16]
 800640c:	4633      	mov	r3, r6
 800640e:	461e      	mov	r6, r3
 8006410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006414:	2a39      	cmp	r2, #57	@ 0x39
 8006416:	d107      	bne.n	8006428 <_dtoa_r+0x6d8>
 8006418:	459a      	cmp	sl, r3
 800641a:	d1f8      	bne.n	800640e <_dtoa_r+0x6be>
 800641c:	9a04      	ldr	r2, [sp, #16]
 800641e:	3201      	adds	r2, #1
 8006420:	9204      	str	r2, [sp, #16]
 8006422:	2230      	movs	r2, #48	@ 0x30
 8006424:	f88a 2000 	strb.w	r2, [sl]
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	3201      	adds	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e7bd      	b.n	80063ac <_dtoa_r+0x65c>
 8006430:	2200      	movs	r2, #0
 8006432:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <_dtoa_r+0x708>)
 8006434:	f7fa f850 	bl	80004d8 <__aeabi_dmul>
 8006438:	2200      	movs	r2, #0
 800643a:	2300      	movs	r3, #0
 800643c:	4604      	mov	r4, r0
 800643e:	460d      	mov	r5, r1
 8006440:	f7fa fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8006444:	2800      	cmp	r0, #0
 8006446:	f43f aebc 	beq.w	80061c2 <_dtoa_r+0x472>
 800644a:	e6f1      	b.n	8006230 <_dtoa_r+0x4e0>
 800644c:	08009cd8 	.word	0x08009cd8
 8006450:	3fe00000 	.word	0x3fe00000
 8006454:	3ff00000 	.word	0x3ff00000
 8006458:	40240000 	.word	0x40240000
 800645c:	40140000 	.word	0x40140000
 8006460:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006462:	2a00      	cmp	r2, #0
 8006464:	f000 80db 	beq.w	800661e <_dtoa_r+0x8ce>
 8006468:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800646a:	2a01      	cmp	r2, #1
 800646c:	f300 80bf 	bgt.w	80065ee <_dtoa_r+0x89e>
 8006470:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006472:	2a00      	cmp	r2, #0
 8006474:	f000 80b7 	beq.w	80065e6 <_dtoa_r+0x896>
 8006478:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800647c:	4646      	mov	r6, r8
 800647e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006482:	2101      	movs	r1, #1
 8006484:	441a      	add	r2, r3
 8006486:	4658      	mov	r0, fp
 8006488:	4498      	add	r8, r3
 800648a:	9209      	str	r2, [sp, #36]	@ 0x24
 800648c:	f000 fc64 	bl	8006d58 <__i2b>
 8006490:	4605      	mov	r5, r0
 8006492:	b15e      	cbz	r6, 80064ac <_dtoa_r+0x75c>
 8006494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd08      	ble.n	80064ac <_dtoa_r+0x75c>
 800649a:	42b3      	cmp	r3, r6
 800649c:	bfa8      	it	ge
 800649e:	4633      	movge	r3, r6
 80064a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064a2:	eba8 0803 	sub.w	r8, r8, r3
 80064a6:	1af6      	subs	r6, r6, r3
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ae:	b1f3      	cbz	r3, 80064ee <_dtoa_r+0x79e>
 80064b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80b7 	beq.w	8006626 <_dtoa_r+0x8d6>
 80064b8:	b18c      	cbz	r4, 80064de <_dtoa_r+0x78e>
 80064ba:	4629      	mov	r1, r5
 80064bc:	4622      	mov	r2, r4
 80064be:	4658      	mov	r0, fp
 80064c0:	f000 fd08 	bl	8006ed4 <__pow5mult>
 80064c4:	464a      	mov	r2, r9
 80064c6:	4601      	mov	r1, r0
 80064c8:	4605      	mov	r5, r0
 80064ca:	4658      	mov	r0, fp
 80064cc:	f000 fc5a 	bl	8006d84 <__multiply>
 80064d0:	4649      	mov	r1, r9
 80064d2:	9004      	str	r0, [sp, #16]
 80064d4:	4658      	mov	r0, fp
 80064d6:	f000 fb41 	bl	8006b5c <_Bfree>
 80064da:	9b04      	ldr	r3, [sp, #16]
 80064dc:	4699      	mov	r9, r3
 80064de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064e0:	1b1a      	subs	r2, r3, r4
 80064e2:	d004      	beq.n	80064ee <_dtoa_r+0x79e>
 80064e4:	4649      	mov	r1, r9
 80064e6:	4658      	mov	r0, fp
 80064e8:	f000 fcf4 	bl	8006ed4 <__pow5mult>
 80064ec:	4681      	mov	r9, r0
 80064ee:	2101      	movs	r1, #1
 80064f0:	4658      	mov	r0, fp
 80064f2:	f000 fc31 	bl	8006d58 <__i2b>
 80064f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064f8:	4604      	mov	r4, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 81c9 	beq.w	8006892 <_dtoa_r+0xb42>
 8006500:	461a      	mov	r2, r3
 8006502:	4601      	mov	r1, r0
 8006504:	4658      	mov	r0, fp
 8006506:	f000 fce5 	bl	8006ed4 <__pow5mult>
 800650a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800650c:	4604      	mov	r4, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	f300 808f 	bgt.w	8006632 <_dtoa_r+0x8e2>
 8006514:	9b02      	ldr	r3, [sp, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 8087 	bne.w	800662a <_dtoa_r+0x8da>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 8083 	bne.w	800662e <_dtoa_r+0x8de>
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800652e:	0d1b      	lsrs	r3, r3, #20
 8006530:	051b      	lsls	r3, r3, #20
 8006532:	b12b      	cbz	r3, 8006540 <_dtoa_r+0x7f0>
 8006534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006536:	f108 0801 	add.w	r8, r8, #1
 800653a:	3301      	adds	r3, #1
 800653c:	9309      	str	r3, [sp, #36]	@ 0x24
 800653e:	2301      	movs	r3, #1
 8006540:	930a      	str	r3, [sp, #40]	@ 0x28
 8006542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 81aa 	beq.w	800689e <_dtoa_r+0xb4e>
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006550:	6918      	ldr	r0, [r3, #16]
 8006552:	f000 fbb5 	bl	8006cc0 <__hi0bits>
 8006556:	f1c0 0020 	rsb	r0, r0, #32
 800655a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655c:	4418      	add	r0, r3
 800655e:	f010 001f 	ands.w	r0, r0, #31
 8006562:	d071      	beq.n	8006648 <_dtoa_r+0x8f8>
 8006564:	f1c0 0320 	rsb	r3, r0, #32
 8006568:	2b04      	cmp	r3, #4
 800656a:	dd65      	ble.n	8006638 <_dtoa_r+0x8e8>
 800656c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656e:	f1c0 001c 	rsb	r0, r0, #28
 8006572:	4403      	add	r3, r0
 8006574:	4480      	add	r8, r0
 8006576:	4406      	add	r6, r0
 8006578:	9309      	str	r3, [sp, #36]	@ 0x24
 800657a:	f1b8 0f00 	cmp.w	r8, #0
 800657e:	dd05      	ble.n	800658c <_dtoa_r+0x83c>
 8006580:	4649      	mov	r1, r9
 8006582:	4642      	mov	r2, r8
 8006584:	4658      	mov	r0, fp
 8006586:	f000 fcff 	bl	8006f88 <__lshift>
 800658a:	4681      	mov	r9, r0
 800658c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	dd05      	ble.n	800659e <_dtoa_r+0x84e>
 8006592:	4621      	mov	r1, r4
 8006594:	461a      	mov	r2, r3
 8006596:	4658      	mov	r0, fp
 8006598:	f000 fcf6 	bl	8006f88 <__lshift>
 800659c:	4604      	mov	r4, r0
 800659e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d053      	beq.n	800664c <_dtoa_r+0x8fc>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4648      	mov	r0, r9
 80065a8:	f000 fd5a 	bl	8007060 <__mcmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	da4d      	bge.n	800664c <_dtoa_r+0x8fc>
 80065b0:	1e7b      	subs	r3, r7, #1
 80065b2:	4649      	mov	r1, r9
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	220a      	movs	r2, #10
 80065b8:	2300      	movs	r3, #0
 80065ba:	4658      	mov	r0, fp
 80065bc:	f000 faf0 	bl	8006ba0 <__multadd>
 80065c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065c2:	4681      	mov	r9, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 816c 	beq.w	80068a2 <_dtoa_r+0xb52>
 80065ca:	2300      	movs	r3, #0
 80065cc:	4629      	mov	r1, r5
 80065ce:	220a      	movs	r2, #10
 80065d0:	4658      	mov	r0, fp
 80065d2:	f000 fae5 	bl	8006ba0 <__multadd>
 80065d6:	9b08      	ldr	r3, [sp, #32]
 80065d8:	4605      	mov	r5, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc61      	bgt.n	80066a2 <_dtoa_r+0x952>
 80065de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	dc3b      	bgt.n	800665c <_dtoa_r+0x90c>
 80065e4:	e05d      	b.n	80066a2 <_dtoa_r+0x952>
 80065e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065ec:	e746      	b.n	800647c <_dtoa_r+0x72c>
 80065ee:	9b07      	ldr	r3, [sp, #28]
 80065f0:	1e5c      	subs	r4, r3, #1
 80065f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	bfbf      	itttt	lt
 80065f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80065fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80065fc:	1ae3      	sublt	r3, r4, r3
 80065fe:	18d2      	addlt	r2, r2, r3
 8006600:	bfa8      	it	ge
 8006602:	1b1c      	subge	r4, r3, r4
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	bfbe      	ittt	lt
 8006608:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800660a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800660c:	2400      	movlt	r4, #0
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfb5      	itete	lt
 8006612:	eba8 0603 	sublt.w	r6, r8, r3
 8006616:	4646      	movge	r6, r8
 8006618:	2300      	movlt	r3, #0
 800661a:	9b07      	ldrge	r3, [sp, #28]
 800661c:	e730      	b.n	8006480 <_dtoa_r+0x730>
 800661e:	4646      	mov	r6, r8
 8006620:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006622:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006624:	e735      	b.n	8006492 <_dtoa_r+0x742>
 8006626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006628:	e75c      	b.n	80064e4 <_dtoa_r+0x794>
 800662a:	2300      	movs	r3, #0
 800662c:	e788      	b.n	8006540 <_dtoa_r+0x7f0>
 800662e:	9b02      	ldr	r3, [sp, #8]
 8006630:	e786      	b.n	8006540 <_dtoa_r+0x7f0>
 8006632:	2300      	movs	r3, #0
 8006634:	930a      	str	r3, [sp, #40]	@ 0x28
 8006636:	e788      	b.n	800654a <_dtoa_r+0x7fa>
 8006638:	d09f      	beq.n	800657a <_dtoa_r+0x82a>
 800663a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800663c:	331c      	adds	r3, #28
 800663e:	441a      	add	r2, r3
 8006640:	4498      	add	r8, r3
 8006642:	441e      	add	r6, r3
 8006644:	9209      	str	r2, [sp, #36]	@ 0x24
 8006646:	e798      	b.n	800657a <_dtoa_r+0x82a>
 8006648:	4603      	mov	r3, r0
 800664a:	e7f6      	b.n	800663a <_dtoa_r+0x8ea>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	9704      	str	r7, [sp, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	dc20      	bgt.n	8006696 <_dtoa_r+0x946>
 8006654:	9308      	str	r3, [sp, #32]
 8006656:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006658:	2b02      	cmp	r3, #2
 800665a:	dd1e      	ble.n	800669a <_dtoa_r+0x94a>
 800665c:	9b08      	ldr	r3, [sp, #32]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f47f aebc 	bne.w	80063dc <_dtoa_r+0x68c>
 8006664:	4621      	mov	r1, r4
 8006666:	2205      	movs	r2, #5
 8006668:	4658      	mov	r0, fp
 800666a:	f000 fa99 	bl	8006ba0 <__multadd>
 800666e:	4601      	mov	r1, r0
 8006670:	4604      	mov	r4, r0
 8006672:	4648      	mov	r0, r9
 8006674:	f000 fcf4 	bl	8007060 <__mcmp>
 8006678:	2800      	cmp	r0, #0
 800667a:	f77f aeaf 	ble.w	80063dc <_dtoa_r+0x68c>
 800667e:	2331      	movs	r3, #49	@ 0x31
 8006680:	4656      	mov	r6, sl
 8006682:	f806 3b01 	strb.w	r3, [r6], #1
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	e6aa      	b.n	80063e4 <_dtoa_r+0x694>
 800668e:	9c07      	ldr	r4, [sp, #28]
 8006690:	9704      	str	r7, [sp, #16]
 8006692:	4625      	mov	r5, r4
 8006694:	e7f3      	b.n	800667e <_dtoa_r+0x92e>
 8006696:	9b07      	ldr	r3, [sp, #28]
 8006698:	9308      	str	r3, [sp, #32]
 800669a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8104 	beq.w	80068aa <_dtoa_r+0xb5a>
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	dd05      	ble.n	80066b2 <_dtoa_r+0x962>
 80066a6:	4629      	mov	r1, r5
 80066a8:	4632      	mov	r2, r6
 80066aa:	4658      	mov	r0, fp
 80066ac:	f000 fc6c 	bl	8006f88 <__lshift>
 80066b0:	4605      	mov	r5, r0
 80066b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05a      	beq.n	800676e <_dtoa_r+0xa1e>
 80066b8:	4658      	mov	r0, fp
 80066ba:	6869      	ldr	r1, [r5, #4]
 80066bc:	f000 fa0e 	bl	8006adc <_Balloc>
 80066c0:	4606      	mov	r6, r0
 80066c2:	b928      	cbnz	r0, 80066d0 <_dtoa_r+0x980>
 80066c4:	4602      	mov	r2, r0
 80066c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066ca:	4b83      	ldr	r3, [pc, #524]	@ (80068d8 <_dtoa_r+0xb88>)
 80066cc:	f7ff bb54 	b.w	8005d78 <_dtoa_r+0x28>
 80066d0:	692a      	ldr	r2, [r5, #16]
 80066d2:	f105 010c 	add.w	r1, r5, #12
 80066d6:	3202      	adds	r2, #2
 80066d8:	0092      	lsls	r2, r2, #2
 80066da:	300c      	adds	r0, #12
 80066dc:	f002 fc96 	bl	800900c <memcpy>
 80066e0:	2201      	movs	r2, #1
 80066e2:	4631      	mov	r1, r6
 80066e4:	4658      	mov	r0, fp
 80066e6:	f000 fc4f 	bl	8006f88 <__lshift>
 80066ea:	462f      	mov	r7, r5
 80066ec:	4605      	mov	r5, r0
 80066ee:	f10a 0301 	add.w	r3, sl, #1
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	9b08      	ldr	r3, [sp, #32]
 80066f6:	4453      	add	r3, sl
 80066f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	930a      	str	r3, [sp, #40]	@ 0x28
 8006702:	9b07      	ldr	r3, [sp, #28]
 8006704:	4621      	mov	r1, r4
 8006706:	3b01      	subs	r3, #1
 8006708:	4648      	mov	r0, r9
 800670a:	9302      	str	r3, [sp, #8]
 800670c:	f7ff fa98 	bl	8005c40 <quorem>
 8006710:	4639      	mov	r1, r7
 8006712:	9008      	str	r0, [sp, #32]
 8006714:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006718:	4648      	mov	r0, r9
 800671a:	f000 fca1 	bl	8007060 <__mcmp>
 800671e:	462a      	mov	r2, r5
 8006720:	9009      	str	r0, [sp, #36]	@ 0x24
 8006722:	4621      	mov	r1, r4
 8006724:	4658      	mov	r0, fp
 8006726:	f000 fcb7 	bl	8007098 <__mdiff>
 800672a:	68c2      	ldr	r2, [r0, #12]
 800672c:	4606      	mov	r6, r0
 800672e:	bb02      	cbnz	r2, 8006772 <_dtoa_r+0xa22>
 8006730:	4601      	mov	r1, r0
 8006732:	4648      	mov	r0, r9
 8006734:	f000 fc94 	bl	8007060 <__mcmp>
 8006738:	4602      	mov	r2, r0
 800673a:	4631      	mov	r1, r6
 800673c:	4658      	mov	r0, fp
 800673e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006740:	f000 fa0c 	bl	8006b5c <_Bfree>
 8006744:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006746:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006748:	9e07      	ldr	r6, [sp, #28]
 800674a:	ea43 0102 	orr.w	r1, r3, r2
 800674e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006750:	4319      	orrs	r1, r3
 8006752:	d110      	bne.n	8006776 <_dtoa_r+0xa26>
 8006754:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006758:	d029      	beq.n	80067ae <_dtoa_r+0xa5e>
 800675a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	dd02      	ble.n	8006766 <_dtoa_r+0xa16>
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006766:	9b02      	ldr	r3, [sp, #8]
 8006768:	f883 8000 	strb.w	r8, [r3]
 800676c:	e63b      	b.n	80063e6 <_dtoa_r+0x696>
 800676e:	4628      	mov	r0, r5
 8006770:	e7bb      	b.n	80066ea <_dtoa_r+0x99a>
 8006772:	2201      	movs	r2, #1
 8006774:	e7e1      	b.n	800673a <_dtoa_r+0x9ea>
 8006776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	db04      	blt.n	8006786 <_dtoa_r+0xa36>
 800677c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800677e:	430b      	orrs	r3, r1
 8006780:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006782:	430b      	orrs	r3, r1
 8006784:	d120      	bne.n	80067c8 <_dtoa_r+0xa78>
 8006786:	2a00      	cmp	r2, #0
 8006788:	dded      	ble.n	8006766 <_dtoa_r+0xa16>
 800678a:	4649      	mov	r1, r9
 800678c:	2201      	movs	r2, #1
 800678e:	4658      	mov	r0, fp
 8006790:	f000 fbfa 	bl	8006f88 <__lshift>
 8006794:	4621      	mov	r1, r4
 8006796:	4681      	mov	r9, r0
 8006798:	f000 fc62 	bl	8007060 <__mcmp>
 800679c:	2800      	cmp	r0, #0
 800679e:	dc03      	bgt.n	80067a8 <_dtoa_r+0xa58>
 80067a0:	d1e1      	bne.n	8006766 <_dtoa_r+0xa16>
 80067a2:	f018 0f01 	tst.w	r8, #1
 80067a6:	d0de      	beq.n	8006766 <_dtoa_r+0xa16>
 80067a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067ac:	d1d8      	bne.n	8006760 <_dtoa_r+0xa10>
 80067ae:	2339      	movs	r3, #57	@ 0x39
 80067b0:	9a02      	ldr	r2, [sp, #8]
 80067b2:	7013      	strb	r3, [r2, #0]
 80067b4:	4633      	mov	r3, r6
 80067b6:	461e      	mov	r6, r3
 80067b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067bc:	3b01      	subs	r3, #1
 80067be:	2a39      	cmp	r2, #57	@ 0x39
 80067c0:	d052      	beq.n	8006868 <_dtoa_r+0xb18>
 80067c2:	3201      	adds	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	e60e      	b.n	80063e6 <_dtoa_r+0x696>
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	dd07      	ble.n	80067dc <_dtoa_r+0xa8c>
 80067cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067d0:	d0ed      	beq.n	80067ae <_dtoa_r+0xa5e>
 80067d2:	9a02      	ldr	r2, [sp, #8]
 80067d4:	f108 0301 	add.w	r3, r8, #1
 80067d8:	7013      	strb	r3, [r2, #0]
 80067da:	e604      	b.n	80063e6 <_dtoa_r+0x696>
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	9a07      	ldr	r2, [sp, #28]
 80067e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80067e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d028      	beq.n	800683c <_dtoa_r+0xaec>
 80067ea:	4649      	mov	r1, r9
 80067ec:	2300      	movs	r3, #0
 80067ee:	220a      	movs	r2, #10
 80067f0:	4658      	mov	r0, fp
 80067f2:	f000 f9d5 	bl	8006ba0 <__multadd>
 80067f6:	42af      	cmp	r7, r5
 80067f8:	4681      	mov	r9, r0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	f04f 020a 	mov.w	r2, #10
 8006802:	4639      	mov	r1, r7
 8006804:	4658      	mov	r0, fp
 8006806:	d107      	bne.n	8006818 <_dtoa_r+0xac8>
 8006808:	f000 f9ca 	bl	8006ba0 <__multadd>
 800680c:	4607      	mov	r7, r0
 800680e:	4605      	mov	r5, r0
 8006810:	9b07      	ldr	r3, [sp, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	9307      	str	r3, [sp, #28]
 8006816:	e774      	b.n	8006702 <_dtoa_r+0x9b2>
 8006818:	f000 f9c2 	bl	8006ba0 <__multadd>
 800681c:	4629      	mov	r1, r5
 800681e:	4607      	mov	r7, r0
 8006820:	2300      	movs	r3, #0
 8006822:	220a      	movs	r2, #10
 8006824:	4658      	mov	r0, fp
 8006826:	f000 f9bb 	bl	8006ba0 <__multadd>
 800682a:	4605      	mov	r5, r0
 800682c:	e7f0      	b.n	8006810 <_dtoa_r+0xac0>
 800682e:	9b08      	ldr	r3, [sp, #32]
 8006830:	2700      	movs	r7, #0
 8006832:	2b00      	cmp	r3, #0
 8006834:	bfcc      	ite	gt
 8006836:	461e      	movgt	r6, r3
 8006838:	2601      	movle	r6, #1
 800683a:	4456      	add	r6, sl
 800683c:	4649      	mov	r1, r9
 800683e:	2201      	movs	r2, #1
 8006840:	4658      	mov	r0, fp
 8006842:	f000 fba1 	bl	8006f88 <__lshift>
 8006846:	4621      	mov	r1, r4
 8006848:	4681      	mov	r9, r0
 800684a:	f000 fc09 	bl	8007060 <__mcmp>
 800684e:	2800      	cmp	r0, #0
 8006850:	dcb0      	bgt.n	80067b4 <_dtoa_r+0xa64>
 8006852:	d102      	bne.n	800685a <_dtoa_r+0xb0a>
 8006854:	f018 0f01 	tst.w	r8, #1
 8006858:	d1ac      	bne.n	80067b4 <_dtoa_r+0xa64>
 800685a:	4633      	mov	r3, r6
 800685c:	461e      	mov	r6, r3
 800685e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006862:	2a30      	cmp	r2, #48	@ 0x30
 8006864:	d0fa      	beq.n	800685c <_dtoa_r+0xb0c>
 8006866:	e5be      	b.n	80063e6 <_dtoa_r+0x696>
 8006868:	459a      	cmp	sl, r3
 800686a:	d1a4      	bne.n	80067b6 <_dtoa_r+0xa66>
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	3301      	adds	r3, #1
 8006870:	9304      	str	r3, [sp, #16]
 8006872:	2331      	movs	r3, #49	@ 0x31
 8006874:	f88a 3000 	strb.w	r3, [sl]
 8006878:	e5b5      	b.n	80063e6 <_dtoa_r+0x696>
 800687a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800687c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80068dc <_dtoa_r+0xb8c>
 8006880:	b11b      	cbz	r3, 800688a <_dtoa_r+0xb3a>
 8006882:	f10a 0308 	add.w	r3, sl, #8
 8006886:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4650      	mov	r0, sl
 800688c:	b017      	add	sp, #92	@ 0x5c
 800688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006892:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006894:	2b01      	cmp	r3, #1
 8006896:	f77f ae3d 	ble.w	8006514 <_dtoa_r+0x7c4>
 800689a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800689c:	930a      	str	r3, [sp, #40]	@ 0x28
 800689e:	2001      	movs	r0, #1
 80068a0:	e65b      	b.n	800655a <_dtoa_r+0x80a>
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f77f aed6 	ble.w	8006656 <_dtoa_r+0x906>
 80068aa:	4656      	mov	r6, sl
 80068ac:	4621      	mov	r1, r4
 80068ae:	4648      	mov	r0, r9
 80068b0:	f7ff f9c6 	bl	8005c40 <quorem>
 80068b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	f806 8b01 	strb.w	r8, [r6], #1
 80068be:	eba6 020a 	sub.w	r2, r6, sl
 80068c2:	4293      	cmp	r3, r2
 80068c4:	ddb3      	ble.n	800682e <_dtoa_r+0xade>
 80068c6:	4649      	mov	r1, r9
 80068c8:	2300      	movs	r3, #0
 80068ca:	220a      	movs	r2, #10
 80068cc:	4658      	mov	r0, fp
 80068ce:	f000 f967 	bl	8006ba0 <__multadd>
 80068d2:	4681      	mov	r9, r0
 80068d4:	e7ea      	b.n	80068ac <_dtoa_r+0xb5c>
 80068d6:	bf00      	nop
 80068d8:	08009c35 	.word	0x08009c35
 80068dc:	08009bb9 	.word	0x08009bb9

080068e0 <_free_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4605      	mov	r5, r0
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d040      	beq.n	800696a <_free_r+0x8a>
 80068e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ec:	1f0c      	subs	r4, r1, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfb8      	it	lt
 80068f2:	18e4      	addlt	r4, r4, r3
 80068f4:	f000 f8e6 	bl	8006ac4 <__malloc_lock>
 80068f8:	4a1c      	ldr	r2, [pc, #112]	@ (800696c <_free_r+0x8c>)
 80068fa:	6813      	ldr	r3, [r2, #0]
 80068fc:	b933      	cbnz	r3, 800690c <_free_r+0x2c>
 80068fe:	6063      	str	r3, [r4, #4]
 8006900:	6014      	str	r4, [r2, #0]
 8006902:	4628      	mov	r0, r5
 8006904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006908:	f000 b8e2 	b.w	8006ad0 <__malloc_unlock>
 800690c:	42a3      	cmp	r3, r4
 800690e:	d908      	bls.n	8006922 <_free_r+0x42>
 8006910:	6820      	ldr	r0, [r4, #0]
 8006912:	1821      	adds	r1, r4, r0
 8006914:	428b      	cmp	r3, r1
 8006916:	bf01      	itttt	eq
 8006918:	6819      	ldreq	r1, [r3, #0]
 800691a:	685b      	ldreq	r3, [r3, #4]
 800691c:	1809      	addeq	r1, r1, r0
 800691e:	6021      	streq	r1, [r4, #0]
 8006920:	e7ed      	b.n	80068fe <_free_r+0x1e>
 8006922:	461a      	mov	r2, r3
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	b10b      	cbz	r3, 800692c <_free_r+0x4c>
 8006928:	42a3      	cmp	r3, r4
 800692a:	d9fa      	bls.n	8006922 <_free_r+0x42>
 800692c:	6811      	ldr	r1, [r2, #0]
 800692e:	1850      	adds	r0, r2, r1
 8006930:	42a0      	cmp	r0, r4
 8006932:	d10b      	bne.n	800694c <_free_r+0x6c>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	4401      	add	r1, r0
 8006938:	1850      	adds	r0, r2, r1
 800693a:	4283      	cmp	r3, r0
 800693c:	6011      	str	r1, [r2, #0]
 800693e:	d1e0      	bne.n	8006902 <_free_r+0x22>
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4408      	add	r0, r1
 8006946:	6010      	str	r0, [r2, #0]
 8006948:	6053      	str	r3, [r2, #4]
 800694a:	e7da      	b.n	8006902 <_free_r+0x22>
 800694c:	d902      	bls.n	8006954 <_free_r+0x74>
 800694e:	230c      	movs	r3, #12
 8006950:	602b      	str	r3, [r5, #0]
 8006952:	e7d6      	b.n	8006902 <_free_r+0x22>
 8006954:	6820      	ldr	r0, [r4, #0]
 8006956:	1821      	adds	r1, r4, r0
 8006958:	428b      	cmp	r3, r1
 800695a:	bf01      	itttt	eq
 800695c:	6819      	ldreq	r1, [r3, #0]
 800695e:	685b      	ldreq	r3, [r3, #4]
 8006960:	1809      	addeq	r1, r1, r0
 8006962:	6021      	streq	r1, [r4, #0]
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	6054      	str	r4, [r2, #4]
 8006968:	e7cb      	b.n	8006902 <_free_r+0x22>
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	2000061c 	.word	0x2000061c

08006970 <malloc>:
 8006970:	4b02      	ldr	r3, [pc, #8]	@ (800697c <malloc+0xc>)
 8006972:	4601      	mov	r1, r0
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f000 b825 	b.w	80069c4 <_malloc_r>
 800697a:	bf00      	nop
 800697c:	20000030 	.word	0x20000030

08006980 <sbrk_aligned>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4e0f      	ldr	r6, [pc, #60]	@ (80069c0 <sbrk_aligned+0x40>)
 8006984:	460c      	mov	r4, r1
 8006986:	6831      	ldr	r1, [r6, #0]
 8006988:	4605      	mov	r5, r0
 800698a:	b911      	cbnz	r1, 8006992 <sbrk_aligned+0x12>
 800698c:	f002 fb2e 	bl	8008fec <_sbrk_r>
 8006990:	6030      	str	r0, [r6, #0]
 8006992:	4621      	mov	r1, r4
 8006994:	4628      	mov	r0, r5
 8006996:	f002 fb29 	bl	8008fec <_sbrk_r>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	d103      	bne.n	80069a6 <sbrk_aligned+0x26>
 800699e:	f04f 34ff 	mov.w	r4, #4294967295
 80069a2:	4620      	mov	r0, r4
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	1cc4      	adds	r4, r0, #3
 80069a8:	f024 0403 	bic.w	r4, r4, #3
 80069ac:	42a0      	cmp	r0, r4
 80069ae:	d0f8      	beq.n	80069a2 <sbrk_aligned+0x22>
 80069b0:	1a21      	subs	r1, r4, r0
 80069b2:	4628      	mov	r0, r5
 80069b4:	f002 fb1a 	bl	8008fec <_sbrk_r>
 80069b8:	3001      	adds	r0, #1
 80069ba:	d1f2      	bne.n	80069a2 <sbrk_aligned+0x22>
 80069bc:	e7ef      	b.n	800699e <sbrk_aligned+0x1e>
 80069be:	bf00      	nop
 80069c0:	20000618 	.word	0x20000618

080069c4 <_malloc_r>:
 80069c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c8:	1ccd      	adds	r5, r1, #3
 80069ca:	f025 0503 	bic.w	r5, r5, #3
 80069ce:	3508      	adds	r5, #8
 80069d0:	2d0c      	cmp	r5, #12
 80069d2:	bf38      	it	cc
 80069d4:	250c      	movcc	r5, #12
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	4606      	mov	r6, r0
 80069da:	db01      	blt.n	80069e0 <_malloc_r+0x1c>
 80069dc:	42a9      	cmp	r1, r5
 80069de:	d904      	bls.n	80069ea <_malloc_r+0x26>
 80069e0:	230c      	movs	r3, #12
 80069e2:	6033      	str	r3, [r6, #0]
 80069e4:	2000      	movs	r0, #0
 80069e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ac0 <_malloc_r+0xfc>
 80069ee:	f000 f869 	bl	8006ac4 <__malloc_lock>
 80069f2:	f8d8 3000 	ldr.w	r3, [r8]
 80069f6:	461c      	mov	r4, r3
 80069f8:	bb44      	cbnz	r4, 8006a4c <_malloc_r+0x88>
 80069fa:	4629      	mov	r1, r5
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff ffbf 	bl	8006980 <sbrk_aligned>
 8006a02:	1c43      	adds	r3, r0, #1
 8006a04:	4604      	mov	r4, r0
 8006a06:	d158      	bne.n	8006aba <_malloc_r+0xf6>
 8006a08:	f8d8 4000 	ldr.w	r4, [r8]
 8006a0c:	4627      	mov	r7, r4
 8006a0e:	2f00      	cmp	r7, #0
 8006a10:	d143      	bne.n	8006a9a <_malloc_r+0xd6>
 8006a12:	2c00      	cmp	r4, #0
 8006a14:	d04b      	beq.n	8006aae <_malloc_r+0xea>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	4639      	mov	r1, r7
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	eb04 0903 	add.w	r9, r4, r3
 8006a20:	f002 fae4 	bl	8008fec <_sbrk_r>
 8006a24:	4581      	cmp	r9, r0
 8006a26:	d142      	bne.n	8006aae <_malloc_r+0xea>
 8006a28:	6821      	ldr	r1, [r4, #0]
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	1a6d      	subs	r5, r5, r1
 8006a2e:	4629      	mov	r1, r5
 8006a30:	f7ff ffa6 	bl	8006980 <sbrk_aligned>
 8006a34:	3001      	adds	r0, #1
 8006a36:	d03a      	beq.n	8006aae <_malloc_r+0xea>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	442b      	add	r3, r5
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	bb62      	cbnz	r2, 8006aa0 <_malloc_r+0xdc>
 8006a46:	f8c8 7000 	str.w	r7, [r8]
 8006a4a:	e00f      	b.n	8006a6c <_malloc_r+0xa8>
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	1b52      	subs	r2, r2, r5
 8006a50:	d420      	bmi.n	8006a94 <_malloc_r+0xd0>
 8006a52:	2a0b      	cmp	r2, #11
 8006a54:	d917      	bls.n	8006a86 <_malloc_r+0xc2>
 8006a56:	1961      	adds	r1, r4, r5
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	6025      	str	r5, [r4, #0]
 8006a5c:	bf18      	it	ne
 8006a5e:	6059      	strne	r1, [r3, #4]
 8006a60:	6863      	ldr	r3, [r4, #4]
 8006a62:	bf08      	it	eq
 8006a64:	f8c8 1000 	streq.w	r1, [r8]
 8006a68:	5162      	str	r2, [r4, r5]
 8006a6a:	604b      	str	r3, [r1, #4]
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 f82f 	bl	8006ad0 <__malloc_unlock>
 8006a72:	f104 000b 	add.w	r0, r4, #11
 8006a76:	1d23      	adds	r3, r4, #4
 8006a78:	f020 0007 	bic.w	r0, r0, #7
 8006a7c:	1ac2      	subs	r2, r0, r3
 8006a7e:	bf1c      	itt	ne
 8006a80:	1a1b      	subne	r3, r3, r0
 8006a82:	50a3      	strne	r3, [r4, r2]
 8006a84:	e7af      	b.n	80069e6 <_malloc_r+0x22>
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	bf0c      	ite	eq
 8006a8c:	f8c8 2000 	streq.w	r2, [r8]
 8006a90:	605a      	strne	r2, [r3, #4]
 8006a92:	e7eb      	b.n	8006a6c <_malloc_r+0xa8>
 8006a94:	4623      	mov	r3, r4
 8006a96:	6864      	ldr	r4, [r4, #4]
 8006a98:	e7ae      	b.n	80069f8 <_malloc_r+0x34>
 8006a9a:	463c      	mov	r4, r7
 8006a9c:	687f      	ldr	r7, [r7, #4]
 8006a9e:	e7b6      	b.n	8006a0e <_malloc_r+0x4a>
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	d1fb      	bne.n	8006aa0 <_malloc_r+0xdc>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6053      	str	r3, [r2, #4]
 8006aac:	e7de      	b.n	8006a6c <_malloc_r+0xa8>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	6033      	str	r3, [r6, #0]
 8006ab4:	f000 f80c 	bl	8006ad0 <__malloc_unlock>
 8006ab8:	e794      	b.n	80069e4 <_malloc_r+0x20>
 8006aba:	6005      	str	r5, [r0, #0]
 8006abc:	e7d6      	b.n	8006a6c <_malloc_r+0xa8>
 8006abe:	bf00      	nop
 8006ac0:	2000061c 	.word	0x2000061c

08006ac4 <__malloc_lock>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	@ (8006acc <__malloc_lock+0x8>)
 8006ac6:	f7ff b8a6 	b.w	8005c16 <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	20000614 	.word	0x20000614

08006ad0 <__malloc_unlock>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	@ (8006ad8 <__malloc_unlock+0x8>)
 8006ad2:	f7ff b8a1 	b.w	8005c18 <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	20000614 	.word	0x20000614

08006adc <_Balloc>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	69c6      	ldr	r6, [r0, #28]
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	460d      	mov	r5, r1
 8006ae4:	b976      	cbnz	r6, 8006b04 <_Balloc+0x28>
 8006ae6:	2010      	movs	r0, #16
 8006ae8:	f7ff ff42 	bl	8006970 <malloc>
 8006aec:	4602      	mov	r2, r0
 8006aee:	61e0      	str	r0, [r4, #28]
 8006af0:	b920      	cbnz	r0, 8006afc <_Balloc+0x20>
 8006af2:	216b      	movs	r1, #107	@ 0x6b
 8006af4:	4b17      	ldr	r3, [pc, #92]	@ (8006b54 <_Balloc+0x78>)
 8006af6:	4818      	ldr	r0, [pc, #96]	@ (8006b58 <_Balloc+0x7c>)
 8006af8:	f002 fa9c 	bl	8009034 <__assert_func>
 8006afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b00:	6006      	str	r6, [r0, #0]
 8006b02:	60c6      	str	r6, [r0, #12]
 8006b04:	69e6      	ldr	r6, [r4, #28]
 8006b06:	68f3      	ldr	r3, [r6, #12]
 8006b08:	b183      	cbz	r3, 8006b2c <_Balloc+0x50>
 8006b0a:	69e3      	ldr	r3, [r4, #28]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b12:	b9b8      	cbnz	r0, 8006b44 <_Balloc+0x68>
 8006b14:	2101      	movs	r1, #1
 8006b16:	fa01 f605 	lsl.w	r6, r1, r5
 8006b1a:	1d72      	adds	r2, r6, #5
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	f002 faa6 	bl	8009070 <_calloc_r>
 8006b24:	b160      	cbz	r0, 8006b40 <_Balloc+0x64>
 8006b26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b2a:	e00e      	b.n	8006b4a <_Balloc+0x6e>
 8006b2c:	2221      	movs	r2, #33	@ 0x21
 8006b2e:	2104      	movs	r1, #4
 8006b30:	4620      	mov	r0, r4
 8006b32:	f002 fa9d 	bl	8009070 <_calloc_r>
 8006b36:	69e3      	ldr	r3, [r4, #28]
 8006b38:	60f0      	str	r0, [r6, #12]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e4      	bne.n	8006b0a <_Balloc+0x2e>
 8006b40:	2000      	movs	r0, #0
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	6802      	ldr	r2, [r0, #0]
 8006b46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b50:	e7f7      	b.n	8006b42 <_Balloc+0x66>
 8006b52:	bf00      	nop
 8006b54:	08009bc6 	.word	0x08009bc6
 8006b58:	08009c46 	.word	0x08009c46

08006b5c <_Bfree>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	69c6      	ldr	r6, [r0, #28]
 8006b60:	4605      	mov	r5, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	b976      	cbnz	r6, 8006b84 <_Bfree+0x28>
 8006b66:	2010      	movs	r0, #16
 8006b68:	f7ff ff02 	bl	8006970 <malloc>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	61e8      	str	r0, [r5, #28]
 8006b70:	b920      	cbnz	r0, 8006b7c <_Bfree+0x20>
 8006b72:	218f      	movs	r1, #143	@ 0x8f
 8006b74:	4b08      	ldr	r3, [pc, #32]	@ (8006b98 <_Bfree+0x3c>)
 8006b76:	4809      	ldr	r0, [pc, #36]	@ (8006b9c <_Bfree+0x40>)
 8006b78:	f002 fa5c 	bl	8009034 <__assert_func>
 8006b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b80:	6006      	str	r6, [r0, #0]
 8006b82:	60c6      	str	r6, [r0, #12]
 8006b84:	b13c      	cbz	r4, 8006b96 <_Bfree+0x3a>
 8006b86:	69eb      	ldr	r3, [r5, #28]
 8006b88:	6862      	ldr	r2, [r4, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b90:	6021      	str	r1, [r4, #0]
 8006b92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	08009bc6 	.word	0x08009bc6
 8006b9c:	08009c46 	.word	0x08009c46

08006ba0 <__multadd>:
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	461e      	mov	r6, r3
 8006baa:	2000      	movs	r0, #0
 8006bac:	690d      	ldr	r5, [r1, #16]
 8006bae:	f101 0c14 	add.w	ip, r1, #20
 8006bb2:	f8dc 3000 	ldr.w	r3, [ip]
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	b299      	uxth	r1, r3
 8006bba:	fb02 6101 	mla	r1, r2, r1, r6
 8006bbe:	0c1e      	lsrs	r6, r3, #16
 8006bc0:	0c0b      	lsrs	r3, r1, #16
 8006bc2:	fb02 3306 	mla	r3, r2, r6, r3
 8006bc6:	b289      	uxth	r1, r1
 8006bc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bcc:	4285      	cmp	r5, r0
 8006bce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bd2:	f84c 1b04 	str.w	r1, [ip], #4
 8006bd6:	dcec      	bgt.n	8006bb2 <__multadd+0x12>
 8006bd8:	b30e      	cbz	r6, 8006c1e <__multadd+0x7e>
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	42ab      	cmp	r3, r5
 8006bde:	dc19      	bgt.n	8006c14 <__multadd+0x74>
 8006be0:	6861      	ldr	r1, [r4, #4]
 8006be2:	4638      	mov	r0, r7
 8006be4:	3101      	adds	r1, #1
 8006be6:	f7ff ff79 	bl	8006adc <_Balloc>
 8006bea:	4680      	mov	r8, r0
 8006bec:	b928      	cbnz	r0, 8006bfa <__multadd+0x5a>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	21ba      	movs	r1, #186	@ 0xba
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <__multadd+0x84>)
 8006bf4:	480c      	ldr	r0, [pc, #48]	@ (8006c28 <__multadd+0x88>)
 8006bf6:	f002 fa1d 	bl	8009034 <__assert_func>
 8006bfa:	6922      	ldr	r2, [r4, #16]
 8006bfc:	f104 010c 	add.w	r1, r4, #12
 8006c00:	3202      	adds	r2, #2
 8006c02:	0092      	lsls	r2, r2, #2
 8006c04:	300c      	adds	r0, #12
 8006c06:	f002 fa01 	bl	800900c <memcpy>
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	f7ff ffa5 	bl	8006b5c <_Bfree>
 8006c12:	4644      	mov	r4, r8
 8006c14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c18:	3501      	adds	r5, #1
 8006c1a:	615e      	str	r6, [r3, #20]
 8006c1c:	6125      	str	r5, [r4, #16]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	08009c35 	.word	0x08009c35
 8006c28:	08009c46 	.word	0x08009c46

08006c2c <__s2b>:
 8006c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c30:	4615      	mov	r5, r2
 8006c32:	2209      	movs	r2, #9
 8006c34:	461f      	mov	r7, r3
 8006c36:	3308      	adds	r3, #8
 8006c38:	460c      	mov	r4, r1
 8006c3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c3e:	4606      	mov	r6, r0
 8006c40:	2201      	movs	r2, #1
 8006c42:	2100      	movs	r1, #0
 8006c44:	429a      	cmp	r2, r3
 8006c46:	db09      	blt.n	8006c5c <__s2b+0x30>
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f7ff ff47 	bl	8006adc <_Balloc>
 8006c4e:	b940      	cbnz	r0, 8006c62 <__s2b+0x36>
 8006c50:	4602      	mov	r2, r0
 8006c52:	21d3      	movs	r1, #211	@ 0xd3
 8006c54:	4b18      	ldr	r3, [pc, #96]	@ (8006cb8 <__s2b+0x8c>)
 8006c56:	4819      	ldr	r0, [pc, #100]	@ (8006cbc <__s2b+0x90>)
 8006c58:	f002 f9ec 	bl	8009034 <__assert_func>
 8006c5c:	0052      	lsls	r2, r2, #1
 8006c5e:	3101      	adds	r1, #1
 8006c60:	e7f0      	b.n	8006c44 <__s2b+0x18>
 8006c62:	9b08      	ldr	r3, [sp, #32]
 8006c64:	2d09      	cmp	r5, #9
 8006c66:	6143      	str	r3, [r0, #20]
 8006c68:	f04f 0301 	mov.w	r3, #1
 8006c6c:	6103      	str	r3, [r0, #16]
 8006c6e:	dd16      	ble.n	8006c9e <__s2b+0x72>
 8006c70:	f104 0909 	add.w	r9, r4, #9
 8006c74:	46c8      	mov	r8, r9
 8006c76:	442c      	add	r4, r5
 8006c78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	220a      	movs	r2, #10
 8006c80:	4630      	mov	r0, r6
 8006c82:	3b30      	subs	r3, #48	@ 0x30
 8006c84:	f7ff ff8c 	bl	8006ba0 <__multadd>
 8006c88:	45a0      	cmp	r8, r4
 8006c8a:	d1f5      	bne.n	8006c78 <__s2b+0x4c>
 8006c8c:	f1a5 0408 	sub.w	r4, r5, #8
 8006c90:	444c      	add	r4, r9
 8006c92:	1b2d      	subs	r5, r5, r4
 8006c94:	1963      	adds	r3, r4, r5
 8006c96:	42bb      	cmp	r3, r7
 8006c98:	db04      	blt.n	8006ca4 <__s2b+0x78>
 8006c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9e:	2509      	movs	r5, #9
 8006ca0:	340a      	adds	r4, #10
 8006ca2:	e7f6      	b.n	8006c92 <__s2b+0x66>
 8006ca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ca8:	4601      	mov	r1, r0
 8006caa:	220a      	movs	r2, #10
 8006cac:	4630      	mov	r0, r6
 8006cae:	3b30      	subs	r3, #48	@ 0x30
 8006cb0:	f7ff ff76 	bl	8006ba0 <__multadd>
 8006cb4:	e7ee      	b.n	8006c94 <__s2b+0x68>
 8006cb6:	bf00      	nop
 8006cb8:	08009c35 	.word	0x08009c35
 8006cbc:	08009c46 	.word	0x08009c46

08006cc0 <__hi0bits>:
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cc6:	bf3a      	itte	cc
 8006cc8:	0403      	lslcc	r3, r0, #16
 8006cca:	2010      	movcc	r0, #16
 8006ccc:	2000      	movcs	r0, #0
 8006cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cd2:	bf3c      	itt	cc
 8006cd4:	021b      	lslcc	r3, r3, #8
 8006cd6:	3008      	addcc	r0, #8
 8006cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cdc:	bf3c      	itt	cc
 8006cde:	011b      	lslcc	r3, r3, #4
 8006ce0:	3004      	addcc	r0, #4
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce6:	bf3c      	itt	cc
 8006ce8:	009b      	lslcc	r3, r3, #2
 8006cea:	3002      	addcc	r0, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db05      	blt.n	8006cfc <__hi0bits+0x3c>
 8006cf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cf4:	f100 0001 	add.w	r0, r0, #1
 8006cf8:	bf08      	it	eq
 8006cfa:	2020      	moveq	r0, #32
 8006cfc:	4770      	bx	lr

08006cfe <__lo0bits>:
 8006cfe:	6803      	ldr	r3, [r0, #0]
 8006d00:	4602      	mov	r2, r0
 8006d02:	f013 0007 	ands.w	r0, r3, #7
 8006d06:	d00b      	beq.n	8006d20 <__lo0bits+0x22>
 8006d08:	07d9      	lsls	r1, r3, #31
 8006d0a:	d421      	bmi.n	8006d50 <__lo0bits+0x52>
 8006d0c:	0798      	lsls	r0, r3, #30
 8006d0e:	bf49      	itett	mi
 8006d10:	085b      	lsrmi	r3, r3, #1
 8006d12:	089b      	lsrpl	r3, r3, #2
 8006d14:	2001      	movmi	r0, #1
 8006d16:	6013      	strmi	r3, [r2, #0]
 8006d18:	bf5c      	itt	pl
 8006d1a:	2002      	movpl	r0, #2
 8006d1c:	6013      	strpl	r3, [r2, #0]
 8006d1e:	4770      	bx	lr
 8006d20:	b299      	uxth	r1, r3
 8006d22:	b909      	cbnz	r1, 8006d28 <__lo0bits+0x2a>
 8006d24:	2010      	movs	r0, #16
 8006d26:	0c1b      	lsrs	r3, r3, #16
 8006d28:	b2d9      	uxtb	r1, r3
 8006d2a:	b909      	cbnz	r1, 8006d30 <__lo0bits+0x32>
 8006d2c:	3008      	adds	r0, #8
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	bf04      	itt	eq
 8006d34:	091b      	lsreq	r3, r3, #4
 8006d36:	3004      	addeq	r0, #4
 8006d38:	0799      	lsls	r1, r3, #30
 8006d3a:	bf04      	itt	eq
 8006d3c:	089b      	lsreq	r3, r3, #2
 8006d3e:	3002      	addeq	r0, #2
 8006d40:	07d9      	lsls	r1, r3, #31
 8006d42:	d403      	bmi.n	8006d4c <__lo0bits+0x4e>
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	f100 0001 	add.w	r0, r0, #1
 8006d4a:	d003      	beq.n	8006d54 <__lo0bits+0x56>
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4770      	bx	lr
 8006d50:	2000      	movs	r0, #0
 8006d52:	4770      	bx	lr
 8006d54:	2020      	movs	r0, #32
 8006d56:	4770      	bx	lr

08006d58 <__i2b>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	f7ff febd 	bl	8006adc <_Balloc>
 8006d62:	4602      	mov	r2, r0
 8006d64:	b928      	cbnz	r0, 8006d72 <__i2b+0x1a>
 8006d66:	f240 1145 	movw	r1, #325	@ 0x145
 8006d6a:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <__i2b+0x24>)
 8006d6c:	4804      	ldr	r0, [pc, #16]	@ (8006d80 <__i2b+0x28>)
 8006d6e:	f002 f961 	bl	8009034 <__assert_func>
 8006d72:	2301      	movs	r3, #1
 8006d74:	6144      	str	r4, [r0, #20]
 8006d76:	6103      	str	r3, [r0, #16]
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08009c35 	.word	0x08009c35
 8006d80:	08009c46 	.word	0x08009c46

08006d84 <__multiply>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	4614      	mov	r4, r2
 8006d8a:	690a      	ldr	r2, [r1, #16]
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	460f      	mov	r7, r1
 8006d90:	429a      	cmp	r2, r3
 8006d92:	bfa2      	ittt	ge
 8006d94:	4623      	movge	r3, r4
 8006d96:	460c      	movge	r4, r1
 8006d98:	461f      	movge	r7, r3
 8006d9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d9e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	6861      	ldr	r1, [r4, #4]
 8006da6:	eb0a 0609 	add.w	r6, sl, r9
 8006daa:	42b3      	cmp	r3, r6
 8006dac:	b085      	sub	sp, #20
 8006dae:	bfb8      	it	lt
 8006db0:	3101      	addlt	r1, #1
 8006db2:	f7ff fe93 	bl	8006adc <_Balloc>
 8006db6:	b930      	cbnz	r0, 8006dc6 <__multiply+0x42>
 8006db8:	4602      	mov	r2, r0
 8006dba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006dbe:	4b43      	ldr	r3, [pc, #268]	@ (8006ecc <__multiply+0x148>)
 8006dc0:	4843      	ldr	r0, [pc, #268]	@ (8006ed0 <__multiply+0x14c>)
 8006dc2:	f002 f937 	bl	8009034 <__assert_func>
 8006dc6:	f100 0514 	add.w	r5, r0, #20
 8006dca:	462b      	mov	r3, r5
 8006dcc:	2200      	movs	r2, #0
 8006dce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dd2:	4543      	cmp	r3, r8
 8006dd4:	d321      	bcc.n	8006e1a <__multiply+0x96>
 8006dd6:	f107 0114 	add.w	r1, r7, #20
 8006dda:	f104 0214 	add.w	r2, r4, #20
 8006dde:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006de2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006de6:	9302      	str	r3, [sp, #8]
 8006de8:	1b13      	subs	r3, r2, r4
 8006dea:	3b15      	subs	r3, #21
 8006dec:	f023 0303 	bic.w	r3, r3, #3
 8006df0:	3304      	adds	r3, #4
 8006df2:	f104 0715 	add.w	r7, r4, #21
 8006df6:	42ba      	cmp	r2, r7
 8006df8:	bf38      	it	cc
 8006dfa:	2304      	movcc	r3, #4
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	9b02      	ldr	r3, [sp, #8]
 8006e00:	9103      	str	r1, [sp, #12]
 8006e02:	428b      	cmp	r3, r1
 8006e04:	d80c      	bhi.n	8006e20 <__multiply+0x9c>
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	dd03      	ble.n	8006e12 <__multiply+0x8e>
 8006e0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d05a      	beq.n	8006ec8 <__multiply+0x144>
 8006e12:	6106      	str	r6, [r0, #16]
 8006e14:	b005      	add	sp, #20
 8006e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1a:	f843 2b04 	str.w	r2, [r3], #4
 8006e1e:	e7d8      	b.n	8006dd2 <__multiply+0x4e>
 8006e20:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e24:	f1ba 0f00 	cmp.w	sl, #0
 8006e28:	d023      	beq.n	8006e72 <__multiply+0xee>
 8006e2a:	46a9      	mov	r9, r5
 8006e2c:	f04f 0c00 	mov.w	ip, #0
 8006e30:	f104 0e14 	add.w	lr, r4, #20
 8006e34:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e38:	f8d9 3000 	ldr.w	r3, [r9]
 8006e3c:	fa1f fb87 	uxth.w	fp, r7
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e46:	4463      	add	r3, ip
 8006e48:	f8d9 c000 	ldr.w	ip, [r9]
 8006e4c:	0c3f      	lsrs	r7, r7, #16
 8006e4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e52:	fb0a c707 	mla	r7, sl, r7, ip
 8006e56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e60:	4572      	cmp	r2, lr
 8006e62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e66:	f849 3b04 	str.w	r3, [r9], #4
 8006e6a:	d8e3      	bhi.n	8006e34 <__multiply+0xb0>
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	f845 c003 	str.w	ip, [r5, r3]
 8006e72:	9b03      	ldr	r3, [sp, #12]
 8006e74:	3104      	adds	r1, #4
 8006e76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e7a:	f1b9 0f00 	cmp.w	r9, #0
 8006e7e:	d021      	beq.n	8006ec4 <__multiply+0x140>
 8006e80:	46ae      	mov	lr, r5
 8006e82:	f04f 0a00 	mov.w	sl, #0
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	f104 0c14 	add.w	ip, r4, #20
 8006e8c:	f8bc b000 	ldrh.w	fp, [ip]
 8006e90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	fb09 770b 	mla	r7, r9, fp, r7
 8006e9a:	4457      	add	r7, sl
 8006e9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ea0:	f84e 3b04 	str.w	r3, [lr], #4
 8006ea4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eac:	f8be 3000 	ldrh.w	r3, [lr]
 8006eb0:	4562      	cmp	r2, ip
 8006eb2:	fb09 330a 	mla	r3, r9, sl, r3
 8006eb6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006eba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ebe:	d8e5      	bhi.n	8006e8c <__multiply+0x108>
 8006ec0:	9f01      	ldr	r7, [sp, #4]
 8006ec2:	51eb      	str	r3, [r5, r7]
 8006ec4:	3504      	adds	r5, #4
 8006ec6:	e79a      	b.n	8006dfe <__multiply+0x7a>
 8006ec8:	3e01      	subs	r6, #1
 8006eca:	e79c      	b.n	8006e06 <__multiply+0x82>
 8006ecc:	08009c35 	.word	0x08009c35
 8006ed0:	08009c46 	.word	0x08009c46

08006ed4 <__pow5mult>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	4615      	mov	r5, r2
 8006eda:	f012 0203 	ands.w	r2, r2, #3
 8006ede:	4607      	mov	r7, r0
 8006ee0:	460e      	mov	r6, r1
 8006ee2:	d007      	beq.n	8006ef4 <__pow5mult+0x20>
 8006ee4:	4c25      	ldr	r4, [pc, #148]	@ (8006f7c <__pow5mult+0xa8>)
 8006ee6:	3a01      	subs	r2, #1
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eee:	f7ff fe57 	bl	8006ba0 <__multadd>
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	10ad      	asrs	r5, r5, #2
 8006ef6:	d03d      	beq.n	8006f74 <__pow5mult+0xa0>
 8006ef8:	69fc      	ldr	r4, [r7, #28]
 8006efa:	b97c      	cbnz	r4, 8006f1c <__pow5mult+0x48>
 8006efc:	2010      	movs	r0, #16
 8006efe:	f7ff fd37 	bl	8006970 <malloc>
 8006f02:	4602      	mov	r2, r0
 8006f04:	61f8      	str	r0, [r7, #28]
 8006f06:	b928      	cbnz	r0, 8006f14 <__pow5mult+0x40>
 8006f08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f80 <__pow5mult+0xac>)
 8006f0e:	481d      	ldr	r0, [pc, #116]	@ (8006f84 <__pow5mult+0xb0>)
 8006f10:	f002 f890 	bl	8009034 <__assert_func>
 8006f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f18:	6004      	str	r4, [r0, #0]
 8006f1a:	60c4      	str	r4, [r0, #12]
 8006f1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f24:	b94c      	cbnz	r4, 8006f3a <__pow5mult+0x66>
 8006f26:	f240 2171 	movw	r1, #625	@ 0x271
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f7ff ff14 	bl	8006d58 <__i2b>
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	f04f 0900 	mov.w	r9, #0
 8006f3e:	07eb      	lsls	r3, r5, #31
 8006f40:	d50a      	bpl.n	8006f58 <__pow5mult+0x84>
 8006f42:	4631      	mov	r1, r6
 8006f44:	4622      	mov	r2, r4
 8006f46:	4638      	mov	r0, r7
 8006f48:	f7ff ff1c 	bl	8006d84 <__multiply>
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff fe03 	bl	8006b5c <_Bfree>
 8006f56:	4646      	mov	r6, r8
 8006f58:	106d      	asrs	r5, r5, #1
 8006f5a:	d00b      	beq.n	8006f74 <__pow5mult+0xa0>
 8006f5c:	6820      	ldr	r0, [r4, #0]
 8006f5e:	b938      	cbnz	r0, 8006f70 <__pow5mult+0x9c>
 8006f60:	4622      	mov	r2, r4
 8006f62:	4621      	mov	r1, r4
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff ff0d 	bl	8006d84 <__multiply>
 8006f6a:	6020      	str	r0, [r4, #0]
 8006f6c:	f8c0 9000 	str.w	r9, [r0]
 8006f70:	4604      	mov	r4, r0
 8006f72:	e7e4      	b.n	8006f3e <__pow5mult+0x6a>
 8006f74:	4630      	mov	r0, r6
 8006f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7a:	bf00      	nop
 8006f7c:	08009ca0 	.word	0x08009ca0
 8006f80:	08009bc6 	.word	0x08009bc6
 8006f84:	08009c46 	.word	0x08009c46

08006f88 <__lshift>:
 8006f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	4607      	mov	r7, r0
 8006f90:	4691      	mov	r9, r2
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	6849      	ldr	r1, [r1, #4]
 8006f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fa0:	f108 0601 	add.w	r6, r8, #1
 8006fa4:	42b3      	cmp	r3, r6
 8006fa6:	db0b      	blt.n	8006fc0 <__lshift+0x38>
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f7ff fd97 	bl	8006adc <_Balloc>
 8006fae:	4605      	mov	r5, r0
 8006fb0:	b948      	cbnz	r0, 8006fc6 <__lshift+0x3e>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006fb8:	4b27      	ldr	r3, [pc, #156]	@ (8007058 <__lshift+0xd0>)
 8006fba:	4828      	ldr	r0, [pc, #160]	@ (800705c <__lshift+0xd4>)
 8006fbc:	f002 f83a 	bl	8009034 <__assert_func>
 8006fc0:	3101      	adds	r1, #1
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__lshift+0x1c>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f100 0114 	add.w	r1, r0, #20
 8006fcc:	f100 0210 	add.w	r2, r0, #16
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	4553      	cmp	r3, sl
 8006fd4:	db33      	blt.n	800703e <__lshift+0xb6>
 8006fd6:	6920      	ldr	r0, [r4, #16]
 8006fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fdc:	f104 0314 	add.w	r3, r4, #20
 8006fe0:	f019 091f 	ands.w	r9, r9, #31
 8006fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fec:	d02b      	beq.n	8007046 <__lshift+0xbe>
 8006fee:	468a      	mov	sl, r1
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	fa00 f009 	lsl.w	r0, r0, r9
 8006ffc:	4310      	orrs	r0, r2
 8006ffe:	f84a 0b04 	str.w	r0, [sl], #4
 8007002:	f853 2b04 	ldr.w	r2, [r3], #4
 8007006:	459c      	cmp	ip, r3
 8007008:	fa22 f20e 	lsr.w	r2, r2, lr
 800700c:	d8f3      	bhi.n	8006ff6 <__lshift+0x6e>
 800700e:	ebac 0304 	sub.w	r3, ip, r4
 8007012:	3b15      	subs	r3, #21
 8007014:	f023 0303 	bic.w	r3, r3, #3
 8007018:	3304      	adds	r3, #4
 800701a:	f104 0015 	add.w	r0, r4, #21
 800701e:	4584      	cmp	ip, r0
 8007020:	bf38      	it	cc
 8007022:	2304      	movcc	r3, #4
 8007024:	50ca      	str	r2, [r1, r3]
 8007026:	b10a      	cbz	r2, 800702c <__lshift+0xa4>
 8007028:	f108 0602 	add.w	r6, r8, #2
 800702c:	3e01      	subs	r6, #1
 800702e:	4638      	mov	r0, r7
 8007030:	4621      	mov	r1, r4
 8007032:	612e      	str	r6, [r5, #16]
 8007034:	f7ff fd92 	bl	8006b5c <_Bfree>
 8007038:	4628      	mov	r0, r5
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007042:	3301      	adds	r3, #1
 8007044:	e7c5      	b.n	8006fd2 <__lshift+0x4a>
 8007046:	3904      	subs	r1, #4
 8007048:	f853 2b04 	ldr.w	r2, [r3], #4
 800704c:	459c      	cmp	ip, r3
 800704e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007052:	d8f9      	bhi.n	8007048 <__lshift+0xc0>
 8007054:	e7ea      	b.n	800702c <__lshift+0xa4>
 8007056:	bf00      	nop
 8007058:	08009c35 	.word	0x08009c35
 800705c:	08009c46 	.word	0x08009c46

08007060 <__mcmp>:
 8007060:	4603      	mov	r3, r0
 8007062:	690a      	ldr	r2, [r1, #16]
 8007064:	6900      	ldr	r0, [r0, #16]
 8007066:	b530      	push	{r4, r5, lr}
 8007068:	1a80      	subs	r0, r0, r2
 800706a:	d10e      	bne.n	800708a <__mcmp+0x2a>
 800706c:	3314      	adds	r3, #20
 800706e:	3114      	adds	r1, #20
 8007070:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007074:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007078:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800707c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007080:	4295      	cmp	r5, r2
 8007082:	d003      	beq.n	800708c <__mcmp+0x2c>
 8007084:	d205      	bcs.n	8007092 <__mcmp+0x32>
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	bd30      	pop	{r4, r5, pc}
 800708c:	42a3      	cmp	r3, r4
 800708e:	d3f3      	bcc.n	8007078 <__mcmp+0x18>
 8007090:	e7fb      	b.n	800708a <__mcmp+0x2a>
 8007092:	2001      	movs	r0, #1
 8007094:	e7f9      	b.n	800708a <__mcmp+0x2a>
	...

08007098 <__mdiff>:
 8007098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	4689      	mov	r9, r1
 800709e:	4606      	mov	r6, r0
 80070a0:	4611      	mov	r1, r2
 80070a2:	4648      	mov	r0, r9
 80070a4:	4614      	mov	r4, r2
 80070a6:	f7ff ffdb 	bl	8007060 <__mcmp>
 80070aa:	1e05      	subs	r5, r0, #0
 80070ac:	d112      	bne.n	80070d4 <__mdiff+0x3c>
 80070ae:	4629      	mov	r1, r5
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff fd13 	bl	8006adc <_Balloc>
 80070b6:	4602      	mov	r2, r0
 80070b8:	b928      	cbnz	r0, 80070c6 <__mdiff+0x2e>
 80070ba:	f240 2137 	movw	r1, #567	@ 0x237
 80070be:	4b3e      	ldr	r3, [pc, #248]	@ (80071b8 <__mdiff+0x120>)
 80070c0:	483e      	ldr	r0, [pc, #248]	@ (80071bc <__mdiff+0x124>)
 80070c2:	f001 ffb7 	bl	8009034 <__assert_func>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070cc:	4610      	mov	r0, r2
 80070ce:	b003      	add	sp, #12
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	bfbc      	itt	lt
 80070d6:	464b      	movlt	r3, r9
 80070d8:	46a1      	movlt	r9, r4
 80070da:	4630      	mov	r0, r6
 80070dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070e0:	bfba      	itte	lt
 80070e2:	461c      	movlt	r4, r3
 80070e4:	2501      	movlt	r5, #1
 80070e6:	2500      	movge	r5, #0
 80070e8:	f7ff fcf8 	bl	8006adc <_Balloc>
 80070ec:	4602      	mov	r2, r0
 80070ee:	b918      	cbnz	r0, 80070f8 <__mdiff+0x60>
 80070f0:	f240 2145 	movw	r1, #581	@ 0x245
 80070f4:	4b30      	ldr	r3, [pc, #192]	@ (80071b8 <__mdiff+0x120>)
 80070f6:	e7e3      	b.n	80070c0 <__mdiff+0x28>
 80070f8:	f100 0b14 	add.w	fp, r0, #20
 80070fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007100:	f109 0310 	add.w	r3, r9, #16
 8007104:	60c5      	str	r5, [r0, #12]
 8007106:	f04f 0c00 	mov.w	ip, #0
 800710a:	f109 0514 	add.w	r5, r9, #20
 800710e:	46d9      	mov	r9, fp
 8007110:	6926      	ldr	r6, [r4, #16]
 8007112:	f104 0e14 	add.w	lr, r4, #20
 8007116:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800711a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007126:	f853 af04 	ldr.w	sl, [r3, #4]!
 800712a:	b281      	uxth	r1, r0
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	fa1f f38a 	uxth.w	r3, sl
 8007132:	1a5b      	subs	r3, r3, r1
 8007134:	0c00      	lsrs	r0, r0, #16
 8007136:	4463      	add	r3, ip
 8007138:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800713c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007140:	b29b      	uxth	r3, r3
 8007142:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007146:	4576      	cmp	r6, lr
 8007148:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800714c:	f849 3b04 	str.w	r3, [r9], #4
 8007150:	d8e6      	bhi.n	8007120 <__mdiff+0x88>
 8007152:	1b33      	subs	r3, r6, r4
 8007154:	3b15      	subs	r3, #21
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	3415      	adds	r4, #21
 800715c:	3304      	adds	r3, #4
 800715e:	42a6      	cmp	r6, r4
 8007160:	bf38      	it	cc
 8007162:	2304      	movcc	r3, #4
 8007164:	441d      	add	r5, r3
 8007166:	445b      	add	r3, fp
 8007168:	461e      	mov	r6, r3
 800716a:	462c      	mov	r4, r5
 800716c:	4544      	cmp	r4, r8
 800716e:	d30e      	bcc.n	800718e <__mdiff+0xf6>
 8007170:	f108 0103 	add.w	r1, r8, #3
 8007174:	1b49      	subs	r1, r1, r5
 8007176:	f021 0103 	bic.w	r1, r1, #3
 800717a:	3d03      	subs	r5, #3
 800717c:	45a8      	cmp	r8, r5
 800717e:	bf38      	it	cc
 8007180:	2100      	movcc	r1, #0
 8007182:	440b      	add	r3, r1
 8007184:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007188:	b199      	cbz	r1, 80071b2 <__mdiff+0x11a>
 800718a:	6117      	str	r7, [r2, #16]
 800718c:	e79e      	b.n	80070cc <__mdiff+0x34>
 800718e:	46e6      	mov	lr, ip
 8007190:	f854 1b04 	ldr.w	r1, [r4], #4
 8007194:	fa1f fc81 	uxth.w	ip, r1
 8007198:	44f4      	add	ip, lr
 800719a:	0c08      	lsrs	r0, r1, #16
 800719c:	4471      	add	r1, lr
 800719e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80071a2:	b289      	uxth	r1, r1
 80071a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071ac:	f846 1b04 	str.w	r1, [r6], #4
 80071b0:	e7dc      	b.n	800716c <__mdiff+0xd4>
 80071b2:	3f01      	subs	r7, #1
 80071b4:	e7e6      	b.n	8007184 <__mdiff+0xec>
 80071b6:	bf00      	nop
 80071b8:	08009c35 	.word	0x08009c35
 80071bc:	08009c46 	.word	0x08009c46

080071c0 <__ulp>:
 80071c0:	4b0e      	ldr	r3, [pc, #56]	@ (80071fc <__ulp+0x3c>)
 80071c2:	400b      	ands	r3, r1
 80071c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	dc08      	bgt.n	80071de <__ulp+0x1e>
 80071cc:	425b      	negs	r3, r3
 80071ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80071d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071d6:	da04      	bge.n	80071e2 <__ulp+0x22>
 80071d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80071dc:	4113      	asrs	r3, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	e008      	b.n	80071f4 <__ulp+0x34>
 80071e2:	f1a2 0314 	sub.w	r3, r2, #20
 80071e6:	2b1e      	cmp	r3, #30
 80071e8:	bfd6      	itet	le
 80071ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80071ee:	2201      	movgt	r2, #1
 80071f0:	40da      	lsrle	r2, r3
 80071f2:	2300      	movs	r3, #0
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	7ff00000 	.word	0x7ff00000

08007200 <__b2d>:
 8007200:	6902      	ldr	r2, [r0, #16]
 8007202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007204:	f100 0614 	add.w	r6, r0, #20
 8007208:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800720c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007210:	4f1e      	ldr	r7, [pc, #120]	@ (800728c <__b2d+0x8c>)
 8007212:	4620      	mov	r0, r4
 8007214:	f7ff fd54 	bl	8006cc0 <__hi0bits>
 8007218:	4603      	mov	r3, r0
 800721a:	f1c0 0020 	rsb	r0, r0, #32
 800721e:	2b0a      	cmp	r3, #10
 8007220:	f1a2 0504 	sub.w	r5, r2, #4
 8007224:	6008      	str	r0, [r1, #0]
 8007226:	dc12      	bgt.n	800724e <__b2d+0x4e>
 8007228:	42ae      	cmp	r6, r5
 800722a:	bf2c      	ite	cs
 800722c:	2200      	movcs	r2, #0
 800722e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007232:	f1c3 0c0b 	rsb	ip, r3, #11
 8007236:	3315      	adds	r3, #21
 8007238:	fa24 fe0c 	lsr.w	lr, r4, ip
 800723c:	fa04 f303 	lsl.w	r3, r4, r3
 8007240:	fa22 f20c 	lsr.w	r2, r2, ip
 8007244:	ea4e 0107 	orr.w	r1, lr, r7
 8007248:	431a      	orrs	r2, r3
 800724a:	4610      	mov	r0, r2
 800724c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800724e:	42ae      	cmp	r6, r5
 8007250:	bf36      	itet	cc
 8007252:	f1a2 0508 	subcc.w	r5, r2, #8
 8007256:	2200      	movcs	r2, #0
 8007258:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800725c:	3b0b      	subs	r3, #11
 800725e:	d012      	beq.n	8007286 <__b2d+0x86>
 8007260:	f1c3 0720 	rsb	r7, r3, #32
 8007264:	fa22 f107 	lsr.w	r1, r2, r7
 8007268:	409c      	lsls	r4, r3
 800726a:	430c      	orrs	r4, r1
 800726c:	42b5      	cmp	r5, r6
 800726e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007272:	bf94      	ite	ls
 8007274:	2400      	movls	r4, #0
 8007276:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800727a:	409a      	lsls	r2, r3
 800727c:	40fc      	lsrs	r4, r7
 800727e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007282:	4322      	orrs	r2, r4
 8007284:	e7e1      	b.n	800724a <__b2d+0x4a>
 8007286:	ea44 0107 	orr.w	r1, r4, r7
 800728a:	e7de      	b.n	800724a <__b2d+0x4a>
 800728c:	3ff00000 	.word	0x3ff00000

08007290 <__d2b>:
 8007290:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007294:	2101      	movs	r1, #1
 8007296:	4690      	mov	r8, r2
 8007298:	4699      	mov	r9, r3
 800729a:	9e08      	ldr	r6, [sp, #32]
 800729c:	f7ff fc1e 	bl	8006adc <_Balloc>
 80072a0:	4604      	mov	r4, r0
 80072a2:	b930      	cbnz	r0, 80072b2 <__d2b+0x22>
 80072a4:	4602      	mov	r2, r0
 80072a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80072aa:	4b23      	ldr	r3, [pc, #140]	@ (8007338 <__d2b+0xa8>)
 80072ac:	4823      	ldr	r0, [pc, #140]	@ (800733c <__d2b+0xac>)
 80072ae:	f001 fec1 	bl	8009034 <__assert_func>
 80072b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072ba:	b10d      	cbz	r5, 80072c0 <__d2b+0x30>
 80072bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	f1b8 0300 	subs.w	r3, r8, #0
 80072c6:	d024      	beq.n	8007312 <__d2b+0x82>
 80072c8:	4668      	mov	r0, sp
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	f7ff fd17 	bl	8006cfe <__lo0bits>
 80072d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072d4:	b1d8      	cbz	r0, 800730e <__d2b+0x7e>
 80072d6:	f1c0 0320 	rsb	r3, r0, #32
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	430b      	orrs	r3, r1
 80072e0:	40c2      	lsrs	r2, r0
 80072e2:	6163      	str	r3, [r4, #20]
 80072e4:	9201      	str	r2, [sp, #4]
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bf0c      	ite	eq
 80072ec:	2201      	moveq	r2, #1
 80072ee:	2202      	movne	r2, #2
 80072f0:	61a3      	str	r3, [r4, #24]
 80072f2:	6122      	str	r2, [r4, #16]
 80072f4:	b1ad      	cbz	r5, 8007322 <__d2b+0x92>
 80072f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072fa:	4405      	add	r5, r0
 80072fc:	6035      	str	r5, [r6, #0]
 80072fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007304:	6018      	str	r0, [r3, #0]
 8007306:	4620      	mov	r0, r4
 8007308:	b002      	add	sp, #8
 800730a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800730e:	6161      	str	r1, [r4, #20]
 8007310:	e7e9      	b.n	80072e6 <__d2b+0x56>
 8007312:	a801      	add	r0, sp, #4
 8007314:	f7ff fcf3 	bl	8006cfe <__lo0bits>
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	6163      	str	r3, [r4, #20]
 800731e:	3020      	adds	r0, #32
 8007320:	e7e7      	b.n	80072f2 <__d2b+0x62>
 8007322:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007326:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800732a:	6030      	str	r0, [r6, #0]
 800732c:	6918      	ldr	r0, [r3, #16]
 800732e:	f7ff fcc7 	bl	8006cc0 <__hi0bits>
 8007332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007336:	e7e4      	b.n	8007302 <__d2b+0x72>
 8007338:	08009c35 	.word	0x08009c35
 800733c:	08009c46 	.word	0x08009c46

08007340 <__ratio>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	b085      	sub	sp, #20
 8007346:	e9cd 1000 	strd	r1, r0, [sp]
 800734a:	a902      	add	r1, sp, #8
 800734c:	f7ff ff58 	bl	8007200 <__b2d>
 8007350:	468b      	mov	fp, r1
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	9800      	ldr	r0, [sp, #0]
 8007358:	a903      	add	r1, sp, #12
 800735a:	f7ff ff51 	bl	8007200 <__b2d>
 800735e:	460d      	mov	r5, r1
 8007360:	9b01      	ldr	r3, [sp, #4]
 8007362:	4689      	mov	r9, r1
 8007364:	6919      	ldr	r1, [r3, #16]
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	4604      	mov	r4, r0
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	4630      	mov	r0, r6
 800736e:	1ac9      	subs	r1, r1, r3
 8007370:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800737a:	2b00      	cmp	r3, #0
 800737c:	bfcd      	iteet	gt
 800737e:	463a      	movgt	r2, r7
 8007380:	462a      	movle	r2, r5
 8007382:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007386:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800738a:	bfd8      	it	le
 800738c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007390:	464b      	mov	r3, r9
 8007392:	4622      	mov	r2, r4
 8007394:	4659      	mov	r1, fp
 8007396:	f7f9 f9c9 	bl	800072c <__aeabi_ddiv>
 800739a:	b005      	add	sp, #20
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073a0 <__copybits>:
 80073a0:	3901      	subs	r1, #1
 80073a2:	b570      	push	{r4, r5, r6, lr}
 80073a4:	1149      	asrs	r1, r1, #5
 80073a6:	6914      	ldr	r4, [r2, #16]
 80073a8:	3101      	adds	r1, #1
 80073aa:	f102 0314 	add.w	r3, r2, #20
 80073ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073b6:	1f05      	subs	r5, r0, #4
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d30c      	bcc.n	80073d6 <__copybits+0x36>
 80073bc:	1aa3      	subs	r3, r4, r2
 80073be:	3b11      	subs	r3, #17
 80073c0:	f023 0303 	bic.w	r3, r3, #3
 80073c4:	3211      	adds	r2, #17
 80073c6:	42a2      	cmp	r2, r4
 80073c8:	bf88      	it	hi
 80073ca:	2300      	movhi	r3, #0
 80073cc:	4418      	add	r0, r3
 80073ce:	2300      	movs	r3, #0
 80073d0:	4288      	cmp	r0, r1
 80073d2:	d305      	bcc.n	80073e0 <__copybits+0x40>
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
 80073d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80073da:	f845 6f04 	str.w	r6, [r5, #4]!
 80073de:	e7eb      	b.n	80073b8 <__copybits+0x18>
 80073e0:	f840 3b04 	str.w	r3, [r0], #4
 80073e4:	e7f4      	b.n	80073d0 <__copybits+0x30>

080073e6 <__any_on>:
 80073e6:	f100 0214 	add.w	r2, r0, #20
 80073ea:	6900      	ldr	r0, [r0, #16]
 80073ec:	114b      	asrs	r3, r1, #5
 80073ee:	4298      	cmp	r0, r3
 80073f0:	b510      	push	{r4, lr}
 80073f2:	db11      	blt.n	8007418 <__any_on+0x32>
 80073f4:	dd0a      	ble.n	800740c <__any_on+0x26>
 80073f6:	f011 011f 	ands.w	r1, r1, #31
 80073fa:	d007      	beq.n	800740c <__any_on+0x26>
 80073fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007400:	fa24 f001 	lsr.w	r0, r4, r1
 8007404:	fa00 f101 	lsl.w	r1, r0, r1
 8007408:	428c      	cmp	r4, r1
 800740a:	d10b      	bne.n	8007424 <__any_on+0x3e>
 800740c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007410:	4293      	cmp	r3, r2
 8007412:	d803      	bhi.n	800741c <__any_on+0x36>
 8007414:	2000      	movs	r0, #0
 8007416:	bd10      	pop	{r4, pc}
 8007418:	4603      	mov	r3, r0
 800741a:	e7f7      	b.n	800740c <__any_on+0x26>
 800741c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007420:	2900      	cmp	r1, #0
 8007422:	d0f5      	beq.n	8007410 <__any_on+0x2a>
 8007424:	2001      	movs	r0, #1
 8007426:	e7f6      	b.n	8007416 <__any_on+0x30>

08007428 <sulp>:
 8007428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742c:	460f      	mov	r7, r1
 800742e:	4690      	mov	r8, r2
 8007430:	f7ff fec6 	bl	80071c0 <__ulp>
 8007434:	4604      	mov	r4, r0
 8007436:	460d      	mov	r5, r1
 8007438:	f1b8 0f00 	cmp.w	r8, #0
 800743c:	d011      	beq.n	8007462 <sulp+0x3a>
 800743e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007442:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007446:	2b00      	cmp	r3, #0
 8007448:	dd0b      	ble.n	8007462 <sulp+0x3a>
 800744a:	2400      	movs	r4, #0
 800744c:	051b      	lsls	r3, r3, #20
 800744e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007452:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007456:	4622      	mov	r2, r4
 8007458:	462b      	mov	r3, r5
 800745a:	f7f9 f83d 	bl	80004d8 <__aeabi_dmul>
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746a:	0000      	movs	r0, r0
 800746c:	0000      	movs	r0, r0
	...

08007470 <_strtod_l>:
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	b09f      	sub	sp, #124	@ 0x7c
 8007476:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007478:	2200      	movs	r2, #0
 800747a:	460c      	mov	r4, r1
 800747c:	921a      	str	r2, [sp, #104]	@ 0x68
 800747e:	f04f 0a00 	mov.w	sl, #0
 8007482:	f04f 0b00 	mov.w	fp, #0
 8007486:	460a      	mov	r2, r1
 8007488:	9005      	str	r0, [sp, #20]
 800748a:	9219      	str	r2, [sp, #100]	@ 0x64
 800748c:	7811      	ldrb	r1, [r2, #0]
 800748e:	292b      	cmp	r1, #43	@ 0x2b
 8007490:	d048      	beq.n	8007524 <_strtod_l+0xb4>
 8007492:	d836      	bhi.n	8007502 <_strtod_l+0x92>
 8007494:	290d      	cmp	r1, #13
 8007496:	d830      	bhi.n	80074fa <_strtod_l+0x8a>
 8007498:	2908      	cmp	r1, #8
 800749a:	d830      	bhi.n	80074fe <_strtod_l+0x8e>
 800749c:	2900      	cmp	r1, #0
 800749e:	d039      	beq.n	8007514 <_strtod_l+0xa4>
 80074a0:	2200      	movs	r2, #0
 80074a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80074a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80074a6:	782a      	ldrb	r2, [r5, #0]
 80074a8:	2a30      	cmp	r2, #48	@ 0x30
 80074aa:	f040 80b1 	bne.w	8007610 <_strtod_l+0x1a0>
 80074ae:	786a      	ldrb	r2, [r5, #1]
 80074b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80074b4:	2a58      	cmp	r2, #88	@ 0x58
 80074b6:	d16c      	bne.n	8007592 <_strtod_l+0x122>
 80074b8:	9302      	str	r3, [sp, #8]
 80074ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074bc:	4a8e      	ldr	r2, [pc, #568]	@ (80076f8 <_strtod_l+0x288>)
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	ab1a      	add	r3, sp, #104	@ 0x68
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	9805      	ldr	r0, [sp, #20]
 80074c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80074c8:	a919      	add	r1, sp, #100	@ 0x64
 80074ca:	f001 fe4d 	bl	8009168 <__gethex>
 80074ce:	f010 060f 	ands.w	r6, r0, #15
 80074d2:	4604      	mov	r4, r0
 80074d4:	d005      	beq.n	80074e2 <_strtod_l+0x72>
 80074d6:	2e06      	cmp	r6, #6
 80074d8:	d126      	bne.n	8007528 <_strtod_l+0xb8>
 80074da:	2300      	movs	r3, #0
 80074dc:	3501      	adds	r5, #1
 80074de:	9519      	str	r5, [sp, #100]	@ 0x64
 80074e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f040 8584 	bne.w	8007ff2 <_strtod_l+0xb82>
 80074ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074ec:	b1bb      	cbz	r3, 800751e <_strtod_l+0xae>
 80074ee:	4650      	mov	r0, sl
 80074f0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80074f4:	b01f      	add	sp, #124	@ 0x7c
 80074f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fa:	2920      	cmp	r1, #32
 80074fc:	d1d0      	bne.n	80074a0 <_strtod_l+0x30>
 80074fe:	3201      	adds	r2, #1
 8007500:	e7c3      	b.n	800748a <_strtod_l+0x1a>
 8007502:	292d      	cmp	r1, #45	@ 0x2d
 8007504:	d1cc      	bne.n	80074a0 <_strtod_l+0x30>
 8007506:	2101      	movs	r1, #1
 8007508:	910b      	str	r1, [sp, #44]	@ 0x2c
 800750a:	1c51      	adds	r1, r2, #1
 800750c:	9119      	str	r1, [sp, #100]	@ 0x64
 800750e:	7852      	ldrb	r2, [r2, #1]
 8007510:	2a00      	cmp	r2, #0
 8007512:	d1c7      	bne.n	80074a4 <_strtod_l+0x34>
 8007514:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007516:	9419      	str	r4, [sp, #100]	@ 0x64
 8007518:	2b00      	cmp	r3, #0
 800751a:	f040 8568 	bne.w	8007fee <_strtod_l+0xb7e>
 800751e:	4650      	mov	r0, sl
 8007520:	4659      	mov	r1, fp
 8007522:	e7e7      	b.n	80074f4 <_strtod_l+0x84>
 8007524:	2100      	movs	r1, #0
 8007526:	e7ef      	b.n	8007508 <_strtod_l+0x98>
 8007528:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800752a:	b13a      	cbz	r2, 800753c <_strtod_l+0xcc>
 800752c:	2135      	movs	r1, #53	@ 0x35
 800752e:	a81c      	add	r0, sp, #112	@ 0x70
 8007530:	f7ff ff36 	bl	80073a0 <__copybits>
 8007534:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007536:	9805      	ldr	r0, [sp, #20]
 8007538:	f7ff fb10 	bl	8006b5c <_Bfree>
 800753c:	3e01      	subs	r6, #1
 800753e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007540:	2e04      	cmp	r6, #4
 8007542:	d806      	bhi.n	8007552 <_strtod_l+0xe2>
 8007544:	e8df f006 	tbb	[pc, r6]
 8007548:	201d0314 	.word	0x201d0314
 800754c:	14          	.byte	0x14
 800754d:	00          	.byte	0x00
 800754e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007552:	05e1      	lsls	r1, r4, #23
 8007554:	bf48      	it	mi
 8007556:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800755a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800755e:	0d1b      	lsrs	r3, r3, #20
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1bd      	bne.n	80074e2 <_strtod_l+0x72>
 8007566:	f7fe fb2b 	bl	8005bc0 <__errno>
 800756a:	2322      	movs	r3, #34	@ 0x22
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	e7b8      	b.n	80074e2 <_strtod_l+0x72>
 8007570:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007574:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007578:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800757c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007580:	e7e7      	b.n	8007552 <_strtod_l+0xe2>
 8007582:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80076fc <_strtod_l+0x28c>
 8007586:	e7e4      	b.n	8007552 <_strtod_l+0xe2>
 8007588:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800758c:	f04f 3aff 	mov.w	sl, #4294967295
 8007590:	e7df      	b.n	8007552 <_strtod_l+0xe2>
 8007592:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	9219      	str	r2, [sp, #100]	@ 0x64
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b30      	cmp	r3, #48	@ 0x30
 800759c:	d0f9      	beq.n	8007592 <_strtod_l+0x122>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d09f      	beq.n	80074e2 <_strtod_l+0x72>
 80075a2:	2301      	movs	r3, #1
 80075a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075a8:	220a      	movs	r2, #10
 80075aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80075ac:	2300      	movs	r3, #0
 80075ae:	461f      	mov	r7, r3
 80075b0:	9308      	str	r3, [sp, #32]
 80075b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80075b6:	7805      	ldrb	r5, [r0, #0]
 80075b8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80075bc:	b2d9      	uxtb	r1, r3
 80075be:	2909      	cmp	r1, #9
 80075c0:	d928      	bls.n	8007614 <_strtod_l+0x1a4>
 80075c2:	2201      	movs	r2, #1
 80075c4:	494e      	ldr	r1, [pc, #312]	@ (8007700 <_strtod_l+0x290>)
 80075c6:	f7fe fa9e 	bl	8005b06 <strncmp>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d032      	beq.n	8007634 <_strtod_l+0x1c4>
 80075ce:	2000      	movs	r0, #0
 80075d0:	462a      	mov	r2, r5
 80075d2:	4681      	mov	r9, r0
 80075d4:	463d      	mov	r5, r7
 80075d6:	4603      	mov	r3, r0
 80075d8:	2a65      	cmp	r2, #101	@ 0x65
 80075da:	d001      	beq.n	80075e0 <_strtod_l+0x170>
 80075dc:	2a45      	cmp	r2, #69	@ 0x45
 80075de:	d114      	bne.n	800760a <_strtod_l+0x19a>
 80075e0:	b91d      	cbnz	r5, 80075ea <_strtod_l+0x17a>
 80075e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075e4:	4302      	orrs	r2, r0
 80075e6:	d095      	beq.n	8007514 <_strtod_l+0xa4>
 80075e8:	2500      	movs	r5, #0
 80075ea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80075ec:	1c62      	adds	r2, r4, #1
 80075ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80075f0:	7862      	ldrb	r2, [r4, #1]
 80075f2:	2a2b      	cmp	r2, #43	@ 0x2b
 80075f4:	d077      	beq.n	80076e6 <_strtod_l+0x276>
 80075f6:	2a2d      	cmp	r2, #45	@ 0x2d
 80075f8:	d07b      	beq.n	80076f2 <_strtod_l+0x282>
 80075fa:	f04f 0c00 	mov.w	ip, #0
 80075fe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007602:	2909      	cmp	r1, #9
 8007604:	f240 8082 	bls.w	800770c <_strtod_l+0x29c>
 8007608:	9419      	str	r4, [sp, #100]	@ 0x64
 800760a:	f04f 0800 	mov.w	r8, #0
 800760e:	e0a2      	b.n	8007756 <_strtod_l+0x2e6>
 8007610:	2300      	movs	r3, #0
 8007612:	e7c7      	b.n	80075a4 <_strtod_l+0x134>
 8007614:	2f08      	cmp	r7, #8
 8007616:	bfd5      	itete	le
 8007618:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800761a:	9908      	ldrgt	r1, [sp, #32]
 800761c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007620:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007624:	f100 0001 	add.w	r0, r0, #1
 8007628:	bfd4      	ite	le
 800762a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800762c:	9308      	strgt	r3, [sp, #32]
 800762e:	3701      	adds	r7, #1
 8007630:	9019      	str	r0, [sp, #100]	@ 0x64
 8007632:	e7bf      	b.n	80075b4 <_strtod_l+0x144>
 8007634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	9219      	str	r2, [sp, #100]	@ 0x64
 800763a:	785a      	ldrb	r2, [r3, #1]
 800763c:	b37f      	cbz	r7, 800769e <_strtod_l+0x22e>
 800763e:	4681      	mov	r9, r0
 8007640:	463d      	mov	r5, r7
 8007642:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007646:	2b09      	cmp	r3, #9
 8007648:	d912      	bls.n	8007670 <_strtod_l+0x200>
 800764a:	2301      	movs	r3, #1
 800764c:	e7c4      	b.n	80075d8 <_strtod_l+0x168>
 800764e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007650:	3001      	adds	r0, #1
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	9219      	str	r2, [sp, #100]	@ 0x64
 8007656:	785a      	ldrb	r2, [r3, #1]
 8007658:	2a30      	cmp	r2, #48	@ 0x30
 800765a:	d0f8      	beq.n	800764e <_strtod_l+0x1de>
 800765c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007660:	2b08      	cmp	r3, #8
 8007662:	f200 84cb 	bhi.w	8007ffc <_strtod_l+0xb8c>
 8007666:	4681      	mov	r9, r0
 8007668:	2000      	movs	r0, #0
 800766a:	4605      	mov	r5, r0
 800766c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800766e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007670:	3a30      	subs	r2, #48	@ 0x30
 8007672:	f100 0301 	add.w	r3, r0, #1
 8007676:	d02a      	beq.n	80076ce <_strtod_l+0x25e>
 8007678:	4499      	add	r9, r3
 800767a:	210a      	movs	r1, #10
 800767c:	462b      	mov	r3, r5
 800767e:	eb00 0c05 	add.w	ip, r0, r5
 8007682:	4563      	cmp	r3, ip
 8007684:	d10d      	bne.n	80076a2 <_strtod_l+0x232>
 8007686:	1c69      	adds	r1, r5, #1
 8007688:	4401      	add	r1, r0
 800768a:	4428      	add	r0, r5
 800768c:	2808      	cmp	r0, #8
 800768e:	dc16      	bgt.n	80076be <_strtod_l+0x24e>
 8007690:	230a      	movs	r3, #10
 8007692:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007694:	fb03 2300 	mla	r3, r3, r0, r2
 8007698:	930a      	str	r3, [sp, #40]	@ 0x28
 800769a:	2300      	movs	r3, #0
 800769c:	e018      	b.n	80076d0 <_strtod_l+0x260>
 800769e:	4638      	mov	r0, r7
 80076a0:	e7da      	b.n	8007658 <_strtod_l+0x1e8>
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	f103 0301 	add.w	r3, r3, #1
 80076a8:	dc03      	bgt.n	80076b2 <_strtod_l+0x242>
 80076aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80076ac:	434e      	muls	r6, r1
 80076ae:	960a      	str	r6, [sp, #40]	@ 0x28
 80076b0:	e7e7      	b.n	8007682 <_strtod_l+0x212>
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	bfde      	ittt	le
 80076b6:	9e08      	ldrle	r6, [sp, #32]
 80076b8:	434e      	mulle	r6, r1
 80076ba:	9608      	strle	r6, [sp, #32]
 80076bc:	e7e1      	b.n	8007682 <_strtod_l+0x212>
 80076be:	280f      	cmp	r0, #15
 80076c0:	dceb      	bgt.n	800769a <_strtod_l+0x22a>
 80076c2:	230a      	movs	r3, #10
 80076c4:	9808      	ldr	r0, [sp, #32]
 80076c6:	fb03 2300 	mla	r3, r3, r0, r2
 80076ca:	9308      	str	r3, [sp, #32]
 80076cc:	e7e5      	b.n	800769a <_strtod_l+0x22a>
 80076ce:	4629      	mov	r1, r5
 80076d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076d2:	460d      	mov	r5, r1
 80076d4:	1c50      	adds	r0, r2, #1
 80076d6:	9019      	str	r0, [sp, #100]	@ 0x64
 80076d8:	7852      	ldrb	r2, [r2, #1]
 80076da:	4618      	mov	r0, r3
 80076dc:	e7b1      	b.n	8007642 <_strtod_l+0x1d2>
 80076de:	f04f 0900 	mov.w	r9, #0
 80076e2:	2301      	movs	r3, #1
 80076e4:	e77d      	b.n	80075e2 <_strtod_l+0x172>
 80076e6:	f04f 0c00 	mov.w	ip, #0
 80076ea:	1ca2      	adds	r2, r4, #2
 80076ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80076ee:	78a2      	ldrb	r2, [r4, #2]
 80076f0:	e785      	b.n	80075fe <_strtod_l+0x18e>
 80076f2:	f04f 0c01 	mov.w	ip, #1
 80076f6:	e7f8      	b.n	80076ea <_strtod_l+0x27a>
 80076f8:	08009db8 	.word	0x08009db8
 80076fc:	7ff00000 	.word	0x7ff00000
 8007700:	08009da0 	.word	0x08009da0
 8007704:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007706:	1c51      	adds	r1, r2, #1
 8007708:	9119      	str	r1, [sp, #100]	@ 0x64
 800770a:	7852      	ldrb	r2, [r2, #1]
 800770c:	2a30      	cmp	r2, #48	@ 0x30
 800770e:	d0f9      	beq.n	8007704 <_strtod_l+0x294>
 8007710:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007714:	2908      	cmp	r1, #8
 8007716:	f63f af78 	bhi.w	800760a <_strtod_l+0x19a>
 800771a:	f04f 080a 	mov.w	r8, #10
 800771e:	3a30      	subs	r2, #48	@ 0x30
 8007720:	920e      	str	r2, [sp, #56]	@ 0x38
 8007722:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007724:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007726:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007728:	1c56      	adds	r6, r2, #1
 800772a:	9619      	str	r6, [sp, #100]	@ 0x64
 800772c:	7852      	ldrb	r2, [r2, #1]
 800772e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007732:	f1be 0f09 	cmp.w	lr, #9
 8007736:	d939      	bls.n	80077ac <_strtod_l+0x33c>
 8007738:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800773a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800773e:	1a76      	subs	r6, r6, r1
 8007740:	2e08      	cmp	r6, #8
 8007742:	dc03      	bgt.n	800774c <_strtod_l+0x2dc>
 8007744:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007746:	4588      	cmp	r8, r1
 8007748:	bfa8      	it	ge
 800774a:	4688      	movge	r8, r1
 800774c:	f1bc 0f00 	cmp.w	ip, #0
 8007750:	d001      	beq.n	8007756 <_strtod_l+0x2e6>
 8007752:	f1c8 0800 	rsb	r8, r8, #0
 8007756:	2d00      	cmp	r5, #0
 8007758:	d14e      	bne.n	80077f8 <_strtod_l+0x388>
 800775a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800775c:	4308      	orrs	r0, r1
 800775e:	f47f aec0 	bne.w	80074e2 <_strtod_l+0x72>
 8007762:	2b00      	cmp	r3, #0
 8007764:	f47f aed6 	bne.w	8007514 <_strtod_l+0xa4>
 8007768:	2a69      	cmp	r2, #105	@ 0x69
 800776a:	d028      	beq.n	80077be <_strtod_l+0x34e>
 800776c:	dc25      	bgt.n	80077ba <_strtod_l+0x34a>
 800776e:	2a49      	cmp	r2, #73	@ 0x49
 8007770:	d025      	beq.n	80077be <_strtod_l+0x34e>
 8007772:	2a4e      	cmp	r2, #78	@ 0x4e
 8007774:	f47f aece 	bne.w	8007514 <_strtod_l+0xa4>
 8007778:	499a      	ldr	r1, [pc, #616]	@ (80079e4 <_strtod_l+0x574>)
 800777a:	a819      	add	r0, sp, #100	@ 0x64
 800777c:	f001 ff16 	bl	80095ac <__match>
 8007780:	2800      	cmp	r0, #0
 8007782:	f43f aec7 	beq.w	8007514 <_strtod_l+0xa4>
 8007786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b28      	cmp	r3, #40	@ 0x28
 800778c:	d12e      	bne.n	80077ec <_strtod_l+0x37c>
 800778e:	4996      	ldr	r1, [pc, #600]	@ (80079e8 <_strtod_l+0x578>)
 8007790:	aa1c      	add	r2, sp, #112	@ 0x70
 8007792:	a819      	add	r0, sp, #100	@ 0x64
 8007794:	f001 ff1e 	bl	80095d4 <__hexnan>
 8007798:	2805      	cmp	r0, #5
 800779a:	d127      	bne.n	80077ec <_strtod_l+0x37c>
 800779c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800779e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80077a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80077a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80077aa:	e69a      	b.n	80074e2 <_strtod_l+0x72>
 80077ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80077ae:	fb08 2101 	mla	r1, r8, r1, r2
 80077b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80077b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80077b8:	e7b5      	b.n	8007726 <_strtod_l+0x2b6>
 80077ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80077bc:	e7da      	b.n	8007774 <_strtod_l+0x304>
 80077be:	498b      	ldr	r1, [pc, #556]	@ (80079ec <_strtod_l+0x57c>)
 80077c0:	a819      	add	r0, sp, #100	@ 0x64
 80077c2:	f001 fef3 	bl	80095ac <__match>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f aea4 	beq.w	8007514 <_strtod_l+0xa4>
 80077cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ce:	4988      	ldr	r1, [pc, #544]	@ (80079f0 <_strtod_l+0x580>)
 80077d0:	3b01      	subs	r3, #1
 80077d2:	a819      	add	r0, sp, #100	@ 0x64
 80077d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80077d6:	f001 fee9 	bl	80095ac <__match>
 80077da:	b910      	cbnz	r0, 80077e2 <_strtod_l+0x372>
 80077dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077de:	3301      	adds	r3, #1
 80077e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80077e2:	f04f 0a00 	mov.w	sl, #0
 80077e6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80079f4 <_strtod_l+0x584>
 80077ea:	e67a      	b.n	80074e2 <_strtod_l+0x72>
 80077ec:	4882      	ldr	r0, [pc, #520]	@ (80079f8 <_strtod_l+0x588>)
 80077ee:	f001 fc1b 	bl	8009028 <nan>
 80077f2:	4682      	mov	sl, r0
 80077f4:	468b      	mov	fp, r1
 80077f6:	e674      	b.n	80074e2 <_strtod_l+0x72>
 80077f8:	eba8 0309 	sub.w	r3, r8, r9
 80077fc:	2f00      	cmp	r7, #0
 80077fe:	bf08      	it	eq
 8007800:	462f      	moveq	r7, r5
 8007802:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007804:	2d10      	cmp	r5, #16
 8007806:	462c      	mov	r4, r5
 8007808:	9309      	str	r3, [sp, #36]	@ 0x24
 800780a:	bfa8      	it	ge
 800780c:	2410      	movge	r4, #16
 800780e:	f7f8 fde9 	bl	80003e4 <__aeabi_ui2d>
 8007812:	2d09      	cmp	r5, #9
 8007814:	4682      	mov	sl, r0
 8007816:	468b      	mov	fp, r1
 8007818:	dc11      	bgt.n	800783e <_strtod_l+0x3ce>
 800781a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	f43f ae60 	beq.w	80074e2 <_strtod_l+0x72>
 8007822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007824:	dd76      	ble.n	8007914 <_strtod_l+0x4a4>
 8007826:	2b16      	cmp	r3, #22
 8007828:	dc5d      	bgt.n	80078e6 <_strtod_l+0x476>
 800782a:	4974      	ldr	r1, [pc, #464]	@ (80079fc <_strtod_l+0x58c>)
 800782c:	4652      	mov	r2, sl
 800782e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007832:	465b      	mov	r3, fp
 8007834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007838:	f7f8 fe4e 	bl	80004d8 <__aeabi_dmul>
 800783c:	e7d9      	b.n	80077f2 <_strtod_l+0x382>
 800783e:	4b6f      	ldr	r3, [pc, #444]	@ (80079fc <_strtod_l+0x58c>)
 8007840:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007844:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007848:	f7f8 fe46 	bl	80004d8 <__aeabi_dmul>
 800784c:	4682      	mov	sl, r0
 800784e:	9808      	ldr	r0, [sp, #32]
 8007850:	468b      	mov	fp, r1
 8007852:	f7f8 fdc7 	bl	80003e4 <__aeabi_ui2d>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4650      	mov	r0, sl
 800785c:	4659      	mov	r1, fp
 800785e:	f7f8 fc85 	bl	800016c <__adddf3>
 8007862:	2d0f      	cmp	r5, #15
 8007864:	4682      	mov	sl, r0
 8007866:	468b      	mov	fp, r1
 8007868:	ddd7      	ble.n	800781a <_strtod_l+0x3aa>
 800786a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786c:	1b2c      	subs	r4, r5, r4
 800786e:	441c      	add	r4, r3
 8007870:	2c00      	cmp	r4, #0
 8007872:	f340 8096 	ble.w	80079a2 <_strtod_l+0x532>
 8007876:	f014 030f 	ands.w	r3, r4, #15
 800787a:	d00a      	beq.n	8007892 <_strtod_l+0x422>
 800787c:	495f      	ldr	r1, [pc, #380]	@ (80079fc <_strtod_l+0x58c>)
 800787e:	4652      	mov	r2, sl
 8007880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007888:	465b      	mov	r3, fp
 800788a:	f7f8 fe25 	bl	80004d8 <__aeabi_dmul>
 800788e:	4682      	mov	sl, r0
 8007890:	468b      	mov	fp, r1
 8007892:	f034 040f 	bics.w	r4, r4, #15
 8007896:	d073      	beq.n	8007980 <_strtod_l+0x510>
 8007898:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800789c:	dd48      	ble.n	8007930 <_strtod_l+0x4c0>
 800789e:	2400      	movs	r4, #0
 80078a0:	46a0      	mov	r8, r4
 80078a2:	46a1      	mov	r9, r4
 80078a4:	940a      	str	r4, [sp, #40]	@ 0x28
 80078a6:	2322      	movs	r3, #34	@ 0x22
 80078a8:	f04f 0a00 	mov.w	sl, #0
 80078ac:	9a05      	ldr	r2, [sp, #20]
 80078ae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80079f4 <_strtod_l+0x584>
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f43f ae13 	beq.w	80074e2 <_strtod_l+0x72>
 80078bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078be:	9805      	ldr	r0, [sp, #20]
 80078c0:	f7ff f94c 	bl	8006b5c <_Bfree>
 80078c4:	4649      	mov	r1, r9
 80078c6:	9805      	ldr	r0, [sp, #20]
 80078c8:	f7ff f948 	bl	8006b5c <_Bfree>
 80078cc:	4641      	mov	r1, r8
 80078ce:	9805      	ldr	r0, [sp, #20]
 80078d0:	f7ff f944 	bl	8006b5c <_Bfree>
 80078d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078d6:	9805      	ldr	r0, [sp, #20]
 80078d8:	f7ff f940 	bl	8006b5c <_Bfree>
 80078dc:	4621      	mov	r1, r4
 80078de:	9805      	ldr	r0, [sp, #20]
 80078e0:	f7ff f93c 	bl	8006b5c <_Bfree>
 80078e4:	e5fd      	b.n	80074e2 <_strtod_l+0x72>
 80078e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80078ec:	4293      	cmp	r3, r2
 80078ee:	dbbc      	blt.n	800786a <_strtod_l+0x3fa>
 80078f0:	4c42      	ldr	r4, [pc, #264]	@ (80079fc <_strtod_l+0x58c>)
 80078f2:	f1c5 050f 	rsb	r5, r5, #15
 80078f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078fa:	4652      	mov	r2, sl
 80078fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007900:	465b      	mov	r3, fp
 8007902:	f7f8 fde9 	bl	80004d8 <__aeabi_dmul>
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	1b5d      	subs	r5, r3, r5
 800790a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800790e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007912:	e791      	b.n	8007838 <_strtod_l+0x3c8>
 8007914:	3316      	adds	r3, #22
 8007916:	dba8      	blt.n	800786a <_strtod_l+0x3fa>
 8007918:	4b38      	ldr	r3, [pc, #224]	@ (80079fc <_strtod_l+0x58c>)
 800791a:	eba9 0808 	sub.w	r8, r9, r8
 800791e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007922:	4650      	mov	r0, sl
 8007924:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007928:	4659      	mov	r1, fp
 800792a:	f7f8 feff 	bl	800072c <__aeabi_ddiv>
 800792e:	e760      	b.n	80077f2 <_strtod_l+0x382>
 8007930:	4b33      	ldr	r3, [pc, #204]	@ (8007a00 <_strtod_l+0x590>)
 8007932:	4650      	mov	r0, sl
 8007934:	9308      	str	r3, [sp, #32]
 8007936:	2300      	movs	r3, #0
 8007938:	4659      	mov	r1, fp
 800793a:	461e      	mov	r6, r3
 800793c:	1124      	asrs	r4, r4, #4
 800793e:	2c01      	cmp	r4, #1
 8007940:	dc21      	bgt.n	8007986 <_strtod_l+0x516>
 8007942:	b10b      	cbz	r3, 8007948 <_strtod_l+0x4d8>
 8007944:	4682      	mov	sl, r0
 8007946:	468b      	mov	fp, r1
 8007948:	492d      	ldr	r1, [pc, #180]	@ (8007a00 <_strtod_l+0x590>)
 800794a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800794e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007952:	4652      	mov	r2, sl
 8007954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007958:	465b      	mov	r3, fp
 800795a:	f7f8 fdbd 	bl	80004d8 <__aeabi_dmul>
 800795e:	4b25      	ldr	r3, [pc, #148]	@ (80079f4 <_strtod_l+0x584>)
 8007960:	460a      	mov	r2, r1
 8007962:	400b      	ands	r3, r1
 8007964:	4927      	ldr	r1, [pc, #156]	@ (8007a04 <_strtod_l+0x594>)
 8007966:	4682      	mov	sl, r0
 8007968:	428b      	cmp	r3, r1
 800796a:	d898      	bhi.n	800789e <_strtod_l+0x42e>
 800796c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007970:	428b      	cmp	r3, r1
 8007972:	bf86      	itte	hi
 8007974:	f04f 3aff 	movhi.w	sl, #4294967295
 8007978:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007a08 <_strtod_l+0x598>
 800797c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007980:	2300      	movs	r3, #0
 8007982:	9308      	str	r3, [sp, #32]
 8007984:	e07a      	b.n	8007a7c <_strtod_l+0x60c>
 8007986:	07e2      	lsls	r2, r4, #31
 8007988:	d505      	bpl.n	8007996 <_strtod_l+0x526>
 800798a:	9b08      	ldr	r3, [sp, #32]
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fda2 	bl	80004d8 <__aeabi_dmul>
 8007994:	2301      	movs	r3, #1
 8007996:	9a08      	ldr	r2, [sp, #32]
 8007998:	3601      	adds	r6, #1
 800799a:	3208      	adds	r2, #8
 800799c:	1064      	asrs	r4, r4, #1
 800799e:	9208      	str	r2, [sp, #32]
 80079a0:	e7cd      	b.n	800793e <_strtod_l+0x4ce>
 80079a2:	d0ed      	beq.n	8007980 <_strtod_l+0x510>
 80079a4:	4264      	negs	r4, r4
 80079a6:	f014 020f 	ands.w	r2, r4, #15
 80079aa:	d00a      	beq.n	80079c2 <_strtod_l+0x552>
 80079ac:	4b13      	ldr	r3, [pc, #76]	@ (80079fc <_strtod_l+0x58c>)
 80079ae:	4650      	mov	r0, sl
 80079b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b4:	4659      	mov	r1, fp
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f7f8 feb7 	bl	800072c <__aeabi_ddiv>
 80079be:	4682      	mov	sl, r0
 80079c0:	468b      	mov	fp, r1
 80079c2:	1124      	asrs	r4, r4, #4
 80079c4:	d0dc      	beq.n	8007980 <_strtod_l+0x510>
 80079c6:	2c1f      	cmp	r4, #31
 80079c8:	dd20      	ble.n	8007a0c <_strtod_l+0x59c>
 80079ca:	2400      	movs	r4, #0
 80079cc:	46a0      	mov	r8, r4
 80079ce:	46a1      	mov	r9, r4
 80079d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80079d2:	2322      	movs	r3, #34	@ 0x22
 80079d4:	9a05      	ldr	r2, [sp, #20]
 80079d6:	f04f 0a00 	mov.w	sl, #0
 80079da:	f04f 0b00 	mov.w	fp, #0
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e768      	b.n	80078b4 <_strtod_l+0x444>
 80079e2:	bf00      	nop
 80079e4:	08009b8f 	.word	0x08009b8f
 80079e8:	08009da4 	.word	0x08009da4
 80079ec:	08009b87 	.word	0x08009b87
 80079f0:	08009bbc 	.word	0x08009bbc
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	08009f68 	.word	0x08009f68
 80079fc:	08009cd8 	.word	0x08009cd8
 8007a00:	08009cb0 	.word	0x08009cb0
 8007a04:	7ca00000 	.word	0x7ca00000
 8007a08:	7fefffff 	.word	0x7fefffff
 8007a0c:	f014 0310 	ands.w	r3, r4, #16
 8007a10:	bf18      	it	ne
 8007a12:	236a      	movne	r3, #106	@ 0x6a
 8007a14:	4650      	mov	r0, sl
 8007a16:	9308      	str	r3, [sp, #32]
 8007a18:	4659      	mov	r1, fp
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4ea9      	ldr	r6, [pc, #676]	@ (8007cc4 <_strtod_l+0x854>)
 8007a1e:	07e2      	lsls	r2, r4, #31
 8007a20:	d504      	bpl.n	8007a2c <_strtod_l+0x5bc>
 8007a22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a26:	f7f8 fd57 	bl	80004d8 <__aeabi_dmul>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	1064      	asrs	r4, r4, #1
 8007a2e:	f106 0608 	add.w	r6, r6, #8
 8007a32:	d1f4      	bne.n	8007a1e <_strtod_l+0x5ae>
 8007a34:	b10b      	cbz	r3, 8007a3a <_strtod_l+0x5ca>
 8007a36:	4682      	mov	sl, r0
 8007a38:	468b      	mov	fp, r1
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	b1b3      	cbz	r3, 8007a6c <_strtod_l+0x5fc>
 8007a3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	4659      	mov	r1, fp
 8007a4a:	dd0f      	ble.n	8007a6c <_strtod_l+0x5fc>
 8007a4c:	2b1f      	cmp	r3, #31
 8007a4e:	dd57      	ble.n	8007b00 <_strtod_l+0x690>
 8007a50:	2b34      	cmp	r3, #52	@ 0x34
 8007a52:	bfd8      	it	le
 8007a54:	f04f 33ff 	movle.w	r3, #4294967295
 8007a58:	f04f 0a00 	mov.w	sl, #0
 8007a5c:	bfcf      	iteee	gt
 8007a5e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a62:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a66:	4093      	lslle	r3, r2
 8007a68:	ea03 0b01 	andle.w	fp, r3, r1
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4650      	mov	r0, sl
 8007a72:	4659      	mov	r1, fp
 8007a74:	f7f8 ff98 	bl	80009a8 <__aeabi_dcmpeq>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d1a6      	bne.n	80079ca <_strtod_l+0x55a>
 8007a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7e:	463a      	mov	r2, r7
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a84:	462b      	mov	r3, r5
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f7ff f8d0 	bl	8006c2c <__s2b>
 8007a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f af05 	beq.w	800789e <_strtod_l+0x42e>
 8007a94:	2400      	movs	r4, #0
 8007a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a98:	eba9 0308 	sub.w	r3, r9, r8
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	bfa8      	it	ge
 8007aa0:	2300      	movge	r3, #0
 8007aa2:	46a0      	mov	r8, r4
 8007aa4:	9312      	str	r3, [sp, #72]	@ 0x48
 8007aa6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007aaa:	9316      	str	r3, [sp, #88]	@ 0x58
 8007aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	f7ff f813 	bl	8006adc <_Balloc>
 8007ab6:	4681      	mov	r9, r0
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	f43f aef4 	beq.w	80078a6 <_strtod_l+0x436>
 8007abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ac0:	300c      	adds	r0, #12
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	f103 010c 	add.w	r1, r3, #12
 8007ac8:	3202      	adds	r2, #2
 8007aca:	0092      	lsls	r2, r2, #2
 8007acc:	f001 fa9e 	bl	800900c <memcpy>
 8007ad0:	ab1c      	add	r3, sp, #112	@ 0x70
 8007ad2:	9301      	str	r3, [sp, #4]
 8007ad4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4652      	mov	r2, sl
 8007ada:	465b      	mov	r3, fp
 8007adc:	9805      	ldr	r0, [sp, #20]
 8007ade:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ae2:	f7ff fbd5 	bl	8007290 <__d2b>
 8007ae6:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f43f aedc 	beq.w	80078a6 <_strtod_l+0x436>
 8007aee:	2101      	movs	r1, #1
 8007af0:	9805      	ldr	r0, [sp, #20]
 8007af2:	f7ff f931 	bl	8006d58 <__i2b>
 8007af6:	4680      	mov	r8, r0
 8007af8:	b948      	cbnz	r0, 8007b0e <_strtod_l+0x69e>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	e6d2      	b.n	80078a6 <_strtod_l+0x436>
 8007b00:	f04f 32ff 	mov.w	r2, #4294967295
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	ea03 0a0a 	and.w	sl, r3, sl
 8007b0c:	e7ae      	b.n	8007a6c <_strtod_l+0x5fc>
 8007b0e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007b10:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	bfab      	itete	ge
 8007b16:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b18:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b1a:	18ef      	addge	r7, r5, r3
 8007b1c:	1b5e      	sublt	r6, r3, r5
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	bfa8      	it	ge
 8007b22:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b24:	eba5 0503 	sub.w	r5, r5, r3
 8007b28:	4415      	add	r5, r2
 8007b2a:	4b67      	ldr	r3, [pc, #412]	@ (8007cc8 <_strtod_l+0x858>)
 8007b2c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007b30:	bfb8      	it	lt
 8007b32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b34:	429d      	cmp	r5, r3
 8007b36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b3a:	da50      	bge.n	8007bde <_strtod_l+0x76e>
 8007b3c:	1b5b      	subs	r3, r3, r5
 8007b3e:	2b1f      	cmp	r3, #31
 8007b40:	f04f 0101 	mov.w	r1, #1
 8007b44:	eba2 0203 	sub.w	r2, r2, r3
 8007b48:	dc3d      	bgt.n	8007bc6 <_strtod_l+0x756>
 8007b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b50:	2300      	movs	r3, #0
 8007b52:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b54:	18bd      	adds	r5, r7, r2
 8007b56:	9b08      	ldr	r3, [sp, #32]
 8007b58:	42af      	cmp	r7, r5
 8007b5a:	4416      	add	r6, r2
 8007b5c:	441e      	add	r6, r3
 8007b5e:	463b      	mov	r3, r7
 8007b60:	bfa8      	it	ge
 8007b62:	462b      	movge	r3, r5
 8007b64:	42b3      	cmp	r3, r6
 8007b66:	bfa8      	it	ge
 8007b68:	4633      	movge	r3, r6
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bfc2      	ittt	gt
 8007b6e:	1aed      	subgt	r5, r5, r3
 8007b70:	1af6      	subgt	r6, r6, r3
 8007b72:	1aff      	subgt	r7, r7, r3
 8007b74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dd16      	ble.n	8007ba8 <_strtod_l+0x738>
 8007b7a:	4641      	mov	r1, r8
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	9805      	ldr	r0, [sp, #20]
 8007b80:	f7ff f9a8 	bl	8006ed4 <__pow5mult>
 8007b84:	4680      	mov	r8, r0
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d0b7      	beq.n	8007afa <_strtod_l+0x68a>
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b8e:	9805      	ldr	r0, [sp, #20]
 8007b90:	f7ff f8f8 	bl	8006d84 <__multiply>
 8007b94:	900e      	str	r0, [sp, #56]	@ 0x38
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f43f ae85 	beq.w	80078a6 <_strtod_l+0x436>
 8007b9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b9e:	9805      	ldr	r0, [sp, #20]
 8007ba0:	f7fe ffdc 	bl	8006b5c <_Bfree>
 8007ba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ba6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	dc1d      	bgt.n	8007be8 <_strtod_l+0x778>
 8007bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd23      	ble.n	8007bfa <_strtod_l+0x78a>
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007bb6:	9805      	ldr	r0, [sp, #20]
 8007bb8:	f7ff f98c 	bl	8006ed4 <__pow5mult>
 8007bbc:	4681      	mov	r9, r0
 8007bbe:	b9e0      	cbnz	r0, 8007bfa <_strtod_l+0x78a>
 8007bc0:	f04f 0900 	mov.w	r9, #0
 8007bc4:	e66f      	b.n	80078a6 <_strtod_l+0x436>
 8007bc6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007bca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007bce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007bd2:	35e2      	adds	r5, #226	@ 0xe2
 8007bd4:	fa01 f305 	lsl.w	r3, r1, r5
 8007bd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bda:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007bdc:	e7ba      	b.n	8007b54 <_strtod_l+0x6e4>
 8007bde:	2300      	movs	r3, #0
 8007be0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007be2:	2301      	movs	r3, #1
 8007be4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007be6:	e7b5      	b.n	8007b54 <_strtod_l+0x6e4>
 8007be8:	462a      	mov	r2, r5
 8007bea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bec:	9805      	ldr	r0, [sp, #20]
 8007bee:	f7ff f9cb 	bl	8006f88 <__lshift>
 8007bf2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d1d9      	bne.n	8007bac <_strtod_l+0x73c>
 8007bf8:	e655      	b.n	80078a6 <_strtod_l+0x436>
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	dd07      	ble.n	8007c0e <_strtod_l+0x79e>
 8007bfe:	4649      	mov	r1, r9
 8007c00:	4632      	mov	r2, r6
 8007c02:	9805      	ldr	r0, [sp, #20]
 8007c04:	f7ff f9c0 	bl	8006f88 <__lshift>
 8007c08:	4681      	mov	r9, r0
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d0d8      	beq.n	8007bc0 <_strtod_l+0x750>
 8007c0e:	2f00      	cmp	r7, #0
 8007c10:	dd08      	ble.n	8007c24 <_strtod_l+0x7b4>
 8007c12:	4641      	mov	r1, r8
 8007c14:	463a      	mov	r2, r7
 8007c16:	9805      	ldr	r0, [sp, #20]
 8007c18:	f7ff f9b6 	bl	8006f88 <__lshift>
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f43f ae41 	beq.w	80078a6 <_strtod_l+0x436>
 8007c24:	464a      	mov	r2, r9
 8007c26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c28:	9805      	ldr	r0, [sp, #20]
 8007c2a:	f7ff fa35 	bl	8007098 <__mdiff>
 8007c2e:	4604      	mov	r4, r0
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f43f ae38 	beq.w	80078a6 <_strtod_l+0x436>
 8007c36:	68c3      	ldr	r3, [r0, #12]
 8007c38:	4641      	mov	r1, r8
 8007c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60c3      	str	r3, [r0, #12]
 8007c40:	f7ff fa0e 	bl	8007060 <__mcmp>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	da45      	bge.n	8007cd4 <_strtod_l+0x864>
 8007c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c4e:	d16b      	bne.n	8007d28 <_strtod_l+0x8b8>
 8007c50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d167      	bne.n	8007d28 <_strtod_l+0x8b8>
 8007c58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c5c:	0d1b      	lsrs	r3, r3, #20
 8007c5e:	051b      	lsls	r3, r3, #20
 8007c60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c64:	d960      	bls.n	8007d28 <_strtod_l+0x8b8>
 8007c66:	6963      	ldr	r3, [r4, #20]
 8007c68:	b913      	cbnz	r3, 8007c70 <_strtod_l+0x800>
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	dd5b      	ble.n	8007d28 <_strtod_l+0x8b8>
 8007c70:	4621      	mov	r1, r4
 8007c72:	2201      	movs	r2, #1
 8007c74:	9805      	ldr	r0, [sp, #20]
 8007c76:	f7ff f987 	bl	8006f88 <__lshift>
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	f7ff f9ef 	bl	8007060 <__mcmp>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	dd50      	ble.n	8007d28 <_strtod_l+0x8b8>
 8007c86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c8a:	9a08      	ldr	r2, [sp, #32]
 8007c8c:	0d1b      	lsrs	r3, r3, #20
 8007c8e:	051b      	lsls	r3, r3, #20
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d06a      	beq.n	8007d6a <_strtod_l+0x8fa>
 8007c94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c98:	d867      	bhi.n	8007d6a <_strtod_l+0x8fa>
 8007c9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c9e:	f67f ae98 	bls.w	80079d2 <_strtod_l+0x562>
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	4b09      	ldr	r3, [pc, #36]	@ (8007ccc <_strtod_l+0x85c>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f7f8 fc15 	bl	80004d8 <__aeabi_dmul>
 8007cae:	4b08      	ldr	r3, [pc, #32]	@ (8007cd0 <_strtod_l+0x860>)
 8007cb0:	4682      	mov	sl, r0
 8007cb2:	400b      	ands	r3, r1
 8007cb4:	468b      	mov	fp, r1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f47f ae00 	bne.w	80078bc <_strtod_l+0x44c>
 8007cbc:	2322      	movs	r3, #34	@ 0x22
 8007cbe:	9a05      	ldr	r2, [sp, #20]
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	e5fb      	b.n	80078bc <_strtod_l+0x44c>
 8007cc4:	08009dd0 	.word	0x08009dd0
 8007cc8:	fffffc02 	.word	0xfffffc02
 8007ccc:	39500000 	.word	0x39500000
 8007cd0:	7ff00000 	.word	0x7ff00000
 8007cd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007cd8:	d165      	bne.n	8007da6 <_strtod_l+0x936>
 8007cda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ce0:	b35a      	cbz	r2, 8007d3a <_strtod_l+0x8ca>
 8007ce2:	4a99      	ldr	r2, [pc, #612]	@ (8007f48 <_strtod_l+0xad8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d12b      	bne.n	8007d40 <_strtod_l+0x8d0>
 8007ce8:	9b08      	ldr	r3, [sp, #32]
 8007cea:	4651      	mov	r1, sl
 8007cec:	b303      	cbz	r3, 8007d30 <_strtod_l+0x8c0>
 8007cee:	465a      	mov	r2, fp
 8007cf0:	4b96      	ldr	r3, [pc, #600]	@ (8007f4c <_strtod_l+0xadc>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	d81b      	bhi.n	8007d36 <_strtod_l+0x8c6>
 8007cfe:	0d1b      	lsrs	r3, r3, #20
 8007d00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	d119      	bne.n	8007d40 <_strtod_l+0x8d0>
 8007d0c:	4b90      	ldr	r3, [pc, #576]	@ (8007f50 <_strtod_l+0xae0>)
 8007d0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d102      	bne.n	8007d1a <_strtod_l+0x8aa>
 8007d14:	3101      	adds	r1, #1
 8007d16:	f43f adc6 	beq.w	80078a6 <_strtod_l+0x436>
 8007d1a:	f04f 0a00 	mov.w	sl, #0
 8007d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8007f4c <_strtod_l+0xadc>)
 8007d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d22:	401a      	ands	r2, r3
 8007d24:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d28:	9b08      	ldr	r3, [sp, #32]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1b9      	bne.n	8007ca2 <_strtod_l+0x832>
 8007d2e:	e5c5      	b.n	80078bc <_strtod_l+0x44c>
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	e7e8      	b.n	8007d08 <_strtod_l+0x898>
 8007d36:	4613      	mov	r3, r2
 8007d38:	e7e6      	b.n	8007d08 <_strtod_l+0x898>
 8007d3a:	ea53 030a 	orrs.w	r3, r3, sl
 8007d3e:	d0a2      	beq.n	8007c86 <_strtod_l+0x816>
 8007d40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d42:	b1db      	cbz	r3, 8007d7c <_strtod_l+0x90c>
 8007d44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d46:	4213      	tst	r3, r2
 8007d48:	d0ee      	beq.n	8007d28 <_strtod_l+0x8b8>
 8007d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	4659      	mov	r1, fp
 8007d50:	9a08      	ldr	r2, [sp, #32]
 8007d52:	b1bb      	cbz	r3, 8007d84 <_strtod_l+0x914>
 8007d54:	f7ff fb68 	bl	8007428 <sulp>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d60:	f7f8 fa04 	bl	800016c <__adddf3>
 8007d64:	4682      	mov	sl, r0
 8007d66:	468b      	mov	fp, r1
 8007d68:	e7de      	b.n	8007d28 <_strtod_l+0x8b8>
 8007d6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d72:	f04f 3aff 	mov.w	sl, #4294967295
 8007d76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d7a:	e7d5      	b.n	8007d28 <_strtod_l+0x8b8>
 8007d7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d7e:	ea13 0f0a 	tst.w	r3, sl
 8007d82:	e7e1      	b.n	8007d48 <_strtod_l+0x8d8>
 8007d84:	f7ff fb50 	bl	8007428 <sulp>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d90:	f7f8 f9ea 	bl	8000168 <__aeabi_dsub>
 8007d94:	2200      	movs	r2, #0
 8007d96:	2300      	movs	r3, #0
 8007d98:	4682      	mov	sl, r0
 8007d9a:	468b      	mov	fp, r1
 8007d9c:	f7f8 fe04 	bl	80009a8 <__aeabi_dcmpeq>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d0c1      	beq.n	8007d28 <_strtod_l+0x8b8>
 8007da4:	e615      	b.n	80079d2 <_strtod_l+0x562>
 8007da6:	4641      	mov	r1, r8
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7ff fac9 	bl	8007340 <__ratio>
 8007dae:	2200      	movs	r2, #0
 8007db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007db4:	4606      	mov	r6, r0
 8007db6:	460f      	mov	r7, r1
 8007db8:	f7f8 fe0a 	bl	80009d0 <__aeabi_dcmple>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d06d      	beq.n	8007e9c <_strtod_l+0xa2c>
 8007dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d178      	bne.n	8007eb8 <_strtod_l+0xa48>
 8007dc6:	f1ba 0f00 	cmp.w	sl, #0
 8007dca:	d156      	bne.n	8007e7a <_strtod_l+0xa0a>
 8007dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d158      	bne.n	8007e88 <_strtod_l+0xa18>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8007f54 <_strtod_l+0xae4>)
 8007dde:	f7f8 fded 	bl	80009bc <__aeabi_dcmplt>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d157      	bne.n	8007e96 <_strtod_l+0xa26>
 8007de6:	4630      	mov	r0, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	2200      	movs	r2, #0
 8007dec:	4b5a      	ldr	r3, [pc, #360]	@ (8007f58 <_strtod_l+0xae8>)
 8007dee:	f7f8 fb73 	bl	80004d8 <__aeabi_dmul>
 8007df2:	4606      	mov	r6, r0
 8007df4:	460f      	mov	r7, r1
 8007df6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007dfa:	9606      	str	r6, [sp, #24]
 8007dfc:	9307      	str	r3, [sp, #28]
 8007dfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e02:	4d52      	ldr	r5, [pc, #328]	@ (8007f4c <_strtod_l+0xadc>)
 8007e04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e0a:	401d      	ands	r5, r3
 8007e0c:	4b53      	ldr	r3, [pc, #332]	@ (8007f5c <_strtod_l+0xaec>)
 8007e0e:	429d      	cmp	r5, r3
 8007e10:	f040 80aa 	bne.w	8007f68 <_strtod_l+0xaf8>
 8007e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e16:	4650      	mov	r0, sl
 8007e18:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	f7ff f9cf 	bl	80071c0 <__ulp>
 8007e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e26:	f7f8 fb57 	bl	80004d8 <__aeabi_dmul>
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	465b      	mov	r3, fp
 8007e2e:	f7f8 f99d 	bl	800016c <__adddf3>
 8007e32:	460b      	mov	r3, r1
 8007e34:	4945      	ldr	r1, [pc, #276]	@ (8007f4c <_strtod_l+0xadc>)
 8007e36:	4a4a      	ldr	r2, [pc, #296]	@ (8007f60 <_strtod_l+0xaf0>)
 8007e38:	4019      	ands	r1, r3
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	d942      	bls.n	8007ec6 <_strtod_l+0xa56>
 8007e40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e42:	4b43      	ldr	r3, [pc, #268]	@ (8007f50 <_strtod_l+0xae0>)
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d103      	bne.n	8007e50 <_strtod_l+0x9e0>
 8007e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f43f ad2b 	beq.w	80078a6 <_strtod_l+0x436>
 8007e50:	f04f 3aff 	mov.w	sl, #4294967295
 8007e54:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007f50 <_strtod_l+0xae0>
 8007e58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e5a:	9805      	ldr	r0, [sp, #20]
 8007e5c:	f7fe fe7e 	bl	8006b5c <_Bfree>
 8007e60:	4649      	mov	r1, r9
 8007e62:	9805      	ldr	r0, [sp, #20]
 8007e64:	f7fe fe7a 	bl	8006b5c <_Bfree>
 8007e68:	4641      	mov	r1, r8
 8007e6a:	9805      	ldr	r0, [sp, #20]
 8007e6c:	f7fe fe76 	bl	8006b5c <_Bfree>
 8007e70:	4621      	mov	r1, r4
 8007e72:	9805      	ldr	r0, [sp, #20]
 8007e74:	f7fe fe72 	bl	8006b5c <_Bfree>
 8007e78:	e618      	b.n	8007aac <_strtod_l+0x63c>
 8007e7a:	f1ba 0f01 	cmp.w	sl, #1
 8007e7e:	d103      	bne.n	8007e88 <_strtod_l+0xa18>
 8007e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f43f ada5 	beq.w	80079d2 <_strtod_l+0x562>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4b36      	ldr	r3, [pc, #216]	@ (8007f64 <_strtod_l+0xaf4>)
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e92:	4f30      	ldr	r7, [pc, #192]	@ (8007f54 <_strtod_l+0xae4>)
 8007e94:	e7b3      	b.n	8007dfe <_strtod_l+0x98e>
 8007e96:	2600      	movs	r6, #0
 8007e98:	4f2f      	ldr	r7, [pc, #188]	@ (8007f58 <_strtod_l+0xae8>)
 8007e9a:	e7ac      	b.n	8007df6 <_strtod_l+0x986>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8007f58 <_strtod_l+0xae8>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f7f8 fb18 	bl	80004d8 <__aeabi_dmul>
 8007ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0a1      	beq.n	8007df6 <_strtod_l+0x986>
 8007eb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007eb6:	e7a2      	b.n	8007dfe <_strtod_l+0x98e>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4b26      	ldr	r3, [pc, #152]	@ (8007f54 <_strtod_l+0xae4>)
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ec4:	e79b      	b.n	8007dfe <_strtod_l+0x98e>
 8007ec6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007eca:	9b08      	ldr	r3, [sp, #32]
 8007ecc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1c1      	bne.n	8007e58 <_strtod_l+0x9e8>
 8007ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ed8:	0d1b      	lsrs	r3, r3, #20
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	429d      	cmp	r5, r3
 8007ede:	d1bb      	bne.n	8007e58 <_strtod_l+0x9e8>
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 fe58 	bl	8000b98 <__aeabi_d2lz>
 8007ee8:	f7f8 fac8 	bl	800047c <__aeabi_l2d>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 f938 	bl	8000168 <__aeabi_dsub>
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4602      	mov	r2, r0
 8007efc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007f00:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f06:	ea46 060a 	orr.w	r6, r6, sl
 8007f0a:	431e      	orrs	r6, r3
 8007f0c:	d069      	beq.n	8007fe2 <_strtod_l+0xb72>
 8007f0e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007f38 <_strtod_l+0xac8>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f7f8 fd52 	bl	80009bc <__aeabi_dcmplt>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	f47f accf 	bne.w	80078bc <_strtod_l+0x44c>
 8007f1e:	a308      	add	r3, pc, #32	@ (adr r3, 8007f40 <_strtod_l+0xad0>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f28:	f7f8 fd66 	bl	80009f8 <__aeabi_dcmpgt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d093      	beq.n	8007e58 <_strtod_l+0x9e8>
 8007f30:	e4c4      	b.n	80078bc <_strtod_l+0x44c>
 8007f32:	bf00      	nop
 8007f34:	f3af 8000 	nop.w
 8007f38:	94a03595 	.word	0x94a03595
 8007f3c:	3fdfffff 	.word	0x3fdfffff
 8007f40:	35afe535 	.word	0x35afe535
 8007f44:	3fe00000 	.word	0x3fe00000
 8007f48:	000fffff 	.word	0x000fffff
 8007f4c:	7ff00000 	.word	0x7ff00000
 8007f50:	7fefffff 	.word	0x7fefffff
 8007f54:	3ff00000 	.word	0x3ff00000
 8007f58:	3fe00000 	.word	0x3fe00000
 8007f5c:	7fe00000 	.word	0x7fe00000
 8007f60:	7c9fffff 	.word	0x7c9fffff
 8007f64:	bff00000 	.word	0xbff00000
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	b323      	cbz	r3, 8007fb6 <_strtod_l+0xb46>
 8007f6c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f70:	d821      	bhi.n	8007fb6 <_strtod_l+0xb46>
 8007f72:	a327      	add	r3, pc, #156	@ (adr r3, 8008010 <_strtod_l+0xba0>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 fd28 	bl	80009d0 <__aeabi_dcmple>
 8007f80:	b1a0      	cbz	r0, 8007fac <_strtod_l+0xb3c>
 8007f82:	4639      	mov	r1, r7
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7f8 fd7f 	bl	8000a88 <__aeabi_d2uiz>
 8007f8a:	2801      	cmp	r0, #1
 8007f8c:	bf38      	it	cc
 8007f8e:	2001      	movcc	r0, #1
 8007f90:	f7f8 fa28 	bl	80003e4 <__aeabi_ui2d>
 8007f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f96:	4606      	mov	r6, r0
 8007f98:	460f      	mov	r7, r1
 8007f9a:	b9fb      	cbnz	r3, 8007fdc <_strtod_l+0xb6c>
 8007f9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007fa0:	9014      	str	r0, [sp, #80]	@ 0x50
 8007fa2:	9315      	str	r3, [sp, #84]	@ 0x54
 8007fa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007fa8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007fb2:	1b5b      	subs	r3, r3, r5
 8007fb4:	9311      	str	r3, [sp, #68]	@ 0x44
 8007fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007fbe:	f7ff f8ff 	bl	80071c0 <__ulp>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4650      	mov	r0, sl
 8007fc8:	4659      	mov	r1, fp
 8007fca:	f7f8 fa85 	bl	80004d8 <__aeabi_dmul>
 8007fce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fd2:	f7f8 f8cb 	bl	800016c <__adddf3>
 8007fd6:	4682      	mov	sl, r0
 8007fd8:	468b      	mov	fp, r1
 8007fda:	e776      	b.n	8007eca <_strtod_l+0xa5a>
 8007fdc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007fe0:	e7e0      	b.n	8007fa4 <_strtod_l+0xb34>
 8007fe2:	a30d      	add	r3, pc, #52	@ (adr r3, 8008018 <_strtod_l+0xba8>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 fce8 	bl	80009bc <__aeabi_dcmplt>
 8007fec:	e79e      	b.n	8007f2c <_strtod_l+0xabc>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ff4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	f7ff ba77 	b.w	80074ea <_strtod_l+0x7a>
 8007ffc:	2a65      	cmp	r2, #101	@ 0x65
 8007ffe:	f43f ab6e 	beq.w	80076de <_strtod_l+0x26e>
 8008002:	2a45      	cmp	r2, #69	@ 0x45
 8008004:	f43f ab6b 	beq.w	80076de <_strtod_l+0x26e>
 8008008:	2301      	movs	r3, #1
 800800a:	f7ff bba6 	b.w	800775a <_strtod_l+0x2ea>
 800800e:	bf00      	nop
 8008010:	ffc00000 	.word	0xffc00000
 8008014:	41dfffff 	.word	0x41dfffff
 8008018:	94a03595 	.word	0x94a03595
 800801c:	3fcfffff 	.word	0x3fcfffff

08008020 <_strtod_r>:
 8008020:	4b01      	ldr	r3, [pc, #4]	@ (8008028 <_strtod_r+0x8>)
 8008022:	f7ff ba25 	b.w	8007470 <_strtod_l>
 8008026:	bf00      	nop
 8008028:	20000080 	.word	0x20000080

0800802c <_strtol_l.constprop.0>:
 800802c:	2b24      	cmp	r3, #36	@ 0x24
 800802e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008032:	4686      	mov	lr, r0
 8008034:	4690      	mov	r8, r2
 8008036:	d801      	bhi.n	800803c <_strtol_l.constprop.0+0x10>
 8008038:	2b01      	cmp	r3, #1
 800803a:	d106      	bne.n	800804a <_strtol_l.constprop.0+0x1e>
 800803c:	f7fd fdc0 	bl	8005bc0 <__errno>
 8008040:	2316      	movs	r3, #22
 8008042:	6003      	str	r3, [r0, #0]
 8008044:	2000      	movs	r0, #0
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	460d      	mov	r5, r1
 800804c:	4833      	ldr	r0, [pc, #204]	@ (800811c <_strtol_l.constprop.0+0xf0>)
 800804e:	462a      	mov	r2, r5
 8008050:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008054:	5d06      	ldrb	r6, [r0, r4]
 8008056:	f016 0608 	ands.w	r6, r6, #8
 800805a:	d1f8      	bne.n	800804e <_strtol_l.constprop.0+0x22>
 800805c:	2c2d      	cmp	r4, #45	@ 0x2d
 800805e:	d12d      	bne.n	80080bc <_strtol_l.constprop.0+0x90>
 8008060:	2601      	movs	r6, #1
 8008062:	782c      	ldrb	r4, [r5, #0]
 8008064:	1c95      	adds	r5, r2, #2
 8008066:	f033 0210 	bics.w	r2, r3, #16
 800806a:	d109      	bne.n	8008080 <_strtol_l.constprop.0+0x54>
 800806c:	2c30      	cmp	r4, #48	@ 0x30
 800806e:	d12a      	bne.n	80080c6 <_strtol_l.constprop.0+0x9a>
 8008070:	782a      	ldrb	r2, [r5, #0]
 8008072:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008076:	2a58      	cmp	r2, #88	@ 0x58
 8008078:	d125      	bne.n	80080c6 <_strtol_l.constprop.0+0x9a>
 800807a:	2310      	movs	r3, #16
 800807c:	786c      	ldrb	r4, [r5, #1]
 800807e:	3502      	adds	r5, #2
 8008080:	2200      	movs	r2, #0
 8008082:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008086:	f10c 3cff 	add.w	ip, ip, #4294967295
 800808a:	fbbc f9f3 	udiv	r9, ip, r3
 800808e:	4610      	mov	r0, r2
 8008090:	fb03 ca19 	mls	sl, r3, r9, ip
 8008094:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008098:	2f09      	cmp	r7, #9
 800809a:	d81b      	bhi.n	80080d4 <_strtol_l.constprop.0+0xa8>
 800809c:	463c      	mov	r4, r7
 800809e:	42a3      	cmp	r3, r4
 80080a0:	dd27      	ble.n	80080f2 <_strtol_l.constprop.0+0xc6>
 80080a2:	1c57      	adds	r7, r2, #1
 80080a4:	d007      	beq.n	80080b6 <_strtol_l.constprop.0+0x8a>
 80080a6:	4581      	cmp	r9, r0
 80080a8:	d320      	bcc.n	80080ec <_strtol_l.constprop.0+0xc0>
 80080aa:	d101      	bne.n	80080b0 <_strtol_l.constprop.0+0x84>
 80080ac:	45a2      	cmp	sl, r4
 80080ae:	db1d      	blt.n	80080ec <_strtol_l.constprop.0+0xc0>
 80080b0:	2201      	movs	r2, #1
 80080b2:	fb00 4003 	mla	r0, r0, r3, r4
 80080b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080ba:	e7eb      	b.n	8008094 <_strtol_l.constprop.0+0x68>
 80080bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80080be:	bf04      	itt	eq
 80080c0:	782c      	ldrbeq	r4, [r5, #0]
 80080c2:	1c95      	addeq	r5, r2, #2
 80080c4:	e7cf      	b.n	8008066 <_strtol_l.constprop.0+0x3a>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1da      	bne.n	8008080 <_strtol_l.constprop.0+0x54>
 80080ca:	2c30      	cmp	r4, #48	@ 0x30
 80080cc:	bf0c      	ite	eq
 80080ce:	2308      	moveq	r3, #8
 80080d0:	230a      	movne	r3, #10
 80080d2:	e7d5      	b.n	8008080 <_strtol_l.constprop.0+0x54>
 80080d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080d8:	2f19      	cmp	r7, #25
 80080da:	d801      	bhi.n	80080e0 <_strtol_l.constprop.0+0xb4>
 80080dc:	3c37      	subs	r4, #55	@ 0x37
 80080de:	e7de      	b.n	800809e <_strtol_l.constprop.0+0x72>
 80080e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080e4:	2f19      	cmp	r7, #25
 80080e6:	d804      	bhi.n	80080f2 <_strtol_l.constprop.0+0xc6>
 80080e8:	3c57      	subs	r4, #87	@ 0x57
 80080ea:	e7d8      	b.n	800809e <_strtol_l.constprop.0+0x72>
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	e7e1      	b.n	80080b6 <_strtol_l.constprop.0+0x8a>
 80080f2:	1c53      	adds	r3, r2, #1
 80080f4:	d108      	bne.n	8008108 <_strtol_l.constprop.0+0xdc>
 80080f6:	2322      	movs	r3, #34	@ 0x22
 80080f8:	4660      	mov	r0, ip
 80080fa:	f8ce 3000 	str.w	r3, [lr]
 80080fe:	f1b8 0f00 	cmp.w	r8, #0
 8008102:	d0a0      	beq.n	8008046 <_strtol_l.constprop.0+0x1a>
 8008104:	1e69      	subs	r1, r5, #1
 8008106:	e006      	b.n	8008116 <_strtol_l.constprop.0+0xea>
 8008108:	b106      	cbz	r6, 800810c <_strtol_l.constprop.0+0xe0>
 800810a:	4240      	negs	r0, r0
 800810c:	f1b8 0f00 	cmp.w	r8, #0
 8008110:	d099      	beq.n	8008046 <_strtol_l.constprop.0+0x1a>
 8008112:	2a00      	cmp	r2, #0
 8008114:	d1f6      	bne.n	8008104 <_strtol_l.constprop.0+0xd8>
 8008116:	f8c8 1000 	str.w	r1, [r8]
 800811a:	e794      	b.n	8008046 <_strtol_l.constprop.0+0x1a>
 800811c:	08009df9 	.word	0x08009df9

08008120 <_strtol_r>:
 8008120:	f7ff bf84 	b.w	800802c <_strtol_l.constprop.0>

08008124 <__ssputs_r>:
 8008124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	461f      	mov	r7, r3
 800812a:	688e      	ldr	r6, [r1, #8]
 800812c:	4682      	mov	sl, r0
 800812e:	42be      	cmp	r6, r7
 8008130:	460c      	mov	r4, r1
 8008132:	4690      	mov	r8, r2
 8008134:	680b      	ldr	r3, [r1, #0]
 8008136:	d82d      	bhi.n	8008194 <__ssputs_r+0x70>
 8008138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800813c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008140:	d026      	beq.n	8008190 <__ssputs_r+0x6c>
 8008142:	6965      	ldr	r5, [r4, #20]
 8008144:	6909      	ldr	r1, [r1, #16]
 8008146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800814a:	eba3 0901 	sub.w	r9, r3, r1
 800814e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008152:	1c7b      	adds	r3, r7, #1
 8008154:	444b      	add	r3, r9
 8008156:	106d      	asrs	r5, r5, #1
 8008158:	429d      	cmp	r5, r3
 800815a:	bf38      	it	cc
 800815c:	461d      	movcc	r5, r3
 800815e:	0553      	lsls	r3, r2, #21
 8008160:	d527      	bpl.n	80081b2 <__ssputs_r+0x8e>
 8008162:	4629      	mov	r1, r5
 8008164:	f7fe fc2e 	bl	80069c4 <_malloc_r>
 8008168:	4606      	mov	r6, r0
 800816a:	b360      	cbz	r0, 80081c6 <__ssputs_r+0xa2>
 800816c:	464a      	mov	r2, r9
 800816e:	6921      	ldr	r1, [r4, #16]
 8008170:	f000 ff4c 	bl	800900c <memcpy>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800817a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	6126      	str	r6, [r4, #16]
 8008182:	444e      	add	r6, r9
 8008184:	6026      	str	r6, [r4, #0]
 8008186:	463e      	mov	r6, r7
 8008188:	6165      	str	r5, [r4, #20]
 800818a:	eba5 0509 	sub.w	r5, r5, r9
 800818e:	60a5      	str	r5, [r4, #8]
 8008190:	42be      	cmp	r6, r7
 8008192:	d900      	bls.n	8008196 <__ssputs_r+0x72>
 8008194:	463e      	mov	r6, r7
 8008196:	4632      	mov	r2, r6
 8008198:	4641      	mov	r1, r8
 800819a:	6820      	ldr	r0, [r4, #0]
 800819c:	f000 feea 	bl	8008f74 <memmove>
 80081a0:	2000      	movs	r0, #0
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	1b9b      	subs	r3, r3, r6
 80081a6:	60a3      	str	r3, [r4, #8]
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	4433      	add	r3, r6
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	462a      	mov	r2, r5
 80081b4:	f001 fabb 	bl	800972e <_realloc_r>
 80081b8:	4606      	mov	r6, r0
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d1e0      	bne.n	8008180 <__ssputs_r+0x5c>
 80081be:	4650      	mov	r0, sl
 80081c0:	6921      	ldr	r1, [r4, #16]
 80081c2:	f7fe fb8d 	bl	80068e0 <_free_r>
 80081c6:	230c      	movs	r3, #12
 80081c8:	f8ca 3000 	str.w	r3, [sl]
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f04f 30ff 	mov.w	r0, #4294967295
 80081d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	e7e9      	b.n	80081ae <__ssputs_r+0x8a>
	...

080081dc <_svfiprintf_r>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	4698      	mov	r8, r3
 80081e2:	898b      	ldrh	r3, [r1, #12]
 80081e4:	4607      	mov	r7, r0
 80081e6:	061b      	lsls	r3, r3, #24
 80081e8:	460d      	mov	r5, r1
 80081ea:	4614      	mov	r4, r2
 80081ec:	b09d      	sub	sp, #116	@ 0x74
 80081ee:	d510      	bpl.n	8008212 <_svfiprintf_r+0x36>
 80081f0:	690b      	ldr	r3, [r1, #16]
 80081f2:	b973      	cbnz	r3, 8008212 <_svfiprintf_r+0x36>
 80081f4:	2140      	movs	r1, #64	@ 0x40
 80081f6:	f7fe fbe5 	bl	80069c4 <_malloc_r>
 80081fa:	6028      	str	r0, [r5, #0]
 80081fc:	6128      	str	r0, [r5, #16]
 80081fe:	b930      	cbnz	r0, 800820e <_svfiprintf_r+0x32>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	b01d      	add	sp, #116	@ 0x74
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	2340      	movs	r3, #64	@ 0x40
 8008210:	616b      	str	r3, [r5, #20]
 8008212:	2300      	movs	r3, #0
 8008214:	9309      	str	r3, [sp, #36]	@ 0x24
 8008216:	2320      	movs	r3, #32
 8008218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800821c:	2330      	movs	r3, #48	@ 0x30
 800821e:	f04f 0901 	mov.w	r9, #1
 8008222:	f8cd 800c 	str.w	r8, [sp, #12]
 8008226:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80083c0 <_svfiprintf_r+0x1e4>
 800822a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800822e:	4623      	mov	r3, r4
 8008230:	469a      	mov	sl, r3
 8008232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008236:	b10a      	cbz	r2, 800823c <_svfiprintf_r+0x60>
 8008238:	2a25      	cmp	r2, #37	@ 0x25
 800823a:	d1f9      	bne.n	8008230 <_svfiprintf_r+0x54>
 800823c:	ebba 0b04 	subs.w	fp, sl, r4
 8008240:	d00b      	beq.n	800825a <_svfiprintf_r+0x7e>
 8008242:	465b      	mov	r3, fp
 8008244:	4622      	mov	r2, r4
 8008246:	4629      	mov	r1, r5
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ff6b 	bl	8008124 <__ssputs_r>
 800824e:	3001      	adds	r0, #1
 8008250:	f000 80a7 	beq.w	80083a2 <_svfiprintf_r+0x1c6>
 8008254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008256:	445a      	add	r2, fp
 8008258:	9209      	str	r2, [sp, #36]	@ 0x24
 800825a:	f89a 3000 	ldrb.w	r3, [sl]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 809f 	beq.w	80083a2 <_svfiprintf_r+0x1c6>
 8008264:	2300      	movs	r3, #0
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800826e:	f10a 0a01 	add.w	sl, sl, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	9307      	str	r3, [sp, #28]
 8008276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800827a:	931a      	str	r3, [sp, #104]	@ 0x68
 800827c:	4654      	mov	r4, sl
 800827e:	2205      	movs	r2, #5
 8008280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008284:	484e      	ldr	r0, [pc, #312]	@ (80083c0 <_svfiprintf_r+0x1e4>)
 8008286:	f7fd fcc8 	bl	8005c1a <memchr>
 800828a:	9a04      	ldr	r2, [sp, #16]
 800828c:	b9d8      	cbnz	r0, 80082c6 <_svfiprintf_r+0xea>
 800828e:	06d0      	lsls	r0, r2, #27
 8008290:	bf44      	itt	mi
 8008292:	2320      	movmi	r3, #32
 8008294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008298:	0711      	lsls	r1, r2, #28
 800829a:	bf44      	itt	mi
 800829c:	232b      	movmi	r3, #43	@ 0x2b
 800829e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a2:	f89a 3000 	ldrb.w	r3, [sl]
 80082a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a8:	d015      	beq.n	80082d6 <_svfiprintf_r+0xfa>
 80082aa:	4654      	mov	r4, sl
 80082ac:	2000      	movs	r0, #0
 80082ae:	f04f 0c0a 	mov.w	ip, #10
 80082b2:	9a07      	ldr	r2, [sp, #28]
 80082b4:	4621      	mov	r1, r4
 80082b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ba:	3b30      	subs	r3, #48	@ 0x30
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d94b      	bls.n	8008358 <_svfiprintf_r+0x17c>
 80082c0:	b1b0      	cbz	r0, 80082f0 <_svfiprintf_r+0x114>
 80082c2:	9207      	str	r2, [sp, #28]
 80082c4:	e014      	b.n	80082f0 <_svfiprintf_r+0x114>
 80082c6:	eba0 0308 	sub.w	r3, r0, r8
 80082ca:	fa09 f303 	lsl.w	r3, r9, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	46a2      	mov	sl, r4
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	e7d2      	b.n	800827c <_svfiprintf_r+0xa0>
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	1d19      	adds	r1, r3, #4
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	9103      	str	r1, [sp, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfbb      	ittet	lt
 80082e2:	425b      	neglt	r3, r3
 80082e4:	f042 0202 	orrlt.w	r2, r2, #2
 80082e8:	9307      	strge	r3, [sp, #28]
 80082ea:	9307      	strlt	r3, [sp, #28]
 80082ec:	bfb8      	it	lt
 80082ee:	9204      	strlt	r2, [sp, #16]
 80082f0:	7823      	ldrb	r3, [r4, #0]
 80082f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80082f4:	d10a      	bne.n	800830c <_svfiprintf_r+0x130>
 80082f6:	7863      	ldrb	r3, [r4, #1]
 80082f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082fa:	d132      	bne.n	8008362 <_svfiprintf_r+0x186>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	3402      	adds	r4, #2
 8008300:	1d1a      	adds	r2, r3, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	9203      	str	r2, [sp, #12]
 8008306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80083c4 <_svfiprintf_r+0x1e8>
 8008310:	2203      	movs	r2, #3
 8008312:	4650      	mov	r0, sl
 8008314:	7821      	ldrb	r1, [r4, #0]
 8008316:	f7fd fc80 	bl	8005c1a <memchr>
 800831a:	b138      	cbz	r0, 800832c <_svfiprintf_r+0x150>
 800831c:	2240      	movs	r2, #64	@ 0x40
 800831e:	9b04      	ldr	r3, [sp, #16]
 8008320:	eba0 000a 	sub.w	r0, r0, sl
 8008324:	4082      	lsls	r2, r0
 8008326:	4313      	orrs	r3, r2
 8008328:	3401      	adds	r4, #1
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	2206      	movs	r2, #6
 8008332:	4825      	ldr	r0, [pc, #148]	@ (80083c8 <_svfiprintf_r+0x1ec>)
 8008334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008338:	f7fd fc6f 	bl	8005c1a <memchr>
 800833c:	2800      	cmp	r0, #0
 800833e:	d036      	beq.n	80083ae <_svfiprintf_r+0x1d2>
 8008340:	4b22      	ldr	r3, [pc, #136]	@ (80083cc <_svfiprintf_r+0x1f0>)
 8008342:	bb1b      	cbnz	r3, 800838c <_svfiprintf_r+0x1b0>
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	3307      	adds	r3, #7
 8008348:	f023 0307 	bic.w	r3, r3, #7
 800834c:	3308      	adds	r3, #8
 800834e:	9303      	str	r3, [sp, #12]
 8008350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008352:	4433      	add	r3, r6
 8008354:	9309      	str	r3, [sp, #36]	@ 0x24
 8008356:	e76a      	b.n	800822e <_svfiprintf_r+0x52>
 8008358:	460c      	mov	r4, r1
 800835a:	2001      	movs	r0, #1
 800835c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008360:	e7a8      	b.n	80082b4 <_svfiprintf_r+0xd8>
 8008362:	2300      	movs	r3, #0
 8008364:	f04f 0c0a 	mov.w	ip, #10
 8008368:	4619      	mov	r1, r3
 800836a:	3401      	adds	r4, #1
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	4620      	mov	r0, r4
 8008370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008374:	3a30      	subs	r2, #48	@ 0x30
 8008376:	2a09      	cmp	r2, #9
 8008378:	d903      	bls.n	8008382 <_svfiprintf_r+0x1a6>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c6      	beq.n	800830c <_svfiprintf_r+0x130>
 800837e:	9105      	str	r1, [sp, #20]
 8008380:	e7c4      	b.n	800830c <_svfiprintf_r+0x130>
 8008382:	4604      	mov	r4, r0
 8008384:	2301      	movs	r3, #1
 8008386:	fb0c 2101 	mla	r1, ip, r1, r2
 800838a:	e7f0      	b.n	800836e <_svfiprintf_r+0x192>
 800838c:	ab03      	add	r3, sp, #12
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	462a      	mov	r2, r5
 8008392:	4638      	mov	r0, r7
 8008394:	4b0e      	ldr	r3, [pc, #56]	@ (80083d0 <_svfiprintf_r+0x1f4>)
 8008396:	a904      	add	r1, sp, #16
 8008398:	f7fc fb46 	bl	8004a28 <_printf_float>
 800839c:	1c42      	adds	r2, r0, #1
 800839e:	4606      	mov	r6, r0
 80083a0:	d1d6      	bne.n	8008350 <_svfiprintf_r+0x174>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	065b      	lsls	r3, r3, #25
 80083a6:	f53f af2d 	bmi.w	8008204 <_svfiprintf_r+0x28>
 80083aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ac:	e72c      	b.n	8008208 <_svfiprintf_r+0x2c>
 80083ae:	ab03      	add	r3, sp, #12
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	462a      	mov	r2, r5
 80083b4:	4638      	mov	r0, r7
 80083b6:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <_svfiprintf_r+0x1f4>)
 80083b8:	a904      	add	r1, sp, #16
 80083ba:	f7fc fdd3 	bl	8004f64 <_printf_i>
 80083be:	e7ed      	b.n	800839c <_svfiprintf_r+0x1c0>
 80083c0:	08009ef9 	.word	0x08009ef9
 80083c4:	08009eff 	.word	0x08009eff
 80083c8:	08009f03 	.word	0x08009f03
 80083cc:	08004a29 	.word	0x08004a29
 80083d0:	08008125 	.word	0x08008125

080083d4 <_sungetc_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	1c4b      	adds	r3, r1, #1
 80083d8:	4614      	mov	r4, r2
 80083da:	d103      	bne.n	80083e4 <_sungetc_r+0x10>
 80083dc:	f04f 35ff 	mov.w	r5, #4294967295
 80083e0:	4628      	mov	r0, r5
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	8993      	ldrh	r3, [r2, #12]
 80083e6:	b2cd      	uxtb	r5, r1
 80083e8:	f023 0320 	bic.w	r3, r3, #32
 80083ec:	8193      	strh	r3, [r2, #12]
 80083ee:	6853      	ldr	r3, [r2, #4]
 80083f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80083f2:	b18a      	cbz	r2, 8008418 <_sungetc_r+0x44>
 80083f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80083f6:	429a      	cmp	r2, r3
 80083f8:	dd08      	ble.n	800840c <_sungetc_r+0x38>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	1e5a      	subs	r2, r3, #1
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008404:	6863      	ldr	r3, [r4, #4]
 8008406:	3301      	adds	r3, #1
 8008408:	6063      	str	r3, [r4, #4]
 800840a:	e7e9      	b.n	80083e0 <_sungetc_r+0xc>
 800840c:	4621      	mov	r1, r4
 800840e:	f000 fd79 	bl	8008f04 <__submore>
 8008412:	2800      	cmp	r0, #0
 8008414:	d0f1      	beq.n	80083fa <_sungetc_r+0x26>
 8008416:	e7e1      	b.n	80083dc <_sungetc_r+0x8>
 8008418:	6921      	ldr	r1, [r4, #16]
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	b141      	cbz	r1, 8008430 <_sungetc_r+0x5c>
 800841e:	4291      	cmp	r1, r2
 8008420:	d206      	bcs.n	8008430 <_sungetc_r+0x5c>
 8008422:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008426:	42a9      	cmp	r1, r5
 8008428:	d102      	bne.n	8008430 <_sungetc_r+0x5c>
 800842a:	3a01      	subs	r2, #1
 800842c:	6022      	str	r2, [r4, #0]
 800842e:	e7ea      	b.n	8008406 <_sungetc_r+0x32>
 8008430:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008438:	6363      	str	r3, [r4, #52]	@ 0x34
 800843a:	2303      	movs	r3, #3
 800843c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800843e:	4623      	mov	r3, r4
 8008440:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	2301      	movs	r3, #1
 8008448:	e7de      	b.n	8008408 <_sungetc_r+0x34>

0800844a <__ssrefill_r>:
 800844a:	b510      	push	{r4, lr}
 800844c:	460c      	mov	r4, r1
 800844e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008450:	b169      	cbz	r1, 800846e <__ssrefill_r+0x24>
 8008452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008456:	4299      	cmp	r1, r3
 8008458:	d001      	beq.n	800845e <__ssrefill_r+0x14>
 800845a:	f7fe fa41 	bl	80068e0 <_free_r>
 800845e:	2000      	movs	r0, #0
 8008460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008462:	6360      	str	r0, [r4, #52]	@ 0x34
 8008464:	6063      	str	r3, [r4, #4]
 8008466:	b113      	cbz	r3, 800846e <__ssrefill_r+0x24>
 8008468:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	bd10      	pop	{r4, pc}
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	2300      	movs	r3, #0
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f043 0320 	orr.w	r3, r3, #32
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	e7f3      	b.n	800846c <__ssrefill_r+0x22>

08008484 <__ssvfiscanf_r>:
 8008484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	2100      	movs	r1, #0
 800848c:	4606      	mov	r6, r0
 800848e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008492:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008496:	49aa      	ldr	r1, [pc, #680]	@ (8008740 <__ssvfiscanf_r+0x2bc>)
 8008498:	f10d 0804 	add.w	r8, sp, #4
 800849c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800849e:	49a9      	ldr	r1, [pc, #676]	@ (8008744 <__ssvfiscanf_r+0x2c0>)
 80084a0:	4fa9      	ldr	r7, [pc, #676]	@ (8008748 <__ssvfiscanf_r+0x2c4>)
 80084a2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80084a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	7813      	ldrb	r3, [r2, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8159 	beq.w	8008764 <__ssvfiscanf_r+0x2e0>
 80084b2:	5cf9      	ldrb	r1, [r7, r3]
 80084b4:	1c55      	adds	r5, r2, #1
 80084b6:	f011 0108 	ands.w	r1, r1, #8
 80084ba:	d019      	beq.n	80084f0 <__ssvfiscanf_r+0x6c>
 80084bc:	6863      	ldr	r3, [r4, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	dd0f      	ble.n	80084e2 <__ssvfiscanf_r+0x5e>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	5cba      	ldrb	r2, [r7, r2]
 80084c8:	0712      	lsls	r2, r2, #28
 80084ca:	d401      	bmi.n	80084d0 <__ssvfiscanf_r+0x4c>
 80084cc:	462a      	mov	r2, r5
 80084ce:	e7ec      	b.n	80084aa <__ssvfiscanf_r+0x26>
 80084d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80084d2:	3301      	adds	r3, #1
 80084d4:	3201      	adds	r2, #1
 80084d6:	9245      	str	r2, [sp, #276]	@ 0x114
 80084d8:	6862      	ldr	r2, [r4, #4]
 80084da:	6023      	str	r3, [r4, #0]
 80084dc:	3a01      	subs	r2, #1
 80084de:	6062      	str	r2, [r4, #4]
 80084e0:	e7ec      	b.n	80084bc <__ssvfiscanf_r+0x38>
 80084e2:	4621      	mov	r1, r4
 80084e4:	4630      	mov	r0, r6
 80084e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80084e8:	4798      	blx	r3
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d0e9      	beq.n	80084c2 <__ssvfiscanf_r+0x3e>
 80084ee:	e7ed      	b.n	80084cc <__ssvfiscanf_r+0x48>
 80084f0:	2b25      	cmp	r3, #37	@ 0x25
 80084f2:	d012      	beq.n	800851a <__ssvfiscanf_r+0x96>
 80084f4:	4699      	mov	r9, r3
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f340 8094 	ble.w	8008626 <__ssvfiscanf_r+0x1a2>
 80084fe:	6822      	ldr	r2, [r4, #0]
 8008500:	7813      	ldrb	r3, [r2, #0]
 8008502:	454b      	cmp	r3, r9
 8008504:	f040 812e 	bne.w	8008764 <__ssvfiscanf_r+0x2e0>
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	3201      	adds	r2, #1
 800850c:	3b01      	subs	r3, #1
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	9345      	str	r3, [sp, #276]	@ 0x114
 8008518:	e7d8      	b.n	80084cc <__ssvfiscanf_r+0x48>
 800851a:	9141      	str	r1, [sp, #260]	@ 0x104
 800851c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800851e:	7853      	ldrb	r3, [r2, #1]
 8008520:	2b2a      	cmp	r3, #42	@ 0x2a
 8008522:	bf04      	itt	eq
 8008524:	2310      	moveq	r3, #16
 8008526:	1c95      	addeq	r5, r2, #2
 8008528:	f04f 020a 	mov.w	r2, #10
 800852c:	bf08      	it	eq
 800852e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008530:	46a9      	mov	r9, r5
 8008532:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008536:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800853a:	2b09      	cmp	r3, #9
 800853c:	d91e      	bls.n	800857c <__ssvfiscanf_r+0xf8>
 800853e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800874c <__ssvfiscanf_r+0x2c8>
 8008542:	2203      	movs	r2, #3
 8008544:	4650      	mov	r0, sl
 8008546:	f7fd fb68 	bl	8005c1a <memchr>
 800854a:	b138      	cbz	r0, 800855c <__ssvfiscanf_r+0xd8>
 800854c:	2301      	movs	r3, #1
 800854e:	464d      	mov	r5, r9
 8008550:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008552:	eba0 000a 	sub.w	r0, r0, sl
 8008556:	4083      	lsls	r3, r0
 8008558:	4313      	orrs	r3, r2
 800855a:	9341      	str	r3, [sp, #260]	@ 0x104
 800855c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008560:	2b78      	cmp	r3, #120	@ 0x78
 8008562:	d806      	bhi.n	8008572 <__ssvfiscanf_r+0xee>
 8008564:	2b57      	cmp	r3, #87	@ 0x57
 8008566:	d810      	bhi.n	800858a <__ssvfiscanf_r+0x106>
 8008568:	2b25      	cmp	r3, #37	@ 0x25
 800856a:	d0c3      	beq.n	80084f4 <__ssvfiscanf_r+0x70>
 800856c:	d856      	bhi.n	800861c <__ssvfiscanf_r+0x198>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d064      	beq.n	800863c <__ssvfiscanf_r+0x1b8>
 8008572:	2303      	movs	r3, #3
 8008574:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008576:	230a      	movs	r3, #10
 8008578:	9342      	str	r3, [sp, #264]	@ 0x108
 800857a:	e077      	b.n	800866c <__ssvfiscanf_r+0x1e8>
 800857c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800857e:	464d      	mov	r5, r9
 8008580:	fb02 1103 	mla	r1, r2, r3, r1
 8008584:	3930      	subs	r1, #48	@ 0x30
 8008586:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008588:	e7d2      	b.n	8008530 <__ssvfiscanf_r+0xac>
 800858a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800858e:	2a20      	cmp	r2, #32
 8008590:	d8ef      	bhi.n	8008572 <__ssvfiscanf_r+0xee>
 8008592:	a101      	add	r1, pc, #4	@ (adr r1, 8008598 <__ssvfiscanf_r+0x114>)
 8008594:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008598:	0800864b 	.word	0x0800864b
 800859c:	08008573 	.word	0x08008573
 80085a0:	08008573 	.word	0x08008573
 80085a4:	080086a5 	.word	0x080086a5
 80085a8:	08008573 	.word	0x08008573
 80085ac:	08008573 	.word	0x08008573
 80085b0:	08008573 	.word	0x08008573
 80085b4:	08008573 	.word	0x08008573
 80085b8:	08008573 	.word	0x08008573
 80085bc:	08008573 	.word	0x08008573
 80085c0:	08008573 	.word	0x08008573
 80085c4:	080086bb 	.word	0x080086bb
 80085c8:	080086a1 	.word	0x080086a1
 80085cc:	08008623 	.word	0x08008623
 80085d0:	08008623 	.word	0x08008623
 80085d4:	08008623 	.word	0x08008623
 80085d8:	08008573 	.word	0x08008573
 80085dc:	0800865d 	.word	0x0800865d
 80085e0:	08008573 	.word	0x08008573
 80085e4:	08008573 	.word	0x08008573
 80085e8:	08008573 	.word	0x08008573
 80085ec:	08008573 	.word	0x08008573
 80085f0:	080086cb 	.word	0x080086cb
 80085f4:	08008665 	.word	0x08008665
 80085f8:	08008643 	.word	0x08008643
 80085fc:	08008573 	.word	0x08008573
 8008600:	08008573 	.word	0x08008573
 8008604:	080086c7 	.word	0x080086c7
 8008608:	08008573 	.word	0x08008573
 800860c:	080086a1 	.word	0x080086a1
 8008610:	08008573 	.word	0x08008573
 8008614:	08008573 	.word	0x08008573
 8008618:	0800864b 	.word	0x0800864b
 800861c:	3b45      	subs	r3, #69	@ 0x45
 800861e:	2b02      	cmp	r3, #2
 8008620:	d8a7      	bhi.n	8008572 <__ssvfiscanf_r+0xee>
 8008622:	2305      	movs	r3, #5
 8008624:	e021      	b.n	800866a <__ssvfiscanf_r+0x1e6>
 8008626:	4621      	mov	r1, r4
 8008628:	4630      	mov	r0, r6
 800862a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800862c:	4798      	blx	r3
 800862e:	2800      	cmp	r0, #0
 8008630:	f43f af65 	beq.w	80084fe <__ssvfiscanf_r+0x7a>
 8008634:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008636:	2800      	cmp	r0, #0
 8008638:	f040 808c 	bne.w	8008754 <__ssvfiscanf_r+0x2d0>
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	e08c      	b.n	800875c <__ssvfiscanf_r+0x2d8>
 8008642:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008644:	f042 0220 	orr.w	r2, r2, #32
 8008648:	9241      	str	r2, [sp, #260]	@ 0x104
 800864a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800864c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008650:	9241      	str	r2, [sp, #260]	@ 0x104
 8008652:	2210      	movs	r2, #16
 8008654:	2b6e      	cmp	r3, #110	@ 0x6e
 8008656:	9242      	str	r2, [sp, #264]	@ 0x108
 8008658:	d902      	bls.n	8008660 <__ssvfiscanf_r+0x1dc>
 800865a:	e005      	b.n	8008668 <__ssvfiscanf_r+0x1e4>
 800865c:	2300      	movs	r3, #0
 800865e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008660:	2303      	movs	r3, #3
 8008662:	e002      	b.n	800866a <__ssvfiscanf_r+0x1e6>
 8008664:	2308      	movs	r3, #8
 8008666:	9342      	str	r3, [sp, #264]	@ 0x108
 8008668:	2304      	movs	r3, #4
 800866a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800866c:	6863      	ldr	r3, [r4, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	dd39      	ble.n	80086e6 <__ssvfiscanf_r+0x262>
 8008672:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008674:	0659      	lsls	r1, r3, #25
 8008676:	d404      	bmi.n	8008682 <__ssvfiscanf_r+0x1fe>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	5cba      	ldrb	r2, [r7, r2]
 800867e:	0712      	lsls	r2, r2, #28
 8008680:	d438      	bmi.n	80086f4 <__ssvfiscanf_r+0x270>
 8008682:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008684:	2b02      	cmp	r3, #2
 8008686:	dc47      	bgt.n	8008718 <__ssvfiscanf_r+0x294>
 8008688:	466b      	mov	r3, sp
 800868a:	4622      	mov	r2, r4
 800868c:	4630      	mov	r0, r6
 800868e:	a941      	add	r1, sp, #260	@ 0x104
 8008690:	f000 f9aa 	bl	80089e8 <_scanf_chars>
 8008694:	2801      	cmp	r0, #1
 8008696:	d065      	beq.n	8008764 <__ssvfiscanf_r+0x2e0>
 8008698:	2802      	cmp	r0, #2
 800869a:	f47f af17 	bne.w	80084cc <__ssvfiscanf_r+0x48>
 800869e:	e7c9      	b.n	8008634 <__ssvfiscanf_r+0x1b0>
 80086a0:	220a      	movs	r2, #10
 80086a2:	e7d7      	b.n	8008654 <__ssvfiscanf_r+0x1d0>
 80086a4:	4629      	mov	r1, r5
 80086a6:	4640      	mov	r0, r8
 80086a8:	f000 fbf3 	bl	8008e92 <__sccl>
 80086ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086ae:	4605      	mov	r5, r0
 80086b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b4:	9341      	str	r3, [sp, #260]	@ 0x104
 80086b6:	2301      	movs	r3, #1
 80086b8:	e7d7      	b.n	800866a <__ssvfiscanf_r+0x1e6>
 80086ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c0:	9341      	str	r3, [sp, #260]	@ 0x104
 80086c2:	2300      	movs	r3, #0
 80086c4:	e7d1      	b.n	800866a <__ssvfiscanf_r+0x1e6>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e7cf      	b.n	800866a <__ssvfiscanf_r+0x1e6>
 80086ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80086cc:	06c3      	lsls	r3, r0, #27
 80086ce:	f53f aefd 	bmi.w	80084cc <__ssvfiscanf_r+0x48>
 80086d2:	9b00      	ldr	r3, [sp, #0]
 80086d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80086d6:	1d19      	adds	r1, r3, #4
 80086d8:	9100      	str	r1, [sp, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	07c0      	lsls	r0, r0, #31
 80086de:	bf4c      	ite	mi
 80086e0:	801a      	strhmi	r2, [r3, #0]
 80086e2:	601a      	strpl	r2, [r3, #0]
 80086e4:	e6f2      	b.n	80084cc <__ssvfiscanf_r+0x48>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4630      	mov	r0, r6
 80086ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80086ec:	4798      	blx	r3
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d0bf      	beq.n	8008672 <__ssvfiscanf_r+0x1ee>
 80086f2:	e79f      	b.n	8008634 <__ssvfiscanf_r+0x1b0>
 80086f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80086f6:	3201      	adds	r2, #1
 80086f8:	9245      	str	r2, [sp, #276]	@ 0x114
 80086fa:	6862      	ldr	r2, [r4, #4]
 80086fc:	3a01      	subs	r2, #1
 80086fe:	2a00      	cmp	r2, #0
 8008700:	6062      	str	r2, [r4, #4]
 8008702:	dd02      	ble.n	800870a <__ssvfiscanf_r+0x286>
 8008704:	3301      	adds	r3, #1
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	e7b6      	b.n	8008678 <__ssvfiscanf_r+0x1f4>
 800870a:	4621      	mov	r1, r4
 800870c:	4630      	mov	r0, r6
 800870e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008710:	4798      	blx	r3
 8008712:	2800      	cmp	r0, #0
 8008714:	d0b0      	beq.n	8008678 <__ssvfiscanf_r+0x1f4>
 8008716:	e78d      	b.n	8008634 <__ssvfiscanf_r+0x1b0>
 8008718:	2b04      	cmp	r3, #4
 800871a:	dc06      	bgt.n	800872a <__ssvfiscanf_r+0x2a6>
 800871c:	466b      	mov	r3, sp
 800871e:	4622      	mov	r2, r4
 8008720:	4630      	mov	r0, r6
 8008722:	a941      	add	r1, sp, #260	@ 0x104
 8008724:	f000 f9ba 	bl	8008a9c <_scanf_i>
 8008728:	e7b4      	b.n	8008694 <__ssvfiscanf_r+0x210>
 800872a:	4b09      	ldr	r3, [pc, #36]	@ (8008750 <__ssvfiscanf_r+0x2cc>)
 800872c:	2b00      	cmp	r3, #0
 800872e:	f43f aecd 	beq.w	80084cc <__ssvfiscanf_r+0x48>
 8008732:	466b      	mov	r3, sp
 8008734:	4622      	mov	r2, r4
 8008736:	4630      	mov	r0, r6
 8008738:	a941      	add	r1, sp, #260	@ 0x104
 800873a:	f7fc fd33 	bl	80051a4 <_scanf_float>
 800873e:	e7a9      	b.n	8008694 <__ssvfiscanf_r+0x210>
 8008740:	080083d5 	.word	0x080083d5
 8008744:	0800844b 	.word	0x0800844b
 8008748:	08009df9 	.word	0x08009df9
 800874c:	08009eff 	.word	0x08009eff
 8008750:	080051a5 	.word	0x080051a5
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	065b      	lsls	r3, r3, #25
 8008758:	f53f af70 	bmi.w	800863c <__ssvfiscanf_r+0x1b8>
 800875c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008764:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008766:	e7f9      	b.n	800875c <__ssvfiscanf_r+0x2d8>

08008768 <__sfputc_r>:
 8008768:	6893      	ldr	r3, [r2, #8]
 800876a:	b410      	push	{r4}
 800876c:	3b01      	subs	r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	6093      	str	r3, [r2, #8]
 8008772:	da07      	bge.n	8008784 <__sfputc_r+0x1c>
 8008774:	6994      	ldr	r4, [r2, #24]
 8008776:	42a3      	cmp	r3, r4
 8008778:	db01      	blt.n	800877e <__sfputc_r+0x16>
 800877a:	290a      	cmp	r1, #10
 800877c:	d102      	bne.n	8008784 <__sfputc_r+0x1c>
 800877e:	bc10      	pop	{r4}
 8008780:	f7fd b915 	b.w	80059ae <__swbuf_r>
 8008784:	6813      	ldr	r3, [r2, #0]
 8008786:	1c58      	adds	r0, r3, #1
 8008788:	6010      	str	r0, [r2, #0]
 800878a:	7019      	strb	r1, [r3, #0]
 800878c:	4608      	mov	r0, r1
 800878e:	bc10      	pop	{r4}
 8008790:	4770      	bx	lr

08008792 <__sfputs_r>:
 8008792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	4614      	mov	r4, r2
 800879a:	18d5      	adds	r5, r2, r3
 800879c:	42ac      	cmp	r4, r5
 800879e:	d101      	bne.n	80087a4 <__sfputs_r+0x12>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e007      	b.n	80087b4 <__sfputs_r+0x22>
 80087a4:	463a      	mov	r2, r7
 80087a6:	4630      	mov	r0, r6
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	f7ff ffdc 	bl	8008768 <__sfputc_r>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d1f3      	bne.n	800879c <__sfputs_r+0xa>
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087b8 <_vfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	460d      	mov	r5, r1
 80087be:	4614      	mov	r4, r2
 80087c0:	4698      	mov	r8, r3
 80087c2:	4606      	mov	r6, r0
 80087c4:	b09d      	sub	sp, #116	@ 0x74
 80087c6:	b118      	cbz	r0, 80087d0 <_vfiprintf_r+0x18>
 80087c8:	6a03      	ldr	r3, [r0, #32]
 80087ca:	b90b      	cbnz	r3, 80087d0 <_vfiprintf_r+0x18>
 80087cc:	f7fc ff86 	bl	80056dc <__sinit>
 80087d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087d2:	07d9      	lsls	r1, r3, #31
 80087d4:	d405      	bmi.n	80087e2 <_vfiprintf_r+0x2a>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	059a      	lsls	r2, r3, #22
 80087da:	d402      	bmi.n	80087e2 <_vfiprintf_r+0x2a>
 80087dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087de:	f7fd fa1a 	bl	8005c16 <__retarget_lock_acquire_recursive>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	071b      	lsls	r3, r3, #28
 80087e6:	d501      	bpl.n	80087ec <_vfiprintf_r+0x34>
 80087e8:	692b      	ldr	r3, [r5, #16]
 80087ea:	b99b      	cbnz	r3, 8008814 <_vfiprintf_r+0x5c>
 80087ec:	4629      	mov	r1, r5
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7fd f91c 	bl	8005a2c <__swsetup_r>
 80087f4:	b170      	cbz	r0, 8008814 <_vfiprintf_r+0x5c>
 80087f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087f8:	07dc      	lsls	r4, r3, #31
 80087fa:	d504      	bpl.n	8008806 <_vfiprintf_r+0x4e>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b01d      	add	sp, #116	@ 0x74
 8008802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008806:	89ab      	ldrh	r3, [r5, #12]
 8008808:	0598      	lsls	r0, r3, #22
 800880a:	d4f7      	bmi.n	80087fc <_vfiprintf_r+0x44>
 800880c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800880e:	f7fd fa03 	bl	8005c18 <__retarget_lock_release_recursive>
 8008812:	e7f3      	b.n	80087fc <_vfiprintf_r+0x44>
 8008814:	2300      	movs	r3, #0
 8008816:	9309      	str	r3, [sp, #36]	@ 0x24
 8008818:	2320      	movs	r3, #32
 800881a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800881e:	2330      	movs	r3, #48	@ 0x30
 8008820:	f04f 0901 	mov.w	r9, #1
 8008824:	f8cd 800c 	str.w	r8, [sp, #12]
 8008828:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80089d4 <_vfiprintf_r+0x21c>
 800882c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008830:	4623      	mov	r3, r4
 8008832:	469a      	mov	sl, r3
 8008834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008838:	b10a      	cbz	r2, 800883e <_vfiprintf_r+0x86>
 800883a:	2a25      	cmp	r2, #37	@ 0x25
 800883c:	d1f9      	bne.n	8008832 <_vfiprintf_r+0x7a>
 800883e:	ebba 0b04 	subs.w	fp, sl, r4
 8008842:	d00b      	beq.n	800885c <_vfiprintf_r+0xa4>
 8008844:	465b      	mov	r3, fp
 8008846:	4622      	mov	r2, r4
 8008848:	4629      	mov	r1, r5
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff ffa1 	bl	8008792 <__sfputs_r>
 8008850:	3001      	adds	r0, #1
 8008852:	f000 80a7 	beq.w	80089a4 <_vfiprintf_r+0x1ec>
 8008856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008858:	445a      	add	r2, fp
 800885a:	9209      	str	r2, [sp, #36]	@ 0x24
 800885c:	f89a 3000 	ldrb.w	r3, [sl]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 809f 	beq.w	80089a4 <_vfiprintf_r+0x1ec>
 8008866:	2300      	movs	r3, #0
 8008868:	f04f 32ff 	mov.w	r2, #4294967295
 800886c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008870:	f10a 0a01 	add.w	sl, sl, #1
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	9307      	str	r3, [sp, #28]
 8008878:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800887c:	931a      	str	r3, [sp, #104]	@ 0x68
 800887e:	4654      	mov	r4, sl
 8008880:	2205      	movs	r2, #5
 8008882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008886:	4853      	ldr	r0, [pc, #332]	@ (80089d4 <_vfiprintf_r+0x21c>)
 8008888:	f7fd f9c7 	bl	8005c1a <memchr>
 800888c:	9a04      	ldr	r2, [sp, #16]
 800888e:	b9d8      	cbnz	r0, 80088c8 <_vfiprintf_r+0x110>
 8008890:	06d1      	lsls	r1, r2, #27
 8008892:	bf44      	itt	mi
 8008894:	2320      	movmi	r3, #32
 8008896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800889a:	0713      	lsls	r3, r2, #28
 800889c:	bf44      	itt	mi
 800889e:	232b      	movmi	r3, #43	@ 0x2b
 80088a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a4:	f89a 3000 	ldrb.w	r3, [sl]
 80088a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088aa:	d015      	beq.n	80088d8 <_vfiprintf_r+0x120>
 80088ac:	4654      	mov	r4, sl
 80088ae:	2000      	movs	r0, #0
 80088b0:	f04f 0c0a 	mov.w	ip, #10
 80088b4:	9a07      	ldr	r2, [sp, #28]
 80088b6:	4621      	mov	r1, r4
 80088b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088bc:	3b30      	subs	r3, #48	@ 0x30
 80088be:	2b09      	cmp	r3, #9
 80088c0:	d94b      	bls.n	800895a <_vfiprintf_r+0x1a2>
 80088c2:	b1b0      	cbz	r0, 80088f2 <_vfiprintf_r+0x13a>
 80088c4:	9207      	str	r2, [sp, #28]
 80088c6:	e014      	b.n	80088f2 <_vfiprintf_r+0x13a>
 80088c8:	eba0 0308 	sub.w	r3, r0, r8
 80088cc:	fa09 f303 	lsl.w	r3, r9, r3
 80088d0:	4313      	orrs	r3, r2
 80088d2:	46a2      	mov	sl, r4
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	e7d2      	b.n	800887e <_vfiprintf_r+0xc6>
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	1d19      	adds	r1, r3, #4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	9103      	str	r1, [sp, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bfbb      	ittet	lt
 80088e4:	425b      	neglt	r3, r3
 80088e6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ea:	9307      	strge	r3, [sp, #28]
 80088ec:	9307      	strlt	r3, [sp, #28]
 80088ee:	bfb8      	it	lt
 80088f0:	9204      	strlt	r2, [sp, #16]
 80088f2:	7823      	ldrb	r3, [r4, #0]
 80088f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80088f6:	d10a      	bne.n	800890e <_vfiprintf_r+0x156>
 80088f8:	7863      	ldrb	r3, [r4, #1]
 80088fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80088fc:	d132      	bne.n	8008964 <_vfiprintf_r+0x1ac>
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	3402      	adds	r4, #2
 8008902:	1d1a      	adds	r2, r3, #4
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	9203      	str	r2, [sp, #12]
 8008908:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80089d8 <_vfiprintf_r+0x220>
 8008912:	2203      	movs	r2, #3
 8008914:	4650      	mov	r0, sl
 8008916:	7821      	ldrb	r1, [r4, #0]
 8008918:	f7fd f97f 	bl	8005c1a <memchr>
 800891c:	b138      	cbz	r0, 800892e <_vfiprintf_r+0x176>
 800891e:	2240      	movs	r2, #64	@ 0x40
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	eba0 000a 	sub.w	r0, r0, sl
 8008926:	4082      	lsls	r2, r0
 8008928:	4313      	orrs	r3, r2
 800892a:	3401      	adds	r4, #1
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008932:	2206      	movs	r2, #6
 8008934:	4829      	ldr	r0, [pc, #164]	@ (80089dc <_vfiprintf_r+0x224>)
 8008936:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800893a:	f7fd f96e 	bl	8005c1a <memchr>
 800893e:	2800      	cmp	r0, #0
 8008940:	d03f      	beq.n	80089c2 <_vfiprintf_r+0x20a>
 8008942:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <_vfiprintf_r+0x228>)
 8008944:	bb1b      	cbnz	r3, 800898e <_vfiprintf_r+0x1d6>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	3307      	adds	r3, #7
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	3308      	adds	r3, #8
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008954:	443b      	add	r3, r7
 8008956:	9309      	str	r3, [sp, #36]	@ 0x24
 8008958:	e76a      	b.n	8008830 <_vfiprintf_r+0x78>
 800895a:	460c      	mov	r4, r1
 800895c:	2001      	movs	r0, #1
 800895e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008962:	e7a8      	b.n	80088b6 <_vfiprintf_r+0xfe>
 8008964:	2300      	movs	r3, #0
 8008966:	f04f 0c0a 	mov.w	ip, #10
 800896a:	4619      	mov	r1, r3
 800896c:	3401      	adds	r4, #1
 800896e:	9305      	str	r3, [sp, #20]
 8008970:	4620      	mov	r0, r4
 8008972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008976:	3a30      	subs	r2, #48	@ 0x30
 8008978:	2a09      	cmp	r2, #9
 800897a:	d903      	bls.n	8008984 <_vfiprintf_r+0x1cc>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0c6      	beq.n	800890e <_vfiprintf_r+0x156>
 8008980:	9105      	str	r1, [sp, #20]
 8008982:	e7c4      	b.n	800890e <_vfiprintf_r+0x156>
 8008984:	4604      	mov	r4, r0
 8008986:	2301      	movs	r3, #1
 8008988:	fb0c 2101 	mla	r1, ip, r1, r2
 800898c:	e7f0      	b.n	8008970 <_vfiprintf_r+0x1b8>
 800898e:	ab03      	add	r3, sp, #12
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	462a      	mov	r2, r5
 8008994:	4630      	mov	r0, r6
 8008996:	4b13      	ldr	r3, [pc, #76]	@ (80089e4 <_vfiprintf_r+0x22c>)
 8008998:	a904      	add	r1, sp, #16
 800899a:	f7fc f845 	bl	8004a28 <_printf_float>
 800899e:	4607      	mov	r7, r0
 80089a0:	1c78      	adds	r0, r7, #1
 80089a2:	d1d6      	bne.n	8008952 <_vfiprintf_r+0x19a>
 80089a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089a6:	07d9      	lsls	r1, r3, #31
 80089a8:	d405      	bmi.n	80089b6 <_vfiprintf_r+0x1fe>
 80089aa:	89ab      	ldrh	r3, [r5, #12]
 80089ac:	059a      	lsls	r2, r3, #22
 80089ae:	d402      	bmi.n	80089b6 <_vfiprintf_r+0x1fe>
 80089b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089b2:	f7fd f931 	bl	8005c18 <__retarget_lock_release_recursive>
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	065b      	lsls	r3, r3, #25
 80089ba:	f53f af1f 	bmi.w	80087fc <_vfiprintf_r+0x44>
 80089be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c0:	e71e      	b.n	8008800 <_vfiprintf_r+0x48>
 80089c2:	ab03      	add	r3, sp, #12
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	462a      	mov	r2, r5
 80089c8:	4630      	mov	r0, r6
 80089ca:	4b06      	ldr	r3, [pc, #24]	@ (80089e4 <_vfiprintf_r+0x22c>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	f7fc fac9 	bl	8004f64 <_printf_i>
 80089d2:	e7e4      	b.n	800899e <_vfiprintf_r+0x1e6>
 80089d4:	08009ef9 	.word	0x08009ef9
 80089d8:	08009eff 	.word	0x08009eff
 80089dc:	08009f03 	.word	0x08009f03
 80089e0:	08004a29 	.word	0x08004a29
 80089e4:	08008793 	.word	0x08008793

080089e8 <_scanf_chars>:
 80089e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ec:	4615      	mov	r5, r2
 80089ee:	688a      	ldr	r2, [r1, #8]
 80089f0:	4680      	mov	r8, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b932      	cbnz	r2, 8008a04 <_scanf_chars+0x1c>
 80089f6:	698a      	ldr	r2, [r1, #24]
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	bf14      	ite	ne
 80089fc:	f04f 32ff 	movne.w	r2, #4294967295
 8008a00:	2201      	moveq	r2, #1
 8008a02:	608a      	str	r2, [r1, #8]
 8008a04:	2700      	movs	r7, #0
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008a98 <_scanf_chars+0xb0>
 8008a0c:	06d1      	lsls	r1, r2, #27
 8008a0e:	bf5f      	itttt	pl
 8008a10:	681a      	ldrpl	r2, [r3, #0]
 8008a12:	1d11      	addpl	r1, r2, #4
 8008a14:	6019      	strpl	r1, [r3, #0]
 8008a16:	6816      	ldrpl	r6, [r2, #0]
 8008a18:	69a0      	ldr	r0, [r4, #24]
 8008a1a:	b188      	cbz	r0, 8008a40 <_scanf_chars+0x58>
 8008a1c:	2801      	cmp	r0, #1
 8008a1e:	d107      	bne.n	8008a30 <_scanf_chars+0x48>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	6963      	ldr	r3, [r4, #20]
 8008a26:	5c9b      	ldrb	r3, [r3, r2]
 8008a28:	b953      	cbnz	r3, 8008a40 <_scanf_chars+0x58>
 8008a2a:	2f00      	cmp	r7, #0
 8008a2c:	d031      	beq.n	8008a92 <_scanf_chars+0xaa>
 8008a2e:	e022      	b.n	8008a76 <_scanf_chars+0x8e>
 8008a30:	2802      	cmp	r0, #2
 8008a32:	d120      	bne.n	8008a76 <_scanf_chars+0x8e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008a3c:	071b      	lsls	r3, r3, #28
 8008a3e:	d41a      	bmi.n	8008a76 <_scanf_chars+0x8e>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	3701      	adds	r7, #1
 8008a44:	06da      	lsls	r2, r3, #27
 8008a46:	bf5e      	ittt	pl
 8008a48:	682b      	ldrpl	r3, [r5, #0]
 8008a4a:	781b      	ldrbpl	r3, [r3, #0]
 8008a4c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008a50:	682a      	ldr	r2, [r5, #0]
 8008a52:	686b      	ldr	r3, [r5, #4]
 8008a54:	3201      	adds	r2, #1
 8008a56:	602a      	str	r2, [r5, #0]
 8008a58:	68a2      	ldr	r2, [r4, #8]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	3a01      	subs	r2, #1
 8008a5e:	606b      	str	r3, [r5, #4]
 8008a60:	60a2      	str	r2, [r4, #8]
 8008a62:	b142      	cbz	r2, 8008a76 <_scanf_chars+0x8e>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dcd7      	bgt.n	8008a18 <_scanf_chars+0x30>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a70:	4798      	blx	r3
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d0d0      	beq.n	8008a18 <_scanf_chars+0x30>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f013 0310 	ands.w	r3, r3, #16
 8008a7c:	d105      	bne.n	8008a8a <_scanf_chars+0xa2>
 8008a7e:	68e2      	ldr	r2, [r4, #12]
 8008a80:	3201      	adds	r2, #1
 8008a82:	60e2      	str	r2, [r4, #12]
 8008a84:	69a2      	ldr	r2, [r4, #24]
 8008a86:	b102      	cbz	r2, 8008a8a <_scanf_chars+0xa2>
 8008a88:	7033      	strb	r3, [r6, #0]
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	443b      	add	r3, r7
 8008a90:	6123      	str	r3, [r4, #16]
 8008a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a96:	bf00      	nop
 8008a98:	08009df9 	.word	0x08009df9

08008a9c <_scanf_i>:
 8008a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	4698      	mov	r8, r3
 8008aa4:	4b72      	ldr	r3, [pc, #456]	@ (8008c70 <_scanf_i+0x1d4>)
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	4682      	mov	sl, r0
 8008aaa:	4616      	mov	r6, r2
 8008aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ab0:	ab03      	add	r3, sp, #12
 8008ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8008c74 <_scanf_i+0x1d8>)
 8008ab8:	69a1      	ldr	r1, [r4, #24]
 8008aba:	4a6f      	ldr	r2, [pc, #444]	@ (8008c78 <_scanf_i+0x1dc>)
 8008abc:	4627      	mov	r7, r4
 8008abe:	2903      	cmp	r1, #3
 8008ac0:	bf08      	it	eq
 8008ac2:	461a      	moveq	r2, r3
 8008ac4:	68a3      	ldr	r3, [r4, #8]
 8008ac6:	9201      	str	r2, [sp, #4]
 8008ac8:	1e5a      	subs	r2, r3, #1
 8008aca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ace:	bf81      	itttt	hi
 8008ad0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008ad4:	eb03 0905 	addhi.w	r9, r3, r5
 8008ad8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008adc:	60a3      	strhi	r3, [r4, #8]
 8008ade:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008ae2:	bf98      	it	ls
 8008ae4:	f04f 0900 	movls.w	r9, #0
 8008ae8:	463d      	mov	r5, r7
 8008aea:	f04f 0b00 	mov.w	fp, #0
 8008aee:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	6831      	ldr	r1, [r6, #0]
 8008af6:	ab03      	add	r3, sp, #12
 8008af8:	2202      	movs	r2, #2
 8008afa:	7809      	ldrb	r1, [r1, #0]
 8008afc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008b00:	f7fd f88b 	bl	8005c1a <memchr>
 8008b04:	b328      	cbz	r0, 8008b52 <_scanf_i+0xb6>
 8008b06:	f1bb 0f01 	cmp.w	fp, #1
 8008b0a:	d159      	bne.n	8008bc0 <_scanf_i+0x124>
 8008b0c:	6862      	ldr	r2, [r4, #4]
 8008b0e:	b92a      	cbnz	r2, 8008b1c <_scanf_i+0x80>
 8008b10:	2108      	movs	r1, #8
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	6061      	str	r1, [r4, #4]
 8008b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b1a:	6022      	str	r2, [r4, #0]
 8008b1c:	6822      	ldr	r2, [r4, #0]
 8008b1e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008b22:	6022      	str	r2, [r4, #0]
 8008b24:	68a2      	ldr	r2, [r4, #8]
 8008b26:	1e51      	subs	r1, r2, #1
 8008b28:	60a1      	str	r1, [r4, #8]
 8008b2a:	b192      	cbz	r2, 8008b52 <_scanf_i+0xb6>
 8008b2c:	6832      	ldr	r2, [r6, #0]
 8008b2e:	1c51      	adds	r1, r2, #1
 8008b30:	6031      	str	r1, [r6, #0]
 8008b32:	7812      	ldrb	r2, [r2, #0]
 8008b34:	f805 2b01 	strb.w	r2, [r5], #1
 8008b38:	6872      	ldr	r2, [r6, #4]
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	2a00      	cmp	r2, #0
 8008b3e:	6072      	str	r2, [r6, #4]
 8008b40:	dc07      	bgt.n	8008b52 <_scanf_i+0xb6>
 8008b42:	4631      	mov	r1, r6
 8008b44:	4650      	mov	r0, sl
 8008b46:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008b4a:	4790      	blx	r2
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f040 8085 	bne.w	8008c5c <_scanf_i+0x1c0>
 8008b52:	f10b 0b01 	add.w	fp, fp, #1
 8008b56:	f1bb 0f03 	cmp.w	fp, #3
 8008b5a:	d1cb      	bne.n	8008af4 <_scanf_i+0x58>
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_scanf_i+0xc8>
 8008b60:	230a      	movs	r3, #10
 8008b62:	6063      	str	r3, [r4, #4]
 8008b64:	6863      	ldr	r3, [r4, #4]
 8008b66:	4945      	ldr	r1, [pc, #276]	@ (8008c7c <_scanf_i+0x1e0>)
 8008b68:	6960      	ldr	r0, [r4, #20]
 8008b6a:	1ac9      	subs	r1, r1, r3
 8008b6c:	f000 f991 	bl	8008e92 <__sccl>
 8008b70:	f04f 0b00 	mov.w	fp, #0
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d03d      	beq.n	8008bf8 <_scanf_i+0x15c>
 8008b7c:	6831      	ldr	r1, [r6, #0]
 8008b7e:	6960      	ldr	r0, [r4, #20]
 8008b80:	f891 c000 	ldrb.w	ip, [r1]
 8008b84:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d035      	beq.n	8008bf8 <_scanf_i+0x15c>
 8008b8c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008b90:	d124      	bne.n	8008bdc <_scanf_i+0x140>
 8008b92:	0510      	lsls	r0, r2, #20
 8008b94:	d522      	bpl.n	8008bdc <_scanf_i+0x140>
 8008b96:	f10b 0b01 	add.w	fp, fp, #1
 8008b9a:	f1b9 0f00 	cmp.w	r9, #0
 8008b9e:	d003      	beq.n	8008ba8 <_scanf_i+0x10c>
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ba6:	60a3      	str	r3, [r4, #8]
 8008ba8:	6873      	ldr	r3, [r6, #4]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	6073      	str	r3, [r6, #4]
 8008bb0:	dd1b      	ble.n	8008bea <_scanf_i+0x14e>
 8008bb2:	6833      	ldr	r3, [r6, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	6033      	str	r3, [r6, #0]
 8008bb8:	68a3      	ldr	r3, [r4, #8]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	60a3      	str	r3, [r4, #8]
 8008bbe:	e7d9      	b.n	8008b74 <_scanf_i+0xd8>
 8008bc0:	f1bb 0f02 	cmp.w	fp, #2
 8008bc4:	d1ae      	bne.n	8008b24 <_scanf_i+0x88>
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008bcc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008bd0:	d1bf      	bne.n	8008b52 <_scanf_i+0xb6>
 8008bd2:	2110      	movs	r1, #16
 8008bd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bd8:	6061      	str	r1, [r4, #4]
 8008bda:	e7a2      	b.n	8008b22 <_scanf_i+0x86>
 8008bdc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	780b      	ldrb	r3, [r1, #0]
 8008be4:	f805 3b01 	strb.w	r3, [r5], #1
 8008be8:	e7de      	b.n	8008ba8 <_scanf_i+0x10c>
 8008bea:	4631      	mov	r1, r6
 8008bec:	4650      	mov	r0, sl
 8008bee:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008bf2:	4798      	blx	r3
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d0df      	beq.n	8008bb8 <_scanf_i+0x11c>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	05d9      	lsls	r1, r3, #23
 8008bfc:	d50d      	bpl.n	8008c1a <_scanf_i+0x17e>
 8008bfe:	42bd      	cmp	r5, r7
 8008c00:	d909      	bls.n	8008c16 <_scanf_i+0x17a>
 8008c02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008c06:	4632      	mov	r2, r6
 8008c08:	4650      	mov	r0, sl
 8008c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c0e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008c12:	4798      	blx	r3
 8008c14:	464d      	mov	r5, r9
 8008c16:	42bd      	cmp	r5, r7
 8008c18:	d028      	beq.n	8008c6c <_scanf_i+0x1d0>
 8008c1a:	6822      	ldr	r2, [r4, #0]
 8008c1c:	f012 0210 	ands.w	r2, r2, #16
 8008c20:	d113      	bne.n	8008c4a <_scanf_i+0x1ae>
 8008c22:	702a      	strb	r2, [r5, #0]
 8008c24:	4639      	mov	r1, r7
 8008c26:	6863      	ldr	r3, [r4, #4]
 8008c28:	4650      	mov	r0, sl
 8008c2a:	9e01      	ldr	r6, [sp, #4]
 8008c2c:	47b0      	blx	r6
 8008c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	1d1a      	adds	r2, r3, #4
 8008c36:	f8c8 2000 	str.w	r2, [r8]
 8008c3a:	f011 0f20 	tst.w	r1, #32
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	d00f      	beq.n	8008c62 <_scanf_i+0x1c6>
 8008c42:	6018      	str	r0, [r3, #0]
 8008c44:	68e3      	ldr	r3, [r4, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60e3      	str	r3, [r4, #12]
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	6923      	ldr	r3, [r4, #16]
 8008c4e:	1bed      	subs	r5, r5, r7
 8008c50:	445d      	add	r5, fp
 8008c52:	442b      	add	r3, r5
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	b007      	add	sp, #28
 8008c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	f04f 0b00 	mov.w	fp, #0
 8008c60:	e7ca      	b.n	8008bf8 <_scanf_i+0x15c>
 8008c62:	07ca      	lsls	r2, r1, #31
 8008c64:	bf4c      	ite	mi
 8008c66:	8018      	strhmi	r0, [r3, #0]
 8008c68:	6018      	strpl	r0, [r3, #0]
 8008c6a:	e7eb      	b.n	8008c44 <_scanf_i+0x1a8>
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	e7f2      	b.n	8008c56 <_scanf_i+0x1ba>
 8008c70:	08009b0c 	.word	0x08009b0c
 8008c74:	08008121 	.word	0x08008121
 8008c78:	08009869 	.word	0x08009869
 8008c7c:	08009f1a 	.word	0x08009f1a

08008c80 <__sflush_r>:
 8008c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	0716      	lsls	r6, r2, #28
 8008c88:	4605      	mov	r5, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	d454      	bmi.n	8008d38 <__sflush_r+0xb8>
 8008c8e:	684b      	ldr	r3, [r1, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dc02      	bgt.n	8008c9a <__sflush_r+0x1a>
 8008c94:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dd48      	ble.n	8008d2c <__sflush_r+0xac>
 8008c9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c9c:	2e00      	cmp	r6, #0
 8008c9e:	d045      	beq.n	8008d2c <__sflush_r+0xac>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ca6:	682f      	ldr	r7, [r5, #0]
 8008ca8:	6a21      	ldr	r1, [r4, #32]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	d030      	beq.n	8008d10 <__sflush_r+0x90>
 8008cae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	0759      	lsls	r1, r3, #29
 8008cb4:	d505      	bpl.n	8008cc2 <__sflush_r+0x42>
 8008cb6:	6863      	ldr	r3, [r4, #4]
 8008cb8:	1ad2      	subs	r2, r2, r3
 8008cba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cbc:	b10b      	cbz	r3, 8008cc2 <__sflush_r+0x42>
 8008cbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cc0:	1ad2      	subs	r2, r2, r3
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cc8:	6a21      	ldr	r1, [r4, #32]
 8008cca:	47b0      	blx	r6
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	d106      	bne.n	8008ce0 <__sflush_r+0x60>
 8008cd2:	6829      	ldr	r1, [r5, #0]
 8008cd4:	291d      	cmp	r1, #29
 8008cd6:	d82b      	bhi.n	8008d30 <__sflush_r+0xb0>
 8008cd8:	4a28      	ldr	r2, [pc, #160]	@ (8008d7c <__sflush_r+0xfc>)
 8008cda:	410a      	asrs	r2, r1
 8008cdc:	07d6      	lsls	r6, r2, #31
 8008cde:	d427      	bmi.n	8008d30 <__sflush_r+0xb0>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	6062      	str	r2, [r4, #4]
 8008ce4:	6922      	ldr	r2, [r4, #16]
 8008ce6:	04d9      	lsls	r1, r3, #19
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	d504      	bpl.n	8008cf6 <__sflush_r+0x76>
 8008cec:	1c42      	adds	r2, r0, #1
 8008cee:	d101      	bne.n	8008cf4 <__sflush_r+0x74>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b903      	cbnz	r3, 8008cf6 <__sflush_r+0x76>
 8008cf4:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cf6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cf8:	602f      	str	r7, [r5, #0]
 8008cfa:	b1b9      	cbz	r1, 8008d2c <__sflush_r+0xac>
 8008cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d002      	beq.n	8008d0a <__sflush_r+0x8a>
 8008d04:	4628      	mov	r0, r5
 8008d06:	f7fd fdeb 	bl	80068e0 <_free_r>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d0e:	e00d      	b.n	8008d2c <__sflush_r+0xac>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b0      	blx	r6
 8008d16:	4602      	mov	r2, r0
 8008d18:	1c50      	adds	r0, r2, #1
 8008d1a:	d1c9      	bne.n	8008cb0 <__sflush_r+0x30>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0c6      	beq.n	8008cb0 <__sflush_r+0x30>
 8008d22:	2b1d      	cmp	r3, #29
 8008d24:	d001      	beq.n	8008d2a <__sflush_r+0xaa>
 8008d26:	2b16      	cmp	r3, #22
 8008d28:	d11d      	bne.n	8008d66 <__sflush_r+0xe6>
 8008d2a:	602f      	str	r7, [r5, #0]
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e021      	b.n	8008d74 <__sflush_r+0xf4>
 8008d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d34:	b21b      	sxth	r3, r3
 8008d36:	e01a      	b.n	8008d6e <__sflush_r+0xee>
 8008d38:	690f      	ldr	r7, [r1, #16]
 8008d3a:	2f00      	cmp	r7, #0
 8008d3c:	d0f6      	beq.n	8008d2c <__sflush_r+0xac>
 8008d3e:	0793      	lsls	r3, r2, #30
 8008d40:	bf18      	it	ne
 8008d42:	2300      	movne	r3, #0
 8008d44:	680e      	ldr	r6, [r1, #0]
 8008d46:	bf08      	it	eq
 8008d48:	694b      	ldreq	r3, [r1, #20]
 8008d4a:	1bf6      	subs	r6, r6, r7
 8008d4c:	600f      	str	r7, [r1, #0]
 8008d4e:	608b      	str	r3, [r1, #8]
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	ddeb      	ble.n	8008d2c <__sflush_r+0xac>
 8008d54:	4633      	mov	r3, r6
 8008d56:	463a      	mov	r2, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	6a21      	ldr	r1, [r4, #32]
 8008d5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008d60:	47e0      	blx	ip
 8008d62:	2800      	cmp	r0, #0
 8008d64:	dc07      	bgt.n	8008d76 <__sflush_r+0xf6>
 8008d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d76:	4407      	add	r7, r0
 8008d78:	1a36      	subs	r6, r6, r0
 8008d7a:	e7e9      	b.n	8008d50 <__sflush_r+0xd0>
 8008d7c:	dfbffffe 	.word	0xdfbffffe

08008d80 <_fflush_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	4605      	mov	r5, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b913      	cbnz	r3, 8008d90 <_fflush_r+0x10>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	b118      	cbz	r0, 8008d9a <_fflush_r+0x1a>
 8008d92:	6a03      	ldr	r3, [r0, #32]
 8008d94:	b90b      	cbnz	r3, 8008d9a <_fflush_r+0x1a>
 8008d96:	f7fc fca1 	bl	80056dc <__sinit>
 8008d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0f3      	beq.n	8008d8a <_fflush_r+0xa>
 8008da2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008da4:	07d0      	lsls	r0, r2, #31
 8008da6:	d404      	bmi.n	8008db2 <_fflush_r+0x32>
 8008da8:	0599      	lsls	r1, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_fflush_r+0x32>
 8008dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dae:	f7fc ff32 	bl	8005c16 <__retarget_lock_acquire_recursive>
 8008db2:	4628      	mov	r0, r5
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7ff ff63 	bl	8008c80 <__sflush_r>
 8008dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	07da      	lsls	r2, r3, #31
 8008dc0:	d4e4      	bmi.n	8008d8c <_fflush_r+0xc>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	059b      	lsls	r3, r3, #22
 8008dc6:	d4e1      	bmi.n	8008d8c <_fflush_r+0xc>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dca:	f7fc ff25 	bl	8005c18 <__retarget_lock_release_recursive>
 8008dce:	e7dd      	b.n	8008d8c <_fflush_r+0xc>

08008dd0 <__swhatbuf_r>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd8:	4615      	mov	r5, r2
 8008dda:	2900      	cmp	r1, #0
 8008ddc:	461e      	mov	r6, r3
 8008dde:	b096      	sub	sp, #88	@ 0x58
 8008de0:	da0c      	bge.n	8008dfc <__swhatbuf_r+0x2c>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	2100      	movs	r1, #0
 8008de6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008dea:	bf14      	ite	ne
 8008dec:	2340      	movne	r3, #64	@ 0x40
 8008dee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008df2:	2000      	movs	r0, #0
 8008df4:	6031      	str	r1, [r6, #0]
 8008df6:	602b      	str	r3, [r5, #0]
 8008df8:	b016      	add	sp, #88	@ 0x58
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	466a      	mov	r2, sp
 8008dfe:	f000 f8d3 	bl	8008fa8 <_fstat_r>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	dbed      	blt.n	8008de2 <__swhatbuf_r+0x12>
 8008e06:	9901      	ldr	r1, [sp, #4]
 8008e08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e10:	4259      	negs	r1, r3
 8008e12:	4159      	adcs	r1, r3
 8008e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e18:	e7eb      	b.n	8008df2 <__swhatbuf_r+0x22>

08008e1a <__smakebuf_r>:
 8008e1a:	898b      	ldrh	r3, [r1, #12]
 8008e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e1e:	079d      	lsls	r5, r3, #30
 8008e20:	4606      	mov	r6, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	d507      	bpl.n	8008e36 <__smakebuf_r+0x1c>
 8008e26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	6163      	str	r3, [r4, #20]
 8008e32:	b003      	add	sp, #12
 8008e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e36:	466a      	mov	r2, sp
 8008e38:	ab01      	add	r3, sp, #4
 8008e3a:	f7ff ffc9 	bl	8008dd0 <__swhatbuf_r>
 8008e3e:	9f00      	ldr	r7, [sp, #0]
 8008e40:	4605      	mov	r5, r0
 8008e42:	4639      	mov	r1, r7
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7fd fdbd 	bl	80069c4 <_malloc_r>
 8008e4a:	b948      	cbnz	r0, 8008e60 <__smakebuf_r+0x46>
 8008e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e50:	059a      	lsls	r2, r3, #22
 8008e52:	d4ee      	bmi.n	8008e32 <__smakebuf_r+0x18>
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	e7e2      	b.n	8008e26 <__smakebuf_r+0xc>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	6020      	str	r0, [r4, #0]
 8008e70:	b15b      	cbz	r3, 8008e8a <__smakebuf_r+0x70>
 8008e72:	4630      	mov	r0, r6
 8008e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e78:	f000 f8a8 	bl	8008fcc <_isatty_r>
 8008e7c:	b128      	cbz	r0, 8008e8a <__smakebuf_r+0x70>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f023 0303 	bic.w	r3, r3, #3
 8008e84:	f043 0301 	orr.w	r3, r3, #1
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	431d      	orrs	r5, r3
 8008e8e:	81a5      	strh	r5, [r4, #12]
 8008e90:	e7cf      	b.n	8008e32 <__smakebuf_r+0x18>

08008e92 <__sccl>:
 8008e92:	b570      	push	{r4, r5, r6, lr}
 8008e94:	780b      	ldrb	r3, [r1, #0]
 8008e96:	4604      	mov	r4, r0
 8008e98:	2b5e      	cmp	r3, #94	@ 0x5e
 8008e9a:	bf0b      	itete	eq
 8008e9c:	784b      	ldrbeq	r3, [r1, #1]
 8008e9e:	1c4a      	addne	r2, r1, #1
 8008ea0:	1c8a      	addeq	r2, r1, #2
 8008ea2:	2100      	movne	r1, #0
 8008ea4:	bf08      	it	eq
 8008ea6:	2101      	moveq	r1, #1
 8008ea8:	3801      	subs	r0, #1
 8008eaa:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008eae:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008eb2:	42a8      	cmp	r0, r5
 8008eb4:	d1fb      	bne.n	8008eae <__sccl+0x1c>
 8008eb6:	b90b      	cbnz	r3, 8008ebc <__sccl+0x2a>
 8008eb8:	1e50      	subs	r0, r2, #1
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	f081 0101 	eor.w	r1, r1, #1
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	54e1      	strb	r1, [r4, r3]
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008eca:	2d2d      	cmp	r5, #45	@ 0x2d
 8008ecc:	d005      	beq.n	8008eda <__sccl+0x48>
 8008ece:	2d5d      	cmp	r5, #93	@ 0x5d
 8008ed0:	d016      	beq.n	8008f00 <__sccl+0x6e>
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	d0f1      	beq.n	8008eba <__sccl+0x28>
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	e7f2      	b.n	8008ec0 <__sccl+0x2e>
 8008eda:	7846      	ldrb	r6, [r0, #1]
 8008edc:	2e5d      	cmp	r6, #93	@ 0x5d
 8008ede:	d0fa      	beq.n	8008ed6 <__sccl+0x44>
 8008ee0:	42b3      	cmp	r3, r6
 8008ee2:	dcf8      	bgt.n	8008ed6 <__sccl+0x44>
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	3002      	adds	r0, #2
 8008ee8:	3201      	adds	r2, #1
 8008eea:	4296      	cmp	r6, r2
 8008eec:	54a1      	strb	r1, [r4, r2]
 8008eee:	dcfb      	bgt.n	8008ee8 <__sccl+0x56>
 8008ef0:	1af2      	subs	r2, r6, r3
 8008ef2:	3a01      	subs	r2, #1
 8008ef4:	42b3      	cmp	r3, r6
 8008ef6:	bfa8      	it	ge
 8008ef8:	2200      	movge	r2, #0
 8008efa:	1c5d      	adds	r5, r3, #1
 8008efc:	18ab      	adds	r3, r5, r2
 8008efe:	e7e1      	b.n	8008ec4 <__sccl+0x32>
 8008f00:	4610      	mov	r0, r2
 8008f02:	e7da      	b.n	8008eba <__sccl+0x28>

08008f04 <__submore>:
 8008f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	460c      	mov	r4, r1
 8008f0a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008f0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f10:	4299      	cmp	r1, r3
 8008f12:	d11b      	bne.n	8008f4c <__submore+0x48>
 8008f14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008f18:	f7fd fd54 	bl	80069c4 <_malloc_r>
 8008f1c:	b918      	cbnz	r0, 8008f26 <__submore+0x22>
 8008f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f2a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008f2c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008f30:	6360      	str	r0, [r4, #52]	@ 0x34
 8008f32:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008f36:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008f3a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008f3e:	7043      	strb	r3, [r0, #1]
 8008f40:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008f44:	7003      	strb	r3, [r0, #0]
 8008f46:	6020      	str	r0, [r4, #0]
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e7ea      	b.n	8008f22 <__submore+0x1e>
 8008f4c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008f4e:	0077      	lsls	r7, r6, #1
 8008f50:	463a      	mov	r2, r7
 8008f52:	f000 fbec 	bl	800972e <_realloc_r>
 8008f56:	4605      	mov	r5, r0
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d0e0      	beq.n	8008f1e <__submore+0x1a>
 8008f5c:	eb00 0806 	add.w	r8, r0, r6
 8008f60:	4601      	mov	r1, r0
 8008f62:	4632      	mov	r2, r6
 8008f64:	4640      	mov	r0, r8
 8008f66:	f000 f851 	bl	800900c <memcpy>
 8008f6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008f6e:	f8c4 8000 	str.w	r8, [r4]
 8008f72:	e7e9      	b.n	8008f48 <__submore+0x44>

08008f74 <memmove>:
 8008f74:	4288      	cmp	r0, r1
 8008f76:	b510      	push	{r4, lr}
 8008f78:	eb01 0402 	add.w	r4, r1, r2
 8008f7c:	d902      	bls.n	8008f84 <memmove+0x10>
 8008f7e:	4284      	cmp	r4, r0
 8008f80:	4623      	mov	r3, r4
 8008f82:	d807      	bhi.n	8008f94 <memmove+0x20>
 8008f84:	1e43      	subs	r3, r0, #1
 8008f86:	42a1      	cmp	r1, r4
 8008f88:	d008      	beq.n	8008f9c <memmove+0x28>
 8008f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f92:	e7f8      	b.n	8008f86 <memmove+0x12>
 8008f94:	4601      	mov	r1, r0
 8008f96:	4402      	add	r2, r0
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	d100      	bne.n	8008f9e <memmove+0x2a>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fa6:	e7f7      	b.n	8008f98 <memmove+0x24>

08008fa8 <_fstat_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	2300      	movs	r3, #0
 8008fac:	4d06      	ldr	r5, [pc, #24]	@ (8008fc8 <_fstat_r+0x20>)
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	f7f9 f9eb 	bl	8002390 <_fstat>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	d102      	bne.n	8008fc4 <_fstat_r+0x1c>
 8008fbe:	682b      	ldr	r3, [r5, #0]
 8008fc0:	b103      	cbz	r3, 8008fc4 <_fstat_r+0x1c>
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	bd38      	pop	{r3, r4, r5, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20000610 	.word	0x20000610

08008fcc <_isatty_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4d05      	ldr	r5, [pc, #20]	@ (8008fe8 <_isatty_r+0x1c>)
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	602b      	str	r3, [r5, #0]
 8008fd8:	f7f9 f9e9 	bl	80023ae <_isatty>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_isatty_r+0x1a>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_isatty_r+0x1a>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000610 	.word	0x20000610

08008fec <_sbrk_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4d05      	ldr	r5, [pc, #20]	@ (8009008 <_sbrk_r+0x1c>)
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	602b      	str	r3, [r5, #0]
 8008ff8:	f7f9 f9f0 	bl	80023dc <_sbrk>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d102      	bne.n	8009006 <_sbrk_r+0x1a>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	b103      	cbz	r3, 8009006 <_sbrk_r+0x1a>
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	20000610 	.word	0x20000610

0800900c <memcpy>:
 800900c:	440a      	add	r2, r1
 800900e:	4291      	cmp	r1, r2
 8009010:	f100 33ff 	add.w	r3, r0, #4294967295
 8009014:	d100      	bne.n	8009018 <memcpy+0xc>
 8009016:	4770      	bx	lr
 8009018:	b510      	push	{r4, lr}
 800901a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800901e:	4291      	cmp	r1, r2
 8009020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009024:	d1f9      	bne.n	800901a <memcpy+0xe>
 8009026:	bd10      	pop	{r4, pc}

08009028 <nan>:
 8009028:	2000      	movs	r0, #0
 800902a:	4901      	ldr	r1, [pc, #4]	@ (8009030 <nan+0x8>)
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	7ff80000 	.word	0x7ff80000

08009034 <__assert_func>:
 8009034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009036:	4614      	mov	r4, r2
 8009038:	461a      	mov	r2, r3
 800903a:	4b09      	ldr	r3, [pc, #36]	@ (8009060 <__assert_func+0x2c>)
 800903c:	4605      	mov	r5, r0
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68d8      	ldr	r0, [r3, #12]
 8009042:	b954      	cbnz	r4, 800905a <__assert_func+0x26>
 8009044:	4b07      	ldr	r3, [pc, #28]	@ (8009064 <__assert_func+0x30>)
 8009046:	461c      	mov	r4, r3
 8009048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800904c:	9100      	str	r1, [sp, #0]
 800904e:	462b      	mov	r3, r5
 8009050:	4905      	ldr	r1, [pc, #20]	@ (8009068 <__assert_func+0x34>)
 8009052:	f000 fc19 	bl	8009888 <fiprintf>
 8009056:	f000 fc29 	bl	80098ac <abort>
 800905a:	4b04      	ldr	r3, [pc, #16]	@ (800906c <__assert_func+0x38>)
 800905c:	e7f4      	b.n	8009048 <__assert_func+0x14>
 800905e:	bf00      	nop
 8009060:	20000030 	.word	0x20000030
 8009064:	08009f68 	.word	0x08009f68
 8009068:	08009f3a 	.word	0x08009f3a
 800906c:	08009f2d 	.word	0x08009f2d

08009070 <_calloc_r>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	fba1 5402 	umull	r5, r4, r1, r2
 8009076:	b93c      	cbnz	r4, 8009088 <_calloc_r+0x18>
 8009078:	4629      	mov	r1, r5
 800907a:	f7fd fca3 	bl	80069c4 <_malloc_r>
 800907e:	4606      	mov	r6, r0
 8009080:	b928      	cbnz	r0, 800908e <_calloc_r+0x1e>
 8009082:	2600      	movs	r6, #0
 8009084:	4630      	mov	r0, r6
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	220c      	movs	r2, #12
 800908a:	6002      	str	r2, [r0, #0]
 800908c:	e7f9      	b.n	8009082 <_calloc_r+0x12>
 800908e:	462a      	mov	r2, r5
 8009090:	4621      	mov	r1, r4
 8009092:	f7fc fd21 	bl	8005ad8 <memset>
 8009096:	e7f5      	b.n	8009084 <_calloc_r+0x14>

08009098 <rshift>:
 8009098:	6903      	ldr	r3, [r0, #16]
 800909a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800909e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80090a2:	f100 0414 	add.w	r4, r0, #20
 80090a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80090aa:	dd46      	ble.n	800913a <rshift+0xa2>
 80090ac:	f011 011f 	ands.w	r1, r1, #31
 80090b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80090b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80090b8:	d10c      	bne.n	80090d4 <rshift+0x3c>
 80090ba:	4629      	mov	r1, r5
 80090bc:	f100 0710 	add.w	r7, r0, #16
 80090c0:	42b1      	cmp	r1, r6
 80090c2:	d335      	bcc.n	8009130 <rshift+0x98>
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	1eea      	subs	r2, r5, #3
 80090ca:	4296      	cmp	r6, r2
 80090cc:	bf38      	it	cc
 80090ce:	2300      	movcc	r3, #0
 80090d0:	4423      	add	r3, r4
 80090d2:	e015      	b.n	8009100 <rshift+0x68>
 80090d4:	46a1      	mov	r9, r4
 80090d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090da:	f1c1 0820 	rsb	r8, r1, #32
 80090de:	40cf      	lsrs	r7, r1
 80090e0:	f105 0e04 	add.w	lr, r5, #4
 80090e4:	4576      	cmp	r6, lr
 80090e6:	46f4      	mov	ip, lr
 80090e8:	d816      	bhi.n	8009118 <rshift+0x80>
 80090ea:	1a9a      	subs	r2, r3, r2
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	3a04      	subs	r2, #4
 80090f0:	3501      	adds	r5, #1
 80090f2:	42ae      	cmp	r6, r5
 80090f4:	bf38      	it	cc
 80090f6:	2200      	movcc	r2, #0
 80090f8:	18a3      	adds	r3, r4, r2
 80090fa:	50a7      	str	r7, [r4, r2]
 80090fc:	b107      	cbz	r7, 8009100 <rshift+0x68>
 80090fe:	3304      	adds	r3, #4
 8009100:	42a3      	cmp	r3, r4
 8009102:	eba3 0204 	sub.w	r2, r3, r4
 8009106:	bf08      	it	eq
 8009108:	2300      	moveq	r3, #0
 800910a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800910e:	6102      	str	r2, [r0, #16]
 8009110:	bf08      	it	eq
 8009112:	6143      	streq	r3, [r0, #20]
 8009114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009118:	f8dc c000 	ldr.w	ip, [ip]
 800911c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009120:	ea4c 0707 	orr.w	r7, ip, r7
 8009124:	f849 7b04 	str.w	r7, [r9], #4
 8009128:	f85e 7b04 	ldr.w	r7, [lr], #4
 800912c:	40cf      	lsrs	r7, r1
 800912e:	e7d9      	b.n	80090e4 <rshift+0x4c>
 8009130:	f851 cb04 	ldr.w	ip, [r1], #4
 8009134:	f847 cf04 	str.w	ip, [r7, #4]!
 8009138:	e7c2      	b.n	80090c0 <rshift+0x28>
 800913a:	4623      	mov	r3, r4
 800913c:	e7e0      	b.n	8009100 <rshift+0x68>

0800913e <__hexdig_fun>:
 800913e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009142:	2b09      	cmp	r3, #9
 8009144:	d802      	bhi.n	800914c <__hexdig_fun+0xe>
 8009146:	3820      	subs	r0, #32
 8009148:	b2c0      	uxtb	r0, r0
 800914a:	4770      	bx	lr
 800914c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009150:	2b05      	cmp	r3, #5
 8009152:	d801      	bhi.n	8009158 <__hexdig_fun+0x1a>
 8009154:	3847      	subs	r0, #71	@ 0x47
 8009156:	e7f7      	b.n	8009148 <__hexdig_fun+0xa>
 8009158:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800915c:	2b05      	cmp	r3, #5
 800915e:	d801      	bhi.n	8009164 <__hexdig_fun+0x26>
 8009160:	3827      	subs	r0, #39	@ 0x27
 8009162:	e7f1      	b.n	8009148 <__hexdig_fun+0xa>
 8009164:	2000      	movs	r0, #0
 8009166:	4770      	bx	lr

08009168 <__gethex>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	468a      	mov	sl, r1
 800916e:	4690      	mov	r8, r2
 8009170:	b085      	sub	sp, #20
 8009172:	9302      	str	r3, [sp, #8]
 8009174:	680b      	ldr	r3, [r1, #0]
 8009176:	9001      	str	r0, [sp, #4]
 8009178:	1c9c      	adds	r4, r3, #2
 800917a:	46a1      	mov	r9, r4
 800917c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009180:	2830      	cmp	r0, #48	@ 0x30
 8009182:	d0fa      	beq.n	800917a <__gethex+0x12>
 8009184:	eba9 0303 	sub.w	r3, r9, r3
 8009188:	f1a3 0b02 	sub.w	fp, r3, #2
 800918c:	f7ff ffd7 	bl	800913e <__hexdig_fun>
 8009190:	4605      	mov	r5, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	d168      	bne.n	8009268 <__gethex+0x100>
 8009196:	2201      	movs	r2, #1
 8009198:	4648      	mov	r0, r9
 800919a:	499f      	ldr	r1, [pc, #636]	@ (8009418 <__gethex+0x2b0>)
 800919c:	f7fc fcb3 	bl	8005b06 <strncmp>
 80091a0:	4607      	mov	r7, r0
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d167      	bne.n	8009276 <__gethex+0x10e>
 80091a6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80091aa:	4626      	mov	r6, r4
 80091ac:	f7ff ffc7 	bl	800913e <__hexdig_fun>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d062      	beq.n	800927a <__gethex+0x112>
 80091b4:	4623      	mov	r3, r4
 80091b6:	7818      	ldrb	r0, [r3, #0]
 80091b8:	4699      	mov	r9, r3
 80091ba:	2830      	cmp	r0, #48	@ 0x30
 80091bc:	f103 0301 	add.w	r3, r3, #1
 80091c0:	d0f9      	beq.n	80091b6 <__gethex+0x4e>
 80091c2:	f7ff ffbc 	bl	800913e <__hexdig_fun>
 80091c6:	fab0 f580 	clz	r5, r0
 80091ca:	f04f 0b01 	mov.w	fp, #1
 80091ce:	096d      	lsrs	r5, r5, #5
 80091d0:	464a      	mov	r2, r9
 80091d2:	4616      	mov	r6, r2
 80091d4:	7830      	ldrb	r0, [r6, #0]
 80091d6:	3201      	adds	r2, #1
 80091d8:	f7ff ffb1 	bl	800913e <__hexdig_fun>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d1f8      	bne.n	80091d2 <__gethex+0x6a>
 80091e0:	2201      	movs	r2, #1
 80091e2:	4630      	mov	r0, r6
 80091e4:	498c      	ldr	r1, [pc, #560]	@ (8009418 <__gethex+0x2b0>)
 80091e6:	f7fc fc8e 	bl	8005b06 <strncmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d13f      	bne.n	800926e <__gethex+0x106>
 80091ee:	b944      	cbnz	r4, 8009202 <__gethex+0x9a>
 80091f0:	1c74      	adds	r4, r6, #1
 80091f2:	4622      	mov	r2, r4
 80091f4:	4616      	mov	r6, r2
 80091f6:	7830      	ldrb	r0, [r6, #0]
 80091f8:	3201      	adds	r2, #1
 80091fa:	f7ff ffa0 	bl	800913e <__hexdig_fun>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d1f8      	bne.n	80091f4 <__gethex+0x8c>
 8009202:	1ba4      	subs	r4, r4, r6
 8009204:	00a7      	lsls	r7, r4, #2
 8009206:	7833      	ldrb	r3, [r6, #0]
 8009208:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800920c:	2b50      	cmp	r3, #80	@ 0x50
 800920e:	d13e      	bne.n	800928e <__gethex+0x126>
 8009210:	7873      	ldrb	r3, [r6, #1]
 8009212:	2b2b      	cmp	r3, #43	@ 0x2b
 8009214:	d033      	beq.n	800927e <__gethex+0x116>
 8009216:	2b2d      	cmp	r3, #45	@ 0x2d
 8009218:	d034      	beq.n	8009284 <__gethex+0x11c>
 800921a:	2400      	movs	r4, #0
 800921c:	1c71      	adds	r1, r6, #1
 800921e:	7808      	ldrb	r0, [r1, #0]
 8009220:	f7ff ff8d 	bl	800913e <__hexdig_fun>
 8009224:	1e43      	subs	r3, r0, #1
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b18      	cmp	r3, #24
 800922a:	d830      	bhi.n	800928e <__gethex+0x126>
 800922c:	f1a0 0210 	sub.w	r2, r0, #16
 8009230:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009234:	f7ff ff83 	bl	800913e <__hexdig_fun>
 8009238:	f100 3cff 	add.w	ip, r0, #4294967295
 800923c:	fa5f fc8c 	uxtb.w	ip, ip
 8009240:	f1bc 0f18 	cmp.w	ip, #24
 8009244:	f04f 030a 	mov.w	r3, #10
 8009248:	d91e      	bls.n	8009288 <__gethex+0x120>
 800924a:	b104      	cbz	r4, 800924e <__gethex+0xe6>
 800924c:	4252      	negs	r2, r2
 800924e:	4417      	add	r7, r2
 8009250:	f8ca 1000 	str.w	r1, [sl]
 8009254:	b1ed      	cbz	r5, 8009292 <__gethex+0x12a>
 8009256:	f1bb 0f00 	cmp.w	fp, #0
 800925a:	bf0c      	ite	eq
 800925c:	2506      	moveq	r5, #6
 800925e:	2500      	movne	r5, #0
 8009260:	4628      	mov	r0, r5
 8009262:	b005      	add	sp, #20
 8009264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009268:	2500      	movs	r5, #0
 800926a:	462c      	mov	r4, r5
 800926c:	e7b0      	b.n	80091d0 <__gethex+0x68>
 800926e:	2c00      	cmp	r4, #0
 8009270:	d1c7      	bne.n	8009202 <__gethex+0x9a>
 8009272:	4627      	mov	r7, r4
 8009274:	e7c7      	b.n	8009206 <__gethex+0x9e>
 8009276:	464e      	mov	r6, r9
 8009278:	462f      	mov	r7, r5
 800927a:	2501      	movs	r5, #1
 800927c:	e7c3      	b.n	8009206 <__gethex+0x9e>
 800927e:	2400      	movs	r4, #0
 8009280:	1cb1      	adds	r1, r6, #2
 8009282:	e7cc      	b.n	800921e <__gethex+0xb6>
 8009284:	2401      	movs	r4, #1
 8009286:	e7fb      	b.n	8009280 <__gethex+0x118>
 8009288:	fb03 0002 	mla	r0, r3, r2, r0
 800928c:	e7ce      	b.n	800922c <__gethex+0xc4>
 800928e:	4631      	mov	r1, r6
 8009290:	e7de      	b.n	8009250 <__gethex+0xe8>
 8009292:	4629      	mov	r1, r5
 8009294:	eba6 0309 	sub.w	r3, r6, r9
 8009298:	3b01      	subs	r3, #1
 800929a:	2b07      	cmp	r3, #7
 800929c:	dc0a      	bgt.n	80092b4 <__gethex+0x14c>
 800929e:	9801      	ldr	r0, [sp, #4]
 80092a0:	f7fd fc1c 	bl	8006adc <_Balloc>
 80092a4:	4604      	mov	r4, r0
 80092a6:	b940      	cbnz	r0, 80092ba <__gethex+0x152>
 80092a8:	4602      	mov	r2, r0
 80092aa:	21e4      	movs	r1, #228	@ 0xe4
 80092ac:	4b5b      	ldr	r3, [pc, #364]	@ (800941c <__gethex+0x2b4>)
 80092ae:	485c      	ldr	r0, [pc, #368]	@ (8009420 <__gethex+0x2b8>)
 80092b0:	f7ff fec0 	bl	8009034 <__assert_func>
 80092b4:	3101      	adds	r1, #1
 80092b6:	105b      	asrs	r3, r3, #1
 80092b8:	e7ef      	b.n	800929a <__gethex+0x132>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f100 0a14 	add.w	sl, r0, #20
 80092c0:	4655      	mov	r5, sl
 80092c2:	469b      	mov	fp, r3
 80092c4:	45b1      	cmp	r9, r6
 80092c6:	d337      	bcc.n	8009338 <__gethex+0x1d0>
 80092c8:	f845 bb04 	str.w	fp, [r5], #4
 80092cc:	eba5 050a 	sub.w	r5, r5, sl
 80092d0:	10ad      	asrs	r5, r5, #2
 80092d2:	6125      	str	r5, [r4, #16]
 80092d4:	4658      	mov	r0, fp
 80092d6:	f7fd fcf3 	bl	8006cc0 <__hi0bits>
 80092da:	016d      	lsls	r5, r5, #5
 80092dc:	f8d8 6000 	ldr.w	r6, [r8]
 80092e0:	1a2d      	subs	r5, r5, r0
 80092e2:	42b5      	cmp	r5, r6
 80092e4:	dd54      	ble.n	8009390 <__gethex+0x228>
 80092e6:	1bad      	subs	r5, r5, r6
 80092e8:	4629      	mov	r1, r5
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fe f87b 	bl	80073e6 <__any_on>
 80092f0:	4681      	mov	r9, r0
 80092f2:	b178      	cbz	r0, 8009314 <__gethex+0x1ac>
 80092f4:	f04f 0901 	mov.w	r9, #1
 80092f8:	1e6b      	subs	r3, r5, #1
 80092fa:	1159      	asrs	r1, r3, #5
 80092fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009300:	f003 021f 	and.w	r2, r3, #31
 8009304:	fa09 f202 	lsl.w	r2, r9, r2
 8009308:	420a      	tst	r2, r1
 800930a:	d003      	beq.n	8009314 <__gethex+0x1ac>
 800930c:	454b      	cmp	r3, r9
 800930e:	dc36      	bgt.n	800937e <__gethex+0x216>
 8009310:	f04f 0902 	mov.w	r9, #2
 8009314:	4629      	mov	r1, r5
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff febe 	bl	8009098 <rshift>
 800931c:	442f      	add	r7, r5
 800931e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009322:	42bb      	cmp	r3, r7
 8009324:	da42      	bge.n	80093ac <__gethex+0x244>
 8009326:	4621      	mov	r1, r4
 8009328:	9801      	ldr	r0, [sp, #4]
 800932a:	f7fd fc17 	bl	8006b5c <_Bfree>
 800932e:	2300      	movs	r3, #0
 8009330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009332:	25a3      	movs	r5, #163	@ 0xa3
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	e793      	b.n	8009260 <__gethex+0xf8>
 8009338:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800933c:	2a2e      	cmp	r2, #46	@ 0x2e
 800933e:	d012      	beq.n	8009366 <__gethex+0x1fe>
 8009340:	2b20      	cmp	r3, #32
 8009342:	d104      	bne.n	800934e <__gethex+0x1e6>
 8009344:	f845 bb04 	str.w	fp, [r5], #4
 8009348:	f04f 0b00 	mov.w	fp, #0
 800934c:	465b      	mov	r3, fp
 800934e:	7830      	ldrb	r0, [r6, #0]
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	f7ff fef4 	bl	800913e <__hexdig_fun>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	f000 000f 	and.w	r0, r0, #15
 800935c:	4098      	lsls	r0, r3
 800935e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009362:	3304      	adds	r3, #4
 8009364:	e7ae      	b.n	80092c4 <__gethex+0x15c>
 8009366:	45b1      	cmp	r9, r6
 8009368:	d8ea      	bhi.n	8009340 <__gethex+0x1d8>
 800936a:	2201      	movs	r2, #1
 800936c:	4630      	mov	r0, r6
 800936e:	492a      	ldr	r1, [pc, #168]	@ (8009418 <__gethex+0x2b0>)
 8009370:	9303      	str	r3, [sp, #12]
 8009372:	f7fc fbc8 	bl	8005b06 <strncmp>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	2800      	cmp	r0, #0
 800937a:	d1e1      	bne.n	8009340 <__gethex+0x1d8>
 800937c:	e7a2      	b.n	80092c4 <__gethex+0x15c>
 800937e:	4620      	mov	r0, r4
 8009380:	1ea9      	subs	r1, r5, #2
 8009382:	f7fe f830 	bl	80073e6 <__any_on>
 8009386:	2800      	cmp	r0, #0
 8009388:	d0c2      	beq.n	8009310 <__gethex+0x1a8>
 800938a:	f04f 0903 	mov.w	r9, #3
 800938e:	e7c1      	b.n	8009314 <__gethex+0x1ac>
 8009390:	da09      	bge.n	80093a6 <__gethex+0x23e>
 8009392:	1b75      	subs	r5, r6, r5
 8009394:	4621      	mov	r1, r4
 8009396:	462a      	mov	r2, r5
 8009398:	9801      	ldr	r0, [sp, #4]
 800939a:	f7fd fdf5 	bl	8006f88 <__lshift>
 800939e:	4604      	mov	r4, r0
 80093a0:	1b7f      	subs	r7, r7, r5
 80093a2:	f100 0a14 	add.w	sl, r0, #20
 80093a6:	f04f 0900 	mov.w	r9, #0
 80093aa:	e7b8      	b.n	800931e <__gethex+0x1b6>
 80093ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80093b0:	42bd      	cmp	r5, r7
 80093b2:	dd6f      	ble.n	8009494 <__gethex+0x32c>
 80093b4:	1bed      	subs	r5, r5, r7
 80093b6:	42ae      	cmp	r6, r5
 80093b8:	dc34      	bgt.n	8009424 <__gethex+0x2bc>
 80093ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d022      	beq.n	8009408 <__gethex+0x2a0>
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d024      	beq.n	8009410 <__gethex+0x2a8>
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d115      	bne.n	80093f6 <__gethex+0x28e>
 80093ca:	42ae      	cmp	r6, r5
 80093cc:	d113      	bne.n	80093f6 <__gethex+0x28e>
 80093ce:	2e01      	cmp	r6, #1
 80093d0:	d10b      	bne.n	80093ea <__gethex+0x282>
 80093d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093d6:	9a02      	ldr	r2, [sp, #8]
 80093d8:	2562      	movs	r5, #98	@ 0x62
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	2301      	movs	r3, #1
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	f8ca 3000 	str.w	r3, [sl]
 80093e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093e6:	601c      	str	r4, [r3, #0]
 80093e8:	e73a      	b.n	8009260 <__gethex+0xf8>
 80093ea:	4620      	mov	r0, r4
 80093ec:	1e71      	subs	r1, r6, #1
 80093ee:	f7fd fffa 	bl	80073e6 <__any_on>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d1ed      	bne.n	80093d2 <__gethex+0x26a>
 80093f6:	4621      	mov	r1, r4
 80093f8:	9801      	ldr	r0, [sp, #4]
 80093fa:	f7fd fbaf 	bl	8006b5c <_Bfree>
 80093fe:	2300      	movs	r3, #0
 8009400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009402:	2550      	movs	r5, #80	@ 0x50
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	e72b      	b.n	8009260 <__gethex+0xf8>
 8009408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1f3      	bne.n	80093f6 <__gethex+0x28e>
 800940e:	e7e0      	b.n	80093d2 <__gethex+0x26a>
 8009410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1dd      	bne.n	80093d2 <__gethex+0x26a>
 8009416:	e7ee      	b.n	80093f6 <__gethex+0x28e>
 8009418:	08009da0 	.word	0x08009da0
 800941c:	08009c35 	.word	0x08009c35
 8009420:	08009f69 	.word	0x08009f69
 8009424:	1e6f      	subs	r7, r5, #1
 8009426:	f1b9 0f00 	cmp.w	r9, #0
 800942a:	d130      	bne.n	800948e <__gethex+0x326>
 800942c:	b127      	cbz	r7, 8009438 <__gethex+0x2d0>
 800942e:	4639      	mov	r1, r7
 8009430:	4620      	mov	r0, r4
 8009432:	f7fd ffd8 	bl	80073e6 <__any_on>
 8009436:	4681      	mov	r9, r0
 8009438:	2301      	movs	r3, #1
 800943a:	4629      	mov	r1, r5
 800943c:	1b76      	subs	r6, r6, r5
 800943e:	2502      	movs	r5, #2
 8009440:	117a      	asrs	r2, r7, #5
 8009442:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009446:	f007 071f 	and.w	r7, r7, #31
 800944a:	40bb      	lsls	r3, r7
 800944c:	4213      	tst	r3, r2
 800944e:	4620      	mov	r0, r4
 8009450:	bf18      	it	ne
 8009452:	f049 0902 	orrne.w	r9, r9, #2
 8009456:	f7ff fe1f 	bl	8009098 <rshift>
 800945a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800945e:	f1b9 0f00 	cmp.w	r9, #0
 8009462:	d047      	beq.n	80094f4 <__gethex+0x38c>
 8009464:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d015      	beq.n	8009498 <__gethex+0x330>
 800946c:	2b03      	cmp	r3, #3
 800946e:	d017      	beq.n	80094a0 <__gethex+0x338>
 8009470:	2b01      	cmp	r3, #1
 8009472:	d109      	bne.n	8009488 <__gethex+0x320>
 8009474:	f019 0f02 	tst.w	r9, #2
 8009478:	d006      	beq.n	8009488 <__gethex+0x320>
 800947a:	f8da 3000 	ldr.w	r3, [sl]
 800947e:	ea49 0903 	orr.w	r9, r9, r3
 8009482:	f019 0f01 	tst.w	r9, #1
 8009486:	d10e      	bne.n	80094a6 <__gethex+0x33e>
 8009488:	f045 0510 	orr.w	r5, r5, #16
 800948c:	e032      	b.n	80094f4 <__gethex+0x38c>
 800948e:	f04f 0901 	mov.w	r9, #1
 8009492:	e7d1      	b.n	8009438 <__gethex+0x2d0>
 8009494:	2501      	movs	r5, #1
 8009496:	e7e2      	b.n	800945e <__gethex+0x2f6>
 8009498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949a:	f1c3 0301 	rsb	r3, r3, #1
 800949e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f0      	beq.n	8009488 <__gethex+0x320>
 80094a6:	f04f 0c00 	mov.w	ip, #0
 80094aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094ae:	f104 0314 	add.w	r3, r4, #20
 80094b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094c4:	d01b      	beq.n	80094fe <__gethex+0x396>
 80094c6:	3201      	adds	r2, #1
 80094c8:	6002      	str	r2, [r0, #0]
 80094ca:	2d02      	cmp	r5, #2
 80094cc:	f104 0314 	add.w	r3, r4, #20
 80094d0:	d13c      	bne.n	800954c <__gethex+0x3e4>
 80094d2:	f8d8 2000 	ldr.w	r2, [r8]
 80094d6:	3a01      	subs	r2, #1
 80094d8:	42b2      	cmp	r2, r6
 80094da:	d109      	bne.n	80094f0 <__gethex+0x388>
 80094dc:	2201      	movs	r2, #1
 80094de:	1171      	asrs	r1, r6, #5
 80094e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094e4:	f006 061f 	and.w	r6, r6, #31
 80094e8:	fa02 f606 	lsl.w	r6, r2, r6
 80094ec:	421e      	tst	r6, r3
 80094ee:	d13a      	bne.n	8009566 <__gethex+0x3fe>
 80094f0:	f045 0520 	orr.w	r5, r5, #32
 80094f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f6:	601c      	str	r4, [r3, #0]
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	601f      	str	r7, [r3, #0]
 80094fc:	e6b0      	b.n	8009260 <__gethex+0xf8>
 80094fe:	4299      	cmp	r1, r3
 8009500:	f843 cc04 	str.w	ip, [r3, #-4]
 8009504:	d8d9      	bhi.n	80094ba <__gethex+0x352>
 8009506:	68a3      	ldr	r3, [r4, #8]
 8009508:	459b      	cmp	fp, r3
 800950a:	db17      	blt.n	800953c <__gethex+0x3d4>
 800950c:	6861      	ldr	r1, [r4, #4]
 800950e:	9801      	ldr	r0, [sp, #4]
 8009510:	3101      	adds	r1, #1
 8009512:	f7fd fae3 	bl	8006adc <_Balloc>
 8009516:	4681      	mov	r9, r0
 8009518:	b918      	cbnz	r0, 8009522 <__gethex+0x3ba>
 800951a:	4602      	mov	r2, r0
 800951c:	2184      	movs	r1, #132	@ 0x84
 800951e:	4b19      	ldr	r3, [pc, #100]	@ (8009584 <__gethex+0x41c>)
 8009520:	e6c5      	b.n	80092ae <__gethex+0x146>
 8009522:	6922      	ldr	r2, [r4, #16]
 8009524:	f104 010c 	add.w	r1, r4, #12
 8009528:	3202      	adds	r2, #2
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	300c      	adds	r0, #12
 800952e:	f7ff fd6d 	bl	800900c <memcpy>
 8009532:	4621      	mov	r1, r4
 8009534:	9801      	ldr	r0, [sp, #4]
 8009536:	f7fd fb11 	bl	8006b5c <_Bfree>
 800953a:	464c      	mov	r4, r9
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	6122      	str	r2, [r4, #16]
 8009542:	2201      	movs	r2, #1
 8009544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009548:	615a      	str	r2, [r3, #20]
 800954a:	e7be      	b.n	80094ca <__gethex+0x362>
 800954c:	6922      	ldr	r2, [r4, #16]
 800954e:	455a      	cmp	r2, fp
 8009550:	dd0b      	ble.n	800956a <__gethex+0x402>
 8009552:	2101      	movs	r1, #1
 8009554:	4620      	mov	r0, r4
 8009556:	f7ff fd9f 	bl	8009098 <rshift>
 800955a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800955e:	3701      	adds	r7, #1
 8009560:	42bb      	cmp	r3, r7
 8009562:	f6ff aee0 	blt.w	8009326 <__gethex+0x1be>
 8009566:	2501      	movs	r5, #1
 8009568:	e7c2      	b.n	80094f0 <__gethex+0x388>
 800956a:	f016 061f 	ands.w	r6, r6, #31
 800956e:	d0fa      	beq.n	8009566 <__gethex+0x3fe>
 8009570:	4453      	add	r3, sl
 8009572:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009576:	f7fd fba3 	bl	8006cc0 <__hi0bits>
 800957a:	f1c6 0620 	rsb	r6, r6, #32
 800957e:	42b0      	cmp	r0, r6
 8009580:	dbe7      	blt.n	8009552 <__gethex+0x3ea>
 8009582:	e7f0      	b.n	8009566 <__gethex+0x3fe>
 8009584:	08009c35 	.word	0x08009c35

08009588 <L_shift>:
 8009588:	f1c2 0208 	rsb	r2, r2, #8
 800958c:	0092      	lsls	r2, r2, #2
 800958e:	b570      	push	{r4, r5, r6, lr}
 8009590:	f1c2 0620 	rsb	r6, r2, #32
 8009594:	6843      	ldr	r3, [r0, #4]
 8009596:	6804      	ldr	r4, [r0, #0]
 8009598:	fa03 f506 	lsl.w	r5, r3, r6
 800959c:	432c      	orrs	r4, r5
 800959e:	40d3      	lsrs	r3, r2
 80095a0:	6004      	str	r4, [r0, #0]
 80095a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80095a6:	4288      	cmp	r0, r1
 80095a8:	d3f4      	bcc.n	8009594 <L_shift+0xc>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}

080095ac <__match>:
 80095ac:	b530      	push	{r4, r5, lr}
 80095ae:	6803      	ldr	r3, [r0, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095b6:	b914      	cbnz	r4, 80095be <__match+0x12>
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	2001      	movs	r0, #1
 80095bc:	bd30      	pop	{r4, r5, pc}
 80095be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80095c6:	2d19      	cmp	r5, #25
 80095c8:	bf98      	it	ls
 80095ca:	3220      	addls	r2, #32
 80095cc:	42a2      	cmp	r2, r4
 80095ce:	d0f0      	beq.n	80095b2 <__match+0x6>
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7f3      	b.n	80095bc <__match+0x10>

080095d4 <__hexnan>:
 80095d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	2500      	movs	r5, #0
 80095da:	680b      	ldr	r3, [r1, #0]
 80095dc:	4682      	mov	sl, r0
 80095de:	115e      	asrs	r6, r3, #5
 80095e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095e4:	f013 031f 	ands.w	r3, r3, #31
 80095e8:	bf18      	it	ne
 80095ea:	3604      	addne	r6, #4
 80095ec:	1f37      	subs	r7, r6, #4
 80095ee:	4690      	mov	r8, r2
 80095f0:	46b9      	mov	r9, r7
 80095f2:	463c      	mov	r4, r7
 80095f4:	46ab      	mov	fp, r5
 80095f6:	b087      	sub	sp, #28
 80095f8:	6801      	ldr	r1, [r0, #0]
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8009600:	9502      	str	r5, [sp, #8]
 8009602:	784a      	ldrb	r2, [r1, #1]
 8009604:	1c4b      	adds	r3, r1, #1
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	b342      	cbz	r2, 800965c <__hexnan+0x88>
 800960a:	4610      	mov	r0, r2
 800960c:	9105      	str	r1, [sp, #20]
 800960e:	9204      	str	r2, [sp, #16]
 8009610:	f7ff fd95 	bl	800913e <__hexdig_fun>
 8009614:	2800      	cmp	r0, #0
 8009616:	d151      	bne.n	80096bc <__hexnan+0xe8>
 8009618:	9a04      	ldr	r2, [sp, #16]
 800961a:	9905      	ldr	r1, [sp, #20]
 800961c:	2a20      	cmp	r2, #32
 800961e:	d818      	bhi.n	8009652 <__hexnan+0x7e>
 8009620:	9b02      	ldr	r3, [sp, #8]
 8009622:	459b      	cmp	fp, r3
 8009624:	dd13      	ble.n	800964e <__hexnan+0x7a>
 8009626:	454c      	cmp	r4, r9
 8009628:	d206      	bcs.n	8009638 <__hexnan+0x64>
 800962a:	2d07      	cmp	r5, #7
 800962c:	dc04      	bgt.n	8009638 <__hexnan+0x64>
 800962e:	462a      	mov	r2, r5
 8009630:	4649      	mov	r1, r9
 8009632:	4620      	mov	r0, r4
 8009634:	f7ff ffa8 	bl	8009588 <L_shift>
 8009638:	4544      	cmp	r4, r8
 800963a:	d952      	bls.n	80096e2 <__hexnan+0x10e>
 800963c:	2300      	movs	r3, #0
 800963e:	f1a4 0904 	sub.w	r9, r4, #4
 8009642:	f844 3c04 	str.w	r3, [r4, #-4]
 8009646:	461d      	mov	r5, r3
 8009648:	464c      	mov	r4, r9
 800964a:	f8cd b008 	str.w	fp, [sp, #8]
 800964e:	9903      	ldr	r1, [sp, #12]
 8009650:	e7d7      	b.n	8009602 <__hexnan+0x2e>
 8009652:	2a29      	cmp	r2, #41	@ 0x29
 8009654:	d157      	bne.n	8009706 <__hexnan+0x132>
 8009656:	3102      	adds	r1, #2
 8009658:	f8ca 1000 	str.w	r1, [sl]
 800965c:	f1bb 0f00 	cmp.w	fp, #0
 8009660:	d051      	beq.n	8009706 <__hexnan+0x132>
 8009662:	454c      	cmp	r4, r9
 8009664:	d206      	bcs.n	8009674 <__hexnan+0xa0>
 8009666:	2d07      	cmp	r5, #7
 8009668:	dc04      	bgt.n	8009674 <__hexnan+0xa0>
 800966a:	462a      	mov	r2, r5
 800966c:	4649      	mov	r1, r9
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff ff8a 	bl	8009588 <L_shift>
 8009674:	4544      	cmp	r4, r8
 8009676:	d936      	bls.n	80096e6 <__hexnan+0x112>
 8009678:	4623      	mov	r3, r4
 800967a:	f1a8 0204 	sub.w	r2, r8, #4
 800967e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009682:	429f      	cmp	r7, r3
 8009684:	f842 1f04 	str.w	r1, [r2, #4]!
 8009688:	d2f9      	bcs.n	800967e <__hexnan+0xaa>
 800968a:	1b3b      	subs	r3, r7, r4
 800968c:	f023 0303 	bic.w	r3, r3, #3
 8009690:	3304      	adds	r3, #4
 8009692:	3401      	adds	r4, #1
 8009694:	3e03      	subs	r6, #3
 8009696:	42b4      	cmp	r4, r6
 8009698:	bf88      	it	hi
 800969a:	2304      	movhi	r3, #4
 800969c:	2200      	movs	r2, #0
 800969e:	4443      	add	r3, r8
 80096a0:	f843 2b04 	str.w	r2, [r3], #4
 80096a4:	429f      	cmp	r7, r3
 80096a6:	d2fb      	bcs.n	80096a0 <__hexnan+0xcc>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	b91b      	cbnz	r3, 80096b4 <__hexnan+0xe0>
 80096ac:	4547      	cmp	r7, r8
 80096ae:	d128      	bne.n	8009702 <__hexnan+0x12e>
 80096b0:	2301      	movs	r3, #1
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	2005      	movs	r0, #5
 80096b6:	b007      	add	sp, #28
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096bc:	3501      	adds	r5, #1
 80096be:	2d08      	cmp	r5, #8
 80096c0:	f10b 0b01 	add.w	fp, fp, #1
 80096c4:	dd06      	ble.n	80096d4 <__hexnan+0x100>
 80096c6:	4544      	cmp	r4, r8
 80096c8:	d9c1      	bls.n	800964e <__hexnan+0x7a>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2501      	movs	r5, #1
 80096ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80096d2:	3c04      	subs	r4, #4
 80096d4:	6822      	ldr	r2, [r4, #0]
 80096d6:	f000 000f 	and.w	r0, r0, #15
 80096da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80096de:	6020      	str	r0, [r4, #0]
 80096e0:	e7b5      	b.n	800964e <__hexnan+0x7a>
 80096e2:	2508      	movs	r5, #8
 80096e4:	e7b3      	b.n	800964e <__hexnan+0x7a>
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0dd      	beq.n	80096a8 <__hexnan+0xd4>
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	f1c3 0320 	rsb	r3, r3, #32
 80096f4:	40da      	lsrs	r2, r3
 80096f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80096fa:	4013      	ands	r3, r2
 80096fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8009700:	e7d2      	b.n	80096a8 <__hexnan+0xd4>
 8009702:	3f04      	subs	r7, #4
 8009704:	e7d0      	b.n	80096a8 <__hexnan+0xd4>
 8009706:	2004      	movs	r0, #4
 8009708:	e7d5      	b.n	80096b6 <__hexnan+0xe2>

0800970a <__ascii_mbtowc>:
 800970a:	b082      	sub	sp, #8
 800970c:	b901      	cbnz	r1, 8009710 <__ascii_mbtowc+0x6>
 800970e:	a901      	add	r1, sp, #4
 8009710:	b142      	cbz	r2, 8009724 <__ascii_mbtowc+0x1a>
 8009712:	b14b      	cbz	r3, 8009728 <__ascii_mbtowc+0x1e>
 8009714:	7813      	ldrb	r3, [r2, #0]
 8009716:	600b      	str	r3, [r1, #0]
 8009718:	7812      	ldrb	r2, [r2, #0]
 800971a:	1e10      	subs	r0, r2, #0
 800971c:	bf18      	it	ne
 800971e:	2001      	movne	r0, #1
 8009720:	b002      	add	sp, #8
 8009722:	4770      	bx	lr
 8009724:	4610      	mov	r0, r2
 8009726:	e7fb      	b.n	8009720 <__ascii_mbtowc+0x16>
 8009728:	f06f 0001 	mvn.w	r0, #1
 800972c:	e7f8      	b.n	8009720 <__ascii_mbtowc+0x16>

0800972e <_realloc_r>:
 800972e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	4680      	mov	r8, r0
 8009734:	4615      	mov	r5, r2
 8009736:	460c      	mov	r4, r1
 8009738:	b921      	cbnz	r1, 8009744 <_realloc_r+0x16>
 800973a:	4611      	mov	r1, r2
 800973c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009740:	f7fd b940 	b.w	80069c4 <_malloc_r>
 8009744:	b92a      	cbnz	r2, 8009752 <_realloc_r+0x24>
 8009746:	f7fd f8cb 	bl	80068e0 <_free_r>
 800974a:	2400      	movs	r4, #0
 800974c:	4620      	mov	r0, r4
 800974e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009752:	f000 f8b2 	bl	80098ba <_malloc_usable_size_r>
 8009756:	4285      	cmp	r5, r0
 8009758:	4606      	mov	r6, r0
 800975a:	d802      	bhi.n	8009762 <_realloc_r+0x34>
 800975c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009760:	d8f4      	bhi.n	800974c <_realloc_r+0x1e>
 8009762:	4629      	mov	r1, r5
 8009764:	4640      	mov	r0, r8
 8009766:	f7fd f92d 	bl	80069c4 <_malloc_r>
 800976a:	4607      	mov	r7, r0
 800976c:	2800      	cmp	r0, #0
 800976e:	d0ec      	beq.n	800974a <_realloc_r+0x1c>
 8009770:	42b5      	cmp	r5, r6
 8009772:	462a      	mov	r2, r5
 8009774:	4621      	mov	r1, r4
 8009776:	bf28      	it	cs
 8009778:	4632      	movcs	r2, r6
 800977a:	f7ff fc47 	bl	800900c <memcpy>
 800977e:	4621      	mov	r1, r4
 8009780:	4640      	mov	r0, r8
 8009782:	f7fd f8ad 	bl	80068e0 <_free_r>
 8009786:	463c      	mov	r4, r7
 8009788:	e7e0      	b.n	800974c <_realloc_r+0x1e>
	...

0800978c <_strtoul_l.constprop.0>:
 800978c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009790:	4686      	mov	lr, r0
 8009792:	460d      	mov	r5, r1
 8009794:	4e33      	ldr	r6, [pc, #204]	@ (8009864 <_strtoul_l.constprop.0+0xd8>)
 8009796:	4628      	mov	r0, r5
 8009798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800979c:	5d37      	ldrb	r7, [r6, r4]
 800979e:	f017 0708 	ands.w	r7, r7, #8
 80097a2:	d1f8      	bne.n	8009796 <_strtoul_l.constprop.0+0xa>
 80097a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80097a6:	d12f      	bne.n	8009808 <_strtoul_l.constprop.0+0x7c>
 80097a8:	2701      	movs	r7, #1
 80097aa:	782c      	ldrb	r4, [r5, #0]
 80097ac:	1c85      	adds	r5, r0, #2
 80097ae:	f033 0010 	bics.w	r0, r3, #16
 80097b2:	d109      	bne.n	80097c8 <_strtoul_l.constprop.0+0x3c>
 80097b4:	2c30      	cmp	r4, #48	@ 0x30
 80097b6:	d12c      	bne.n	8009812 <_strtoul_l.constprop.0+0x86>
 80097b8:	7828      	ldrb	r0, [r5, #0]
 80097ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80097be:	2858      	cmp	r0, #88	@ 0x58
 80097c0:	d127      	bne.n	8009812 <_strtoul_l.constprop.0+0x86>
 80097c2:	2310      	movs	r3, #16
 80097c4:	786c      	ldrb	r4, [r5, #1]
 80097c6:	3502      	adds	r5, #2
 80097c8:	f04f 38ff 	mov.w	r8, #4294967295
 80097cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80097d0:	2600      	movs	r6, #0
 80097d2:	fb03 f908 	mul.w	r9, r3, r8
 80097d6:	4630      	mov	r0, r6
 80097d8:	ea6f 0909 	mvn.w	r9, r9
 80097dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80097e0:	f1bc 0f09 	cmp.w	ip, #9
 80097e4:	d81c      	bhi.n	8009820 <_strtoul_l.constprop.0+0x94>
 80097e6:	4664      	mov	r4, ip
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	dd2a      	ble.n	8009842 <_strtoul_l.constprop.0+0xb6>
 80097ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 80097f0:	d007      	beq.n	8009802 <_strtoul_l.constprop.0+0x76>
 80097f2:	4580      	cmp	r8, r0
 80097f4:	d322      	bcc.n	800983c <_strtoul_l.constprop.0+0xb0>
 80097f6:	d101      	bne.n	80097fc <_strtoul_l.constprop.0+0x70>
 80097f8:	45a1      	cmp	r9, r4
 80097fa:	db1f      	blt.n	800983c <_strtoul_l.constprop.0+0xb0>
 80097fc:	2601      	movs	r6, #1
 80097fe:	fb00 4003 	mla	r0, r0, r3, r4
 8009802:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009806:	e7e9      	b.n	80097dc <_strtoul_l.constprop.0+0x50>
 8009808:	2c2b      	cmp	r4, #43	@ 0x2b
 800980a:	bf04      	itt	eq
 800980c:	782c      	ldrbeq	r4, [r5, #0]
 800980e:	1c85      	addeq	r5, r0, #2
 8009810:	e7cd      	b.n	80097ae <_strtoul_l.constprop.0+0x22>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1d8      	bne.n	80097c8 <_strtoul_l.constprop.0+0x3c>
 8009816:	2c30      	cmp	r4, #48	@ 0x30
 8009818:	bf0c      	ite	eq
 800981a:	2308      	moveq	r3, #8
 800981c:	230a      	movne	r3, #10
 800981e:	e7d3      	b.n	80097c8 <_strtoul_l.constprop.0+0x3c>
 8009820:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009824:	f1bc 0f19 	cmp.w	ip, #25
 8009828:	d801      	bhi.n	800982e <_strtoul_l.constprop.0+0xa2>
 800982a:	3c37      	subs	r4, #55	@ 0x37
 800982c:	e7dc      	b.n	80097e8 <_strtoul_l.constprop.0+0x5c>
 800982e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009832:	f1bc 0f19 	cmp.w	ip, #25
 8009836:	d804      	bhi.n	8009842 <_strtoul_l.constprop.0+0xb6>
 8009838:	3c57      	subs	r4, #87	@ 0x57
 800983a:	e7d5      	b.n	80097e8 <_strtoul_l.constprop.0+0x5c>
 800983c:	f04f 36ff 	mov.w	r6, #4294967295
 8009840:	e7df      	b.n	8009802 <_strtoul_l.constprop.0+0x76>
 8009842:	1c73      	adds	r3, r6, #1
 8009844:	d106      	bne.n	8009854 <_strtoul_l.constprop.0+0xc8>
 8009846:	2322      	movs	r3, #34	@ 0x22
 8009848:	4630      	mov	r0, r6
 800984a:	f8ce 3000 	str.w	r3, [lr]
 800984e:	b932      	cbnz	r2, 800985e <_strtoul_l.constprop.0+0xd2>
 8009850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009854:	b107      	cbz	r7, 8009858 <_strtoul_l.constprop.0+0xcc>
 8009856:	4240      	negs	r0, r0
 8009858:	2a00      	cmp	r2, #0
 800985a:	d0f9      	beq.n	8009850 <_strtoul_l.constprop.0+0xc4>
 800985c:	b106      	cbz	r6, 8009860 <_strtoul_l.constprop.0+0xd4>
 800985e:	1e69      	subs	r1, r5, #1
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	e7f5      	b.n	8009850 <_strtoul_l.constprop.0+0xc4>
 8009864:	08009df9 	.word	0x08009df9

08009868 <_strtoul_r>:
 8009868:	f7ff bf90 	b.w	800978c <_strtoul_l.constprop.0>

0800986c <__ascii_wctomb>:
 800986c:	4603      	mov	r3, r0
 800986e:	4608      	mov	r0, r1
 8009870:	b141      	cbz	r1, 8009884 <__ascii_wctomb+0x18>
 8009872:	2aff      	cmp	r2, #255	@ 0xff
 8009874:	d904      	bls.n	8009880 <__ascii_wctomb+0x14>
 8009876:	228a      	movs	r2, #138	@ 0x8a
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	4770      	bx	lr
 8009880:	2001      	movs	r0, #1
 8009882:	700a      	strb	r2, [r1, #0]
 8009884:	4770      	bx	lr
	...

08009888 <fiprintf>:
 8009888:	b40e      	push	{r1, r2, r3}
 800988a:	b503      	push	{r0, r1, lr}
 800988c:	4601      	mov	r1, r0
 800988e:	ab03      	add	r3, sp, #12
 8009890:	4805      	ldr	r0, [pc, #20]	@ (80098a8 <fiprintf+0x20>)
 8009892:	f853 2b04 	ldr.w	r2, [r3], #4
 8009896:	6800      	ldr	r0, [r0, #0]
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	f7fe ff8d 	bl	80087b8 <_vfiprintf_r>
 800989e:	b002      	add	sp, #8
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	20000030 	.word	0x20000030

080098ac <abort>:
 80098ac:	2006      	movs	r0, #6
 80098ae:	b508      	push	{r3, lr}
 80098b0:	f000 f834 	bl	800991c <raise>
 80098b4:	2001      	movs	r0, #1
 80098b6:	f7f8 fd38 	bl	800232a <_exit>

080098ba <_malloc_usable_size_r>:
 80098ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098be:	1f18      	subs	r0, r3, #4
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bfbc      	itt	lt
 80098c4:	580b      	ldrlt	r3, [r1, r0]
 80098c6:	18c0      	addlt	r0, r0, r3
 80098c8:	4770      	bx	lr

080098ca <_raise_r>:
 80098ca:	291f      	cmp	r1, #31
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4605      	mov	r5, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	d904      	bls.n	80098de <_raise_r+0x14>
 80098d4:	2316      	movs	r3, #22
 80098d6:	6003      	str	r3, [r0, #0]
 80098d8:	f04f 30ff 	mov.w	r0, #4294967295
 80098dc:	bd38      	pop	{r3, r4, r5, pc}
 80098de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098e0:	b112      	cbz	r2, 80098e8 <_raise_r+0x1e>
 80098e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e6:	b94b      	cbnz	r3, 80098fc <_raise_r+0x32>
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 f831 	bl	8009950 <_getpid_r>
 80098ee:	4622      	mov	r2, r4
 80098f0:	4601      	mov	r1, r0
 80098f2:	4628      	mov	r0, r5
 80098f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f8:	f000 b818 	b.w	800992c <_kill_r>
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d00a      	beq.n	8009916 <_raise_r+0x4c>
 8009900:	1c59      	adds	r1, r3, #1
 8009902:	d103      	bne.n	800990c <_raise_r+0x42>
 8009904:	2316      	movs	r3, #22
 8009906:	6003      	str	r3, [r0, #0]
 8009908:	2001      	movs	r0, #1
 800990a:	e7e7      	b.n	80098dc <_raise_r+0x12>
 800990c:	2100      	movs	r1, #0
 800990e:	4620      	mov	r0, r4
 8009910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009914:	4798      	blx	r3
 8009916:	2000      	movs	r0, #0
 8009918:	e7e0      	b.n	80098dc <_raise_r+0x12>
	...

0800991c <raise>:
 800991c:	4b02      	ldr	r3, [pc, #8]	@ (8009928 <raise+0xc>)
 800991e:	4601      	mov	r1, r0
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	f7ff bfd2 	b.w	80098ca <_raise_r>
 8009926:	bf00      	nop
 8009928:	20000030 	.word	0x20000030

0800992c <_kill_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	2300      	movs	r3, #0
 8009930:	4d06      	ldr	r5, [pc, #24]	@ (800994c <_kill_r+0x20>)
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	4611      	mov	r1, r2
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	f7f8 fce6 	bl	800230a <_kill>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	d102      	bne.n	8009948 <_kill_r+0x1c>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	b103      	cbz	r3, 8009948 <_kill_r+0x1c>
 8009946:	6023      	str	r3, [r4, #0]
 8009948:	bd38      	pop	{r3, r4, r5, pc}
 800994a:	bf00      	nop
 800994c:	20000610 	.word	0x20000610

08009950 <_getpid_r>:
 8009950:	f7f8 bcd4 	b.w	80022fc <_getpid>

08009954 <_init>:
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	bf00      	nop
 8009958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995a:	bc08      	pop	{r3}
 800995c:	469e      	mov	lr, r3
 800995e:	4770      	bx	lr

08009960 <_fini>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	bf00      	nop
 8009964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009966:	bc08      	pop	{r3}
 8009968:	469e      	mov	lr, r3
 800996a:	4770      	bx	lr
