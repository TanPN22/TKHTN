
RTOS_STM32_C8T6_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f6c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800707c  0800707c  0000807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  08007228  08007228  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007228  08007228  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007230  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c68  2000006c  0800729c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cd4  0800729c  00009cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017848  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000357b  00000000  00000000  000208dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00023e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001030  00000000  00000000  00025330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043f5  00000000  00000000  00026360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017edf  00000000  00000000  0002a755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096b08  00000000  00000000  00042634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d913c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef8  00000000  00000000  000d9180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000df078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007064 	.word	0x08007064

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08007064 	.word	0x08007064

08000150 <_write>:
void S_Task1_LedBoard(void *argument);
void S_Task2_LedBlue(void *argument);
void StartTask03(void *argument);

/* USER CODE BEGIN PFP */
int _write(int fd, char * ptr, int len) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	b29a      	uxth	r2, r3
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	68b9      	ldr	r1, [r7, #8]
 8000166:	4804      	ldr	r0, [pc, #16]	@ (8000178 <_write+0x28>)
 8000168:	f001 fe6c 	bl	8001e44 <HAL_UART_Transmit>
  return len;
 800016c:	687b      	ldr	r3, [r7, #4]
}
 800016e:	4618      	mov	r0, r3
 8000170:	3710      	adds	r7, #16
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000088 	.word	0x20000088

0800017c <HAL_UART_RxCpltCallback>:

uint8_t data_rx;
char uart_buff[100];
uint8_t uart_index = 0;
uint8_t uart_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(senEXTI_4Handle);
 8000184:	4b18      	ldr	r3, [pc, #96]	@ (80001e8 <HAL_UART_RxCpltCallback+0x6c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f002 feb1 	bl	8002ef0 <osSemaphoreRelease>
	if (data_rx == '\n'){
 800018e:	4b17      	ldr	r3, [pc, #92]	@ (80001ec <HAL_UART_RxCpltCallback+0x70>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b0a      	cmp	r3, #10
 8000194:	d109      	bne.n	80001aa <HAL_UART_RxCpltCallback+0x2e>
		uart_buff[uart_index] = '\0';
 8000196:	4b16      	ldr	r3, [pc, #88]	@ (80001f0 <HAL_UART_RxCpltCallback+0x74>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	461a      	mov	r2, r3
 800019c:	4b15      	ldr	r3, [pc, #84]	@ (80001f4 <HAL_UART_RxCpltCallback+0x78>)
 800019e:	2100      	movs	r1, #0
 80001a0:	5499      	strb	r1, [r3, r2]
		uart_flag = 1;
 80001a2:	4b15      	ldr	r3, [pc, #84]	@ (80001f8 <HAL_UART_RxCpltCallback+0x7c>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	701a      	strb	r2, [r3, #0]
 80001a8:	e00a      	b.n	80001c0 <HAL_UART_RxCpltCallback+0x44>
	}else{
		uart_buff[uart_index++] = data_rx;
 80001aa:	4b11      	ldr	r3, [pc, #68]	@ (80001f0 <HAL_UART_RxCpltCallback+0x74>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	1c5a      	adds	r2, r3, #1
 80001b0:	b2d1      	uxtb	r1, r2
 80001b2:	4a0f      	ldr	r2, [pc, #60]	@ (80001f0 <HAL_UART_RxCpltCallback+0x74>)
 80001b4:	7011      	strb	r1, [r2, #0]
 80001b6:	461a      	mov	r2, r3
 80001b8:	4b0c      	ldr	r3, [pc, #48]	@ (80001ec <HAL_UART_RxCpltCallback+0x70>)
 80001ba:	7819      	ldrb	r1, [r3, #0]
 80001bc:	4b0d      	ldr	r3, [pc, #52]	@ (80001f4 <HAL_UART_RxCpltCallback+0x78>)
 80001be:	5499      	strb	r1, [r3, r2]
	}

	if (uart_flag == 1){
 80001c0:	4b0d      	ldr	r3, [pc, #52]	@ (80001f8 <HAL_UART_RxCpltCallback+0x7c>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d105      	bne.n	80001d4 <HAL_UART_RxCpltCallback+0x58>
	  uart_flag = 0;
 80001c8:	4b0b      	ldr	r3, [pc, #44]	@ (80001f8 <HAL_UART_RxCpltCallback+0x7c>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
	  uart_index = 0;
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <HAL_UART_RxCpltCallback+0x74>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	4905      	ldr	r1, [pc, #20]	@ (80001ec <HAL_UART_RxCpltCallback+0x70>)
 80001d8:	4808      	ldr	r0, [pc, #32]	@ (80001fc <HAL_UART_RxCpltCallback+0x80>)
 80001da:	f001 febe 	bl	8001f5a <HAL_UART_Receive_IT>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	200000e4 	.word	0x200000e4
 80001f0:	2000014c 	.word	0x2000014c
 80001f4:	200000e8 	.word	0x200000e8
 80001f8:	2000014d 	.word	0x2000014d
 80001fc:	20000088 	.word	0x20000088

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 fbd6 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f856 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f8c0 	bl	8000390 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000210:	f000 f894 	bl	800033c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8000214:	2201      	movs	r2, #1
 8000216:	4919      	ldr	r1, [pc, #100]	@ (800027c <main+0x7c>)
 8000218:	4819      	ldr	r0, [pc, #100]	@ (8000280 <main+0x80>)
 800021a:	f001 fe9e 	bl	8001f5a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800021e:	f002 fc6f 	bl	8002b00 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUart */
  semUartHandle = osSemaphoreNew(1, 1, &semUart_attributes);
 8000222:	4a18      	ldr	r2, [pc, #96]	@ (8000284 <main+0x84>)
 8000224:	2101      	movs	r1, #1
 8000226:	2001      	movs	r0, #1
 8000228:	f002 fd86 	bl	8002d38 <osSemaphoreNew>
 800022c:	4603      	mov	r3, r0
 800022e:	4a16      	ldr	r2, [pc, #88]	@ (8000288 <main+0x88>)
 8000230:	6013      	str	r3, [r2, #0]

  /* creation of senEXTI_4 */
  senEXTI_4Handle = osSemaphoreNew(5, 0, &senEXTI_4_attributes);
 8000232:	4a16      	ldr	r2, [pc, #88]	@ (800028c <main+0x8c>)
 8000234:	2100      	movs	r1, #0
 8000236:	2005      	movs	r0, #5
 8000238:	f002 fd7e 	bl	8002d38 <osSemaphoreNew>
 800023c:	4603      	mov	r3, r0
 800023e:	4a14      	ldr	r2, [pc, #80]	@ (8000290 <main+0x90>)
 8000240:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_LedBoard */
  Task1_LedBoardHandle = osThreadNew(S_Task1_LedBoard, NULL, &Task1_LedBoard_attributes);
 8000242:	4a14      	ldr	r2, [pc, #80]	@ (8000294 <main+0x94>)
 8000244:	2100      	movs	r1, #0
 8000246:	4814      	ldr	r0, [pc, #80]	@ (8000298 <main+0x98>)
 8000248:	f002 fcb7 	bl	8002bba <osThreadNew>
 800024c:	4603      	mov	r3, r0
 800024e:	4a13      	ldr	r2, [pc, #76]	@ (800029c <main+0x9c>)
 8000250:	6013      	str	r3, [r2, #0]

  /* creation of Task2_LedBlue */
  Task2_LedBlueHandle = osThreadNew(S_Task2_LedBlue, NULL, &Task2_LedBlue_attributes);
 8000252:	4a13      	ldr	r2, [pc, #76]	@ (80002a0 <main+0xa0>)
 8000254:	2100      	movs	r1, #0
 8000256:	4813      	ldr	r0, [pc, #76]	@ (80002a4 <main+0xa4>)
 8000258:	f002 fcaf 	bl	8002bba <osThreadNew>
 800025c:	4603      	mov	r3, r0
 800025e:	4a12      	ldr	r2, [pc, #72]	@ (80002a8 <main+0xa8>)
 8000260:	6013      	str	r3, [r2, #0]

  /* creation of Task3_EXTI_Hand */
  Task3_EXTI_HandHandle = osThreadNew(StartTask03, NULL, &Task3_EXTI_Hand_attributes);
 8000262:	4a12      	ldr	r2, [pc, #72]	@ (80002ac <main+0xac>)
 8000264:	2100      	movs	r1, #0
 8000266:	4812      	ldr	r0, [pc, #72]	@ (80002b0 <main+0xb0>)
 8000268:	f002 fca7 	bl	8002bba <osThreadNew>
 800026c:	4603      	mov	r3, r0
 800026e:	4a11      	ldr	r2, [pc, #68]	@ (80002b4 <main+0xb4>)
 8000270:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000272:	f002 fc67 	bl	8002b44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000276:	bf00      	nop
 8000278:	e7fd      	b.n	8000276 <main+0x76>
 800027a:	bf00      	nop
 800027c:	200000e4 	.word	0x200000e4
 8000280:	20000088 	.word	0x20000088
 8000284:	080071a8 	.word	0x080071a8
 8000288:	200000dc 	.word	0x200000dc
 800028c:	080071b8 	.word	0x080071b8
 8000290:	200000e0 	.word	0x200000e0
 8000294:	0800713c 	.word	0x0800713c
 8000298:	08000455 	.word	0x08000455
 800029c:	200000d0 	.word	0x200000d0
 80002a0:	08007160 	.word	0x08007160
 80002a4:	080004dd 	.word	0x080004dd
 80002a8:	200000d4 	.word	0x200000d4
 80002ac:	08007184 	.word	0x08007184
 80002b0:	08000565 	.word	0x08000565
 80002b4:	200000d8 	.word	0x200000d8

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f006 f845 	bl	8006356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ea:	2300      	movs	r3, #0
 80002ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002ee:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fed5 	bl	80010a8 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000304:	f000 f969 	bl	80005da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f942 	bl	80015ac <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800032e:	f000 f954 	bl	80005da <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	@ 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f001 fd16 	bl	8001da4 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f92c 	bl	80005da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000088 	.word	0x20000088
 800038c:	40013800 	.word	0x40013800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	4b28      	ldr	r3, [pc, #160]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a27      	ldr	r2, [pc, #156]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b25      	ldr	r3, [pc, #148]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b22      	ldr	r3, [pc, #136]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a21      	ldr	r2, [pc, #132]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b19      	ldr	r3, [pc, #100]	@ (8000448 <MX_GPIO_Init+0xb8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f2:	4816      	ldr	r0, [pc, #88]	@ (800044c <MX_GPIO_Init+0xbc>)
 80003f4:	f000 fe26 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003fe:	4814      	ldr	r0, [pc, #80]	@ (8000450 <MX_GPIO_Init+0xc0>)
 8000400:	f000 fe20 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	480b      	ldr	r0, [pc, #44]	@ (800044c <MX_GPIO_Init+0xbc>)
 800041e:	f000 fc8d 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_GPIO_Init+0xc0>)
 800043c:	f000 fc7e 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	40011000 	.word	0x40011000
 8000450:	40010800 	.word	0x40010800

08000454 <S_Task1_LedBoard>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task1_LedBoard */
void S_Task1_LedBoard(void *argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t next_wake_time = osKernelGetTickCount();
 800045c:	f002 fb98 	bl	8002b90 <osKernelGetTickCount>
 8000460:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000462:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <S_Task1_LedBoard+0x78>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f04f 31ff 	mov.w	r1, #4294967295
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fcee 	bl	8002e4c <osSemaphoreAcquire>
#endif
	printf("Task 1 in: %ld\n", osKernelGetTickCount());
 8000470:	f002 fb8e 	bl	8002b90 <osKernelGetTickCount>
 8000474:	4603      	mov	r3, r0
 8000476:	4619      	mov	r1, r3
 8000478:	4815      	ldr	r0, [pc, #84]	@ (80004d0 <S_Task1_LedBoard+0x7c>)
 800047a:	f005 ff17 	bl	80062ac <iprintf>
	osSemaphoreRelease(semUartHandle);
 800047e:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <S_Task1_LedBoard+0x78>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f002 fd34 	bl	8002ef0 <osSemaphoreRelease>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000488:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800048c:	4811      	ldr	r0, [pc, #68]	@ (80004d4 <S_Task1_LedBoard+0x80>)
 800048e:	f000 fdf1 	bl	8001074 <HAL_GPIO_TogglePin>

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <S_Task1_LedBoard+0x78>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f04f 31ff 	mov.w	r1, #4294967295
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fcd6 	bl	8002e4c <osSemaphoreAcquire>
#endif
	printf("Task 1 out: %ld\n\n", osKernelGetTickCount());
 80004a0:	f002 fb76 	bl	8002b90 <osKernelGetTickCount>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4619      	mov	r1, r3
 80004a8:	480b      	ldr	r0, [pc, #44]	@ (80004d8 <S_Task1_LedBoard+0x84>)
 80004aa:	f005 feff 	bl	80062ac <iprintf>
	osSemaphoreRelease(semUartHandle);
 80004ae:	4b07      	ldr	r3, [pc, #28]	@ (80004cc <S_Task1_LedBoard+0x78>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fd1c 	bl	8002ef0 <osSemaphoreRelease>

	next_wake_time += 1000;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80004be:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 80004c0:	68f8      	ldr	r0, [r7, #12]
 80004c2:	f002 fc0c 	bl	8002cde <osDelayUntil>
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 80004c6:	bf00      	nop
 80004c8:	e7cb      	b.n	8000462 <S_Task1_LedBoard+0xe>
 80004ca:	bf00      	nop
 80004cc:	200000dc 	.word	0x200000dc
 80004d0:	080070c0 	.word	0x080070c0
 80004d4:	40011000 	.word	0x40011000
 80004d8:	080070d0 	.word	0x080070d0

080004dc <S_Task2_LedBlue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task2_LedBlue */
void S_Task2_LedBlue(void *argument)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task2_LedBlue */
	uint32_t next_wake_time = osKernelGetTickCount();
 80004e4:	f002 fb54 	bl	8002b90 <osKernelGetTickCount>
 80004e8:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <S_Task2_LedBlue+0x78>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f04f 31ff 	mov.w	r1, #4294967295
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 fcaa 	bl	8002e4c <osSemaphoreAcquire>
#endif
	printf("Task 2 in: %ld\n", osKernelGetTickCount());
 80004f8:	f002 fb4a 	bl	8002b90 <osKernelGetTickCount>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4619      	mov	r1, r3
 8000500:	4815      	ldr	r0, [pc, #84]	@ (8000558 <S_Task2_LedBlue+0x7c>)
 8000502:	f005 fed3 	bl	80062ac <iprintf>
	osSemaphoreRelease(semUartHandle);
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <S_Task2_LedBlue+0x78>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fcf0 	bl	8002ef0 <osSemaphoreRelease>

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000514:	4811      	ldr	r0, [pc, #68]	@ (800055c <S_Task2_LedBlue+0x80>)
 8000516:	f000 fdad 	bl	8001074 <HAL_GPIO_TogglePin>

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <S_Task2_LedBlue+0x78>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f04f 31ff 	mov.w	r1, #4294967295
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fc92 	bl	8002e4c <osSemaphoreAcquire>
#endif
	printf("Task 2 out: %ld\n\n", osKernelGetTickCount());
 8000528:	f002 fb32 	bl	8002b90 <osKernelGetTickCount>
 800052c:	4603      	mov	r3, r0
 800052e:	4619      	mov	r1, r3
 8000530:	480b      	ldr	r0, [pc, #44]	@ (8000560 <S_Task2_LedBlue+0x84>)
 8000532:	f005 febb 	bl	80062ac <iprintf>
	osSemaphoreRelease(semUartHandle);
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <S_Task2_LedBlue+0x78>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fcd8 	bl	8002ef0 <osSemaphoreRelease>

	next_wake_time += 1500;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000546:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f002 fbc8 	bl	8002cde <osDelayUntil>
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 800054e:	bf00      	nop
 8000550:	e7cb      	b.n	80004ea <S_Task2_LedBlue+0xe>
 8000552:	bf00      	nop
 8000554:	200000dc 	.word	0x200000dc
 8000558:	080070e4 	.word	0x080070e4
 800055c:	40010800 	.word	0x40010800
 8000560:	080070f4 	.word	0x080070f4

08000564 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint8_t number = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(senEXTI_4Handle, osWaitForever);
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <StartTask03+0x48>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f04f 31ff 	mov.w	r1, #4294967295
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fc67 	bl	8002e4c <osSemaphoreAcquire>

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <StartTask03+0x4c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f04f 31ff 	mov.w	r1, #4294967295
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fc60 	bl	8002e4c <osSemaphoreAcquire>
#endif
	printf("Get data: %s    Number: %d\n", uart_buff, number ++);
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	73fa      	strb	r2, [r7, #15]
 8000592:	461a      	mov	r2, r3
 8000594:	4907      	ldr	r1, [pc, #28]	@ (80005b4 <StartTask03+0x50>)
 8000596:	4808      	ldr	r0, [pc, #32]	@ (80005b8 <StartTask03+0x54>)
 8000598:	f005 fe88 	bl	80062ac <iprintf>
	osSemaphoreRelease(semUartHandle);
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <StartTask03+0x4c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fca5 	bl	8002ef0 <osSemaphoreRelease>
	osSemaphoreAcquire(senEXTI_4Handle, osWaitForever);
 80005a6:	bf00      	nop
 80005a8:	e7e2      	b.n	8000570 <StartTask03+0xc>
 80005aa:	bf00      	nop
 80005ac:	200000e0 	.word	0x200000e0
 80005b0:	200000dc 	.word	0x200000dc
 80005b4:	200000e8 	.word	0x200000e8
 80005b8:	08007108 	.word	0x08007108

080005bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005cc:	d101      	bne.n	80005d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ce:	f000 fa07 	bl	80009e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005de:	b672      	cpsid	i
}
 80005e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e2:	bf00      	nop
 80005e4:	e7fd      	b.n	80005e2 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <HAL_MspInit+0x68>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <HAL_MspInit+0x68>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <HAL_MspInit+0x68>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_MspInit+0x68>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a11      	ldr	r2, [pc, #68]	@ (8000650 <HAL_MspInit+0x68>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_MspInit+0x68>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	210f      	movs	r1, #15
 8000622:	f06f 0001 	mvn.w	r0, #1
 8000626:	f000 faac 	bl	8000b82 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <HAL_MspInit+0x6c>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <HAL_MspInit+0x6c>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <HAL_UART_MspInit+0x9c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d139      	bne.n	80006ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a1e      	ldr	r2, [pc, #120]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	480f      	ldr	r0, [pc, #60]	@ (80006fc <HAL_UART_MspInit+0xa4>)
 80006be:	f000 fb3d 	bl	8000d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4809      	ldr	r0, [pc, #36]	@ (80006fc <HAL_UART_MspInit+0xa4>)
 80006d8:	f000 fb30 	bl	8000d3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	210a      	movs	r1, #10
 80006e0:	2025      	movs	r0, #37	@ 0x25
 80006e2:	f000 fa4e 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006e6:	2025      	movs	r0, #37	@ 0x25
 80006e8:	f000 fa67 	bl	8000bba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013800 	.word	0x40013800
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800

08000700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	@ 0x38
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000710:	2300      	movs	r3, #0
 8000712:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000716:	4b34      	ldr	r3, [pc, #208]	@ (80007e8 <HAL_InitTick+0xe8>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a33      	ldr	r2, [pc, #204]	@ (80007e8 <HAL_InitTick+0xe8>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b31      	ldr	r3, [pc, #196]	@ (80007e8 <HAL_InitTick+0xe8>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800072e:	f107 0210 	add.w	r2, r7, #16
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f8a7 	bl	800188c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800073e:	6a3b      	ldr	r3, [r7, #32]
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000748:	f001 f878 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 800074c:	6378      	str	r0, [r7, #52]	@ 0x34
 800074e:	e004      	b.n	800075a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000750:	f001 f874 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 8000754:	4603      	mov	r3, r0
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800075a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800075c:	4a23      	ldr	r2, [pc, #140]	@ (80007ec <HAL_InitTick+0xec>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	0c9b      	lsrs	r3, r3, #18
 8000764:	3b01      	subs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <HAL_InitTick+0xf0>)
 800076a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <HAL_InitTick+0xf0>)
 8000772:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000776:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <HAL_InitTick+0xf0>)
 800077a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800077c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <HAL_InitTick+0xf0>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <HAL_InitTick+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <HAL_InitTick+0xf0>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <HAL_InitTick+0xf0>)
 8000792:	f001 f8c9 	bl	8001928 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800079c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d11b      	bne.n	80007dc <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80007a4:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <HAL_InitTick+0xf0>)
 80007a6:	f001 f917 	bl	80019d8 <HAL_TIM_Base_Start_IT>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d111      	bne.n	80007dc <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007b8:	201c      	movs	r0, #28
 80007ba:	f000 f9fe 	bl	8000bba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d808      	bhi.n	80007d6 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	201c      	movs	r0, #28
 80007ca:	f000 f9da 	bl	8000b82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ce:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <HAL_InitTick+0xf4>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	e002      	b.n	80007dc <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3738      	adds	r7, #56	@ 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	431bde83 	.word	0x431bde83
 80007f0:	20000150 	.word	0x20000150
 80007f4:	20000004 	.word	0x20000004

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <UsageFault_Handler+0x4>

08000820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <TIM2_IRQHandler+0x10>)
 8000832:	f001 f923 	bl	8001a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000150 	.word	0x20000150

08000840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <USART1_IRQHandler+0x10>)
 8000846:	f001 fbad 	bl	8001fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000088 	.word	0x20000088

08000854 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	e00a      	b.n	800087c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000866:	f3af 8000 	nop.w
 800086a:	4601      	mov	r1, r0
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf0      	blt.n	8000866 <_read+0x12>
  }

  return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_close>:
  }
  return len;
}

int _close(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008b4:	605a      	str	r2, [r3, #4]
  return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <_isatty>:

int _isatty(int file)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b085      	sub	sp, #20
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	@ (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000920:	f005 fdbe 	bl	80064a0 <__errno>
 8000924:	4603      	mov	r3, r0
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e009      	b.n	8000944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000936:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <_sbrk+0x64>)
 8000940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20005000 	.word	0x20005000
 8000950:	00000400 	.word	0x00000400
 8000954:	20000198 	.word	0x20000198
 8000958:	20001cd8 	.word	0x20001cd8

0800095c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000968:	f7ff fff8 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480b      	ldr	r0, [pc, #44]	@ (800099c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800096e:	490c      	ldr	r1, [pc, #48]	@ (80009a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000970:	4a0c      	ldr	r2, [pc, #48]	@ (80009a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a09      	ldr	r2, [pc, #36]	@ (80009a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000984:	4c09      	ldr	r4, [pc, #36]	@ (80009ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000992:	f005 fd8b 	bl	80064ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fc33 	bl	8000200 <main>
  bx lr
 800099a:	4770      	bx	lr
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009a4:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 80009a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009ac:	20001cd4 	.word	0x20001cd4

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <HAL_Init+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	@ (80009dc <HAL_Init+0x28>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f8d1 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	200f      	movs	r0, #15
 80009cc:	f7ff fe98 	bl	8000700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff fe0a 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <HAL_IncTick+0x1c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_IncTick+0x20>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a03      	ldr	r2, [pc, #12]	@ (8000a00 <HAL_IncTick+0x20>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	20000008 	.word	0x20000008
 8000a00:	2000019c 	.word	0x2000019c

08000a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b02      	ldr	r3, [pc, #8]	@ (8000a14 <HAL_GetTick+0x10>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	2000019c 	.word	0x2000019c

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4906      	ldr	r1, [pc, #24]	@ (8000ab0 <__NVIC_EnableIRQ+0x34>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	@ (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	@ (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	@ 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff4f 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff64 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ffb2 	bl	8000b08 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff81 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff57 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d008      	beq.n	8000c00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e020      	b.n	8000c42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 020e 	bic.w	r2, r2, #14
 8000c0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c28:	2101      	movs	r1, #1
 8000c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d005      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2204      	movs	r2, #4
 8000c68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e051      	b.n	8000d14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 020e 	bic.w	r2, r2, #14
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a22      	ldr	r2, [pc, #136]	@ (8000d20 <HAL_DMA_Abort_IT+0xd4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d029      	beq.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a21      	ldr	r2, [pc, #132]	@ (8000d24 <HAL_DMA_Abort_IT+0xd8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d022      	beq.n	8000cea <HAL_DMA_Abort_IT+0x9e>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <HAL_DMA_Abort_IT+0xdc>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d01a      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x98>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_DMA_Abort_IT+0xe0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d012      	beq.n	8000cde <HAL_DMA_Abort_IT+0x92>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <HAL_DMA_Abort_IT+0xe4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00a      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x8c>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <HAL_DMA_Abort_IT+0xe8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d102      	bne.n	8000cd2 <HAL_DMA_Abort_IT+0x86>
 8000ccc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cd0:	e00e      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cd6:	e00b      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cdc:	e008      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce2:	e005      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce8:	e002      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cea:	2310      	movs	r3, #16
 8000cec:	e000      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4a11      	ldr	r2, [pc, #68]	@ (8000d38 <HAL_DMA_Abort_IT+0xec>)
 8000cf2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	4798      	blx	r3
    } 
  }
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020008 	.word	0x40020008
 8000d24:	4002001c 	.word	0x4002001c
 8000d28:	40020030 	.word	0x40020030
 8000d2c:	40020044 	.word	0x40020044
 8000d30:	40020058 	.word	0x40020058
 8000d34:	4002006c 	.word	0x4002006c
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b08b      	sub	sp, #44	@ 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e169      	b.n	8001024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d50:	2201      	movs	r2, #1
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8158 	bne.w	800101e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a9a      	ldr	r2, [pc, #616]	@ (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d05e      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d78:	4a98      	ldr	r2, [pc, #608]	@ (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d875      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d7e:	4a98      	ldr	r2, [pc, #608]	@ (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d058      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d84:	4a96      	ldr	r2, [pc, #600]	@ (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d86f      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d8a:	4a96      	ldr	r2, [pc, #600]	@ (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d052      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d90:	4a94      	ldr	r2, [pc, #592]	@ (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d869      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d96:	4a94      	ldr	r2, [pc, #592]	@ (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d04c      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d9c:	4a92      	ldr	r2, [pc, #584]	@ (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d863      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000da2:	4a92      	ldr	r2, [pc, #584]	@ (8000fec <HAL_GPIO_Init+0x2b0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d046      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000da8:	4a90      	ldr	r2, [pc, #576]	@ (8000fec <HAL_GPIO_Init+0x2b0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d85d      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d82a      	bhi.n	8000e08 <HAL_GPIO_Init+0xcc>
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d859      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000db6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dbc <HAL_GPIO_Init+0x80>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e11 	.word	0x08000e11
 8000dc4:	08000e23 	.word	0x08000e23
 8000dc8:	08000e65 	.word	0x08000e65
 8000dcc:	08000e6b 	.word	0x08000e6b
 8000dd0:	08000e6b 	.word	0x08000e6b
 8000dd4:	08000e6b 	.word	0x08000e6b
 8000dd8:	08000e6b 	.word	0x08000e6b
 8000ddc:	08000e6b 	.word	0x08000e6b
 8000de0:	08000e6b 	.word	0x08000e6b
 8000de4:	08000e6b 	.word	0x08000e6b
 8000de8:	08000e6b 	.word	0x08000e6b
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000e6b 	.word	0x08000e6b
 8000df4:	08000e6b 	.word	0x08000e6b
 8000df8:	08000e6b 	.word	0x08000e6b
 8000dfc:	08000e6b 	.word	0x08000e6b
 8000e00:	08000e19 	.word	0x08000e19
 8000e04:	08000e2d 	.word	0x08000e2d
 8000e08:	4a79      	ldr	r2, [pc, #484]	@ (8000ff0 <HAL_GPIO_Init+0x2b4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0e:	e02c      	b.n	8000e6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e029      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e024      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	3308      	adds	r3, #8
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e01f      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	330c      	adds	r3, #12
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e01a      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	623b      	str	r3, [r7, #32]
          break;
 8000e42:	e013      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	611a      	str	r2, [r3, #16]
          break;
 8000e56:	e009      	b.n	8000e6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	615a      	str	r2, [r3, #20]
          break;
 8000e62:	e003      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          break;
 8000e6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2bff      	cmp	r3, #255	@ 0xff
 8000e70:	d801      	bhi.n	8000e76 <HAL_GPIO_Init+0x13a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_Init+0x13e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2bff      	cmp	r3, #255	@ 0xff
 8000e80:	d802      	bhi.n	8000e88 <HAL_GPIO_Init+0x14c>
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x152>
 8000e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	210f      	movs	r1, #15
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	6a39      	ldr	r1, [r7, #32]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 80b1 	beq.w	800101e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed4:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a40      	ldr	r2, [pc, #256]	@ (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d013      	beq.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3f      	ldr	r2, [pc, #252]	@ (8001000 <HAL_GPIO_Init+0x2c4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d00d      	beq.n	8000f24 <HAL_GPIO_Init+0x1e8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001004 <HAL_GPIO_Init+0x2c8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3d      	ldr	r2, [pc, #244]	@ (8001008 <HAL_GPIO_Init+0x2cc>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d101      	bne.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e004      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f3a:	492f      	ldr	r1, [pc, #188]	@ (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f54:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	492c      	ldr	r1, [pc, #176]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f62:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4928      	ldr	r1, [pc, #160]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	4922      	ldr	r1, [pc, #136]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8a:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	491e      	ldr	r1, [pc, #120]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa4:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4918      	ldr	r1, [pc, #96]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4914      	ldr	r1, [pc, #80]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d021      	beq.n	8001010 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	490e      	ldr	r1, [pc, #56]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e021      	b.n	800101e <HAL_GPIO_Init+0x2e2>
 8000fda:	bf00      	nop
 8000fdc:	10320000 	.word	0x10320000
 8000fe0:	10310000 	.word	0x10310000
 8000fe4:	10220000 	.word	0x10220000
 8000fe8:	10210000 	.word	0x10210000
 8000fec:	10120000 	.word	0x10120000
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000
 8001008:	40011400 	.word	0x40011400
 800100c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	43db      	mvns	r3, r3
 8001018:	4909      	ldr	r1, [pc, #36]	@ (8001040 <HAL_GPIO_Init+0x304>)
 800101a:	4013      	ands	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	3301      	adds	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102a:	fa22 f303 	lsr.w	r3, r2, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	f47f ae8e 	bne.w	8000d50 <HAL_GPIO_Init+0x14>
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	372c      	adds	r7, #44	@ 0x2c
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	611a      	str	r2, [r3, #16]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43d9      	mvns	r1, r3
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	400b      	ands	r3, r1
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e272      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c8:	4b92      	ldr	r3, [pc, #584]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d00c      	beq.n	80010ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d112      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
 80010e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010ec:	d10b      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	4b89      	ldr	r3, [pc, #548]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d06c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x12c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d168      	bne.n	80011d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e24c      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x76>
 8001110:	4b80      	ldr	r3, [pc, #512]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a7f      	ldr	r2, [pc, #508]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e02e      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b7b      	ldr	r3, [pc, #492]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a7a      	ldr	r2, [pc, #488]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b78      	ldr	r3, [pc, #480]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a77      	ldr	r2, [pc, #476]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e01d      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0xbc>
 800114a:	4b72      	ldr	r3, [pc, #456]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a71      	ldr	r2, [pc, #452]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b6f      	ldr	r3, [pc, #444]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6e      	ldr	r2, [pc, #440]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001164:	4b6b      	ldr	r3, [pc, #428]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a6a      	ldr	r2, [pc, #424]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b68      	ldr	r3, [pc, #416]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a67      	ldr	r2, [pc, #412]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800117a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fc3e 	bl	8000a04 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fc3a 	bl	8000a04 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e200      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b5d      	ldr	r3, [pc, #372]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xe4>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc2a 	bl	8000a04 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fc26 	bl	8000a04 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	@ 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1ec      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	4b53      	ldr	r3, [pc, #332]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x10c>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d063      	beq.n	80012aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ee:	4b49      	ldr	r3, [pc, #292]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
 80011fa:	4b46      	ldr	r3, [pc, #280]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b43      	ldr	r3, [pc, #268]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1c0      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4939      	ldr	r1, [pc, #228]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e03a      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fbdf 	bl	8000a04 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fbdb 	bl	8000a04 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e1a1      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4927      	ldr	r1, [pc, #156]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fbbe 	bl	8000a04 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fbba 	bl	8000a04 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e180      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03a      	beq.n	800132c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_RCC_OscConfig+0x274>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fb9e 	bl	8000a04 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fb9a 	bl	8000a04 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e160      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 fafe 	bl	80018ec <RCC_Delay>
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_RCC_OscConfig+0x274>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fb84 	bl	8000a04 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fe:	e00f      	b.n	8001320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fb80 	bl	8000a04 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d908      	bls.n	8001320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e146      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	42420000 	.word	0x42420000
 800131c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b92      	ldr	r3, [pc, #584]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e9      	bne.n	8001300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a6 	beq.w	8001486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b8b      	ldr	r3, [pc, #556]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b88      	ldr	r3, [pc, #544]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a87      	ldr	r2, [pc, #540]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b85      	ldr	r3, [pc, #532]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b82      	ldr	r3, [pc, #520]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b7f      	ldr	r3, [pc, #508]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7e      	ldr	r2, [pc, #504]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb41 	bl	8000a04 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff fb3d 	bl	8000a04 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	@ 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e103      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b75      	ldr	r3, [pc, #468]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x312>
 80013ac:	4b6f      	ldr	r3, [pc, #444]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a6e      	ldr	r2, [pc, #440]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013c2:	4b6a      	ldr	r3, [pc, #424]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a69      	ldr	r2, [pc, #420]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b67      	ldr	r3, [pc, #412]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a66      	ldr	r2, [pc, #408]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	e01c      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x356>
 80013e4:	4b61      	ldr	r3, [pc, #388]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a60      	ldr	r2, [pc, #384]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	4b5e      	ldr	r3, [pc, #376]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a5d      	ldr	r2, [pc, #372]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013fe:	4b5b      	ldr	r3, [pc, #364]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a5a      	ldr	r2, [pc, #360]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b58      	ldr	r3, [pc, #352]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a57      	ldr	r2, [pc, #348]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d015      	beq.n	800144a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff faf1 	bl	8000a04 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff faed 	bl	8000a04 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0b1      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ee      	beq.n	8001426 <HAL_RCC_OscConfig+0x37e>
 8001448:	e014      	b.n	8001474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fadb 	bl	8000a04 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fad7 	bl	8000a04 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e09b      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001468:	4b40      	ldr	r3, [pc, #256]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ee      	bne.n	8001452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d105      	bne.n	8001486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147a:	4b3c      	ldr	r3, [pc, #240]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a3b      	ldr	r2, [pc, #236]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8087 	beq.w	800159e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001490:	4b36      	ldr	r3, [pc, #216]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d061      	beq.n	8001560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d146      	bne.n	8001532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <HAL_RCC_OscConfig+0x4cc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff faab 	bl	8000a04 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff faa7 	bl	8000a04 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e06d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d8:	d108      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4921      	ldr	r1, [pc, #132]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a19      	ldr	r1, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	430b      	orrs	r3, r1
 80014fe:	491b      	ldr	r1, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x4cc>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fa7b 	bl	8000a04 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fa77 	bl	8000a04 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x46a>
 8001530:	e035      	b.n	800159e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_RCC_OscConfig+0x4cc>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa64 	bl	8000a04 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fa60 	bl	8000a04 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e026      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x498>
 800155e:	e01e      	b.n	800159e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e019      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
 800156c:	40021000 	.word	0x40021000
 8001570:	40007000 	.word	0x40007000
 8001574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <HAL_RCC_OscConfig+0x500>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	429a      	cmp	r2, r3
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0d0      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b67      	ldr	r3, [pc, #412]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4965      	ldr	r1, [pc, #404]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a58      	ldr	r2, [pc, #352]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800162a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b41      	ldr	r3, [pc, #260]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e073      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06b      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b39      	ldr	r3, [pc, #228]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4936      	ldr	r1, [pc, #216]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff f9b2 	bl	8000a04 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff f9ae 	bl	8000a04 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e053      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d210      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4922      	ldr	r1, [pc, #136]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	@ (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1cc>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1d0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ffd0 	bl	8000700 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000
 8001770:	40021000 	.word	0x40021000
 8001774:	080071c8 	.word	0x080071c8
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x94>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x30>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x36>
 80017ae:	e027      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 80017b2:	613b      	str	r3, [r7, #16]
      break;
 80017b4:	e027      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4a17      	ldr	r2, [pc, #92]	@ (800181c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d010      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x94>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0c5b      	lsrs	r3, r3, #17
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 80017e2:	fb03 f202 	mul.w	r2, r3, r2
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e004      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	613b      	str	r3, [r7, #16]
      break;
 80017fe:	e002      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 8001802:	613b      	str	r3, [r7, #16]
      break;
 8001804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001806:	693b      	ldr	r3, [r7, #16]
}
 8001808:	4618      	mov	r0, r3
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	007a1200 	.word	0x007a1200
 800181c:	080071e0 	.word	0x080071e0
 8001820:	080071f0 	.word	0x080071f0
 8001824:	003d0900 	.word	0x003d0900

08001828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800182c:	4b02      	ldr	r3, [pc, #8]	@ (8001838 <HAL_RCC_GetHCLKFreq+0x10>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000000 	.word	0x20000000

0800183c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001840:	f7ff fff2 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	4903      	ldr	r1, [pc, #12]	@ (8001860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	080071d8 	.word	0x080071d8

08001864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001868:	f7ff ffde 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0adb      	lsrs	r3, r3, #11
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4903      	ldr	r1, [pc, #12]	@ (8001888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	080071d8 	.word	0x080071d8

0800188c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	220f      	movs	r2, #15
 800189a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_RCC_GetClockConfig+0x58>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_RCC_GetClockConfig+0x58>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_GetClockConfig+0x58>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_RCC_GetClockConfig+0x58>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_RCC_GetClockConfig+0x5c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0207 	and.w	r2, r3, #7
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40022000 	.word	0x40022000

080018ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <RCC_Delay+0x34>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <RCC_Delay+0x38>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0a5b      	lsrs	r3, r3, #9
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001908:	bf00      	nop
  }
  while (Delay --);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	60fa      	str	r2, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <RCC_Delay+0x1c>
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000000 	.word	0x20000000
 8001924:	10624dd3 	.word	0x10624dd3

08001928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e041      	b.n	80019be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f839 	bl	80019c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3304      	adds	r3, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f000 f99c 	bl	8001ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d001      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e03a      	b.n	8001a66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <HAL_TIM_Base_Start_IT+0x98>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00e      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x58>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1a:	d009      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x58>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d004      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x58>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a13      	ldr	r2, [pc, #76]	@ (8001a78 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d111      	bne.n	8001a54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d010      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a52:	e007      	b.n	8001a64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40000800 	.word	0x40000800

08001a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d020      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01b      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0202 	mvn.w	r2, #2
 8001ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8d1 	bl	8001c6e <HAL_TIM_IC_CaptureCallback>
 8001acc:	e005      	b.n	8001ada <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8c4 	bl	8001c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f8d3 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d020      	beq.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01b      	beq.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0204 	mvn.w	r2, #4
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8ab 	bl	8001c6e <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f89e 	bl	8001c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8ad 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d020      	beq.n	8001b78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0208 	mvn.w	r2, #8
 8001b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f885 	bl	8001c6e <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f878 	bl	8001c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f887 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d020      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0210 	mvn.w	r2, #16
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2208      	movs	r2, #8
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f85f 	bl	8001c6e <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f852 	bl	8001c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f861 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00c      	beq.n	8001be8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0201 	mvn.w	r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fcea 	bl	80005bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00c      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8c3 	bl	8001d92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f831 	bl	8001c92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0220 	mvn.w	r2, #32
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f896 	bl	8001d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001d74 <TIM_Base_SetConfig+0xd0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00b      	beq.n	8001cd4 <TIM_Base_SetConfig+0x30>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc2:	d007      	beq.n	8001cd4 <TIM_Base_SetConfig+0x30>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d78 <TIM_Base_SetConfig+0xd4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d003      	beq.n	8001cd4 <TIM_Base_SetConfig+0x30>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <TIM_Base_SetConfig+0xd8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d108      	bne.n	8001ce6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	@ (8001d74 <TIM_Base_SetConfig+0xd0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00b      	beq.n	8001d06 <TIM_Base_SetConfig+0x62>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf4:	d007      	beq.n	8001d06 <TIM_Base_SetConfig+0x62>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d78 <TIM_Base_SetConfig+0xd4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <TIM_Base_SetConfig+0x62>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <TIM_Base_SetConfig+0xd8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d108      	bne.n	8001d18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d74 <TIM_Base_SetConfig+0xd0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d103      	bne.n	8001d4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f023 0201 	bic.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800

08001d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e042      	b.n	8001e3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fc44 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	@ 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fdb7 	bl	800295c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d175      	bne.n	8001f50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_UART_Transmit+0x2c>
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e06e      	b.n	8001f52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2221      	movs	r2, #33	@ 0x21
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e82:	f7fe fdbf 	bl	8000a04 <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	88fa      	ldrh	r2, [r7, #6]
 8001e8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	88fa      	ldrh	r2, [r7, #6]
 8001e92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e9c:	d108      	bne.n	8001eb0 <HAL_UART_Transmit+0x6c>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d104      	bne.n	8001eb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	e003      	b.n	8001eb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001eb8:	e02e      	b.n	8001f18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2180      	movs	r1, #128	@ 0x80
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fb1c 	bl	8002502 <UART_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03a      	b.n	8001f52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	e007      	b.n	8001f0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	3301      	adds	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1cb      	bne.n	8001eba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2140      	movs	r1, #64	@ 0x40
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fae8 	bl	8002502 <UART_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e006      	b.n	8001f52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	4613      	mov	r3, r2
 8001f66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d112      	bne.n	8001f9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_UART_Receive_IT+0x26>
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e00b      	b.n	8001f9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fb0f 	bl	80025b4 <UART_Start_Receive_IT>
 8001f96:	4603      	mov	r3, r0
 8001f98:	e000      	b.n	8001f9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
  }
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0ba      	sub	sp, #232	@ 0xe8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_UART_IRQHandler+0x66>
 8001ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fbec 	bl	80027e0 <UART_Receive_IT>
      return;
 8002008:	e25b      	b.n	80024c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800200a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80de 	beq.w	80021d0 <HAL_UART_IRQHandler+0x22c>
 8002014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002024:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80d1 	beq.w	80021d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800202e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_UART_IRQHandler+0xae>
 800203a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_UART_IRQHandler+0xd2>
 800205e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f043 0202 	orr.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_UART_IRQHandler+0xf6>
 8002082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f043 0204 	orr.w	r2, r3, #4
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800209a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d011      	beq.n	80020ca <HAL_UART_IRQHandler+0x126>
 80020a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f043 0208 	orr.w	r2, r3, #8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 81f2 	beq.w	80024b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_UART_IRQHandler+0x14e>
 80020e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fb77 	bl	80027e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_UART_IRQHandler+0x17a>
 8002116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d04f      	beq.n	80021be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fa81 	bl	8002626 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d041      	beq.n	80021b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3314      	adds	r3, #20
 8002138:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800214c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3314      	adds	r3, #20
 800215a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800215e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800216a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800216e:	e841 2300 	strex	r3, r2, [r1]
 8002172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1d9      	bne.n	8002132 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d013      	beq.n	80021ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218a:	4a7e      	ldr	r2, [pc, #504]	@ (8002384 <HAL_UART_IRQHandler+0x3e0>)
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fd5a 	bl	8000c4c <HAL_DMA_Abort_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d016      	beq.n	80021cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021a8:	4610      	mov	r0, r2
 80021aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ac:	e00e      	b.n	80021cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f993 	bl	80024da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b4:	e00a      	b.n	80021cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f98f 	bl	80024da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021bc:	e006      	b.n	80021cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f98b 	bl	80024da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021ca:	e175      	b.n	80024b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021cc:	bf00      	nop
    return;
 80021ce:	e173      	b.n	80024b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	f040 814f 	bne.w	8002478 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8148 	beq.w	8002478 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8141 	beq.w	8002478 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80b6 	beq.w	8002388 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8145 	beq.w	80024bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800223a:	429a      	cmp	r2, r3
 800223c:	f080 813e 	bcs.w	80024bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002246:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b20      	cmp	r3, #32
 8002250:	f000 8088 	beq.w	8002364 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002262:	e853 3f00 	ldrex	r3, [r3]
 8002266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800226a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800226e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002272:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002280:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002288:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800228c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002290:	e841 2300 	strex	r3, r2, [r1]
 8002294:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1d9      	bne.n	8002254 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3314      	adds	r3, #20
 80022a6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022aa:	e853 3f00 	ldrex	r3, [r3]
 80022ae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3314      	adds	r3, #20
 80022c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022c4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022d0:	e841 2300 	strex	r3, r2, [r1]
 80022d4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e1      	bne.n	80022a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3314      	adds	r3, #20
 80022e2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022e6:	e853 3f00 	ldrex	r3, [r3]
 80022ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3314      	adds	r3, #20
 80022fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002300:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002302:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002304:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002306:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002308:	e841 2300 	strex	r3, r2, [r1]
 800230c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800230e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e3      	bne.n	80022dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800232c:	e853 3f00 	ldrex	r3, [r3]
 8002330:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002334:	f023 0310 	bic.w	r3, r3, #16
 8002338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002346:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002348:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800234c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800234e:	e841 2300 	strex	r3, r2, [r1]
 8002352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e3      	bne.n	8002322 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fc39 	bl	8000bd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002372:	b29b      	uxth	r3, r3
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	b29b      	uxth	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8b6 	bl	80024ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002380:	e09c      	b.n	80024bc <HAL_UART_IRQHandler+0x518>
 8002382:	bf00      	nop
 8002384:	080026eb 	.word	0x080026eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002390:	b29b      	uxth	r3, r3
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 808e 	beq.w	80024c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8089 	beq.w	80024c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	330c      	adds	r3, #12
 80023ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80023d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023da:	e841 2300 	strex	r3, r2, [r1]
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e3      	bne.n	80023ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3314      	adds	r3, #20
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	e853 3f00 	ldrex	r3, [r3]
 80023f4:	623b      	str	r3, [r7, #32]
   return(result);
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3314      	adds	r3, #20
 8002406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800240a:	633a      	str	r2, [r7, #48]	@ 0x30
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e3      	bne.n	80023e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	e853 3f00 	ldrex	r3, [r3]
 800243a:	60fb      	str	r3, [r7, #12]
   return(result);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0310 	bic.w	r3, r3, #16
 8002442:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002450:	61fa      	str	r2, [r7, #28]
 8002452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002454:	69b9      	ldr	r1, [r7, #24]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	e841 2300 	strex	r3, r2, [r1]
 800245c:	617b      	str	r3, [r7, #20]
   return(result);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e3      	bne.n	800242c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800246a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f83b 	bl	80024ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002476:	e023      	b.n	80024c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800247c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_UART_IRQHandler+0x4f4>
 8002484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f93e 	bl	8002712 <UART_Transmit_IT>
    return;
 8002496:	e014      	b.n	80024c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800249c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <HAL_UART_IRQHandler+0x51e>
 80024a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f97d 	bl	80027b0 <UART_EndTransmit_IT>
    return;
 80024b6:	e004      	b.n	80024c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80024b8:	bf00      	nop
 80024ba:	e002      	b.n	80024c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80024c0:	bf00      	nop
  }
}
 80024c2:	37e8      	adds	r7, #232	@ 0xe8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002512:	e03b      	b.n	800258c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d037      	beq.n	800258c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251c:	f7fe fa72 	bl	8000a04 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	429a      	cmp	r2, r3
 800252a:	d302      	bcc.n	8002532 <UART_WaitOnFlagUntilTimeout+0x30>
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e03a      	b.n	80025ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b80      	cmp	r3, #128	@ 0x80
 8002548:	d020      	beq.n	800258c <UART_WaitOnFlagUntilTimeout+0x8a>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	d01d      	beq.n	800258c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b08      	cmp	r3, #8
 800255c:	d116      	bne.n	800258c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f856 	bl	8002626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2208      	movs	r2, #8
 800257e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e00f      	b.n	80025ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4013      	ands	r3, r2
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d0b4      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2222      	movs	r2, #34	@ 0x22
 80025de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0220 	orr.w	r2, r2, #32
 8002618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002626:	b480      	push	{r7}
 8002628:	b095      	sub	sp, #84	@ 0x54
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002638:	e853 3f00 	ldrex	r3, [r3]
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330c      	adds	r3, #12
 800264c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800264e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002652:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800265c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1e5      	bne.n	800262e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3314      	adds	r3, #20
 8002668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	61fb      	str	r3, [r7, #28]
   return(result);
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3314      	adds	r3, #20
 8002680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e5      	bne.n	8002662 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	2b01      	cmp	r3, #1
 800269c:	d119      	bne.n	80026d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f023 0310 	bic.w	r3, r3, #16
 80026b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026be:	61ba      	str	r2, [r7, #24]
 80026c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	6979      	ldr	r1, [r7, #20]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	613b      	str	r3, [r7, #16]
   return(result);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e5      	bne.n	800269e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026e0:	bf00      	nop
 80026e2:	3754      	adds	r7, #84	@ 0x54
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff fee8 	bl	80024da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b21      	cmp	r3, #33	@ 0x21
 8002724:	d13e      	bne.n	80027a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272e:	d114      	bne.n	800275a <UART_Transmit_IT+0x48>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d110      	bne.n	800275a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800274c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	1c9a      	adds	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	621a      	str	r2, [r3, #32]
 8002758:	e008      	b.n	800276c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	1c59      	adds	r1, r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6211      	str	r1, [r2, #32]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4619      	mov	r1, r3
 800277a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10f      	bne.n	80027a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800278e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800279e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fe79 	bl	80024c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b22      	cmp	r3, #34	@ 0x22
 80027f2:	f040 80ae 	bne.w	8002952 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fe:	d117      	bne.n	8002830 <UART_Receive_IT+0x50>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d113      	bne.n	8002830 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281e:	b29a      	uxth	r2, r3
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	1c9a      	adds	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
 800282e:	e026      	b.n	800287e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002842:	d007      	beq.n	8002854 <UART_Receive_IT+0x74>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <UART_Receive_IT+0x82>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e008      	b.n	8002874 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800286e:	b2da      	uxtb	r2, r3
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4619      	mov	r1, r3
 800288c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800288e:	2b00      	cmp	r3, #0
 8002890:	d15d      	bne.n	800294e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0220 	bic.w	r2, r2, #32
 80028a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d135      	bne.n	8002944 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	613b      	str	r3, [r7, #16]
   return(result);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f023 0310 	bic.w	r3, r3, #16
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fe:	623a      	str	r2, [r7, #32]
 8002900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	69f9      	ldr	r1, [r7, #28]
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	61bb      	str	r3, [r7, #24]
   return(result);
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e5      	bne.n	80028de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d10a      	bne.n	8002936 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fdd5 	bl	80024ec <HAL_UARTEx_RxEventCallback>
 8002942:	e002      	b.n	800294a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fd fc19 	bl	800017c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e002      	b.n	8002954 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3730      	adds	r7, #48	@ 0x30
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002996:	f023 030c 	bic.w	r3, r3, #12
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2c      	ldr	r2, [pc, #176]	@ (8002a70 <UART_SetConfig+0x114>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d103      	bne.n	80029cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029c4:	f7fe ff4e 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	e002      	b.n	80029d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029cc:	f7fe ff36 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 80029d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009a      	lsls	r2, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	4a22      	ldr	r2, [pc, #136]	@ (8002a74 <UART_SetConfig+0x118>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	0119      	lsls	r1, r3, #4
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <UART_SetConfig+0x118>)
 8002a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2064      	movs	r0, #100	@ 0x64
 8002a12:	fb00 f303 	mul.w	r3, r0, r3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	3332      	adds	r3, #50	@ 0x32
 8002a1c:	4a15      	ldr	r2, [pc, #84]	@ (8002a74 <UART_SetConfig+0x118>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a28:	4419      	add	r1, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	009a      	lsls	r2, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <UART_SetConfig+0x118>)
 8002a42:	fba3 0302 	umull	r0, r3, r3, r2
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2064      	movs	r0, #100	@ 0x64
 8002a4a:	fb00 f303 	mul.w	r3, r0, r3
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	3332      	adds	r3, #50	@ 0x32
 8002a54:	4a07      	ldr	r2, [pc, #28]	@ (8002a74 <UART_SetConfig+0x118>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	f003 020f 	and.w	r2, r3, #15
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	440a      	add	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40013800 	.word	0x40013800
 8002a74:	51eb851f 	.word	0x51eb851f

08002a78 <__NVIC_SetPriority>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	@ (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	@ (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <SysTick_Handler+0x1c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ad4:	f002 fa0c 	bl	8004ef0 <xTaskGetSchedulerState>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ade:	f003 f8b3 	bl	8005c48 <xPortSysTickHandler>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002af0:	2100      	movs	r1, #0
 8002af2:	f06f 0004 	mvn.w	r0, #4
 8002af6:	f7ff ffbf 	bl	8002a78 <__NVIC_SetPriority>
#endif
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b06:	f3ef 8305 	mrs	r3, IPSR
 8002b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b12:	f06f 0305 	mvn.w	r3, #5
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	e00c      	b.n	8002b34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <osKernelInitialize+0x40>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b22:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <osKernelInitialize+0x40>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	e002      	b.n	8002b34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	200001a0 	.word	0x200001a0

08002b44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b4a:	f3ef 8305 	mrs	r3, IPSR
 8002b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8002b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b56:	f06f 0305 	mvn.w	r3, #5
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	e010      	b.n	8002b80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <osKernelStart+0x48>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d109      	bne.n	8002b7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b66:	f7ff ffc1 	bl	8002aec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b6a:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <osKernelStart+0x48>)
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b70:	f001 fd4c 	bl	800460c <vTaskStartScheduler>
      stat = osOK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	e002      	b.n	8002b80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200001a0 	.word	0x200001a0

08002b90 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b96:	f3ef 8305 	mrs	r3, IPSR
 8002b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b9c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002ba2:	f001 fe5d 	bl	8004860 <xTaskGetTickCountFromISR>
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	e002      	b.n	8002bb0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8002baa:	f001 fe4b 	bl	8004844 <xTaskGetTickCount>
 8002bae:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002bb0:	687b      	ldr	r3, [r7, #4]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b08e      	sub	sp, #56	@ 0x38
 8002bbe:	af04      	add	r7, sp, #16
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bca:	f3ef 8305 	mrs	r3, IPSR
 8002bce:	617b      	str	r3, [r7, #20]
  return(result);
 8002bd0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d17e      	bne.n	8002cd4 <osThreadNew+0x11a>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d07b      	beq.n	8002cd4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002be0:	2318      	movs	r3, #24
 8002be2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d045      	beq.n	8002c80 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <osThreadNew+0x48>
        name = attr->name;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <osThreadNew+0x6e>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b38      	cmp	r3, #56	@ 0x38
 8002c1a:	d805      	bhi.n	8002c28 <osThreadNew+0x6e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <osThreadNew+0x72>
        return (NULL);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e054      	b.n	8002cd6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <osThreadNew+0xa8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c4a:	d90a      	bls.n	8002c62 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <osThreadNew+0xa8>
        mem = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	e010      	b.n	8002c84 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <osThreadNew+0xca>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <osThreadNew+0xca>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <osThreadNew+0xca>
          mem = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e001      	b.n	8002c84 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d110      	bne.n	8002cac <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c92:	9202      	str	r2, [sp, #8]
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f001 fa75 	bl	8004190 <xTaskCreateStatic>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e013      	b.n	8002cd4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d110      	bne.n	8002cd4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f001 fac3 	bl	8004250 <xTaskCreate>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d001      	beq.n	8002cd4 <osThreadNew+0x11a>
            hTask = NULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cd4:	693b      	ldr	r3, [r7, #16]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3728      	adds	r7, #40	@ 0x28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ce6:	f3ef 8305 	mrs	r3, IPSR
 8002cea:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cec:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <osDelayUntil+0x1c>
    stat = osErrorISR;
 8002cf2:	f06f 0305 	mvn.w	r3, #5
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e019      	b.n	8002d2e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8002cfe:	f001 fda1 	bl	8004844 <xTaskGetTickCount>
 8002d02:	4603      	mov	r3, r0
 8002d04:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <osDelayUntil+0x4a>
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db06      	blt.n	8002d28 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	6939      	ldr	r1, [r7, #16]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 fbf3 	bl	800450c <vTaskDelayUntil>
 8002d26:	e002      	b.n	8002d2e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8002d28:	f06f 0303 	mvn.w	r3, #3
 8002d2c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002d2e:	697b      	ldr	r3, [r7, #20]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d48:	f3ef 8305 	mrs	r3, IPSR
 8002d4c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d175      	bne.n	8002e40 <osSemaphoreNew+0x108>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d072      	beq.n	8002e40 <osSemaphoreNew+0x108>
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d86e      	bhi.n	8002e40 <osSemaphoreNew+0x108>
    mem = -1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <osSemaphoreNew+0x4c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b4f      	cmp	r3, #79	@ 0x4f
 8002d7c:	d902      	bls.n	8002d84 <osSemaphoreNew+0x4c>
        mem = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	e00c      	b.n	8002d9e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d108      	bne.n	8002d9e <osSemaphoreNew+0x66>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <osSemaphoreNew+0x66>
          mem = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	e001      	b.n	8002d9e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d04c      	beq.n	8002e40 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d128      	bne.n	8002dfe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10a      	bne.n	8002dc8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2203      	movs	r2, #3
 8002db8:	9200      	str	r2, [sp, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f000 fa26 	bl	8003210 <xQueueGenericCreateStatic>
 8002dc4:	61f8      	str	r0, [r7, #28]
 8002dc6:	e005      	b.n	8002dd4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002dc8:	2203      	movs	r2, #3
 8002dca:	2100      	movs	r1, #0
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f000 fa9c 	bl	800330a <xQueueGenericCreate>
 8002dd2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d022      	beq.n	8002e20 <osSemaphoreNew+0xe8>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01f      	beq.n	8002e20 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002de0:	2300      	movs	r3, #0
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	69f8      	ldr	r0, [r7, #28]
 8002de8:	f000 fb5c 	bl	80034a4 <xQueueGenericSend>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d016      	beq.n	8002e20 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002df2:	69f8      	ldr	r0, [r7, #28]
 8002df4:	f000 fffa 	bl	8003dec <vQueueDelete>
            hSemaphore = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e010      	b.n	8002e20 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d108      	bne.n	8002e16 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fada 	bl	80033c6 <xQueueCreateCountingSemaphoreStatic>
 8002e12:	61f8      	str	r0, [r7, #28]
 8002e14:	e004      	b.n	8002e20 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fb0d 	bl	8003438 <xQueueCreateCountingSemaphore>
 8002e1e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e001      	b.n	8002e38 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002e38:	6979      	ldr	r1, [r7, #20]
 8002e3a:	69f8      	ldr	r0, [r7, #28]
 8002e3c:	f001 f922 	bl	8004084 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002e40:	69fb      	ldr	r3, [r7, #28]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002e64:	f06f 0303 	mvn.w	r3, #3
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e039      	b.n	8002ee0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e6c:	f3ef 8305 	mrs	r3, IPSR
 8002e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d022      	beq.n	8002ebe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002e7e:	f06f 0303 	mvn.w	r3, #3
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e02c      	b.n	8002ee0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2100      	movs	r1, #0
 8002e92:	6938      	ldr	r0, [r7, #16]
 8002e94:	f000 ff28 	bl	8003ce8 <xQueueReceiveFromISR>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d003      	beq.n	8002ea6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002e9e:	f06f 0302 	mvn.w	r3, #2
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e01c      	b.n	8002ee0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d019      	beq.n	8002ee0 <osSemaphoreAcquire+0x94>
 8002eac:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <osSemaphoreAcquire+0xa0>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	e010      	b.n	8002ee0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002ebe:	6839      	ldr	r1, [r7, #0]
 8002ec0:	6938      	ldr	r0, [r7, #16]
 8002ec2:	f000 fe01 	bl	8003ac8 <xQueueSemaphoreTake>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d009      	beq.n	8002ee0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002ed2:	f06f 0301 	mvn.w	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e002      	b.n	8002ee0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002eda:	f06f 0302 	mvn.w	r3, #2
 8002ede:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002ee0:	697b      	ldr	r3, [r7, #20]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000ed04 	.word	0xe000ed04

08002ef0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002f06:	f06f 0303 	mvn.w	r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e02c      	b.n	8002f68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f0e:	f3ef 8305 	mrs	r3, IPSR
 8002f12:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01a      	beq.n	8002f50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4619      	mov	r1, r3
 8002f24:	6938      	ldr	r0, [r7, #16]
 8002f26:	f000 fc5d 	bl	80037e4 <xQueueGiveFromISR>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d003      	beq.n	8002f38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002f30:	f06f 0302 	mvn.w	r3, #2
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e017      	b.n	8002f68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d014      	beq.n	8002f68 <osSemaphoreRelease+0x78>
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <osSemaphoreRelease+0x84>)
 8002f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	e00b      	b.n	8002f68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	6938      	ldr	r0, [r7, #16]
 8002f58:	f000 faa4 	bl	80034a4 <xQueueGenericSend>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d002      	beq.n	8002f68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002f62:	f06f 0302 	mvn.w	r3, #2
 8002f66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002f68:	697b      	ldr	r3, [r7, #20]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a06      	ldr	r2, [pc, #24]	@ (8002fa0 <vApplicationGetIdleTaskMemory+0x28>)
 8002f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4a05      	ldr	r2, [pc, #20]	@ (8002fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2280      	movs	r2, #128	@ 0x80
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	200001a4 	.word	0x200001a4
 8002fa4:	2000024c 	.word	0x2000024c

08002fa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a07      	ldr	r2, [pc, #28]	@ (8002fd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a06      	ldr	r2, [pc, #24]	@ (8002fd8 <vApplicationGetTimerTaskMemory+0x30>)
 8002fbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fc6:	601a      	str	r2, [r3, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000044c 	.word	0x2000044c
 8002fd8:	200004f4 	.word	0x200004f4

08002fdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f103 0208 	add.w	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f103 0208 	add.w	r2, r3, #8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 0208 	add.w	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d103      	bne.n	8003098 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e00c      	b.n	80030b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3308      	adds	r3, #8
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e002      	b.n	80030a6 <vListInsert+0x2e>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d2f6      	bcs.n	80030a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6892      	ldr	r2, [r2, #8]
 80030fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6852      	ldr	r2, [r2, #4]
 8003108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d103      	bne.n	800311c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003168:	f002 fcf0 	bl	8005b4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	441a      	add	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003198:	3b01      	subs	r3, #1
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	441a      	add	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22ff      	movs	r2, #255	@ 0xff
 80031ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	22ff      	movs	r2, #255	@ 0xff
 80031b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d114      	bne.n	80031e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01a      	beq.n	80031fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3310      	adds	r3, #16
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fcca 	bl	8004b64 <xTaskRemoveFromEventList>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <xQueueGenericReset+0xd0>)
 80031d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	e009      	b.n	80031fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3310      	adds	r3, #16
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fef5 	bl	8002fdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3324      	adds	r3, #36	@ 0x24
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fef0 	bl	8002fdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031fc:	f002 fcd6 	bl	8005bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003200:	2301      	movs	r3, #1
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08e      	sub	sp, #56	@ 0x38
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <xQueueGenericCreateStatic+0x56>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <xQueueGenericCreateStatic+0x5a>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <xQueueGenericCreateStatic+0x5c>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	623b      	str	r3, [r7, #32]
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <xQueueGenericCreateStatic+0x84>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <xQueueGenericCreateStatic+0x88>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <xQueueGenericCreateStatic+0x8a>
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	61fb      	str	r3, [r7, #28]
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	e7fd      	b.n	80032b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032b6:	2350      	movs	r3, #80	@ 0x50
 80032b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b50      	cmp	r3, #80	@ 0x50
 80032be:	d00b      	beq.n	80032d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61bb      	str	r3, [r7, #24]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80032f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f840 	bl	8003380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003302:	4618      	mov	r0, r3
 8003304:	3730      	adds	r7, #48	@ 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800330a:	b580      	push	{r7, lr}
 800330c:	b08a      	sub	sp, #40	@ 0x28
 800330e:	af02      	add	r7, sp, #8
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <xQueueGenericCreate+0x2c>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	613b      	str	r3, [r7, #16]
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3350      	adds	r3, #80	@ 0x50
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fd03 	bl	8005d50 <pvPortMalloc>
 800334a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d011      	beq.n	8003376 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3350      	adds	r3, #80	@ 0x50
 800335a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003364:	79fa      	ldrb	r2, [r7, #7]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f805 	bl	8003380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003376:	69bb      	ldr	r3, [r7, #24]
	}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e002      	b.n	80033a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ae:	2101      	movs	r1, #1
 80033b0:	69b8      	ldr	r0, [r7, #24]
 80033b2:	f7ff fec3 	bl	800313c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08a      	sub	sp, #40	@ 0x28
 80033ca:	af02      	add	r7, sp, #8
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61bb      	str	r3, [r7, #24]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d90b      	bls.n	8003410 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	617b      	str	r3, [r7, #20]
}
 800340a:	bf00      	nop
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003410:	2302      	movs	r3, #2
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fef8 	bl	8003210 <xQueueGenericCreateStatic>
 8003420:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800342e:	69fb      	ldr	r3, [r7, #28]
	}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	613b      	str	r3, [r7, #16]
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	d90b      	bls.n	8003480 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003480:	2202      	movs	r2, #2
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff40 	bl	800330a <xQueueGenericCreate>
 800348a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003498:	697b      	ldr	r3, [r7, #20]
	}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08e      	sub	sp, #56	@ 0x38
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034b2:	2300      	movs	r3, #0
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueGenericSend+0x34>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <xQueueGenericSend+0x42>
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <xQueueGenericSend+0x46>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <xQueueGenericSend+0x48>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <xQueueGenericSend+0x64>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d103      	bne.n	8003516 <xQueueGenericSend+0x72>
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <xQueueGenericSend+0x76>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <xQueueGenericSend+0x78>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <xQueueGenericSend+0x94>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	623b      	str	r3, [r7, #32]
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003538:	f001 fcda 	bl	8004ef0 <xTaskGetSchedulerState>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <xQueueGenericSend+0xa4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <xQueueGenericSend+0xa8>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <xQueueGenericSend+0xaa>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <xQueueGenericSend+0xc6>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	61fb      	str	r3, [r7, #28]
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800356a:	f002 faef 	bl	8005b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <xQueueGenericSend+0xdc>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d129      	bne.n	80035d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003586:	f000 fc6c 	bl	8003e62 <prvCopyDataToQueue>
 800358a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	3324      	adds	r3, #36	@ 0x24
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fae3 	bl	8004b64 <xTaskRemoveFromEventList>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035a4:	4b3f      	ldr	r3, [pc, #252]	@ (80036a4 <xQueueGenericSend+0x200>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	e00a      	b.n	80035cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035bc:	4b39      	ldr	r3, [pc, #228]	@ (80036a4 <xQueueGenericSend+0x200>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035cc:	f002 faee 	bl	8005bac <vPortExitCritical>
				return pdPASS;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e063      	b.n	800369c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035da:	f002 fae7 	bl	8005bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	e05c      	b.n	800369c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fb1d 	bl	8004c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035f6:	f002 fad9 	bl	8005bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035fa:	f001 f877 	bl	80046ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035fe:	f002 faa5 	bl	8005b4c <vPortEnterCritical>
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003608:	b25b      	sxtb	r3, r3
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d103      	bne.n	8003618 <xQueueGenericSend+0x174>
 8003610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800361e:	b25b      	sxtb	r3, r3
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d103      	bne.n	800362e <xQueueGenericSend+0x18a>
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800362e:	f002 fabd 	bl	8005bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003632:	1d3a      	adds	r2, r7, #4
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fb0c 	bl	8004c58 <xTaskCheckForTimeOut>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d124      	bne.n	8003690 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003648:	f000 fd03 	bl	8004052 <prvIsQueueFull>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	3310      	adds	r3, #16
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fa30 	bl	8004ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003662:	f000 fc8e 	bl	8003f82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003666:	f001 f84f 	bl	8004708 <xTaskResumeAll>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f af7c 	bne.w	800356a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003672:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <xQueueGenericSend+0x200>)
 8003674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	e772      	b.n	800356a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003686:	f000 fc7c 	bl	8003f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800368a:	f001 f83d 	bl	8004708 <xTaskResumeAll>
 800368e:	e76c      	b.n	800356a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003692:	f000 fc76 	bl	8003f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003696:	f001 f837 	bl	8004708 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800369a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800369c:	4618      	mov	r0, r3
 800369e:	3738      	adds	r7, #56	@ 0x38
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b090      	sub	sp, #64	@ 0x40
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <xQueueGenericSendFromISR+0x3e>
 80036de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <xQueueGenericSendFromISR+0x42>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <xQueueGenericSendFromISR+0x44>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d103      	bne.n	8003716 <xQueueGenericSendFromISR+0x6e>
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <xQueueGenericSendFromISR+0x72>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericSendFromISR+0x74>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	623b      	str	r3, [r7, #32]
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003738:	f002 faca 	bl	8005cd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800373c:	f3ef 8211 	mrs	r2, BASEPRI
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61fa      	str	r2, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003754:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <xQueueGenericSendFromISR+0xc2>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d12f      	bne.n	80037ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003770:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003780:	f000 fb6f 	bl	8003e62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003784:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d112      	bne.n	80037b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003798:	3324      	adds	r3, #36	@ 0x24
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f9e2 	bl	8004b64 <xTaskRemoveFromEventList>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00e      	beq.n	80037c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e007      	b.n	80037c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037b8:	3301      	adds	r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	b25a      	sxtb	r2, r3
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80037c4:	2301      	movs	r3, #1
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80037c8:	e001      	b.n	80037ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3740      	adds	r7, #64	@ 0x40
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	@ 0x38
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	623b      	str	r3, [r7, #32]
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	61fb      	str	r3, [r7, #28]
}
 800382a:	bf00      	nop
 800382c:	bf00      	nop
 800382e:	e7fd      	b.n	800382c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <xQueueGiveFromISR+0x5c>
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <xQueueGiveFromISR+0x60>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <xQueueGiveFromISR+0x62>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	61bb      	str	r3, [r7, #24]
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	e7fd      	b.n	800385e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003862:	f002 fa35 	bl	8005cd0 <vPortValidateInterruptPriority>
	__asm volatile
 8003866:	f3ef 8211 	mrs	r2, BASEPRI
 800386a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	617a      	str	r2, [r7, #20]
 800387c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800387e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800388e:	429a      	cmp	r2, r3
 8003890:	d22b      	bcs.n	80038ea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d112      	bne.n	80038d4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	3324      	adds	r3, #36	@ 0x24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f952 	bl	8004b64 <xTaskRemoveFromEventList>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e007      	b.n	80038e4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d8:	3301      	adds	r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	b25a      	sxtb	r2, r3
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038e4:	2301      	movs	r3, #1
 80038e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e8:	e001      	b.n	80038ee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f383 8811 	msr	BASEPRI, r3
}
 80038f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3738      	adds	r7, #56	@ 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	@ 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xQueueReceive+0x32>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	623b      	str	r3, [r7, #32]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <xQueueReceive+0x40>
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <xQueueReceive+0x44>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <xQueueReceive+0x46>
 8003948:	2300      	movs	r3, #0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <xQueueReceive+0x62>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	61fb      	str	r3, [r7, #28]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003966:	f001 fac3 	bl	8004ef0 <xTaskGetSchedulerState>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <xQueueReceive+0x72>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xQueueReceive+0x76>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueReceive+0x78>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <xQueueReceive+0x94>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	61bb      	str	r3, [r7, #24]
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003998:	f002 f8d8 	bl	8005b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01f      	beq.n	80039e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039ac:	f000 fac3 	bl	8003f36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00f      	beq.n	80039e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	3310      	adds	r3, #16
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f8cd 	bl	8004b64 <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039d0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac4 <xQueueReceive+0x1c0>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039e0:	f002 f8e4 	bl	8005bac <vPortExitCritical>
				return pdPASS;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e069      	b.n	8003abc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ee:	f002 f8dd 	bl	8005bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e062      	b.n	8003abc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 f913 	bl	8004c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a0a:	f002 f8cf 	bl	8005bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a0e:	f000 fe6d 	bl	80046ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a12:	f002 f89b 	bl	8005b4c <vPortEnterCritical>
 8003a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d103      	bne.n	8003a2c <xQueueReceive+0x128>
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d103      	bne.n	8003a42 <xQueueReceive+0x13e>
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a42:	f002 f8b3 	bl	8005bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a46:	1d3a      	adds	r2, r7, #4
 8003a48:	f107 0310 	add.w	r3, r7, #16
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f902 	bl	8004c58 <xTaskCheckForTimeOut>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d123      	bne.n	8003aa2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a5c:	f000 fae3 	bl	8004026 <prvIsQueueEmpty>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d017      	beq.n	8003a96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a68:	3324      	adds	r3, #36	@ 0x24
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f826 	bl	8004ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a76:	f000 fa84 	bl	8003f82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a7a:	f000 fe45 	bl	8004708 <xTaskResumeAll>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d189      	bne.n	8003998 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <xQueueReceive+0x1c0>)
 8003a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	e780      	b.n	8003998 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a98:	f000 fa73 	bl	8003f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a9c:	f000 fe34 	bl	8004708 <xTaskResumeAll>
 8003aa0:	e77a      	b.n	8003998 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aa4:	f000 fa6d 	bl	8003f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aa8:	f000 fe2e 	bl	8004708 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aae:	f000 faba 	bl	8004026 <prvIsQueueEmpty>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f43f af6f 	beq.w	8003998 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3730      	adds	r7, #48	@ 0x30
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08e      	sub	sp, #56	@ 0x38
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	61fb      	str	r3, [r7, #28]
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b1c:	f001 f9e8 	bl	8004ef0 <xTaskGetSchedulerState>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <xQueueSemaphoreTake+0x64>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <xQueueSemaphoreTake+0x68>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <xQueueSemaphoreTake+0x6a>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	61bb      	str	r3, [r7, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	e7fd      	b.n	8003b4a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b4e:	f001 fffd 	bl	8005b4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d024      	beq.n	8003ba8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b64:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b6e:	f001 fb39 	bl	80051e4 <pvTaskIncrementMutexHeldCount>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00f      	beq.n	8003ba0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b82:	3310      	adds	r3, #16
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 ffed 	bl	8004b64 <xTaskRemoveFromEventList>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b54      	ldr	r3, [pc, #336]	@ (8003ce4 <xQueueSemaphoreTake+0x21c>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba0:	f002 f804 	bl	8005bac <vPortExitCritical>
				return pdPASS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e098      	b.n	8003cda <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d112      	bne.n	8003bd4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	617b      	str	r3, [r7, #20]
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003bcc:	f001 ffee 	bl	8005bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e082      	b.n	8003cda <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f824 	bl	8004c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be8:	f001 ffe0 	bl	8005bac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bec:	f000 fd7e 	bl	80046ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf0:	f001 ffac 	bl	8005b4c <vPortEnterCritical>
 8003bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d103      	bne.n	8003c0a <xQueueSemaphoreTake+0x142>
 8003c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d103      	bne.n	8003c20 <xQueueSemaphoreTake+0x158>
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c20:	f001 ffc4 	bl	8005bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c24:	463a      	mov	r2, r7
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 f813 	bl	8004c58 <xTaskCheckForTimeOut>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d132      	bne.n	8003c9e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c3a:	f000 f9f4 	bl	8004026 <prvIsQueueEmpty>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d026      	beq.n	8003c92 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003c4c:	f001 ff7e 	bl	8005b4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 f969 	bl	8004f2c <xTaskPriorityInherit>
 8003c5a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003c5c:	f001 ffa6 	bl	8005bac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c62:	3324      	adds	r3, #36	@ 0x24
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 ff29 	bl	8004ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c70:	f000 f987 	bl	8003f82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c74:	f000 fd48 	bl	8004708 <xTaskResumeAll>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f47f af67 	bne.w	8003b4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003c80:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <xQueueSemaphoreTake+0x21c>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	e75d      	b.n	8003b4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c94:	f000 f975 	bl	8003f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c98:	f000 fd36 	bl	8004708 <xTaskResumeAll>
 8003c9c:	e757      	b.n	8003b4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ca0:	f000 f96f 	bl	8003f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ca4:	f000 fd30 	bl	8004708 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003caa:	f000 f9bc 	bl	8004026 <prvIsQueueEmpty>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f43f af4c 	beq.w	8003b4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003cbc:	f001 ff46 	bl	8005b4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cc2:	f000 f8b7 	bl	8003e34 <prvGetDisinheritPriorityAfterTimeout>
 8003cc6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fa04 	bl	80050dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003cd4:	f001 ff6a 	bl	8005bac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3738      	adds	r7, #56	@ 0x38
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08e      	sub	sp, #56	@ 0x38
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	623b      	str	r3, [r7, #32]
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <xQueueReceiveFromISR+0x3c>
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <xQueueReceiveFromISR+0x40>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <xQueueReceiveFromISR+0x42>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	61fb      	str	r3, [r7, #28]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d46:	f001 ffc3 	bl	8005cd0 <vPortValidateInterruptPriority>
	__asm volatile
 8003d4a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	61ba      	str	r2, [r7, #24]
 8003d60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003d62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02f      	beq.n	8003dd2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d80:	f000 f8d9 	bl	8003f36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d112      	bne.n	8003dbc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	3310      	adds	r3, #16
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fede 	bl	8004b64 <xTaskRemoveFromEventList>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	b25a      	sxtb	r2, r3
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd0:	e001      	b.n	8003dd6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f383 8811 	msr	BASEPRI, r3
}
 8003de0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3738      	adds	r7, #56	@ 0x38
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <vQueueDelete+0x2a>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	60bb      	str	r3, [r7, #8]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f95c 	bl	80040d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f002 f860 	bl	8005eec <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e001      	b.n	8003e56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e56:	68fb      	ldr	r3, [r7, #12]
	}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d14d      	bne.n	8003f24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f8b5 	bl	8004ffc <xTaskPriorityDisinherit>
 8003e92:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	e043      	b.n	8003f24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d119      	bne.n	8003ed6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6858      	ldr	r0, [r3, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	f002 fb24 	bl	80064fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	441a      	add	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d32b      	bcc.n	8003f24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	e026      	b.n	8003f24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68d8      	ldr	r0, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	f002 fb0a 	bl	80064fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	425b      	negs	r3, r3
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d207      	bcs.n	8003f12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	441a      	add	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d105      	bne.n	8003f24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f2c:	697b      	ldr	r3, [r7, #20]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d018      	beq.n	8003f7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	441a      	add	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d303      	bcc.n	8003f6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68d9      	ldr	r1, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	461a      	mov	r2, r3
 8003f74:	6838      	ldr	r0, [r7, #0]
 8003f76:	f002 fac0 	bl	80064fa <memcpy>
	}
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f8a:	f001 fddf 	bl	8005b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f96:	e011      	b.n	8003fbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d012      	beq.n	8003fc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3324      	adds	r3, #36	@ 0x24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fddd 	bl	8004b64 <xTaskRemoveFromEventList>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fb0:	f000 feb6 	bl	8004d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	dce9      	bgt.n	8003f98 <prvUnlockQueue+0x16>
 8003fc4:	e000      	b.n	8003fc8 <prvUnlockQueue+0x46>
					break;
 8003fc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	22ff      	movs	r2, #255	@ 0xff
 8003fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003fd0:	f001 fdec 	bl	8005bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fd4:	f001 fdba 	bl	8005b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fe0:	e011      	b.n	8004006 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3310      	adds	r3, #16
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fdb8 	bl	8004b64 <xTaskRemoveFromEventList>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ffa:	f000 fe91 	bl	8004d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ffe:	7bbb      	ldrb	r3, [r7, #14]
 8004000:	3b01      	subs	r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dce9      	bgt.n	8003fe2 <prvUnlockQueue+0x60>
 800400e:	e000      	b.n	8004012 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004010:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	22ff      	movs	r2, #255	@ 0xff
 8004016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800401a:	f001 fdc7 	bl	8005bac <vPortExitCritical>
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800402e:	f001 fd8d 	bl	8005b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800403a:	2301      	movs	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e001      	b.n	8004044 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004044:	f001 fdb2 	bl	8005bac <vPortExitCritical>

	return xReturn;
 8004048:	68fb      	ldr	r3, [r7, #12]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800405a:	f001 fd77 	bl	8005b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	429a      	cmp	r2, r3
 8004068:	d102      	bne.n	8004070 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e001      	b.n	8004074 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004074:	f001 fd9a 	bl	8005bac <vPortExitCritical>

	return xReturn;
 8004078:	68fb      	ldr	r3, [r7, #12]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e014      	b.n	80040be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004094:	4a0e      	ldr	r2, [pc, #56]	@ (80040d0 <vQueueAddToRegistry+0x4c>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040a0:	490b      	ldr	r1, [pc, #44]	@ (80040d0 <vQueueAddToRegistry+0x4c>)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040aa:	4a09      	ldr	r2, [pc, #36]	@ (80040d0 <vQueueAddToRegistry+0x4c>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040b6:	e006      	b.n	80040c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b07      	cmp	r3, #7
 80040c2:	d9e7      	bls.n	8004094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	200008f4 	.word	0x200008f4

080040d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e016      	b.n	8004110 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80040e2:	4a10      	ldr	r2, [pc, #64]	@ (8004124 <vQueueUnregisterQueue+0x50>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d10b      	bne.n	800410a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80040f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <vQueueUnregisterQueue+0x50>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2100      	movs	r1, #0
 80040f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80040fc:	4a09      	ldr	r2, [pc, #36]	@ (8004124 <vQueueUnregisterQueue+0x50>)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
				break;
 8004108:	e006      	b.n	8004118 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b07      	cmp	r3, #7
 8004114:	d9e5      	bls.n	80040e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	200008f4 	.word	0x200008f4

08004128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004138:	f001 fd08 	bl	8005b4c <vPortEnterCritical>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004142:	b25b      	sxtb	r3, r3
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d103      	bne.n	8004152 <vQueueWaitForMessageRestricted+0x2a>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004158:	b25b      	sxtb	r3, r3
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d103      	bne.n	8004168 <vQueueWaitForMessageRestricted+0x40>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004168:	f001 fd20 	bl	8005bac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3324      	adds	r3, #36	@ 0x24
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fcc5 	bl	8004b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff fefd 	bl	8003f82 <prvUnlockQueue>
	}
 8004188:	bf00      	nop
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08e      	sub	sp, #56	@ 0x38
 8004194:	af04      	add	r7, sp, #16
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800419e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	623b      	str	r3, [r7, #32]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <xTaskCreateStatic+0x4a>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61fb      	str	r3, [r7, #28]
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	e7fd      	b.n	80041d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041da:	23a8      	movs	r3, #168	@ 0xa8
 80041dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2ba8      	cmp	r3, #168	@ 0xa8
 80041e2:	d00b      	beq.n	80041fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	61bb      	str	r3, [r7, #24]
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01e      	beq.n	8004242 <xTaskCreateStatic+0xb2>
 8004204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01b      	beq.n	8004242 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	2202      	movs	r2, #2
 8004218:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800421c:	2300      	movs	r3, #0
 800421e:	9303      	str	r3, [sp, #12]
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f851 	bl	80042dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800423a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800423c:	f000 f8f6 	bl	800442c <prvAddNewTaskToReadyList>
 8004240:	e001      	b.n	8004246 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004246:	697b      	ldr	r3, [r7, #20]
	}
 8004248:	4618      	mov	r0, r3
 800424a:	3728      	adds	r7, #40	@ 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08c      	sub	sp, #48	@ 0x30
 8004254:	af04      	add	r7, sp, #16
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fd73 	bl	8005d50 <pvPortMalloc>
 800426a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004272:	20a8      	movs	r0, #168	@ 0xa8
 8004274:	f001 fd6c 	bl	8005d50 <pvPortMalloc>
 8004278:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
 8004286:	e005      	b.n	8004294 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004288:	6978      	ldr	r0, [r7, #20]
 800428a:	f001 fe2f 	bl	8005eec <vPortFree>
 800428e:	e001      	b.n	8004294 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	2300      	movs	r3, #0
 80042a6:	9303      	str	r3, [sp, #12]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	9302      	str	r3, [sp, #8]
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f80f 	bl	80042dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042be:	69f8      	ldr	r0, [r7, #28]
 80042c0:	f000 f8b4 	bl	800442c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042c4:	2301      	movs	r3, #1
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e002      	b.n	80042d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042d0:	69bb      	ldr	r3, [r7, #24]
	}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	461a      	mov	r2, r3
 80042f4:	21a5      	movs	r1, #165	@ 0xa5
 80042f6:	f002 f82e 	bl	8006356 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004304:	3b01      	subs	r3, #1
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	617b      	str	r3, [r7, #20]
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01f      	beq.n	800437c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	e012      	b.n	8004368 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4413      	add	r3, r2
 8004348:	7819      	ldrb	r1, [r3, #0]
 800434a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	3334      	adds	r3, #52	@ 0x34
 8004352:	460a      	mov	r2, r1
 8004354:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3301      	adds	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b0f      	cmp	r3, #15
 800436c:	d9e9      	bls.n	8004342 <prvInitialiseNewTask+0x66>
 800436e:	e000      	b.n	8004372 <prvInitialiseNewTask+0x96>
			{
				break;
 8004370:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800437a:	e003      	b.n	8004384 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	2b37      	cmp	r3, #55	@ 0x37
 8004388:	d901      	bls.n	800438e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800438a:	2337      	movs	r3, #55	@ 0x37
 800438c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004392:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004398:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	2200      	movs	r2, #0
 800439e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	3304      	adds	r3, #4
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fe38 	bl	800301a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	3318      	adds	r3, #24
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fe33 	bl	800301a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	3354      	adds	r3, #84	@ 0x54
 80043de:	224c      	movs	r2, #76	@ 0x4c
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 ffb7 	bl	8006356 <memset>
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004420 <prvInitialiseNewTask+0x144>)
 80043ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <prvInitialiseNewTask+0x148>)
 80043f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004428 <prvInitialiseNewTask+0x14c>)
 80043f8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	69b8      	ldr	r0, [r7, #24]
 8004400:	f001 fab0 	bl	8005964 <pxPortInitialiseStack>
 8004404:	4602      	mov	r2, r0
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004416:	bf00      	nop
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20001b88 	.word	0x20001b88
 8004424:	20001bf0 	.word	0x20001bf0
 8004428:	20001c58 	.word	0x20001c58

0800442c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004434:	f001 fb8a 	bl	8005b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004438:	4b2d      	ldr	r3, [pc, #180]	@ (80044f0 <prvAddNewTaskToReadyList+0xc4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3301      	adds	r3, #1
 800443e:	4a2c      	ldr	r2, [pc, #176]	@ (80044f0 <prvAddNewTaskToReadyList+0xc4>)
 8004440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004442:	4b2c      	ldr	r3, [pc, #176]	@ (80044f4 <prvAddNewTaskToReadyList+0xc8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800444a:	4a2a      	ldr	r2, [pc, #168]	@ (80044f4 <prvAddNewTaskToReadyList+0xc8>)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004450:	4b27      	ldr	r3, [pc, #156]	@ (80044f0 <prvAddNewTaskToReadyList+0xc4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d110      	bne.n	800447a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004458:	f000 fc86 	bl	8004d68 <prvInitialiseTaskLists>
 800445c:	e00d      	b.n	800447a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800445e:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <prvAddNewTaskToReadyList+0xcc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004466:	4b23      	ldr	r3, [pc, #140]	@ (80044f4 <prvAddNewTaskToReadyList+0xc8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	429a      	cmp	r2, r3
 8004472:	d802      	bhi.n	800447a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004474:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <prvAddNewTaskToReadyList+0xc8>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800447a:	4b20      	ldr	r3, [pc, #128]	@ (80044fc <prvAddNewTaskToReadyList+0xd0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	4a1e      	ldr	r2, [pc, #120]	@ (80044fc <prvAddNewTaskToReadyList+0xd0>)
 8004482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <prvAddNewTaskToReadyList+0xd0>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004490:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <prvAddNewTaskToReadyList+0xd4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d903      	bls.n	80044a0 <prvAddNewTaskToReadyList+0x74>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449c:	4a18      	ldr	r2, [pc, #96]	@ (8004500 <prvAddNewTaskToReadyList+0xd4>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4a15      	ldr	r2, [pc, #84]	@ (8004504 <prvAddNewTaskToReadyList+0xd8>)
 80044ae:	441a      	add	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f7fe fdbb 	bl	8003032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044bc:	f001 fb76 	bl	8005bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044c0:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <prvAddNewTaskToReadyList+0xcc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044c8:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <prvAddNewTaskToReadyList+0xc8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d207      	bcs.n	80044e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <prvAddNewTaskToReadyList+0xdc>)
 80044d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000e08 	.word	0x20000e08
 80044f4:	20000934 	.word	0x20000934
 80044f8:	20000e14 	.word	0x20000e14
 80044fc:	20000e24 	.word	0x20000e24
 8004500:	20000e10 	.word	0x20000e10
 8004504:	20000938 	.word	0x20000938
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	@ 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <vTaskDelayUntil+0x2c>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	617b      	str	r3, [r7, #20]
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <vTaskDelayUntil+0x4a>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	613b      	str	r3, [r7, #16]
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	e7fd      	b.n	8004552 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004556:	4b2a      	ldr	r3, [pc, #168]	@ (8004600 <vTaskDelayUntil+0xf4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <vTaskDelayUntil+0x6a>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	60fb      	str	r3, [r7, #12]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8004576:	f000 f8b9 	bl	80046ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800457a:	4b22      	ldr	r3, [pc, #136]	@ (8004604 <vTaskDelayUntil+0xf8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	4413      	add	r3, r2
 8004588:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a3a      	ldr	r2, [r7, #32]
 8004590:	429a      	cmp	r2, r3
 8004592:	d20b      	bcs.n	80045ac <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	429a      	cmp	r2, r3
 800459c:	d211      	bcs.n	80045c2 <vTaskDelayUntil+0xb6>
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d90d      	bls.n	80045c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80045a6:	2301      	movs	r3, #1
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	e00a      	b.n	80045c2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d303      	bcc.n	80045be <vTaskDelayUntil+0xb2>
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d901      	bls.n	80045c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80045be:	2301      	movs	r3, #1
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d006      	beq.n	80045dc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fe18 	bl	800520c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80045dc:	f000 f894 	bl	8004708 <xTaskResumeAll>
 80045e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d107      	bne.n	80045f8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80045e8:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <vTaskDelayUntil+0xfc>)
 80045ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045f8:	bf00      	nop
 80045fa:	3728      	adds	r7, #40	@ 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000e30 	.word	0x20000e30
 8004604:	20000e0c 	.word	0x20000e0c
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800461a:	463a      	mov	r2, r7
 800461c:	1d39      	adds	r1, r7, #4
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fca8 	bl	8002f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	9202      	str	r2, [sp, #8]
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	2300      	movs	r3, #0
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	460a      	mov	r2, r1
 800463a:	4924      	ldr	r1, [pc, #144]	@ (80046cc <vTaskStartScheduler+0xc0>)
 800463c:	4824      	ldr	r0, [pc, #144]	@ (80046d0 <vTaskStartScheduler+0xc4>)
 800463e:	f7ff fda7 	bl	8004190 <xTaskCreateStatic>
 8004642:	4603      	mov	r3, r0
 8004644:	4a23      	ldr	r2, [pc, #140]	@ (80046d4 <vTaskStartScheduler+0xc8>)
 8004646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004648:	4b22      	ldr	r3, [pc, #136]	@ (80046d4 <vTaskStartScheduler+0xc8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004650:	2301      	movs	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e001      	b.n	800465a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d102      	bne.n	8004666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004660:	f000 fe28 	bl	80052b4 <xTimerCreateTimerTask>
 8004664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d11b      	bne.n	80046a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	613b      	str	r3, [r7, #16]
}
 800467e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004680:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <vTaskStartScheduler+0xcc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3354      	adds	r3, #84	@ 0x54
 8004686:	4a15      	ldr	r2, [pc, #84]	@ (80046dc <vTaskStartScheduler+0xd0>)
 8004688:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800468a:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <vTaskStartScheduler+0xd4>)
 800468c:	f04f 32ff 	mov.w	r2, #4294967295
 8004690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004692:	4b14      	ldr	r3, [pc, #80]	@ (80046e4 <vTaskStartScheduler+0xd8>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004698:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <vTaskStartScheduler+0xdc>)
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800469e:	f001 f9e3 	bl	8005a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046a2:	e00f      	b.n	80046c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d10b      	bne.n	80046c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <vTaskStartScheduler+0xb4>
}
 80046c4:	bf00      	nop
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	08007124 	.word	0x08007124
 80046d0:	08004d39 	.word	0x08004d39
 80046d4:	20000e2c 	.word	0x20000e2c
 80046d8:	20000934 	.word	0x20000934
 80046dc:	2000001c 	.word	0x2000001c
 80046e0:	20000e28 	.word	0x20000e28
 80046e4:	20000e14 	.word	0x20000e14
 80046e8:	20000e0c 	.word	0x20000e0c

080046ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <vTaskSuspendAll+0x18>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	4a03      	ldr	r2, [pc, #12]	@ (8004704 <vTaskSuspendAll+0x18>)
 80046f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046fa:	bf00      	nop
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000e30 	.word	0x20000e30

08004708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004716:	4b42      	ldr	r3, [pc, #264]	@ (8004820 <xTaskResumeAll+0x118>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <xTaskResumeAll+0x2e>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	603b      	str	r3, [r7, #0]
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004736:	f001 fa09 	bl	8005b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800473a:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <xTaskResumeAll+0x118>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	4a37      	ldr	r2, [pc, #220]	@ (8004820 <xTaskResumeAll+0x118>)
 8004742:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004744:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <xTaskResumeAll+0x118>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d162      	bne.n	8004812 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800474c:	4b35      	ldr	r3, [pc, #212]	@ (8004824 <xTaskResumeAll+0x11c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05e      	beq.n	8004812 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004754:	e02f      	b.n	80047b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004756:	4b34      	ldr	r3, [pc, #208]	@ (8004828 <xTaskResumeAll+0x120>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3318      	adds	r3, #24
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fcc0 	bl	80030e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3304      	adds	r3, #4
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fcbb 	bl	80030e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004776:	4b2d      	ldr	r3, [pc, #180]	@ (800482c <xTaskResumeAll+0x124>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d903      	bls.n	8004786 <xTaskResumeAll+0x7e>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	4a2a      	ldr	r2, [pc, #168]	@ (800482c <xTaskResumeAll+0x124>)
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4a27      	ldr	r2, [pc, #156]	@ (8004830 <xTaskResumeAll+0x128>)
 8004794:	441a      	add	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7fe fc48 	bl	8003032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a6:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <xTaskResumeAll+0x12c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d302      	bcc.n	80047b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80047b0:	4b21      	ldr	r3, [pc, #132]	@ (8004838 <xTaskResumeAll+0x130>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004828 <xTaskResumeAll+0x120>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1cb      	bne.n	8004756 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047c4:	f000 fb74 	bl	8004eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047c8:	4b1c      	ldr	r3, [pc, #112]	@ (800483c <xTaskResumeAll+0x134>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047d4:	f000 f856 	bl	8004884 <xTaskIncrementTick>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80047de:	4b16      	ldr	r3, [pc, #88]	@ (8004838 <xTaskResumeAll+0x130>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f1      	bne.n	80047d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80047f0:	4b12      	ldr	r3, [pc, #72]	@ (800483c <xTaskResumeAll+0x134>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047f6:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <xTaskResumeAll+0x130>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047fe:	2301      	movs	r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004802:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <xTaskResumeAll+0x138>)
 8004804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004812:	f001 f9cb 	bl	8005bac <vPortExitCritical>

	return xAlreadyYielded;
 8004816:	68bb      	ldr	r3, [r7, #8]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000e30 	.word	0x20000e30
 8004824:	20000e08 	.word	0x20000e08
 8004828:	20000dc8 	.word	0x20000dc8
 800482c:	20000e10 	.word	0x20000e10
 8004830:	20000938 	.word	0x20000938
 8004834:	20000934 	.word	0x20000934
 8004838:	20000e1c 	.word	0x20000e1c
 800483c:	20000e18 	.word	0x20000e18
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800484a:	4b04      	ldr	r3, [pc, #16]	@ (800485c <xTaskGetTickCount+0x18>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004850:	687b      	ldr	r3, [r7, #4]
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	20000e0c 	.word	0x20000e0c

08004860 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004866:	f001 fa33 	bl	8005cd0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800486e:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <xTaskGetTickCountFromISR+0x20>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004874:	683b      	ldr	r3, [r7, #0]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000e0c 	.word	0x20000e0c

08004884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488e:	4b4f      	ldr	r3, [pc, #316]	@ (80049cc <xTaskIncrementTick+0x148>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 8090 	bne.w	80049b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004898:	4b4d      	ldr	r3, [pc, #308]	@ (80049d0 <xTaskIncrementTick+0x14c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048a0:	4a4b      	ldr	r2, [pc, #300]	@ (80049d0 <xTaskIncrementTick+0x14c>)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d121      	bne.n	80048f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80048ac:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <xTaskIncrementTick+0x150>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	603b      	str	r3, [r7, #0]
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	e7fd      	b.n	80048ca <xTaskIncrementTick+0x46>
 80048ce:	4b41      	ldr	r3, [pc, #260]	@ (80049d4 <xTaskIncrementTick+0x150>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	4b40      	ldr	r3, [pc, #256]	@ (80049d8 <xTaskIncrementTick+0x154>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3e      	ldr	r2, [pc, #248]	@ (80049d4 <xTaskIncrementTick+0x150>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4a3e      	ldr	r2, [pc, #248]	@ (80049d8 <xTaskIncrementTick+0x154>)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b3e      	ldr	r3, [pc, #248]	@ (80049dc <xTaskIncrementTick+0x158>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	4a3c      	ldr	r2, [pc, #240]	@ (80049dc <xTaskIncrementTick+0x158>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	f000 fae0 	bl	8004eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048f0:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <xTaskIncrementTick+0x15c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d349      	bcc.n	800498e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fa:	4b36      	ldr	r3, [pc, #216]	@ (80049d4 <xTaskIncrementTick+0x150>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004904:	4b36      	ldr	r3, [pc, #216]	@ (80049e0 <xTaskIncrementTick+0x15c>)
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	601a      	str	r2, [r3, #0]
					break;
 800490c:	e03f      	b.n	800498e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490e:	4b31      	ldr	r3, [pc, #196]	@ (80049d4 <xTaskIncrementTick+0x150>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d203      	bcs.n	800492e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004926:	4a2e      	ldr	r2, [pc, #184]	@ (80049e0 <xTaskIncrementTick+0x15c>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800492c:	e02f      	b.n	800498e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	3304      	adds	r3, #4
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fbd8 	bl	80030e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3318      	adds	r3, #24
 8004944:	4618      	mov	r0, r3
 8004946:	f7fe fbcf 	bl	80030e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494e:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <xTaskIncrementTick+0x160>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d903      	bls.n	800495e <xTaskIncrementTick+0xda>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	4a22      	ldr	r2, [pc, #136]	@ (80049e4 <xTaskIncrementTick+0x160>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <xTaskIncrementTick+0x164>)
 800496c:	441a      	add	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fe fb5c 	bl	8003032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497e:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <xTaskIncrementTick+0x168>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	429a      	cmp	r2, r3
 8004986:	d3b8      	bcc.n	80048fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004988:	2301      	movs	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498c:	e7b5      	b.n	80048fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800498e:	4b17      	ldr	r3, [pc, #92]	@ (80049ec <xTaskIncrementTick+0x168>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004994:	4914      	ldr	r1, [pc, #80]	@ (80049e8 <xTaskIncrementTick+0x164>)
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d901      	bls.n	80049aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80049a6:	2301      	movs	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049aa:	4b11      	ldr	r3, [pc, #68]	@ (80049f0 <xTaskIncrementTick+0x16c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80049b2:	2301      	movs	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e004      	b.n	80049c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049b8:	4b0e      	ldr	r3, [pc, #56]	@ (80049f4 <xTaskIncrementTick+0x170>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	4a0d      	ldr	r2, [pc, #52]	@ (80049f4 <xTaskIncrementTick+0x170>)
 80049c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049c2:	697b      	ldr	r3, [r7, #20]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000e30 	.word	0x20000e30
 80049d0:	20000e0c 	.word	0x20000e0c
 80049d4:	20000dc0 	.word	0x20000dc0
 80049d8:	20000dc4 	.word	0x20000dc4
 80049dc:	20000e20 	.word	0x20000e20
 80049e0:	20000e28 	.word	0x20000e28
 80049e4:	20000e10 	.word	0x20000e10
 80049e8:	20000938 	.word	0x20000938
 80049ec:	20000934 	.word	0x20000934
 80049f0:	20000e1c 	.word	0x20000e1c
 80049f4:	20000e18 	.word	0x20000e18

080049f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049fe:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa8 <vTaskSwitchContext+0xb0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a06:	4b29      	ldr	r3, [pc, #164]	@ (8004aac <vTaskSwitchContext+0xb4>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a0c:	e047      	b.n	8004a9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004a0e:	4b27      	ldr	r3, [pc, #156]	@ (8004aac <vTaskSwitchContext+0xb4>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a14:	4b26      	ldr	r3, [pc, #152]	@ (8004ab0 <vTaskSwitchContext+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	e011      	b.n	8004a40 <vTaskSwitchContext+0x48>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <vTaskSwitchContext+0x42>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	e7fd      	b.n	8004a36 <vTaskSwitchContext+0x3e>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	491c      	ldr	r1, [pc, #112]	@ (8004ab4 <vTaskSwitchContext+0xbc>)
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0e3      	beq.n	8004a1c <vTaskSwitchContext+0x24>
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4a15      	ldr	r2, [pc, #84]	@ (8004ab4 <vTaskSwitchContext+0xbc>)
 8004a60:	4413      	add	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	3308      	adds	r3, #8
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d104      	bne.n	8004a84 <vTaskSwitchContext+0x8c>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	605a      	str	r2, [r3, #4]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8004ab8 <vTaskSwitchContext+0xc0>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4a08      	ldr	r2, [pc, #32]	@ (8004ab0 <vTaskSwitchContext+0xb8>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a94:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <vTaskSwitchContext+0xc0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3354      	adds	r3, #84	@ 0x54
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <vTaskSwitchContext+0xc4>)
 8004a9c:	6013      	str	r3, [r2, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	20000e30 	.word	0x20000e30
 8004aac:	20000e1c 	.word	0x20000e1c
 8004ab0:	20000e10 	.word	0x20000e10
 8004ab4:	20000938 	.word	0x20000938
 8004ab8:	20000934 	.word	0x20000934
 8004abc:	2000001c 	.word	0x2000001c

08004ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae8:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <vTaskPlaceOnEventList+0x48>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3318      	adds	r3, #24
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fe fac1 	bl	8003078 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004af6:	2101      	movs	r1, #1
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f000 fb87 	bl	800520c <prvAddCurrentTaskToDelayedList>
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000934 	.word	0x20000934

08004b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	617b      	str	r3, [r7, #20]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b36:	4b0a      	ldr	r3, [pc, #40]	@ (8004b60 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3318      	adds	r3, #24
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7fe fa77 	bl	8003032 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	68b8      	ldr	r0, [r7, #8]
 8004b54:	f000 fb5a 	bl	800520c <prvAddCurrentTaskToDelayedList>
	}
 8004b58:	bf00      	nop
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000934 	.word	0x20000934

08004b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60fb      	str	r3, [r7, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	e7fd      	b.n	8004b8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3318      	adds	r3, #24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe faa6 	bl	80030e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c14 <xTaskRemoveFromEventList+0xb0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d11d      	bne.n	8004be0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe fa9d 	bl	80030e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb2:	4b19      	ldr	r3, [pc, #100]	@ (8004c18 <xTaskRemoveFromEventList+0xb4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d903      	bls.n	8004bc2 <xTaskRemoveFromEventList+0x5e>
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	4a16      	ldr	r2, [pc, #88]	@ (8004c18 <xTaskRemoveFromEventList+0xb4>)
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <xTaskRemoveFromEventList+0xb8>)
 8004bd0:	441a      	add	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fe fa2a 	bl	8003032 <vListInsertEnd>
 8004bde:	e005      	b.n	8004bec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	3318      	adds	r3, #24
 8004be4:	4619      	mov	r1, r3
 8004be6:	480e      	ldr	r0, [pc, #56]	@ (8004c20 <xTaskRemoveFromEventList+0xbc>)
 8004be8:	f7fe fa23 	bl	8003032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <xTaskRemoveFromEventList+0xc0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d905      	bls.n	8004c06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004c28 <xTaskRemoveFromEventList+0xc4>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e001      	b.n	8004c0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c0a:	697b      	ldr	r3, [r7, #20]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20000e30 	.word	0x20000e30
 8004c18:	20000e10 	.word	0x20000e10
 8004c1c:	20000938 	.word	0x20000938
 8004c20:	20000dc8 	.word	0x20000dc8
 8004c24:	20000934 	.word	0x20000934
 8004c28:	20000e1c 	.word	0x20000e1c

08004c2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <vTaskInternalSetTimeOutState+0x24>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <vTaskInternalSetTimeOutState+0x28>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	605a      	str	r2, [r3, #4]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000e20 	.word	0x20000e20
 8004c54:	20000e0c 	.word	0x20000e0c

08004c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	613b      	str	r3, [r7, #16]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	60fb      	str	r3, [r7, #12]
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c9e:	f000 ff55 	bl	8005b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d18 <xTaskCheckForTimeOut+0xc0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d102      	bne.n	8004cc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e023      	b.n	8004d0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <xTaskCheckForTimeOut+0xc4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d007      	beq.n	8004cde <xTaskCheckForTimeOut+0x86>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e015      	b.n	8004d0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d20b      	bcs.n	8004d00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff99 	bl	8004c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e004      	b.n	8004d0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d0a:	f000 ff4f 	bl	8005bac <vPortExitCritical>

	return xReturn;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000e0c 	.word	0x20000e0c
 8004d1c:	20000e20 	.word	0x20000e20

08004d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d24:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <vTaskMissedYield+0x14>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000e1c 	.word	0x20000e1c

08004d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d40:	f000 f852 	bl	8004de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <prvIdleTask+0x28>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d9f9      	bls.n	8004d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <prvIdleTask+0x2c>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d5c:	e7f0      	b.n	8004d40 <prvIdleTask+0x8>
 8004d5e:	bf00      	nop
 8004d60:	20000938 	.word	0x20000938
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	e00c      	b.n	8004d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4a12      	ldr	r2, [pc, #72]	@ (8004dc8 <prvInitialiseTaskLists+0x60>)
 8004d80:	4413      	add	r3, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe f92a 	bl	8002fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b37      	cmp	r3, #55	@ 0x37
 8004d92:	d9ef      	bls.n	8004d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d94:	480d      	ldr	r0, [pc, #52]	@ (8004dcc <prvInitialiseTaskLists+0x64>)
 8004d96:	f7fe f921 	bl	8002fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d9a:	480d      	ldr	r0, [pc, #52]	@ (8004dd0 <prvInitialiseTaskLists+0x68>)
 8004d9c:	f7fe f91e 	bl	8002fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004da0:	480c      	ldr	r0, [pc, #48]	@ (8004dd4 <prvInitialiseTaskLists+0x6c>)
 8004da2:	f7fe f91b 	bl	8002fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004da6:	480c      	ldr	r0, [pc, #48]	@ (8004dd8 <prvInitialiseTaskLists+0x70>)
 8004da8:	f7fe f918 	bl	8002fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dac:	480b      	ldr	r0, [pc, #44]	@ (8004ddc <prvInitialiseTaskLists+0x74>)
 8004dae:	f7fe f915 	bl	8002fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <prvInitialiseTaskLists+0x78>)
 8004db4:	4a05      	ldr	r2, [pc, #20]	@ (8004dcc <prvInitialiseTaskLists+0x64>)
 8004db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <prvInitialiseTaskLists+0x7c>)
 8004dba:	4a05      	ldr	r2, [pc, #20]	@ (8004dd0 <prvInitialiseTaskLists+0x68>)
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000938 	.word	0x20000938
 8004dcc:	20000d98 	.word	0x20000d98
 8004dd0:	20000dac 	.word	0x20000dac
 8004dd4:	20000dc8 	.word	0x20000dc8
 8004dd8:	20000ddc 	.word	0x20000ddc
 8004ddc:	20000df4 	.word	0x20000df4
 8004de0:	20000dc0 	.word	0x20000dc0
 8004de4:	20000dc4 	.word	0x20000dc4

08004de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dee:	e019      	b.n	8004e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004df0:	f000 feac 	bl	8005b4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df4:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <prvCheckTasksWaitingTermination+0x50>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fe f971 	bl	80030e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e06:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <prvCheckTasksWaitingTermination+0x54>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004e3c <prvCheckTasksWaitingTermination+0x54>)
 8004e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <prvCheckTasksWaitingTermination+0x58>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	4a0a      	ldr	r2, [pc, #40]	@ (8004e40 <prvCheckTasksWaitingTermination+0x58>)
 8004e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e1a:	f000 fec7 	bl	8005bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f810 	bl	8004e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e24:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <prvCheckTasksWaitingTermination+0x58>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e1      	bne.n	8004df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000ddc 	.word	0x20000ddc
 8004e3c:	20000e08 	.word	0x20000e08
 8004e40:	20000df0 	.word	0x20000df0

08004e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3354      	adds	r3, #84	@ 0x54
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fa99 	bl	8006388 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d108      	bne.n	8004e72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f841 	bl	8005eec <vPortFree>
				vPortFree( pxTCB );
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 f83e 	bl	8005eec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e70:	e019      	b.n	8004ea6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d103      	bne.n	8004e84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 f835 	bl	8005eec <vPortFree>
	}
 8004e82:	e010      	b.n	8004ea6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d00b      	beq.n	8004ea6 <prvDeleteTCB+0x62>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60fb      	str	r3, [r7, #12]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <prvDeleteTCB+0x5e>
	}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <prvResetNextTaskUnblockTime+0x38>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <prvResetNextTaskUnblockTime+0x3c>)
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ec8:	e008      	b.n	8004edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eca:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <prvResetNextTaskUnblockTime+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <prvResetNextTaskUnblockTime+0x3c>)
 8004eda:	6013      	str	r3, [r2, #0]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000dc0 	.word	0x20000dc0
 8004eec:	20000e28 	.word	0x20000e28

08004ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <xTaskGetSchedulerState+0x34>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004efe:	2301      	movs	r3, #1
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	e008      	b.n	8004f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f04:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <xTaskGetSchedulerState+0x38>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	e001      	b.n	8004f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f16:	687b      	ldr	r3, [r7, #4]
	}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000e14 	.word	0x20000e14
 8004f28:	20000e30 	.word	0x20000e30

08004f2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d051      	beq.n	8004fe6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f46:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff0 <xTaskPriorityInherit+0xc4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d241      	bcs.n	8004fd4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	db06      	blt.n	8004f66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f58:	4b25      	ldr	r3, [pc, #148]	@ (8004ff0 <xTaskPriorityInherit+0xc4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6959      	ldr	r1, [r3, #20]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff4 <xTaskPriorityInherit+0xc8>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	4299      	cmp	r1, r3
 8004f7c:	d122      	bne.n	8004fc4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe f8b0 	bl	80030e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f88:	4b19      	ldr	r3, [pc, #100]	@ (8004ff0 <xTaskPriorityInherit+0xc4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f96:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <xTaskPriorityInherit+0xcc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d903      	bls.n	8004fa6 <xTaskPriorityInherit+0x7a>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a15      	ldr	r2, [pc, #84]	@ (8004ff8 <xTaskPriorityInherit+0xcc>)
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4a10      	ldr	r2, [pc, #64]	@ (8004ff4 <xTaskPriorityInherit+0xc8>)
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f7fe f838 	bl	8003032 <vListInsertEnd>
 8004fc2:	e004      	b.n	8004fce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <xTaskPriorityInherit+0xc4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e008      	b.n	8004fe6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fd8:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <xTaskPriorityInherit+0xc4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d201      	bcs.n	8004fe6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000934 	.word	0x20000934
 8004ff4:	20000938 	.word	0x20000938
 8004ff8:	20000e10 	.word	0x20000e10

08004ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d058      	beq.n	80050c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005012:	4b2f      	ldr	r3, [pc, #188]	@ (80050d0 <xTaskPriorityDisinherit+0xd4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	429a      	cmp	r2, r3
 800501a:	d00b      	beq.n	8005034 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60bb      	str	r3, [r7, #8]
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005066:	429a      	cmp	r2, r3
 8005068:	d02c      	beq.n	80050c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506e:	2b00      	cmp	r3, #0
 8005070:	d128      	bne.n	80050c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f836 	bl	80030e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <xTaskPriorityDisinherit+0xd8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d903      	bls.n	80050a4 <xTaskPriorityDisinherit+0xa8>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	4a0c      	ldr	r2, [pc, #48]	@ (80050d4 <xTaskPriorityDisinherit+0xd8>)
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4a09      	ldr	r2, [pc, #36]	@ (80050d8 <xTaskPriorityDisinherit+0xdc>)
 80050b2:	441a      	add	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fd ffb9 	bl	8003032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050c4:	697b      	ldr	r3, [r7, #20]
	}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000934 	.word	0x20000934
 80050d4:	20000e10 	.word	0x20000e10
 80050d8:	20000938 	.word	0x20000938

080050dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050ea:	2301      	movs	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d06c      	beq.n	80051ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60fb      	str	r3, [r7, #12]
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d902      	bls.n	8005124 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e002      	b.n	800512a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005128:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	429a      	cmp	r2, r3
 8005132:	d04c      	beq.n	80051ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	429a      	cmp	r2, r3
 800513c:	d147      	bne.n	80051ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800513e:	4b26      	ldr	r3, [pc, #152]	@ (80051d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	d10b      	bne.n	8005160 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	60bb      	str	r3, [r7, #8]
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	e7fd      	b.n	800515c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	db04      	blt.n	800517e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	6959      	ldr	r1, [r3, #20]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4a13      	ldr	r2, [pc, #76]	@ (80051dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800518e:	4413      	add	r3, r2
 8005190:	4299      	cmp	r1, r3
 8005192:	d11c      	bne.n	80051ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	3304      	adds	r3, #4
 8005198:	4618      	mov	r0, r3
 800519a:	f7fd ffa5 	bl	80030e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a2:	4b0f      	ldr	r3, [pc, #60]	@ (80051e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	4a0c      	ldr	r2, [pc, #48]	@ (80051e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4a07      	ldr	r2, [pc, #28]	@ (80051dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80051c0:	441a      	add	r2, r3
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fd ff32 	bl	8003032 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051ce:	bf00      	nop
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000934 	.word	0x20000934
 80051dc:	20000938 	.word	0x20000938
 80051e0:	20000e10 	.word	0x20000e10

080051e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80051e8:	4b07      	ldr	r3, [pc, #28]	@ (8005208 <pvTaskIncrementMutexHeldCount+0x24>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <pvTaskIncrementMutexHeldCount+0x24>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051f6:	3201      	adds	r2, #1
 80051f8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80051fa:	4b03      	ldr	r3, [pc, #12]	@ (8005208 <pvTaskIncrementMutexHeldCount+0x24>)
 80051fc:	681b      	ldr	r3, [r3, #0]
	}
 80051fe:	4618      	mov	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000934 	.word	0x20000934

0800520c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005216:	4b21      	ldr	r3, [pc, #132]	@ (800529c <prvAddCurrentTaskToDelayedList+0x90>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800521c:	4b20      	ldr	r3, [pc, #128]	@ (80052a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3304      	adds	r3, #4
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd ff60 	bl	80030e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d10a      	bne.n	8005246 <prvAddCurrentTaskToDelayedList+0x3a>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005236:	4b1a      	ldr	r3, [pc, #104]	@ (80052a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3304      	adds	r3, #4
 800523c:	4619      	mov	r1, r3
 800523e:	4819      	ldr	r0, [pc, #100]	@ (80052a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005240:	f7fd fef7 	bl	8003032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005244:	e026      	b.n	8005294 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800524e:	4b14      	ldr	r3, [pc, #80]	@ (80052a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	429a      	cmp	r2, r3
 800525c:	d209      	bcs.n	8005272 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800525e:	4b12      	ldr	r3, [pc, #72]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3304      	adds	r3, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f7fd ff04 	bl	8003078 <vListInsert>
}
 8005270:	e010      	b.n	8005294 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005272:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f7fd fefa 	bl	8003078 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005284:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	429a      	cmp	r2, r3
 800528c:	d202      	bcs.n	8005294 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800528e:	4a08      	ldr	r2, [pc, #32]	@ (80052b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6013      	str	r3, [r2, #0]
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000e0c 	.word	0x20000e0c
 80052a0:	20000934 	.word	0x20000934
 80052a4:	20000df4 	.word	0x20000df4
 80052a8:	20000dc4 	.word	0x20000dc4
 80052ac:	20000dc0 	.word	0x20000dc0
 80052b0:	20000e28 	.word	0x20000e28

080052b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052be:	f000 fb11 	bl	80058e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <xTimerCreateTimerTask+0x84>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d021      	beq.n	800530e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052d2:	1d3a      	adds	r2, r7, #4
 80052d4:	f107 0108 	add.w	r1, r7, #8
 80052d8:	f107 030c 	add.w	r3, r7, #12
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fd fe63 	bl	8002fa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	9202      	str	r2, [sp, #8]
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	2302      	movs	r3, #2
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	460a      	mov	r2, r1
 80052f4:	4911      	ldr	r1, [pc, #68]	@ (800533c <xTimerCreateTimerTask+0x88>)
 80052f6:	4812      	ldr	r0, [pc, #72]	@ (8005340 <xTimerCreateTimerTask+0x8c>)
 80052f8:	f7fe ff4a 	bl	8004190 <xTaskCreateStatic>
 80052fc:	4603      	mov	r3, r0
 80052fe:	4a11      	ldr	r2, [pc, #68]	@ (8005344 <xTimerCreateTimerTask+0x90>)
 8005300:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005302:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <xTimerCreateTimerTask+0x90>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	613b      	str	r3, [r7, #16]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800532c:	697b      	ldr	r3, [r7, #20]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000e64 	.word	0x20000e64
 800533c:	0800712c 	.word	0x0800712c
 8005340:	08005481 	.word	0x08005481
 8005344:	20000e68 	.word	0x20000e68

08005348 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	@ 0x28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005356:	2300      	movs	r3, #0
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10b      	bne.n	8005378 <xTimerGenericCommand+0x30>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	623b      	str	r3, [r7, #32]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005378:	4b19      	ldr	r3, [pc, #100]	@ (80053e0 <xTimerGenericCommand+0x98>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02a      	beq.n	80053d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b05      	cmp	r3, #5
 8005390:	dc18      	bgt.n	80053c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005392:	f7ff fdad 	bl	8004ef0 <xTaskGetSchedulerState>
 8005396:	4603      	mov	r3, r0
 8005398:	2b02      	cmp	r3, #2
 800539a:	d109      	bne.n	80053b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800539c:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <xTimerGenericCommand+0x98>)
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	f107 0110 	add.w	r1, r7, #16
 80053a4:	2300      	movs	r3, #0
 80053a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a8:	f7fe f87c 	bl	80034a4 <xQueueGenericSend>
 80053ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80053ae:	e012      	b.n	80053d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <xTimerGenericCommand+0x98>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	f107 0110 	add.w	r1, r7, #16
 80053b8:	2300      	movs	r3, #0
 80053ba:	2200      	movs	r2, #0
 80053bc:	f7fe f872 	bl	80034a4 <xQueueGenericSend>
 80053c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80053c2:	e008      	b.n	80053d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053c4:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <xTimerGenericCommand+0x98>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	f107 0110 	add.w	r1, r7, #16
 80053cc:	2300      	movs	r3, #0
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	f7fe f96a 	bl	80036a8 <xQueueGenericSendFromISR>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3728      	adds	r7, #40	@ 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000e64 	.word	0x20000e64

080053e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ee:	4b23      	ldr	r3, [pc, #140]	@ (800547c <prvProcessExpiredTimer+0x98>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fd fe73 	bl	80030e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d023      	beq.n	8005458 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	18d1      	adds	r1, r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	6978      	ldr	r0, [r7, #20]
 800541e:	f000 f8d3 	bl	80055c8 <prvInsertTimerInActiveList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d020      	beq.n	800546a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005428:	2300      	movs	r3, #0
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	2300      	movs	r3, #0
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	2100      	movs	r1, #0
 8005432:	6978      	ldr	r0, [r7, #20]
 8005434:	f7ff ff88 	bl	8005348 <xTimerGenericCommand>
 8005438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d114      	bne.n	800546a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60fb      	str	r3, [r7, #12]
}
 8005452:	bf00      	nop
 8005454:	bf00      	nop
 8005456:	e7fd      	b.n	8005454 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	6978      	ldr	r0, [r7, #20]
 8005470:	4798      	blx	r3
}
 8005472:	bf00      	nop
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000e5c 	.word	0x20000e5c

08005480 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f859 	bl	8005544 <prvGetNextExpireTime>
 8005492:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4619      	mov	r1, r3
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f805 	bl	80054a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800549e:	f000 f8d5 	bl	800564c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054a2:	bf00      	nop
 80054a4:	e7f0      	b.n	8005488 <prvTimerTask+0x8>
	...

080054a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054b2:	f7ff f91b 	bl	80046ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f864 	bl	8005588 <prvSampleTimeNow>
 80054c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d130      	bne.n	800552a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <prvProcessTimerOrBlockTask+0x3c>
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d806      	bhi.n	80054e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054d6:	f7ff f917 	bl	8004708 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ff81 	bl	80053e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054e2:	e024      	b.n	800552e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054ea:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <prvProcessTimerOrBlockTask+0x90>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <prvProcessTimerOrBlockTask+0x50>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <prvProcessTimerOrBlockTask+0x52>
 80054f8:	2300      	movs	r3, #0
 80054fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054fc:	4b0f      	ldr	r3, [pc, #60]	@ (800553c <prvProcessTimerOrBlockTask+0x94>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	f7fe fe0d 	bl	8004128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800550e:	f7ff f8fb 	bl	8004708 <xTaskResumeAll>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005518:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <prvProcessTimerOrBlockTask+0x98>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
}
 8005528:	e001      	b.n	800552e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800552a:	f7ff f8ed 	bl	8004708 <xTaskResumeAll>
}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000e60 	.word	0x20000e60
 800553c:	20000e64 	.word	0x20000e64
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800554c:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <prvGetNextExpireTime+0x40>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <prvGetNextExpireTime+0x16>
 8005556:	2201      	movs	r2, #1
 8005558:	e000      	b.n	800555c <prvGetNextExpireTime+0x18>
 800555a:	2200      	movs	r2, #0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005568:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <prvGetNextExpireTime+0x40>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e001      	b.n	8005578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005578:	68fb      	ldr	r3, [r7, #12]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	20000e5c 	.word	0x20000e5c

08005588 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005590:	f7ff f958 	bl	8004844 <xTaskGetTickCount>
 8005594:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005596:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <prvSampleTimeNow+0x3c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	429a      	cmp	r2, r3
 800559e:	d205      	bcs.n	80055ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055a0:	f000 f93a 	bl	8005818 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055b2:	4a04      	ldr	r2, [pc, #16]	@ (80055c4 <prvSampleTimeNow+0x3c>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055b8:	68fb      	ldr	r3, [r7, #12]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000e6c 	.word	0x20000e6c

080055c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d812      	bhi.n	8005614 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e01b      	b.n	800563a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <prvInsertTimerInActiveList+0x7c>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7fd fd33 	bl	8003078 <vListInsert>
 8005612:	e012      	b.n	800563a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d206      	bcs.n	800562a <prvInsertTimerInActiveList+0x62>
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005624:	2301      	movs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e007      	b.n	800563a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800562a:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <prvInsertTimerInActiveList+0x80>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7fd fd1f 	bl	8003078 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800563a:	697b      	ldr	r3, [r7, #20]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000e60 	.word	0x20000e60
 8005648:	20000e5c 	.word	0x20000e5c

0800564c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08e      	sub	sp, #56	@ 0x38
 8005650:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005652:	e0ce      	b.n	80057f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da19      	bge.n	800568e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	3304      	adds	r3, #4
 800565e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	61fb      	str	r3, [r7, #28]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005684:	6850      	ldr	r0, [r2, #4]
 8005686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	4611      	mov	r1, r2
 800568c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f2c0 80ae 	blt.w	80057f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	3304      	adds	r3, #4
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd fd1e 	bl	80030e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ac:	463b      	mov	r3, r7
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ff6a 	bl	8005588 <prvSampleTimeNow>
 80056b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	f200 8097 	bhi.w	80057ec <prvProcessReceivedCommands+0x1a0>
 80056be:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <prvProcessReceivedCommands+0x78>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056ed 	.word	0x080056ed
 80056d0:	08005763 	.word	0x08005763
 80056d4:	08005777 	.word	0x08005777
 80056d8:	080057c3 	.word	0x080057c3
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	080056ed 	.word	0x080056ed
 80056e4:	08005763 	.word	0x08005763
 80056e8:	08005777 	.word	0x08005777
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	18d1      	adds	r1, r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800570c:	f7ff ff5c 	bl	80055c8 <prvInsertTimerInActiveList>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d06c      	beq.n	80057f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800571c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d061      	beq.n	80057f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	441a      	add	r2, r3
 8005734:	2300      	movs	r3, #0
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	2300      	movs	r3, #0
 800573a:	2100      	movs	r1, #0
 800573c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800573e:	f7ff fe03 	bl	8005348 <xTimerGenericCommand>
 8005742:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d152      	bne.n	80057f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	61bb      	str	r3, [r7, #24]
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	e7fd      	b.n	800575e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	b2da      	uxtb	r2, r3
 800576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005770:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005774:	e03d      	b.n	80057f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	b2da      	uxtb	r2, r3
 8005782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005784:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	617b      	str	r3, [r7, #20]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	18d1      	adds	r1, r2, r3
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057bc:	f7ff ff04 	bl	80055c8 <prvInsertTimerInActiveList>
					break;
 80057c0:	e017      	b.n	80057f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80057d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057d2:	f000 fb8b 	bl	8005eec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057d6:	e00c      	b.n	80057f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80057ea:	e002      	b.n	80057f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <prvProcessReceivedCommands+0x1a6>
					break;
 80057f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057f2:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <prvProcessReceivedCommands+0x1c8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	1d39      	adds	r1, r7, #4
 80057f8:	2200      	movs	r2, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f882 	bl	8003904 <xQueueReceive>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	f47f af26 	bne.w	8005654 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3730      	adds	r7, #48	@ 0x30
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000e64 	.word	0x20000e64

08005818 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800581e:	e049      	b.n	80058b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005820:	4b2e      	ldr	r3, [pc, #184]	@ (80058dc <prvSwitchTimerLists+0xc4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582a:	4b2c      	ldr	r3, [pc, #176]	@ (80058dc <prvSwitchTimerLists+0xc4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3304      	adds	r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd fc55 	bl	80030e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d02f      	beq.n	80058b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d90e      	bls.n	8005884 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005872:	4b1a      	ldr	r3, [pc, #104]	@ (80058dc <prvSwitchTimerLists+0xc4>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7fd fbfb 	bl	8003078 <vListInsert>
 8005882:	e017      	b.n	80058b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005884:	2300      	movs	r3, #0
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	2300      	movs	r3, #0
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	2100      	movs	r1, #0
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff fd5a 	bl	8005348 <xTimerGenericCommand>
 8005894:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	603b      	str	r3, [r7, #0]
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058b4:	4b09      	ldr	r3, [pc, #36]	@ (80058dc <prvSwitchTimerLists+0xc4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1b0      	bne.n	8005820 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058be:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <prvSwitchTimerLists+0xc4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058c4:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <prvSwitchTimerLists+0xc8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a04      	ldr	r2, [pc, #16]	@ (80058dc <prvSwitchTimerLists+0xc4>)
 80058ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058cc:	4a04      	ldr	r2, [pc, #16]	@ (80058e0 <prvSwitchTimerLists+0xc8>)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6013      	str	r3, [r2, #0]
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000e5c 	.word	0x20000e5c
 80058e0:	20000e60 	.word	0x20000e60

080058e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058ea:	f000 f92f 	bl	8005b4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058ee:	4b15      	ldr	r3, [pc, #84]	@ (8005944 <prvCheckForValidListAndQueue+0x60>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d120      	bne.n	8005938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058f6:	4814      	ldr	r0, [pc, #80]	@ (8005948 <prvCheckForValidListAndQueue+0x64>)
 80058f8:	f7fd fb70 	bl	8002fdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058fc:	4813      	ldr	r0, [pc, #76]	@ (800594c <prvCheckForValidListAndQueue+0x68>)
 80058fe:	f7fd fb6d 	bl	8002fdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005902:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <prvCheckForValidListAndQueue+0x6c>)
 8005904:	4a10      	ldr	r2, [pc, #64]	@ (8005948 <prvCheckForValidListAndQueue+0x64>)
 8005906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005908:	4b12      	ldr	r3, [pc, #72]	@ (8005954 <prvCheckForValidListAndQueue+0x70>)
 800590a:	4a10      	ldr	r2, [pc, #64]	@ (800594c <prvCheckForValidListAndQueue+0x68>)
 800590c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800590e:	2300      	movs	r3, #0
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4b11      	ldr	r3, [pc, #68]	@ (8005958 <prvCheckForValidListAndQueue+0x74>)
 8005914:	4a11      	ldr	r2, [pc, #68]	@ (800595c <prvCheckForValidListAndQueue+0x78>)
 8005916:	2110      	movs	r1, #16
 8005918:	200a      	movs	r0, #10
 800591a:	f7fd fc79 	bl	8003210 <xQueueGenericCreateStatic>
 800591e:	4603      	mov	r3, r0
 8005920:	4a08      	ldr	r2, [pc, #32]	@ (8005944 <prvCheckForValidListAndQueue+0x60>)
 8005922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005924:	4b07      	ldr	r3, [pc, #28]	@ (8005944 <prvCheckForValidListAndQueue+0x60>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <prvCheckForValidListAndQueue+0x60>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	490b      	ldr	r1, [pc, #44]	@ (8005960 <prvCheckForValidListAndQueue+0x7c>)
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fba6 	bl	8004084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005938:	f000 f938 	bl	8005bac <vPortExitCritical>
}
 800593c:	bf00      	nop
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000e64 	.word	0x20000e64
 8005948:	20000e34 	.word	0x20000e34
 800594c:	20000e48 	.word	0x20000e48
 8005950:	20000e5c 	.word	0x20000e5c
 8005954:	20000e60 	.word	0x20000e60
 8005958:	20000f10 	.word	0x20000f10
 800595c:	20000e70 	.word	0x20000e70
 8005960:	08007134 	.word	0x08007134

08005964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3b04      	subs	r3, #4
 8005974:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800597c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3b04      	subs	r3, #4
 8005982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b04      	subs	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005994:	4a08      	ldr	r2, [pc, #32]	@ (80059b8 <pxPortInitialiseStack+0x54>)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3b14      	subs	r3, #20
 800599e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3b20      	subs	r3, #32
 80059aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059ac:	68fb      	ldr	r3, [r7, #12]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	080059bd 	.word	0x080059bd

080059bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059c6:	4b12      	ldr	r3, [pc, #72]	@ (8005a10 <prvTaskExitError+0x54>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d00b      	beq.n	80059e8 <prvTaskExitError+0x2c>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	60fb      	str	r3, [r7, #12]
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	e7fd      	b.n	80059e4 <prvTaskExitError+0x28>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60bb      	str	r3, [r7, #8]
}
 80059fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059fc:	bf00      	nop
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0fc      	beq.n	80059fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	2000000c 	.word	0x2000000c
	...

08005a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a20:	4b07      	ldr	r3, [pc, #28]	@ (8005a40 <pxCurrentTCBConst2>)
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	6808      	ldr	r0, [r1, #0]
 8005a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a2a:	f380 8809 	msr	PSP, r0
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f380 8811 	msr	BASEPRI, r0
 8005a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005a3e:	4770      	bx	lr

08005a40 <pxCurrentTCBConst2>:
 8005a40:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop

08005a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005a48:	4806      	ldr	r0, [pc, #24]	@ (8005a64 <prvPortStartFirstTask+0x1c>)
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	6800      	ldr	r0, [r0, #0]
 8005a4e:	f380 8808 	msr	MSP, r0
 8005a52:	b662      	cpsie	i
 8005a54:	b661      	cpsie	f
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	df00      	svc	0
 8005a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a62:	bf00      	nop
 8005a64:	e000ed08 	.word	0xe000ed08

08005a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a6e:	4b32      	ldr	r3, [pc, #200]	@ (8005b38 <xPortStartScheduler+0xd0>)
 8005a70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	22ff      	movs	r2, #255	@ 0xff
 8005a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4b2a      	ldr	r3, [pc, #168]	@ (8005b3c <xPortStartScheduler+0xd4>)
 8005a94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a96:	4b2a      	ldr	r3, [pc, #168]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005a98:	2207      	movs	r2, #7
 8005a9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a9c:	e009      	b.n	8005ab2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005a9e:	4b28      	ldr	r3, [pc, #160]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	4a26      	ldr	r2, [pc, #152]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005aa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aba:	2b80      	cmp	r3, #128	@ 0x80
 8005abc:	d0ef      	beq.n	8005a9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005abe:	4b20      	ldr	r3, [pc, #128]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f1c3 0307 	rsb	r3, r3, #7
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d00b      	beq.n	8005ae2 <xPortStartScheduler+0x7a>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	60bb      	str	r3, [r7, #8]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ae2:	4b17      	ldr	r3, [pc, #92]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005aea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aec:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005af4:	4a12      	ldr	r2, [pc, #72]	@ (8005b40 <xPortStartScheduler+0xd8>)
 8005af6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b00:	4b10      	ldr	r3, [pc, #64]	@ (8005b44 <xPortStartScheduler+0xdc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0f      	ldr	r2, [pc, #60]	@ (8005b44 <xPortStartScheduler+0xdc>)
 8005b06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <xPortStartScheduler+0xdc>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0c      	ldr	r2, [pc, #48]	@ (8005b44 <xPortStartScheduler+0xdc>)
 8005b12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b18:	f000 f8b8 	bl	8005c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <xPortStartScheduler+0xe0>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b22:	f7ff ff91 	bl	8005a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b26:	f7fe ff67 	bl	80049f8 <vTaskSwitchContext>
	prvTaskExitError();
 8005b2a:	f7ff ff47 	bl	80059bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	e000e400 	.word	0xe000e400
 8005b3c:	20000f60 	.word	0x20000f60
 8005b40:	20000f64 	.word	0x20000f64
 8005b44:	e000ed20 	.word	0xe000ed20
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	607b      	str	r3, [r7, #4]
}
 8005b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <vPortEnterCritical+0x58>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba4 <vPortEnterCritical+0x58>)
 8005b6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <vPortEnterCritical+0x58>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d110      	bne.n	8005b9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba8 <vPortEnterCritical+0x5c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <vPortEnterCritical+0x4e>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	603b      	str	r3, [r7, #0]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <vPortEnterCritical+0x4a>
	}
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr
 8005ba4:	2000000c 	.word	0x2000000c
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bb2:	4b12      	ldr	r3, [pc, #72]	@ (8005bfc <vPortExitCritical+0x50>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <vPortExitCritical+0x26>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	607b      	str	r3, [r7, #4]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <vPortExitCritical+0x50>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <vPortExitCritical+0x50>)
 8005bda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bdc:	4b07      	ldr	r3, [pc, #28]	@ (8005bfc <vPortExitCritical+0x50>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <vPortExitCritical+0x44>
 8005be4:	2300      	movs	r3, #0
 8005be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f383 8811 	msr	BASEPRI, r3
}
 8005bee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	2000000c 	.word	0x2000000c

08005c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c00:	f3ef 8009 	mrs	r0, PSP
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <pxCurrentTCBConst>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c10:	6010      	str	r0, [r2, #0]
 8005c12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005c16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c1a:	f380 8811 	msr	BASEPRI, r0
 8005c1e:	f7fe feeb 	bl	80049f8 <vTaskSwitchContext>
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	6808      	ldr	r0, [r1, #0]
 8005c32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c36:	f380 8809 	msr	PSP, r0
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	4770      	bx	lr

08005c40 <pxCurrentTCBConst>:
 8005c40:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c62:	f7fe fe0f 	bl	8004884 <xTaskIncrementTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <xPortSysTickHandler+0x40>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <vPortSetupTimerInterrupt+0x30>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c96:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c9c:	4b09      	ldr	r3, [pc, #36]	@ (8005cc4 <vPortSetupTimerInterrupt+0x38>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a09      	ldr	r2, [pc, #36]	@ (8005cc8 <vPortSetupTimerInterrupt+0x3c>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	4a08      	ldr	r2, [pc, #32]	@ (8005ccc <vPortSetupTimerInterrupt+0x40>)
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cae:	4b03      	ldr	r3, [pc, #12]	@ (8005cbc <vPortSetupTimerInterrupt+0x30>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	e000e010 	.word	0xe000e010
 8005cc0:	e000e018 	.word	0xe000e018
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	10624dd3 	.word	0x10624dd3
 8005ccc:	e000e014 	.word	0xe000e014

08005cd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cd6:	f3ef 8305 	mrs	r3, IPSR
 8005cda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	d915      	bls.n	8005d0e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ce2:	4a17      	ldr	r2, [pc, #92]	@ (8005d40 <vPortValidateInterruptPriority+0x70>)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cec:	4b15      	ldr	r3, [pc, #84]	@ (8005d44 <vPortValidateInterruptPriority+0x74>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	7afa      	ldrb	r2, [r7, #11]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d20b      	bcs.n	8005d0e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	607b      	str	r3, [r7, #4]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d48 <vPortValidateInterruptPriority+0x78>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d16:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <vPortValidateInterruptPriority+0x7c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d90b      	bls.n	8005d36 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <vPortValidateInterruptPriority+0x62>
	}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr
 8005d40:	e000e3f0 	.word	0xe000e3f0
 8005d44:	20000f60 	.word	0x20000f60
 8005d48:	e000ed0c 	.word	0xe000ed0c
 8005d4c:	20000f64 	.word	0x20000f64

08005d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	@ 0x28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d5c:	f7fe fcc6 	bl	80046ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d60:	4b5c      	ldr	r3, [pc, #368]	@ (8005ed4 <pvPortMalloc+0x184>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d68:	f000 f924 	bl	8005fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed8 <pvPortMalloc+0x188>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f040 8095 	bne.w	8005ea4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d80:	2208      	movs	r2, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f023 0307 	bic.w	r3, r3, #7
 8005d98:	3308      	adds	r3, #8
 8005d9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <pvPortMalloc+0x6e>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	617b      	str	r3, [r7, #20]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d06f      	beq.n	8005ea4 <pvPortMalloc+0x154>
 8005dc4:	4b45      	ldr	r3, [pc, #276]	@ (8005edc <pvPortMalloc+0x18c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d86a      	bhi.n	8005ea4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dce:	4b44      	ldr	r3, [pc, #272]	@ (8005ee0 <pvPortMalloc+0x190>)
 8005dd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dd2:	4b43      	ldr	r3, [pc, #268]	@ (8005ee0 <pvPortMalloc+0x190>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dd8:	e004      	b.n	8005de4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d903      	bls.n	8005df6 <pvPortMalloc+0xa6>
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f1      	bne.n	8005dda <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005df6:	4b37      	ldr	r3, [pc, #220]	@ (8005ed4 <pvPortMalloc+0x184>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d051      	beq.n	8005ea4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2208      	movs	r2, #8
 8005e06:	4413      	add	r3, r2
 8005e08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	1ad2      	subs	r2, r2, r3
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d920      	bls.n	8005e64 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <pvPortMalloc+0xfc>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	613b      	str	r3, [r7, #16]
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e5e:	69b8      	ldr	r0, [r7, #24]
 8005e60:	f000 f90a 	bl	8006078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e64:	4b1d      	ldr	r3, [pc, #116]	@ (8005edc <pvPortMalloc+0x18c>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005edc <pvPortMalloc+0x18c>)
 8005e70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e72:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <pvPortMalloc+0x18c>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee4 <pvPortMalloc+0x194>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d203      	bcs.n	8005e86 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e7e:	4b17      	ldr	r3, [pc, #92]	@ (8005edc <pvPortMalloc+0x18c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a18      	ldr	r2, [pc, #96]	@ (8005ee4 <pvPortMalloc+0x194>)
 8005e84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <pvPortMalloc+0x188>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <pvPortMalloc+0x198>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	4a11      	ldr	r2, [pc, #68]	@ (8005ee8 <pvPortMalloc+0x198>)
 8005ea2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ea4:	f7fe fc30 	bl	8004708 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <pvPortMalloc+0x17a>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	60fb      	str	r3, [r7, #12]
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <pvPortMalloc+0x176>
	return pvReturn;
 8005eca:	69fb      	ldr	r3, [r7, #28]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3728      	adds	r7, #40	@ 0x28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20001b70 	.word	0x20001b70
 8005ed8:	20001b84 	.word	0x20001b84
 8005edc:	20001b74 	.word	0x20001b74
 8005ee0:	20001b68 	.word	0x20001b68
 8005ee4:	20001b78 	.word	0x20001b78
 8005ee8:	20001b7c 	.word	0x20001b7c

08005eec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d04f      	beq.n	8005f9e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005efe:	2308      	movs	r3, #8
 8005f00:	425b      	negs	r3, r3
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b25      	ldr	r3, [pc, #148]	@ (8005fa8 <vPortFree+0xbc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <vPortFree+0x46>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	60fb      	str	r3, [r7, #12]
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	e7fd      	b.n	8005f2e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <vPortFree+0x66>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60bb      	str	r3, [r7, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	4b14      	ldr	r3, [pc, #80]	@ (8005fa8 <vPortFree+0xbc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01e      	beq.n	8005f9e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d11a      	bne.n	8005f9e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa8 <vPortFree+0xbc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f78:	f7fe fbb8 	bl	80046ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <vPortFree+0xc0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4413      	add	r3, r2
 8005f86:	4a09      	ldr	r2, [pc, #36]	@ (8005fac <vPortFree+0xc0>)
 8005f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f8a:	6938      	ldr	r0, [r7, #16]
 8005f8c:	f000 f874 	bl	8006078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f90:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <vPortFree+0xc4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	4a06      	ldr	r2, [pc, #24]	@ (8005fb0 <vPortFree+0xc4>)
 8005f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f9a:	f7fe fbb5 	bl	8004708 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f9e:	bf00      	nop
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20001b84 	.word	0x20001b84
 8005fac:	20001b74 	.word	0x20001b74
 8005fb0:	20001b80 	.word	0x20001b80

08005fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fc0:	4b27      	ldr	r3, [pc, #156]	@ (8006060 <prvHeapInit+0xac>)
 8005fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3307      	adds	r3, #7
 8005fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8006060 <prvHeapInit+0xac>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fec:	4a1d      	ldr	r2, [pc, #116]	@ (8006064 <prvHeapInit+0xb0>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8006064 <prvHeapInit+0xb0>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006000:	2208      	movs	r2, #8
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0307 	bic.w	r3, r3, #7
 800600e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4a15      	ldr	r2, [pc, #84]	@ (8006068 <prvHeapInit+0xb4>)
 8006014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006016:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <prvHeapInit+0xb4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800601e:	4b12      	ldr	r3, [pc, #72]	@ (8006068 <prvHeapInit+0xb4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	1ad2      	subs	r2, r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006034:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <prvHeapInit+0xb4>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a0a      	ldr	r2, [pc, #40]	@ (800606c <prvHeapInit+0xb8>)
 8006042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4a09      	ldr	r2, [pc, #36]	@ (8006070 <prvHeapInit+0xbc>)
 800604a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800604c:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <prvHeapInit+0xc0>)
 800604e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006052:	601a      	str	r2, [r3, #0]
}
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000f68 	.word	0x20000f68
 8006064:	20001b68 	.word	0x20001b68
 8006068:	20001b70 	.word	0x20001b70
 800606c:	20001b78 	.word	0x20001b78
 8006070:	20001b74 	.word	0x20001b74
 8006074:	20001b84 	.word	0x20001b84

08006078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006080:	4b27      	ldr	r3, [pc, #156]	@ (8006120 <prvInsertBlockIntoFreeList+0xa8>)
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e002      	b.n	800608c <prvInsertBlockIntoFreeList+0x14>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d8f7      	bhi.n	8006086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4413      	add	r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d108      	bne.n	80060ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	441a      	add	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	441a      	add	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d118      	bne.n	8006100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <prvInsertBlockIntoFreeList+0xac>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d00d      	beq.n	80060f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	441a      	add	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e008      	b.n	8006108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <prvInsertBlockIntoFreeList+0xac>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e003      	b.n	8006108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	d002      	beq.n	8006116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr
 8006120:	20001b68 	.word	0x20001b68
 8006124:	20001b70 	.word	0x20001b70

08006128 <std>:
 8006128:	2300      	movs	r3, #0
 800612a:	b510      	push	{r4, lr}
 800612c:	4604      	mov	r4, r0
 800612e:	e9c0 3300 	strd	r3, r3, [r0]
 8006132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006136:	6083      	str	r3, [r0, #8]
 8006138:	8181      	strh	r1, [r0, #12]
 800613a:	6643      	str	r3, [r0, #100]	@ 0x64
 800613c:	81c2      	strh	r2, [r0, #14]
 800613e:	6183      	str	r3, [r0, #24]
 8006140:	4619      	mov	r1, r3
 8006142:	2208      	movs	r2, #8
 8006144:	305c      	adds	r0, #92	@ 0x5c
 8006146:	f000 f906 	bl	8006356 <memset>
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <std+0x58>)
 800614c:	6224      	str	r4, [r4, #32]
 800614e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006150:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <std+0x5c>)
 8006152:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006154:	4b0c      	ldr	r3, [pc, #48]	@ (8006188 <std+0x60>)
 8006156:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006158:	4b0c      	ldr	r3, [pc, #48]	@ (800618c <std+0x64>)
 800615a:	6323      	str	r3, [r4, #48]	@ 0x30
 800615c:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <std+0x68>)
 800615e:	429c      	cmp	r4, r3
 8006160:	d006      	beq.n	8006170 <std+0x48>
 8006162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006166:	4294      	cmp	r4, r2
 8006168:	d002      	beq.n	8006170 <std+0x48>
 800616a:	33d0      	adds	r3, #208	@ 0xd0
 800616c:	429c      	cmp	r4, r3
 800616e:	d105      	bne.n	800617c <std+0x54>
 8006170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006178:	f000 b9bc 	b.w	80064f4 <__retarget_lock_init_recursive>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	bf00      	nop
 8006180:	080062d1 	.word	0x080062d1
 8006184:	080062f3 	.word	0x080062f3
 8006188:	0800632b 	.word	0x0800632b
 800618c:	0800634f 	.word	0x0800634f
 8006190:	20001b88 	.word	0x20001b88

08006194 <stdio_exit_handler>:
 8006194:	4a02      	ldr	r2, [pc, #8]	@ (80061a0 <stdio_exit_handler+0xc>)
 8006196:	4903      	ldr	r1, [pc, #12]	@ (80061a4 <stdio_exit_handler+0x10>)
 8006198:	4803      	ldr	r0, [pc, #12]	@ (80061a8 <stdio_exit_handler+0x14>)
 800619a:	f000 b869 	b.w	8006270 <_fwalk_sglue>
 800619e:	bf00      	nop
 80061a0:	20000010 	.word	0x20000010
 80061a4:	08006da9 	.word	0x08006da9
 80061a8:	20000020 	.word	0x20000020

080061ac <cleanup_stdio>:
 80061ac:	6841      	ldr	r1, [r0, #4]
 80061ae:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <cleanup_stdio+0x34>)
 80061b0:	b510      	push	{r4, lr}
 80061b2:	4299      	cmp	r1, r3
 80061b4:	4604      	mov	r4, r0
 80061b6:	d001      	beq.n	80061bc <cleanup_stdio+0x10>
 80061b8:	f000 fdf6 	bl	8006da8 <_fflush_r>
 80061bc:	68a1      	ldr	r1, [r4, #8]
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <cleanup_stdio+0x38>)
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d002      	beq.n	80061ca <cleanup_stdio+0x1e>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fdef 	bl	8006da8 <_fflush_r>
 80061ca:	68e1      	ldr	r1, [r4, #12]
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <cleanup_stdio+0x3c>)
 80061ce:	4299      	cmp	r1, r3
 80061d0:	d004      	beq.n	80061dc <cleanup_stdio+0x30>
 80061d2:	4620      	mov	r0, r4
 80061d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d8:	f000 bde6 	b.w	8006da8 <_fflush_r>
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	bf00      	nop
 80061e0:	20001b88 	.word	0x20001b88
 80061e4:	20001bf0 	.word	0x20001bf0
 80061e8:	20001c58 	.word	0x20001c58

080061ec <global_stdio_init.part.0>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <global_stdio_init.part.0+0x30>)
 80061f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006220 <global_stdio_init.part.0+0x34>)
 80061f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006224 <global_stdio_init.part.0+0x38>)
 80061f4:	4620      	mov	r0, r4
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	2104      	movs	r1, #4
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7ff ff94 	bl	8006128 <std>
 8006200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006204:	2201      	movs	r2, #1
 8006206:	2109      	movs	r1, #9
 8006208:	f7ff ff8e 	bl	8006128 <std>
 800620c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006210:	2202      	movs	r2, #2
 8006212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006216:	2112      	movs	r1, #18
 8006218:	f7ff bf86 	b.w	8006128 <std>
 800621c:	20001cc0 	.word	0x20001cc0
 8006220:	20001b88 	.word	0x20001b88
 8006224:	08006195 	.word	0x08006195

08006228 <__sfp_lock_acquire>:
 8006228:	4801      	ldr	r0, [pc, #4]	@ (8006230 <__sfp_lock_acquire+0x8>)
 800622a:	f000 b964 	b.w	80064f6 <__retarget_lock_acquire_recursive>
 800622e:	bf00      	nop
 8006230:	20001cc9 	.word	0x20001cc9

08006234 <__sfp_lock_release>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__sfp_lock_release+0x8>)
 8006236:	f000 b95f 	b.w	80064f8 <__retarget_lock_release_recursive>
 800623a:	bf00      	nop
 800623c:	20001cc9 	.word	0x20001cc9

08006240 <__sinit>:
 8006240:	b510      	push	{r4, lr}
 8006242:	4604      	mov	r4, r0
 8006244:	f7ff fff0 	bl	8006228 <__sfp_lock_acquire>
 8006248:	6a23      	ldr	r3, [r4, #32]
 800624a:	b11b      	cbz	r3, 8006254 <__sinit+0x14>
 800624c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006250:	f7ff bff0 	b.w	8006234 <__sfp_lock_release>
 8006254:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <__sinit+0x28>)
 8006256:	6223      	str	r3, [r4, #32]
 8006258:	4b04      	ldr	r3, [pc, #16]	@ (800626c <__sinit+0x2c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f5      	bne.n	800624c <__sinit+0xc>
 8006260:	f7ff ffc4 	bl	80061ec <global_stdio_init.part.0>
 8006264:	e7f2      	b.n	800624c <__sinit+0xc>
 8006266:	bf00      	nop
 8006268:	080061ad 	.word	0x080061ad
 800626c:	20001cc0 	.word	0x20001cc0

08006270 <_fwalk_sglue>:
 8006270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006274:	4607      	mov	r7, r0
 8006276:	4688      	mov	r8, r1
 8006278:	4614      	mov	r4, r2
 800627a:	2600      	movs	r6, #0
 800627c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006280:	f1b9 0901 	subs.w	r9, r9, #1
 8006284:	d505      	bpl.n	8006292 <_fwalk_sglue+0x22>
 8006286:	6824      	ldr	r4, [r4, #0]
 8006288:	2c00      	cmp	r4, #0
 800628a:	d1f7      	bne.n	800627c <_fwalk_sglue+0xc>
 800628c:	4630      	mov	r0, r6
 800628e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d907      	bls.n	80062a8 <_fwalk_sglue+0x38>
 8006298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800629c:	3301      	adds	r3, #1
 800629e:	d003      	beq.n	80062a8 <_fwalk_sglue+0x38>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c0      	blx	r8
 80062a6:	4306      	orrs	r6, r0
 80062a8:	3568      	adds	r5, #104	@ 0x68
 80062aa:	e7e9      	b.n	8006280 <_fwalk_sglue+0x10>

080062ac <iprintf>:
 80062ac:	b40f      	push	{r0, r1, r2, r3}
 80062ae:	b507      	push	{r0, r1, r2, lr}
 80062b0:	4906      	ldr	r1, [pc, #24]	@ (80062cc <iprintf+0x20>)
 80062b2:	ab04      	add	r3, sp, #16
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ba:	6881      	ldr	r1, [r0, #8]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	f000 fa49 	bl	8006754 <_vfiprintf_r>
 80062c2:	b003      	add	sp, #12
 80062c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062c8:	b004      	add	sp, #16
 80062ca:	4770      	bx	lr
 80062cc:	2000001c 	.word	0x2000001c

080062d0 <__sread>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	460c      	mov	r4, r1
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	f000 f8be 	bl	8006458 <_read_r>
 80062dc:	2800      	cmp	r0, #0
 80062de:	bfab      	itete	ge
 80062e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062e2:	89a3      	ldrhlt	r3, [r4, #12]
 80062e4:	181b      	addge	r3, r3, r0
 80062e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062ea:	bfac      	ite	ge
 80062ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ee:	81a3      	strhlt	r3, [r4, #12]
 80062f0:	bd10      	pop	{r4, pc}

080062f2 <__swrite>:
 80062f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	461f      	mov	r7, r3
 80062f8:	898b      	ldrh	r3, [r1, #12]
 80062fa:	4605      	mov	r5, r0
 80062fc:	05db      	lsls	r3, r3, #23
 80062fe:	460c      	mov	r4, r1
 8006300:	4616      	mov	r6, r2
 8006302:	d505      	bpl.n	8006310 <__swrite+0x1e>
 8006304:	2302      	movs	r3, #2
 8006306:	2200      	movs	r2, #0
 8006308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630c:	f000 f892 	bl	8006434 <_lseek_r>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	4632      	mov	r2, r6
 8006314:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	4628      	mov	r0, r5
 800631c:	463b      	mov	r3, r7
 800631e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006326:	f000 b8a9 	b.w	800647c <_write_r>

0800632a <__sseek>:
 800632a:	b510      	push	{r4, lr}
 800632c:	460c      	mov	r4, r1
 800632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006332:	f000 f87f 	bl	8006434 <_lseek_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	bf15      	itete	ne
 800633c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800633e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006342:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006346:	81a3      	strheq	r3, [r4, #12]
 8006348:	bf18      	it	ne
 800634a:	81a3      	strhne	r3, [r4, #12]
 800634c:	bd10      	pop	{r4, pc}

0800634e <__sclose>:
 800634e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006352:	f000 b809 	b.w	8006368 <_close_r>

08006356 <memset>:
 8006356:	4603      	mov	r3, r0
 8006358:	4402      	add	r2, r0
 800635a:	4293      	cmp	r3, r2
 800635c:	d100      	bne.n	8006360 <memset+0xa>
 800635e:	4770      	bx	lr
 8006360:	f803 1b01 	strb.w	r1, [r3], #1
 8006364:	e7f9      	b.n	800635a <memset+0x4>
	...

08006368 <_close_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	2300      	movs	r3, #0
 800636c:	4d05      	ldr	r5, [pc, #20]	@ (8006384 <_close_r+0x1c>)
 800636e:	4604      	mov	r4, r0
 8006370:	4608      	mov	r0, r1
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	f7fa fa8b 	bl	800088e <_close>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_close_r+0x1a>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_close_r+0x1a>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20001cc4 	.word	0x20001cc4

08006388 <_reclaim_reent>:
 8006388:	4b29      	ldr	r3, [pc, #164]	@ (8006430 <_reclaim_reent+0xa8>)
 800638a:	b570      	push	{r4, r5, r6, lr}
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4604      	mov	r4, r0
 8006390:	4283      	cmp	r3, r0
 8006392:	d04b      	beq.n	800642c <_reclaim_reent+0xa4>
 8006394:	69c3      	ldr	r3, [r0, #28]
 8006396:	b1ab      	cbz	r3, 80063c4 <_reclaim_reent+0x3c>
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	b16b      	cbz	r3, 80063b8 <_reclaim_reent+0x30>
 800639c:	2500      	movs	r5, #0
 800639e:	69e3      	ldr	r3, [r4, #28]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	5959      	ldr	r1, [r3, r5]
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d13b      	bne.n	8006420 <_reclaim_reent+0x98>
 80063a8:	3504      	adds	r5, #4
 80063aa:	2d80      	cmp	r5, #128	@ 0x80
 80063ac:	d1f7      	bne.n	800639e <_reclaim_reent+0x16>
 80063ae:	69e3      	ldr	r3, [r4, #28]
 80063b0:	4620      	mov	r0, r4
 80063b2:	68d9      	ldr	r1, [r3, #12]
 80063b4:	f000 f8b0 	bl	8006518 <_free_r>
 80063b8:	69e3      	ldr	r3, [r4, #28]
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	b111      	cbz	r1, 80063c4 <_reclaim_reent+0x3c>
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 f8aa 	bl	8006518 <_free_r>
 80063c4:	6961      	ldr	r1, [r4, #20]
 80063c6:	b111      	cbz	r1, 80063ce <_reclaim_reent+0x46>
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f8a5 	bl	8006518 <_free_r>
 80063ce:	69e1      	ldr	r1, [r4, #28]
 80063d0:	b111      	cbz	r1, 80063d8 <_reclaim_reent+0x50>
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 f8a0 	bl	8006518 <_free_r>
 80063d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80063da:	b111      	cbz	r1, 80063e2 <_reclaim_reent+0x5a>
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f89b 	bl	8006518 <_free_r>
 80063e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063e4:	b111      	cbz	r1, 80063ec <_reclaim_reent+0x64>
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 f896 	bl	8006518 <_free_r>
 80063ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80063ee:	b111      	cbz	r1, 80063f6 <_reclaim_reent+0x6e>
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 f891 	bl	8006518 <_free_r>
 80063f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80063f8:	b111      	cbz	r1, 8006400 <_reclaim_reent+0x78>
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 f88c 	bl	8006518 <_free_r>
 8006400:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006402:	b111      	cbz	r1, 800640a <_reclaim_reent+0x82>
 8006404:	4620      	mov	r0, r4
 8006406:	f000 f887 	bl	8006518 <_free_r>
 800640a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800640c:	b111      	cbz	r1, 8006414 <_reclaim_reent+0x8c>
 800640e:	4620      	mov	r0, r4
 8006410:	f000 f882 	bl	8006518 <_free_r>
 8006414:	6a23      	ldr	r3, [r4, #32]
 8006416:	b14b      	cbz	r3, 800642c <_reclaim_reent+0xa4>
 8006418:	4620      	mov	r0, r4
 800641a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800641e:	4718      	bx	r3
 8006420:	680e      	ldr	r6, [r1, #0]
 8006422:	4620      	mov	r0, r4
 8006424:	f000 f878 	bl	8006518 <_free_r>
 8006428:	4631      	mov	r1, r6
 800642a:	e7bb      	b.n	80063a4 <_reclaim_reent+0x1c>
 800642c:	bd70      	pop	{r4, r5, r6, pc}
 800642e:	bf00      	nop
 8006430:	2000001c 	.word	0x2000001c

08006434 <_lseek_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	2200      	movs	r2, #0
 800643e:	4d05      	ldr	r5, [pc, #20]	@ (8006454 <_lseek_r+0x20>)
 8006440:	602a      	str	r2, [r5, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f7fa fa47 	bl	80008d6 <_lseek>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_lseek_r+0x1e>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_lseek_r+0x1e>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20001cc4 	.word	0x20001cc4

08006458 <_read_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	2200      	movs	r2, #0
 8006462:	4d05      	ldr	r5, [pc, #20]	@ (8006478 <_read_r+0x20>)
 8006464:	602a      	str	r2, [r5, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f7fa f9f4 	bl	8000854 <_read>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_read_r+0x1e>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_read_r+0x1e>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20001cc4 	.word	0x20001cc4

0800647c <_write_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	2200      	movs	r2, #0
 8006486:	4d05      	ldr	r5, [pc, #20]	@ (800649c <_write_r+0x20>)
 8006488:	602a      	str	r2, [r5, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f7f9 fe60 	bl	8000150 <_write>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_write_r+0x1e>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_write_r+0x1e>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20001cc4 	.word	0x20001cc4

080064a0 <__errno>:
 80064a0:	4b01      	ldr	r3, [pc, #4]	@ (80064a8 <__errno+0x8>)
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	2000001c 	.word	0x2000001c

080064ac <__libc_init_array>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	2600      	movs	r6, #0
 80064b0:	4d0c      	ldr	r5, [pc, #48]	@ (80064e4 <__libc_init_array+0x38>)
 80064b2:	4c0d      	ldr	r4, [pc, #52]	@ (80064e8 <__libc_init_array+0x3c>)
 80064b4:	1b64      	subs	r4, r4, r5
 80064b6:	10a4      	asrs	r4, r4, #2
 80064b8:	42a6      	cmp	r6, r4
 80064ba:	d109      	bne.n	80064d0 <__libc_init_array+0x24>
 80064bc:	f000 fdd2 	bl	8007064 <_init>
 80064c0:	2600      	movs	r6, #0
 80064c2:	4d0a      	ldr	r5, [pc, #40]	@ (80064ec <__libc_init_array+0x40>)
 80064c4:	4c0a      	ldr	r4, [pc, #40]	@ (80064f0 <__libc_init_array+0x44>)
 80064c6:	1b64      	subs	r4, r4, r5
 80064c8:	10a4      	asrs	r4, r4, #2
 80064ca:	42a6      	cmp	r6, r4
 80064cc:	d105      	bne.n	80064da <__libc_init_array+0x2e>
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d4:	4798      	blx	r3
 80064d6:	3601      	adds	r6, #1
 80064d8:	e7ee      	b.n	80064b8 <__libc_init_array+0xc>
 80064da:	f855 3b04 	ldr.w	r3, [r5], #4
 80064de:	4798      	blx	r3
 80064e0:	3601      	adds	r6, #1
 80064e2:	e7f2      	b.n	80064ca <__libc_init_array+0x1e>
 80064e4:	08007228 	.word	0x08007228
 80064e8:	08007228 	.word	0x08007228
 80064ec:	08007228 	.word	0x08007228
 80064f0:	0800722c 	.word	0x0800722c

080064f4 <__retarget_lock_init_recursive>:
 80064f4:	4770      	bx	lr

080064f6 <__retarget_lock_acquire_recursive>:
 80064f6:	4770      	bx	lr

080064f8 <__retarget_lock_release_recursive>:
 80064f8:	4770      	bx	lr

080064fa <memcpy>:
 80064fa:	440a      	add	r2, r1
 80064fc:	4291      	cmp	r1, r2
 80064fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8006502:	d100      	bne.n	8006506 <memcpy+0xc>
 8006504:	4770      	bx	lr
 8006506:	b510      	push	{r4, lr}
 8006508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650c:	4291      	cmp	r1, r2
 800650e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006512:	d1f9      	bne.n	8006508 <memcpy+0xe>
 8006514:	bd10      	pop	{r4, pc}
	...

08006518 <_free_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4605      	mov	r5, r0
 800651c:	2900      	cmp	r1, #0
 800651e:	d040      	beq.n	80065a2 <_free_r+0x8a>
 8006520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006524:	1f0c      	subs	r4, r1, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	bfb8      	it	lt
 800652a:	18e4      	addlt	r4, r4, r3
 800652c:	f000 f8de 	bl	80066ec <__malloc_lock>
 8006530:	4a1c      	ldr	r2, [pc, #112]	@ (80065a4 <_free_r+0x8c>)
 8006532:	6813      	ldr	r3, [r2, #0]
 8006534:	b933      	cbnz	r3, 8006544 <_free_r+0x2c>
 8006536:	6063      	str	r3, [r4, #4]
 8006538:	6014      	str	r4, [r2, #0]
 800653a:	4628      	mov	r0, r5
 800653c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006540:	f000 b8da 	b.w	80066f8 <__malloc_unlock>
 8006544:	42a3      	cmp	r3, r4
 8006546:	d908      	bls.n	800655a <_free_r+0x42>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	1821      	adds	r1, r4, r0
 800654c:	428b      	cmp	r3, r1
 800654e:	bf01      	itttt	eq
 8006550:	6819      	ldreq	r1, [r3, #0]
 8006552:	685b      	ldreq	r3, [r3, #4]
 8006554:	1809      	addeq	r1, r1, r0
 8006556:	6021      	streq	r1, [r4, #0]
 8006558:	e7ed      	b.n	8006536 <_free_r+0x1e>
 800655a:	461a      	mov	r2, r3
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b10b      	cbz	r3, 8006564 <_free_r+0x4c>
 8006560:	42a3      	cmp	r3, r4
 8006562:	d9fa      	bls.n	800655a <_free_r+0x42>
 8006564:	6811      	ldr	r1, [r2, #0]
 8006566:	1850      	adds	r0, r2, r1
 8006568:	42a0      	cmp	r0, r4
 800656a:	d10b      	bne.n	8006584 <_free_r+0x6c>
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	4401      	add	r1, r0
 8006570:	1850      	adds	r0, r2, r1
 8006572:	4283      	cmp	r3, r0
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	d1e0      	bne.n	800653a <_free_r+0x22>
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4408      	add	r0, r1
 800657e:	6010      	str	r0, [r2, #0]
 8006580:	6053      	str	r3, [r2, #4]
 8006582:	e7da      	b.n	800653a <_free_r+0x22>
 8006584:	d902      	bls.n	800658c <_free_r+0x74>
 8006586:	230c      	movs	r3, #12
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	e7d6      	b.n	800653a <_free_r+0x22>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	1821      	adds	r1, r4, r0
 8006590:	428b      	cmp	r3, r1
 8006592:	bf01      	itttt	eq
 8006594:	6819      	ldreq	r1, [r3, #0]
 8006596:	685b      	ldreq	r3, [r3, #4]
 8006598:	1809      	addeq	r1, r1, r0
 800659a:	6021      	streq	r1, [r4, #0]
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	6054      	str	r4, [r2, #4]
 80065a0:	e7cb      	b.n	800653a <_free_r+0x22>
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20001cd0 	.word	0x20001cd0

080065a8 <sbrk_aligned>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4e0f      	ldr	r6, [pc, #60]	@ (80065e8 <sbrk_aligned+0x40>)
 80065ac:	460c      	mov	r4, r1
 80065ae:	6831      	ldr	r1, [r6, #0]
 80065b0:	4605      	mov	r5, r0
 80065b2:	b911      	cbnz	r1, 80065ba <sbrk_aligned+0x12>
 80065b4:	f000 fcb4 	bl	8006f20 <_sbrk_r>
 80065b8:	6030      	str	r0, [r6, #0]
 80065ba:	4621      	mov	r1, r4
 80065bc:	4628      	mov	r0, r5
 80065be:	f000 fcaf 	bl	8006f20 <_sbrk_r>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	d103      	bne.n	80065ce <sbrk_aligned+0x26>
 80065c6:	f04f 34ff 	mov.w	r4, #4294967295
 80065ca:	4620      	mov	r0, r4
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	1cc4      	adds	r4, r0, #3
 80065d0:	f024 0403 	bic.w	r4, r4, #3
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d0f8      	beq.n	80065ca <sbrk_aligned+0x22>
 80065d8:	1a21      	subs	r1, r4, r0
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 fca0 	bl	8006f20 <_sbrk_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d1f2      	bne.n	80065ca <sbrk_aligned+0x22>
 80065e4:	e7ef      	b.n	80065c6 <sbrk_aligned+0x1e>
 80065e6:	bf00      	nop
 80065e8:	20001ccc 	.word	0x20001ccc

080065ec <_malloc_r>:
 80065ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f0:	1ccd      	adds	r5, r1, #3
 80065f2:	f025 0503 	bic.w	r5, r5, #3
 80065f6:	3508      	adds	r5, #8
 80065f8:	2d0c      	cmp	r5, #12
 80065fa:	bf38      	it	cc
 80065fc:	250c      	movcc	r5, #12
 80065fe:	2d00      	cmp	r5, #0
 8006600:	4606      	mov	r6, r0
 8006602:	db01      	blt.n	8006608 <_malloc_r+0x1c>
 8006604:	42a9      	cmp	r1, r5
 8006606:	d904      	bls.n	8006612 <_malloc_r+0x26>
 8006608:	230c      	movs	r3, #12
 800660a:	6033      	str	r3, [r6, #0]
 800660c:	2000      	movs	r0, #0
 800660e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006612:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066e8 <_malloc_r+0xfc>
 8006616:	f000 f869 	bl	80066ec <__malloc_lock>
 800661a:	f8d8 3000 	ldr.w	r3, [r8]
 800661e:	461c      	mov	r4, r3
 8006620:	bb44      	cbnz	r4, 8006674 <_malloc_r+0x88>
 8006622:	4629      	mov	r1, r5
 8006624:	4630      	mov	r0, r6
 8006626:	f7ff ffbf 	bl	80065a8 <sbrk_aligned>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	4604      	mov	r4, r0
 800662e:	d158      	bne.n	80066e2 <_malloc_r+0xf6>
 8006630:	f8d8 4000 	ldr.w	r4, [r8]
 8006634:	4627      	mov	r7, r4
 8006636:	2f00      	cmp	r7, #0
 8006638:	d143      	bne.n	80066c2 <_malloc_r+0xd6>
 800663a:	2c00      	cmp	r4, #0
 800663c:	d04b      	beq.n	80066d6 <_malloc_r+0xea>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	4639      	mov	r1, r7
 8006642:	4630      	mov	r0, r6
 8006644:	eb04 0903 	add.w	r9, r4, r3
 8006648:	f000 fc6a 	bl	8006f20 <_sbrk_r>
 800664c:	4581      	cmp	r9, r0
 800664e:	d142      	bne.n	80066d6 <_malloc_r+0xea>
 8006650:	6821      	ldr	r1, [r4, #0]
 8006652:	4630      	mov	r0, r6
 8006654:	1a6d      	subs	r5, r5, r1
 8006656:	4629      	mov	r1, r5
 8006658:	f7ff ffa6 	bl	80065a8 <sbrk_aligned>
 800665c:	3001      	adds	r0, #1
 800665e:	d03a      	beq.n	80066d6 <_malloc_r+0xea>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	442b      	add	r3, r5
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	f8d8 3000 	ldr.w	r3, [r8]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	bb62      	cbnz	r2, 80066c8 <_malloc_r+0xdc>
 800666e:	f8c8 7000 	str.w	r7, [r8]
 8006672:	e00f      	b.n	8006694 <_malloc_r+0xa8>
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	1b52      	subs	r2, r2, r5
 8006678:	d420      	bmi.n	80066bc <_malloc_r+0xd0>
 800667a:	2a0b      	cmp	r2, #11
 800667c:	d917      	bls.n	80066ae <_malloc_r+0xc2>
 800667e:	1961      	adds	r1, r4, r5
 8006680:	42a3      	cmp	r3, r4
 8006682:	6025      	str	r5, [r4, #0]
 8006684:	bf18      	it	ne
 8006686:	6059      	strne	r1, [r3, #4]
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	bf08      	it	eq
 800668c:	f8c8 1000 	streq.w	r1, [r8]
 8006690:	5162      	str	r2, [r4, r5]
 8006692:	604b      	str	r3, [r1, #4]
 8006694:	4630      	mov	r0, r6
 8006696:	f000 f82f 	bl	80066f8 <__malloc_unlock>
 800669a:	f104 000b 	add.w	r0, r4, #11
 800669e:	1d23      	adds	r3, r4, #4
 80066a0:	f020 0007 	bic.w	r0, r0, #7
 80066a4:	1ac2      	subs	r2, r0, r3
 80066a6:	bf1c      	itt	ne
 80066a8:	1a1b      	subne	r3, r3, r0
 80066aa:	50a3      	strne	r3, [r4, r2]
 80066ac:	e7af      	b.n	800660e <_malloc_r+0x22>
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	bf0c      	ite	eq
 80066b4:	f8c8 2000 	streq.w	r2, [r8]
 80066b8:	605a      	strne	r2, [r3, #4]
 80066ba:	e7eb      	b.n	8006694 <_malloc_r+0xa8>
 80066bc:	4623      	mov	r3, r4
 80066be:	6864      	ldr	r4, [r4, #4]
 80066c0:	e7ae      	b.n	8006620 <_malloc_r+0x34>
 80066c2:	463c      	mov	r4, r7
 80066c4:	687f      	ldr	r7, [r7, #4]
 80066c6:	e7b6      	b.n	8006636 <_malloc_r+0x4a>
 80066c8:	461a      	mov	r2, r3
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	d1fb      	bne.n	80066c8 <_malloc_r+0xdc>
 80066d0:	2300      	movs	r3, #0
 80066d2:	6053      	str	r3, [r2, #4]
 80066d4:	e7de      	b.n	8006694 <_malloc_r+0xa8>
 80066d6:	230c      	movs	r3, #12
 80066d8:	4630      	mov	r0, r6
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	f000 f80c 	bl	80066f8 <__malloc_unlock>
 80066e0:	e794      	b.n	800660c <_malloc_r+0x20>
 80066e2:	6005      	str	r5, [r0, #0]
 80066e4:	e7d6      	b.n	8006694 <_malloc_r+0xa8>
 80066e6:	bf00      	nop
 80066e8:	20001cd0 	.word	0x20001cd0

080066ec <__malloc_lock>:
 80066ec:	4801      	ldr	r0, [pc, #4]	@ (80066f4 <__malloc_lock+0x8>)
 80066ee:	f7ff bf02 	b.w	80064f6 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	20001cc8 	.word	0x20001cc8

080066f8 <__malloc_unlock>:
 80066f8:	4801      	ldr	r0, [pc, #4]	@ (8006700 <__malloc_unlock+0x8>)
 80066fa:	f7ff befd 	b.w	80064f8 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	20001cc8 	.word	0x20001cc8

08006704 <__sfputc_r>:
 8006704:	6893      	ldr	r3, [r2, #8]
 8006706:	b410      	push	{r4}
 8006708:	3b01      	subs	r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	6093      	str	r3, [r2, #8]
 800670e:	da07      	bge.n	8006720 <__sfputc_r+0x1c>
 8006710:	6994      	ldr	r4, [r2, #24]
 8006712:	42a3      	cmp	r3, r4
 8006714:	db01      	blt.n	800671a <__sfputc_r+0x16>
 8006716:	290a      	cmp	r1, #10
 8006718:	d102      	bne.n	8006720 <__sfputc_r+0x1c>
 800671a:	bc10      	pop	{r4}
 800671c:	f000 bb6c 	b.w	8006df8 <__swbuf_r>
 8006720:	6813      	ldr	r3, [r2, #0]
 8006722:	1c58      	adds	r0, r3, #1
 8006724:	6010      	str	r0, [r2, #0]
 8006726:	7019      	strb	r1, [r3, #0]
 8006728:	4608      	mov	r0, r1
 800672a:	bc10      	pop	{r4}
 800672c:	4770      	bx	lr

0800672e <__sfputs_r>:
 800672e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006730:	4606      	mov	r6, r0
 8006732:	460f      	mov	r7, r1
 8006734:	4614      	mov	r4, r2
 8006736:	18d5      	adds	r5, r2, r3
 8006738:	42ac      	cmp	r4, r5
 800673a:	d101      	bne.n	8006740 <__sfputs_r+0x12>
 800673c:	2000      	movs	r0, #0
 800673e:	e007      	b.n	8006750 <__sfputs_r+0x22>
 8006740:	463a      	mov	r2, r7
 8006742:	4630      	mov	r0, r6
 8006744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006748:	f7ff ffdc 	bl	8006704 <__sfputc_r>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d1f3      	bne.n	8006738 <__sfputs_r+0xa>
 8006750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006754 <_vfiprintf_r>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	460d      	mov	r5, r1
 800675a:	4614      	mov	r4, r2
 800675c:	4698      	mov	r8, r3
 800675e:	4606      	mov	r6, r0
 8006760:	b09d      	sub	sp, #116	@ 0x74
 8006762:	b118      	cbz	r0, 800676c <_vfiprintf_r+0x18>
 8006764:	6a03      	ldr	r3, [r0, #32]
 8006766:	b90b      	cbnz	r3, 800676c <_vfiprintf_r+0x18>
 8006768:	f7ff fd6a 	bl	8006240 <__sinit>
 800676c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800676e:	07d9      	lsls	r1, r3, #31
 8006770:	d405      	bmi.n	800677e <_vfiprintf_r+0x2a>
 8006772:	89ab      	ldrh	r3, [r5, #12]
 8006774:	059a      	lsls	r2, r3, #22
 8006776:	d402      	bmi.n	800677e <_vfiprintf_r+0x2a>
 8006778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800677a:	f7ff febc 	bl	80064f6 <__retarget_lock_acquire_recursive>
 800677e:	89ab      	ldrh	r3, [r5, #12]
 8006780:	071b      	lsls	r3, r3, #28
 8006782:	d501      	bpl.n	8006788 <_vfiprintf_r+0x34>
 8006784:	692b      	ldr	r3, [r5, #16]
 8006786:	b99b      	cbnz	r3, 80067b0 <_vfiprintf_r+0x5c>
 8006788:	4629      	mov	r1, r5
 800678a:	4630      	mov	r0, r6
 800678c:	f000 fb72 	bl	8006e74 <__swsetup_r>
 8006790:	b170      	cbz	r0, 80067b0 <_vfiprintf_r+0x5c>
 8006792:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006794:	07dc      	lsls	r4, r3, #31
 8006796:	d504      	bpl.n	80067a2 <_vfiprintf_r+0x4e>
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	b01d      	add	sp, #116	@ 0x74
 800679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	0598      	lsls	r0, r3, #22
 80067a6:	d4f7      	bmi.n	8006798 <_vfiprintf_r+0x44>
 80067a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067aa:	f7ff fea5 	bl	80064f8 <__retarget_lock_release_recursive>
 80067ae:	e7f3      	b.n	8006798 <_vfiprintf_r+0x44>
 80067b0:	2300      	movs	r3, #0
 80067b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b4:	2320      	movs	r3, #32
 80067b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067ba:	2330      	movs	r3, #48	@ 0x30
 80067bc:	f04f 0901 	mov.w	r9, #1
 80067c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80067c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006970 <_vfiprintf_r+0x21c>
 80067c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067cc:	4623      	mov	r3, r4
 80067ce:	469a      	mov	sl, r3
 80067d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067d4:	b10a      	cbz	r2, 80067da <_vfiprintf_r+0x86>
 80067d6:	2a25      	cmp	r2, #37	@ 0x25
 80067d8:	d1f9      	bne.n	80067ce <_vfiprintf_r+0x7a>
 80067da:	ebba 0b04 	subs.w	fp, sl, r4
 80067de:	d00b      	beq.n	80067f8 <_vfiprintf_r+0xa4>
 80067e0:	465b      	mov	r3, fp
 80067e2:	4622      	mov	r2, r4
 80067e4:	4629      	mov	r1, r5
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ffa1 	bl	800672e <__sfputs_r>
 80067ec:	3001      	adds	r0, #1
 80067ee:	f000 80a7 	beq.w	8006940 <_vfiprintf_r+0x1ec>
 80067f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067f4:	445a      	add	r2, fp
 80067f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80067f8:	f89a 3000 	ldrb.w	r3, [sl]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 809f 	beq.w	8006940 <_vfiprintf_r+0x1ec>
 8006802:	2300      	movs	r3, #0
 8006804:	f04f 32ff 	mov.w	r2, #4294967295
 8006808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800680c:	f10a 0a01 	add.w	sl, sl, #1
 8006810:	9304      	str	r3, [sp, #16]
 8006812:	9307      	str	r3, [sp, #28]
 8006814:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006818:	931a      	str	r3, [sp, #104]	@ 0x68
 800681a:	4654      	mov	r4, sl
 800681c:	2205      	movs	r2, #5
 800681e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006822:	4853      	ldr	r0, [pc, #332]	@ (8006970 <_vfiprintf_r+0x21c>)
 8006824:	f000 fb8c 	bl	8006f40 <memchr>
 8006828:	9a04      	ldr	r2, [sp, #16]
 800682a:	b9d8      	cbnz	r0, 8006864 <_vfiprintf_r+0x110>
 800682c:	06d1      	lsls	r1, r2, #27
 800682e:	bf44      	itt	mi
 8006830:	2320      	movmi	r3, #32
 8006832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006836:	0713      	lsls	r3, r2, #28
 8006838:	bf44      	itt	mi
 800683a:	232b      	movmi	r3, #43	@ 0x2b
 800683c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006840:	f89a 3000 	ldrb.w	r3, [sl]
 8006844:	2b2a      	cmp	r3, #42	@ 0x2a
 8006846:	d015      	beq.n	8006874 <_vfiprintf_r+0x120>
 8006848:	4654      	mov	r4, sl
 800684a:	2000      	movs	r0, #0
 800684c:	f04f 0c0a 	mov.w	ip, #10
 8006850:	9a07      	ldr	r2, [sp, #28]
 8006852:	4621      	mov	r1, r4
 8006854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006858:	3b30      	subs	r3, #48	@ 0x30
 800685a:	2b09      	cmp	r3, #9
 800685c:	d94b      	bls.n	80068f6 <_vfiprintf_r+0x1a2>
 800685e:	b1b0      	cbz	r0, 800688e <_vfiprintf_r+0x13a>
 8006860:	9207      	str	r2, [sp, #28]
 8006862:	e014      	b.n	800688e <_vfiprintf_r+0x13a>
 8006864:	eba0 0308 	sub.w	r3, r0, r8
 8006868:	fa09 f303 	lsl.w	r3, r9, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	46a2      	mov	sl, r4
 8006870:	9304      	str	r3, [sp, #16]
 8006872:	e7d2      	b.n	800681a <_vfiprintf_r+0xc6>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	1d19      	adds	r1, r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	9103      	str	r1, [sp, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	bfbb      	ittet	lt
 8006880:	425b      	neglt	r3, r3
 8006882:	f042 0202 	orrlt.w	r2, r2, #2
 8006886:	9307      	strge	r3, [sp, #28]
 8006888:	9307      	strlt	r3, [sp, #28]
 800688a:	bfb8      	it	lt
 800688c:	9204      	strlt	r2, [sp, #16]
 800688e:	7823      	ldrb	r3, [r4, #0]
 8006890:	2b2e      	cmp	r3, #46	@ 0x2e
 8006892:	d10a      	bne.n	80068aa <_vfiprintf_r+0x156>
 8006894:	7863      	ldrb	r3, [r4, #1]
 8006896:	2b2a      	cmp	r3, #42	@ 0x2a
 8006898:	d132      	bne.n	8006900 <_vfiprintf_r+0x1ac>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	3402      	adds	r4, #2
 800689e:	1d1a      	adds	r2, r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	9203      	str	r2, [sp, #12]
 80068a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068a8:	9305      	str	r3, [sp, #20]
 80068aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006974 <_vfiprintf_r+0x220>
 80068ae:	2203      	movs	r2, #3
 80068b0:	4650      	mov	r0, sl
 80068b2:	7821      	ldrb	r1, [r4, #0]
 80068b4:	f000 fb44 	bl	8006f40 <memchr>
 80068b8:	b138      	cbz	r0, 80068ca <_vfiprintf_r+0x176>
 80068ba:	2240      	movs	r2, #64	@ 0x40
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	eba0 000a 	sub.w	r0, r0, sl
 80068c2:	4082      	lsls	r2, r0
 80068c4:	4313      	orrs	r3, r2
 80068c6:	3401      	adds	r4, #1
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ce:	2206      	movs	r2, #6
 80068d0:	4829      	ldr	r0, [pc, #164]	@ (8006978 <_vfiprintf_r+0x224>)
 80068d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068d6:	f000 fb33 	bl	8006f40 <memchr>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d03f      	beq.n	800695e <_vfiprintf_r+0x20a>
 80068de:	4b27      	ldr	r3, [pc, #156]	@ (800697c <_vfiprintf_r+0x228>)
 80068e0:	bb1b      	cbnz	r3, 800692a <_vfiprintf_r+0x1d6>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	3307      	adds	r3, #7
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	3308      	adds	r3, #8
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f0:	443b      	add	r3, r7
 80068f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068f4:	e76a      	b.n	80067cc <_vfiprintf_r+0x78>
 80068f6:	460c      	mov	r4, r1
 80068f8:	2001      	movs	r0, #1
 80068fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80068fe:	e7a8      	b.n	8006852 <_vfiprintf_r+0xfe>
 8006900:	2300      	movs	r3, #0
 8006902:	f04f 0c0a 	mov.w	ip, #10
 8006906:	4619      	mov	r1, r3
 8006908:	3401      	adds	r4, #1
 800690a:	9305      	str	r3, [sp, #20]
 800690c:	4620      	mov	r0, r4
 800690e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006912:	3a30      	subs	r2, #48	@ 0x30
 8006914:	2a09      	cmp	r2, #9
 8006916:	d903      	bls.n	8006920 <_vfiprintf_r+0x1cc>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0c6      	beq.n	80068aa <_vfiprintf_r+0x156>
 800691c:	9105      	str	r1, [sp, #20]
 800691e:	e7c4      	b.n	80068aa <_vfiprintf_r+0x156>
 8006920:	4604      	mov	r4, r0
 8006922:	2301      	movs	r3, #1
 8006924:	fb0c 2101 	mla	r1, ip, r1, r2
 8006928:	e7f0      	b.n	800690c <_vfiprintf_r+0x1b8>
 800692a:	ab03      	add	r3, sp, #12
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	462a      	mov	r2, r5
 8006930:	4630      	mov	r0, r6
 8006932:	4b13      	ldr	r3, [pc, #76]	@ (8006980 <_vfiprintf_r+0x22c>)
 8006934:	a904      	add	r1, sp, #16
 8006936:	f3af 8000 	nop.w
 800693a:	4607      	mov	r7, r0
 800693c:	1c78      	adds	r0, r7, #1
 800693e:	d1d6      	bne.n	80068ee <_vfiprintf_r+0x19a>
 8006940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006942:	07d9      	lsls	r1, r3, #31
 8006944:	d405      	bmi.n	8006952 <_vfiprintf_r+0x1fe>
 8006946:	89ab      	ldrh	r3, [r5, #12]
 8006948:	059a      	lsls	r2, r3, #22
 800694a:	d402      	bmi.n	8006952 <_vfiprintf_r+0x1fe>
 800694c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800694e:	f7ff fdd3 	bl	80064f8 <__retarget_lock_release_recursive>
 8006952:	89ab      	ldrh	r3, [r5, #12]
 8006954:	065b      	lsls	r3, r3, #25
 8006956:	f53f af1f 	bmi.w	8006798 <_vfiprintf_r+0x44>
 800695a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800695c:	e71e      	b.n	800679c <_vfiprintf_r+0x48>
 800695e:	ab03      	add	r3, sp, #12
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	462a      	mov	r2, r5
 8006964:	4630      	mov	r0, r6
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <_vfiprintf_r+0x22c>)
 8006968:	a904      	add	r1, sp, #16
 800696a:	f000 f87d 	bl	8006a68 <_printf_i>
 800696e:	e7e4      	b.n	800693a <_vfiprintf_r+0x1e6>
 8006970:	080071f2 	.word	0x080071f2
 8006974:	080071f8 	.word	0x080071f8
 8006978:	080071fc 	.word	0x080071fc
 800697c:	00000000 	.word	0x00000000
 8006980:	0800672f 	.word	0x0800672f

08006984 <_printf_common>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	4616      	mov	r6, r2
 800698a:	4698      	mov	r8, r3
 800698c:	688a      	ldr	r2, [r1, #8]
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	4607      	mov	r7, r0
 8006992:	4293      	cmp	r3, r2
 8006994:	bfb8      	it	lt
 8006996:	4613      	movlt	r3, r2
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800699e:	460c      	mov	r4, r1
 80069a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069a4:	b10a      	cbz	r2, 80069aa <_printf_common+0x26>
 80069a6:	3301      	adds	r3, #1
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	0699      	lsls	r1, r3, #26
 80069ae:	bf42      	ittt	mi
 80069b0:	6833      	ldrmi	r3, [r6, #0]
 80069b2:	3302      	addmi	r3, #2
 80069b4:	6033      	strmi	r3, [r6, #0]
 80069b6:	6825      	ldr	r5, [r4, #0]
 80069b8:	f015 0506 	ands.w	r5, r5, #6
 80069bc:	d106      	bne.n	80069cc <_printf_common+0x48>
 80069be:	f104 0a19 	add.w	sl, r4, #25
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	6832      	ldr	r2, [r6, #0]
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc2b      	bgt.n	8006a24 <_printf_common+0xa0>
 80069cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	3b00      	subs	r3, #0
 80069d4:	bf18      	it	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d430      	bmi.n	8006a3e <_printf_common+0xba>
 80069dc:	4641      	mov	r1, r8
 80069de:	4638      	mov	r0, r7
 80069e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069e4:	47c8      	blx	r9
 80069e6:	3001      	adds	r0, #1
 80069e8:	d023      	beq.n	8006a32 <_printf_common+0xae>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	f003 0306 	and.w	r3, r3, #6
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	bf14      	ite	ne
 80069f6:	2500      	movne	r5, #0
 80069f8:	6833      	ldreq	r3, [r6, #0]
 80069fa:	f04f 0600 	mov.w	r6, #0
 80069fe:	bf08      	it	eq
 8006a00:	68e5      	ldreq	r5, [r4, #12]
 8006a02:	f104 041a 	add.w	r4, r4, #26
 8006a06:	bf08      	it	eq
 8006a08:	1aed      	subeq	r5, r5, r3
 8006a0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006a0e:	bf08      	it	eq
 8006a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a14:	4293      	cmp	r3, r2
 8006a16:	bfc4      	itt	gt
 8006a18:	1a9b      	subgt	r3, r3, r2
 8006a1a:	18ed      	addgt	r5, r5, r3
 8006a1c:	42b5      	cmp	r5, r6
 8006a1e:	d11a      	bne.n	8006a56 <_printf_common+0xd2>
 8006a20:	2000      	movs	r0, #0
 8006a22:	e008      	b.n	8006a36 <_printf_common+0xb2>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4652      	mov	r2, sl
 8006a28:	4641      	mov	r1, r8
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	47c8      	blx	r9
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d103      	bne.n	8006a3a <_printf_common+0xb6>
 8006a32:	f04f 30ff 	mov.w	r0, #4294967295
 8006a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3a:	3501      	adds	r5, #1
 8006a3c:	e7c1      	b.n	80069c2 <_printf_common+0x3e>
 8006a3e:	2030      	movs	r0, #48	@ 0x30
 8006a40:	18e1      	adds	r1, r4, r3
 8006a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a4c:	4422      	add	r2, r4
 8006a4e:	3302      	adds	r3, #2
 8006a50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a54:	e7c2      	b.n	80069dc <_printf_common+0x58>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4641      	mov	r1, r8
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	47c8      	blx	r9
 8006a60:	3001      	adds	r0, #1
 8006a62:	d0e6      	beq.n	8006a32 <_printf_common+0xae>
 8006a64:	3601      	adds	r6, #1
 8006a66:	e7d9      	b.n	8006a1c <_printf_common+0x98>

08006a68 <_printf_i>:
 8006a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	7e0f      	ldrb	r7, [r1, #24]
 8006a6e:	4691      	mov	r9, r2
 8006a70:	2f78      	cmp	r7, #120	@ 0x78
 8006a72:	4680      	mov	r8, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	469a      	mov	sl, r3
 8006a78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a7e:	d807      	bhi.n	8006a90 <_printf_i+0x28>
 8006a80:	2f62      	cmp	r7, #98	@ 0x62
 8006a82:	d80a      	bhi.n	8006a9a <_printf_i+0x32>
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	f000 80d3 	beq.w	8006c30 <_printf_i+0x1c8>
 8006a8a:	2f58      	cmp	r7, #88	@ 0x58
 8006a8c:	f000 80ba 	beq.w	8006c04 <_printf_i+0x19c>
 8006a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a98:	e03a      	b.n	8006b10 <_printf_i+0xa8>
 8006a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a9e:	2b15      	cmp	r3, #21
 8006aa0:	d8f6      	bhi.n	8006a90 <_printf_i+0x28>
 8006aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8006aa8 <_printf_i+0x40>)
 8006aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006b15 	.word	0x08006b15
 8006ab0:	08006a91 	.word	0x08006a91
 8006ab4:	08006a91 	.word	0x08006a91
 8006ab8:	08006a91 	.word	0x08006a91
 8006abc:	08006a91 	.word	0x08006a91
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006a91 	.word	0x08006a91
 8006ac8:	08006a91 	.word	0x08006a91
 8006acc:	08006a91 	.word	0x08006a91
 8006ad0:	08006a91 	.word	0x08006a91
 8006ad4:	08006c17 	.word	0x08006c17
 8006ad8:	08006b3f 	.word	0x08006b3f
 8006adc:	08006bd1 	.word	0x08006bd1
 8006ae0:	08006a91 	.word	0x08006a91
 8006ae4:	08006a91 	.word	0x08006a91
 8006ae8:	08006c39 	.word	0x08006c39
 8006aec:	08006a91 	.word	0x08006a91
 8006af0:	08006b3f 	.word	0x08006b3f
 8006af4:	08006a91 	.word	0x08006a91
 8006af8:	08006a91 	.word	0x08006a91
 8006afc:	08006bd9 	.word	0x08006bd9
 8006b00:	6833      	ldr	r3, [r6, #0]
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6032      	str	r2, [r6, #0]
 8006b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b10:	2301      	movs	r3, #1
 8006b12:	e09e      	b.n	8006c52 <_printf_i+0x1ea>
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	6820      	ldr	r0, [r4, #0]
 8006b18:	1d19      	adds	r1, r3, #4
 8006b1a:	6031      	str	r1, [r6, #0]
 8006b1c:	0606      	lsls	r6, r0, #24
 8006b1e:	d501      	bpl.n	8006b24 <_printf_i+0xbc>
 8006b20:	681d      	ldr	r5, [r3, #0]
 8006b22:	e003      	b.n	8006b2c <_printf_i+0xc4>
 8006b24:	0645      	lsls	r5, r0, #25
 8006b26:	d5fb      	bpl.n	8006b20 <_printf_i+0xb8>
 8006b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	da03      	bge.n	8006b38 <_printf_i+0xd0>
 8006b30:	232d      	movs	r3, #45	@ 0x2d
 8006b32:	426d      	negs	r5, r5
 8006b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b38:	230a      	movs	r3, #10
 8006b3a:	4859      	ldr	r0, [pc, #356]	@ (8006ca0 <_printf_i+0x238>)
 8006b3c:	e011      	b.n	8006b62 <_printf_i+0xfa>
 8006b3e:	6821      	ldr	r1, [r4, #0]
 8006b40:	6833      	ldr	r3, [r6, #0]
 8006b42:	0608      	lsls	r0, r1, #24
 8006b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b48:	d402      	bmi.n	8006b50 <_printf_i+0xe8>
 8006b4a:	0649      	lsls	r1, r1, #25
 8006b4c:	bf48      	it	mi
 8006b4e:	b2ad      	uxthmi	r5, r5
 8006b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b52:	6033      	str	r3, [r6, #0]
 8006b54:	bf14      	ite	ne
 8006b56:	230a      	movne	r3, #10
 8006b58:	2308      	moveq	r3, #8
 8006b5a:	4851      	ldr	r0, [pc, #324]	@ (8006ca0 <_printf_i+0x238>)
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b62:	6866      	ldr	r6, [r4, #4]
 8006b64:	2e00      	cmp	r6, #0
 8006b66:	bfa8      	it	ge
 8006b68:	6821      	ldrge	r1, [r4, #0]
 8006b6a:	60a6      	str	r6, [r4, #8]
 8006b6c:	bfa4      	itt	ge
 8006b6e:	f021 0104 	bicge.w	r1, r1, #4
 8006b72:	6021      	strge	r1, [r4, #0]
 8006b74:	b90d      	cbnz	r5, 8006b7a <_printf_i+0x112>
 8006b76:	2e00      	cmp	r6, #0
 8006b78:	d04b      	beq.n	8006c12 <_printf_i+0x1aa>
 8006b7a:	4616      	mov	r6, r2
 8006b7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b80:	fb03 5711 	mls	r7, r3, r1, r5
 8006b84:	5dc7      	ldrb	r7, [r0, r7]
 8006b86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b8a:	462f      	mov	r7, r5
 8006b8c:	42bb      	cmp	r3, r7
 8006b8e:	460d      	mov	r5, r1
 8006b90:	d9f4      	bls.n	8006b7c <_printf_i+0x114>
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d10b      	bne.n	8006bae <_printf_i+0x146>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	07df      	lsls	r7, r3, #31
 8006b9a:	d508      	bpl.n	8006bae <_printf_i+0x146>
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	6861      	ldr	r1, [r4, #4]
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	bfde      	ittt	le
 8006ba4:	2330      	movle	r3, #48	@ 0x30
 8006ba6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006baa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bae:	1b92      	subs	r2, r2, r6
 8006bb0:	6122      	str	r2, [r4, #16]
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	f8cd a000 	str.w	sl, [sp]
 8006bbc:	aa03      	add	r2, sp, #12
 8006bbe:	f7ff fee1 	bl	8006984 <_printf_common>
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d14a      	bne.n	8006c5c <_printf_i+0x1f4>
 8006bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bca:	b004      	add	sp, #16
 8006bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	f043 0320 	orr.w	r3, r3, #32
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	2778      	movs	r7, #120	@ 0x78
 8006bda:	4832      	ldr	r0, [pc, #200]	@ (8006ca4 <_printf_i+0x23c>)
 8006bdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	061f      	lsls	r7, r3, #24
 8006be6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bea:	d402      	bmi.n	8006bf2 <_printf_i+0x18a>
 8006bec:	065f      	lsls	r7, r3, #25
 8006bee:	bf48      	it	mi
 8006bf0:	b2ad      	uxthmi	r5, r5
 8006bf2:	6031      	str	r1, [r6, #0]
 8006bf4:	07d9      	lsls	r1, r3, #31
 8006bf6:	bf44      	itt	mi
 8006bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8006bfc:	6023      	strmi	r3, [r4, #0]
 8006bfe:	b11d      	cbz	r5, 8006c08 <_printf_i+0x1a0>
 8006c00:	2310      	movs	r3, #16
 8006c02:	e7ab      	b.n	8006b5c <_printf_i+0xf4>
 8006c04:	4826      	ldr	r0, [pc, #152]	@ (8006ca0 <_printf_i+0x238>)
 8006c06:	e7e9      	b.n	8006bdc <_printf_i+0x174>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	f023 0320 	bic.w	r3, r3, #32
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	e7f6      	b.n	8006c00 <_printf_i+0x198>
 8006c12:	4616      	mov	r6, r2
 8006c14:	e7bd      	b.n	8006b92 <_printf_i+0x12a>
 8006c16:	6833      	ldr	r3, [r6, #0]
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	1d18      	adds	r0, r3, #4
 8006c1c:	6961      	ldr	r1, [r4, #20]
 8006c1e:	6030      	str	r0, [r6, #0]
 8006c20:	062e      	lsls	r6, r5, #24
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	d501      	bpl.n	8006c2a <_printf_i+0x1c2>
 8006c26:	6019      	str	r1, [r3, #0]
 8006c28:	e002      	b.n	8006c30 <_printf_i+0x1c8>
 8006c2a:	0668      	lsls	r0, r5, #25
 8006c2c:	d5fb      	bpl.n	8006c26 <_printf_i+0x1be>
 8006c2e:	8019      	strh	r1, [r3, #0]
 8006c30:	2300      	movs	r3, #0
 8006c32:	4616      	mov	r6, r2
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	e7bc      	b.n	8006bb2 <_printf_i+0x14a>
 8006c38:	6833      	ldr	r3, [r6, #0]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	6032      	str	r2, [r6, #0]
 8006c40:	681e      	ldr	r6, [r3, #0]
 8006c42:	6862      	ldr	r2, [r4, #4]
 8006c44:	4630      	mov	r0, r6
 8006c46:	f000 f97b 	bl	8006f40 <memchr>
 8006c4a:	b108      	cbz	r0, 8006c50 <_printf_i+0x1e8>
 8006c4c:	1b80      	subs	r0, r0, r6
 8006c4e:	6060      	str	r0, [r4, #4]
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	2300      	movs	r3, #0
 8006c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c5a:	e7aa      	b.n	8006bb2 <_printf_i+0x14a>
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4640      	mov	r0, r8
 8006c62:	6923      	ldr	r3, [r4, #16]
 8006c64:	47d0      	blx	sl
 8006c66:	3001      	adds	r0, #1
 8006c68:	d0ad      	beq.n	8006bc6 <_printf_i+0x15e>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	079b      	lsls	r3, r3, #30
 8006c6e:	d413      	bmi.n	8006c98 <_printf_i+0x230>
 8006c70:	68e0      	ldr	r0, [r4, #12]
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	4298      	cmp	r0, r3
 8006c76:	bfb8      	it	lt
 8006c78:	4618      	movlt	r0, r3
 8006c7a:	e7a6      	b.n	8006bca <_printf_i+0x162>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4632      	mov	r2, r6
 8006c80:	4649      	mov	r1, r9
 8006c82:	4640      	mov	r0, r8
 8006c84:	47d0      	blx	sl
 8006c86:	3001      	adds	r0, #1
 8006c88:	d09d      	beq.n	8006bc6 <_printf_i+0x15e>
 8006c8a:	3501      	adds	r5, #1
 8006c8c:	68e3      	ldr	r3, [r4, #12]
 8006c8e:	9903      	ldr	r1, [sp, #12]
 8006c90:	1a5b      	subs	r3, r3, r1
 8006c92:	42ab      	cmp	r3, r5
 8006c94:	dcf2      	bgt.n	8006c7c <_printf_i+0x214>
 8006c96:	e7eb      	b.n	8006c70 <_printf_i+0x208>
 8006c98:	2500      	movs	r5, #0
 8006c9a:	f104 0619 	add.w	r6, r4, #25
 8006c9e:	e7f5      	b.n	8006c8c <_printf_i+0x224>
 8006ca0:	08007203 	.word	0x08007203
 8006ca4:	08007214 	.word	0x08007214

08006ca8 <__sflush_r>:
 8006ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cae:	0716      	lsls	r6, r2, #28
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	d454      	bmi.n	8006d60 <__sflush_r+0xb8>
 8006cb6:	684b      	ldr	r3, [r1, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc02      	bgt.n	8006cc2 <__sflush_r+0x1a>
 8006cbc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd48      	ble.n	8006d54 <__sflush_r+0xac>
 8006cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cc4:	2e00      	cmp	r6, #0
 8006cc6:	d045      	beq.n	8006d54 <__sflush_r+0xac>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cce:	682f      	ldr	r7, [r5, #0]
 8006cd0:	6a21      	ldr	r1, [r4, #32]
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	d030      	beq.n	8006d38 <__sflush_r+0x90>
 8006cd6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	0759      	lsls	r1, r3, #29
 8006cdc:	d505      	bpl.n	8006cea <__sflush_r+0x42>
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	1ad2      	subs	r2, r2, r3
 8006ce2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ce4:	b10b      	cbz	r3, 8006cea <__sflush_r+0x42>
 8006ce6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ce8:	1ad2      	subs	r2, r2, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	4628      	mov	r0, r5
 8006cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cf0:	6a21      	ldr	r1, [r4, #32]
 8006cf2:	47b0      	blx	r6
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	d106      	bne.n	8006d08 <__sflush_r+0x60>
 8006cfa:	6829      	ldr	r1, [r5, #0]
 8006cfc:	291d      	cmp	r1, #29
 8006cfe:	d82b      	bhi.n	8006d58 <__sflush_r+0xb0>
 8006d00:	4a28      	ldr	r2, [pc, #160]	@ (8006da4 <__sflush_r+0xfc>)
 8006d02:	410a      	asrs	r2, r1
 8006d04:	07d6      	lsls	r6, r2, #31
 8006d06:	d427      	bmi.n	8006d58 <__sflush_r+0xb0>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	6062      	str	r2, [r4, #4]
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	04d9      	lsls	r1, r3, #19
 8006d10:	6022      	str	r2, [r4, #0]
 8006d12:	d504      	bpl.n	8006d1e <__sflush_r+0x76>
 8006d14:	1c42      	adds	r2, r0, #1
 8006d16:	d101      	bne.n	8006d1c <__sflush_r+0x74>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b903      	cbnz	r3, 8006d1e <__sflush_r+0x76>
 8006d1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d20:	602f      	str	r7, [r5, #0]
 8006d22:	b1b9      	cbz	r1, 8006d54 <__sflush_r+0xac>
 8006d24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	d002      	beq.n	8006d32 <__sflush_r+0x8a>
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f7ff fbf3 	bl	8006518 <_free_r>
 8006d32:	2300      	movs	r3, #0
 8006d34:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d36:	e00d      	b.n	8006d54 <__sflush_r+0xac>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b0      	blx	r6
 8006d3e:	4602      	mov	r2, r0
 8006d40:	1c50      	adds	r0, r2, #1
 8006d42:	d1c9      	bne.n	8006cd8 <__sflush_r+0x30>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c6      	beq.n	8006cd8 <__sflush_r+0x30>
 8006d4a:	2b1d      	cmp	r3, #29
 8006d4c:	d001      	beq.n	8006d52 <__sflush_r+0xaa>
 8006d4e:	2b16      	cmp	r3, #22
 8006d50:	d11d      	bne.n	8006d8e <__sflush_r+0xe6>
 8006d52:	602f      	str	r7, [r5, #0]
 8006d54:	2000      	movs	r0, #0
 8006d56:	e021      	b.n	8006d9c <__sflush_r+0xf4>
 8006d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d5c:	b21b      	sxth	r3, r3
 8006d5e:	e01a      	b.n	8006d96 <__sflush_r+0xee>
 8006d60:	690f      	ldr	r7, [r1, #16]
 8006d62:	2f00      	cmp	r7, #0
 8006d64:	d0f6      	beq.n	8006d54 <__sflush_r+0xac>
 8006d66:	0793      	lsls	r3, r2, #30
 8006d68:	bf18      	it	ne
 8006d6a:	2300      	movne	r3, #0
 8006d6c:	680e      	ldr	r6, [r1, #0]
 8006d6e:	bf08      	it	eq
 8006d70:	694b      	ldreq	r3, [r1, #20]
 8006d72:	1bf6      	subs	r6, r6, r7
 8006d74:	600f      	str	r7, [r1, #0]
 8006d76:	608b      	str	r3, [r1, #8]
 8006d78:	2e00      	cmp	r6, #0
 8006d7a:	ddeb      	ble.n	8006d54 <__sflush_r+0xac>
 8006d7c:	4633      	mov	r3, r6
 8006d7e:	463a      	mov	r2, r7
 8006d80:	4628      	mov	r0, r5
 8006d82:	6a21      	ldr	r1, [r4, #32]
 8006d84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d88:	47e0      	blx	ip
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	dc07      	bgt.n	8006d9e <__sflush_r+0xf6>
 8006d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d96:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d9e:	4407      	add	r7, r0
 8006da0:	1a36      	subs	r6, r6, r0
 8006da2:	e7e9      	b.n	8006d78 <__sflush_r+0xd0>
 8006da4:	dfbffffe 	.word	0xdfbffffe

08006da8 <_fflush_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	690b      	ldr	r3, [r1, #16]
 8006dac:	4605      	mov	r5, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	b913      	cbnz	r3, 8006db8 <_fflush_r+0x10>
 8006db2:	2500      	movs	r5, #0
 8006db4:	4628      	mov	r0, r5
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	b118      	cbz	r0, 8006dc2 <_fflush_r+0x1a>
 8006dba:	6a03      	ldr	r3, [r0, #32]
 8006dbc:	b90b      	cbnz	r3, 8006dc2 <_fflush_r+0x1a>
 8006dbe:	f7ff fa3f 	bl	8006240 <__sinit>
 8006dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f3      	beq.n	8006db2 <_fflush_r+0xa>
 8006dca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dcc:	07d0      	lsls	r0, r2, #31
 8006dce:	d404      	bmi.n	8006dda <_fflush_r+0x32>
 8006dd0:	0599      	lsls	r1, r3, #22
 8006dd2:	d402      	bmi.n	8006dda <_fflush_r+0x32>
 8006dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dd6:	f7ff fb8e 	bl	80064f6 <__retarget_lock_acquire_recursive>
 8006dda:	4628      	mov	r0, r5
 8006ddc:	4621      	mov	r1, r4
 8006dde:	f7ff ff63 	bl	8006ca8 <__sflush_r>
 8006de2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006de4:	4605      	mov	r5, r0
 8006de6:	07da      	lsls	r2, r3, #31
 8006de8:	d4e4      	bmi.n	8006db4 <_fflush_r+0xc>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	059b      	lsls	r3, r3, #22
 8006dee:	d4e1      	bmi.n	8006db4 <_fflush_r+0xc>
 8006df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006df2:	f7ff fb81 	bl	80064f8 <__retarget_lock_release_recursive>
 8006df6:	e7dd      	b.n	8006db4 <_fflush_r+0xc>

08006df8 <__swbuf_r>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	460e      	mov	r6, r1
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	4605      	mov	r5, r0
 8006e00:	b118      	cbz	r0, 8006e0a <__swbuf_r+0x12>
 8006e02:	6a03      	ldr	r3, [r0, #32]
 8006e04:	b90b      	cbnz	r3, 8006e0a <__swbuf_r+0x12>
 8006e06:	f7ff fa1b 	bl	8006240 <__sinit>
 8006e0a:	69a3      	ldr	r3, [r4, #24]
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	071a      	lsls	r2, r3, #28
 8006e12:	d501      	bpl.n	8006e18 <__swbuf_r+0x20>
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	b943      	cbnz	r3, 8006e2a <__swbuf_r+0x32>
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 f82a 	bl	8006e74 <__swsetup_r>
 8006e20:	b118      	cbz	r0, 8006e2a <__swbuf_r+0x32>
 8006e22:	f04f 37ff 	mov.w	r7, #4294967295
 8006e26:	4638      	mov	r0, r7
 8006e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	6922      	ldr	r2, [r4, #16]
 8006e2e:	b2f6      	uxtb	r6, r6
 8006e30:	1a98      	subs	r0, r3, r2
 8006e32:	6963      	ldr	r3, [r4, #20]
 8006e34:	4637      	mov	r7, r6
 8006e36:	4283      	cmp	r3, r0
 8006e38:	dc05      	bgt.n	8006e46 <__swbuf_r+0x4e>
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f7ff ffb3 	bl	8006da8 <_fflush_r>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d1ed      	bne.n	8006e22 <__swbuf_r+0x2a>
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	60a3      	str	r3, [r4, #8]
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	6022      	str	r2, [r4, #0]
 8006e52:	701e      	strb	r6, [r3, #0]
 8006e54:	6962      	ldr	r2, [r4, #20]
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d004      	beq.n	8006e66 <__swbuf_r+0x6e>
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	07db      	lsls	r3, r3, #31
 8006e60:	d5e1      	bpl.n	8006e26 <__swbuf_r+0x2e>
 8006e62:	2e0a      	cmp	r6, #10
 8006e64:	d1df      	bne.n	8006e26 <__swbuf_r+0x2e>
 8006e66:	4621      	mov	r1, r4
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7ff ff9d 	bl	8006da8 <_fflush_r>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d0d9      	beq.n	8006e26 <__swbuf_r+0x2e>
 8006e72:	e7d6      	b.n	8006e22 <__swbuf_r+0x2a>

08006e74 <__swsetup_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4b29      	ldr	r3, [pc, #164]	@ (8006f1c <__swsetup_r+0xa8>)
 8006e78:	4605      	mov	r5, r0
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	b118      	cbz	r0, 8006e88 <__swsetup_r+0x14>
 8006e80:	6a03      	ldr	r3, [r0, #32]
 8006e82:	b90b      	cbnz	r3, 8006e88 <__swsetup_r+0x14>
 8006e84:	f7ff f9dc 	bl	8006240 <__sinit>
 8006e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e8c:	0719      	lsls	r1, r3, #28
 8006e8e:	d422      	bmi.n	8006ed6 <__swsetup_r+0x62>
 8006e90:	06da      	lsls	r2, r3, #27
 8006e92:	d407      	bmi.n	8006ea4 <__swsetup_r+0x30>
 8006e94:	2209      	movs	r2, #9
 8006e96:	602a      	str	r2, [r5, #0]
 8006e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	e033      	b.n	8006f0c <__swsetup_r+0x98>
 8006ea4:	0758      	lsls	r0, r3, #29
 8006ea6:	d512      	bpl.n	8006ece <__swsetup_r+0x5a>
 8006ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eaa:	b141      	cbz	r1, 8006ebe <__swsetup_r+0x4a>
 8006eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <__swsetup_r+0x46>
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f7ff fb2f 	bl	8006518 <_free_r>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6063      	str	r3, [r4, #4]
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f043 0308 	orr.w	r3, r3, #8
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	6923      	ldr	r3, [r4, #16]
 8006ed8:	b94b      	cbnz	r3, 8006eee <__swsetup_r+0x7a>
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee4:	d003      	beq.n	8006eee <__swsetup_r+0x7a>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 f85c 	bl	8006fa6 <__smakebuf_r>
 8006eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef2:	f013 0201 	ands.w	r2, r3, #1
 8006ef6:	d00a      	beq.n	8006f0e <__swsetup_r+0x9a>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	60a2      	str	r2, [r4, #8]
 8006efc:	6962      	ldr	r2, [r4, #20]
 8006efe:	4252      	negs	r2, r2
 8006f00:	61a2      	str	r2, [r4, #24]
 8006f02:	6922      	ldr	r2, [r4, #16]
 8006f04:	b942      	cbnz	r2, 8006f18 <__swsetup_r+0xa4>
 8006f06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f0a:	d1c5      	bne.n	8006e98 <__swsetup_r+0x24>
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	0799      	lsls	r1, r3, #30
 8006f10:	bf58      	it	pl
 8006f12:	6962      	ldrpl	r2, [r4, #20]
 8006f14:	60a2      	str	r2, [r4, #8]
 8006f16:	e7f4      	b.n	8006f02 <__swsetup_r+0x8e>
 8006f18:	2000      	movs	r0, #0
 8006f1a:	e7f7      	b.n	8006f0c <__swsetup_r+0x98>
 8006f1c:	2000001c 	.word	0x2000001c

08006f20 <_sbrk_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	2300      	movs	r3, #0
 8006f24:	4d05      	ldr	r5, [pc, #20]	@ (8006f3c <_sbrk_r+0x1c>)
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	f7f9 fce0 	bl	80008f0 <_sbrk>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_sbrk_r+0x1a>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_sbrk_r+0x1a>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	20001cc4 	.word	0x20001cc4

08006f40 <memchr>:
 8006f40:	4603      	mov	r3, r0
 8006f42:	b510      	push	{r4, lr}
 8006f44:	b2c9      	uxtb	r1, r1
 8006f46:	4402      	add	r2, r0
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	d101      	bne.n	8006f52 <memchr+0x12>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e003      	b.n	8006f5a <memchr+0x1a>
 8006f52:	7804      	ldrb	r4, [r0, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	428c      	cmp	r4, r1
 8006f58:	d1f6      	bne.n	8006f48 <memchr+0x8>
 8006f5a:	bd10      	pop	{r4, pc}

08006f5c <__swhatbuf_r>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	4615      	mov	r5, r2
 8006f66:	2900      	cmp	r1, #0
 8006f68:	461e      	mov	r6, r3
 8006f6a:	b096      	sub	sp, #88	@ 0x58
 8006f6c:	da0c      	bge.n	8006f88 <__swhatbuf_r+0x2c>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	2100      	movs	r1, #0
 8006f72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f76:	bf14      	ite	ne
 8006f78:	2340      	movne	r3, #64	@ 0x40
 8006f7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f7e:	2000      	movs	r0, #0
 8006f80:	6031      	str	r1, [r6, #0]
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	b016      	add	sp, #88	@ 0x58
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	466a      	mov	r2, sp
 8006f8a:	f000 f849 	bl	8007020 <_fstat_r>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	dbed      	blt.n	8006f6e <__swhatbuf_r+0x12>
 8006f92:	9901      	ldr	r1, [sp, #4]
 8006f94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f9c:	4259      	negs	r1, r3
 8006f9e:	4159      	adcs	r1, r3
 8006fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fa4:	e7eb      	b.n	8006f7e <__swhatbuf_r+0x22>

08006fa6 <__smakebuf_r>:
 8006fa6:	898b      	ldrh	r3, [r1, #12]
 8006fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006faa:	079d      	lsls	r5, r3, #30
 8006fac:	4606      	mov	r6, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	d507      	bpl.n	8006fc2 <__smakebuf_r+0x1c>
 8006fb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	2301      	movs	r3, #1
 8006fbc:	6163      	str	r3, [r4, #20]
 8006fbe:	b003      	add	sp, #12
 8006fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc2:	466a      	mov	r2, sp
 8006fc4:	ab01      	add	r3, sp, #4
 8006fc6:	f7ff ffc9 	bl	8006f5c <__swhatbuf_r>
 8006fca:	9f00      	ldr	r7, [sp, #0]
 8006fcc:	4605      	mov	r5, r0
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7ff fb0b 	bl	80065ec <_malloc_r>
 8006fd6:	b948      	cbnz	r0, 8006fec <__smakebuf_r+0x46>
 8006fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fdc:	059a      	lsls	r2, r3, #22
 8006fde:	d4ee      	bmi.n	8006fbe <__smakebuf_r+0x18>
 8006fe0:	f023 0303 	bic.w	r3, r3, #3
 8006fe4:	f043 0302 	orr.w	r3, r3, #2
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	e7e2      	b.n	8006fb2 <__smakebuf_r+0xc>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	9b01      	ldr	r3, [sp, #4]
 8006ffa:	6020      	str	r0, [r4, #0]
 8006ffc:	b15b      	cbz	r3, 8007016 <__smakebuf_r+0x70>
 8006ffe:	4630      	mov	r0, r6
 8007000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007004:	f000 f81e 	bl	8007044 <_isatty_r>
 8007008:	b128      	cbz	r0, 8007016 <__smakebuf_r+0x70>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f023 0303 	bic.w	r3, r3, #3
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	431d      	orrs	r5, r3
 800701a:	81a5      	strh	r5, [r4, #12]
 800701c:	e7cf      	b.n	8006fbe <__smakebuf_r+0x18>
	...

08007020 <_fstat_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	2300      	movs	r3, #0
 8007024:	4d06      	ldr	r5, [pc, #24]	@ (8007040 <_fstat_r+0x20>)
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f7f9 fc39 	bl	80008a4 <_fstat>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d102      	bne.n	800703c <_fstat_r+0x1c>
 8007036:	682b      	ldr	r3, [r5, #0]
 8007038:	b103      	cbz	r3, 800703c <_fstat_r+0x1c>
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	bf00      	nop
 8007040:	20001cc4 	.word	0x20001cc4

08007044 <_isatty_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	2300      	movs	r3, #0
 8007048:	4d05      	ldr	r5, [pc, #20]	@ (8007060 <_isatty_r+0x1c>)
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	f7f9 fc37 	bl	80008c2 <_isatty>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_isatty_r+0x1a>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_isatty_r+0x1a>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20001cc4 	.word	0x20001cc4

08007064 <_init>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr

08007070 <_fini>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr
