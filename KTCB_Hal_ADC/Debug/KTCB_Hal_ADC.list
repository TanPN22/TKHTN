
KTCB_Hal_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08008108  08008108  00009108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008588  08008588  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008588  08008588  00009588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008590  08008590  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008590  08008590  00009590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008598  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  0800876c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800876c  0000a3d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079c1  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001892  00000000  00000000  00011bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00013450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b9  00000000  00000000  00013d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182bb  00000000  00000000  000143e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bede  00000000  00000000  0002c69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088ea5  00000000  00000000  0003857a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c141f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003914  00000000  00000000  000c1464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c4d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080080ec 	.word	0x080080ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080080ec 	.word	0x080080ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <lcd_send_internal>:

//	float speedData[100];
//	uint8_t dataCount = 0;


	void lcd_send_internal(uint8_t data, uint8_t flags) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
	    uint8_t upper = data & 0xF0;
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f023 030f 	bic.w	r3, r3, #15
 8000e06:	73fb      	strb	r3, [r7, #15]
	    uint8_t lower = (data << 4) & 0xF0;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	73bb      	strb	r3, [r7, #14]

	    uint8_t data_arr[4];
	    data_arr[0] = upper | flags | LCD_BACKLIGHT | LCD_ENABLE;
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f043 030c 	orr.w	r3, r3, #12
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	723b      	strb	r3, [r7, #8]
	    data_arr[1] = upper | flags | LCD_BACKLIGHT;
 8000e1e:	7bfa      	ldrb	r2, [r7, #15]
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	727b      	strb	r3, [r7, #9]
	    data_arr[2] = lower | flags | LCD_BACKLIGHT | LCD_ENABLE;
 8000e2e:	7bba      	ldrb	r2, [r7, #14]
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f043 030c 	orr.w	r3, r3, #12
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	72bb      	strb	r3, [r7, #10]
	    data_arr[3] = lower | flags | LCD_BACKLIGHT;
 8000e3e:	7bba      	ldrb	r2, [r7, #14]
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	72fb      	strb	r3, [r7, #11]

	    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, 4, HAL_MAX_DELAY);
 8000e4e:	f107 0208 	add.w	r2, r7, #8
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2304      	movs	r3, #4
 8000e5a:	214e      	movs	r1, #78	@ 0x4e
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <lcd_send_internal+0x7c>)
 8000e5e:	f001 fce1 	bl	8002824 <HAL_I2C_Master_Transmit>
	}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000220 	.word	0x20000220

08000e70 <lcd_send_cmd>:

	void lcd_send_cmd(uint8_t cmd) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	    lcd_send_internal(cmd, LCD_RS_CMD);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffb6 	bl	8000df0 <lcd_send_internal>
	    HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 fca5 	bl	80017d4 <HAL_Delay>
	}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <lcd_send_data>:

	void lcd_send_data(uint8_t data) {
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
	    lcd_send_internal(data, LCD_RS_DATA);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ffa5 	bl	8000df0 <lcd_send_internal>
	    HAL_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 fc94 	bl	80017d4 <HAL_Delay>
	}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <lcd_init>:

	void lcd_init(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	    HAL_Delay(50);
 8000eb8:	2032      	movs	r0, #50	@ 0x32
 8000eba:	f000 fc8b 	bl	80017d4 <HAL_Delay>
	    lcd_send_cmd(0x30);
 8000ebe:	2030      	movs	r0, #48	@ 0x30
 8000ec0:	f7ff ffd6 	bl	8000e70 <lcd_send_cmd>
	    HAL_Delay(5);
 8000ec4:	2005      	movs	r0, #5
 8000ec6:	f000 fc85 	bl	80017d4 <HAL_Delay>
	    lcd_send_cmd(0x30);
 8000eca:	2030      	movs	r0, #48	@ 0x30
 8000ecc:	f7ff ffd0 	bl	8000e70 <lcd_send_cmd>
	    HAL_Delay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 fc7f 	bl	80017d4 <HAL_Delay>
	    lcd_send_cmd(0x30);
 8000ed6:	2030      	movs	r0, #48	@ 0x30
 8000ed8:	f7ff ffca 	bl	8000e70 <lcd_send_cmd>
	    HAL_Delay(10);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f000 fc79 	bl	80017d4 <HAL_Delay>
	    lcd_send_cmd(0x20);  // 4-bit mode
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	f7ff ffc4 	bl	8000e70 <lcd_send_cmd>

	    lcd_send_cmd(0x28);  // 2 lines, 5x8 font
 8000ee8:	2028      	movs	r0, #40	@ 0x28
 8000eea:	f7ff ffc1 	bl	8000e70 <lcd_send_cmd>
	    lcd_send_cmd(0x08);  // display off
 8000eee:	2008      	movs	r0, #8
 8000ef0:	f7ff ffbe 	bl	8000e70 <lcd_send_cmd>
	    lcd_send_cmd(0x01);  // clear
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff ffbb 	bl	8000e70 <lcd_send_cmd>
	    HAL_Delay(2);
 8000efa:	2002      	movs	r0, #2
 8000efc:	f000 fc6a 	bl	80017d4 <HAL_Delay>
	    lcd_send_cmd(0x06);  // entry mode
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff ffb5 	bl	8000e70 <lcd_send_cmd>
	    lcd_send_cmd(0x0C);  // display on, cursor off, blink off
 8000f06:	200c      	movs	r0, #12
 8000f08:	f7ff ffb2 	bl	8000e70 <lcd_send_cmd>
	}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <lcd_clear>:

	void lcd_clear(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	    lcd_send_cmd(0x01);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff ffab 	bl	8000e70 <lcd_send_cmd>
	    HAL_Delay(2);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f000 fc5a 	bl	80017d4 <HAL_Delay>
	}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <lcd_set_cursor>:

	void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
	    uint8_t addr = (row == 0) ? 0x80 + col : 0xC0 + col;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d103      	bne.n	8000f42 <lcd_set_cursor+0x1e>
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	3b80      	subs	r3, #128	@ 0x80
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	e002      	b.n	8000f48 <lcd_set_cursor+0x24>
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	3b40      	subs	r3, #64	@ 0x40
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	73fb      	strb	r3, [r7, #15]
	    lcd_send_cmd(addr);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff8f 	bl	8000e70 <lcd_send_cmd>
	}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <lcd_print>:

	void lcd_print(char *str) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	    while (*str) {
 8000f62:	e007      	b.n	8000f74 <lcd_print+0x1a>
	        lcd_send_data((uint8_t)(*str));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff92 	bl	8000e92 <lcd_send_data>
	        str++;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
	    while (*str) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f3      	bne.n	8000f64 <lcd_print+0xa>
	    }
	}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <lcd_print_speed>:

	// -----------------------------
	// Hàm in float speedValue
	// -----------------------------
	void lcd_print_speed(float speedValue) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
	    char buffer[16];
	    snprintf(buffer, sizeof(buffer), "Speed: %.2f m/s", speedValue);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fa49 	bl	8000428 <__aeabi_f2d>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	f107 0008 	add.w	r0, r7, #8
 8000f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8000fa2:	4a09      	ldr	r2, [pc, #36]	@ (8000fc8 <lcd_print_speed+0x40>)
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	f003 fc3f 	bl	8004828 <sniprintf>

	    lcd_clear();
 8000faa:	f7ff ffb1 	bl	8000f10 <lcd_clear>
	    lcd_set_cursor(0, 0);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ffb7 	bl	8000f24 <lcd_set_cursor>
	    lcd_print(buffer);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ffcd 	bl	8000f5a <lcd_print>
	}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08008108 	.word	0x08008108

08000fcc <Get_ADC_channel.0>:

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
uint16_t Get_ADC_channel(uint32_t channel){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	f8c7 c000 	str.w	ip, [r7]
  	  uint16_t adc;
  //---------------Congig channel-------------

  	  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
  	  sConfig.Channel = channel;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fec:	2307      	movs	r3, #7
 8000fee:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	@ (8001030 <Get_ADC_channel.0+0x64>)
 8000ff8:	f000 fed4 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <Get_ADC_channel.0+0x3a>
  	  {
  	    Error_Handler();
 8001002:	f000 f9b9 	bl	8001378 <Error_Handler>
  	  }

  //---------------Read value---------------
  	  HAL_ADC_Start(&hadc1);
 8001006:	480a      	ldr	r0, [pc, #40]	@ (8001030 <Get_ADC_channel.0+0x64>)
 8001008:	f000 fce0 	bl	80019cc <HAL_ADC_Start>
  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800100c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001010:	4807      	ldr	r0, [pc, #28]	@ (8001030 <Get_ADC_channel.0+0x64>)
 8001012:	f000 fdb5 	bl	8001b80 <HAL_ADC_PollForConversion>
  	  adc = HAL_ADC_GetValue(&hadc1);
 8001016:	4806      	ldr	r0, [pc, #24]	@ (8001030 <Get_ADC_channel.0+0x64>)
 8001018:	f000 feb8 	bl	8001d8c <HAL_ADC_GetValue>
 800101c:	4603      	mov	r3, r0
 800101e:	82fb      	strh	r3, [r7, #22]
  	  HAL_ADC_Stop(&hadc1);
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <Get_ADC_channel.0+0x64>)
 8001022:	f000 fd81 	bl	8001b28 <HAL_ADC_Stop>
  	  return adc;
 8001026:	8afb      	ldrh	r3, [r7, #22]
  }
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200001f0 	.word	0x200001f0
 8001034:	00000000 	.word	0x00000000

08001038 <main>:
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
int main(void)
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001044:	f000 fb64 	bl	8001710 <HAL_Init>
  SystemClock_Config();
 8001048:	f000 f8a4 	bl	8001194 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f966 	bl	800131c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001050:	f000 f8f8 	bl	8001244 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001054:	f000 f934 	bl	80012c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001058:	f7ff ff2c 	bl	8000eb4 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adc_hal_value = Get_ADC_channel(ADC_CHANNEL_6);
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	469c      	mov	ip, r3
 8001060:	2006      	movs	r0, #6
 8001062:	f7ff ffb3 	bl	8000fcc <Get_ADC_channel.0>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b43      	ldr	r3, [pc, #268]	@ (8001178 <main+0x140>)
 800106c:	801a      	strh	r2, [r3, #0]
	  nowStatus = adc_hal_value < 2000;
 800106e:	4b42      	ldr	r3, [pc, #264]	@ (8001178 <main+0x140>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001076:	4293      	cmp	r3, r2
 8001078:	bf94      	ite	ls
 800107a:	2301      	movls	r3, #1
 800107c:	2300      	movhi	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4b3e      	ldr	r3, [pc, #248]	@ (800117c <main+0x144>)
 8001084:	701a      	strb	r2, [r3, #0]

	  if (nowStatus != prevStatus){
 8001086:	4b3d      	ldr	r3, [pc, #244]	@ (800117c <main+0x144>)
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <main+0x148>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d00c      	beq.n	80010ac <main+0x74>

		  if (nowStatus == 1)
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <main+0x144>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d104      	bne.n	80010a4 <main+0x6c>
		  {
			  count ++;
 800109a:	4b3a      	ldr	r3, [pc, #232]	@ (8001184 <main+0x14c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a38      	ldr	r2, [pc, #224]	@ (8001184 <main+0x14c>)
 80010a2:	6013      	str	r3, [r2, #0]
		  }

		  prevStatus = nowStatus;
 80010a4:	4b35      	ldr	r3, [pc, #212]	@ (800117c <main+0x144>)
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <main+0x148>)
 80010aa:	701a      	strb	r2, [r3, #0]
	  }

	  if (HAL_GetTick() - timeBuffer >= 3000){
 80010ac:	f000 fb88 	bl	80017c0 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <main+0x150>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80010bc:	4293      	cmp	r3, r2
 80010be:	d9cd      	bls.n	800105c <main+0x24>
		  speedValue = (float)count * 0.0658 * 3.1415 / 2.0 / ((HAL_GetTick() - timeBuffer) / 1000.0);
 80010c0:	4b30      	ldr	r3, [pc, #192]	@ (8001184 <main+0x14c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe05 	bl	8000cd4 <__aeabi_ui2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9ab 	bl	8000428 <__aeabi_f2d>
 80010d2:	a325      	add	r3, pc, #148	@ (adr r3, 8001168 <main+0x130>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff f9fe 	bl	80004d8 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	a322      	add	r3, pc, #136	@ (adr r3, 8001170 <main+0x138>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff f9f5 	bl	80004d8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010fe:	f7ff fb15 	bl	800072c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4614      	mov	r4, r2
 8001108:	461d      	mov	r5, r3
 800110a:	f000 fb59 	bl	80017c0 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <main+0x150>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f964 	bl	80003e4 <__aeabi_ui2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <main+0x154>)
 8001122:	f7ff fb03 	bl	800072c <__aeabi_ddiv>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff fafd 	bl	800072c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fcc5 	bl	8000ac8 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4a13      	ldr	r2, [pc, #76]	@ (8001190 <main+0x158>)
 8001142:	6013      	str	r3, [r2, #0]
		  lcd_print_speed(speedValue);
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <main+0x158>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff1d 	bl	8000f88 <lcd_print_speed>

		  HAL_Delay(400);
 800114e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001152:	f000 fb3f 	bl	80017d4 <HAL_Delay>
//		  speedData[dataCount ++] = speedValue;
		  count = 0;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <main+0x14c>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		  timeBuffer = HAL_GetTick();
 800115c:	f000 fb30 	bl	80017c0 <HAL_GetTick>
 8001160:	4603      	mov	r3, r0
 8001162:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <main+0x150>)
 8001164:	6013      	str	r3, [r2, #0]
	  adc_hal_value = Get_ADC_channel(ADC_CHANNEL_6);
 8001166:	e779      	b.n	800105c <main+0x24>
 8001168:	d013a92a 	.word	0xd013a92a
 800116c:	3fb0d844 	.word	0x3fb0d844
 8001170:	c083126f 	.word	0xc083126f
 8001174:	400921ca 	.word	0x400921ca
 8001178:	20000274 	.word	0x20000274
 800117c:	20000276 	.word	0x20000276
 8001180:	20000277 	.word	0x20000277
 8001184:	20000278 	.word	0x20000278
 8001188:	2000027c 	.word	0x2000027c
 800118c:	408f4000 	.word	0x408f4000
 8001190:	20000280 	.word	0x20000280

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	@ 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119e:	2228      	movs	r2, #40	@ 0x28
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fbd7 	bl	8004956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011d4:	2300      	movs	r3, #0
 80011d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011d8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80011dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fe76 	bl	8002ed4 <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80011ee:	f000 f8c3 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	230f      	movs	r3, #15
 80011f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2102      	movs	r1, #2
 800120e:	4618      	mov	r0, r3
 8001210:	f002 f8e2 	bl	80033d8 <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800121a:	f000 f8ad 	bl	8001378 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800121e:	2302      	movs	r3, #2
 8001220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001226:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fa62 	bl	80036f4 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001236:	f000 f89f 	bl	8001378 <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	@ 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_ADC1_Init+0x74>)
 8001256:	4a19      	ldr	r2, [pc, #100]	@ (80012bc <MX_ADC1_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_ADC1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_ADC1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <MX_ADC1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_ADC1_Init+0x74>)
 800126e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_ADC1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_ADC1_Init+0x74>)
 800127c:	2201      	movs	r2, #1
 800127e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001280:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <MX_ADC1_Init+0x74>)
 8001282:	f000 facb 	bl	800181c <HAL_ADC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800128c:	f000 f874 	bl	8001378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001290:	2306      	movs	r3, #6
 8001292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001294:	2301      	movs	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_ADC1_Init+0x74>)
 80012a2:	f000 fd7f 	bl	8001da4 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012ac:	f000 f864 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001f0 	.word	0x200001f0
 80012bc:	40012400 	.word	0x40012400

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 f94d 	bl	800259c <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 f836 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000220 	.word	0x20000220
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a13      	ldr	r2, [pc, #76]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_GPIO_Init+0x58>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <MX_GPIO_Init+0x58>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <HAL_MspInit+0x5c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_MspInit+0x5c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_MspInit+0x60>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <HAL_MspInit+0x60>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000

080013e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <HAL_ADC_MspInit+0x6c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d121      	bne.n	800144c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <HAL_ADC_MspInit+0x70>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_ADC_MspInit+0x70>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_ADC_MspInit+0x70>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_ADC_MspInit+0x70>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a0c      	ldr	r2, [pc, #48]	@ (8001458 <HAL_ADC_MspInit+0x70>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_ADC_MspInit+0x70>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001438:	2340      	movs	r3, #64	@ 0x40
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143c:	2303      	movs	r3, #3
 800143e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <HAL_ADC_MspInit+0x74>)
 8001448:	f000 ff24 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40012400 	.word	0x40012400
 8001458:	40021000 	.word	0x40021000
 800145c:	40010800 	.word	0x40010800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a15      	ldr	r2, [pc, #84]	@ (80014d0 <HAL_I2C_MspInit+0x70>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d123      	bne.n	80014c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <HAL_I2C_MspInit+0x74>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a13      	ldr	r2, [pc, #76]	@ (80014d4 <HAL_I2C_MspInit+0x74>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_I2C_MspInit+0x74>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001498:	23c0      	movs	r3, #192	@ 0xc0
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <HAL_I2C_MspInit+0x78>)
 80014ac:	f000 fef2 	bl	8002294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_I2C_MspInit+0x74>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010c00 	.word	0x40010c00

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f936 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <_kill>:

int _kill(int pid, int sig)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154c:	f003 fa56 	bl	80049fc <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	2216      	movs	r2, #22
 8001554:	601a      	str	r2, [r3, #0]
  return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_exit>:

void _exit (int status)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800156a:	f04f 31ff 	mov.w	r1, #4294967295
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffe7 	bl	8001542 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <_exit+0x12>

08001578 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00a      	b.n	80015a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158a:	f3af 8000 	nop.w
 800158e:	4601      	mov	r1, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <_read+0x12>
  }

  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e009      	b.n	80015d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf1      	blt.n	80015c4 <_write+0x12>
  }
  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001610:	605a      	str	r2, [r3, #4]
  return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <_isatty>:

int _isatty(int file)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f003 f9be 	bl	80049fc <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20005000 	.word	0x20005000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	20000284 	.word	0x20000284
 80016b4:	200003d8 	.word	0x200003d8

080016b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c4:	f7ff fff8 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c8:	480b      	ldr	r0, [pc, #44]	@ (80016f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ca:	490c      	ldr	r1, [pc, #48]	@ (80016fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016e0:	4c09      	ldr	r4, [pc, #36]	@ (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ee:	f003 f98b 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f2:	f7ff fca1 	bl	8001038 <main>
  bx lr
 80016f6:	4770      	bx	lr
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001700:	08008598 	.word	0x08008598
  ldr r2, =_sbss
 8001704:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001708:	200003d8 	.word	0x200003d8

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <HAL_Init+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_Init+0x28>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 fd83 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	200f      	movs	r0, #15
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fe2a 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fd8d 	bl	800227a <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 fd63 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	20000008 	.word	0x20000008
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_IncTick+0x1c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_IncTick+0x20>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_IncTick+0x20>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000288 	.word	0x20000288

080017c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b02      	ldr	r3, [pc, #8]	@ (80017d0 <HAL_GetTick+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	20000288 	.word	0x20000288

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff fff0 	bl	80017c0 <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffe0 	bl	80017c0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0be      	b.n	80019bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fdc4 	bl	80013e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fbf1 	bl	8002048 <ADC_ConversionStop_Disable>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8099 	bne.w	80019aa <HAL_ADC_Init+0x18e>
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 8095 	bne.w	80019aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001888:	f023 0302 	bic.w	r3, r3, #2
 800188c:	f043 0202 	orr.w	r2, r3, #2
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800189c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7b1b      	ldrb	r3, [r3, #12]
 80018a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018b4:	d003      	beq.n	80018be <HAL_ADC_Init+0xa2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <HAL_ADC_Init+0xa8>
 80018be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018c2:	e000      	b.n	80018c6 <HAL_ADC_Init+0xaa>
 80018c4:	2300      	movs	r3, #0
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7d1b      	ldrb	r3, [r3, #20]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d119      	bne.n	8001908 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7b1b      	ldrb	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	035a      	lsls	r2, r3, #13
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	e00b      	b.n	8001908 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	f043 0220 	orr.w	r2, r3, #32
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_ADC_Init+0x1a8>)
 8001924:	4013      	ands	r3, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	430b      	orrs	r3, r1
 800192e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001938:	d003      	beq.n	8001942 <HAL_ADC_Init+0x126>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d104      	bne.n	800194c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	3b01      	subs	r3, #1
 8001948:	051b      	lsls	r3, r3, #20
 800194a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	430a      	orrs	r2, r1
 800195e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <HAL_ADC_Init+0x1ac>)
 8001968:	4013      	ands	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	d10b      	bne.n	8001988 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001986:	e018      	b.n	80019ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	f023 0312 	bic.w	r3, r3, #18
 8001990:	f043 0210 	orr.w	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019a8:	e007      	b.n	80019ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	f043 0210 	orr.w	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	ffe1f7fd 	.word	0xffe1f7fd
 80019c8:	ff1f0efe 	.word	0xff1f0efe

080019cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Start+0x1a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e098      	b.n	8001b18 <HAL_ADC_Start+0x14c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fad0 	bl	8001f94 <ADC_Enable>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 8087 	bne.w	8001b0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a41      	ldr	r2, [pc, #260]	@ (8001b20 <HAL_ADC_Start+0x154>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d105      	bne.n	8001a2a <HAL_ADC_Start+0x5e>
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_ADC_Start+0x158>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d115      	bne.n	8001a56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d026      	beq.n	8001a92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a54:	e01d      	b.n	8001a92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2f      	ldr	r2, [pc, #188]	@ (8001b24 <HAL_ADC_Start+0x158>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d004      	beq.n	8001a76 <HAL_ADC_Start+0xaa>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2b      	ldr	r2, [pc, #172]	@ (8001b20 <HAL_ADC_Start+0x154>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10d      	bne.n	8001a92 <HAL_ADC_Start+0xc6>
 8001a76:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <HAL_ADC_Start+0x158>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa2:	f023 0206 	bic.w	r2, r3, #6
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001aaa:	e002      	b.n	8001ab2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f06f 0202 	mvn.w	r2, #2
 8001ac2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ace:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ad2:	d113      	bne.n	8001afc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ad8:	4a11      	ldr	r2, [pc, #68]	@ (8001b20 <HAL_ADC_Start+0x154>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <HAL_ADC_Start+0x158>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d108      	bne.n	8001afc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	e00c      	b.n	8001b16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	e003      	b.n	8001b16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40012800 	.word	0x40012800
 8001b24:	40012400 	.word	0x40012400

08001b28 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Stop+0x1a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e01a      	b.n	8001b78 <HAL_ADC_Stop+0x50>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa7c 	bl	8002048 <ADC_ConversionStop_Disable>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b96:	f7ff fe13 	bl	80017c0 <HAL_GetTick>
 8001b9a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	f043 0220 	orr.w	r2, r3, #32
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0d3      	b.n	8001d6a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d131      	bne.n	8001c34 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d12a      	bne.n	8001c34 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bde:	e021      	b.n	8001c24 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be6:	d01d      	beq.n	8001c24 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_ADC_PollForConversion+0x7e>
 8001bee:	f7ff fde7 	bl	80017c0 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d212      	bcs.n	8001c24 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10b      	bne.n	8001c24 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	f043 0204 	orr.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0a2      	b.n	8001d6a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0d6      	beq.n	8001be0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c32:	e070      	b.n	8001d16 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c34:	4b4f      	ldr	r3, [pc, #316]	@ (8001d74 <HAL_ADC_PollForConversion+0x1f4>)
 8001c36:	681c      	ldr	r4, [r3, #0]
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f001 fe11 	bl	8003860 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d78 <HAL_ADC_PollForConversion+0x1f8>)
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x104>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68d9      	ldr	r1, [r3, #12]
 8001c58:	4b48      	ldr	r3, [pc, #288]	@ (8001d7c <HAL_ADC_PollForConversion+0x1fc>)
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x104>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6919      	ldr	r1, [r3, #16]
 8001c66:	4b46      	ldr	r3, [pc, #280]	@ (8001d80 <HAL_ADC_PollForConversion+0x200>)
 8001c68:	400b      	ands	r3, r1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x100>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68d9      	ldr	r1, [r3, #12]
 8001c74:	4b43      	ldr	r3, [pc, #268]	@ (8001d84 <HAL_ADC_PollForConversion+0x204>)
 8001c76:	400b      	ands	r3, r1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x100>
 8001c7c:	2314      	movs	r3, #20
 8001c7e:	e020      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x142>
 8001c80:	2329      	movs	r3, #41	@ 0x29
 8001c82:	e01e      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x142>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <HAL_ADC_PollForConversion+0x200>)
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x120>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_ADC_PollForConversion+0x204>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00d      	beq.n	8001cbc <HAL_ADC_PollForConversion+0x13c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <HAL_ADC_PollForConversion+0x208>)
 8001ca8:	400b      	ands	r3, r1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d108      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x140>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68d9      	ldr	r1, [r3, #12]
 8001cb4:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_ADC_PollForConversion+0x208>)
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x140>
 8001cbc:	2354      	movs	r3, #84	@ 0x54
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x142>
 8001cc0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cc8:	e021      	b.n	8001d0e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d01a      	beq.n	8001d08 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_ADC_PollForConversion+0x168>
 8001cd8:	f7ff fd72 	bl	80017c0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d20f      	bcs.n	8001d08 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d90b      	bls.n	8001d08 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e030      	b.n	8001d6a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d8d9      	bhi.n	8001cca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0212 	mvn.w	r2, #18
 8001d1e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d36:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d3a:	d115      	bne.n	8001d68 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d111      	bne.n	8001d68 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd90      	pop	{r4, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000
 8001d78:	24924924 	.word	0x24924924
 8001d7c:	00924924 	.word	0x00924924
 8001d80:	12492492 	.word	0x12492492
 8001d84:	00492492 	.word	0x00492492
 8001d88:	00249249 	.word	0x00249249

08001d8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x20>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e0dc      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1da>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b06      	cmp	r3, #6
 8001dd2:	d81c      	bhi.n	8001e0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b05      	subs	r3, #5
 8001de6:	221f      	movs	r2, #31
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4019      	ands	r1, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b05      	subs	r3, #5
 8001e00:	fa00 f203 	lsl.w	r2, r0, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e0c:	e03c      	b.n	8001e88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d81c      	bhi.n	8001e50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3b23      	subs	r3, #35	@ 0x23
 8001e28:	221f      	movs	r2, #31
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	4019      	ands	r1, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b23      	subs	r3, #35	@ 0x23
 8001e42:	fa00 f203 	lsl.w	r2, r0, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e4e:	e01b      	b.n	8001e88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b41      	subs	r3, #65	@ 0x41
 8001e62:	221f      	movs	r2, #31
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b41      	subs	r3, #65	@ 0x41
 8001e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d91c      	bls.n	8001eca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68d9      	ldr	r1, [r3, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b1e      	subs	r3, #30
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4019      	ands	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6898      	ldr	r0, [r3, #8]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b1e      	subs	r3, #30
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	e019      	b.n	8001efe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6919      	ldr	r1, [r3, #16]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4019      	ands	r1, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6898      	ldr	r0, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d003      	beq.n	8001f0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f0a:	2b11      	cmp	r3, #17
 8001f0c:	d132      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d125      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d126      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d11a      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_ADC_ConfigChannel+0x1e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	0c9a      	lsrs	r2, r3, #18
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f54:	e002      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f9      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x1b2>
 8001f62:	e007      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	40012400 	.word	0x40012400
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d040      	beq.n	8002034 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <ADC_Enable+0xac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002044 <ADC_Enable+0xb0>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	0c9b      	lsrs	r3, r3, #18
 8001fce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fd0:	e002      	b.n	8001fd8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fde:	f7ff fbef 	bl	80017c0 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fe4:	e01f      	b.n	8002026 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fe6:	f7ff fbeb 	bl	80017c0 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d918      	bls.n	8002026 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d011      	beq.n	8002026 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e007      	b.n	8002036 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d1d8      	bne.n	8001fe6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000
 8002044:	431bde83 	.word	0x431bde83

08002048 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d12e      	bne.n	80020c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002072:	f7ff fba5 	bl	80017c0 <HAL_GetTick>
 8002076:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002078:	e01b      	b.n	80020b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800207a:	f7ff fba1 	bl	80017c0 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d914      	bls.n	80020b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10d      	bne.n	80020b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	f043 0210 	orr.w	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e007      	b.n	80020c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d0dc      	beq.n	800207a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff90 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff49 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff5e 	bl	8002114 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff90 	bl	8002184 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5f 	bl	8002130 <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffb0 	bl	80021e8 <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b08b      	sub	sp, #44	@ 0x2c
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	e169      	b.n	800257c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022a8:	2201      	movs	r2, #1
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 8158 	bne.w	8002576 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a9a      	ldr	r2, [pc, #616]	@ (8002534 <HAL_GPIO_Init+0x2a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d05e      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022d0:	4a98      	ldr	r2, [pc, #608]	@ (8002534 <HAL_GPIO_Init+0x2a0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d875      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022d6:	4a98      	ldr	r2, [pc, #608]	@ (8002538 <HAL_GPIO_Init+0x2a4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d058      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022dc:	4a96      	ldr	r2, [pc, #600]	@ (8002538 <HAL_GPIO_Init+0x2a4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d86f      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022e2:	4a96      	ldr	r2, [pc, #600]	@ (800253c <HAL_GPIO_Init+0x2a8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d052      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022e8:	4a94      	ldr	r2, [pc, #592]	@ (800253c <HAL_GPIO_Init+0x2a8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d869      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022ee:	4a94      	ldr	r2, [pc, #592]	@ (8002540 <HAL_GPIO_Init+0x2ac>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d04c      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022f4:	4a92      	ldr	r2, [pc, #584]	@ (8002540 <HAL_GPIO_Init+0x2ac>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d863      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022fa:	4a92      	ldr	r2, [pc, #584]	@ (8002544 <HAL_GPIO_Init+0x2b0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d046      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 8002300:	4a90      	ldr	r2, [pc, #576]	@ (8002544 <HAL_GPIO_Init+0x2b0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d85d      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 8002306:	2b12      	cmp	r3, #18
 8002308:	d82a      	bhi.n	8002360 <HAL_GPIO_Init+0xcc>
 800230a:	2b12      	cmp	r3, #18
 800230c:	d859      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 800230e:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_GPIO_Init+0x80>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	0800238f 	.word	0x0800238f
 8002318:	08002369 	.word	0x08002369
 800231c:	0800237b 	.word	0x0800237b
 8002320:	080023bd 	.word	0x080023bd
 8002324:	080023c3 	.word	0x080023c3
 8002328:	080023c3 	.word	0x080023c3
 800232c:	080023c3 	.word	0x080023c3
 8002330:	080023c3 	.word	0x080023c3
 8002334:	080023c3 	.word	0x080023c3
 8002338:	080023c3 	.word	0x080023c3
 800233c:	080023c3 	.word	0x080023c3
 8002340:	080023c3 	.word	0x080023c3
 8002344:	080023c3 	.word	0x080023c3
 8002348:	080023c3 	.word	0x080023c3
 800234c:	080023c3 	.word	0x080023c3
 8002350:	080023c3 	.word	0x080023c3
 8002354:	080023c3 	.word	0x080023c3
 8002358:	08002371 	.word	0x08002371
 800235c:	08002385 	.word	0x08002385
 8002360:	4a79      	ldr	r2, [pc, #484]	@ (8002548 <HAL_GPIO_Init+0x2b4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002366:	e02c      	b.n	80023c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e029      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	3304      	adds	r3, #4
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e024      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	3308      	adds	r3, #8
 8002380:	623b      	str	r3, [r7, #32]
          break;
 8002382:	e01f      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	330c      	adds	r3, #12
 800238a:	623b      	str	r3, [r7, #32]
          break;
 800238c:	e01a      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002396:	2304      	movs	r3, #4
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e013      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a4:	2308      	movs	r3, #8
 80023a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	611a      	str	r2, [r3, #16]
          break;
 80023ae:	e009      	b.n	80023c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b0:	2308      	movs	r3, #8
 80023b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	615a      	str	r2, [r3, #20]
          break;
 80023ba:	e003      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
          break;
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          break;
 80023c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2bff      	cmp	r3, #255	@ 0xff
 80023c8:	d801      	bhi.n	80023ce <HAL_GPIO_Init+0x13a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	e001      	b.n	80023d2 <HAL_GPIO_Init+0x13e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2bff      	cmp	r3, #255	@ 0xff
 80023d8:	d802      	bhi.n	80023e0 <HAL_GPIO_Init+0x14c>
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x152>
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	3b08      	subs	r3, #8
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	210f      	movs	r1, #15
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	401a      	ands	r2, r3
 80023f8:	6a39      	ldr	r1, [r7, #32]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	431a      	orrs	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80b1 	beq.w	8002576 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002414:	4b4d      	ldr	r3, [pc, #308]	@ (800254c <HAL_GPIO_Init+0x2b8>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a4c      	ldr	r2, [pc, #304]	@ (800254c <HAL_GPIO_Init+0x2b8>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b4a      	ldr	r3, [pc, #296]	@ (800254c <HAL_GPIO_Init+0x2b8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800242c:	4a48      	ldr	r2, [pc, #288]	@ (8002550 <HAL_GPIO_Init+0x2bc>)
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a40      	ldr	r2, [pc, #256]	@ (8002554 <HAL_GPIO_Init+0x2c0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <HAL_GPIO_Init+0x1ec>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3f      	ldr	r2, [pc, #252]	@ (8002558 <HAL_GPIO_Init+0x2c4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1e8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3e      	ldr	r2, [pc, #248]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1e4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3d      	ldr	r2, [pc, #244]	@ (8002560 <HAL_GPIO_Init+0x2cc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1e0>
 8002470:	2303      	movs	r3, #3
 8002472:	e006      	b.n	8002482 <HAL_GPIO_Init+0x1ee>
 8002474:	2304      	movs	r3, #4
 8002476:	e004      	b.n	8002482 <HAL_GPIO_Init+0x1ee>
 8002478:	2302      	movs	r3, #2
 800247a:	e002      	b.n	8002482 <HAL_GPIO_Init+0x1ee>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_GPIO_Init+0x1ee>
 8002480:	2300      	movs	r3, #0
 8002482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002484:	f002 0203 	and.w	r2, r2, #3
 8002488:	0092      	lsls	r2, r2, #2
 800248a:	4093      	lsls	r3, r2
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002492:	492f      	ldr	r1, [pc, #188]	@ (8002550 <HAL_GPIO_Init+0x2bc>)
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d006      	beq.n	80024ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	492c      	ldr	r1, [pc, #176]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]
 80024b8:	e006      	b.n	80024c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	4928      	ldr	r1, [pc, #160]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024d4:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	4922      	ldr	r1, [pc, #136]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60cb      	str	r3, [r1, #12]
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	491e      	ldr	r1, [pc, #120]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4918      	ldr	r1, [pc, #96]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	4914      	ldr	r1, [pc, #80]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d021      	beq.n	8002568 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	490e      	ldr	r1, [pc, #56]	@ (8002564 <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e021      	b.n	8002576 <HAL_GPIO_Init+0x2e2>
 8002532:	bf00      	nop
 8002534:	10320000 	.word	0x10320000
 8002538:	10310000 	.word	0x10310000
 800253c:	10220000 	.word	0x10220000
 8002540:	10210000 	.word	0x10210000
 8002544:	10120000 	.word	0x10120000
 8002548:	10110000 	.word	0x10110000
 800254c:	40021000 	.word	0x40021000
 8002550:	40010000 	.word	0x40010000
 8002554:	40010800 	.word	0x40010800
 8002558:	40010c00 	.word	0x40010c00
 800255c:	40011000 	.word	0x40011000
 8002560:	40011400 	.word	0x40011400
 8002564:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_GPIO_Init+0x304>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	43db      	mvns	r3, r3
 8002570:	4909      	ldr	r1, [pc, #36]	@ (8002598 <HAL_GPIO_Init+0x304>)
 8002572:	4013      	ands	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	3301      	adds	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	f47f ae8e 	bne.w	80022a8 <HAL_GPIO_Init+0x14>
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	372c      	adds	r7, #44	@ 0x2c
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	40010400 	.word	0x40010400

0800259c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e12b      	b.n	8002806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe ff4c 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	@ 0x24
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002600:	f001 f832 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8002604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a81      	ldr	r2, [pc, #516]	@ (8002810 <HAL_I2C_Init+0x274>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d807      	bhi.n	8002620 <HAL_I2C_Init+0x84>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a80      	ldr	r2, [pc, #512]	@ (8002814 <HAL_I2C_Init+0x278>)
 8002614:	4293      	cmp	r3, r2
 8002616:	bf94      	ite	ls
 8002618:	2301      	movls	r3, #1
 800261a:	2300      	movhi	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e006      	b.n	800262e <HAL_I2C_Init+0x92>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a7d      	ldr	r2, [pc, #500]	@ (8002818 <HAL_I2C_Init+0x27c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0e7      	b.n	8002806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a78      	ldr	r2, [pc, #480]	@ (800281c <HAL_I2C_Init+0x280>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9b      	lsrs	r3, r3, #18
 8002640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a6a      	ldr	r2, [pc, #424]	@ (8002810 <HAL_I2C_Init+0x274>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d802      	bhi.n	8002670 <HAL_I2C_Init+0xd4>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3301      	adds	r3, #1
 800266e:	e009      	b.n	8002684 <HAL_I2C_Init+0xe8>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	4a69      	ldr	r2, [pc, #420]	@ (8002820 <HAL_I2C_Init+0x284>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	3301      	adds	r3, #1
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002696:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	495c      	ldr	r1, [pc, #368]	@ (8002810 <HAL_I2C_Init+0x274>)
 80026a0:	428b      	cmp	r3, r1
 80026a2:	d819      	bhi.n	80026d8 <HAL_I2C_Init+0x13c>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e59      	subs	r1, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026b8:	400b      	ands	r3, r1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_I2C_Init+0x138>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e59      	subs	r1, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d2:	e051      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 80026d4:	2304      	movs	r3, #4
 80026d6:	e04f      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d111      	bne.n	8002704 <HAL_I2C_Init+0x168>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e012      	b.n	800272a <HAL_I2C_Init+0x18e>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Init+0x196>
 800272e:	2301      	movs	r3, #1
 8002730:	e022      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <HAL_I2C_Init+0x1bc>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1e58      	subs	r0, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	440b      	add	r3, r1
 8002748:	fbb0 f3f3 	udiv	r3, r0, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002756:	e00f      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	0099      	lsls	r1, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	6809      	ldr	r1, [r1, #0]
 800277c:	4313      	orrs	r3, r2
 800277e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6911      	ldr	r1, [r2, #16]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	000186a0 	.word	0x000186a0
 8002814:	001e847f 	.word	0x001e847f
 8002818:	003d08ff 	.word	0x003d08ff
 800281c:	431bde83 	.word	0x431bde83
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
 8002834:	4613      	mov	r3, r2
 8002836:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7fe ffc2 	bl	80017c0 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b20      	cmp	r3, #32
 8002848:	f040 80e0 	bne.w	8002a0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2319      	movs	r3, #25
 8002852:	2201      	movs	r2, #1
 8002854:	4970      	ldr	r1, [pc, #448]	@ (8002a18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f964 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	e0d3      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_I2C_Master_Transmit+0x50>
 8002870:	2302      	movs	r3, #2
 8002872:	e0cc      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d007      	beq.n	800289a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2221      	movs	r2, #33	@ 0x21
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2210      	movs	r2, #16
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a50      	ldr	r2, [pc, #320]	@ (8002a1c <HAL_I2C_Master_Transmit+0x1f8>)
 80028da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f89c 	bl	8002a20 <I2C_MasterRequestWrite>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e08d      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002908:	e066      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fa22 	bl	8002d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d11b      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x188>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d017      	beq.n	80029ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	6a39      	ldr	r1, [r7, #32]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fa19 	bl	8002de8 <I2C_WaitOnBTFFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d107      	bne.n	80029d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e01a      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d194      	bne.n	800290a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	00100002 	.word	0x00100002
 8002a1c:	ffff0000 	.word	0xffff0000

08002a20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d006      	beq.n	8002a4a <I2C_MasterRequestWrite+0x2a>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d003      	beq.n	8002a4a <I2C_MasterRequestWrite+0x2a>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a48:	d108      	bne.n	8002a5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e00b      	b.n	8002a74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	2b12      	cmp	r3, #18
 8002a62:	d107      	bne.n	8002a74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f84f 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9a:	d103      	bne.n	8002aa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e035      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ab0:	d108      	bne.n	8002ac4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	e01b      	b.n	8002afc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	11db      	asrs	r3, r3, #7
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0306 	and.w	r3, r3, #6
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f063 030f 	orn	r3, r3, #15
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <I2C_MasterRequestWrite+0xfc>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f898 	bl	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e010      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4907      	ldr	r1, [pc, #28]	@ (8002b20 <I2C_MasterRequestWrite+0x100>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f888 	bl	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	00010008 	.word	0x00010008
 8002b20:	00010002 	.word	0x00010002

08002b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b34:	e048      	b.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d044      	beq.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe fe3f 	bl	80017c0 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d139      	bne.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10d      	bne.n	8002b7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	e00c      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d116      	bne.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e023      	b.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10d      	bne.n	8002bee <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	e00c      	b.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d093      	beq.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c26:	e071      	b.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c36:	d123      	bne.n	8002c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f043 0204 	orr.w	r2, r3, #4
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e067      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	d041      	beq.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c88:	f7fe fd9a 	bl	80017c0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d302      	bcc.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d136      	bne.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10c      	bne.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e00b      	b.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e021      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d10c      	bne.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4013      	ands	r3, r2
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e00b      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f af6d 	bne.w	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d64:	e034      	b.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f886 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e034      	b.n	8002de0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d028      	beq.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7fe fd1f 	bl	80017c0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11d      	bne.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d016      	beq.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b80      	cmp	r3, #128	@ 0x80
 8002ddc:	d1c3      	bne.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df4:	e034      	b.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f83e 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e034      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d028      	beq.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7fe fcd7 	bl	80017c0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11d      	bne.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d016      	beq.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e007      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d1c3      	bne.n	8002df6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8e:	d11b      	bne.n	8002ec8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e272      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8087 	beq.w	8003002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef4:	4b92      	ldr	r3, [pc, #584]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d00c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f00:	4b8f      	ldr	r3, [pc, #572]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d112      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5e>
 8002f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1a:	4b89      	ldr	r3, [pc, #548]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d06c      	beq.n	8003000 <HAL_RCC_OscConfig+0x12c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d168      	bne.n	8003000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e24c      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x76>
 8002f3c:	4b80      	ldr	r3, [pc, #512]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a7f      	ldr	r2, [pc, #508]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	e02e      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x98>
 8002f52:	4b7b      	ldr	r3, [pc, #492]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7a      	ldr	r2, [pc, #488]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b78      	ldr	r3, [pc, #480]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a77      	ldr	r2, [pc, #476]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xbc>
 8002f76:	4b72      	ldr	r3, [pc, #456]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a71      	ldr	r2, [pc, #452]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6e      	ldr	r2, [pc, #440]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f90:	4b6b      	ldr	r3, [pc, #428]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6a      	ldr	r2, [pc, #424]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b68      	ldr	r3, [pc, #416]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a67      	ldr	r2, [pc, #412]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fc06 	bl	80017c0 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fc02 	bl	80017c0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e200      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b5d      	ldr	r3, [pc, #372]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xe4>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fbf2 	bl	80017c0 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fbee 	bl	80017c0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1ec      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b53      	ldr	r3, [pc, #332]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x10c>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d063      	beq.n	80030d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300e:	4b4c      	ldr	r3, [pc, #304]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800301a:	4b49      	ldr	r3, [pc, #292]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b08      	cmp	r3, #8
 8003024:	d11c      	bne.n	8003060 <HAL_RCC_OscConfig+0x18c>
 8003026:	4b46      	ldr	r3, [pc, #280]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	4b43      	ldr	r3, [pc, #268]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x176>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1c0      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4939      	ldr	r1, [pc, #228]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	e03a      	b.n	80030d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003068:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <HAL_RCC_OscConfig+0x270>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fba7 	bl	80017c0 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003076:	f7fe fba3 	bl	80017c0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1a1      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	4b2d      	ldr	r3, [pc, #180]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b2a      	ldr	r3, [pc, #168]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4927      	ldr	r1, [pc, #156]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e015      	b.n	80030d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <HAL_RCC_OscConfig+0x270>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fb86 	bl	80017c0 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe fb82 	bl	80017c0 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e180      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d03a      	beq.n	8003158 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d019      	beq.n	800311e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <HAL_RCC_OscConfig+0x274>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f0:	f7fe fb66 	bl	80017c0 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fe fb62 	bl	80017c0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e160      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <HAL_RCC_OscConfig+0x26c>)
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003116:	2001      	movs	r0, #1
 8003118:	f000 face 	bl	80036b8 <RCC_Delay>
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311e:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <HAL_RCC_OscConfig+0x274>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003124:	f7fe fb4c 	bl	80017c0 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312a:	e00f      	b.n	800314c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe fb48 	bl	80017c0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d908      	bls.n	800314c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e146      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	42420000 	.word	0x42420000
 8003148:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	4b92      	ldr	r3, [pc, #584]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e9      	bne.n	800312c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80a6 	beq.w	80032b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316a:	4b8b      	ldr	r3, [pc, #556]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4b88      	ldr	r3, [pc, #544]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4a87      	ldr	r2, [pc, #540]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003180:	61d3      	str	r3, [r2, #28]
 8003182:	4b85      	ldr	r3, [pc, #532]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_OscConfig+0x4c8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319e:	4b7f      	ldr	r3, [pc, #508]	@ (800339c <HAL_RCC_OscConfig+0x4c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7e      	ldr	r2, [pc, #504]	@ (800339c <HAL_RCC_OscConfig+0x4c8>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fb09 	bl	80017c0 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fe fb05 	bl	80017c0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	@ 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e103      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b75      	ldr	r3, [pc, #468]	@ (800339c <HAL_RCC_OscConfig+0x4c8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x312>
 80031d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	e02d      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x334>
 80031ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4a69      	ldr	r2, [pc, #420]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	6213      	str	r3, [r2, #32]
 80031fa:	4b67      	ldr	r3, [pc, #412]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a66      	ldr	r2, [pc, #408]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	e01c      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x356>
 8003210:	4b61      	ldr	r3, [pc, #388]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4a60      	ldr	r2, [pc, #384]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	4b5e      	ldr	r3, [pc, #376]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a5d      	ldr	r2, [pc, #372]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 800322a:	4b5b      	ldr	r3, [pc, #364]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a5a      	ldr	r2, [pc, #360]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b58      	ldr	r3, [pc, #352]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a57      	ldr	r2, [pc, #348]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe fab9 	bl	80017c0 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe fab5 	bl	80017c0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0b1      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	4b4b      	ldr	r3, [pc, #300]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ee      	beq.n	8003252 <HAL_RCC_OscConfig+0x37e>
 8003274:	e014      	b.n	80032a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe faa3 	bl	80017c0 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fa9f 	bl	80017c0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e09b      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	4b40      	ldr	r3, [pc, #256]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ee      	bne.n	800327e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8087 	beq.w	80033ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032bc:	4b36      	ldr	r3, [pc, #216]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d061      	beq.n	800338c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d146      	bne.n	800335e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d0:	4b33      	ldr	r3, [pc, #204]	@ (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fa73 	bl	80017c0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fa6f 	bl	80017c0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e06d      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f0:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003304:	d108      	bne.n	8003318 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003306:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4921      	ldr	r1, [pc, #132]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003318:	4b1f      	ldr	r3, [pc, #124]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a19      	ldr	r1, [r3, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	430b      	orrs	r3, r1
 800332a:	491b      	ldr	r1, [pc, #108]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fe fa43 	bl	80017c0 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe fa3f 	bl	80017c0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e03d      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x46a>
 800335c:	e035      	b.n	80033ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fa2c 	bl	80017c0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fa28 	bl	80017c0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e026      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x498>
 800338a:	e01e      	b.n	80033ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e019      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
 80033a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_RCC_OscConfig+0x500>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0d0      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b67      	ldr	r3, [pc, #412]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4965      	ldr	r1, [pc, #404]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b63      	ldr	r3, [pc, #396]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b8      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a58      	ldr	r2, [pc, #352]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800343e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800344c:	4b53      	ldr	r3, [pc, #332]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a52      	ldr	r2, [pc, #328]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003456:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b50      	ldr	r3, [pc, #320]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	494d      	ldr	r1, [pc, #308]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d040      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b47      	ldr	r3, [pc, #284]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d115      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	4b41      	ldr	r3, [pc, #260]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e073      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06b      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b6:	4b39      	ldr	r3, [pc, #228]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f023 0203 	bic.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4936      	ldr	r1, [pc, #216]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c8:	f7fe f97a 	bl	80017c0 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7fe f976 	bl	80017c0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e053      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	4b2d      	ldr	r3, [pc, #180]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 020c 	and.w	r2, r3, #12
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1eb      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f8:	4b27      	ldr	r3, [pc, #156]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d210      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b24      	ldr	r3, [pc, #144]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4922      	ldr	r1, [pc, #136]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e032      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4916      	ldr	r1, [pc, #88]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003552:	4b12      	ldr	r3, [pc, #72]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	490e      	ldr	r1, [pc, #56]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003566:	f000 f821 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490a      	ldr	r1, [pc, #40]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a09      	ldr	r2, [pc, #36]	@ (80035a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe f8d8 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40022000 	.word	0x40022000
 800359c:	40021000 	.word	0x40021000
 80035a0:	08008118 	.word	0x08008118
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000004 	.word	0x20000004

080035ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x94>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d002      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x30>
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d003      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x36>
 80035da:	e027      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035dc:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x98>)
 80035de:	613b      	str	r3, [r7, #16]
      break;
 80035e0:	e027      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	0c9b      	lsrs	r3, r3, #18
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	4a17      	ldr	r2, [pc, #92]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d010      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x94>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0c5b      	lsrs	r3, r3, #17
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	4a11      	ldr	r2, [pc, #68]	@ (800364c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a0d      	ldr	r2, [pc, #52]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x98>)
 800360e:	fb03 f202 	mul.w	r2, r3, r2
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e004      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0c      	ldr	r2, [pc, #48]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	613b      	str	r3, [r7, #16]
      break;
 800362a:	e002      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x98>)
 800362e:	613b      	str	r3, [r7, #16]
      break;
 8003630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003632:	693b      	ldr	r3, [r7, #16]
}
 8003634:	4618      	mov	r0, r3
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	007a1200 	.word	0x007a1200
 8003648:	08008130 	.word	0x08008130
 800364c:	08008140 	.word	0x08008140
 8003650:	003d0900 	.word	0x003d0900

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b02      	ldr	r3, [pc, #8]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x10>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800366c:	f7ff fff2 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	@ (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08008128 	.word	0x08008128

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff ffde 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	0adb      	lsrs	r3, r3, #11
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	@ (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08008128 	.word	0x08008128

080036b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036c0:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <RCC_Delay+0x34>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0a      	ldr	r2, [pc, #40]	@ (80036f0 <RCC_Delay+0x38>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d4:	bf00      	nop
  }
  while (Delay --);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f9      	bne.n	80036d4 <RCC_Delay+0x1c>
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	20000000 	.word	0x20000000
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d07d      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003710:	2300      	movs	r3, #0
 8003712:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003714:	4b4f      	ldr	r3, [pc, #316]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b4c      	ldr	r3, [pc, #304]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4a4b      	ldr	r2, [pc, #300]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372a:	61d3      	str	r3, [r2, #28]
 800372c:	4b49      	ldr	r3, [pc, #292]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b46      	ldr	r3, [pc, #280]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d118      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003748:	4b43      	ldr	r3, [pc, #268]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a42      	ldr	r2, [pc, #264]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003754:	f7fe f834 	bl	80017c0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	e008      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375c:	f7fe f830 	bl	80017c0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	@ 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e06d      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b3a      	ldr	r3, [pc, #232]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377a:	4b36      	ldr	r3, [pc, #216]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003782:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02e      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d027      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003798:	4b2e      	ldr	r3, [pc, #184]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a2:	4b2e      	ldr	r3, [pc, #184]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a8:	4b2c      	ldr	r3, [pc, #176]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ae:	4a29      	ldr	r2, [pc, #164]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d014      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fd ffff 	bl	80017c0 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd fffb 	bl	80017c0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e036      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ee      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4917      	ldr	r1, [pc, #92]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a13      	ldr	r2, [pc, #76]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003818:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	490b      	ldr	r1, [pc, #44]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003836:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4904      	ldr	r1, [pc, #16]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	40007000 	.word	0x40007000
 800385c:	42420440 	.word	0x42420440

08003860 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b10      	cmp	r3, #16
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b10      	cmp	r3, #16
 8003886:	f200 808a 	bhi.w	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d045      	beq.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d075      	beq.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003896:	e082      	b.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003898:	4b46      	ldr	r3, [pc, #280]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800389e:	4b45      	ldr	r3, [pc, #276]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d07b      	beq.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	0c9b      	lsrs	r3, r3, #18
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	4a41      	ldr	r2, [pc, #260]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d015      	beq.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c2:	4b3c      	ldr	r3, [pc, #240]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0c5b      	lsrs	r3, r3, #17
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	4a3b      	ldr	r2, [pc, #236]	@ (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038dc:	4a38      	ldr	r2, [pc, #224]	@ (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	e004      	b.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4a34      	ldr	r2, [pc, #208]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038f8:	4b2e      	ldr	r3, [pc, #184]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003900:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003904:	d102      	bne.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	61bb      	str	r3, [r7, #24]
      break;
 800390a:	e04a      	b.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4a2d      	ldr	r2, [pc, #180]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	61bb      	str	r3, [r7, #24]
      break;
 800391a:	e042      	b.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800391c:	4b25      	ldr	r3, [pc, #148]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392c:	d108      	bne.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	e01f      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394a:	d109      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800394c:	4b19      	ldr	r3, [pc, #100]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003958:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e00f      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800396a:	d11c      	bne.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800396c:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d016      	beq.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003978:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800397c:	61bb      	str	r3, [r7, #24]
      break;
 800397e:	e012      	b.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003980:	e011      	b.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003982:	f7ff fe85 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	0b9b      	lsrs	r3, r3, #14
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	3301      	adds	r3, #1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	61bb      	str	r3, [r7, #24]
      break;
 800399c:	e004      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039a6:	bf00      	nop
    }
  }
  return (frequency);
 80039a8:	69bb      	ldr	r3, [r7, #24]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08008144 	.word	0x08008144
 80039bc:	08008154 	.word	0x08008154
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	003d0900 	.word	0x003d0900
 80039c8:	aaaaaaab 	.word	0xaaaaaaab

080039cc <__cvt>:
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d2:	461d      	mov	r5, r3
 80039d4:	bfbb      	ittet	lt
 80039d6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80039da:	461d      	movlt	r5, r3
 80039dc:	2300      	movge	r3, #0
 80039de:	232d      	movlt	r3, #45	@ 0x2d
 80039e0:	b088      	sub	sp, #32
 80039e2:	4614      	mov	r4, r2
 80039e4:	bfb8      	it	lt
 80039e6:	4614      	movlt	r4, r2
 80039e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80039ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80039ec:	7013      	strb	r3, [r2, #0]
 80039ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80039f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80039f4:	f023 0820 	bic.w	r8, r3, #32
 80039f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80039fc:	d005      	beq.n	8003a0a <__cvt+0x3e>
 80039fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a02:	d100      	bne.n	8003a06 <__cvt+0x3a>
 8003a04:	3601      	adds	r6, #1
 8003a06:	2302      	movs	r3, #2
 8003a08:	e000      	b.n	8003a0c <__cvt+0x40>
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	aa07      	add	r2, sp, #28
 8003a0e:	9204      	str	r2, [sp, #16]
 8003a10:	aa06      	add	r2, sp, #24
 8003a12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a16:	e9cd 3600 	strd	r3, r6, [sp]
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	f001 f8b7 	bl	8004b90 <_dtoa_r>
 8003a22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003a26:	4607      	mov	r7, r0
 8003a28:	d119      	bne.n	8003a5e <__cvt+0x92>
 8003a2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003a2c:	07db      	lsls	r3, r3, #31
 8003a2e:	d50e      	bpl.n	8003a4e <__cvt+0x82>
 8003a30:	eb00 0906 	add.w	r9, r0, r6
 8003a34:	2200      	movs	r2, #0
 8003a36:	2300      	movs	r3, #0
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	f7fc ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8003a40:	b108      	cbz	r0, 8003a46 <__cvt+0x7a>
 8003a42:	f8cd 901c 	str.w	r9, [sp, #28]
 8003a46:	2230      	movs	r2, #48	@ 0x30
 8003a48:	9b07      	ldr	r3, [sp, #28]
 8003a4a:	454b      	cmp	r3, r9
 8003a4c:	d31e      	bcc.n	8003a8c <__cvt+0xc0>
 8003a4e:	4638      	mov	r0, r7
 8003a50:	9b07      	ldr	r3, [sp, #28]
 8003a52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003a54:	1bdb      	subs	r3, r3, r7
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	b008      	add	sp, #32
 8003a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a62:	eb00 0906 	add.w	r9, r0, r6
 8003a66:	d1e5      	bne.n	8003a34 <__cvt+0x68>
 8003a68:	7803      	ldrb	r3, [r0, #0]
 8003a6a:	2b30      	cmp	r3, #48	@ 0x30
 8003a6c:	d10a      	bne.n	8003a84 <__cvt+0xb8>
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2300      	movs	r3, #0
 8003a72:	4620      	mov	r0, r4
 8003a74:	4629      	mov	r1, r5
 8003a76:	f7fc ff97 	bl	80009a8 <__aeabi_dcmpeq>
 8003a7a:	b918      	cbnz	r0, 8003a84 <__cvt+0xb8>
 8003a7c:	f1c6 0601 	rsb	r6, r6, #1
 8003a80:	f8ca 6000 	str.w	r6, [sl]
 8003a84:	f8da 3000 	ldr.w	r3, [sl]
 8003a88:	4499      	add	r9, r3
 8003a8a:	e7d3      	b.n	8003a34 <__cvt+0x68>
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	9107      	str	r1, [sp, #28]
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e7d9      	b.n	8003a48 <__cvt+0x7c>

08003a94 <__exponent>:
 8003a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a96:	2900      	cmp	r1, #0
 8003a98:	bfb6      	itet	lt
 8003a9a:	232d      	movlt	r3, #45	@ 0x2d
 8003a9c:	232b      	movge	r3, #43	@ 0x2b
 8003a9e:	4249      	neglt	r1, r1
 8003aa0:	2909      	cmp	r1, #9
 8003aa2:	7002      	strb	r2, [r0, #0]
 8003aa4:	7043      	strb	r3, [r0, #1]
 8003aa6:	dd29      	ble.n	8003afc <__exponent+0x68>
 8003aa8:	f10d 0307 	add.w	r3, sp, #7
 8003aac:	461d      	mov	r5, r3
 8003aae:	270a      	movs	r7, #10
 8003ab0:	fbb1 f6f7 	udiv	r6, r1, r7
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	fb07 1416 	mls	r4, r7, r6, r1
 8003aba:	3430      	adds	r4, #48	@ 0x30
 8003abc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	2c63      	cmp	r4, #99	@ 0x63
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003aca:	dcf1      	bgt.n	8003ab0 <__exponent+0x1c>
 8003acc:	3130      	adds	r1, #48	@ 0x30
 8003ace:	1e94      	subs	r4, r2, #2
 8003ad0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	1c41      	adds	r1, r0, #1
 8003ad8:	42ab      	cmp	r3, r5
 8003ada:	d30a      	bcc.n	8003af2 <__exponent+0x5e>
 8003adc:	f10d 0309 	add.w	r3, sp, #9
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	42ac      	cmp	r4, r5
 8003ae4:	bf88      	it	hi
 8003ae6:	2300      	movhi	r3, #0
 8003ae8:	3302      	adds	r3, #2
 8003aea:	4403      	add	r3, r0
 8003aec:	1a18      	subs	r0, r3, r0
 8003aee:	b003      	add	sp, #12
 8003af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003af6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003afa:	e7ed      	b.n	8003ad8 <__exponent+0x44>
 8003afc:	2330      	movs	r3, #48	@ 0x30
 8003afe:	3130      	adds	r1, #48	@ 0x30
 8003b00:	7083      	strb	r3, [r0, #2]
 8003b02:	70c1      	strb	r1, [r0, #3]
 8003b04:	1d03      	adds	r3, r0, #4
 8003b06:	e7f1      	b.n	8003aec <__exponent+0x58>

08003b08 <_printf_float>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	b091      	sub	sp, #68	@ 0x44
 8003b0e:	460c      	mov	r4, r1
 8003b10:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003b14:	4616      	mov	r6, r2
 8003b16:	461f      	mov	r7, r3
 8003b18:	4605      	mov	r5, r0
 8003b1a:	f000 ff25 	bl	8004968 <_localeconv_r>
 8003b1e:	6803      	ldr	r3, [r0, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	9308      	str	r3, [sp, #32]
 8003b24:	f7fc fb14 	bl	8000150 <strlen>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b30:	9009      	str	r0, [sp, #36]	@ 0x24
 8003b32:	3307      	adds	r3, #7
 8003b34:	f023 0307 	bic.w	r3, r3, #7
 8003b38:	f103 0208 	add.w	r2, r3, #8
 8003b3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b40:	f8d4 b000 	ldr.w	fp, [r4]
 8003b44:	f8c8 2000 	str.w	r2, [r8]
 8003b48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b52:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003b56:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003b62:	4b9c      	ldr	r3, [pc, #624]	@ (8003dd4 <_printf_float+0x2cc>)
 8003b64:	f7fc ff52 	bl	8000a0c <__aeabi_dcmpun>
 8003b68:	bb70      	cbnz	r0, 8003bc8 <_printf_float+0xc0>
 8003b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b72:	4b98      	ldr	r3, [pc, #608]	@ (8003dd4 <_printf_float+0x2cc>)
 8003b74:	f7fc ff2c 	bl	80009d0 <__aeabi_dcmple>
 8003b78:	bb30      	cbnz	r0, 8003bc8 <_printf_float+0xc0>
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4640      	mov	r0, r8
 8003b80:	4649      	mov	r1, r9
 8003b82:	f7fc ff1b 	bl	80009bc <__aeabi_dcmplt>
 8003b86:	b110      	cbz	r0, 8003b8e <_printf_float+0x86>
 8003b88:	232d      	movs	r3, #45	@ 0x2d
 8003b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b8e:	4a92      	ldr	r2, [pc, #584]	@ (8003dd8 <_printf_float+0x2d0>)
 8003b90:	4b92      	ldr	r3, [pc, #584]	@ (8003ddc <_printf_float+0x2d4>)
 8003b92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003b96:	bf94      	ite	ls
 8003b98:	4690      	movls	r8, r2
 8003b9a:	4698      	movhi	r8, r3
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	f04f 0900 	mov.w	r9, #0
 8003ba2:	6123      	str	r3, [r4, #16]
 8003ba4:	f02b 0304 	bic.w	r3, fp, #4
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	4633      	mov	r3, r6
 8003bac:	4621      	mov	r1, r4
 8003bae:	4628      	mov	r0, r5
 8003bb0:	9700      	str	r7, [sp, #0]
 8003bb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003bb4:	f000 f9d4 	bl	8003f60 <_printf_common>
 8003bb8:	3001      	adds	r0, #1
 8003bba:	f040 8090 	bne.w	8003cde <_printf_float+0x1d6>
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc2:	b011      	add	sp, #68	@ 0x44
 8003bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc8:	4642      	mov	r2, r8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	4640      	mov	r0, r8
 8003bce:	4649      	mov	r1, r9
 8003bd0:	f7fc ff1c 	bl	8000a0c <__aeabi_dcmpun>
 8003bd4:	b148      	cbz	r0, 8003bea <_printf_float+0xe2>
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bfb8      	it	lt
 8003bdc:	232d      	movlt	r3, #45	@ 0x2d
 8003bde:	4a80      	ldr	r2, [pc, #512]	@ (8003de0 <_printf_float+0x2d8>)
 8003be0:	bfb8      	it	lt
 8003be2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003be6:	4b7f      	ldr	r3, [pc, #508]	@ (8003de4 <_printf_float+0x2dc>)
 8003be8:	e7d3      	b.n	8003b92 <_printf_float+0x8a>
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	d13f      	bne.n	8003c74 <_printf_float+0x16c>
 8003bf4:	2306      	movs	r3, #6
 8003bf6:	6063      	str	r3, [r4, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	9206      	str	r2, [sp, #24]
 8003c02:	aa0e      	add	r2, sp, #56	@ 0x38
 8003c04:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003c08:	aa0d      	add	r2, sp, #52	@ 0x34
 8003c0a:	9203      	str	r2, [sp, #12]
 8003c0c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003c10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	4642      	mov	r2, r8
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003c20:	f7ff fed4 	bl	80039cc <__cvt>
 8003c24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003c26:	4680      	mov	r8, r0
 8003c28:	2947      	cmp	r1, #71	@ 0x47
 8003c2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003c2c:	d128      	bne.n	8003c80 <_printf_float+0x178>
 8003c2e:	1cc8      	adds	r0, r1, #3
 8003c30:	db02      	blt.n	8003c38 <_printf_float+0x130>
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	4299      	cmp	r1, r3
 8003c36:	dd40      	ble.n	8003cba <_printf_float+0x1b2>
 8003c38:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c3c:	fa5f fa8a 	uxtb.w	sl, sl
 8003c40:	4652      	mov	r2, sl
 8003c42:	3901      	subs	r1, #1
 8003c44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c48:	910d      	str	r1, [sp, #52]	@ 0x34
 8003c4a:	f7ff ff23 	bl	8003a94 <__exponent>
 8003c4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c50:	4681      	mov	r9, r0
 8003c52:	1813      	adds	r3, r2, r0
 8003c54:	2a01      	cmp	r2, #1
 8003c56:	6123      	str	r3, [r4, #16]
 8003c58:	dc02      	bgt.n	8003c60 <_printf_float+0x158>
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	07d2      	lsls	r2, r2, #31
 8003c5e:	d501      	bpl.n	8003c64 <_printf_float+0x15c>
 8003c60:	3301      	adds	r3, #1
 8003c62:	6123      	str	r3, [r4, #16]
 8003c64:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d09e      	beq.n	8003baa <_printf_float+0xa2>
 8003c6c:	232d      	movs	r3, #45	@ 0x2d
 8003c6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c72:	e79a      	b.n	8003baa <_printf_float+0xa2>
 8003c74:	2947      	cmp	r1, #71	@ 0x47
 8003c76:	d1bf      	bne.n	8003bf8 <_printf_float+0xf0>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1bd      	bne.n	8003bf8 <_printf_float+0xf0>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e7ba      	b.n	8003bf6 <_printf_float+0xee>
 8003c80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c84:	d9dc      	bls.n	8003c40 <_printf_float+0x138>
 8003c86:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003c8a:	d118      	bne.n	8003cbe <_printf_float+0x1b6>
 8003c8c:	2900      	cmp	r1, #0
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	dd0b      	ble.n	8003caa <_printf_float+0x1a2>
 8003c92:	6121      	str	r1, [r4, #16]
 8003c94:	b913      	cbnz	r3, 8003c9c <_printf_float+0x194>
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	07d0      	lsls	r0, r2, #31
 8003c9a:	d502      	bpl.n	8003ca2 <_printf_float+0x19a>
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	440b      	add	r3, r1
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	f04f 0900 	mov.w	r9, #0
 8003ca6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ca8:	e7dc      	b.n	8003c64 <_printf_float+0x15c>
 8003caa:	b913      	cbnz	r3, 8003cb2 <_printf_float+0x1aa>
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	07d2      	lsls	r2, r2, #31
 8003cb0:	d501      	bpl.n	8003cb6 <_printf_float+0x1ae>
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	e7f4      	b.n	8003ca0 <_printf_float+0x198>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e7f2      	b.n	8003ca0 <_printf_float+0x198>
 8003cba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cc0:	4299      	cmp	r1, r3
 8003cc2:	db05      	blt.n	8003cd0 <_printf_float+0x1c8>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	6121      	str	r1, [r4, #16]
 8003cc8:	07d8      	lsls	r0, r3, #31
 8003cca:	d5ea      	bpl.n	8003ca2 <_printf_float+0x19a>
 8003ccc:	1c4b      	adds	r3, r1, #1
 8003cce:	e7e7      	b.n	8003ca0 <_printf_float+0x198>
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	bfcc      	ite	gt
 8003cd4:	2201      	movgt	r2, #1
 8003cd6:	f1c1 0202 	rsble	r2, r1, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	e7e0      	b.n	8003ca0 <_printf_float+0x198>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	055a      	lsls	r2, r3, #21
 8003ce2:	d407      	bmi.n	8003cf4 <_printf_float+0x1ec>
 8003ce4:	6923      	ldr	r3, [r4, #16]
 8003ce6:	4642      	mov	r2, r8
 8003ce8:	4631      	mov	r1, r6
 8003cea:	4628      	mov	r0, r5
 8003cec:	47b8      	blx	r7
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d12b      	bne.n	8003d4a <_printf_float+0x242>
 8003cf2:	e764      	b.n	8003bbe <_printf_float+0xb6>
 8003cf4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003cf8:	f240 80dc 	bls.w	8003eb4 <_printf_float+0x3ac>
 8003cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d00:	2200      	movs	r2, #0
 8003d02:	2300      	movs	r3, #0
 8003d04:	f7fc fe50 	bl	80009a8 <__aeabi_dcmpeq>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d033      	beq.n	8003d74 <_printf_float+0x26c>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4631      	mov	r1, r6
 8003d10:	4628      	mov	r0, r5
 8003d12:	4a35      	ldr	r2, [pc, #212]	@ (8003de8 <_printf_float+0x2e0>)
 8003d14:	47b8      	blx	r7
 8003d16:	3001      	adds	r0, #1
 8003d18:	f43f af51 	beq.w	8003bbe <_printf_float+0xb6>
 8003d1c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003d20:	4543      	cmp	r3, r8
 8003d22:	db02      	blt.n	8003d2a <_printf_float+0x222>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	07d8      	lsls	r0, r3, #31
 8003d28:	d50f      	bpl.n	8003d4a <_printf_float+0x242>
 8003d2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d2e:	4631      	mov	r1, r6
 8003d30:	4628      	mov	r0, r5
 8003d32:	47b8      	blx	r7
 8003d34:	3001      	adds	r0, #1
 8003d36:	f43f af42 	beq.w	8003bbe <_printf_float+0xb6>
 8003d3a:	f04f 0900 	mov.w	r9, #0
 8003d3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d42:	f104 0a1a 	add.w	sl, r4, #26
 8003d46:	45c8      	cmp	r8, r9
 8003d48:	dc09      	bgt.n	8003d5e <_printf_float+0x256>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	079b      	lsls	r3, r3, #30
 8003d4e:	f100 8102 	bmi.w	8003f56 <_printf_float+0x44e>
 8003d52:	68e0      	ldr	r0, [r4, #12]
 8003d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d56:	4298      	cmp	r0, r3
 8003d58:	bfb8      	it	lt
 8003d5a:	4618      	movlt	r0, r3
 8003d5c:	e731      	b.n	8003bc2 <_printf_float+0xba>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4652      	mov	r2, sl
 8003d62:	4631      	mov	r1, r6
 8003d64:	4628      	mov	r0, r5
 8003d66:	47b8      	blx	r7
 8003d68:	3001      	adds	r0, #1
 8003d6a:	f43f af28 	beq.w	8003bbe <_printf_float+0xb6>
 8003d6e:	f109 0901 	add.w	r9, r9, #1
 8003d72:	e7e8      	b.n	8003d46 <_printf_float+0x23e>
 8003d74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	dc38      	bgt.n	8003dec <_printf_float+0x2e4>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	4628      	mov	r0, r5
 8003d80:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <_printf_float+0x2e0>)
 8003d82:	47b8      	blx	r7
 8003d84:	3001      	adds	r0, #1
 8003d86:	f43f af1a 	beq.w	8003bbe <_printf_float+0xb6>
 8003d8a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003d8e:	ea59 0303 	orrs.w	r3, r9, r3
 8003d92:	d102      	bne.n	8003d9a <_printf_float+0x292>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	07d9      	lsls	r1, r3, #31
 8003d98:	d5d7      	bpl.n	8003d4a <_printf_float+0x242>
 8003d9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d9e:	4631      	mov	r1, r6
 8003da0:	4628      	mov	r0, r5
 8003da2:	47b8      	blx	r7
 8003da4:	3001      	adds	r0, #1
 8003da6:	f43f af0a 	beq.w	8003bbe <_printf_float+0xb6>
 8003daa:	f04f 0a00 	mov.w	sl, #0
 8003dae:	f104 0b1a 	add.w	fp, r4, #26
 8003db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003db4:	425b      	negs	r3, r3
 8003db6:	4553      	cmp	r3, sl
 8003db8:	dc01      	bgt.n	8003dbe <_printf_float+0x2b6>
 8003dba:	464b      	mov	r3, r9
 8003dbc:	e793      	b.n	8003ce6 <_printf_float+0x1de>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	465a      	mov	r2, fp
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b8      	blx	r7
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f43f aef8 	beq.w	8003bbe <_printf_float+0xb6>
 8003dce:	f10a 0a01 	add.w	sl, sl, #1
 8003dd2:	e7ee      	b.n	8003db2 <_printf_float+0x2aa>
 8003dd4:	7fefffff 	.word	0x7fefffff
 8003dd8:	08008156 	.word	0x08008156
 8003ddc:	0800815a 	.word	0x0800815a
 8003de0:	0800815e 	.word	0x0800815e
 8003de4:	08008162 	.word	0x08008162
 8003de8:	08008166 	.word	0x08008166
 8003dec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003dee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003df2:	4553      	cmp	r3, sl
 8003df4:	bfa8      	it	ge
 8003df6:	4653      	movge	r3, sl
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	4699      	mov	r9, r3
 8003dfc:	dc36      	bgt.n	8003e6c <_printf_float+0x364>
 8003dfe:	f04f 0b00 	mov.w	fp, #0
 8003e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e06:	f104 021a 	add.w	r2, r4, #26
 8003e0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e0e:	eba3 0309 	sub.w	r3, r3, r9
 8003e12:	455b      	cmp	r3, fp
 8003e14:	dc31      	bgt.n	8003e7a <_printf_float+0x372>
 8003e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e18:	459a      	cmp	sl, r3
 8003e1a:	dc3a      	bgt.n	8003e92 <_printf_float+0x38a>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	07da      	lsls	r2, r3, #31
 8003e20:	d437      	bmi.n	8003e92 <_printf_float+0x38a>
 8003e22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e24:	ebaa 0903 	sub.w	r9, sl, r3
 8003e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e2a:	ebaa 0303 	sub.w	r3, sl, r3
 8003e2e:	4599      	cmp	r9, r3
 8003e30:	bfa8      	it	ge
 8003e32:	4699      	movge	r9, r3
 8003e34:	f1b9 0f00 	cmp.w	r9, #0
 8003e38:	dc33      	bgt.n	8003ea2 <_printf_float+0x39a>
 8003e3a:	f04f 0800 	mov.w	r8, #0
 8003e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e42:	f104 0b1a 	add.w	fp, r4, #26
 8003e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e48:	ebaa 0303 	sub.w	r3, sl, r3
 8003e4c:	eba3 0309 	sub.w	r3, r3, r9
 8003e50:	4543      	cmp	r3, r8
 8003e52:	f77f af7a 	ble.w	8003d4a <_printf_float+0x242>
 8003e56:	2301      	movs	r3, #1
 8003e58:	465a      	mov	r2, fp
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f aeac 	beq.w	8003bbe <_printf_float+0xb6>
 8003e66:	f108 0801 	add.w	r8, r8, #1
 8003e6a:	e7ec      	b.n	8003e46 <_printf_float+0x33e>
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4628      	mov	r0, r5
 8003e72:	47b8      	blx	r7
 8003e74:	3001      	adds	r0, #1
 8003e76:	d1c2      	bne.n	8003dfe <_printf_float+0x2f6>
 8003e78:	e6a1      	b.n	8003bbe <_printf_float+0xb6>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4628      	mov	r0, r5
 8003e80:	920a      	str	r2, [sp, #40]	@ 0x28
 8003e82:	47b8      	blx	r7
 8003e84:	3001      	adds	r0, #1
 8003e86:	f43f ae9a 	beq.w	8003bbe <_printf_float+0xb6>
 8003e8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e8c:	f10b 0b01 	add.w	fp, fp, #1
 8003e90:	e7bb      	b.n	8003e0a <_printf_float+0x302>
 8003e92:	4631      	mov	r1, r6
 8003e94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b8      	blx	r7
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d1c0      	bne.n	8003e22 <_printf_float+0x31a>
 8003ea0:	e68d      	b.n	8003bbe <_printf_float+0xb6>
 8003ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	4442      	add	r2, r8
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d1c3      	bne.n	8003e3a <_printf_float+0x332>
 8003eb2:	e684      	b.n	8003bbe <_printf_float+0xb6>
 8003eb4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003eb8:	f1ba 0f01 	cmp.w	sl, #1
 8003ebc:	dc01      	bgt.n	8003ec2 <_printf_float+0x3ba>
 8003ebe:	07db      	lsls	r3, r3, #31
 8003ec0:	d536      	bpl.n	8003f30 <_printf_float+0x428>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b8      	blx	r7
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f ae76 	beq.w	8003bbe <_printf_float+0xb6>
 8003ed2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	f43f ae6e 	beq.w	8003bbe <_printf_float+0xb6>
 8003ee2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003eee:	f7fc fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 8003ef2:	b9c0      	cbnz	r0, 8003f26 <_printf_float+0x41e>
 8003ef4:	4653      	mov	r3, sl
 8003ef6:	f108 0201 	add.w	r2, r8, #1
 8003efa:	4631      	mov	r1, r6
 8003efc:	4628      	mov	r0, r5
 8003efe:	47b8      	blx	r7
 8003f00:	3001      	adds	r0, #1
 8003f02:	d10c      	bne.n	8003f1e <_printf_float+0x416>
 8003f04:	e65b      	b.n	8003bbe <_printf_float+0xb6>
 8003f06:	2301      	movs	r3, #1
 8003f08:	465a      	mov	r2, fp
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	47b8      	blx	r7
 8003f10:	3001      	adds	r0, #1
 8003f12:	f43f ae54 	beq.w	8003bbe <_printf_float+0xb6>
 8003f16:	f108 0801 	add.w	r8, r8, #1
 8003f1a:	45d0      	cmp	r8, sl
 8003f1c:	dbf3      	blt.n	8003f06 <_printf_float+0x3fe>
 8003f1e:	464b      	mov	r3, r9
 8003f20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f24:	e6e0      	b.n	8003ce8 <_printf_float+0x1e0>
 8003f26:	f04f 0800 	mov.w	r8, #0
 8003f2a:	f104 0b1a 	add.w	fp, r4, #26
 8003f2e:	e7f4      	b.n	8003f1a <_printf_float+0x412>
 8003f30:	2301      	movs	r3, #1
 8003f32:	4642      	mov	r2, r8
 8003f34:	e7e1      	b.n	8003efa <_printf_float+0x3f2>
 8003f36:	2301      	movs	r3, #1
 8003f38:	464a      	mov	r2, r9
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	47b8      	blx	r7
 8003f40:	3001      	adds	r0, #1
 8003f42:	f43f ae3c 	beq.w	8003bbe <_printf_float+0xb6>
 8003f46:	f108 0801 	add.w	r8, r8, #1
 8003f4a:	68e3      	ldr	r3, [r4, #12]
 8003f4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003f4e:	1a5b      	subs	r3, r3, r1
 8003f50:	4543      	cmp	r3, r8
 8003f52:	dcf0      	bgt.n	8003f36 <_printf_float+0x42e>
 8003f54:	e6fd      	b.n	8003d52 <_printf_float+0x24a>
 8003f56:	f04f 0800 	mov.w	r8, #0
 8003f5a:	f104 0919 	add.w	r9, r4, #25
 8003f5e:	e7f4      	b.n	8003f4a <_printf_float+0x442>

08003f60 <_printf_common>:
 8003f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f64:	4616      	mov	r6, r2
 8003f66:	4698      	mov	r8, r3
 8003f68:	688a      	ldr	r2, [r1, #8]
 8003f6a:	690b      	ldr	r3, [r1, #16]
 8003f6c:	4607      	mov	r7, r0
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	bfb8      	it	lt
 8003f72:	4613      	movlt	r3, r2
 8003f74:	6033      	str	r3, [r6, #0]
 8003f76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f80:	b10a      	cbz	r2, 8003f86 <_printf_common+0x26>
 8003f82:	3301      	adds	r3, #1
 8003f84:	6033      	str	r3, [r6, #0]
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	0699      	lsls	r1, r3, #26
 8003f8a:	bf42      	ittt	mi
 8003f8c:	6833      	ldrmi	r3, [r6, #0]
 8003f8e:	3302      	addmi	r3, #2
 8003f90:	6033      	strmi	r3, [r6, #0]
 8003f92:	6825      	ldr	r5, [r4, #0]
 8003f94:	f015 0506 	ands.w	r5, r5, #6
 8003f98:	d106      	bne.n	8003fa8 <_printf_common+0x48>
 8003f9a:	f104 0a19 	add.w	sl, r4, #25
 8003f9e:	68e3      	ldr	r3, [r4, #12]
 8003fa0:	6832      	ldr	r2, [r6, #0]
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	42ab      	cmp	r3, r5
 8003fa6:	dc2b      	bgt.n	8004000 <_printf_common+0xa0>
 8003fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fac:	6822      	ldr	r2, [r4, #0]
 8003fae:	3b00      	subs	r3, #0
 8003fb0:	bf18      	it	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	0692      	lsls	r2, r2, #26
 8003fb6:	d430      	bmi.n	800401a <_printf_common+0xba>
 8003fb8:	4641      	mov	r1, r8
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fc0:	47c8      	blx	r9
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d023      	beq.n	800400e <_printf_common+0xae>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	6922      	ldr	r2, [r4, #16]
 8003fca:	f003 0306 	and.w	r3, r3, #6
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	bf14      	ite	ne
 8003fd2:	2500      	movne	r5, #0
 8003fd4:	6833      	ldreq	r3, [r6, #0]
 8003fd6:	f04f 0600 	mov.w	r6, #0
 8003fda:	bf08      	it	eq
 8003fdc:	68e5      	ldreq	r5, [r4, #12]
 8003fde:	f104 041a 	add.w	r4, r4, #26
 8003fe2:	bf08      	it	eq
 8003fe4:	1aed      	subeq	r5, r5, r3
 8003fe6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003fea:	bf08      	it	eq
 8003fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bfc4      	itt	gt
 8003ff4:	1a9b      	subgt	r3, r3, r2
 8003ff6:	18ed      	addgt	r5, r5, r3
 8003ff8:	42b5      	cmp	r5, r6
 8003ffa:	d11a      	bne.n	8004032 <_printf_common+0xd2>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e008      	b.n	8004012 <_printf_common+0xb2>
 8004000:	2301      	movs	r3, #1
 8004002:	4652      	mov	r2, sl
 8004004:	4641      	mov	r1, r8
 8004006:	4638      	mov	r0, r7
 8004008:	47c8      	blx	r9
 800400a:	3001      	adds	r0, #1
 800400c:	d103      	bne.n	8004016 <_printf_common+0xb6>
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004016:	3501      	adds	r5, #1
 8004018:	e7c1      	b.n	8003f9e <_printf_common+0x3e>
 800401a:	2030      	movs	r0, #48	@ 0x30
 800401c:	18e1      	adds	r1, r4, r3
 800401e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004028:	4422      	add	r2, r4
 800402a:	3302      	adds	r3, #2
 800402c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004030:	e7c2      	b.n	8003fb8 <_printf_common+0x58>
 8004032:	2301      	movs	r3, #1
 8004034:	4622      	mov	r2, r4
 8004036:	4641      	mov	r1, r8
 8004038:	4638      	mov	r0, r7
 800403a:	47c8      	blx	r9
 800403c:	3001      	adds	r0, #1
 800403e:	d0e6      	beq.n	800400e <_printf_common+0xae>
 8004040:	3601      	adds	r6, #1
 8004042:	e7d9      	b.n	8003ff8 <_printf_common+0x98>

08004044 <_printf_i>:
 8004044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	7e0f      	ldrb	r7, [r1, #24]
 800404a:	4691      	mov	r9, r2
 800404c:	2f78      	cmp	r7, #120	@ 0x78
 800404e:	4680      	mov	r8, r0
 8004050:	460c      	mov	r4, r1
 8004052:	469a      	mov	sl, r3
 8004054:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800405a:	d807      	bhi.n	800406c <_printf_i+0x28>
 800405c:	2f62      	cmp	r7, #98	@ 0x62
 800405e:	d80a      	bhi.n	8004076 <_printf_i+0x32>
 8004060:	2f00      	cmp	r7, #0
 8004062:	f000 80d3 	beq.w	800420c <_printf_i+0x1c8>
 8004066:	2f58      	cmp	r7, #88	@ 0x58
 8004068:	f000 80ba 	beq.w	80041e0 <_printf_i+0x19c>
 800406c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004074:	e03a      	b.n	80040ec <_printf_i+0xa8>
 8004076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800407a:	2b15      	cmp	r3, #21
 800407c:	d8f6      	bhi.n	800406c <_printf_i+0x28>
 800407e:	a101      	add	r1, pc, #4	@ (adr r1, 8004084 <_printf_i+0x40>)
 8004080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004084:	080040dd 	.word	0x080040dd
 8004088:	080040f1 	.word	0x080040f1
 800408c:	0800406d 	.word	0x0800406d
 8004090:	0800406d 	.word	0x0800406d
 8004094:	0800406d 	.word	0x0800406d
 8004098:	0800406d 	.word	0x0800406d
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	0800406d 	.word	0x0800406d
 80040a4:	0800406d 	.word	0x0800406d
 80040a8:	0800406d 	.word	0x0800406d
 80040ac:	0800406d 	.word	0x0800406d
 80040b0:	080041f3 	.word	0x080041f3
 80040b4:	0800411b 	.word	0x0800411b
 80040b8:	080041ad 	.word	0x080041ad
 80040bc:	0800406d 	.word	0x0800406d
 80040c0:	0800406d 	.word	0x0800406d
 80040c4:	08004215 	.word	0x08004215
 80040c8:	0800406d 	.word	0x0800406d
 80040cc:	0800411b 	.word	0x0800411b
 80040d0:	0800406d 	.word	0x0800406d
 80040d4:	0800406d 	.word	0x0800406d
 80040d8:	080041b5 	.word	0x080041b5
 80040dc:	6833      	ldr	r3, [r6, #0]
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6032      	str	r2, [r6, #0]
 80040e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040ec:	2301      	movs	r3, #1
 80040ee:	e09e      	b.n	800422e <_printf_i+0x1ea>
 80040f0:	6833      	ldr	r3, [r6, #0]
 80040f2:	6820      	ldr	r0, [r4, #0]
 80040f4:	1d19      	adds	r1, r3, #4
 80040f6:	6031      	str	r1, [r6, #0]
 80040f8:	0606      	lsls	r6, r0, #24
 80040fa:	d501      	bpl.n	8004100 <_printf_i+0xbc>
 80040fc:	681d      	ldr	r5, [r3, #0]
 80040fe:	e003      	b.n	8004108 <_printf_i+0xc4>
 8004100:	0645      	lsls	r5, r0, #25
 8004102:	d5fb      	bpl.n	80040fc <_printf_i+0xb8>
 8004104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004108:	2d00      	cmp	r5, #0
 800410a:	da03      	bge.n	8004114 <_printf_i+0xd0>
 800410c:	232d      	movs	r3, #45	@ 0x2d
 800410e:	426d      	negs	r5, r5
 8004110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004114:	230a      	movs	r3, #10
 8004116:	4859      	ldr	r0, [pc, #356]	@ (800427c <_printf_i+0x238>)
 8004118:	e011      	b.n	800413e <_printf_i+0xfa>
 800411a:	6821      	ldr	r1, [r4, #0]
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	0608      	lsls	r0, r1, #24
 8004120:	f853 5b04 	ldr.w	r5, [r3], #4
 8004124:	d402      	bmi.n	800412c <_printf_i+0xe8>
 8004126:	0649      	lsls	r1, r1, #25
 8004128:	bf48      	it	mi
 800412a:	b2ad      	uxthmi	r5, r5
 800412c:	2f6f      	cmp	r7, #111	@ 0x6f
 800412e:	6033      	str	r3, [r6, #0]
 8004130:	bf14      	ite	ne
 8004132:	230a      	movne	r3, #10
 8004134:	2308      	moveq	r3, #8
 8004136:	4851      	ldr	r0, [pc, #324]	@ (800427c <_printf_i+0x238>)
 8004138:	2100      	movs	r1, #0
 800413a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800413e:	6866      	ldr	r6, [r4, #4]
 8004140:	2e00      	cmp	r6, #0
 8004142:	bfa8      	it	ge
 8004144:	6821      	ldrge	r1, [r4, #0]
 8004146:	60a6      	str	r6, [r4, #8]
 8004148:	bfa4      	itt	ge
 800414a:	f021 0104 	bicge.w	r1, r1, #4
 800414e:	6021      	strge	r1, [r4, #0]
 8004150:	b90d      	cbnz	r5, 8004156 <_printf_i+0x112>
 8004152:	2e00      	cmp	r6, #0
 8004154:	d04b      	beq.n	80041ee <_printf_i+0x1aa>
 8004156:	4616      	mov	r6, r2
 8004158:	fbb5 f1f3 	udiv	r1, r5, r3
 800415c:	fb03 5711 	mls	r7, r3, r1, r5
 8004160:	5dc7      	ldrb	r7, [r0, r7]
 8004162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004166:	462f      	mov	r7, r5
 8004168:	42bb      	cmp	r3, r7
 800416a:	460d      	mov	r5, r1
 800416c:	d9f4      	bls.n	8004158 <_printf_i+0x114>
 800416e:	2b08      	cmp	r3, #8
 8004170:	d10b      	bne.n	800418a <_printf_i+0x146>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	07df      	lsls	r7, r3, #31
 8004176:	d508      	bpl.n	800418a <_printf_i+0x146>
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	6861      	ldr	r1, [r4, #4]
 800417c:	4299      	cmp	r1, r3
 800417e:	bfde      	ittt	le
 8004180:	2330      	movle	r3, #48	@ 0x30
 8004182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004186:	f106 36ff 	addle.w	r6, r6, #4294967295
 800418a:	1b92      	subs	r2, r2, r6
 800418c:	6122      	str	r2, [r4, #16]
 800418e:	464b      	mov	r3, r9
 8004190:	4621      	mov	r1, r4
 8004192:	4640      	mov	r0, r8
 8004194:	f8cd a000 	str.w	sl, [sp]
 8004198:	aa03      	add	r2, sp, #12
 800419a:	f7ff fee1 	bl	8003f60 <_printf_common>
 800419e:	3001      	adds	r0, #1
 80041a0:	d14a      	bne.n	8004238 <_printf_i+0x1f4>
 80041a2:	f04f 30ff 	mov.w	r0, #4294967295
 80041a6:	b004      	add	sp, #16
 80041a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	2778      	movs	r7, #120	@ 0x78
 80041b6:	4832      	ldr	r0, [pc, #200]	@ (8004280 <_printf_i+0x23c>)
 80041b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	6831      	ldr	r1, [r6, #0]
 80041c0:	061f      	lsls	r7, r3, #24
 80041c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80041c6:	d402      	bmi.n	80041ce <_printf_i+0x18a>
 80041c8:	065f      	lsls	r7, r3, #25
 80041ca:	bf48      	it	mi
 80041cc:	b2ad      	uxthmi	r5, r5
 80041ce:	6031      	str	r1, [r6, #0]
 80041d0:	07d9      	lsls	r1, r3, #31
 80041d2:	bf44      	itt	mi
 80041d4:	f043 0320 	orrmi.w	r3, r3, #32
 80041d8:	6023      	strmi	r3, [r4, #0]
 80041da:	b11d      	cbz	r5, 80041e4 <_printf_i+0x1a0>
 80041dc:	2310      	movs	r3, #16
 80041de:	e7ab      	b.n	8004138 <_printf_i+0xf4>
 80041e0:	4826      	ldr	r0, [pc, #152]	@ (800427c <_printf_i+0x238>)
 80041e2:	e7e9      	b.n	80041b8 <_printf_i+0x174>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	f023 0320 	bic.w	r3, r3, #32
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	e7f6      	b.n	80041dc <_printf_i+0x198>
 80041ee:	4616      	mov	r6, r2
 80041f0:	e7bd      	b.n	800416e <_printf_i+0x12a>
 80041f2:	6833      	ldr	r3, [r6, #0]
 80041f4:	6825      	ldr	r5, [r4, #0]
 80041f6:	1d18      	adds	r0, r3, #4
 80041f8:	6961      	ldr	r1, [r4, #20]
 80041fa:	6030      	str	r0, [r6, #0]
 80041fc:	062e      	lsls	r6, r5, #24
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	d501      	bpl.n	8004206 <_printf_i+0x1c2>
 8004202:	6019      	str	r1, [r3, #0]
 8004204:	e002      	b.n	800420c <_printf_i+0x1c8>
 8004206:	0668      	lsls	r0, r5, #25
 8004208:	d5fb      	bpl.n	8004202 <_printf_i+0x1be>
 800420a:	8019      	strh	r1, [r3, #0]
 800420c:	2300      	movs	r3, #0
 800420e:	4616      	mov	r6, r2
 8004210:	6123      	str	r3, [r4, #16]
 8004212:	e7bc      	b.n	800418e <_printf_i+0x14a>
 8004214:	6833      	ldr	r3, [r6, #0]
 8004216:	2100      	movs	r1, #0
 8004218:	1d1a      	adds	r2, r3, #4
 800421a:	6032      	str	r2, [r6, #0]
 800421c:	681e      	ldr	r6, [r3, #0]
 800421e:	6862      	ldr	r2, [r4, #4]
 8004220:	4630      	mov	r0, r6
 8004222:	f000 fc18 	bl	8004a56 <memchr>
 8004226:	b108      	cbz	r0, 800422c <_printf_i+0x1e8>
 8004228:	1b80      	subs	r0, r0, r6
 800422a:	6060      	str	r0, [r4, #4]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	6123      	str	r3, [r4, #16]
 8004230:	2300      	movs	r3, #0
 8004232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004236:	e7aa      	b.n	800418e <_printf_i+0x14a>
 8004238:	4632      	mov	r2, r6
 800423a:	4649      	mov	r1, r9
 800423c:	4640      	mov	r0, r8
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	47d0      	blx	sl
 8004242:	3001      	adds	r0, #1
 8004244:	d0ad      	beq.n	80041a2 <_printf_i+0x15e>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	079b      	lsls	r3, r3, #30
 800424a:	d413      	bmi.n	8004274 <_printf_i+0x230>
 800424c:	68e0      	ldr	r0, [r4, #12]
 800424e:	9b03      	ldr	r3, [sp, #12]
 8004250:	4298      	cmp	r0, r3
 8004252:	bfb8      	it	lt
 8004254:	4618      	movlt	r0, r3
 8004256:	e7a6      	b.n	80041a6 <_printf_i+0x162>
 8004258:	2301      	movs	r3, #1
 800425a:	4632      	mov	r2, r6
 800425c:	4649      	mov	r1, r9
 800425e:	4640      	mov	r0, r8
 8004260:	47d0      	blx	sl
 8004262:	3001      	adds	r0, #1
 8004264:	d09d      	beq.n	80041a2 <_printf_i+0x15e>
 8004266:	3501      	adds	r5, #1
 8004268:	68e3      	ldr	r3, [r4, #12]
 800426a:	9903      	ldr	r1, [sp, #12]
 800426c:	1a5b      	subs	r3, r3, r1
 800426e:	42ab      	cmp	r3, r5
 8004270:	dcf2      	bgt.n	8004258 <_printf_i+0x214>
 8004272:	e7eb      	b.n	800424c <_printf_i+0x208>
 8004274:	2500      	movs	r5, #0
 8004276:	f104 0619 	add.w	r6, r4, #25
 800427a:	e7f5      	b.n	8004268 <_printf_i+0x224>
 800427c:	08008168 	.word	0x08008168
 8004280:	08008179 	.word	0x08008179

08004284 <_scanf_float>:
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	b087      	sub	sp, #28
 800428a:	9303      	str	r3, [sp, #12]
 800428c:	688b      	ldr	r3, [r1, #8]
 800428e:	4617      	mov	r7, r2
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004296:	bf82      	ittt	hi
 8004298:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800429c:	eb03 0b05 	addhi.w	fp, r3, r5
 80042a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80042a4:	460a      	mov	r2, r1
 80042a6:	f04f 0500 	mov.w	r5, #0
 80042aa:	bf88      	it	hi
 80042ac:	608b      	strhi	r3, [r1, #8]
 80042ae:	680b      	ldr	r3, [r1, #0]
 80042b0:	4680      	mov	r8, r0
 80042b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80042b6:	f842 3b1c 	str.w	r3, [r2], #28
 80042ba:	460c      	mov	r4, r1
 80042bc:	bf98      	it	ls
 80042be:	f04f 0b00 	movls.w	fp, #0
 80042c2:	4616      	mov	r6, r2
 80042c4:	46aa      	mov	sl, r5
 80042c6:	46a9      	mov	r9, r5
 80042c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80042cc:	9201      	str	r2, [sp, #4]
 80042ce:	9502      	str	r5, [sp, #8]
 80042d0:	68a2      	ldr	r2, [r4, #8]
 80042d2:	b152      	cbz	r2, 80042ea <_scanf_float+0x66>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80042da:	d865      	bhi.n	80043a8 <_scanf_float+0x124>
 80042dc:	2b40      	cmp	r3, #64	@ 0x40
 80042de:	d83d      	bhi.n	800435c <_scanf_float+0xd8>
 80042e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80042e4:	b2c8      	uxtb	r0, r1
 80042e6:	280e      	cmp	r0, #14
 80042e8:	d93b      	bls.n	8004362 <_scanf_float+0xde>
 80042ea:	f1b9 0f00 	cmp.w	r9, #0
 80042ee:	d003      	beq.n	80042f8 <_scanf_float+0x74>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042fc:	f1ba 0f01 	cmp.w	sl, #1
 8004300:	f200 8118 	bhi.w	8004534 <_scanf_float+0x2b0>
 8004304:	9b01      	ldr	r3, [sp, #4]
 8004306:	429e      	cmp	r6, r3
 8004308:	f200 8109 	bhi.w	800451e <_scanf_float+0x29a>
 800430c:	2001      	movs	r0, #1
 800430e:	b007      	add	sp, #28
 8004310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004314:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004318:	2a0d      	cmp	r2, #13
 800431a:	d8e6      	bhi.n	80042ea <_scanf_float+0x66>
 800431c:	a101      	add	r1, pc, #4	@ (adr r1, 8004324 <_scanf_float+0xa0>)
 800431e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004322:	bf00      	nop
 8004324:	0800446b 	.word	0x0800446b
 8004328:	080042eb 	.word	0x080042eb
 800432c:	080042eb 	.word	0x080042eb
 8004330:	080042eb 	.word	0x080042eb
 8004334:	080044cb 	.word	0x080044cb
 8004338:	080044a3 	.word	0x080044a3
 800433c:	080042eb 	.word	0x080042eb
 8004340:	080042eb 	.word	0x080042eb
 8004344:	08004479 	.word	0x08004479
 8004348:	080042eb 	.word	0x080042eb
 800434c:	080042eb 	.word	0x080042eb
 8004350:	080042eb 	.word	0x080042eb
 8004354:	080042eb 	.word	0x080042eb
 8004358:	08004431 	.word	0x08004431
 800435c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004360:	e7da      	b.n	8004318 <_scanf_float+0x94>
 8004362:	290e      	cmp	r1, #14
 8004364:	d8c1      	bhi.n	80042ea <_scanf_float+0x66>
 8004366:	a001      	add	r0, pc, #4	@ (adr r0, 800436c <_scanf_float+0xe8>)
 8004368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800436c:	08004421 	.word	0x08004421
 8004370:	080042eb 	.word	0x080042eb
 8004374:	08004421 	.word	0x08004421
 8004378:	080044b7 	.word	0x080044b7
 800437c:	080042eb 	.word	0x080042eb
 8004380:	080043c9 	.word	0x080043c9
 8004384:	08004407 	.word	0x08004407
 8004388:	08004407 	.word	0x08004407
 800438c:	08004407 	.word	0x08004407
 8004390:	08004407 	.word	0x08004407
 8004394:	08004407 	.word	0x08004407
 8004398:	08004407 	.word	0x08004407
 800439c:	08004407 	.word	0x08004407
 80043a0:	08004407 	.word	0x08004407
 80043a4:	08004407 	.word	0x08004407
 80043a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80043aa:	d809      	bhi.n	80043c0 <_scanf_float+0x13c>
 80043ac:	2b60      	cmp	r3, #96	@ 0x60
 80043ae:	d8b1      	bhi.n	8004314 <_scanf_float+0x90>
 80043b0:	2b54      	cmp	r3, #84	@ 0x54
 80043b2:	d07b      	beq.n	80044ac <_scanf_float+0x228>
 80043b4:	2b59      	cmp	r3, #89	@ 0x59
 80043b6:	d198      	bne.n	80042ea <_scanf_float+0x66>
 80043b8:	2d07      	cmp	r5, #7
 80043ba:	d196      	bne.n	80042ea <_scanf_float+0x66>
 80043bc:	2508      	movs	r5, #8
 80043be:	e02c      	b.n	800441a <_scanf_float+0x196>
 80043c0:	2b74      	cmp	r3, #116	@ 0x74
 80043c2:	d073      	beq.n	80044ac <_scanf_float+0x228>
 80043c4:	2b79      	cmp	r3, #121	@ 0x79
 80043c6:	e7f6      	b.n	80043b6 <_scanf_float+0x132>
 80043c8:	6821      	ldr	r1, [r4, #0]
 80043ca:	05c8      	lsls	r0, r1, #23
 80043cc:	d51b      	bpl.n	8004406 <_scanf_float+0x182>
 80043ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80043d2:	6021      	str	r1, [r4, #0]
 80043d4:	f109 0901 	add.w	r9, r9, #1
 80043d8:	f1bb 0f00 	cmp.w	fp, #0
 80043dc:	d003      	beq.n	80043e6 <_scanf_float+0x162>
 80043de:	3201      	adds	r2, #1
 80043e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043e4:	60a2      	str	r2, [r4, #8]
 80043e6:	68a3      	ldr	r3, [r4, #8]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	3301      	adds	r3, #1
 80043f0:	6123      	str	r3, [r4, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	f340 8087 	ble.w	800450c <_scanf_float+0x288>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	e764      	b.n	80042d0 <_scanf_float+0x4c>
 8004406:	eb1a 0105 	adds.w	r1, sl, r5
 800440a:	f47f af6e 	bne.w	80042ea <_scanf_float+0x66>
 800440e:	460d      	mov	r5, r1
 8004410:	468a      	mov	sl, r1
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004418:	6022      	str	r2, [r4, #0]
 800441a:	f806 3b01 	strb.w	r3, [r6], #1
 800441e:	e7e2      	b.n	80043e6 <_scanf_float+0x162>
 8004420:	6822      	ldr	r2, [r4, #0]
 8004422:	0610      	lsls	r0, r2, #24
 8004424:	f57f af61 	bpl.w	80042ea <_scanf_float+0x66>
 8004428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	e7f4      	b.n	800441a <_scanf_float+0x196>
 8004430:	f1ba 0f00 	cmp.w	sl, #0
 8004434:	d10e      	bne.n	8004454 <_scanf_float+0x1d0>
 8004436:	f1b9 0f00 	cmp.w	r9, #0
 800443a:	d10e      	bne.n	800445a <_scanf_float+0x1d6>
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004442:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004446:	d108      	bne.n	800445a <_scanf_float+0x1d6>
 8004448:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800444c:	f04f 0a01 	mov.w	sl, #1
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	e7e2      	b.n	800441a <_scanf_float+0x196>
 8004454:	f1ba 0f02 	cmp.w	sl, #2
 8004458:	d055      	beq.n	8004506 <_scanf_float+0x282>
 800445a:	2d01      	cmp	r5, #1
 800445c:	d002      	beq.n	8004464 <_scanf_float+0x1e0>
 800445e:	2d04      	cmp	r5, #4
 8004460:	f47f af43 	bne.w	80042ea <_scanf_float+0x66>
 8004464:	3501      	adds	r5, #1
 8004466:	b2ed      	uxtb	r5, r5
 8004468:	e7d7      	b.n	800441a <_scanf_float+0x196>
 800446a:	f1ba 0f01 	cmp.w	sl, #1
 800446e:	f47f af3c 	bne.w	80042ea <_scanf_float+0x66>
 8004472:	f04f 0a02 	mov.w	sl, #2
 8004476:	e7d0      	b.n	800441a <_scanf_float+0x196>
 8004478:	b97d      	cbnz	r5, 800449a <_scanf_float+0x216>
 800447a:	f1b9 0f00 	cmp.w	r9, #0
 800447e:	f47f af37 	bne.w	80042f0 <_scanf_float+0x6c>
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004488:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800448c:	f040 8103 	bne.w	8004696 <_scanf_float+0x412>
 8004490:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004494:	2501      	movs	r5, #1
 8004496:	6022      	str	r2, [r4, #0]
 8004498:	e7bf      	b.n	800441a <_scanf_float+0x196>
 800449a:	2d03      	cmp	r5, #3
 800449c:	d0e2      	beq.n	8004464 <_scanf_float+0x1e0>
 800449e:	2d05      	cmp	r5, #5
 80044a0:	e7de      	b.n	8004460 <_scanf_float+0x1dc>
 80044a2:	2d02      	cmp	r5, #2
 80044a4:	f47f af21 	bne.w	80042ea <_scanf_float+0x66>
 80044a8:	2503      	movs	r5, #3
 80044aa:	e7b6      	b.n	800441a <_scanf_float+0x196>
 80044ac:	2d06      	cmp	r5, #6
 80044ae:	f47f af1c 	bne.w	80042ea <_scanf_float+0x66>
 80044b2:	2507      	movs	r5, #7
 80044b4:	e7b1      	b.n	800441a <_scanf_float+0x196>
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	0591      	lsls	r1, r2, #22
 80044ba:	f57f af16 	bpl.w	80042ea <_scanf_float+0x66>
 80044be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80044c2:	6022      	str	r2, [r4, #0]
 80044c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80044c8:	e7a7      	b.n	800441a <_scanf_float+0x196>
 80044ca:	6822      	ldr	r2, [r4, #0]
 80044cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80044d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80044d4:	d006      	beq.n	80044e4 <_scanf_float+0x260>
 80044d6:	0550      	lsls	r0, r2, #21
 80044d8:	f57f af07 	bpl.w	80042ea <_scanf_float+0x66>
 80044dc:	f1b9 0f00 	cmp.w	r9, #0
 80044e0:	f000 80d9 	beq.w	8004696 <_scanf_float+0x412>
 80044e4:	0591      	lsls	r1, r2, #22
 80044e6:	bf58      	it	pl
 80044e8:	9902      	ldrpl	r1, [sp, #8]
 80044ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80044ee:	bf58      	it	pl
 80044f0:	eba9 0101 	subpl.w	r1, r9, r1
 80044f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80044f8:	f04f 0900 	mov.w	r9, #0
 80044fc:	bf58      	it	pl
 80044fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004502:	6022      	str	r2, [r4, #0]
 8004504:	e789      	b.n	800441a <_scanf_float+0x196>
 8004506:	f04f 0a03 	mov.w	sl, #3
 800450a:	e786      	b.n	800441a <_scanf_float+0x196>
 800450c:	4639      	mov	r1, r7
 800450e:	4640      	mov	r0, r8
 8004510:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004514:	4798      	blx	r3
 8004516:	2800      	cmp	r0, #0
 8004518:	f43f aeda 	beq.w	80042d0 <_scanf_float+0x4c>
 800451c:	e6e5      	b.n	80042ea <_scanf_float+0x66>
 800451e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004522:	463a      	mov	r2, r7
 8004524:	4640      	mov	r0, r8
 8004526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800452a:	4798      	blx	r3
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	3b01      	subs	r3, #1
 8004530:	6123      	str	r3, [r4, #16]
 8004532:	e6e7      	b.n	8004304 <_scanf_float+0x80>
 8004534:	1e6b      	subs	r3, r5, #1
 8004536:	2b06      	cmp	r3, #6
 8004538:	d824      	bhi.n	8004584 <_scanf_float+0x300>
 800453a:	2d02      	cmp	r5, #2
 800453c:	d836      	bhi.n	80045ac <_scanf_float+0x328>
 800453e:	9b01      	ldr	r3, [sp, #4]
 8004540:	429e      	cmp	r6, r3
 8004542:	f67f aee3 	bls.w	800430c <_scanf_float+0x88>
 8004546:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800454a:	463a      	mov	r2, r7
 800454c:	4640      	mov	r0, r8
 800454e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004552:	4798      	blx	r3
 8004554:	6923      	ldr	r3, [r4, #16]
 8004556:	3b01      	subs	r3, #1
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	e7f0      	b.n	800453e <_scanf_float+0x2ba>
 800455c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004560:	463a      	mov	r2, r7
 8004562:	4640      	mov	r0, r8
 8004564:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004568:	4798      	blx	r3
 800456a:	6923      	ldr	r3, [r4, #16]
 800456c:	3b01      	subs	r3, #1
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004574:	fa5f fa8a 	uxtb.w	sl, sl
 8004578:	f1ba 0f02 	cmp.w	sl, #2
 800457c:	d1ee      	bne.n	800455c <_scanf_float+0x2d8>
 800457e:	3d03      	subs	r5, #3
 8004580:	b2ed      	uxtb	r5, r5
 8004582:	1b76      	subs	r6, r6, r5
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	05da      	lsls	r2, r3, #23
 8004588:	d530      	bpl.n	80045ec <_scanf_float+0x368>
 800458a:	055b      	lsls	r3, r3, #21
 800458c:	d511      	bpl.n	80045b2 <_scanf_float+0x32e>
 800458e:	9b01      	ldr	r3, [sp, #4]
 8004590:	429e      	cmp	r6, r3
 8004592:	f67f aebb 	bls.w	800430c <_scanf_float+0x88>
 8004596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800459a:	463a      	mov	r2, r7
 800459c:	4640      	mov	r0, r8
 800459e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045a2:	4798      	blx	r3
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	e7f0      	b.n	800458e <_scanf_float+0x30a>
 80045ac:	46aa      	mov	sl, r5
 80045ae:	46b3      	mov	fp, r6
 80045b0:	e7de      	b.n	8004570 <_scanf_float+0x2ec>
 80045b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	2965      	cmp	r1, #101	@ 0x65
 80045ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80045be:	f106 35ff 	add.w	r5, r6, #4294967295
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	d00c      	beq.n	80045e0 <_scanf_float+0x35c>
 80045c6:	2945      	cmp	r1, #69	@ 0x45
 80045c8:	d00a      	beq.n	80045e0 <_scanf_float+0x35c>
 80045ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80045ce:	463a      	mov	r2, r7
 80045d0:	4640      	mov	r0, r8
 80045d2:	4798      	blx	r3
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80045da:	3b01      	subs	r3, #1
 80045dc:	1eb5      	subs	r5, r6, #2
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	463a      	mov	r2, r7
 80045e2:	4640      	mov	r0, r8
 80045e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80045e8:	4798      	blx	r3
 80045ea:	462e      	mov	r6, r5
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	f012 0210 	ands.w	r2, r2, #16
 80045f2:	d001      	beq.n	80045f8 <_scanf_float+0x374>
 80045f4:	2000      	movs	r0, #0
 80045f6:	e68a      	b.n	800430e <_scanf_float+0x8a>
 80045f8:	7032      	strb	r2, [r6, #0]
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004604:	d11c      	bne.n	8004640 <_scanf_float+0x3bc>
 8004606:	9b02      	ldr	r3, [sp, #8]
 8004608:	454b      	cmp	r3, r9
 800460a:	eba3 0209 	sub.w	r2, r3, r9
 800460e:	d123      	bne.n	8004658 <_scanf_float+0x3d4>
 8004610:	2200      	movs	r2, #0
 8004612:	4640      	mov	r0, r8
 8004614:	9901      	ldr	r1, [sp, #4]
 8004616:	f002 fc23 	bl	8006e60 <_strtod_r>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	6825      	ldr	r5, [r4, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f015 0f02 	tst.w	r5, #2
 8004624:	4606      	mov	r6, r0
 8004626:	460f      	mov	r7, r1
 8004628:	f103 0204 	add.w	r2, r3, #4
 800462c:	d01f      	beq.n	800466e <_scanf_float+0x3ea>
 800462e:	9903      	ldr	r1, [sp, #12]
 8004630:	600a      	str	r2, [r1, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	e9c3 6700 	strd	r6, r7, [r3]
 8004638:	68e3      	ldr	r3, [r4, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60e3      	str	r3, [r4, #12]
 800463e:	e7d9      	b.n	80045f4 <_scanf_float+0x370>
 8004640:	9b04      	ldr	r3, [sp, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0e4      	beq.n	8004610 <_scanf_float+0x38c>
 8004646:	9905      	ldr	r1, [sp, #20]
 8004648:	230a      	movs	r3, #10
 800464a:	4640      	mov	r0, r8
 800464c:	3101      	adds	r1, #1
 800464e:	f002 fc87 	bl	8006f60 <_strtol_r>
 8004652:	9b04      	ldr	r3, [sp, #16]
 8004654:	9e05      	ldr	r6, [sp, #20]
 8004656:	1ac2      	subs	r2, r0, r3
 8004658:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800465c:	429e      	cmp	r6, r3
 800465e:	bf28      	it	cs
 8004660:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004664:	4630      	mov	r0, r6
 8004666:	490d      	ldr	r1, [pc, #52]	@ (800469c <_scanf_float+0x418>)
 8004668:	f000 f912 	bl	8004890 <siprintf>
 800466c:	e7d0      	b.n	8004610 <_scanf_float+0x38c>
 800466e:	076d      	lsls	r5, r5, #29
 8004670:	d4dd      	bmi.n	800462e <_scanf_float+0x3aa>
 8004672:	9d03      	ldr	r5, [sp, #12]
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	681d      	ldr	r5, [r3, #0]
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	f7fc f9c6 	bl	8000a0c <__aeabi_dcmpun>
 8004680:	b120      	cbz	r0, 800468c <_scanf_float+0x408>
 8004682:	4807      	ldr	r0, [pc, #28]	@ (80046a0 <_scanf_float+0x41c>)
 8004684:	f000 f9f6 	bl	8004a74 <nanf>
 8004688:	6028      	str	r0, [r5, #0]
 800468a:	e7d5      	b.n	8004638 <_scanf_float+0x3b4>
 800468c:	4630      	mov	r0, r6
 800468e:	4639      	mov	r1, r7
 8004690:	f7fc fa1a 	bl	8000ac8 <__aeabi_d2f>
 8004694:	e7f8      	b.n	8004688 <_scanf_float+0x404>
 8004696:	f04f 0900 	mov.w	r9, #0
 800469a:	e62d      	b.n	80042f8 <_scanf_float+0x74>
 800469c:	0800818a 	.word	0x0800818a
 80046a0:	08008525 	.word	0x08008525

080046a4 <std>:
 80046a4:	2300      	movs	r3, #0
 80046a6:	b510      	push	{r4, lr}
 80046a8:	4604      	mov	r4, r0
 80046aa:	e9c0 3300 	strd	r3, r3, [r0]
 80046ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046b2:	6083      	str	r3, [r0, #8]
 80046b4:	8181      	strh	r1, [r0, #12]
 80046b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80046b8:	81c2      	strh	r2, [r0, #14]
 80046ba:	6183      	str	r3, [r0, #24]
 80046bc:	4619      	mov	r1, r3
 80046be:	2208      	movs	r2, #8
 80046c0:	305c      	adds	r0, #92	@ 0x5c
 80046c2:	f000 f948 	bl	8004956 <memset>
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <std+0x58>)
 80046c8:	6224      	str	r4, [r4, #32]
 80046ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80046cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <std+0x5c>)
 80046ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <std+0x60>)
 80046d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004708 <std+0x64>)
 80046d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80046d8:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <std+0x68>)
 80046da:	429c      	cmp	r4, r3
 80046dc:	d006      	beq.n	80046ec <std+0x48>
 80046de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046e2:	4294      	cmp	r4, r2
 80046e4:	d002      	beq.n	80046ec <std+0x48>
 80046e6:	33d0      	adds	r3, #208	@ 0xd0
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d105      	bne.n	80046f8 <std+0x54>
 80046ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f4:	f000 b9ac 	b.w	8004a50 <__retarget_lock_init_recursive>
 80046f8:	bd10      	pop	{r4, pc}
 80046fa:	bf00      	nop
 80046fc:	080048d1 	.word	0x080048d1
 8004700:	080048f3 	.word	0x080048f3
 8004704:	0800492b 	.word	0x0800492b
 8004708:	0800494f 	.word	0x0800494f
 800470c:	2000028c 	.word	0x2000028c

08004710 <stdio_exit_handler>:
 8004710:	4a02      	ldr	r2, [pc, #8]	@ (800471c <stdio_exit_handler+0xc>)
 8004712:	4903      	ldr	r1, [pc, #12]	@ (8004720 <stdio_exit_handler+0x10>)
 8004714:	4803      	ldr	r0, [pc, #12]	@ (8004724 <stdio_exit_handler+0x14>)
 8004716:	f000 b869 	b.w	80047ec <_fwalk_sglue>
 800471a:	bf00      	nop
 800471c:	2000000c 	.word	0x2000000c
 8004720:	08007315 	.word	0x08007315
 8004724:	2000001c 	.word	0x2000001c

08004728 <cleanup_stdio>:
 8004728:	6841      	ldr	r1, [r0, #4]
 800472a:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <cleanup_stdio+0x34>)
 800472c:	b510      	push	{r4, lr}
 800472e:	4299      	cmp	r1, r3
 8004730:	4604      	mov	r4, r0
 8004732:	d001      	beq.n	8004738 <cleanup_stdio+0x10>
 8004734:	f002 fdee 	bl	8007314 <_fflush_r>
 8004738:	68a1      	ldr	r1, [r4, #8]
 800473a:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <cleanup_stdio+0x38>)
 800473c:	4299      	cmp	r1, r3
 800473e:	d002      	beq.n	8004746 <cleanup_stdio+0x1e>
 8004740:	4620      	mov	r0, r4
 8004742:	f002 fde7 	bl	8007314 <_fflush_r>
 8004746:	68e1      	ldr	r1, [r4, #12]
 8004748:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <cleanup_stdio+0x3c>)
 800474a:	4299      	cmp	r1, r3
 800474c:	d004      	beq.n	8004758 <cleanup_stdio+0x30>
 800474e:	4620      	mov	r0, r4
 8004750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004754:	f002 bdde 	b.w	8007314 <_fflush_r>
 8004758:	bd10      	pop	{r4, pc}
 800475a:	bf00      	nop
 800475c:	2000028c 	.word	0x2000028c
 8004760:	200002f4 	.word	0x200002f4
 8004764:	2000035c 	.word	0x2000035c

08004768 <global_stdio_init.part.0>:
 8004768:	b510      	push	{r4, lr}
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <global_stdio_init.part.0+0x30>)
 800476c:	4c0b      	ldr	r4, [pc, #44]	@ (800479c <global_stdio_init.part.0+0x34>)
 800476e:	4a0c      	ldr	r2, [pc, #48]	@ (80047a0 <global_stdio_init.part.0+0x38>)
 8004770:	4620      	mov	r0, r4
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	2104      	movs	r1, #4
 8004776:	2200      	movs	r2, #0
 8004778:	f7ff ff94 	bl	80046a4 <std>
 800477c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004780:	2201      	movs	r2, #1
 8004782:	2109      	movs	r1, #9
 8004784:	f7ff ff8e 	bl	80046a4 <std>
 8004788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800478c:	2202      	movs	r2, #2
 800478e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004792:	2112      	movs	r1, #18
 8004794:	f7ff bf86 	b.w	80046a4 <std>
 8004798:	200003c4 	.word	0x200003c4
 800479c:	2000028c 	.word	0x2000028c
 80047a0:	08004711 	.word	0x08004711

080047a4 <__sfp_lock_acquire>:
 80047a4:	4801      	ldr	r0, [pc, #4]	@ (80047ac <__sfp_lock_acquire+0x8>)
 80047a6:	f000 b954 	b.w	8004a52 <__retarget_lock_acquire_recursive>
 80047aa:	bf00      	nop
 80047ac:	200003cd 	.word	0x200003cd

080047b0 <__sfp_lock_release>:
 80047b0:	4801      	ldr	r0, [pc, #4]	@ (80047b8 <__sfp_lock_release+0x8>)
 80047b2:	f000 b94f 	b.w	8004a54 <__retarget_lock_release_recursive>
 80047b6:	bf00      	nop
 80047b8:	200003cd 	.word	0x200003cd

080047bc <__sinit>:
 80047bc:	b510      	push	{r4, lr}
 80047be:	4604      	mov	r4, r0
 80047c0:	f7ff fff0 	bl	80047a4 <__sfp_lock_acquire>
 80047c4:	6a23      	ldr	r3, [r4, #32]
 80047c6:	b11b      	cbz	r3, 80047d0 <__sinit+0x14>
 80047c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047cc:	f7ff bff0 	b.w	80047b0 <__sfp_lock_release>
 80047d0:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <__sinit+0x28>)
 80047d2:	6223      	str	r3, [r4, #32]
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <__sinit+0x2c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f5      	bne.n	80047c8 <__sinit+0xc>
 80047dc:	f7ff ffc4 	bl	8004768 <global_stdio_init.part.0>
 80047e0:	e7f2      	b.n	80047c8 <__sinit+0xc>
 80047e2:	bf00      	nop
 80047e4:	08004729 	.word	0x08004729
 80047e8:	200003c4 	.word	0x200003c4

080047ec <_fwalk_sglue>:
 80047ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047f0:	4607      	mov	r7, r0
 80047f2:	4688      	mov	r8, r1
 80047f4:	4614      	mov	r4, r2
 80047f6:	2600      	movs	r6, #0
 80047f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004800:	d505      	bpl.n	800480e <_fwalk_sglue+0x22>
 8004802:	6824      	ldr	r4, [r4, #0]
 8004804:	2c00      	cmp	r4, #0
 8004806:	d1f7      	bne.n	80047f8 <_fwalk_sglue+0xc>
 8004808:	4630      	mov	r0, r6
 800480a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800480e:	89ab      	ldrh	r3, [r5, #12]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d907      	bls.n	8004824 <_fwalk_sglue+0x38>
 8004814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004818:	3301      	adds	r3, #1
 800481a:	d003      	beq.n	8004824 <_fwalk_sglue+0x38>
 800481c:	4629      	mov	r1, r5
 800481e:	4638      	mov	r0, r7
 8004820:	47c0      	blx	r8
 8004822:	4306      	orrs	r6, r0
 8004824:	3568      	adds	r5, #104	@ 0x68
 8004826:	e7e9      	b.n	80047fc <_fwalk_sglue+0x10>

08004828 <sniprintf>:
 8004828:	b40c      	push	{r2, r3}
 800482a:	b530      	push	{r4, r5, lr}
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <sniprintf+0x64>)
 800482e:	1e0c      	subs	r4, r1, #0
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	b09d      	sub	sp, #116	@ 0x74
 8004834:	da08      	bge.n	8004848 <sniprintf+0x20>
 8004836:	238b      	movs	r3, #139	@ 0x8b
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	b01d      	add	sp, #116	@ 0x74
 8004840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004844:	b002      	add	sp, #8
 8004846:	4770      	bx	lr
 8004848:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800484c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004850:	bf0c      	ite	eq
 8004852:	4623      	moveq	r3, r4
 8004854:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004858:	9304      	str	r3, [sp, #16]
 800485a:	9307      	str	r3, [sp, #28]
 800485c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004860:	9002      	str	r0, [sp, #8]
 8004862:	9006      	str	r0, [sp, #24]
 8004864:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004868:	4628      	mov	r0, r5
 800486a:	ab21      	add	r3, sp, #132	@ 0x84
 800486c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800486e:	a902      	add	r1, sp, #8
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	f002 fbd3 	bl	800701c <_svfiprintf_r>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	bfbc      	itt	lt
 800487a:	238b      	movlt	r3, #139	@ 0x8b
 800487c:	602b      	strlt	r3, [r5, #0]
 800487e:	2c00      	cmp	r4, #0
 8004880:	d0dd      	beq.n	800483e <sniprintf+0x16>
 8004882:	2200      	movs	r2, #0
 8004884:	9b02      	ldr	r3, [sp, #8]
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e7d9      	b.n	800483e <sniprintf+0x16>
 800488a:	bf00      	nop
 800488c:	20000018 	.word	0x20000018

08004890 <siprintf>:
 8004890:	b40e      	push	{r1, r2, r3}
 8004892:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004896:	b500      	push	{lr}
 8004898:	b09c      	sub	sp, #112	@ 0x70
 800489a:	ab1d      	add	r3, sp, #116	@ 0x74
 800489c:	9002      	str	r0, [sp, #8]
 800489e:	9006      	str	r0, [sp, #24]
 80048a0:	9107      	str	r1, [sp, #28]
 80048a2:	9104      	str	r1, [sp, #16]
 80048a4:	4808      	ldr	r0, [pc, #32]	@ (80048c8 <siprintf+0x38>)
 80048a6:	4909      	ldr	r1, [pc, #36]	@ (80048cc <siprintf+0x3c>)
 80048a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ac:	9105      	str	r1, [sp, #20]
 80048ae:	6800      	ldr	r0, [r0, #0]
 80048b0:	a902      	add	r1, sp, #8
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	f002 fbb2 	bl	800701c <_svfiprintf_r>
 80048b8:	2200      	movs	r2, #0
 80048ba:	9b02      	ldr	r3, [sp, #8]
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	b01c      	add	sp, #112	@ 0x70
 80048c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c4:	b003      	add	sp, #12
 80048c6:	4770      	bx	lr
 80048c8:	20000018 	.word	0x20000018
 80048cc:	ffff0208 	.word	0xffff0208

080048d0 <__sread>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	460c      	mov	r4, r1
 80048d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d8:	f000 f86c 	bl	80049b4 <_read_r>
 80048dc:	2800      	cmp	r0, #0
 80048de:	bfab      	itete	ge
 80048e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048e2:	89a3      	ldrhlt	r3, [r4, #12]
 80048e4:	181b      	addge	r3, r3, r0
 80048e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048ea:	bfac      	ite	ge
 80048ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048ee:	81a3      	strhlt	r3, [r4, #12]
 80048f0:	bd10      	pop	{r4, pc}

080048f2 <__swrite>:
 80048f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	461f      	mov	r7, r3
 80048f8:	898b      	ldrh	r3, [r1, #12]
 80048fa:	4605      	mov	r5, r0
 80048fc:	05db      	lsls	r3, r3, #23
 80048fe:	460c      	mov	r4, r1
 8004900:	4616      	mov	r6, r2
 8004902:	d505      	bpl.n	8004910 <__swrite+0x1e>
 8004904:	2302      	movs	r3, #2
 8004906:	2200      	movs	r2, #0
 8004908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490c:	f000 f840 	bl	8004990 <_lseek_r>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	4632      	mov	r2, r6
 8004914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	4628      	mov	r0, r5
 800491c:	463b      	mov	r3, r7
 800491e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	f000 b857 	b.w	80049d8 <_write_r>

0800492a <__sseek>:
 800492a:	b510      	push	{r4, lr}
 800492c:	460c      	mov	r4, r1
 800492e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004932:	f000 f82d 	bl	8004990 <_lseek_r>
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	bf15      	itete	ne
 800493c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800493e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004946:	81a3      	strheq	r3, [r4, #12]
 8004948:	bf18      	it	ne
 800494a:	81a3      	strhne	r3, [r4, #12]
 800494c:	bd10      	pop	{r4, pc}

0800494e <__sclose>:
 800494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004952:	f000 b80d 	b.w	8004970 <_close_r>

08004956 <memset>:
 8004956:	4603      	mov	r3, r0
 8004958:	4402      	add	r2, r0
 800495a:	4293      	cmp	r3, r2
 800495c:	d100      	bne.n	8004960 <memset+0xa>
 800495e:	4770      	bx	lr
 8004960:	f803 1b01 	strb.w	r1, [r3], #1
 8004964:	e7f9      	b.n	800495a <memset+0x4>
	...

08004968 <_localeconv_r>:
 8004968:	4800      	ldr	r0, [pc, #0]	@ (800496c <_localeconv_r+0x4>)
 800496a:	4770      	bx	lr
 800496c:	20000158 	.word	0x20000158

08004970 <_close_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	2300      	movs	r3, #0
 8004974:	4d05      	ldr	r5, [pc, #20]	@ (800498c <_close_r+0x1c>)
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc fe35 	bl	80015ea <_close>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_close_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_close_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	200003c8 	.word	0x200003c8

08004990 <_lseek_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4604      	mov	r4, r0
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	2200      	movs	r2, #0
 800499a:	4d05      	ldr	r5, [pc, #20]	@ (80049b0 <_lseek_r+0x20>)
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc fe47 	bl	8001632 <_lseek>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_lseek_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_lseek_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	200003c8 	.word	0x200003c8

080049b4 <_read_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4604      	mov	r4, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	2200      	movs	r2, #0
 80049be:	4d05      	ldr	r5, [pc, #20]	@ (80049d4 <_read_r+0x20>)
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7fc fdd8 	bl	8001578 <_read>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_read_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_read_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	200003c8 	.word	0x200003c8

080049d8 <_write_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	2200      	movs	r2, #0
 80049e2:	4d05      	ldr	r5, [pc, #20]	@ (80049f8 <_write_r+0x20>)
 80049e4:	602a      	str	r2, [r5, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7fc fde3 	bl	80015b2 <_write>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_write_r+0x1e>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_write_r+0x1e>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	200003c8 	.word	0x200003c8

080049fc <__errno>:
 80049fc:	4b01      	ldr	r3, [pc, #4]	@ (8004a04 <__errno+0x8>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000018 	.word	0x20000018

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	4d0c      	ldr	r5, [pc, #48]	@ (8004a40 <__libc_init_array+0x38>)
 8004a0e:	4c0d      	ldr	r4, [pc, #52]	@ (8004a44 <__libc_init_array+0x3c>)
 8004a10:	1b64      	subs	r4, r4, r5
 8004a12:	10a4      	asrs	r4, r4, #2
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	f003 fb68 	bl	80080ec <_init>
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	4d0a      	ldr	r5, [pc, #40]	@ (8004a48 <__libc_init_array+0x40>)
 8004a20:	4c0a      	ldr	r4, [pc, #40]	@ (8004a4c <__libc_init_array+0x44>)
 8004a22:	1b64      	subs	r4, r4, r5
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08008590 	.word	0x08008590
 8004a44:	08008590 	.word	0x08008590
 8004a48:	08008590 	.word	0x08008590
 8004a4c:	08008594 	.word	0x08008594

08004a50 <__retarget_lock_init_recursive>:
 8004a50:	4770      	bx	lr

08004a52 <__retarget_lock_acquire_recursive>:
 8004a52:	4770      	bx	lr

08004a54 <__retarget_lock_release_recursive>:
 8004a54:	4770      	bx	lr

08004a56 <memchr>:
 8004a56:	4603      	mov	r3, r0
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	b2c9      	uxtb	r1, r1
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	d101      	bne.n	8004a68 <memchr+0x12>
 8004a64:	2000      	movs	r0, #0
 8004a66:	e003      	b.n	8004a70 <memchr+0x1a>
 8004a68:	7804      	ldrb	r4, [r0, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	428c      	cmp	r4, r1
 8004a6e:	d1f6      	bne.n	8004a5e <memchr+0x8>
 8004a70:	bd10      	pop	{r4, pc}
	...

08004a74 <nanf>:
 8004a74:	4800      	ldr	r0, [pc, #0]	@ (8004a78 <nanf+0x4>)
 8004a76:	4770      	bx	lr
 8004a78:	7fc00000 	.word	0x7fc00000

08004a7c <quorem>:
 8004a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	6903      	ldr	r3, [r0, #16]
 8004a82:	690c      	ldr	r4, [r1, #16]
 8004a84:	4607      	mov	r7, r0
 8004a86:	42a3      	cmp	r3, r4
 8004a88:	db7e      	blt.n	8004b88 <quorem+0x10c>
 8004a8a:	3c01      	subs	r4, #1
 8004a8c:	00a3      	lsls	r3, r4, #2
 8004a8e:	f100 0514 	add.w	r5, r0, #20
 8004a92:	f101 0814 	add.w	r8, r1, #20
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004aa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	fbb2 f6f3 	udiv	r6, r2, r3
 8004aae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ab2:	d32e      	bcc.n	8004b12 <quorem+0x96>
 8004ab4:	f04f 0a00 	mov.w	sl, #0
 8004ab8:	46c4      	mov	ip, r8
 8004aba:	46ae      	mov	lr, r5
 8004abc:	46d3      	mov	fp, sl
 8004abe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ac2:	b298      	uxth	r0, r3
 8004ac4:	fb06 a000 	mla	r0, r6, r0, sl
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	0c02      	lsrs	r2, r0, #16
 8004acc:	fb06 2303 	mla	r3, r6, r3, r2
 8004ad0:	f8de 2000 	ldr.w	r2, [lr]
 8004ad4:	b280      	uxth	r0, r0
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	1a12      	subs	r2, r2, r0
 8004ada:	445a      	add	r2, fp
 8004adc:	f8de 0000 	ldr.w	r0, [lr]
 8004ae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004aea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004aee:	b292      	uxth	r2, r2
 8004af0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004af4:	45e1      	cmp	r9, ip
 8004af6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004afa:	f84e 2b04 	str.w	r2, [lr], #4
 8004afe:	d2de      	bcs.n	8004abe <quorem+0x42>
 8004b00:	9b00      	ldr	r3, [sp, #0]
 8004b02:	58eb      	ldr	r3, [r5, r3]
 8004b04:	b92b      	cbnz	r3, 8004b12 <quorem+0x96>
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	429d      	cmp	r5, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	d32f      	bcc.n	8004b70 <quorem+0xf4>
 8004b10:	613c      	str	r4, [r7, #16]
 8004b12:	4638      	mov	r0, r7
 8004b14:	f001 f9c4 	bl	8005ea0 <__mcmp>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	db25      	blt.n	8004b68 <quorem+0xec>
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b24:	f8d1 c000 	ldr.w	ip, [r1]
 8004b28:	fa1f fe82 	uxth.w	lr, r2
 8004b2c:	fa1f f38c 	uxth.w	r3, ip
 8004b30:	eba3 030e 	sub.w	r3, r3, lr
 8004b34:	4403      	add	r3, r0
 8004b36:	0c12      	lsrs	r2, r2, #16
 8004b38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b46:	45c1      	cmp	r9, r8
 8004b48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b4c:	f841 3b04 	str.w	r3, [r1], #4
 8004b50:	d2e6      	bcs.n	8004b20 <quorem+0xa4>
 8004b52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5a:	b922      	cbnz	r2, 8004b66 <quorem+0xea>
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	429d      	cmp	r5, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	d30b      	bcc.n	8004b7c <quorem+0x100>
 8004b64:	613c      	str	r4, [r7, #16]
 8004b66:	3601      	adds	r6, #1
 8004b68:	4630      	mov	r0, r6
 8004b6a:	b003      	add	sp, #12
 8004b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	3b04      	subs	r3, #4
 8004b74:	2a00      	cmp	r2, #0
 8004b76:	d1cb      	bne.n	8004b10 <quorem+0x94>
 8004b78:	3c01      	subs	r4, #1
 8004b7a:	e7c6      	b.n	8004b0a <quorem+0x8e>
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	3b04      	subs	r3, #4
 8004b80:	2a00      	cmp	r2, #0
 8004b82:	d1ef      	bne.n	8004b64 <quorem+0xe8>
 8004b84:	3c01      	subs	r4, #1
 8004b86:	e7ea      	b.n	8004b5e <quorem+0xe2>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e7ee      	b.n	8004b6a <quorem+0xee>
 8004b8c:	0000      	movs	r0, r0
	...

08004b90 <_dtoa_r>:
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	4614      	mov	r4, r2
 8004b96:	461d      	mov	r5, r3
 8004b98:	69c7      	ldr	r7, [r0, #28]
 8004b9a:	b097      	sub	sp, #92	@ 0x5c
 8004b9c:	4683      	mov	fp, r0
 8004b9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004ba2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004ba4:	b97f      	cbnz	r7, 8004bc6 <_dtoa_r+0x36>
 8004ba6:	2010      	movs	r0, #16
 8004ba8:	f000 fe02 	bl	80057b0 <malloc>
 8004bac:	4602      	mov	r2, r0
 8004bae:	f8cb 001c 	str.w	r0, [fp, #28]
 8004bb2:	b920      	cbnz	r0, 8004bbe <_dtoa_r+0x2e>
 8004bb4:	21ef      	movs	r1, #239	@ 0xef
 8004bb6:	4ba8      	ldr	r3, [pc, #672]	@ (8004e58 <_dtoa_r+0x2c8>)
 8004bb8:	48a8      	ldr	r0, [pc, #672]	@ (8004e5c <_dtoa_r+0x2cc>)
 8004bba:	f002 fc23 	bl	8007404 <__assert_func>
 8004bbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004bc2:	6007      	str	r7, [r0, #0]
 8004bc4:	60c7      	str	r7, [r0, #12]
 8004bc6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004bca:	6819      	ldr	r1, [r3, #0]
 8004bcc:	b159      	cbz	r1, 8004be6 <_dtoa_r+0x56>
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4093      	lsls	r3, r2
 8004bd4:	604a      	str	r2, [r1, #4]
 8004bd6:	608b      	str	r3, [r1, #8]
 8004bd8:	4658      	mov	r0, fp
 8004bda:	f000 fedf 	bl	800599c <_Bfree>
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	1e2b      	subs	r3, r5, #0
 8004be8:	bfaf      	iteee	ge
 8004bea:	2300      	movge	r3, #0
 8004bec:	2201      	movlt	r2, #1
 8004bee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004bf2:	9303      	strlt	r3, [sp, #12]
 8004bf4:	bfa8      	it	ge
 8004bf6:	6033      	strge	r3, [r6, #0]
 8004bf8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004bfc:	4b98      	ldr	r3, [pc, #608]	@ (8004e60 <_dtoa_r+0x2d0>)
 8004bfe:	bfb8      	it	lt
 8004c00:	6032      	strlt	r2, [r6, #0]
 8004c02:	ea33 0308 	bics.w	r3, r3, r8
 8004c06:	d112      	bne.n	8004c2e <_dtoa_r+0x9e>
 8004c08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004c0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004c14:	4323      	orrs	r3, r4
 8004c16:	f000 8550 	beq.w	80056ba <_dtoa_r+0xb2a>
 8004c1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c1c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004e64 <_dtoa_r+0x2d4>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8552 	beq.w	80056ca <_dtoa_r+0xb3a>
 8004c26:	f10a 0303 	add.w	r3, sl, #3
 8004c2a:	f000 bd4c 	b.w	80056c6 <_dtoa_r+0xb36>
 8004c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f7fb feb3 	bl	80009a8 <__aeabi_dcmpeq>
 8004c42:	4607      	mov	r7, r0
 8004c44:	b158      	cbz	r0, 8004c5e <_dtoa_r+0xce>
 8004c46:	2301      	movs	r3, #1
 8004c48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c4e:	b113      	cbz	r3, 8004c56 <_dtoa_r+0xc6>
 8004c50:	4b85      	ldr	r3, [pc, #532]	@ (8004e68 <_dtoa_r+0x2d8>)
 8004c52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004e6c <_dtoa_r+0x2dc>
 8004c5a:	f000 bd36 	b.w	80056ca <_dtoa_r+0xb3a>
 8004c5e:	ab14      	add	r3, sp, #80	@ 0x50
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	ab15      	add	r3, sp, #84	@ 0x54
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4658      	mov	r0, fp
 8004c68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004c6c:	f001 fa30 	bl	80060d0 <__d2b>
 8004c70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004c74:	4681      	mov	r9, r0
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	d077      	beq.n	8004d6a <_dtoa_r+0x1da>
 8004c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004c8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004c90:	9712      	str	r7, [sp, #72]	@ 0x48
 8004c92:	4619      	mov	r1, r3
 8004c94:	2200      	movs	r2, #0
 8004c96:	4b76      	ldr	r3, [pc, #472]	@ (8004e70 <_dtoa_r+0x2e0>)
 8004c98:	f7fb fa66 	bl	8000168 <__aeabi_dsub>
 8004c9c:	a368      	add	r3, pc, #416	@ (adr r3, 8004e40 <_dtoa_r+0x2b0>)
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f7fb fc19 	bl	80004d8 <__aeabi_dmul>
 8004ca6:	a368      	add	r3, pc, #416	@ (adr r3, 8004e48 <_dtoa_r+0x2b8>)
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f7fb fa5e 	bl	800016c <__adddf3>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	f7fb fba5 	bl	8000404 <__aeabi_i2d>
 8004cba:	a365      	add	r3, pc, #404	@ (adr r3, 8004e50 <_dtoa_r+0x2c0>)
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f7fb fc0a 	bl	80004d8 <__aeabi_dmul>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4620      	mov	r0, r4
 8004cca:	4629      	mov	r1, r5
 8004ccc:	f7fb fa4e 	bl	800016c <__adddf3>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	460d      	mov	r5, r1
 8004cd4:	f7fb feb0 	bl	8000a38 <__aeabi_d2iz>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4607      	mov	r7, r0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fe6b 	bl	80009bc <__aeabi_dcmplt>
 8004ce6:	b140      	cbz	r0, 8004cfa <_dtoa_r+0x16a>
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7fb fb8b 	bl	8000404 <__aeabi_i2d>
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	f7fb fe59 	bl	80009a8 <__aeabi_dcmpeq>
 8004cf6:	b900      	cbnz	r0, 8004cfa <_dtoa_r+0x16a>
 8004cf8:	3f01      	subs	r7, #1
 8004cfa:	2f16      	cmp	r7, #22
 8004cfc:	d853      	bhi.n	8004da6 <_dtoa_r+0x216>
 8004cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d02:	4b5c      	ldr	r3, [pc, #368]	@ (8004e74 <_dtoa_r+0x2e4>)
 8004d04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f7fb fe56 	bl	80009bc <__aeabi_dcmplt>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d04a      	beq.n	8004daa <_dtoa_r+0x21a>
 8004d14:	2300      	movs	r3, #0
 8004d16:	3f01      	subs	r7, #1
 8004d18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d1c:	1b9b      	subs	r3, r3, r6
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	bf46      	itte	mi
 8004d22:	f1c3 0801 	rsbmi	r8, r3, #1
 8004d26:	2300      	movmi	r3, #0
 8004d28:	f04f 0800 	movpl.w	r8, #0
 8004d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d2e:	bf48      	it	mi
 8004d30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004d32:	2f00      	cmp	r7, #0
 8004d34:	db3b      	blt.n	8004dae <_dtoa_r+0x21e>
 8004d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d38:	970e      	str	r7, [sp, #56]	@ 0x38
 8004d3a:	443b      	add	r3, r7
 8004d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d3e:	2300      	movs	r3, #0
 8004d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d44:	2b09      	cmp	r3, #9
 8004d46:	d866      	bhi.n	8004e16 <_dtoa_r+0x286>
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	bfc4      	itt	gt
 8004d4c:	3b04      	subgt	r3, #4
 8004d4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004d50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d52:	bfc8      	it	gt
 8004d54:	2400      	movgt	r4, #0
 8004d56:	f1a3 0302 	sub.w	r3, r3, #2
 8004d5a:	bfd8      	it	le
 8004d5c:	2401      	movle	r4, #1
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d864      	bhi.n	8004e2c <_dtoa_r+0x29c>
 8004d62:	e8df f003 	tbb	[pc, r3]
 8004d66:	382b      	.short	0x382b
 8004d68:	5636      	.short	0x5636
 8004d6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004d6e:	441e      	add	r6, r3
 8004d70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	bfc1      	itttt	gt
 8004d78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004d7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004d80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004d84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004d88:	bfd6      	itet	le
 8004d8a:	f1c3 0320 	rsble	r3, r3, #32
 8004d8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d92:	fa04 f003 	lslle.w	r0, r4, r3
 8004d96:	f7fb fb25 	bl	80003e4 <__aeabi_ui2d>
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004da0:	3e01      	subs	r6, #1
 8004da2:	9212      	str	r2, [sp, #72]	@ 0x48
 8004da4:	e775      	b.n	8004c92 <_dtoa_r+0x102>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e7b6      	b.n	8004d18 <_dtoa_r+0x188>
 8004daa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004dac:	e7b5      	b.n	8004d1a <_dtoa_r+0x18a>
 8004dae:	427b      	negs	r3, r7
 8004db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004db2:	2300      	movs	r3, #0
 8004db4:	eba8 0807 	sub.w	r8, r8, r7
 8004db8:	930e      	str	r3, [sp, #56]	@ 0x38
 8004dba:	e7c2      	b.n	8004d42 <_dtoa_r+0x1b2>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004dc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	dc35      	bgt.n	8004e32 <_dtoa_r+0x2a2>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	461a      	mov	r2, r3
 8004dca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004dce:	9221      	str	r2, [sp, #132]	@ 0x84
 8004dd0:	e00b      	b.n	8004dea <_dtoa_r+0x25a>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e7f3      	b.n	8004dbe <_dtoa_r+0x22e>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004dda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	9308      	str	r3, [sp, #32]
 8004de0:	3301      	adds	r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	9307      	str	r3, [sp, #28]
 8004de6:	bfb8      	it	lt
 8004de8:	2301      	movlt	r3, #1
 8004dea:	2100      	movs	r1, #0
 8004dec:	2204      	movs	r2, #4
 8004dee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004df2:	f102 0514 	add.w	r5, r2, #20
 8004df6:	429d      	cmp	r5, r3
 8004df8:	d91f      	bls.n	8004e3a <_dtoa_r+0x2aa>
 8004dfa:	6041      	str	r1, [r0, #4]
 8004dfc:	4658      	mov	r0, fp
 8004dfe:	f000 fd8d 	bl	800591c <_Balloc>
 8004e02:	4682      	mov	sl, r0
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d139      	bne.n	8004e7c <_dtoa_r+0x2ec>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <_dtoa_r+0x2e8>)
 8004e10:	e6d2      	b.n	8004bb8 <_dtoa_r+0x28>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e7e0      	b.n	8004dd8 <_dtoa_r+0x248>
 8004e16:	2401      	movs	r4, #1
 8004e18:	2300      	movs	r3, #0
 8004e1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004e1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	2200      	movs	r2, #0
 8004e24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e28:	2312      	movs	r3, #18
 8004e2a:	e7d0      	b.n	8004dce <_dtoa_r+0x23e>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e30:	e7f5      	b.n	8004e1e <_dtoa_r+0x28e>
 8004e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e38:	e7d7      	b.n	8004dea <_dtoa_r+0x25a>
 8004e3a:	3101      	adds	r1, #1
 8004e3c:	0052      	lsls	r2, r2, #1
 8004e3e:	e7d8      	b.n	8004df2 <_dtoa_r+0x262>
 8004e40:	636f4361 	.word	0x636f4361
 8004e44:	3fd287a7 	.word	0x3fd287a7
 8004e48:	8b60c8b3 	.word	0x8b60c8b3
 8004e4c:	3fc68a28 	.word	0x3fc68a28
 8004e50:	509f79fb 	.word	0x509f79fb
 8004e54:	3fd34413 	.word	0x3fd34413
 8004e58:	0800819c 	.word	0x0800819c
 8004e5c:	080081b3 	.word	0x080081b3
 8004e60:	7ff00000 	.word	0x7ff00000
 8004e64:	08008198 	.word	0x08008198
 8004e68:	08008167 	.word	0x08008167
 8004e6c:	08008166 	.word	0x08008166
 8004e70:	3ff80000 	.word	0x3ff80000
 8004e74:	080082b0 	.word	0x080082b0
 8004e78:	0800820b 	.word	0x0800820b
 8004e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e80:	6018      	str	r0, [r3, #0]
 8004e82:	9b07      	ldr	r3, [sp, #28]
 8004e84:	2b0e      	cmp	r3, #14
 8004e86:	f200 80a4 	bhi.w	8004fd2 <_dtoa_r+0x442>
 8004e8a:	2c00      	cmp	r4, #0
 8004e8c:	f000 80a1 	beq.w	8004fd2 <_dtoa_r+0x442>
 8004e90:	2f00      	cmp	r7, #0
 8004e92:	dd33      	ble.n	8004efc <_dtoa_r+0x36c>
 8004e94:	4b86      	ldr	r3, [pc, #536]	@ (80050b0 <_dtoa_r+0x520>)
 8004e96:	f007 020f 	and.w	r2, r7, #15
 8004e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e9e:	05f8      	lsls	r0, r7, #23
 8004ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ea4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ea8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004eac:	d516      	bpl.n	8004edc <_dtoa_r+0x34c>
 8004eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004eb2:	4b80      	ldr	r3, [pc, #512]	@ (80050b4 <_dtoa_r+0x524>)
 8004eb4:	2603      	movs	r6, #3
 8004eb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eba:	f7fb fc37 	bl	800072c <__aeabi_ddiv>
 8004ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec2:	f004 040f 	and.w	r4, r4, #15
 8004ec6:	4d7b      	ldr	r5, [pc, #492]	@ (80050b4 <_dtoa_r+0x524>)
 8004ec8:	b954      	cbnz	r4, 8004ee0 <_dtoa_r+0x350>
 8004eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ed2:	f7fb fc2b 	bl	800072c <__aeabi_ddiv>
 8004ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eda:	e028      	b.n	8004f2e <_dtoa_r+0x39e>
 8004edc:	2602      	movs	r6, #2
 8004ede:	e7f2      	b.n	8004ec6 <_dtoa_r+0x336>
 8004ee0:	07e1      	lsls	r1, r4, #31
 8004ee2:	d508      	bpl.n	8004ef6 <_dtoa_r+0x366>
 8004ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004eec:	f7fb faf4 	bl	80004d8 <__aeabi_dmul>
 8004ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ef4:	3601      	adds	r6, #1
 8004ef6:	1064      	asrs	r4, r4, #1
 8004ef8:	3508      	adds	r5, #8
 8004efa:	e7e5      	b.n	8004ec8 <_dtoa_r+0x338>
 8004efc:	f000 80d2 	beq.w	80050a4 <_dtoa_r+0x514>
 8004f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f04:	427c      	negs	r4, r7
 8004f06:	4b6a      	ldr	r3, [pc, #424]	@ (80050b0 <_dtoa_r+0x520>)
 8004f08:	f004 020f 	and.w	r2, r4, #15
 8004f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb fae0 	bl	80004d8 <__aeabi_dmul>
 8004f18:	2602      	movs	r6, #2
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f20:	4d64      	ldr	r5, [pc, #400]	@ (80050b4 <_dtoa_r+0x524>)
 8004f22:	1124      	asrs	r4, r4, #4
 8004f24:	2c00      	cmp	r4, #0
 8004f26:	f040 80b2 	bne.w	800508e <_dtoa_r+0x4fe>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1d3      	bne.n	8004ed6 <_dtoa_r+0x346>
 8004f2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80b7 	beq.w	80050a8 <_dtoa_r+0x518>
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	4629      	mov	r1, r5
 8004f40:	4b5d      	ldr	r3, [pc, #372]	@ (80050b8 <_dtoa_r+0x528>)
 8004f42:	f7fb fd3b 	bl	80009bc <__aeabi_dcmplt>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f000 80ae 	beq.w	80050a8 <_dtoa_r+0x518>
 8004f4c:	9b07      	ldr	r3, [sp, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80aa 	beq.w	80050a8 <_dtoa_r+0x518>
 8004f54:	9b08      	ldr	r3, [sp, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd37      	ble.n	8004fca <_dtoa_r+0x43a>
 8004f5a:	1e7b      	subs	r3, r7, #1
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	9304      	str	r3, [sp, #16]
 8004f60:	2200      	movs	r2, #0
 8004f62:	4629      	mov	r1, r5
 8004f64:	4b55      	ldr	r3, [pc, #340]	@ (80050bc <_dtoa_r+0x52c>)
 8004f66:	f7fb fab7 	bl	80004d8 <__aeabi_dmul>
 8004f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f6e:	9c08      	ldr	r4, [sp, #32]
 8004f70:	3601      	adds	r6, #1
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7fb fa46 	bl	8000404 <__aeabi_i2d>
 8004f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f7c:	f7fb faac 	bl	80004d8 <__aeabi_dmul>
 8004f80:	2200      	movs	r2, #0
 8004f82:	4b4f      	ldr	r3, [pc, #316]	@ (80050c0 <_dtoa_r+0x530>)
 8004f84:	f7fb f8f2 	bl	800016c <__adddf3>
 8004f88:	4605      	mov	r5, r0
 8004f8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004f8e:	2c00      	cmp	r4, #0
 8004f90:	f040 809a 	bne.w	80050c8 <_dtoa_r+0x538>
 8004f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80050c4 <_dtoa_r+0x534>)
 8004f9c:	f7fb f8e4 	bl	8000168 <__aeabi_dsub>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4633      	mov	r3, r6
 8004fac:	f7fb fd24 	bl	80009f8 <__aeabi_dcmpgt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 828e 	bne.w	80054d2 <_dtoa_r+0x942>
 8004fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fba:	462a      	mov	r2, r5
 8004fbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004fc0:	f7fb fcfc 	bl	80009bc <__aeabi_dcmplt>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f040 8127 	bne.w	8005218 <_dtoa_r+0x688>
 8004fca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004fd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f2c0 8163 	blt.w	80052a0 <_dtoa_r+0x710>
 8004fda:	2f0e      	cmp	r7, #14
 8004fdc:	f300 8160 	bgt.w	80052a0 <_dtoa_r+0x710>
 8004fe0:	4b33      	ldr	r3, [pc, #204]	@ (80050b0 <_dtoa_r+0x520>)
 8004fe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	da03      	bge.n	8004ffc <_dtoa_r+0x46c>
 8004ff4:	9b07      	ldr	r3, [sp, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f340 8100 	ble.w	80051fc <_dtoa_r+0x66c>
 8004ffc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005000:	4656      	mov	r6, sl
 8005002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005006:	4620      	mov	r0, r4
 8005008:	4629      	mov	r1, r5
 800500a:	f7fb fb8f 	bl	800072c <__aeabi_ddiv>
 800500e:	f7fb fd13 	bl	8000a38 <__aeabi_d2iz>
 8005012:	4680      	mov	r8, r0
 8005014:	f7fb f9f6 	bl	8000404 <__aeabi_i2d>
 8005018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800501c:	f7fb fa5c 	bl	80004d8 <__aeabi_dmul>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4620      	mov	r0, r4
 8005026:	4629      	mov	r1, r5
 8005028:	f7fb f89e 	bl	8000168 <__aeabi_dsub>
 800502c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005030:	9d07      	ldr	r5, [sp, #28]
 8005032:	f806 4b01 	strb.w	r4, [r6], #1
 8005036:	eba6 040a 	sub.w	r4, r6, sl
 800503a:	42a5      	cmp	r5, r4
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	f040 8116 	bne.w	8005270 <_dtoa_r+0x6e0>
 8005044:	f7fb f892 	bl	800016c <__adddf3>
 8005048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800504c:	4604      	mov	r4, r0
 800504e:	460d      	mov	r5, r1
 8005050:	f7fb fcd2 	bl	80009f8 <__aeabi_dcmpgt>
 8005054:	2800      	cmp	r0, #0
 8005056:	f040 80f8 	bne.w	800524a <_dtoa_r+0x6ba>
 800505a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f7fb fca1 	bl	80009a8 <__aeabi_dcmpeq>
 8005066:	b118      	cbz	r0, 8005070 <_dtoa_r+0x4e0>
 8005068:	f018 0f01 	tst.w	r8, #1
 800506c:	f040 80ed 	bne.w	800524a <_dtoa_r+0x6ba>
 8005070:	4649      	mov	r1, r9
 8005072:	4658      	mov	r0, fp
 8005074:	f000 fc92 	bl	800599c <_Bfree>
 8005078:	2300      	movs	r3, #0
 800507a:	7033      	strb	r3, [r6, #0]
 800507c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800507e:	3701      	adds	r7, #1
 8005080:	601f      	str	r7, [r3, #0]
 8005082:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8320 	beq.w	80056ca <_dtoa_r+0xb3a>
 800508a:	601e      	str	r6, [r3, #0]
 800508c:	e31d      	b.n	80056ca <_dtoa_r+0xb3a>
 800508e:	07e2      	lsls	r2, r4, #31
 8005090:	d505      	bpl.n	800509e <_dtoa_r+0x50e>
 8005092:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005096:	f7fb fa1f 	bl	80004d8 <__aeabi_dmul>
 800509a:	2301      	movs	r3, #1
 800509c:	3601      	adds	r6, #1
 800509e:	1064      	asrs	r4, r4, #1
 80050a0:	3508      	adds	r5, #8
 80050a2:	e73f      	b.n	8004f24 <_dtoa_r+0x394>
 80050a4:	2602      	movs	r6, #2
 80050a6:	e742      	b.n	8004f2e <_dtoa_r+0x39e>
 80050a8:	9c07      	ldr	r4, [sp, #28]
 80050aa:	9704      	str	r7, [sp, #16]
 80050ac:	e761      	b.n	8004f72 <_dtoa_r+0x3e2>
 80050ae:	bf00      	nop
 80050b0:	080082b0 	.word	0x080082b0
 80050b4:	08008288 	.word	0x08008288
 80050b8:	3ff00000 	.word	0x3ff00000
 80050bc:	40240000 	.word	0x40240000
 80050c0:	401c0000 	.word	0x401c0000
 80050c4:	40140000 	.word	0x40140000
 80050c8:	4b70      	ldr	r3, [pc, #448]	@ (800528c <_dtoa_r+0x6fc>)
 80050ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050d4:	4454      	add	r4, sl
 80050d6:	2900      	cmp	r1, #0
 80050d8:	d045      	beq.n	8005166 <_dtoa_r+0x5d6>
 80050da:	2000      	movs	r0, #0
 80050dc:	496c      	ldr	r1, [pc, #432]	@ (8005290 <_dtoa_r+0x700>)
 80050de:	f7fb fb25 	bl	800072c <__aeabi_ddiv>
 80050e2:	4633      	mov	r3, r6
 80050e4:	462a      	mov	r2, r5
 80050e6:	f7fb f83f 	bl	8000168 <__aeabi_dsub>
 80050ea:	4656      	mov	r6, sl
 80050ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050f4:	f7fb fca0 	bl	8000a38 <__aeabi_d2iz>
 80050f8:	4605      	mov	r5, r0
 80050fa:	f7fb f983 	bl	8000404 <__aeabi_i2d>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005106:	f7fb f82f 	bl	8000168 <__aeabi_dsub>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	3530      	adds	r5, #48	@ 0x30
 8005110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005114:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005118:	f806 5b01 	strb.w	r5, [r6], #1
 800511c:	f7fb fc4e 	bl	80009bc <__aeabi_dcmplt>
 8005120:	2800      	cmp	r0, #0
 8005122:	d163      	bne.n	80051ec <_dtoa_r+0x65c>
 8005124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005128:	2000      	movs	r0, #0
 800512a:	495a      	ldr	r1, [pc, #360]	@ (8005294 <_dtoa_r+0x704>)
 800512c:	f7fb f81c 	bl	8000168 <__aeabi_dsub>
 8005130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005134:	f7fb fc42 	bl	80009bc <__aeabi_dcmplt>
 8005138:	2800      	cmp	r0, #0
 800513a:	f040 8087 	bne.w	800524c <_dtoa_r+0x6bc>
 800513e:	42a6      	cmp	r6, r4
 8005140:	f43f af43 	beq.w	8004fca <_dtoa_r+0x43a>
 8005144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005148:	2200      	movs	r2, #0
 800514a:	4b53      	ldr	r3, [pc, #332]	@ (8005298 <_dtoa_r+0x708>)
 800514c:	f7fb f9c4 	bl	80004d8 <__aeabi_dmul>
 8005150:	2200      	movs	r2, #0
 8005152:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800515a:	4b4f      	ldr	r3, [pc, #316]	@ (8005298 <_dtoa_r+0x708>)
 800515c:	f7fb f9bc 	bl	80004d8 <__aeabi_dmul>
 8005160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005164:	e7c4      	b.n	80050f0 <_dtoa_r+0x560>
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	f7fb f9b5 	bl	80004d8 <__aeabi_dmul>
 800516e:	4656      	mov	r6, sl
 8005170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005174:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800517a:	f7fb fc5d 	bl	8000a38 <__aeabi_d2iz>
 800517e:	4605      	mov	r5, r0
 8005180:	f7fb f940 	bl	8000404 <__aeabi_i2d>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800518c:	f7fa ffec 	bl	8000168 <__aeabi_dsub>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	3530      	adds	r5, #48	@ 0x30
 8005196:	f806 5b01 	strb.w	r5, [r6], #1
 800519a:	42a6      	cmp	r6, r4
 800519c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	d124      	bne.n	80051f0 <_dtoa_r+0x660>
 80051a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80051aa:	4b39      	ldr	r3, [pc, #228]	@ (8005290 <_dtoa_r+0x700>)
 80051ac:	f7fa ffde 	bl	800016c <__adddf3>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b8:	f7fb fc1e 	bl	80009f8 <__aeabi_dcmpgt>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d145      	bne.n	800524c <_dtoa_r+0x6bc>
 80051c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051c4:	2000      	movs	r0, #0
 80051c6:	4932      	ldr	r1, [pc, #200]	@ (8005290 <_dtoa_r+0x700>)
 80051c8:	f7fa ffce 	bl	8000168 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051d4:	f7fb fbf2 	bl	80009bc <__aeabi_dcmplt>
 80051d8:	2800      	cmp	r0, #0
 80051da:	f43f aef6 	beq.w	8004fca <_dtoa_r+0x43a>
 80051de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80051e0:	1e73      	subs	r3, r6, #1
 80051e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80051e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80051e8:	2b30      	cmp	r3, #48	@ 0x30
 80051ea:	d0f8      	beq.n	80051de <_dtoa_r+0x64e>
 80051ec:	9f04      	ldr	r7, [sp, #16]
 80051ee:	e73f      	b.n	8005070 <_dtoa_r+0x4e0>
 80051f0:	4b29      	ldr	r3, [pc, #164]	@ (8005298 <_dtoa_r+0x708>)
 80051f2:	f7fb f971 	bl	80004d8 <__aeabi_dmul>
 80051f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051fa:	e7bc      	b.n	8005176 <_dtoa_r+0x5e6>
 80051fc:	d10c      	bne.n	8005218 <_dtoa_r+0x688>
 80051fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005202:	2200      	movs	r2, #0
 8005204:	4b25      	ldr	r3, [pc, #148]	@ (800529c <_dtoa_r+0x70c>)
 8005206:	f7fb f967 	bl	80004d8 <__aeabi_dmul>
 800520a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800520e:	f7fb fbe9 	bl	80009e4 <__aeabi_dcmpge>
 8005212:	2800      	cmp	r0, #0
 8005214:	f000 815b 	beq.w	80054ce <_dtoa_r+0x93e>
 8005218:	2400      	movs	r4, #0
 800521a:	4625      	mov	r5, r4
 800521c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800521e:	4656      	mov	r6, sl
 8005220:	43db      	mvns	r3, r3
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	2700      	movs	r7, #0
 8005226:	4621      	mov	r1, r4
 8005228:	4658      	mov	r0, fp
 800522a:	f000 fbb7 	bl	800599c <_Bfree>
 800522e:	2d00      	cmp	r5, #0
 8005230:	d0dc      	beq.n	80051ec <_dtoa_r+0x65c>
 8005232:	b12f      	cbz	r7, 8005240 <_dtoa_r+0x6b0>
 8005234:	42af      	cmp	r7, r5
 8005236:	d003      	beq.n	8005240 <_dtoa_r+0x6b0>
 8005238:	4639      	mov	r1, r7
 800523a:	4658      	mov	r0, fp
 800523c:	f000 fbae 	bl	800599c <_Bfree>
 8005240:	4629      	mov	r1, r5
 8005242:	4658      	mov	r0, fp
 8005244:	f000 fbaa 	bl	800599c <_Bfree>
 8005248:	e7d0      	b.n	80051ec <_dtoa_r+0x65c>
 800524a:	9704      	str	r7, [sp, #16]
 800524c:	4633      	mov	r3, r6
 800524e:	461e      	mov	r6, r3
 8005250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005254:	2a39      	cmp	r2, #57	@ 0x39
 8005256:	d107      	bne.n	8005268 <_dtoa_r+0x6d8>
 8005258:	459a      	cmp	sl, r3
 800525a:	d1f8      	bne.n	800524e <_dtoa_r+0x6be>
 800525c:	9a04      	ldr	r2, [sp, #16]
 800525e:	3201      	adds	r2, #1
 8005260:	9204      	str	r2, [sp, #16]
 8005262:	2230      	movs	r2, #48	@ 0x30
 8005264:	f88a 2000 	strb.w	r2, [sl]
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	3201      	adds	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e7bd      	b.n	80051ec <_dtoa_r+0x65c>
 8005270:	2200      	movs	r2, #0
 8005272:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <_dtoa_r+0x708>)
 8005274:	f7fb f930 	bl	80004d8 <__aeabi_dmul>
 8005278:	2200      	movs	r2, #0
 800527a:	2300      	movs	r3, #0
 800527c:	4604      	mov	r4, r0
 800527e:	460d      	mov	r5, r1
 8005280:	f7fb fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8005284:	2800      	cmp	r0, #0
 8005286:	f43f aebc 	beq.w	8005002 <_dtoa_r+0x472>
 800528a:	e6f1      	b.n	8005070 <_dtoa_r+0x4e0>
 800528c:	080082b0 	.word	0x080082b0
 8005290:	3fe00000 	.word	0x3fe00000
 8005294:	3ff00000 	.word	0x3ff00000
 8005298:	40240000 	.word	0x40240000
 800529c:	40140000 	.word	0x40140000
 80052a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	f000 80db 	beq.w	800545e <_dtoa_r+0x8ce>
 80052a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80052aa:	2a01      	cmp	r2, #1
 80052ac:	f300 80bf 	bgt.w	800542e <_dtoa_r+0x89e>
 80052b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80052b2:	2a00      	cmp	r2, #0
 80052b4:	f000 80b7 	beq.w	8005426 <_dtoa_r+0x896>
 80052b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80052bc:	4646      	mov	r6, r8
 80052be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80052c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052c2:	2101      	movs	r1, #1
 80052c4:	441a      	add	r2, r3
 80052c6:	4658      	mov	r0, fp
 80052c8:	4498      	add	r8, r3
 80052ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80052cc:	f000 fc64 	bl	8005b98 <__i2b>
 80052d0:	4605      	mov	r5, r0
 80052d2:	b15e      	cbz	r6, 80052ec <_dtoa_r+0x75c>
 80052d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	dd08      	ble.n	80052ec <_dtoa_r+0x75c>
 80052da:	42b3      	cmp	r3, r6
 80052dc:	bfa8      	it	ge
 80052de:	4633      	movge	r3, r6
 80052e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052e2:	eba8 0803 	sub.w	r8, r8, r3
 80052e6:	1af6      	subs	r6, r6, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052ee:	b1f3      	cbz	r3, 800532e <_dtoa_r+0x79e>
 80052f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80b7 	beq.w	8005466 <_dtoa_r+0x8d6>
 80052f8:	b18c      	cbz	r4, 800531e <_dtoa_r+0x78e>
 80052fa:	4629      	mov	r1, r5
 80052fc:	4622      	mov	r2, r4
 80052fe:	4658      	mov	r0, fp
 8005300:	f000 fd08 	bl	8005d14 <__pow5mult>
 8005304:	464a      	mov	r2, r9
 8005306:	4601      	mov	r1, r0
 8005308:	4605      	mov	r5, r0
 800530a:	4658      	mov	r0, fp
 800530c:	f000 fc5a 	bl	8005bc4 <__multiply>
 8005310:	4649      	mov	r1, r9
 8005312:	9004      	str	r0, [sp, #16]
 8005314:	4658      	mov	r0, fp
 8005316:	f000 fb41 	bl	800599c <_Bfree>
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	4699      	mov	r9, r3
 800531e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005320:	1b1a      	subs	r2, r3, r4
 8005322:	d004      	beq.n	800532e <_dtoa_r+0x79e>
 8005324:	4649      	mov	r1, r9
 8005326:	4658      	mov	r0, fp
 8005328:	f000 fcf4 	bl	8005d14 <__pow5mult>
 800532c:	4681      	mov	r9, r0
 800532e:	2101      	movs	r1, #1
 8005330:	4658      	mov	r0, fp
 8005332:	f000 fc31 	bl	8005b98 <__i2b>
 8005336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005338:	4604      	mov	r4, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 81c9 	beq.w	80056d2 <_dtoa_r+0xb42>
 8005340:	461a      	mov	r2, r3
 8005342:	4601      	mov	r1, r0
 8005344:	4658      	mov	r0, fp
 8005346:	f000 fce5 	bl	8005d14 <__pow5mult>
 800534a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800534c:	4604      	mov	r4, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	f300 808f 	bgt.w	8005472 <_dtoa_r+0x8e2>
 8005354:	9b02      	ldr	r3, [sp, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 8087 	bne.w	800546a <_dtoa_r+0x8da>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 8083 	bne.w	800546e <_dtoa_r+0x8de>
 8005368:	9b03      	ldr	r3, [sp, #12]
 800536a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800536e:	0d1b      	lsrs	r3, r3, #20
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	b12b      	cbz	r3, 8005380 <_dtoa_r+0x7f0>
 8005374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005376:	f108 0801 	add.w	r8, r8, #1
 800537a:	3301      	adds	r3, #1
 800537c:	9309      	str	r3, [sp, #36]	@ 0x24
 800537e:	2301      	movs	r3, #1
 8005380:	930a      	str	r3, [sp, #40]	@ 0x28
 8005382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 81aa 	beq.w	80056de <_dtoa_r+0xb4e>
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005390:	6918      	ldr	r0, [r3, #16]
 8005392:	f000 fbb5 	bl	8005b00 <__hi0bits>
 8005396:	f1c0 0020 	rsb	r0, r0, #32
 800539a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800539c:	4418      	add	r0, r3
 800539e:	f010 001f 	ands.w	r0, r0, #31
 80053a2:	d071      	beq.n	8005488 <_dtoa_r+0x8f8>
 80053a4:	f1c0 0320 	rsb	r3, r0, #32
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	dd65      	ble.n	8005478 <_dtoa_r+0x8e8>
 80053ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ae:	f1c0 001c 	rsb	r0, r0, #28
 80053b2:	4403      	add	r3, r0
 80053b4:	4480      	add	r8, r0
 80053b6:	4406      	add	r6, r0
 80053b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ba:	f1b8 0f00 	cmp.w	r8, #0
 80053be:	dd05      	ble.n	80053cc <_dtoa_r+0x83c>
 80053c0:	4649      	mov	r1, r9
 80053c2:	4642      	mov	r2, r8
 80053c4:	4658      	mov	r0, fp
 80053c6:	f000 fcff 	bl	8005dc8 <__lshift>
 80053ca:	4681      	mov	r9, r0
 80053cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd05      	ble.n	80053de <_dtoa_r+0x84e>
 80053d2:	4621      	mov	r1, r4
 80053d4:	461a      	mov	r2, r3
 80053d6:	4658      	mov	r0, fp
 80053d8:	f000 fcf6 	bl	8005dc8 <__lshift>
 80053dc:	4604      	mov	r4, r0
 80053de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d053      	beq.n	800548c <_dtoa_r+0x8fc>
 80053e4:	4621      	mov	r1, r4
 80053e6:	4648      	mov	r0, r9
 80053e8:	f000 fd5a 	bl	8005ea0 <__mcmp>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	da4d      	bge.n	800548c <_dtoa_r+0x8fc>
 80053f0:	1e7b      	subs	r3, r7, #1
 80053f2:	4649      	mov	r1, r9
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	220a      	movs	r2, #10
 80053f8:	2300      	movs	r3, #0
 80053fa:	4658      	mov	r0, fp
 80053fc:	f000 faf0 	bl	80059e0 <__multadd>
 8005400:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005402:	4681      	mov	r9, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 816c 	beq.w	80056e2 <_dtoa_r+0xb52>
 800540a:	2300      	movs	r3, #0
 800540c:	4629      	mov	r1, r5
 800540e:	220a      	movs	r2, #10
 8005410:	4658      	mov	r0, fp
 8005412:	f000 fae5 	bl	80059e0 <__multadd>
 8005416:	9b08      	ldr	r3, [sp, #32]
 8005418:	4605      	mov	r5, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	dc61      	bgt.n	80054e2 <_dtoa_r+0x952>
 800541e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005420:	2b02      	cmp	r3, #2
 8005422:	dc3b      	bgt.n	800549c <_dtoa_r+0x90c>
 8005424:	e05d      	b.n	80054e2 <_dtoa_r+0x952>
 8005426:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005428:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800542c:	e746      	b.n	80052bc <_dtoa_r+0x72c>
 800542e:	9b07      	ldr	r3, [sp, #28]
 8005430:	1e5c      	subs	r4, r3, #1
 8005432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005434:	42a3      	cmp	r3, r4
 8005436:	bfbf      	itttt	lt
 8005438:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800543a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800543c:	1ae3      	sublt	r3, r4, r3
 800543e:	18d2      	addlt	r2, r2, r3
 8005440:	bfa8      	it	ge
 8005442:	1b1c      	subge	r4, r3, r4
 8005444:	9b07      	ldr	r3, [sp, #28]
 8005446:	bfbe      	ittt	lt
 8005448:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800544a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800544c:	2400      	movlt	r4, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfb5      	itete	lt
 8005452:	eba8 0603 	sublt.w	r6, r8, r3
 8005456:	4646      	movge	r6, r8
 8005458:	2300      	movlt	r3, #0
 800545a:	9b07      	ldrge	r3, [sp, #28]
 800545c:	e730      	b.n	80052c0 <_dtoa_r+0x730>
 800545e:	4646      	mov	r6, r8
 8005460:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005462:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005464:	e735      	b.n	80052d2 <_dtoa_r+0x742>
 8005466:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005468:	e75c      	b.n	8005324 <_dtoa_r+0x794>
 800546a:	2300      	movs	r3, #0
 800546c:	e788      	b.n	8005380 <_dtoa_r+0x7f0>
 800546e:	9b02      	ldr	r3, [sp, #8]
 8005470:	e786      	b.n	8005380 <_dtoa_r+0x7f0>
 8005472:	2300      	movs	r3, #0
 8005474:	930a      	str	r3, [sp, #40]	@ 0x28
 8005476:	e788      	b.n	800538a <_dtoa_r+0x7fa>
 8005478:	d09f      	beq.n	80053ba <_dtoa_r+0x82a>
 800547a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800547c:	331c      	adds	r3, #28
 800547e:	441a      	add	r2, r3
 8005480:	4498      	add	r8, r3
 8005482:	441e      	add	r6, r3
 8005484:	9209      	str	r2, [sp, #36]	@ 0x24
 8005486:	e798      	b.n	80053ba <_dtoa_r+0x82a>
 8005488:	4603      	mov	r3, r0
 800548a:	e7f6      	b.n	800547a <_dtoa_r+0x8ea>
 800548c:	9b07      	ldr	r3, [sp, #28]
 800548e:	9704      	str	r7, [sp, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	dc20      	bgt.n	80054d6 <_dtoa_r+0x946>
 8005494:	9308      	str	r3, [sp, #32]
 8005496:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005498:	2b02      	cmp	r3, #2
 800549a:	dd1e      	ble.n	80054da <_dtoa_r+0x94a>
 800549c:	9b08      	ldr	r3, [sp, #32]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f47f aebc 	bne.w	800521c <_dtoa_r+0x68c>
 80054a4:	4621      	mov	r1, r4
 80054a6:	2205      	movs	r2, #5
 80054a8:	4658      	mov	r0, fp
 80054aa:	f000 fa99 	bl	80059e0 <__multadd>
 80054ae:	4601      	mov	r1, r0
 80054b0:	4604      	mov	r4, r0
 80054b2:	4648      	mov	r0, r9
 80054b4:	f000 fcf4 	bl	8005ea0 <__mcmp>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f77f aeaf 	ble.w	800521c <_dtoa_r+0x68c>
 80054be:	2331      	movs	r3, #49	@ 0x31
 80054c0:	4656      	mov	r6, sl
 80054c2:	f806 3b01 	strb.w	r3, [r6], #1
 80054c6:	9b04      	ldr	r3, [sp, #16]
 80054c8:	3301      	adds	r3, #1
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	e6aa      	b.n	8005224 <_dtoa_r+0x694>
 80054ce:	9c07      	ldr	r4, [sp, #28]
 80054d0:	9704      	str	r7, [sp, #16]
 80054d2:	4625      	mov	r5, r4
 80054d4:	e7f3      	b.n	80054be <_dtoa_r+0x92e>
 80054d6:	9b07      	ldr	r3, [sp, #28]
 80054d8:	9308      	str	r3, [sp, #32]
 80054da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8104 	beq.w	80056ea <_dtoa_r+0xb5a>
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	dd05      	ble.n	80054f2 <_dtoa_r+0x962>
 80054e6:	4629      	mov	r1, r5
 80054e8:	4632      	mov	r2, r6
 80054ea:	4658      	mov	r0, fp
 80054ec:	f000 fc6c 	bl	8005dc8 <__lshift>
 80054f0:	4605      	mov	r5, r0
 80054f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d05a      	beq.n	80055ae <_dtoa_r+0xa1e>
 80054f8:	4658      	mov	r0, fp
 80054fa:	6869      	ldr	r1, [r5, #4]
 80054fc:	f000 fa0e 	bl	800591c <_Balloc>
 8005500:	4606      	mov	r6, r0
 8005502:	b928      	cbnz	r0, 8005510 <_dtoa_r+0x980>
 8005504:	4602      	mov	r2, r0
 8005506:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800550a:	4b83      	ldr	r3, [pc, #524]	@ (8005718 <_dtoa_r+0xb88>)
 800550c:	f7ff bb54 	b.w	8004bb8 <_dtoa_r+0x28>
 8005510:	692a      	ldr	r2, [r5, #16]
 8005512:	f105 010c 	add.w	r1, r5, #12
 8005516:	3202      	adds	r2, #2
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	300c      	adds	r0, #12
 800551c:	f001 ff5e 	bl	80073dc <memcpy>
 8005520:	2201      	movs	r2, #1
 8005522:	4631      	mov	r1, r6
 8005524:	4658      	mov	r0, fp
 8005526:	f000 fc4f 	bl	8005dc8 <__lshift>
 800552a:	462f      	mov	r7, r5
 800552c:	4605      	mov	r5, r0
 800552e:	f10a 0301 	add.w	r3, sl, #1
 8005532:	9307      	str	r3, [sp, #28]
 8005534:	9b08      	ldr	r3, [sp, #32]
 8005536:	4453      	add	r3, sl
 8005538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800553a:	9b02      	ldr	r3, [sp, #8]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	930a      	str	r3, [sp, #40]	@ 0x28
 8005542:	9b07      	ldr	r3, [sp, #28]
 8005544:	4621      	mov	r1, r4
 8005546:	3b01      	subs	r3, #1
 8005548:	4648      	mov	r0, r9
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	f7ff fa96 	bl	8004a7c <quorem>
 8005550:	4639      	mov	r1, r7
 8005552:	9008      	str	r0, [sp, #32]
 8005554:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005558:	4648      	mov	r0, r9
 800555a:	f000 fca1 	bl	8005ea0 <__mcmp>
 800555e:	462a      	mov	r2, r5
 8005560:	9009      	str	r0, [sp, #36]	@ 0x24
 8005562:	4621      	mov	r1, r4
 8005564:	4658      	mov	r0, fp
 8005566:	f000 fcb7 	bl	8005ed8 <__mdiff>
 800556a:	68c2      	ldr	r2, [r0, #12]
 800556c:	4606      	mov	r6, r0
 800556e:	bb02      	cbnz	r2, 80055b2 <_dtoa_r+0xa22>
 8005570:	4601      	mov	r1, r0
 8005572:	4648      	mov	r0, r9
 8005574:	f000 fc94 	bl	8005ea0 <__mcmp>
 8005578:	4602      	mov	r2, r0
 800557a:	4631      	mov	r1, r6
 800557c:	4658      	mov	r0, fp
 800557e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005580:	f000 fa0c 	bl	800599c <_Bfree>
 8005584:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005586:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005588:	9e07      	ldr	r6, [sp, #28]
 800558a:	ea43 0102 	orr.w	r1, r3, r2
 800558e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005590:	4319      	orrs	r1, r3
 8005592:	d110      	bne.n	80055b6 <_dtoa_r+0xa26>
 8005594:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005598:	d029      	beq.n	80055ee <_dtoa_r+0xa5e>
 800559a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	dd02      	ble.n	80055a6 <_dtoa_r+0xa16>
 80055a0:	9b08      	ldr	r3, [sp, #32]
 80055a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80055a6:	9b02      	ldr	r3, [sp, #8]
 80055a8:	f883 8000 	strb.w	r8, [r3]
 80055ac:	e63b      	b.n	8005226 <_dtoa_r+0x696>
 80055ae:	4628      	mov	r0, r5
 80055b0:	e7bb      	b.n	800552a <_dtoa_r+0x99a>
 80055b2:	2201      	movs	r2, #1
 80055b4:	e7e1      	b.n	800557a <_dtoa_r+0x9ea>
 80055b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	db04      	blt.n	80055c6 <_dtoa_r+0xa36>
 80055bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80055be:	430b      	orrs	r3, r1
 80055c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055c2:	430b      	orrs	r3, r1
 80055c4:	d120      	bne.n	8005608 <_dtoa_r+0xa78>
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	dded      	ble.n	80055a6 <_dtoa_r+0xa16>
 80055ca:	4649      	mov	r1, r9
 80055cc:	2201      	movs	r2, #1
 80055ce:	4658      	mov	r0, fp
 80055d0:	f000 fbfa 	bl	8005dc8 <__lshift>
 80055d4:	4621      	mov	r1, r4
 80055d6:	4681      	mov	r9, r0
 80055d8:	f000 fc62 	bl	8005ea0 <__mcmp>
 80055dc:	2800      	cmp	r0, #0
 80055de:	dc03      	bgt.n	80055e8 <_dtoa_r+0xa58>
 80055e0:	d1e1      	bne.n	80055a6 <_dtoa_r+0xa16>
 80055e2:	f018 0f01 	tst.w	r8, #1
 80055e6:	d0de      	beq.n	80055a6 <_dtoa_r+0xa16>
 80055e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80055ec:	d1d8      	bne.n	80055a0 <_dtoa_r+0xa10>
 80055ee:	2339      	movs	r3, #57	@ 0x39
 80055f0:	9a02      	ldr	r2, [sp, #8]
 80055f2:	7013      	strb	r3, [r2, #0]
 80055f4:	4633      	mov	r3, r6
 80055f6:	461e      	mov	r6, r3
 80055f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	2a39      	cmp	r2, #57	@ 0x39
 8005600:	d052      	beq.n	80056a8 <_dtoa_r+0xb18>
 8005602:	3201      	adds	r2, #1
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e60e      	b.n	8005226 <_dtoa_r+0x696>
 8005608:	2a00      	cmp	r2, #0
 800560a:	dd07      	ble.n	800561c <_dtoa_r+0xa8c>
 800560c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005610:	d0ed      	beq.n	80055ee <_dtoa_r+0xa5e>
 8005612:	9a02      	ldr	r2, [sp, #8]
 8005614:	f108 0301 	add.w	r3, r8, #1
 8005618:	7013      	strb	r3, [r2, #0]
 800561a:	e604      	b.n	8005226 <_dtoa_r+0x696>
 800561c:	9b07      	ldr	r3, [sp, #28]
 800561e:	9a07      	ldr	r2, [sp, #28]
 8005620:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005626:	4293      	cmp	r3, r2
 8005628:	d028      	beq.n	800567c <_dtoa_r+0xaec>
 800562a:	4649      	mov	r1, r9
 800562c:	2300      	movs	r3, #0
 800562e:	220a      	movs	r2, #10
 8005630:	4658      	mov	r0, fp
 8005632:	f000 f9d5 	bl	80059e0 <__multadd>
 8005636:	42af      	cmp	r7, r5
 8005638:	4681      	mov	r9, r0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	f04f 020a 	mov.w	r2, #10
 8005642:	4639      	mov	r1, r7
 8005644:	4658      	mov	r0, fp
 8005646:	d107      	bne.n	8005658 <_dtoa_r+0xac8>
 8005648:	f000 f9ca 	bl	80059e0 <__multadd>
 800564c:	4607      	mov	r7, r0
 800564e:	4605      	mov	r5, r0
 8005650:	9b07      	ldr	r3, [sp, #28]
 8005652:	3301      	adds	r3, #1
 8005654:	9307      	str	r3, [sp, #28]
 8005656:	e774      	b.n	8005542 <_dtoa_r+0x9b2>
 8005658:	f000 f9c2 	bl	80059e0 <__multadd>
 800565c:	4629      	mov	r1, r5
 800565e:	4607      	mov	r7, r0
 8005660:	2300      	movs	r3, #0
 8005662:	220a      	movs	r2, #10
 8005664:	4658      	mov	r0, fp
 8005666:	f000 f9bb 	bl	80059e0 <__multadd>
 800566a:	4605      	mov	r5, r0
 800566c:	e7f0      	b.n	8005650 <_dtoa_r+0xac0>
 800566e:	9b08      	ldr	r3, [sp, #32]
 8005670:	2700      	movs	r7, #0
 8005672:	2b00      	cmp	r3, #0
 8005674:	bfcc      	ite	gt
 8005676:	461e      	movgt	r6, r3
 8005678:	2601      	movle	r6, #1
 800567a:	4456      	add	r6, sl
 800567c:	4649      	mov	r1, r9
 800567e:	2201      	movs	r2, #1
 8005680:	4658      	mov	r0, fp
 8005682:	f000 fba1 	bl	8005dc8 <__lshift>
 8005686:	4621      	mov	r1, r4
 8005688:	4681      	mov	r9, r0
 800568a:	f000 fc09 	bl	8005ea0 <__mcmp>
 800568e:	2800      	cmp	r0, #0
 8005690:	dcb0      	bgt.n	80055f4 <_dtoa_r+0xa64>
 8005692:	d102      	bne.n	800569a <_dtoa_r+0xb0a>
 8005694:	f018 0f01 	tst.w	r8, #1
 8005698:	d1ac      	bne.n	80055f4 <_dtoa_r+0xa64>
 800569a:	4633      	mov	r3, r6
 800569c:	461e      	mov	r6, r3
 800569e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a2:	2a30      	cmp	r2, #48	@ 0x30
 80056a4:	d0fa      	beq.n	800569c <_dtoa_r+0xb0c>
 80056a6:	e5be      	b.n	8005226 <_dtoa_r+0x696>
 80056a8:	459a      	cmp	sl, r3
 80056aa:	d1a4      	bne.n	80055f6 <_dtoa_r+0xa66>
 80056ac:	9b04      	ldr	r3, [sp, #16]
 80056ae:	3301      	adds	r3, #1
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	2331      	movs	r3, #49	@ 0x31
 80056b4:	f88a 3000 	strb.w	r3, [sl]
 80056b8:	e5b5      	b.n	8005226 <_dtoa_r+0x696>
 80056ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800571c <_dtoa_r+0xb8c>
 80056c0:	b11b      	cbz	r3, 80056ca <_dtoa_r+0xb3a>
 80056c2:	f10a 0308 	add.w	r3, sl, #8
 80056c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4650      	mov	r0, sl
 80056cc:	b017      	add	sp, #92	@ 0x5c
 80056ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	f77f ae3d 	ble.w	8005354 <_dtoa_r+0x7c4>
 80056da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80056de:	2001      	movs	r0, #1
 80056e0:	e65b      	b.n	800539a <_dtoa_r+0x80a>
 80056e2:	9b08      	ldr	r3, [sp, #32]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f77f aed6 	ble.w	8005496 <_dtoa_r+0x906>
 80056ea:	4656      	mov	r6, sl
 80056ec:	4621      	mov	r1, r4
 80056ee:	4648      	mov	r0, r9
 80056f0:	f7ff f9c4 	bl	8004a7c <quorem>
 80056f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80056f8:	9b08      	ldr	r3, [sp, #32]
 80056fa:	f806 8b01 	strb.w	r8, [r6], #1
 80056fe:	eba6 020a 	sub.w	r2, r6, sl
 8005702:	4293      	cmp	r3, r2
 8005704:	ddb3      	ble.n	800566e <_dtoa_r+0xade>
 8005706:	4649      	mov	r1, r9
 8005708:	2300      	movs	r3, #0
 800570a:	220a      	movs	r2, #10
 800570c:	4658      	mov	r0, fp
 800570e:	f000 f967 	bl	80059e0 <__multadd>
 8005712:	4681      	mov	r9, r0
 8005714:	e7ea      	b.n	80056ec <_dtoa_r+0xb5c>
 8005716:	bf00      	nop
 8005718:	0800820b 	.word	0x0800820b
 800571c:	0800818f 	.word	0x0800818f

08005720 <_free_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4605      	mov	r5, r0
 8005724:	2900      	cmp	r1, #0
 8005726:	d040      	beq.n	80057aa <_free_r+0x8a>
 8005728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800572c:	1f0c      	subs	r4, r1, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	bfb8      	it	lt
 8005732:	18e4      	addlt	r4, r4, r3
 8005734:	f000 f8e6 	bl	8005904 <__malloc_lock>
 8005738:	4a1c      	ldr	r2, [pc, #112]	@ (80057ac <_free_r+0x8c>)
 800573a:	6813      	ldr	r3, [r2, #0]
 800573c:	b933      	cbnz	r3, 800574c <_free_r+0x2c>
 800573e:	6063      	str	r3, [r4, #4]
 8005740:	6014      	str	r4, [r2, #0]
 8005742:	4628      	mov	r0, r5
 8005744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005748:	f000 b8e2 	b.w	8005910 <__malloc_unlock>
 800574c:	42a3      	cmp	r3, r4
 800574e:	d908      	bls.n	8005762 <_free_r+0x42>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	1821      	adds	r1, r4, r0
 8005754:	428b      	cmp	r3, r1
 8005756:	bf01      	itttt	eq
 8005758:	6819      	ldreq	r1, [r3, #0]
 800575a:	685b      	ldreq	r3, [r3, #4]
 800575c:	1809      	addeq	r1, r1, r0
 800575e:	6021      	streq	r1, [r4, #0]
 8005760:	e7ed      	b.n	800573e <_free_r+0x1e>
 8005762:	461a      	mov	r2, r3
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	b10b      	cbz	r3, 800576c <_free_r+0x4c>
 8005768:	42a3      	cmp	r3, r4
 800576a:	d9fa      	bls.n	8005762 <_free_r+0x42>
 800576c:	6811      	ldr	r1, [r2, #0]
 800576e:	1850      	adds	r0, r2, r1
 8005770:	42a0      	cmp	r0, r4
 8005772:	d10b      	bne.n	800578c <_free_r+0x6c>
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	4401      	add	r1, r0
 8005778:	1850      	adds	r0, r2, r1
 800577a:	4283      	cmp	r3, r0
 800577c:	6011      	str	r1, [r2, #0]
 800577e:	d1e0      	bne.n	8005742 <_free_r+0x22>
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4408      	add	r0, r1
 8005786:	6010      	str	r0, [r2, #0]
 8005788:	6053      	str	r3, [r2, #4]
 800578a:	e7da      	b.n	8005742 <_free_r+0x22>
 800578c:	d902      	bls.n	8005794 <_free_r+0x74>
 800578e:	230c      	movs	r3, #12
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	e7d6      	b.n	8005742 <_free_r+0x22>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	1821      	adds	r1, r4, r0
 8005798:	428b      	cmp	r3, r1
 800579a:	bf01      	itttt	eq
 800579c:	6819      	ldreq	r1, [r3, #0]
 800579e:	685b      	ldreq	r3, [r3, #4]
 80057a0:	1809      	addeq	r1, r1, r0
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	6054      	str	r4, [r2, #4]
 80057a8:	e7cb      	b.n	8005742 <_free_r+0x22>
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	200003d4 	.word	0x200003d4

080057b0 <malloc>:
 80057b0:	4b02      	ldr	r3, [pc, #8]	@ (80057bc <malloc+0xc>)
 80057b2:	4601      	mov	r1, r0
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	f000 b825 	b.w	8005804 <_malloc_r>
 80057ba:	bf00      	nop
 80057bc:	20000018 	.word	0x20000018

080057c0 <sbrk_aligned>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005800 <sbrk_aligned+0x40>)
 80057c4:	460c      	mov	r4, r1
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	4605      	mov	r5, r0
 80057ca:	b911      	cbnz	r1, 80057d2 <sbrk_aligned+0x12>
 80057cc:	f001 fdf6 	bl	80073bc <_sbrk_r>
 80057d0:	6030      	str	r0, [r6, #0]
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f001 fdf1 	bl	80073bc <_sbrk_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d103      	bne.n	80057e6 <sbrk_aligned+0x26>
 80057de:	f04f 34ff 	mov.w	r4, #4294967295
 80057e2:	4620      	mov	r0, r4
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d0f8      	beq.n	80057e2 <sbrk_aligned+0x22>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f001 fde2 	bl	80073bc <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d1f2      	bne.n	80057e2 <sbrk_aligned+0x22>
 80057fc:	e7ef      	b.n	80057de <sbrk_aligned+0x1e>
 80057fe:	bf00      	nop
 8005800:	200003d0 	.word	0x200003d0

08005804 <_malloc_r>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	1ccd      	adds	r5, r1, #3
 800580a:	f025 0503 	bic.w	r5, r5, #3
 800580e:	3508      	adds	r5, #8
 8005810:	2d0c      	cmp	r5, #12
 8005812:	bf38      	it	cc
 8005814:	250c      	movcc	r5, #12
 8005816:	2d00      	cmp	r5, #0
 8005818:	4606      	mov	r6, r0
 800581a:	db01      	blt.n	8005820 <_malloc_r+0x1c>
 800581c:	42a9      	cmp	r1, r5
 800581e:	d904      	bls.n	800582a <_malloc_r+0x26>
 8005820:	230c      	movs	r3, #12
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005900 <_malloc_r+0xfc>
 800582e:	f000 f869 	bl	8005904 <__malloc_lock>
 8005832:	f8d8 3000 	ldr.w	r3, [r8]
 8005836:	461c      	mov	r4, r3
 8005838:	bb44      	cbnz	r4, 800588c <_malloc_r+0x88>
 800583a:	4629      	mov	r1, r5
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff ffbf 	bl	80057c0 <sbrk_aligned>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	4604      	mov	r4, r0
 8005846:	d158      	bne.n	80058fa <_malloc_r+0xf6>
 8005848:	f8d8 4000 	ldr.w	r4, [r8]
 800584c:	4627      	mov	r7, r4
 800584e:	2f00      	cmp	r7, #0
 8005850:	d143      	bne.n	80058da <_malloc_r+0xd6>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d04b      	beq.n	80058ee <_malloc_r+0xea>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	eb04 0903 	add.w	r9, r4, r3
 8005860:	f001 fdac 	bl	80073bc <_sbrk_r>
 8005864:	4581      	cmp	r9, r0
 8005866:	d142      	bne.n	80058ee <_malloc_r+0xea>
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	4630      	mov	r0, r6
 800586c:	1a6d      	subs	r5, r5, r1
 800586e:	4629      	mov	r1, r5
 8005870:	f7ff ffa6 	bl	80057c0 <sbrk_aligned>
 8005874:	3001      	adds	r0, #1
 8005876:	d03a      	beq.n	80058ee <_malloc_r+0xea>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	442b      	add	r3, r5
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	f8d8 3000 	ldr.w	r3, [r8]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	bb62      	cbnz	r2, 80058e0 <_malloc_r+0xdc>
 8005886:	f8c8 7000 	str.w	r7, [r8]
 800588a:	e00f      	b.n	80058ac <_malloc_r+0xa8>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	1b52      	subs	r2, r2, r5
 8005890:	d420      	bmi.n	80058d4 <_malloc_r+0xd0>
 8005892:	2a0b      	cmp	r2, #11
 8005894:	d917      	bls.n	80058c6 <_malloc_r+0xc2>
 8005896:	1961      	adds	r1, r4, r5
 8005898:	42a3      	cmp	r3, r4
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	6059      	strne	r1, [r3, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	bf08      	it	eq
 80058a4:	f8c8 1000 	streq.w	r1, [r8]
 80058a8:	5162      	str	r2, [r4, r5]
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f82f 	bl	8005910 <__malloc_unlock>
 80058b2:	f104 000b 	add.w	r0, r4, #11
 80058b6:	1d23      	adds	r3, r4, #4
 80058b8:	f020 0007 	bic.w	r0, r0, #7
 80058bc:	1ac2      	subs	r2, r0, r3
 80058be:	bf1c      	itt	ne
 80058c0:	1a1b      	subne	r3, r3, r0
 80058c2:	50a3      	strne	r3, [r4, r2]
 80058c4:	e7af      	b.n	8005826 <_malloc_r+0x22>
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	bf0c      	ite	eq
 80058cc:	f8c8 2000 	streq.w	r2, [r8]
 80058d0:	605a      	strne	r2, [r3, #4]
 80058d2:	e7eb      	b.n	80058ac <_malloc_r+0xa8>
 80058d4:	4623      	mov	r3, r4
 80058d6:	6864      	ldr	r4, [r4, #4]
 80058d8:	e7ae      	b.n	8005838 <_malloc_r+0x34>
 80058da:	463c      	mov	r4, r7
 80058dc:	687f      	ldr	r7, [r7, #4]
 80058de:	e7b6      	b.n	800584e <_malloc_r+0x4a>
 80058e0:	461a      	mov	r2, r3
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d1fb      	bne.n	80058e0 <_malloc_r+0xdc>
 80058e8:	2300      	movs	r3, #0
 80058ea:	6053      	str	r3, [r2, #4]
 80058ec:	e7de      	b.n	80058ac <_malloc_r+0xa8>
 80058ee:	230c      	movs	r3, #12
 80058f0:	4630      	mov	r0, r6
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f000 f80c 	bl	8005910 <__malloc_unlock>
 80058f8:	e794      	b.n	8005824 <_malloc_r+0x20>
 80058fa:	6005      	str	r5, [r0, #0]
 80058fc:	e7d6      	b.n	80058ac <_malloc_r+0xa8>
 80058fe:	bf00      	nop
 8005900:	200003d4 	.word	0x200003d4

08005904 <__malloc_lock>:
 8005904:	4801      	ldr	r0, [pc, #4]	@ (800590c <__malloc_lock+0x8>)
 8005906:	f7ff b8a4 	b.w	8004a52 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	200003cc 	.word	0x200003cc

08005910 <__malloc_unlock>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__malloc_unlock+0x8>)
 8005912:	f7ff b89f 	b.w	8004a54 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	200003cc 	.word	0x200003cc

0800591c <_Balloc>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	69c6      	ldr	r6, [r0, #28]
 8005920:	4604      	mov	r4, r0
 8005922:	460d      	mov	r5, r1
 8005924:	b976      	cbnz	r6, 8005944 <_Balloc+0x28>
 8005926:	2010      	movs	r0, #16
 8005928:	f7ff ff42 	bl	80057b0 <malloc>
 800592c:	4602      	mov	r2, r0
 800592e:	61e0      	str	r0, [r4, #28]
 8005930:	b920      	cbnz	r0, 800593c <_Balloc+0x20>
 8005932:	216b      	movs	r1, #107	@ 0x6b
 8005934:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <_Balloc+0x78>)
 8005936:	4818      	ldr	r0, [pc, #96]	@ (8005998 <_Balloc+0x7c>)
 8005938:	f001 fd64 	bl	8007404 <__assert_func>
 800593c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005940:	6006      	str	r6, [r0, #0]
 8005942:	60c6      	str	r6, [r0, #12]
 8005944:	69e6      	ldr	r6, [r4, #28]
 8005946:	68f3      	ldr	r3, [r6, #12]
 8005948:	b183      	cbz	r3, 800596c <_Balloc+0x50>
 800594a:	69e3      	ldr	r3, [r4, #28]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005952:	b9b8      	cbnz	r0, 8005984 <_Balloc+0x68>
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f605 	lsl.w	r6, r1, r5
 800595a:	1d72      	adds	r2, r6, #5
 800595c:	4620      	mov	r0, r4
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	f001 fd6e 	bl	8007440 <_calloc_r>
 8005964:	b160      	cbz	r0, 8005980 <_Balloc+0x64>
 8005966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800596a:	e00e      	b.n	800598a <_Balloc+0x6e>
 800596c:	2221      	movs	r2, #33	@ 0x21
 800596e:	2104      	movs	r1, #4
 8005970:	4620      	mov	r0, r4
 8005972:	f001 fd65 	bl	8007440 <_calloc_r>
 8005976:	69e3      	ldr	r3, [r4, #28]
 8005978:	60f0      	str	r0, [r6, #12]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e4      	bne.n	800594a <_Balloc+0x2e>
 8005980:	2000      	movs	r0, #0
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	6802      	ldr	r2, [r0, #0]
 8005986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800598a:	2300      	movs	r3, #0
 800598c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005990:	e7f7      	b.n	8005982 <_Balloc+0x66>
 8005992:	bf00      	nop
 8005994:	0800819c 	.word	0x0800819c
 8005998:	0800821c 	.word	0x0800821c

0800599c <_Bfree>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	69c6      	ldr	r6, [r0, #28]
 80059a0:	4605      	mov	r5, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	b976      	cbnz	r6, 80059c4 <_Bfree+0x28>
 80059a6:	2010      	movs	r0, #16
 80059a8:	f7ff ff02 	bl	80057b0 <malloc>
 80059ac:	4602      	mov	r2, r0
 80059ae:	61e8      	str	r0, [r5, #28]
 80059b0:	b920      	cbnz	r0, 80059bc <_Bfree+0x20>
 80059b2:	218f      	movs	r1, #143	@ 0x8f
 80059b4:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <_Bfree+0x3c>)
 80059b6:	4809      	ldr	r0, [pc, #36]	@ (80059dc <_Bfree+0x40>)
 80059b8:	f001 fd24 	bl	8007404 <__assert_func>
 80059bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059c0:	6006      	str	r6, [r0, #0]
 80059c2:	60c6      	str	r6, [r0, #12]
 80059c4:	b13c      	cbz	r4, 80059d6 <_Bfree+0x3a>
 80059c6:	69eb      	ldr	r3, [r5, #28]
 80059c8:	6862      	ldr	r2, [r4, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059d0:	6021      	str	r1, [r4, #0]
 80059d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	0800819c 	.word	0x0800819c
 80059dc:	0800821c 	.word	0x0800821c

080059e0 <__multadd>:
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	461e      	mov	r6, r3
 80059ea:	2000      	movs	r0, #0
 80059ec:	690d      	ldr	r5, [r1, #16]
 80059ee:	f101 0c14 	add.w	ip, r1, #20
 80059f2:	f8dc 3000 	ldr.w	r3, [ip]
 80059f6:	3001      	adds	r0, #1
 80059f8:	b299      	uxth	r1, r3
 80059fa:	fb02 6101 	mla	r1, r2, r1, r6
 80059fe:	0c1e      	lsrs	r6, r3, #16
 8005a00:	0c0b      	lsrs	r3, r1, #16
 8005a02:	fb02 3306 	mla	r3, r2, r6, r3
 8005a06:	b289      	uxth	r1, r1
 8005a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a0c:	4285      	cmp	r5, r0
 8005a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a12:	f84c 1b04 	str.w	r1, [ip], #4
 8005a16:	dcec      	bgt.n	80059f2 <__multadd+0x12>
 8005a18:	b30e      	cbz	r6, 8005a5e <__multadd+0x7e>
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	42ab      	cmp	r3, r5
 8005a1e:	dc19      	bgt.n	8005a54 <__multadd+0x74>
 8005a20:	6861      	ldr	r1, [r4, #4]
 8005a22:	4638      	mov	r0, r7
 8005a24:	3101      	adds	r1, #1
 8005a26:	f7ff ff79 	bl	800591c <_Balloc>
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	b928      	cbnz	r0, 8005a3a <__multadd+0x5a>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	21ba      	movs	r1, #186	@ 0xba
 8005a32:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <__multadd+0x84>)
 8005a34:	480c      	ldr	r0, [pc, #48]	@ (8005a68 <__multadd+0x88>)
 8005a36:	f001 fce5 	bl	8007404 <__assert_func>
 8005a3a:	6922      	ldr	r2, [r4, #16]
 8005a3c:	f104 010c 	add.w	r1, r4, #12
 8005a40:	3202      	adds	r2, #2
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	300c      	adds	r0, #12
 8005a46:	f001 fcc9 	bl	80073dc <memcpy>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ffa5 	bl	800599c <_Bfree>
 8005a52:	4644      	mov	r4, r8
 8005a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a58:	3501      	adds	r5, #1
 8005a5a:	615e      	str	r6, [r3, #20]
 8005a5c:	6125      	str	r5, [r4, #16]
 8005a5e:	4620      	mov	r0, r4
 8005a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a64:	0800820b 	.word	0x0800820b
 8005a68:	0800821c 	.word	0x0800821c

08005a6c <__s2b>:
 8005a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a70:	4615      	mov	r5, r2
 8005a72:	2209      	movs	r2, #9
 8005a74:	461f      	mov	r7, r3
 8005a76:	3308      	adds	r3, #8
 8005a78:	460c      	mov	r4, r1
 8005a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a7e:	4606      	mov	r6, r0
 8005a80:	2201      	movs	r2, #1
 8005a82:	2100      	movs	r1, #0
 8005a84:	429a      	cmp	r2, r3
 8005a86:	db09      	blt.n	8005a9c <__s2b+0x30>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff ff47 	bl	800591c <_Balloc>
 8005a8e:	b940      	cbnz	r0, 8005aa2 <__s2b+0x36>
 8005a90:	4602      	mov	r2, r0
 8005a92:	21d3      	movs	r1, #211	@ 0xd3
 8005a94:	4b18      	ldr	r3, [pc, #96]	@ (8005af8 <__s2b+0x8c>)
 8005a96:	4819      	ldr	r0, [pc, #100]	@ (8005afc <__s2b+0x90>)
 8005a98:	f001 fcb4 	bl	8007404 <__assert_func>
 8005a9c:	0052      	lsls	r2, r2, #1
 8005a9e:	3101      	adds	r1, #1
 8005aa0:	e7f0      	b.n	8005a84 <__s2b+0x18>
 8005aa2:	9b08      	ldr	r3, [sp, #32]
 8005aa4:	2d09      	cmp	r5, #9
 8005aa6:	6143      	str	r3, [r0, #20]
 8005aa8:	f04f 0301 	mov.w	r3, #1
 8005aac:	6103      	str	r3, [r0, #16]
 8005aae:	dd16      	ble.n	8005ade <__s2b+0x72>
 8005ab0:	f104 0909 	add.w	r9, r4, #9
 8005ab4:	46c8      	mov	r8, r9
 8005ab6:	442c      	add	r4, r5
 8005ab8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005abc:	4601      	mov	r1, r0
 8005abe:	220a      	movs	r2, #10
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	3b30      	subs	r3, #48	@ 0x30
 8005ac4:	f7ff ff8c 	bl	80059e0 <__multadd>
 8005ac8:	45a0      	cmp	r8, r4
 8005aca:	d1f5      	bne.n	8005ab8 <__s2b+0x4c>
 8005acc:	f1a5 0408 	sub.w	r4, r5, #8
 8005ad0:	444c      	add	r4, r9
 8005ad2:	1b2d      	subs	r5, r5, r4
 8005ad4:	1963      	adds	r3, r4, r5
 8005ad6:	42bb      	cmp	r3, r7
 8005ad8:	db04      	blt.n	8005ae4 <__s2b+0x78>
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	2509      	movs	r5, #9
 8005ae0:	340a      	adds	r4, #10
 8005ae2:	e7f6      	b.n	8005ad2 <__s2b+0x66>
 8005ae4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ae8:	4601      	mov	r1, r0
 8005aea:	220a      	movs	r2, #10
 8005aec:	4630      	mov	r0, r6
 8005aee:	3b30      	subs	r3, #48	@ 0x30
 8005af0:	f7ff ff76 	bl	80059e0 <__multadd>
 8005af4:	e7ee      	b.n	8005ad4 <__s2b+0x68>
 8005af6:	bf00      	nop
 8005af8:	0800820b 	.word	0x0800820b
 8005afc:	0800821c 	.word	0x0800821c

08005b00 <__hi0bits>:
 8005b00:	4603      	mov	r3, r0
 8005b02:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b06:	bf3a      	itte	cc
 8005b08:	0403      	lslcc	r3, r0, #16
 8005b0a:	2010      	movcc	r0, #16
 8005b0c:	2000      	movcs	r0, #0
 8005b0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b12:	bf3c      	itt	cc
 8005b14:	021b      	lslcc	r3, r3, #8
 8005b16:	3008      	addcc	r0, #8
 8005b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b1c:	bf3c      	itt	cc
 8005b1e:	011b      	lslcc	r3, r3, #4
 8005b20:	3004      	addcc	r0, #4
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b26:	bf3c      	itt	cc
 8005b28:	009b      	lslcc	r3, r3, #2
 8005b2a:	3002      	addcc	r0, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	db05      	blt.n	8005b3c <__hi0bits+0x3c>
 8005b30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005b34:	f100 0001 	add.w	r0, r0, #1
 8005b38:	bf08      	it	eq
 8005b3a:	2020      	moveq	r0, #32
 8005b3c:	4770      	bx	lr

08005b3e <__lo0bits>:
 8005b3e:	6803      	ldr	r3, [r0, #0]
 8005b40:	4602      	mov	r2, r0
 8005b42:	f013 0007 	ands.w	r0, r3, #7
 8005b46:	d00b      	beq.n	8005b60 <__lo0bits+0x22>
 8005b48:	07d9      	lsls	r1, r3, #31
 8005b4a:	d421      	bmi.n	8005b90 <__lo0bits+0x52>
 8005b4c:	0798      	lsls	r0, r3, #30
 8005b4e:	bf49      	itett	mi
 8005b50:	085b      	lsrmi	r3, r3, #1
 8005b52:	089b      	lsrpl	r3, r3, #2
 8005b54:	2001      	movmi	r0, #1
 8005b56:	6013      	strmi	r3, [r2, #0]
 8005b58:	bf5c      	itt	pl
 8005b5a:	2002      	movpl	r0, #2
 8005b5c:	6013      	strpl	r3, [r2, #0]
 8005b5e:	4770      	bx	lr
 8005b60:	b299      	uxth	r1, r3
 8005b62:	b909      	cbnz	r1, 8005b68 <__lo0bits+0x2a>
 8005b64:	2010      	movs	r0, #16
 8005b66:	0c1b      	lsrs	r3, r3, #16
 8005b68:	b2d9      	uxtb	r1, r3
 8005b6a:	b909      	cbnz	r1, 8005b70 <__lo0bits+0x32>
 8005b6c:	3008      	adds	r0, #8
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	0719      	lsls	r1, r3, #28
 8005b72:	bf04      	itt	eq
 8005b74:	091b      	lsreq	r3, r3, #4
 8005b76:	3004      	addeq	r0, #4
 8005b78:	0799      	lsls	r1, r3, #30
 8005b7a:	bf04      	itt	eq
 8005b7c:	089b      	lsreq	r3, r3, #2
 8005b7e:	3002      	addeq	r0, #2
 8005b80:	07d9      	lsls	r1, r3, #31
 8005b82:	d403      	bmi.n	8005b8c <__lo0bits+0x4e>
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	f100 0001 	add.w	r0, r0, #1
 8005b8a:	d003      	beq.n	8005b94 <__lo0bits+0x56>
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4770      	bx	lr
 8005b90:	2000      	movs	r0, #0
 8005b92:	4770      	bx	lr
 8005b94:	2020      	movs	r0, #32
 8005b96:	4770      	bx	lr

08005b98 <__i2b>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	f7ff febd 	bl	800591c <_Balloc>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__i2b+0x1a>
 8005ba6:	f240 1145 	movw	r1, #325	@ 0x145
 8005baa:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <__i2b+0x24>)
 8005bac:	4804      	ldr	r0, [pc, #16]	@ (8005bc0 <__i2b+0x28>)
 8005bae:	f001 fc29 	bl	8007404 <__assert_func>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	6144      	str	r4, [r0, #20]
 8005bb6:	6103      	str	r3, [r0, #16]
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	0800820b 	.word	0x0800820b
 8005bc0:	0800821c 	.word	0x0800821c

08005bc4 <__multiply>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	4614      	mov	r4, r2
 8005bca:	690a      	ldr	r2, [r1, #16]
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	460f      	mov	r7, r1
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	bfa2      	ittt	ge
 8005bd4:	4623      	movge	r3, r4
 8005bd6:	460c      	movge	r4, r1
 8005bd8:	461f      	movge	r7, r3
 8005bda:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005bde:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	6861      	ldr	r1, [r4, #4]
 8005be6:	eb0a 0609 	add.w	r6, sl, r9
 8005bea:	42b3      	cmp	r3, r6
 8005bec:	b085      	sub	sp, #20
 8005bee:	bfb8      	it	lt
 8005bf0:	3101      	addlt	r1, #1
 8005bf2:	f7ff fe93 	bl	800591c <_Balloc>
 8005bf6:	b930      	cbnz	r0, 8005c06 <__multiply+0x42>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005bfe:	4b43      	ldr	r3, [pc, #268]	@ (8005d0c <__multiply+0x148>)
 8005c00:	4843      	ldr	r0, [pc, #268]	@ (8005d10 <__multiply+0x14c>)
 8005c02:	f001 fbff 	bl	8007404 <__assert_func>
 8005c06:	f100 0514 	add.w	r5, r0, #20
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c12:	4543      	cmp	r3, r8
 8005c14:	d321      	bcc.n	8005c5a <__multiply+0x96>
 8005c16:	f107 0114 	add.w	r1, r7, #20
 8005c1a:	f104 0214 	add.w	r2, r4, #20
 8005c1e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005c22:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005c26:	9302      	str	r3, [sp, #8]
 8005c28:	1b13      	subs	r3, r2, r4
 8005c2a:	3b15      	subs	r3, #21
 8005c2c:	f023 0303 	bic.w	r3, r3, #3
 8005c30:	3304      	adds	r3, #4
 8005c32:	f104 0715 	add.w	r7, r4, #21
 8005c36:	42ba      	cmp	r2, r7
 8005c38:	bf38      	it	cc
 8005c3a:	2304      	movcc	r3, #4
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	9b02      	ldr	r3, [sp, #8]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	428b      	cmp	r3, r1
 8005c44:	d80c      	bhi.n	8005c60 <__multiply+0x9c>
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	dd03      	ble.n	8005c52 <__multiply+0x8e>
 8005c4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d05a      	beq.n	8005d08 <__multiply+0x144>
 8005c52:	6106      	str	r6, [r0, #16]
 8005c54:	b005      	add	sp, #20
 8005c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5a:	f843 2b04 	str.w	r2, [r3], #4
 8005c5e:	e7d8      	b.n	8005c12 <__multiply+0x4e>
 8005c60:	f8b1 a000 	ldrh.w	sl, [r1]
 8005c64:	f1ba 0f00 	cmp.w	sl, #0
 8005c68:	d023      	beq.n	8005cb2 <__multiply+0xee>
 8005c6a:	46a9      	mov	r9, r5
 8005c6c:	f04f 0c00 	mov.w	ip, #0
 8005c70:	f104 0e14 	add.w	lr, r4, #20
 8005c74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c78:	f8d9 3000 	ldr.w	r3, [r9]
 8005c7c:	fa1f fb87 	uxth.w	fp, r7
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	fb0a 330b 	mla	r3, sl, fp, r3
 8005c86:	4463      	add	r3, ip
 8005c88:	f8d9 c000 	ldr.w	ip, [r9]
 8005c8c:	0c3f      	lsrs	r7, r7, #16
 8005c8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c92:	fb0a c707 	mla	r7, sl, r7, ip
 8005c96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ca0:	4572      	cmp	r2, lr
 8005ca2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005ca6:	f849 3b04 	str.w	r3, [r9], #4
 8005caa:	d8e3      	bhi.n	8005c74 <__multiply+0xb0>
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	f845 c003 	str.w	ip, [r5, r3]
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	3104      	adds	r1, #4
 8005cb6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005cba:	f1b9 0f00 	cmp.w	r9, #0
 8005cbe:	d021      	beq.n	8005d04 <__multiply+0x140>
 8005cc0:	46ae      	mov	lr, r5
 8005cc2:	f04f 0a00 	mov.w	sl, #0
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	f104 0c14 	add.w	ip, r4, #20
 8005ccc:	f8bc b000 	ldrh.w	fp, [ip]
 8005cd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	fb09 770b 	mla	r7, r9, fp, r7
 8005cda:	4457      	add	r7, sl
 8005cdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ce0:	f84e 3b04 	str.w	r3, [lr], #4
 8005ce4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ce8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cec:	f8be 3000 	ldrh.w	r3, [lr]
 8005cf0:	4562      	cmp	r2, ip
 8005cf2:	fb09 330a 	mla	r3, r9, sl, r3
 8005cf6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005cfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cfe:	d8e5      	bhi.n	8005ccc <__multiply+0x108>
 8005d00:	9f01      	ldr	r7, [sp, #4]
 8005d02:	51eb      	str	r3, [r5, r7]
 8005d04:	3504      	adds	r5, #4
 8005d06:	e79a      	b.n	8005c3e <__multiply+0x7a>
 8005d08:	3e01      	subs	r6, #1
 8005d0a:	e79c      	b.n	8005c46 <__multiply+0x82>
 8005d0c:	0800820b 	.word	0x0800820b
 8005d10:	0800821c 	.word	0x0800821c

08005d14 <__pow5mult>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	4615      	mov	r5, r2
 8005d1a:	f012 0203 	ands.w	r2, r2, #3
 8005d1e:	4607      	mov	r7, r0
 8005d20:	460e      	mov	r6, r1
 8005d22:	d007      	beq.n	8005d34 <__pow5mult+0x20>
 8005d24:	4c25      	ldr	r4, [pc, #148]	@ (8005dbc <__pow5mult+0xa8>)
 8005d26:	3a01      	subs	r2, #1
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d2e:	f7ff fe57 	bl	80059e0 <__multadd>
 8005d32:	4606      	mov	r6, r0
 8005d34:	10ad      	asrs	r5, r5, #2
 8005d36:	d03d      	beq.n	8005db4 <__pow5mult+0xa0>
 8005d38:	69fc      	ldr	r4, [r7, #28]
 8005d3a:	b97c      	cbnz	r4, 8005d5c <__pow5mult+0x48>
 8005d3c:	2010      	movs	r0, #16
 8005d3e:	f7ff fd37 	bl	80057b0 <malloc>
 8005d42:	4602      	mov	r2, r0
 8005d44:	61f8      	str	r0, [r7, #28]
 8005d46:	b928      	cbnz	r0, 8005d54 <__pow5mult+0x40>
 8005d48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc0 <__pow5mult+0xac>)
 8005d4e:	481d      	ldr	r0, [pc, #116]	@ (8005dc4 <__pow5mult+0xb0>)
 8005d50:	f001 fb58 	bl	8007404 <__assert_func>
 8005d54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d58:	6004      	str	r4, [r0, #0]
 8005d5a:	60c4      	str	r4, [r0, #12]
 8005d5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005d60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d64:	b94c      	cbnz	r4, 8005d7a <__pow5mult+0x66>
 8005d66:	f240 2171 	movw	r1, #625	@ 0x271
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff ff14 	bl	8005b98 <__i2b>
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d78:	6003      	str	r3, [r0, #0]
 8005d7a:	f04f 0900 	mov.w	r9, #0
 8005d7e:	07eb      	lsls	r3, r5, #31
 8005d80:	d50a      	bpl.n	8005d98 <__pow5mult+0x84>
 8005d82:	4631      	mov	r1, r6
 8005d84:	4622      	mov	r2, r4
 8005d86:	4638      	mov	r0, r7
 8005d88:	f7ff ff1c 	bl	8005bc4 <__multiply>
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff fe03 	bl	800599c <_Bfree>
 8005d96:	4646      	mov	r6, r8
 8005d98:	106d      	asrs	r5, r5, #1
 8005d9a:	d00b      	beq.n	8005db4 <__pow5mult+0xa0>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	b938      	cbnz	r0, 8005db0 <__pow5mult+0x9c>
 8005da0:	4622      	mov	r2, r4
 8005da2:	4621      	mov	r1, r4
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7ff ff0d 	bl	8005bc4 <__multiply>
 8005daa:	6020      	str	r0, [r4, #0]
 8005dac:	f8c0 9000 	str.w	r9, [r0]
 8005db0:	4604      	mov	r4, r0
 8005db2:	e7e4      	b.n	8005d7e <__pow5mult+0x6a>
 8005db4:	4630      	mov	r0, r6
 8005db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dba:	bf00      	nop
 8005dbc:	08008278 	.word	0x08008278
 8005dc0:	0800819c 	.word	0x0800819c
 8005dc4:	0800821c 	.word	0x0800821c

08005dc8 <__lshift>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4607      	mov	r7, r0
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	6849      	ldr	r1, [r1, #4]
 8005dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dda:	68a3      	ldr	r3, [r4, #8]
 8005ddc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005de0:	f108 0601 	add.w	r6, r8, #1
 8005de4:	42b3      	cmp	r3, r6
 8005de6:	db0b      	blt.n	8005e00 <__lshift+0x38>
 8005de8:	4638      	mov	r0, r7
 8005dea:	f7ff fd97 	bl	800591c <_Balloc>
 8005dee:	4605      	mov	r5, r0
 8005df0:	b948      	cbnz	r0, 8005e06 <__lshift+0x3e>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005df8:	4b27      	ldr	r3, [pc, #156]	@ (8005e98 <__lshift+0xd0>)
 8005dfa:	4828      	ldr	r0, [pc, #160]	@ (8005e9c <__lshift+0xd4>)
 8005dfc:	f001 fb02 	bl	8007404 <__assert_func>
 8005e00:	3101      	adds	r1, #1
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	e7ee      	b.n	8005de4 <__lshift+0x1c>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f100 0114 	add.w	r1, r0, #20
 8005e0c:	f100 0210 	add.w	r2, r0, #16
 8005e10:	4618      	mov	r0, r3
 8005e12:	4553      	cmp	r3, sl
 8005e14:	db33      	blt.n	8005e7e <__lshift+0xb6>
 8005e16:	6920      	ldr	r0, [r4, #16]
 8005e18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e1c:	f104 0314 	add.w	r3, r4, #20
 8005e20:	f019 091f 	ands.w	r9, r9, #31
 8005e24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e2c:	d02b      	beq.n	8005e86 <__lshift+0xbe>
 8005e2e:	468a      	mov	sl, r1
 8005e30:	2200      	movs	r2, #0
 8005e32:	f1c9 0e20 	rsb	lr, r9, #32
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	fa00 f009 	lsl.w	r0, r0, r9
 8005e3c:	4310      	orrs	r0, r2
 8005e3e:	f84a 0b04 	str.w	r0, [sl], #4
 8005e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e46:	459c      	cmp	ip, r3
 8005e48:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e4c:	d8f3      	bhi.n	8005e36 <__lshift+0x6e>
 8005e4e:	ebac 0304 	sub.w	r3, ip, r4
 8005e52:	3b15      	subs	r3, #21
 8005e54:	f023 0303 	bic.w	r3, r3, #3
 8005e58:	3304      	adds	r3, #4
 8005e5a:	f104 0015 	add.w	r0, r4, #21
 8005e5e:	4584      	cmp	ip, r0
 8005e60:	bf38      	it	cc
 8005e62:	2304      	movcc	r3, #4
 8005e64:	50ca      	str	r2, [r1, r3]
 8005e66:	b10a      	cbz	r2, 8005e6c <__lshift+0xa4>
 8005e68:	f108 0602 	add.w	r6, r8, #2
 8005e6c:	3e01      	subs	r6, #1
 8005e6e:	4638      	mov	r0, r7
 8005e70:	4621      	mov	r1, r4
 8005e72:	612e      	str	r6, [r5, #16]
 8005e74:	f7ff fd92 	bl	800599c <_Bfree>
 8005e78:	4628      	mov	r0, r5
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e82:	3301      	adds	r3, #1
 8005e84:	e7c5      	b.n	8005e12 <__lshift+0x4a>
 8005e86:	3904      	subs	r1, #4
 8005e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e8c:	459c      	cmp	ip, r3
 8005e8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e92:	d8f9      	bhi.n	8005e88 <__lshift+0xc0>
 8005e94:	e7ea      	b.n	8005e6c <__lshift+0xa4>
 8005e96:	bf00      	nop
 8005e98:	0800820b 	.word	0x0800820b
 8005e9c:	0800821c 	.word	0x0800821c

08005ea0 <__mcmp>:
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	690a      	ldr	r2, [r1, #16]
 8005ea4:	6900      	ldr	r0, [r0, #16]
 8005ea6:	b530      	push	{r4, r5, lr}
 8005ea8:	1a80      	subs	r0, r0, r2
 8005eaa:	d10e      	bne.n	8005eca <__mcmp+0x2a>
 8005eac:	3314      	adds	r3, #20
 8005eae:	3114      	adds	r1, #20
 8005eb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005eb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005eb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ebc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ec0:	4295      	cmp	r5, r2
 8005ec2:	d003      	beq.n	8005ecc <__mcmp+0x2c>
 8005ec4:	d205      	bcs.n	8005ed2 <__mcmp+0x32>
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eca:	bd30      	pop	{r4, r5, pc}
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d3f3      	bcc.n	8005eb8 <__mcmp+0x18>
 8005ed0:	e7fb      	b.n	8005eca <__mcmp+0x2a>
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	e7f9      	b.n	8005eca <__mcmp+0x2a>
	...

08005ed8 <__mdiff>:
 8005ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	4689      	mov	r9, r1
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4648      	mov	r0, r9
 8005ee4:	4614      	mov	r4, r2
 8005ee6:	f7ff ffdb 	bl	8005ea0 <__mcmp>
 8005eea:	1e05      	subs	r5, r0, #0
 8005eec:	d112      	bne.n	8005f14 <__mdiff+0x3c>
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f7ff fd13 	bl	800591c <_Balloc>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	b928      	cbnz	r0, 8005f06 <__mdiff+0x2e>
 8005efa:	f240 2137 	movw	r1, #567	@ 0x237
 8005efe:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff8 <__mdiff+0x120>)
 8005f00:	483e      	ldr	r0, [pc, #248]	@ (8005ffc <__mdiff+0x124>)
 8005f02:	f001 fa7f 	bl	8007404 <__assert_func>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	b003      	add	sp, #12
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	bfbc      	itt	lt
 8005f16:	464b      	movlt	r3, r9
 8005f18:	46a1      	movlt	r9, r4
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005f20:	bfba      	itte	lt
 8005f22:	461c      	movlt	r4, r3
 8005f24:	2501      	movlt	r5, #1
 8005f26:	2500      	movge	r5, #0
 8005f28:	f7ff fcf8 	bl	800591c <_Balloc>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	b918      	cbnz	r0, 8005f38 <__mdiff+0x60>
 8005f30:	f240 2145 	movw	r1, #581	@ 0x245
 8005f34:	4b30      	ldr	r3, [pc, #192]	@ (8005ff8 <__mdiff+0x120>)
 8005f36:	e7e3      	b.n	8005f00 <__mdiff+0x28>
 8005f38:	f100 0b14 	add.w	fp, r0, #20
 8005f3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005f40:	f109 0310 	add.w	r3, r9, #16
 8005f44:	60c5      	str	r5, [r0, #12]
 8005f46:	f04f 0c00 	mov.w	ip, #0
 8005f4a:	f109 0514 	add.w	r5, r9, #20
 8005f4e:	46d9      	mov	r9, fp
 8005f50:	6926      	ldr	r6, [r4, #16]
 8005f52:	f104 0e14 	add.w	lr, r4, #20
 8005f56:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005f5a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	9b01      	ldr	r3, [sp, #4]
 8005f62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005f66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005f6a:	b281      	uxth	r1, r0
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	fa1f f38a 	uxth.w	r3, sl
 8005f72:	1a5b      	subs	r3, r3, r1
 8005f74:	0c00      	lsrs	r0, r0, #16
 8005f76:	4463      	add	r3, ip
 8005f78:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005f7c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f86:	4576      	cmp	r6, lr
 8005f88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f8c:	f849 3b04 	str.w	r3, [r9], #4
 8005f90:	d8e6      	bhi.n	8005f60 <__mdiff+0x88>
 8005f92:	1b33      	subs	r3, r6, r4
 8005f94:	3b15      	subs	r3, #21
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	3415      	adds	r4, #21
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	42a6      	cmp	r6, r4
 8005fa0:	bf38      	it	cc
 8005fa2:	2304      	movcc	r3, #4
 8005fa4:	441d      	add	r5, r3
 8005fa6:	445b      	add	r3, fp
 8005fa8:	461e      	mov	r6, r3
 8005faa:	462c      	mov	r4, r5
 8005fac:	4544      	cmp	r4, r8
 8005fae:	d30e      	bcc.n	8005fce <__mdiff+0xf6>
 8005fb0:	f108 0103 	add.w	r1, r8, #3
 8005fb4:	1b49      	subs	r1, r1, r5
 8005fb6:	f021 0103 	bic.w	r1, r1, #3
 8005fba:	3d03      	subs	r5, #3
 8005fbc:	45a8      	cmp	r8, r5
 8005fbe:	bf38      	it	cc
 8005fc0:	2100      	movcc	r1, #0
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005fc8:	b199      	cbz	r1, 8005ff2 <__mdiff+0x11a>
 8005fca:	6117      	str	r7, [r2, #16]
 8005fcc:	e79e      	b.n	8005f0c <__mdiff+0x34>
 8005fce:	46e6      	mov	lr, ip
 8005fd0:	f854 1b04 	ldr.w	r1, [r4], #4
 8005fd4:	fa1f fc81 	uxth.w	ip, r1
 8005fd8:	44f4      	add	ip, lr
 8005fda:	0c08      	lsrs	r0, r1, #16
 8005fdc:	4471      	add	r1, lr
 8005fde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005fe2:	b289      	uxth	r1, r1
 8005fe4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005fe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fec:	f846 1b04 	str.w	r1, [r6], #4
 8005ff0:	e7dc      	b.n	8005fac <__mdiff+0xd4>
 8005ff2:	3f01      	subs	r7, #1
 8005ff4:	e7e6      	b.n	8005fc4 <__mdiff+0xec>
 8005ff6:	bf00      	nop
 8005ff8:	0800820b 	.word	0x0800820b
 8005ffc:	0800821c 	.word	0x0800821c

08006000 <__ulp>:
 8006000:	4b0e      	ldr	r3, [pc, #56]	@ (800603c <__ulp+0x3c>)
 8006002:	400b      	ands	r3, r1
 8006004:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006008:	2b00      	cmp	r3, #0
 800600a:	dc08      	bgt.n	800601e <__ulp+0x1e>
 800600c:	425b      	negs	r3, r3
 800600e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006012:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006016:	da04      	bge.n	8006022 <__ulp+0x22>
 8006018:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800601c:	4113      	asrs	r3, r2
 800601e:	2200      	movs	r2, #0
 8006020:	e008      	b.n	8006034 <__ulp+0x34>
 8006022:	f1a2 0314 	sub.w	r3, r2, #20
 8006026:	2b1e      	cmp	r3, #30
 8006028:	bfd6      	itet	le
 800602a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800602e:	2201      	movgt	r2, #1
 8006030:	40da      	lsrle	r2, r3
 8006032:	2300      	movs	r3, #0
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	7ff00000 	.word	0x7ff00000

08006040 <__b2d>:
 8006040:	6902      	ldr	r2, [r0, #16]
 8006042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006044:	f100 0614 	add.w	r6, r0, #20
 8006048:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800604c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006050:	4f1e      	ldr	r7, [pc, #120]	@ (80060cc <__b2d+0x8c>)
 8006052:	4620      	mov	r0, r4
 8006054:	f7ff fd54 	bl	8005b00 <__hi0bits>
 8006058:	4603      	mov	r3, r0
 800605a:	f1c0 0020 	rsb	r0, r0, #32
 800605e:	2b0a      	cmp	r3, #10
 8006060:	f1a2 0504 	sub.w	r5, r2, #4
 8006064:	6008      	str	r0, [r1, #0]
 8006066:	dc12      	bgt.n	800608e <__b2d+0x4e>
 8006068:	42ae      	cmp	r6, r5
 800606a:	bf2c      	ite	cs
 800606c:	2200      	movcs	r2, #0
 800606e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006072:	f1c3 0c0b 	rsb	ip, r3, #11
 8006076:	3315      	adds	r3, #21
 8006078:	fa24 fe0c 	lsr.w	lr, r4, ip
 800607c:	fa04 f303 	lsl.w	r3, r4, r3
 8006080:	fa22 f20c 	lsr.w	r2, r2, ip
 8006084:	ea4e 0107 	orr.w	r1, lr, r7
 8006088:	431a      	orrs	r2, r3
 800608a:	4610      	mov	r0, r2
 800608c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608e:	42ae      	cmp	r6, r5
 8006090:	bf36      	itet	cc
 8006092:	f1a2 0508 	subcc.w	r5, r2, #8
 8006096:	2200      	movcs	r2, #0
 8006098:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800609c:	3b0b      	subs	r3, #11
 800609e:	d012      	beq.n	80060c6 <__b2d+0x86>
 80060a0:	f1c3 0720 	rsb	r7, r3, #32
 80060a4:	fa22 f107 	lsr.w	r1, r2, r7
 80060a8:	409c      	lsls	r4, r3
 80060aa:	430c      	orrs	r4, r1
 80060ac:	42b5      	cmp	r5, r6
 80060ae:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80060b2:	bf94      	ite	ls
 80060b4:	2400      	movls	r4, #0
 80060b6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80060ba:	409a      	lsls	r2, r3
 80060bc:	40fc      	lsrs	r4, r7
 80060be:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80060c2:	4322      	orrs	r2, r4
 80060c4:	e7e1      	b.n	800608a <__b2d+0x4a>
 80060c6:	ea44 0107 	orr.w	r1, r4, r7
 80060ca:	e7de      	b.n	800608a <__b2d+0x4a>
 80060cc:	3ff00000 	.word	0x3ff00000

080060d0 <__d2b>:
 80060d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80060d4:	2101      	movs	r1, #1
 80060d6:	4690      	mov	r8, r2
 80060d8:	4699      	mov	r9, r3
 80060da:	9e08      	ldr	r6, [sp, #32]
 80060dc:	f7ff fc1e 	bl	800591c <_Balloc>
 80060e0:	4604      	mov	r4, r0
 80060e2:	b930      	cbnz	r0, 80060f2 <__d2b+0x22>
 80060e4:	4602      	mov	r2, r0
 80060e6:	f240 310f 	movw	r1, #783	@ 0x30f
 80060ea:	4b23      	ldr	r3, [pc, #140]	@ (8006178 <__d2b+0xa8>)
 80060ec:	4823      	ldr	r0, [pc, #140]	@ (800617c <__d2b+0xac>)
 80060ee:	f001 f989 	bl	8007404 <__assert_func>
 80060f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060fa:	b10d      	cbz	r5, 8006100 <__d2b+0x30>
 80060fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	f1b8 0300 	subs.w	r3, r8, #0
 8006106:	d024      	beq.n	8006152 <__d2b+0x82>
 8006108:	4668      	mov	r0, sp
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	f7ff fd17 	bl	8005b3e <__lo0bits>
 8006110:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006114:	b1d8      	cbz	r0, 800614e <__d2b+0x7e>
 8006116:	f1c0 0320 	rsb	r3, r0, #32
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	430b      	orrs	r3, r1
 8006120:	40c2      	lsrs	r2, r0
 8006122:	6163      	str	r3, [r4, #20]
 8006124:	9201      	str	r2, [sp, #4]
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2201      	moveq	r2, #1
 800612e:	2202      	movne	r2, #2
 8006130:	61a3      	str	r3, [r4, #24]
 8006132:	6122      	str	r2, [r4, #16]
 8006134:	b1ad      	cbz	r5, 8006162 <__d2b+0x92>
 8006136:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800613a:	4405      	add	r5, r0
 800613c:	6035      	str	r5, [r6, #0]
 800613e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006144:	6018      	str	r0, [r3, #0]
 8006146:	4620      	mov	r0, r4
 8006148:	b002      	add	sp, #8
 800614a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800614e:	6161      	str	r1, [r4, #20]
 8006150:	e7e9      	b.n	8006126 <__d2b+0x56>
 8006152:	a801      	add	r0, sp, #4
 8006154:	f7ff fcf3 	bl	8005b3e <__lo0bits>
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	6163      	str	r3, [r4, #20]
 800615e:	3020      	adds	r0, #32
 8006160:	e7e7      	b.n	8006132 <__d2b+0x62>
 8006162:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006166:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800616a:	6030      	str	r0, [r6, #0]
 800616c:	6918      	ldr	r0, [r3, #16]
 800616e:	f7ff fcc7 	bl	8005b00 <__hi0bits>
 8006172:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006176:	e7e4      	b.n	8006142 <__d2b+0x72>
 8006178:	0800820b 	.word	0x0800820b
 800617c:	0800821c 	.word	0x0800821c

08006180 <__ratio>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	b085      	sub	sp, #20
 8006186:	e9cd 1000 	strd	r1, r0, [sp]
 800618a:	a902      	add	r1, sp, #8
 800618c:	f7ff ff58 	bl	8006040 <__b2d>
 8006190:	468b      	mov	fp, r1
 8006192:	4606      	mov	r6, r0
 8006194:	460f      	mov	r7, r1
 8006196:	9800      	ldr	r0, [sp, #0]
 8006198:	a903      	add	r1, sp, #12
 800619a:	f7ff ff51 	bl	8006040 <__b2d>
 800619e:	460d      	mov	r5, r1
 80061a0:	9b01      	ldr	r3, [sp, #4]
 80061a2:	4689      	mov	r9, r1
 80061a4:	6919      	ldr	r1, [r3, #16]
 80061a6:	9b00      	ldr	r3, [sp, #0]
 80061a8:	4604      	mov	r4, r0
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	4630      	mov	r0, r6
 80061ae:	1ac9      	subs	r1, r1, r3
 80061b0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bfcd      	iteet	gt
 80061be:	463a      	movgt	r2, r7
 80061c0:	462a      	movle	r2, r5
 80061c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80061c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80061ca:	bfd8      	it	le
 80061cc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80061d0:	464b      	mov	r3, r9
 80061d2:	4622      	mov	r2, r4
 80061d4:	4659      	mov	r1, fp
 80061d6:	f7fa faa9 	bl	800072c <__aeabi_ddiv>
 80061da:	b005      	add	sp, #20
 80061dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061e0 <__copybits>:
 80061e0:	3901      	subs	r1, #1
 80061e2:	b570      	push	{r4, r5, r6, lr}
 80061e4:	1149      	asrs	r1, r1, #5
 80061e6:	6914      	ldr	r4, [r2, #16]
 80061e8:	3101      	adds	r1, #1
 80061ea:	f102 0314 	add.w	r3, r2, #20
 80061ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80061f6:	1f05      	subs	r5, r0, #4
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	d30c      	bcc.n	8006216 <__copybits+0x36>
 80061fc:	1aa3      	subs	r3, r4, r2
 80061fe:	3b11      	subs	r3, #17
 8006200:	f023 0303 	bic.w	r3, r3, #3
 8006204:	3211      	adds	r2, #17
 8006206:	42a2      	cmp	r2, r4
 8006208:	bf88      	it	hi
 800620a:	2300      	movhi	r3, #0
 800620c:	4418      	add	r0, r3
 800620e:	2300      	movs	r3, #0
 8006210:	4288      	cmp	r0, r1
 8006212:	d305      	bcc.n	8006220 <__copybits+0x40>
 8006214:	bd70      	pop	{r4, r5, r6, pc}
 8006216:	f853 6b04 	ldr.w	r6, [r3], #4
 800621a:	f845 6f04 	str.w	r6, [r5, #4]!
 800621e:	e7eb      	b.n	80061f8 <__copybits+0x18>
 8006220:	f840 3b04 	str.w	r3, [r0], #4
 8006224:	e7f4      	b.n	8006210 <__copybits+0x30>

08006226 <__any_on>:
 8006226:	f100 0214 	add.w	r2, r0, #20
 800622a:	6900      	ldr	r0, [r0, #16]
 800622c:	114b      	asrs	r3, r1, #5
 800622e:	4298      	cmp	r0, r3
 8006230:	b510      	push	{r4, lr}
 8006232:	db11      	blt.n	8006258 <__any_on+0x32>
 8006234:	dd0a      	ble.n	800624c <__any_on+0x26>
 8006236:	f011 011f 	ands.w	r1, r1, #31
 800623a:	d007      	beq.n	800624c <__any_on+0x26>
 800623c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006240:	fa24 f001 	lsr.w	r0, r4, r1
 8006244:	fa00 f101 	lsl.w	r1, r0, r1
 8006248:	428c      	cmp	r4, r1
 800624a:	d10b      	bne.n	8006264 <__any_on+0x3e>
 800624c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006250:	4293      	cmp	r3, r2
 8006252:	d803      	bhi.n	800625c <__any_on+0x36>
 8006254:	2000      	movs	r0, #0
 8006256:	bd10      	pop	{r4, pc}
 8006258:	4603      	mov	r3, r0
 800625a:	e7f7      	b.n	800624c <__any_on+0x26>
 800625c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006260:	2900      	cmp	r1, #0
 8006262:	d0f5      	beq.n	8006250 <__any_on+0x2a>
 8006264:	2001      	movs	r0, #1
 8006266:	e7f6      	b.n	8006256 <__any_on+0x30>

08006268 <sulp>:
 8006268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626c:	460f      	mov	r7, r1
 800626e:	4690      	mov	r8, r2
 8006270:	f7ff fec6 	bl	8006000 <__ulp>
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	f1b8 0f00 	cmp.w	r8, #0
 800627c:	d011      	beq.n	80062a2 <sulp+0x3a>
 800627e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006282:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006286:	2b00      	cmp	r3, #0
 8006288:	dd0b      	ble.n	80062a2 <sulp+0x3a>
 800628a:	2400      	movs	r4, #0
 800628c:	051b      	lsls	r3, r3, #20
 800628e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006292:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006296:	4622      	mov	r2, r4
 8006298:	462b      	mov	r3, r5
 800629a:	f7fa f91d 	bl	80004d8 <__aeabi_dmul>
 800629e:	4604      	mov	r4, r0
 80062a0:	460d      	mov	r5, r1
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062aa:	0000      	movs	r0, r0
 80062ac:	0000      	movs	r0, r0
	...

080062b0 <_strtod_l>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	b09f      	sub	sp, #124	@ 0x7c
 80062b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80062b8:	2200      	movs	r2, #0
 80062ba:	460c      	mov	r4, r1
 80062bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80062be:	f04f 0a00 	mov.w	sl, #0
 80062c2:	f04f 0b00 	mov.w	fp, #0
 80062c6:	460a      	mov	r2, r1
 80062c8:	9005      	str	r0, [sp, #20]
 80062ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80062cc:	7811      	ldrb	r1, [r2, #0]
 80062ce:	292b      	cmp	r1, #43	@ 0x2b
 80062d0:	d048      	beq.n	8006364 <_strtod_l+0xb4>
 80062d2:	d836      	bhi.n	8006342 <_strtod_l+0x92>
 80062d4:	290d      	cmp	r1, #13
 80062d6:	d830      	bhi.n	800633a <_strtod_l+0x8a>
 80062d8:	2908      	cmp	r1, #8
 80062da:	d830      	bhi.n	800633e <_strtod_l+0x8e>
 80062dc:	2900      	cmp	r1, #0
 80062de:	d039      	beq.n	8006354 <_strtod_l+0xa4>
 80062e0:	2200      	movs	r2, #0
 80062e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80062e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80062e6:	782a      	ldrb	r2, [r5, #0]
 80062e8:	2a30      	cmp	r2, #48	@ 0x30
 80062ea:	f040 80b1 	bne.w	8006450 <_strtod_l+0x1a0>
 80062ee:	786a      	ldrb	r2, [r5, #1]
 80062f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80062f4:	2a58      	cmp	r2, #88	@ 0x58
 80062f6:	d16c      	bne.n	80063d2 <_strtod_l+0x122>
 80062f8:	9302      	str	r3, [sp, #8]
 80062fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006538 <_strtod_l+0x288>)
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	ab1a      	add	r3, sp, #104	@ 0x68
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	9805      	ldr	r0, [sp, #20]
 8006306:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006308:	a919      	add	r1, sp, #100	@ 0x64
 800630a:	f001 f915 	bl	8007538 <__gethex>
 800630e:	f010 060f 	ands.w	r6, r0, #15
 8006312:	4604      	mov	r4, r0
 8006314:	d005      	beq.n	8006322 <_strtod_l+0x72>
 8006316:	2e06      	cmp	r6, #6
 8006318:	d126      	bne.n	8006368 <_strtod_l+0xb8>
 800631a:	2300      	movs	r3, #0
 800631c:	3501      	adds	r5, #1
 800631e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006320:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 8584 	bne.w	8006e32 <_strtod_l+0xb82>
 800632a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800632c:	b1bb      	cbz	r3, 800635e <_strtod_l+0xae>
 800632e:	4650      	mov	r0, sl
 8006330:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006334:	b01f      	add	sp, #124	@ 0x7c
 8006336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633a:	2920      	cmp	r1, #32
 800633c:	d1d0      	bne.n	80062e0 <_strtod_l+0x30>
 800633e:	3201      	adds	r2, #1
 8006340:	e7c3      	b.n	80062ca <_strtod_l+0x1a>
 8006342:	292d      	cmp	r1, #45	@ 0x2d
 8006344:	d1cc      	bne.n	80062e0 <_strtod_l+0x30>
 8006346:	2101      	movs	r1, #1
 8006348:	910b      	str	r1, [sp, #44]	@ 0x2c
 800634a:	1c51      	adds	r1, r2, #1
 800634c:	9119      	str	r1, [sp, #100]	@ 0x64
 800634e:	7852      	ldrb	r2, [r2, #1]
 8006350:	2a00      	cmp	r2, #0
 8006352:	d1c7      	bne.n	80062e4 <_strtod_l+0x34>
 8006354:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006356:	9419      	str	r4, [sp, #100]	@ 0x64
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 8568 	bne.w	8006e2e <_strtod_l+0xb7e>
 800635e:	4650      	mov	r0, sl
 8006360:	4659      	mov	r1, fp
 8006362:	e7e7      	b.n	8006334 <_strtod_l+0x84>
 8006364:	2100      	movs	r1, #0
 8006366:	e7ef      	b.n	8006348 <_strtod_l+0x98>
 8006368:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800636a:	b13a      	cbz	r2, 800637c <_strtod_l+0xcc>
 800636c:	2135      	movs	r1, #53	@ 0x35
 800636e:	a81c      	add	r0, sp, #112	@ 0x70
 8006370:	f7ff ff36 	bl	80061e0 <__copybits>
 8006374:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006376:	9805      	ldr	r0, [sp, #20]
 8006378:	f7ff fb10 	bl	800599c <_Bfree>
 800637c:	3e01      	subs	r6, #1
 800637e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006380:	2e04      	cmp	r6, #4
 8006382:	d806      	bhi.n	8006392 <_strtod_l+0xe2>
 8006384:	e8df f006 	tbb	[pc, r6]
 8006388:	201d0314 	.word	0x201d0314
 800638c:	14          	.byte	0x14
 800638d:	00          	.byte	0x00
 800638e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006392:	05e1      	lsls	r1, r4, #23
 8006394:	bf48      	it	mi
 8006396:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800639a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800639e:	0d1b      	lsrs	r3, r3, #20
 80063a0:	051b      	lsls	r3, r3, #20
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1bd      	bne.n	8006322 <_strtod_l+0x72>
 80063a6:	f7fe fb29 	bl	80049fc <__errno>
 80063aa:	2322      	movs	r3, #34	@ 0x22
 80063ac:	6003      	str	r3, [r0, #0]
 80063ae:	e7b8      	b.n	8006322 <_strtod_l+0x72>
 80063b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80063b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80063b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063c0:	e7e7      	b.n	8006392 <_strtod_l+0xe2>
 80063c2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800653c <_strtod_l+0x28c>
 80063c6:	e7e4      	b.n	8006392 <_strtod_l+0xe2>
 80063c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80063cc:	f04f 3aff 	mov.w	sl, #4294967295
 80063d0:	e7df      	b.n	8006392 <_strtod_l+0xe2>
 80063d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b30      	cmp	r3, #48	@ 0x30
 80063dc:	d0f9      	beq.n	80063d2 <_strtod_l+0x122>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d09f      	beq.n	8006322 <_strtod_l+0x72>
 80063e2:	2301      	movs	r3, #1
 80063e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063e8:	220a      	movs	r2, #10
 80063ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80063ec:	2300      	movs	r3, #0
 80063ee:	461f      	mov	r7, r3
 80063f0:	9308      	str	r3, [sp, #32]
 80063f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80063f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80063f6:	7805      	ldrb	r5, [r0, #0]
 80063f8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80063fc:	b2d9      	uxtb	r1, r3
 80063fe:	2909      	cmp	r1, #9
 8006400:	d928      	bls.n	8006454 <_strtod_l+0x1a4>
 8006402:	2201      	movs	r2, #1
 8006404:	494e      	ldr	r1, [pc, #312]	@ (8006540 <_strtod_l+0x290>)
 8006406:	f000 ffc7 	bl	8007398 <strncmp>
 800640a:	2800      	cmp	r0, #0
 800640c:	d032      	beq.n	8006474 <_strtod_l+0x1c4>
 800640e:	2000      	movs	r0, #0
 8006410:	462a      	mov	r2, r5
 8006412:	4681      	mov	r9, r0
 8006414:	463d      	mov	r5, r7
 8006416:	4603      	mov	r3, r0
 8006418:	2a65      	cmp	r2, #101	@ 0x65
 800641a:	d001      	beq.n	8006420 <_strtod_l+0x170>
 800641c:	2a45      	cmp	r2, #69	@ 0x45
 800641e:	d114      	bne.n	800644a <_strtod_l+0x19a>
 8006420:	b91d      	cbnz	r5, 800642a <_strtod_l+0x17a>
 8006422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006424:	4302      	orrs	r2, r0
 8006426:	d095      	beq.n	8006354 <_strtod_l+0xa4>
 8006428:	2500      	movs	r5, #0
 800642a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800642c:	1c62      	adds	r2, r4, #1
 800642e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006430:	7862      	ldrb	r2, [r4, #1]
 8006432:	2a2b      	cmp	r2, #43	@ 0x2b
 8006434:	d077      	beq.n	8006526 <_strtod_l+0x276>
 8006436:	2a2d      	cmp	r2, #45	@ 0x2d
 8006438:	d07b      	beq.n	8006532 <_strtod_l+0x282>
 800643a:	f04f 0c00 	mov.w	ip, #0
 800643e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006442:	2909      	cmp	r1, #9
 8006444:	f240 8082 	bls.w	800654c <_strtod_l+0x29c>
 8006448:	9419      	str	r4, [sp, #100]	@ 0x64
 800644a:	f04f 0800 	mov.w	r8, #0
 800644e:	e0a2      	b.n	8006596 <_strtod_l+0x2e6>
 8006450:	2300      	movs	r3, #0
 8006452:	e7c7      	b.n	80063e4 <_strtod_l+0x134>
 8006454:	2f08      	cmp	r7, #8
 8006456:	bfd5      	itete	le
 8006458:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800645a:	9908      	ldrgt	r1, [sp, #32]
 800645c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006460:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006464:	f100 0001 	add.w	r0, r0, #1
 8006468:	bfd4      	ite	le
 800646a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800646c:	9308      	strgt	r3, [sp, #32]
 800646e:	3701      	adds	r7, #1
 8006470:	9019      	str	r0, [sp, #100]	@ 0x64
 8006472:	e7bf      	b.n	80063f4 <_strtod_l+0x144>
 8006474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	9219      	str	r2, [sp, #100]	@ 0x64
 800647a:	785a      	ldrb	r2, [r3, #1]
 800647c:	b37f      	cbz	r7, 80064de <_strtod_l+0x22e>
 800647e:	4681      	mov	r9, r0
 8006480:	463d      	mov	r5, r7
 8006482:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006486:	2b09      	cmp	r3, #9
 8006488:	d912      	bls.n	80064b0 <_strtod_l+0x200>
 800648a:	2301      	movs	r3, #1
 800648c:	e7c4      	b.n	8006418 <_strtod_l+0x168>
 800648e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006490:	3001      	adds	r0, #1
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	9219      	str	r2, [sp, #100]	@ 0x64
 8006496:	785a      	ldrb	r2, [r3, #1]
 8006498:	2a30      	cmp	r2, #48	@ 0x30
 800649a:	d0f8      	beq.n	800648e <_strtod_l+0x1de>
 800649c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	f200 84cb 	bhi.w	8006e3c <_strtod_l+0xb8c>
 80064a6:	4681      	mov	r9, r0
 80064a8:	2000      	movs	r0, #0
 80064aa:	4605      	mov	r5, r0
 80064ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80064b0:	3a30      	subs	r2, #48	@ 0x30
 80064b2:	f100 0301 	add.w	r3, r0, #1
 80064b6:	d02a      	beq.n	800650e <_strtod_l+0x25e>
 80064b8:	4499      	add	r9, r3
 80064ba:	210a      	movs	r1, #10
 80064bc:	462b      	mov	r3, r5
 80064be:	eb00 0c05 	add.w	ip, r0, r5
 80064c2:	4563      	cmp	r3, ip
 80064c4:	d10d      	bne.n	80064e2 <_strtod_l+0x232>
 80064c6:	1c69      	adds	r1, r5, #1
 80064c8:	4401      	add	r1, r0
 80064ca:	4428      	add	r0, r5
 80064cc:	2808      	cmp	r0, #8
 80064ce:	dc16      	bgt.n	80064fe <_strtod_l+0x24e>
 80064d0:	230a      	movs	r3, #10
 80064d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80064d4:	fb03 2300 	mla	r3, r3, r0, r2
 80064d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80064da:	2300      	movs	r3, #0
 80064dc:	e018      	b.n	8006510 <_strtod_l+0x260>
 80064de:	4638      	mov	r0, r7
 80064e0:	e7da      	b.n	8006498 <_strtod_l+0x1e8>
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	f103 0301 	add.w	r3, r3, #1
 80064e8:	dc03      	bgt.n	80064f2 <_strtod_l+0x242>
 80064ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80064ec:	434e      	muls	r6, r1
 80064ee:	960a      	str	r6, [sp, #40]	@ 0x28
 80064f0:	e7e7      	b.n	80064c2 <_strtod_l+0x212>
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	bfde      	ittt	le
 80064f6:	9e08      	ldrle	r6, [sp, #32]
 80064f8:	434e      	mulle	r6, r1
 80064fa:	9608      	strle	r6, [sp, #32]
 80064fc:	e7e1      	b.n	80064c2 <_strtod_l+0x212>
 80064fe:	280f      	cmp	r0, #15
 8006500:	dceb      	bgt.n	80064da <_strtod_l+0x22a>
 8006502:	230a      	movs	r3, #10
 8006504:	9808      	ldr	r0, [sp, #32]
 8006506:	fb03 2300 	mla	r3, r3, r0, r2
 800650a:	9308      	str	r3, [sp, #32]
 800650c:	e7e5      	b.n	80064da <_strtod_l+0x22a>
 800650e:	4629      	mov	r1, r5
 8006510:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006512:	460d      	mov	r5, r1
 8006514:	1c50      	adds	r0, r2, #1
 8006516:	9019      	str	r0, [sp, #100]	@ 0x64
 8006518:	7852      	ldrb	r2, [r2, #1]
 800651a:	4618      	mov	r0, r3
 800651c:	e7b1      	b.n	8006482 <_strtod_l+0x1d2>
 800651e:	f04f 0900 	mov.w	r9, #0
 8006522:	2301      	movs	r3, #1
 8006524:	e77d      	b.n	8006422 <_strtod_l+0x172>
 8006526:	f04f 0c00 	mov.w	ip, #0
 800652a:	1ca2      	adds	r2, r4, #2
 800652c:	9219      	str	r2, [sp, #100]	@ 0x64
 800652e:	78a2      	ldrb	r2, [r4, #2]
 8006530:	e785      	b.n	800643e <_strtod_l+0x18e>
 8006532:	f04f 0c01 	mov.w	ip, #1
 8006536:	e7f8      	b.n	800652a <_strtod_l+0x27a>
 8006538:	08008390 	.word	0x08008390
 800653c:	7ff00000 	.word	0x7ff00000
 8006540:	08008378 	.word	0x08008378
 8006544:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006546:	1c51      	adds	r1, r2, #1
 8006548:	9119      	str	r1, [sp, #100]	@ 0x64
 800654a:	7852      	ldrb	r2, [r2, #1]
 800654c:	2a30      	cmp	r2, #48	@ 0x30
 800654e:	d0f9      	beq.n	8006544 <_strtod_l+0x294>
 8006550:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006554:	2908      	cmp	r1, #8
 8006556:	f63f af78 	bhi.w	800644a <_strtod_l+0x19a>
 800655a:	f04f 080a 	mov.w	r8, #10
 800655e:	3a30      	subs	r2, #48	@ 0x30
 8006560:	920e      	str	r2, [sp, #56]	@ 0x38
 8006562:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006564:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006566:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006568:	1c56      	adds	r6, r2, #1
 800656a:	9619      	str	r6, [sp, #100]	@ 0x64
 800656c:	7852      	ldrb	r2, [r2, #1]
 800656e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006572:	f1be 0f09 	cmp.w	lr, #9
 8006576:	d939      	bls.n	80065ec <_strtod_l+0x33c>
 8006578:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800657a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800657e:	1a76      	subs	r6, r6, r1
 8006580:	2e08      	cmp	r6, #8
 8006582:	dc03      	bgt.n	800658c <_strtod_l+0x2dc>
 8006584:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006586:	4588      	cmp	r8, r1
 8006588:	bfa8      	it	ge
 800658a:	4688      	movge	r8, r1
 800658c:	f1bc 0f00 	cmp.w	ip, #0
 8006590:	d001      	beq.n	8006596 <_strtod_l+0x2e6>
 8006592:	f1c8 0800 	rsb	r8, r8, #0
 8006596:	2d00      	cmp	r5, #0
 8006598:	d14e      	bne.n	8006638 <_strtod_l+0x388>
 800659a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800659c:	4308      	orrs	r0, r1
 800659e:	f47f aec0 	bne.w	8006322 <_strtod_l+0x72>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f47f aed6 	bne.w	8006354 <_strtod_l+0xa4>
 80065a8:	2a69      	cmp	r2, #105	@ 0x69
 80065aa:	d028      	beq.n	80065fe <_strtod_l+0x34e>
 80065ac:	dc25      	bgt.n	80065fa <_strtod_l+0x34a>
 80065ae:	2a49      	cmp	r2, #73	@ 0x49
 80065b0:	d025      	beq.n	80065fe <_strtod_l+0x34e>
 80065b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80065b4:	f47f aece 	bne.w	8006354 <_strtod_l+0xa4>
 80065b8:	499a      	ldr	r1, [pc, #616]	@ (8006824 <_strtod_l+0x574>)
 80065ba:	a819      	add	r0, sp, #100	@ 0x64
 80065bc:	f001 f9de 	bl	800797c <__match>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f43f aec7 	beq.w	8006354 <_strtod_l+0xa4>
 80065c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b28      	cmp	r3, #40	@ 0x28
 80065cc:	d12e      	bne.n	800662c <_strtod_l+0x37c>
 80065ce:	4996      	ldr	r1, [pc, #600]	@ (8006828 <_strtod_l+0x578>)
 80065d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80065d2:	a819      	add	r0, sp, #100	@ 0x64
 80065d4:	f001 f9e6 	bl	80079a4 <__hexnan>
 80065d8:	2805      	cmp	r0, #5
 80065da:	d127      	bne.n	800662c <_strtod_l+0x37c>
 80065dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80065e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80065e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80065ea:	e69a      	b.n	8006322 <_strtod_l+0x72>
 80065ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80065ee:	fb08 2101 	mla	r1, r8, r1, r2
 80065f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80065f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80065f8:	e7b5      	b.n	8006566 <_strtod_l+0x2b6>
 80065fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80065fc:	e7da      	b.n	80065b4 <_strtod_l+0x304>
 80065fe:	498b      	ldr	r1, [pc, #556]	@ (800682c <_strtod_l+0x57c>)
 8006600:	a819      	add	r0, sp, #100	@ 0x64
 8006602:	f001 f9bb 	bl	800797c <__match>
 8006606:	2800      	cmp	r0, #0
 8006608:	f43f aea4 	beq.w	8006354 <_strtod_l+0xa4>
 800660c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800660e:	4988      	ldr	r1, [pc, #544]	@ (8006830 <_strtod_l+0x580>)
 8006610:	3b01      	subs	r3, #1
 8006612:	a819      	add	r0, sp, #100	@ 0x64
 8006614:	9319      	str	r3, [sp, #100]	@ 0x64
 8006616:	f001 f9b1 	bl	800797c <__match>
 800661a:	b910      	cbnz	r0, 8006622 <_strtod_l+0x372>
 800661c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800661e:	3301      	adds	r3, #1
 8006620:	9319      	str	r3, [sp, #100]	@ 0x64
 8006622:	f04f 0a00 	mov.w	sl, #0
 8006626:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006834 <_strtod_l+0x584>
 800662a:	e67a      	b.n	8006322 <_strtod_l+0x72>
 800662c:	4882      	ldr	r0, [pc, #520]	@ (8006838 <_strtod_l+0x588>)
 800662e:	f000 fee3 	bl	80073f8 <nan>
 8006632:	4682      	mov	sl, r0
 8006634:	468b      	mov	fp, r1
 8006636:	e674      	b.n	8006322 <_strtod_l+0x72>
 8006638:	eba8 0309 	sub.w	r3, r8, r9
 800663c:	2f00      	cmp	r7, #0
 800663e:	bf08      	it	eq
 8006640:	462f      	moveq	r7, r5
 8006642:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006644:	2d10      	cmp	r5, #16
 8006646:	462c      	mov	r4, r5
 8006648:	9309      	str	r3, [sp, #36]	@ 0x24
 800664a:	bfa8      	it	ge
 800664c:	2410      	movge	r4, #16
 800664e:	f7f9 fec9 	bl	80003e4 <__aeabi_ui2d>
 8006652:	2d09      	cmp	r5, #9
 8006654:	4682      	mov	sl, r0
 8006656:	468b      	mov	fp, r1
 8006658:	dc11      	bgt.n	800667e <_strtod_l+0x3ce>
 800665a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	f43f ae60 	beq.w	8006322 <_strtod_l+0x72>
 8006662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006664:	dd76      	ble.n	8006754 <_strtod_l+0x4a4>
 8006666:	2b16      	cmp	r3, #22
 8006668:	dc5d      	bgt.n	8006726 <_strtod_l+0x476>
 800666a:	4974      	ldr	r1, [pc, #464]	@ (800683c <_strtod_l+0x58c>)
 800666c:	4652      	mov	r2, sl
 800666e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006672:	465b      	mov	r3, fp
 8006674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006678:	f7f9 ff2e 	bl	80004d8 <__aeabi_dmul>
 800667c:	e7d9      	b.n	8006632 <_strtod_l+0x382>
 800667e:	4b6f      	ldr	r3, [pc, #444]	@ (800683c <_strtod_l+0x58c>)
 8006680:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006684:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006688:	f7f9 ff26 	bl	80004d8 <__aeabi_dmul>
 800668c:	4682      	mov	sl, r0
 800668e:	9808      	ldr	r0, [sp, #32]
 8006690:	468b      	mov	fp, r1
 8006692:	f7f9 fea7 	bl	80003e4 <__aeabi_ui2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4650      	mov	r0, sl
 800669c:	4659      	mov	r1, fp
 800669e:	f7f9 fd65 	bl	800016c <__adddf3>
 80066a2:	2d0f      	cmp	r5, #15
 80066a4:	4682      	mov	sl, r0
 80066a6:	468b      	mov	fp, r1
 80066a8:	ddd7      	ble.n	800665a <_strtod_l+0x3aa>
 80066aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ac:	1b2c      	subs	r4, r5, r4
 80066ae:	441c      	add	r4, r3
 80066b0:	2c00      	cmp	r4, #0
 80066b2:	f340 8096 	ble.w	80067e2 <_strtod_l+0x532>
 80066b6:	f014 030f 	ands.w	r3, r4, #15
 80066ba:	d00a      	beq.n	80066d2 <_strtod_l+0x422>
 80066bc:	495f      	ldr	r1, [pc, #380]	@ (800683c <_strtod_l+0x58c>)
 80066be:	4652      	mov	r2, sl
 80066c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c8:	465b      	mov	r3, fp
 80066ca:	f7f9 ff05 	bl	80004d8 <__aeabi_dmul>
 80066ce:	4682      	mov	sl, r0
 80066d0:	468b      	mov	fp, r1
 80066d2:	f034 040f 	bics.w	r4, r4, #15
 80066d6:	d073      	beq.n	80067c0 <_strtod_l+0x510>
 80066d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80066dc:	dd48      	ble.n	8006770 <_strtod_l+0x4c0>
 80066de:	2400      	movs	r4, #0
 80066e0:	46a0      	mov	r8, r4
 80066e2:	46a1      	mov	r9, r4
 80066e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80066e6:	2322      	movs	r3, #34	@ 0x22
 80066e8:	f04f 0a00 	mov.w	sl, #0
 80066ec:	9a05      	ldr	r2, [sp, #20]
 80066ee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006834 <_strtod_l+0x584>
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f43f ae13 	beq.w	8006322 <_strtod_l+0x72>
 80066fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066fe:	9805      	ldr	r0, [sp, #20]
 8006700:	f7ff f94c 	bl	800599c <_Bfree>
 8006704:	4649      	mov	r1, r9
 8006706:	9805      	ldr	r0, [sp, #20]
 8006708:	f7ff f948 	bl	800599c <_Bfree>
 800670c:	4641      	mov	r1, r8
 800670e:	9805      	ldr	r0, [sp, #20]
 8006710:	f7ff f944 	bl	800599c <_Bfree>
 8006714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006716:	9805      	ldr	r0, [sp, #20]
 8006718:	f7ff f940 	bl	800599c <_Bfree>
 800671c:	4621      	mov	r1, r4
 800671e:	9805      	ldr	r0, [sp, #20]
 8006720:	f7ff f93c 	bl	800599c <_Bfree>
 8006724:	e5fd      	b.n	8006322 <_strtod_l+0x72>
 8006726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006728:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800672c:	4293      	cmp	r3, r2
 800672e:	dbbc      	blt.n	80066aa <_strtod_l+0x3fa>
 8006730:	4c42      	ldr	r4, [pc, #264]	@ (800683c <_strtod_l+0x58c>)
 8006732:	f1c5 050f 	rsb	r5, r5, #15
 8006736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800673a:	4652      	mov	r2, sl
 800673c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006740:	465b      	mov	r3, fp
 8006742:	f7f9 fec9 	bl	80004d8 <__aeabi_dmul>
 8006746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006748:	1b5d      	subs	r5, r3, r5
 800674a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800674e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006752:	e791      	b.n	8006678 <_strtod_l+0x3c8>
 8006754:	3316      	adds	r3, #22
 8006756:	dba8      	blt.n	80066aa <_strtod_l+0x3fa>
 8006758:	4b38      	ldr	r3, [pc, #224]	@ (800683c <_strtod_l+0x58c>)
 800675a:	eba9 0808 	sub.w	r8, r9, r8
 800675e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006762:	4650      	mov	r0, sl
 8006764:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006768:	4659      	mov	r1, fp
 800676a:	f7f9 ffdf 	bl	800072c <__aeabi_ddiv>
 800676e:	e760      	b.n	8006632 <_strtod_l+0x382>
 8006770:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <_strtod_l+0x590>)
 8006772:	4650      	mov	r0, sl
 8006774:	9308      	str	r3, [sp, #32]
 8006776:	2300      	movs	r3, #0
 8006778:	4659      	mov	r1, fp
 800677a:	461e      	mov	r6, r3
 800677c:	1124      	asrs	r4, r4, #4
 800677e:	2c01      	cmp	r4, #1
 8006780:	dc21      	bgt.n	80067c6 <_strtod_l+0x516>
 8006782:	b10b      	cbz	r3, 8006788 <_strtod_l+0x4d8>
 8006784:	4682      	mov	sl, r0
 8006786:	468b      	mov	fp, r1
 8006788:	492d      	ldr	r1, [pc, #180]	@ (8006840 <_strtod_l+0x590>)
 800678a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800678e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006792:	4652      	mov	r2, sl
 8006794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006798:	465b      	mov	r3, fp
 800679a:	f7f9 fe9d 	bl	80004d8 <__aeabi_dmul>
 800679e:	4b25      	ldr	r3, [pc, #148]	@ (8006834 <_strtod_l+0x584>)
 80067a0:	460a      	mov	r2, r1
 80067a2:	400b      	ands	r3, r1
 80067a4:	4927      	ldr	r1, [pc, #156]	@ (8006844 <_strtod_l+0x594>)
 80067a6:	4682      	mov	sl, r0
 80067a8:	428b      	cmp	r3, r1
 80067aa:	d898      	bhi.n	80066de <_strtod_l+0x42e>
 80067ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80067b0:	428b      	cmp	r3, r1
 80067b2:	bf86      	itte	hi
 80067b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80067b8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006848 <_strtod_l+0x598>
 80067bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80067c0:	2300      	movs	r3, #0
 80067c2:	9308      	str	r3, [sp, #32]
 80067c4:	e07a      	b.n	80068bc <_strtod_l+0x60c>
 80067c6:	07e2      	lsls	r2, r4, #31
 80067c8:	d505      	bpl.n	80067d6 <_strtod_l+0x526>
 80067ca:	9b08      	ldr	r3, [sp, #32]
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f7f9 fe82 	bl	80004d8 <__aeabi_dmul>
 80067d4:	2301      	movs	r3, #1
 80067d6:	9a08      	ldr	r2, [sp, #32]
 80067d8:	3601      	adds	r6, #1
 80067da:	3208      	adds	r2, #8
 80067dc:	1064      	asrs	r4, r4, #1
 80067de:	9208      	str	r2, [sp, #32]
 80067e0:	e7cd      	b.n	800677e <_strtod_l+0x4ce>
 80067e2:	d0ed      	beq.n	80067c0 <_strtod_l+0x510>
 80067e4:	4264      	negs	r4, r4
 80067e6:	f014 020f 	ands.w	r2, r4, #15
 80067ea:	d00a      	beq.n	8006802 <_strtod_l+0x552>
 80067ec:	4b13      	ldr	r3, [pc, #76]	@ (800683c <_strtod_l+0x58c>)
 80067ee:	4650      	mov	r0, sl
 80067f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f4:	4659      	mov	r1, fp
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 ff97 	bl	800072c <__aeabi_ddiv>
 80067fe:	4682      	mov	sl, r0
 8006800:	468b      	mov	fp, r1
 8006802:	1124      	asrs	r4, r4, #4
 8006804:	d0dc      	beq.n	80067c0 <_strtod_l+0x510>
 8006806:	2c1f      	cmp	r4, #31
 8006808:	dd20      	ble.n	800684c <_strtod_l+0x59c>
 800680a:	2400      	movs	r4, #0
 800680c:	46a0      	mov	r8, r4
 800680e:	46a1      	mov	r9, r4
 8006810:	940a      	str	r4, [sp, #40]	@ 0x28
 8006812:	2322      	movs	r3, #34	@ 0x22
 8006814:	9a05      	ldr	r2, [sp, #20]
 8006816:	f04f 0a00 	mov.w	sl, #0
 800681a:	f04f 0b00 	mov.w	fp, #0
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	e768      	b.n	80066f4 <_strtod_l+0x444>
 8006822:	bf00      	nop
 8006824:	08008163 	.word	0x08008163
 8006828:	0800837c 	.word	0x0800837c
 800682c:	0800815b 	.word	0x0800815b
 8006830:	08008192 	.word	0x08008192
 8006834:	7ff00000 	.word	0x7ff00000
 8006838:	08008525 	.word	0x08008525
 800683c:	080082b0 	.word	0x080082b0
 8006840:	08008288 	.word	0x08008288
 8006844:	7ca00000 	.word	0x7ca00000
 8006848:	7fefffff 	.word	0x7fefffff
 800684c:	f014 0310 	ands.w	r3, r4, #16
 8006850:	bf18      	it	ne
 8006852:	236a      	movne	r3, #106	@ 0x6a
 8006854:	4650      	mov	r0, sl
 8006856:	9308      	str	r3, [sp, #32]
 8006858:	4659      	mov	r1, fp
 800685a:	2300      	movs	r3, #0
 800685c:	4ea9      	ldr	r6, [pc, #676]	@ (8006b04 <_strtod_l+0x854>)
 800685e:	07e2      	lsls	r2, r4, #31
 8006860:	d504      	bpl.n	800686c <_strtod_l+0x5bc>
 8006862:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006866:	f7f9 fe37 	bl	80004d8 <__aeabi_dmul>
 800686a:	2301      	movs	r3, #1
 800686c:	1064      	asrs	r4, r4, #1
 800686e:	f106 0608 	add.w	r6, r6, #8
 8006872:	d1f4      	bne.n	800685e <_strtod_l+0x5ae>
 8006874:	b10b      	cbz	r3, 800687a <_strtod_l+0x5ca>
 8006876:	4682      	mov	sl, r0
 8006878:	468b      	mov	fp, r1
 800687a:	9b08      	ldr	r3, [sp, #32]
 800687c:	b1b3      	cbz	r3, 80068ac <_strtod_l+0x5fc>
 800687e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006882:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006886:	2b00      	cmp	r3, #0
 8006888:	4659      	mov	r1, fp
 800688a:	dd0f      	ble.n	80068ac <_strtod_l+0x5fc>
 800688c:	2b1f      	cmp	r3, #31
 800688e:	dd57      	ble.n	8006940 <_strtod_l+0x690>
 8006890:	2b34      	cmp	r3, #52	@ 0x34
 8006892:	bfd8      	it	le
 8006894:	f04f 33ff 	movle.w	r3, #4294967295
 8006898:	f04f 0a00 	mov.w	sl, #0
 800689c:	bfcf      	iteee	gt
 800689e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80068a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80068a6:	4093      	lslle	r3, r2
 80068a8:	ea03 0b01 	andle.w	fp, r3, r1
 80068ac:	2200      	movs	r2, #0
 80068ae:	2300      	movs	r3, #0
 80068b0:	4650      	mov	r0, sl
 80068b2:	4659      	mov	r1, fp
 80068b4:	f7fa f878 	bl	80009a8 <__aeabi_dcmpeq>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d1a6      	bne.n	800680a <_strtod_l+0x55a>
 80068bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068be:	463a      	mov	r2, r7
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80068c4:	462b      	mov	r3, r5
 80068c6:	9805      	ldr	r0, [sp, #20]
 80068c8:	f7ff f8d0 	bl	8005a6c <__s2b>
 80068cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f43f af05 	beq.w	80066de <_strtod_l+0x42e>
 80068d4:	2400      	movs	r4, #0
 80068d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068d8:	eba9 0308 	sub.w	r3, r9, r8
 80068dc:	2a00      	cmp	r2, #0
 80068de:	bfa8      	it	ge
 80068e0:	2300      	movge	r3, #0
 80068e2:	46a0      	mov	r8, r4
 80068e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80068e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80068ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80068ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ee:	9805      	ldr	r0, [sp, #20]
 80068f0:	6859      	ldr	r1, [r3, #4]
 80068f2:	f7ff f813 	bl	800591c <_Balloc>
 80068f6:	4681      	mov	r9, r0
 80068f8:	2800      	cmp	r0, #0
 80068fa:	f43f aef4 	beq.w	80066e6 <_strtod_l+0x436>
 80068fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006900:	300c      	adds	r0, #12
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	f103 010c 	add.w	r1, r3, #12
 8006908:	3202      	adds	r2, #2
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	f000 fd66 	bl	80073dc <memcpy>
 8006910:	ab1c      	add	r3, sp, #112	@ 0x70
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	4652      	mov	r2, sl
 800691a:	465b      	mov	r3, fp
 800691c:	9805      	ldr	r0, [sp, #20]
 800691e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006922:	f7ff fbd5 	bl	80060d0 <__d2b>
 8006926:	901a      	str	r0, [sp, #104]	@ 0x68
 8006928:	2800      	cmp	r0, #0
 800692a:	f43f aedc 	beq.w	80066e6 <_strtod_l+0x436>
 800692e:	2101      	movs	r1, #1
 8006930:	9805      	ldr	r0, [sp, #20]
 8006932:	f7ff f931 	bl	8005b98 <__i2b>
 8006936:	4680      	mov	r8, r0
 8006938:	b948      	cbnz	r0, 800694e <_strtod_l+0x69e>
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	e6d2      	b.n	80066e6 <_strtod_l+0x436>
 8006940:	f04f 32ff 	mov.w	r2, #4294967295
 8006944:	fa02 f303 	lsl.w	r3, r2, r3
 8006948:	ea03 0a0a 	and.w	sl, r3, sl
 800694c:	e7ae      	b.n	80068ac <_strtod_l+0x5fc>
 800694e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006950:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006952:	2d00      	cmp	r5, #0
 8006954:	bfab      	itete	ge
 8006956:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006958:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800695a:	18ef      	addge	r7, r5, r3
 800695c:	1b5e      	sublt	r6, r3, r5
 800695e:	9b08      	ldr	r3, [sp, #32]
 8006960:	bfa8      	it	ge
 8006962:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006964:	eba5 0503 	sub.w	r5, r5, r3
 8006968:	4415      	add	r5, r2
 800696a:	4b67      	ldr	r3, [pc, #412]	@ (8006b08 <_strtod_l+0x858>)
 800696c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006970:	bfb8      	it	lt
 8006972:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006974:	429d      	cmp	r5, r3
 8006976:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800697a:	da50      	bge.n	8006a1e <_strtod_l+0x76e>
 800697c:	1b5b      	subs	r3, r3, r5
 800697e:	2b1f      	cmp	r3, #31
 8006980:	f04f 0101 	mov.w	r1, #1
 8006984:	eba2 0203 	sub.w	r2, r2, r3
 8006988:	dc3d      	bgt.n	8006a06 <_strtod_l+0x756>
 800698a:	fa01 f303 	lsl.w	r3, r1, r3
 800698e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006990:	2300      	movs	r3, #0
 8006992:	9310      	str	r3, [sp, #64]	@ 0x40
 8006994:	18bd      	adds	r5, r7, r2
 8006996:	9b08      	ldr	r3, [sp, #32]
 8006998:	42af      	cmp	r7, r5
 800699a:	4416      	add	r6, r2
 800699c:	441e      	add	r6, r3
 800699e:	463b      	mov	r3, r7
 80069a0:	bfa8      	it	ge
 80069a2:	462b      	movge	r3, r5
 80069a4:	42b3      	cmp	r3, r6
 80069a6:	bfa8      	it	ge
 80069a8:	4633      	movge	r3, r6
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bfc2      	ittt	gt
 80069ae:	1aed      	subgt	r5, r5, r3
 80069b0:	1af6      	subgt	r6, r6, r3
 80069b2:	1aff      	subgt	r7, r7, r3
 80069b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dd16      	ble.n	80069e8 <_strtod_l+0x738>
 80069ba:	4641      	mov	r1, r8
 80069bc:	461a      	mov	r2, r3
 80069be:	9805      	ldr	r0, [sp, #20]
 80069c0:	f7ff f9a8 	bl	8005d14 <__pow5mult>
 80069c4:	4680      	mov	r8, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d0b7      	beq.n	800693a <_strtod_l+0x68a>
 80069ca:	4601      	mov	r1, r0
 80069cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80069ce:	9805      	ldr	r0, [sp, #20]
 80069d0:	f7ff f8f8 	bl	8005bc4 <__multiply>
 80069d4:	900e      	str	r0, [sp, #56]	@ 0x38
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f ae85 	beq.w	80066e6 <_strtod_l+0x436>
 80069dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069de:	9805      	ldr	r0, [sp, #20]
 80069e0:	f7fe ffdc 	bl	800599c <_Bfree>
 80069e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	dc1d      	bgt.n	8006a28 <_strtod_l+0x778>
 80069ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	dd23      	ble.n	8006a3a <_strtod_l+0x78a>
 80069f2:	4649      	mov	r1, r9
 80069f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80069f6:	9805      	ldr	r0, [sp, #20]
 80069f8:	f7ff f98c 	bl	8005d14 <__pow5mult>
 80069fc:	4681      	mov	r9, r0
 80069fe:	b9e0      	cbnz	r0, 8006a3a <_strtod_l+0x78a>
 8006a00:	f04f 0900 	mov.w	r9, #0
 8006a04:	e66f      	b.n	80066e6 <_strtod_l+0x436>
 8006a06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006a0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006a0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006a12:	35e2      	adds	r5, #226	@ 0xe2
 8006a14:	fa01 f305 	lsl.w	r3, r1, r5
 8006a18:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006a1c:	e7ba      	b.n	8006994 <_strtod_l+0x6e4>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a22:	2301      	movs	r3, #1
 8006a24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a26:	e7b5      	b.n	8006994 <_strtod_l+0x6e4>
 8006a28:	462a      	mov	r2, r5
 8006a2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a2c:	9805      	ldr	r0, [sp, #20]
 8006a2e:	f7ff f9cb 	bl	8005dc8 <__lshift>
 8006a32:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d1d9      	bne.n	80069ec <_strtod_l+0x73c>
 8006a38:	e655      	b.n	80066e6 <_strtod_l+0x436>
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	dd07      	ble.n	8006a4e <_strtod_l+0x79e>
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4632      	mov	r2, r6
 8006a42:	9805      	ldr	r0, [sp, #20]
 8006a44:	f7ff f9c0 	bl	8005dc8 <__lshift>
 8006a48:	4681      	mov	r9, r0
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d0d8      	beq.n	8006a00 <_strtod_l+0x750>
 8006a4e:	2f00      	cmp	r7, #0
 8006a50:	dd08      	ble.n	8006a64 <_strtod_l+0x7b4>
 8006a52:	4641      	mov	r1, r8
 8006a54:	463a      	mov	r2, r7
 8006a56:	9805      	ldr	r0, [sp, #20]
 8006a58:	f7ff f9b6 	bl	8005dc8 <__lshift>
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f43f ae41 	beq.w	80066e6 <_strtod_l+0x436>
 8006a64:	464a      	mov	r2, r9
 8006a66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a68:	9805      	ldr	r0, [sp, #20]
 8006a6a:	f7ff fa35 	bl	8005ed8 <__mdiff>
 8006a6e:	4604      	mov	r4, r0
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f43f ae38 	beq.w	80066e6 <_strtod_l+0x436>
 8006a76:	68c3      	ldr	r3, [r0, #12]
 8006a78:	4641      	mov	r1, r8
 8006a7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60c3      	str	r3, [r0, #12]
 8006a80:	f7ff fa0e 	bl	8005ea0 <__mcmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	da45      	bge.n	8006b14 <_strtod_l+0x864>
 8006a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8006a8e:	d16b      	bne.n	8006b68 <_strtod_l+0x8b8>
 8006a90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d167      	bne.n	8006b68 <_strtod_l+0x8b8>
 8006a98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a9c:	0d1b      	lsrs	r3, r3, #20
 8006a9e:	051b      	lsls	r3, r3, #20
 8006aa0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006aa4:	d960      	bls.n	8006b68 <_strtod_l+0x8b8>
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	b913      	cbnz	r3, 8006ab0 <_strtod_l+0x800>
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	dd5b      	ble.n	8006b68 <_strtod_l+0x8b8>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	9805      	ldr	r0, [sp, #20]
 8006ab6:	f7ff f987 	bl	8005dc8 <__lshift>
 8006aba:	4641      	mov	r1, r8
 8006abc:	4604      	mov	r4, r0
 8006abe:	f7ff f9ef 	bl	8005ea0 <__mcmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	dd50      	ble.n	8006b68 <_strtod_l+0x8b8>
 8006ac6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006aca:	9a08      	ldr	r2, [sp, #32]
 8006acc:	0d1b      	lsrs	r3, r3, #20
 8006ace:	051b      	lsls	r3, r3, #20
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	d06a      	beq.n	8006baa <_strtod_l+0x8fa>
 8006ad4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ad8:	d867      	bhi.n	8006baa <_strtod_l+0x8fa>
 8006ada:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ade:	f67f ae98 	bls.w	8006812 <_strtod_l+0x562>
 8006ae2:	4650      	mov	r0, sl
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	4b09      	ldr	r3, [pc, #36]	@ (8006b0c <_strtod_l+0x85c>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f7f9 fcf5 	bl	80004d8 <__aeabi_dmul>
 8006aee:	4b08      	ldr	r3, [pc, #32]	@ (8006b10 <_strtod_l+0x860>)
 8006af0:	4682      	mov	sl, r0
 8006af2:	400b      	ands	r3, r1
 8006af4:	468b      	mov	fp, r1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f47f ae00 	bne.w	80066fc <_strtod_l+0x44c>
 8006afc:	2322      	movs	r3, #34	@ 0x22
 8006afe:	9a05      	ldr	r2, [sp, #20]
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e5fb      	b.n	80066fc <_strtod_l+0x44c>
 8006b04:	080083a8 	.word	0x080083a8
 8006b08:	fffffc02 	.word	0xfffffc02
 8006b0c:	39500000 	.word	0x39500000
 8006b10:	7ff00000 	.word	0x7ff00000
 8006b14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006b18:	d165      	bne.n	8006be6 <_strtod_l+0x936>
 8006b1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006b1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b20:	b35a      	cbz	r2, 8006b7a <_strtod_l+0x8ca>
 8006b22:	4a99      	ldr	r2, [pc, #612]	@ (8006d88 <_strtod_l+0xad8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d12b      	bne.n	8006b80 <_strtod_l+0x8d0>
 8006b28:	9b08      	ldr	r3, [sp, #32]
 8006b2a:	4651      	mov	r1, sl
 8006b2c:	b303      	cbz	r3, 8006b70 <_strtod_l+0x8c0>
 8006b2e:	465a      	mov	r2, fp
 8006b30:	4b96      	ldr	r3, [pc, #600]	@ (8006d8c <_strtod_l+0xadc>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	d81b      	bhi.n	8006b76 <_strtod_l+0x8c6>
 8006b3e:	0d1b      	lsrs	r3, r3, #20
 8006b40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	4299      	cmp	r1, r3
 8006b4a:	d119      	bne.n	8006b80 <_strtod_l+0x8d0>
 8006b4c:	4b90      	ldr	r3, [pc, #576]	@ (8006d90 <_strtod_l+0xae0>)
 8006b4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d102      	bne.n	8006b5a <_strtod_l+0x8aa>
 8006b54:	3101      	adds	r1, #1
 8006b56:	f43f adc6 	beq.w	80066e6 <_strtod_l+0x436>
 8006b5a:	f04f 0a00 	mov.w	sl, #0
 8006b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8006d8c <_strtod_l+0xadc>)
 8006b60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b62:	401a      	ands	r2, r3
 8006b64:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006b68:	9b08      	ldr	r3, [sp, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1b9      	bne.n	8006ae2 <_strtod_l+0x832>
 8006b6e:	e5c5      	b.n	80066fc <_strtod_l+0x44c>
 8006b70:	f04f 33ff 	mov.w	r3, #4294967295
 8006b74:	e7e8      	b.n	8006b48 <_strtod_l+0x898>
 8006b76:	4613      	mov	r3, r2
 8006b78:	e7e6      	b.n	8006b48 <_strtod_l+0x898>
 8006b7a:	ea53 030a 	orrs.w	r3, r3, sl
 8006b7e:	d0a2      	beq.n	8006ac6 <_strtod_l+0x816>
 8006b80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b82:	b1db      	cbz	r3, 8006bbc <_strtod_l+0x90c>
 8006b84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b86:	4213      	tst	r3, r2
 8006b88:	d0ee      	beq.n	8006b68 <_strtod_l+0x8b8>
 8006b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	4659      	mov	r1, fp
 8006b90:	9a08      	ldr	r2, [sp, #32]
 8006b92:	b1bb      	cbz	r3, 8006bc4 <_strtod_l+0x914>
 8006b94:	f7ff fb68 	bl	8006268 <sulp>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ba0:	f7f9 fae4 	bl	800016c <__adddf3>
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	468b      	mov	fp, r1
 8006ba8:	e7de      	b.n	8006b68 <_strtod_l+0x8b8>
 8006baa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006bae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006bb2:	f04f 3aff 	mov.w	sl, #4294967295
 8006bb6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006bba:	e7d5      	b.n	8006b68 <_strtod_l+0x8b8>
 8006bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bbe:	ea13 0f0a 	tst.w	r3, sl
 8006bc2:	e7e1      	b.n	8006b88 <_strtod_l+0x8d8>
 8006bc4:	f7ff fb50 	bl	8006268 <sulp>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bd0:	f7f9 faca 	bl	8000168 <__aeabi_dsub>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4682      	mov	sl, r0
 8006bda:	468b      	mov	fp, r1
 8006bdc:	f7f9 fee4 	bl	80009a8 <__aeabi_dcmpeq>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d0c1      	beq.n	8006b68 <_strtod_l+0x8b8>
 8006be4:	e615      	b.n	8006812 <_strtod_l+0x562>
 8006be6:	4641      	mov	r1, r8
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7ff fac9 	bl	8006180 <__ratio>
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	460f      	mov	r7, r1
 8006bf8:	f7f9 feea 	bl	80009d0 <__aeabi_dcmple>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d06d      	beq.n	8006cdc <_strtod_l+0xa2c>
 8006c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d178      	bne.n	8006cf8 <_strtod_l+0xa48>
 8006c06:	f1ba 0f00 	cmp.w	sl, #0
 8006c0a:	d156      	bne.n	8006cba <_strtod_l+0xa0a>
 8006c0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d158      	bne.n	8006cc8 <_strtod_l+0xa18>
 8006c16:	2200      	movs	r2, #0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8006d94 <_strtod_l+0xae4>)
 8006c1e:	f7f9 fecd 	bl	80009bc <__aeabi_dcmplt>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d157      	bne.n	8006cd6 <_strtod_l+0xa26>
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8006d98 <_strtod_l+0xae8>)
 8006c2e:	f7f9 fc53 	bl	80004d8 <__aeabi_dmul>
 8006c32:	4606      	mov	r6, r0
 8006c34:	460f      	mov	r7, r1
 8006c36:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006c3a:	9606      	str	r6, [sp, #24]
 8006c3c:	9307      	str	r3, [sp, #28]
 8006c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c42:	4d52      	ldr	r5, [pc, #328]	@ (8006d8c <_strtod_l+0xadc>)
 8006c44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006c48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c4a:	401d      	ands	r5, r3
 8006c4c:	4b53      	ldr	r3, [pc, #332]	@ (8006d9c <_strtod_l+0xaec>)
 8006c4e:	429d      	cmp	r5, r3
 8006c50:	f040 80aa 	bne.w	8006da8 <_strtod_l+0xaf8>
 8006c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c56:	4650      	mov	r0, sl
 8006c58:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006c5c:	4659      	mov	r1, fp
 8006c5e:	f7ff f9cf 	bl	8006000 <__ulp>
 8006c62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c66:	f7f9 fc37 	bl	80004d8 <__aeabi_dmul>
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	465b      	mov	r3, fp
 8006c6e:	f7f9 fa7d 	bl	800016c <__adddf3>
 8006c72:	460b      	mov	r3, r1
 8006c74:	4945      	ldr	r1, [pc, #276]	@ (8006d8c <_strtod_l+0xadc>)
 8006c76:	4a4a      	ldr	r2, [pc, #296]	@ (8006da0 <_strtod_l+0xaf0>)
 8006c78:	4019      	ands	r1, r3
 8006c7a:	4291      	cmp	r1, r2
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	d942      	bls.n	8006d06 <_strtod_l+0xa56>
 8006c80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c82:	4b43      	ldr	r3, [pc, #268]	@ (8006d90 <_strtod_l+0xae0>)
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d103      	bne.n	8006c90 <_strtod_l+0x9e0>
 8006c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	f43f ad2b 	beq.w	80066e6 <_strtod_l+0x436>
 8006c90:	f04f 3aff 	mov.w	sl, #4294967295
 8006c94:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006d90 <_strtod_l+0xae0>
 8006c98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c9a:	9805      	ldr	r0, [sp, #20]
 8006c9c:	f7fe fe7e 	bl	800599c <_Bfree>
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	9805      	ldr	r0, [sp, #20]
 8006ca4:	f7fe fe7a 	bl	800599c <_Bfree>
 8006ca8:	4641      	mov	r1, r8
 8006caa:	9805      	ldr	r0, [sp, #20]
 8006cac:	f7fe fe76 	bl	800599c <_Bfree>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	9805      	ldr	r0, [sp, #20]
 8006cb4:	f7fe fe72 	bl	800599c <_Bfree>
 8006cb8:	e618      	b.n	80068ec <_strtod_l+0x63c>
 8006cba:	f1ba 0f01 	cmp.w	sl, #1
 8006cbe:	d103      	bne.n	8006cc8 <_strtod_l+0xa18>
 8006cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f43f ada5 	beq.w	8006812 <_strtod_l+0x562>
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4b36      	ldr	r3, [pc, #216]	@ (8006da4 <_strtod_l+0xaf4>)
 8006ccc:	2600      	movs	r6, #0
 8006cce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cd2:	4f30      	ldr	r7, [pc, #192]	@ (8006d94 <_strtod_l+0xae4>)
 8006cd4:	e7b3      	b.n	8006c3e <_strtod_l+0x98e>
 8006cd6:	2600      	movs	r6, #0
 8006cd8:	4f2f      	ldr	r7, [pc, #188]	@ (8006d98 <_strtod_l+0xae8>)
 8006cda:	e7ac      	b.n	8006c36 <_strtod_l+0x986>
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d98 <_strtod_l+0xae8>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cea:	4606      	mov	r6, r0
 8006cec:	460f      	mov	r7, r1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0a1      	beq.n	8006c36 <_strtod_l+0x986>
 8006cf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006cf6:	e7a2      	b.n	8006c3e <_strtod_l+0x98e>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4b26      	ldr	r3, [pc, #152]	@ (8006d94 <_strtod_l+0xae4>)
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	461f      	mov	r7, r3
 8006d00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d04:	e79b      	b.n	8006c3e <_strtod_l+0x98e>
 8006d06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006d0a:	9b08      	ldr	r3, [sp, #32]
 8006d0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1c1      	bne.n	8006c98 <_strtod_l+0x9e8>
 8006d14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d18:	0d1b      	lsrs	r3, r3, #20
 8006d1a:	051b      	lsls	r3, r3, #20
 8006d1c:	429d      	cmp	r5, r3
 8006d1e:	d1bb      	bne.n	8006c98 <_strtod_l+0x9e8>
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7fa f82e 	bl	8000d84 <__aeabi_d2lz>
 8006d28:	f7f9 fba8 	bl	800047c <__aeabi_l2d>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 fa18 	bl	8000168 <__aeabi_dsub>
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006d40:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d46:	ea46 060a 	orr.w	r6, r6, sl
 8006d4a:	431e      	orrs	r6, r3
 8006d4c:	d069      	beq.n	8006e22 <_strtod_l+0xb72>
 8006d4e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006d78 <_strtod_l+0xac8>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f7f9 fe32 	bl	80009bc <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f47f accf 	bne.w	80066fc <_strtod_l+0x44c>
 8006d5e:	a308      	add	r3, pc, #32	@ (adr r3, 8006d80 <_strtod_l+0xad0>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d68:	f7f9 fe46 	bl	80009f8 <__aeabi_dcmpgt>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d093      	beq.n	8006c98 <_strtod_l+0x9e8>
 8006d70:	e4c4      	b.n	80066fc <_strtod_l+0x44c>
 8006d72:	bf00      	nop
 8006d74:	f3af 8000 	nop.w
 8006d78:	94a03595 	.word	0x94a03595
 8006d7c:	3fdfffff 	.word	0x3fdfffff
 8006d80:	35afe535 	.word	0x35afe535
 8006d84:	3fe00000 	.word	0x3fe00000
 8006d88:	000fffff 	.word	0x000fffff
 8006d8c:	7ff00000 	.word	0x7ff00000
 8006d90:	7fefffff 	.word	0x7fefffff
 8006d94:	3ff00000 	.word	0x3ff00000
 8006d98:	3fe00000 	.word	0x3fe00000
 8006d9c:	7fe00000 	.word	0x7fe00000
 8006da0:	7c9fffff 	.word	0x7c9fffff
 8006da4:	bff00000 	.word	0xbff00000
 8006da8:	9b08      	ldr	r3, [sp, #32]
 8006daa:	b323      	cbz	r3, 8006df6 <_strtod_l+0xb46>
 8006dac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006db0:	d821      	bhi.n	8006df6 <_strtod_l+0xb46>
 8006db2:	a327      	add	r3, pc, #156	@ (adr r3, 8006e50 <_strtod_l+0xba0>)
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	4630      	mov	r0, r6
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7f9 fe08 	bl	80009d0 <__aeabi_dcmple>
 8006dc0:	b1a0      	cbz	r0, 8006dec <_strtod_l+0xb3c>
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7f9 fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8006dca:	2801      	cmp	r0, #1
 8006dcc:	bf38      	it	cc
 8006dce:	2001      	movcc	r0, #1
 8006dd0:	f7f9 fb08 	bl	80003e4 <__aeabi_ui2d>
 8006dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	b9fb      	cbnz	r3, 8006e1c <_strtod_l+0xb6c>
 8006ddc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006de0:	9014      	str	r0, [sp, #80]	@ 0x50
 8006de2:	9315      	str	r3, [sp, #84]	@ 0x54
 8006de4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006dec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006dee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006df2:	1b5b      	subs	r3, r3, r5
 8006df4:	9311      	str	r3, [sp, #68]	@ 0x44
 8006df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dfa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006dfe:	f7ff f8ff 	bl	8006000 <__ulp>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4650      	mov	r0, sl
 8006e08:	4659      	mov	r1, fp
 8006e0a:	f7f9 fb65 	bl	80004d8 <__aeabi_dmul>
 8006e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e12:	f7f9 f9ab 	bl	800016c <__adddf3>
 8006e16:	4682      	mov	sl, r0
 8006e18:	468b      	mov	fp, r1
 8006e1a:	e776      	b.n	8006d0a <_strtod_l+0xa5a>
 8006e1c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006e20:	e7e0      	b.n	8006de4 <_strtod_l+0xb34>
 8006e22:	a30d      	add	r3, pc, #52	@ (adr r3, 8006e58 <_strtod_l+0xba8>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fdc8 	bl	80009bc <__aeabi_dcmplt>
 8006e2c:	e79e      	b.n	8006d6c <_strtod_l+0xabc>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e34:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	f7ff ba77 	b.w	800632a <_strtod_l+0x7a>
 8006e3c:	2a65      	cmp	r2, #101	@ 0x65
 8006e3e:	f43f ab6e 	beq.w	800651e <_strtod_l+0x26e>
 8006e42:	2a45      	cmp	r2, #69	@ 0x45
 8006e44:	f43f ab6b 	beq.w	800651e <_strtod_l+0x26e>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f7ff bba6 	b.w	800659a <_strtod_l+0x2ea>
 8006e4e:	bf00      	nop
 8006e50:	ffc00000 	.word	0xffc00000
 8006e54:	41dfffff 	.word	0x41dfffff
 8006e58:	94a03595 	.word	0x94a03595
 8006e5c:	3fcfffff 	.word	0x3fcfffff

08006e60 <_strtod_r>:
 8006e60:	4b01      	ldr	r3, [pc, #4]	@ (8006e68 <_strtod_r+0x8>)
 8006e62:	f7ff ba25 	b.w	80062b0 <_strtod_l>
 8006e66:	bf00      	nop
 8006e68:	20000068 	.word	0x20000068

08006e6c <_strtol_l.constprop.0>:
 8006e6c:	2b24      	cmp	r3, #36	@ 0x24
 8006e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e72:	4686      	mov	lr, r0
 8006e74:	4690      	mov	r8, r2
 8006e76:	d801      	bhi.n	8006e7c <_strtol_l.constprop.0+0x10>
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d106      	bne.n	8006e8a <_strtol_l.constprop.0+0x1e>
 8006e7c:	f7fd fdbe 	bl	80049fc <__errno>
 8006e80:	2316      	movs	r3, #22
 8006e82:	6003      	str	r3, [r0, #0]
 8006e84:	2000      	movs	r0, #0
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	4833      	ldr	r0, [pc, #204]	@ (8006f5c <_strtol_l.constprop.0+0xf0>)
 8006e8e:	462a      	mov	r2, r5
 8006e90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e94:	5d06      	ldrb	r6, [r0, r4]
 8006e96:	f016 0608 	ands.w	r6, r6, #8
 8006e9a:	d1f8      	bne.n	8006e8e <_strtol_l.constprop.0+0x22>
 8006e9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006e9e:	d12d      	bne.n	8006efc <_strtol_l.constprop.0+0x90>
 8006ea0:	2601      	movs	r6, #1
 8006ea2:	782c      	ldrb	r4, [r5, #0]
 8006ea4:	1c95      	adds	r5, r2, #2
 8006ea6:	f033 0210 	bics.w	r2, r3, #16
 8006eaa:	d109      	bne.n	8006ec0 <_strtol_l.constprop.0+0x54>
 8006eac:	2c30      	cmp	r4, #48	@ 0x30
 8006eae:	d12a      	bne.n	8006f06 <_strtol_l.constprop.0+0x9a>
 8006eb0:	782a      	ldrb	r2, [r5, #0]
 8006eb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006eb6:	2a58      	cmp	r2, #88	@ 0x58
 8006eb8:	d125      	bne.n	8006f06 <_strtol_l.constprop.0+0x9a>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	786c      	ldrb	r4, [r5, #1]
 8006ebe:	3502      	adds	r5, #2
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ec6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006eca:	fbbc f9f3 	udiv	r9, ip, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	fb03 ca19 	mls	sl, r3, r9, ip
 8006ed4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006ed8:	2f09      	cmp	r7, #9
 8006eda:	d81b      	bhi.n	8006f14 <_strtol_l.constprop.0+0xa8>
 8006edc:	463c      	mov	r4, r7
 8006ede:	42a3      	cmp	r3, r4
 8006ee0:	dd27      	ble.n	8006f32 <_strtol_l.constprop.0+0xc6>
 8006ee2:	1c57      	adds	r7, r2, #1
 8006ee4:	d007      	beq.n	8006ef6 <_strtol_l.constprop.0+0x8a>
 8006ee6:	4581      	cmp	r9, r0
 8006ee8:	d320      	bcc.n	8006f2c <_strtol_l.constprop.0+0xc0>
 8006eea:	d101      	bne.n	8006ef0 <_strtol_l.constprop.0+0x84>
 8006eec:	45a2      	cmp	sl, r4
 8006eee:	db1d      	blt.n	8006f2c <_strtol_l.constprop.0+0xc0>
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	fb00 4003 	mla	r0, r0, r3, r4
 8006ef6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006efa:	e7eb      	b.n	8006ed4 <_strtol_l.constprop.0+0x68>
 8006efc:	2c2b      	cmp	r4, #43	@ 0x2b
 8006efe:	bf04      	itt	eq
 8006f00:	782c      	ldrbeq	r4, [r5, #0]
 8006f02:	1c95      	addeq	r5, r2, #2
 8006f04:	e7cf      	b.n	8006ea6 <_strtol_l.constprop.0+0x3a>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1da      	bne.n	8006ec0 <_strtol_l.constprop.0+0x54>
 8006f0a:	2c30      	cmp	r4, #48	@ 0x30
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2308      	moveq	r3, #8
 8006f10:	230a      	movne	r3, #10
 8006f12:	e7d5      	b.n	8006ec0 <_strtol_l.constprop.0+0x54>
 8006f14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006f18:	2f19      	cmp	r7, #25
 8006f1a:	d801      	bhi.n	8006f20 <_strtol_l.constprop.0+0xb4>
 8006f1c:	3c37      	subs	r4, #55	@ 0x37
 8006f1e:	e7de      	b.n	8006ede <_strtol_l.constprop.0+0x72>
 8006f20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006f24:	2f19      	cmp	r7, #25
 8006f26:	d804      	bhi.n	8006f32 <_strtol_l.constprop.0+0xc6>
 8006f28:	3c57      	subs	r4, #87	@ 0x57
 8006f2a:	e7d8      	b.n	8006ede <_strtol_l.constprop.0+0x72>
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	e7e1      	b.n	8006ef6 <_strtol_l.constprop.0+0x8a>
 8006f32:	1c53      	adds	r3, r2, #1
 8006f34:	d108      	bne.n	8006f48 <_strtol_l.constprop.0+0xdc>
 8006f36:	2322      	movs	r3, #34	@ 0x22
 8006f38:	4660      	mov	r0, ip
 8006f3a:	f8ce 3000 	str.w	r3, [lr]
 8006f3e:	f1b8 0f00 	cmp.w	r8, #0
 8006f42:	d0a0      	beq.n	8006e86 <_strtol_l.constprop.0+0x1a>
 8006f44:	1e69      	subs	r1, r5, #1
 8006f46:	e006      	b.n	8006f56 <_strtol_l.constprop.0+0xea>
 8006f48:	b106      	cbz	r6, 8006f4c <_strtol_l.constprop.0+0xe0>
 8006f4a:	4240      	negs	r0, r0
 8006f4c:	f1b8 0f00 	cmp.w	r8, #0
 8006f50:	d099      	beq.n	8006e86 <_strtol_l.constprop.0+0x1a>
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d1f6      	bne.n	8006f44 <_strtol_l.constprop.0+0xd8>
 8006f56:	f8c8 1000 	str.w	r1, [r8]
 8006f5a:	e794      	b.n	8006e86 <_strtol_l.constprop.0+0x1a>
 8006f5c:	080083d1 	.word	0x080083d1

08006f60 <_strtol_r>:
 8006f60:	f7ff bf84 	b.w	8006e6c <_strtol_l.constprop.0>

08006f64 <__ssputs_r>:
 8006f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	461f      	mov	r7, r3
 8006f6a:	688e      	ldr	r6, [r1, #8]
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	42be      	cmp	r6, r7
 8006f70:	460c      	mov	r4, r1
 8006f72:	4690      	mov	r8, r2
 8006f74:	680b      	ldr	r3, [r1, #0]
 8006f76:	d82d      	bhi.n	8006fd4 <__ssputs_r+0x70>
 8006f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f80:	d026      	beq.n	8006fd0 <__ssputs_r+0x6c>
 8006f82:	6965      	ldr	r5, [r4, #20]
 8006f84:	6909      	ldr	r1, [r1, #16]
 8006f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f8a:	eba3 0901 	sub.w	r9, r3, r1
 8006f8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f92:	1c7b      	adds	r3, r7, #1
 8006f94:	444b      	add	r3, r9
 8006f96:	106d      	asrs	r5, r5, #1
 8006f98:	429d      	cmp	r5, r3
 8006f9a:	bf38      	it	cc
 8006f9c:	461d      	movcc	r5, r3
 8006f9e:	0553      	lsls	r3, r2, #21
 8006fa0:	d527      	bpl.n	8006ff2 <__ssputs_r+0x8e>
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7fe fc2e 	bl	8005804 <_malloc_r>
 8006fa8:	4606      	mov	r6, r0
 8006faa:	b360      	cbz	r0, 8007006 <__ssputs_r+0xa2>
 8006fac:	464a      	mov	r2, r9
 8006fae:	6921      	ldr	r1, [r4, #16]
 8006fb0:	f000 fa14 	bl	80073dc <memcpy>
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	6126      	str	r6, [r4, #16]
 8006fc2:	444e      	add	r6, r9
 8006fc4:	6026      	str	r6, [r4, #0]
 8006fc6:	463e      	mov	r6, r7
 8006fc8:	6165      	str	r5, [r4, #20]
 8006fca:	eba5 0509 	sub.w	r5, r5, r9
 8006fce:	60a5      	str	r5, [r4, #8]
 8006fd0:	42be      	cmp	r6, r7
 8006fd2:	d900      	bls.n	8006fd6 <__ssputs_r+0x72>
 8006fd4:	463e      	mov	r6, r7
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	4641      	mov	r1, r8
 8006fda:	6820      	ldr	r0, [r4, #0]
 8006fdc:	f000 f9c2 	bl	8007364 <memmove>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	68a3      	ldr	r3, [r4, #8]
 8006fe4:	1b9b      	subs	r3, r3, r6
 8006fe6:	60a3      	str	r3, [r4, #8]
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	4433      	add	r3, r6
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	f000 fd83 	bl	8007afe <_realloc_r>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d1e0      	bne.n	8006fc0 <__ssputs_r+0x5c>
 8006ffe:	4650      	mov	r0, sl
 8007000:	6921      	ldr	r1, [r4, #16]
 8007002:	f7fe fb8d 	bl	8005720 <_free_r>
 8007006:	230c      	movs	r3, #12
 8007008:	f8ca 3000 	str.w	r3, [sl]
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	f04f 30ff 	mov.w	r0, #4294967295
 8007012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	e7e9      	b.n	8006fee <__ssputs_r+0x8a>
	...

0800701c <_svfiprintf_r>:
 800701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	4698      	mov	r8, r3
 8007022:	898b      	ldrh	r3, [r1, #12]
 8007024:	4607      	mov	r7, r0
 8007026:	061b      	lsls	r3, r3, #24
 8007028:	460d      	mov	r5, r1
 800702a:	4614      	mov	r4, r2
 800702c:	b09d      	sub	sp, #116	@ 0x74
 800702e:	d510      	bpl.n	8007052 <_svfiprintf_r+0x36>
 8007030:	690b      	ldr	r3, [r1, #16]
 8007032:	b973      	cbnz	r3, 8007052 <_svfiprintf_r+0x36>
 8007034:	2140      	movs	r1, #64	@ 0x40
 8007036:	f7fe fbe5 	bl	8005804 <_malloc_r>
 800703a:	6028      	str	r0, [r5, #0]
 800703c:	6128      	str	r0, [r5, #16]
 800703e:	b930      	cbnz	r0, 800704e <_svfiprintf_r+0x32>
 8007040:	230c      	movs	r3, #12
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	f04f 30ff 	mov.w	r0, #4294967295
 8007048:	b01d      	add	sp, #116	@ 0x74
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704e:	2340      	movs	r3, #64	@ 0x40
 8007050:	616b      	str	r3, [r5, #20]
 8007052:	2300      	movs	r3, #0
 8007054:	9309      	str	r3, [sp, #36]	@ 0x24
 8007056:	2320      	movs	r3, #32
 8007058:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800705c:	2330      	movs	r3, #48	@ 0x30
 800705e:	f04f 0901 	mov.w	r9, #1
 8007062:	f8cd 800c 	str.w	r8, [sp, #12]
 8007066:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007200 <_svfiprintf_r+0x1e4>
 800706a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800706e:	4623      	mov	r3, r4
 8007070:	469a      	mov	sl, r3
 8007072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007076:	b10a      	cbz	r2, 800707c <_svfiprintf_r+0x60>
 8007078:	2a25      	cmp	r2, #37	@ 0x25
 800707a:	d1f9      	bne.n	8007070 <_svfiprintf_r+0x54>
 800707c:	ebba 0b04 	subs.w	fp, sl, r4
 8007080:	d00b      	beq.n	800709a <_svfiprintf_r+0x7e>
 8007082:	465b      	mov	r3, fp
 8007084:	4622      	mov	r2, r4
 8007086:	4629      	mov	r1, r5
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff ff6b 	bl	8006f64 <__ssputs_r>
 800708e:	3001      	adds	r0, #1
 8007090:	f000 80a7 	beq.w	80071e2 <_svfiprintf_r+0x1c6>
 8007094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007096:	445a      	add	r2, fp
 8007098:	9209      	str	r2, [sp, #36]	@ 0x24
 800709a:	f89a 3000 	ldrb.w	r3, [sl]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 809f 	beq.w	80071e2 <_svfiprintf_r+0x1c6>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ae:	f10a 0a01 	add.w	sl, sl, #1
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	9307      	str	r3, [sp, #28]
 80070b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80070bc:	4654      	mov	r4, sl
 80070be:	2205      	movs	r2, #5
 80070c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c4:	484e      	ldr	r0, [pc, #312]	@ (8007200 <_svfiprintf_r+0x1e4>)
 80070c6:	f7fd fcc6 	bl	8004a56 <memchr>
 80070ca:	9a04      	ldr	r2, [sp, #16]
 80070cc:	b9d8      	cbnz	r0, 8007106 <_svfiprintf_r+0xea>
 80070ce:	06d0      	lsls	r0, r2, #27
 80070d0:	bf44      	itt	mi
 80070d2:	2320      	movmi	r3, #32
 80070d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070d8:	0711      	lsls	r1, r2, #28
 80070da:	bf44      	itt	mi
 80070dc:	232b      	movmi	r3, #43	@ 0x2b
 80070de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070e2:	f89a 3000 	ldrb.w	r3, [sl]
 80070e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070e8:	d015      	beq.n	8007116 <_svfiprintf_r+0xfa>
 80070ea:	4654      	mov	r4, sl
 80070ec:	2000      	movs	r0, #0
 80070ee:	f04f 0c0a 	mov.w	ip, #10
 80070f2:	9a07      	ldr	r2, [sp, #28]
 80070f4:	4621      	mov	r1, r4
 80070f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070fa:	3b30      	subs	r3, #48	@ 0x30
 80070fc:	2b09      	cmp	r3, #9
 80070fe:	d94b      	bls.n	8007198 <_svfiprintf_r+0x17c>
 8007100:	b1b0      	cbz	r0, 8007130 <_svfiprintf_r+0x114>
 8007102:	9207      	str	r2, [sp, #28]
 8007104:	e014      	b.n	8007130 <_svfiprintf_r+0x114>
 8007106:	eba0 0308 	sub.w	r3, r0, r8
 800710a:	fa09 f303 	lsl.w	r3, r9, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	46a2      	mov	sl, r4
 8007112:	9304      	str	r3, [sp, #16]
 8007114:	e7d2      	b.n	80070bc <_svfiprintf_r+0xa0>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	1d19      	adds	r1, r3, #4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	9103      	str	r1, [sp, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfbb      	ittet	lt
 8007122:	425b      	neglt	r3, r3
 8007124:	f042 0202 	orrlt.w	r2, r2, #2
 8007128:	9307      	strge	r3, [sp, #28]
 800712a:	9307      	strlt	r3, [sp, #28]
 800712c:	bfb8      	it	lt
 800712e:	9204      	strlt	r2, [sp, #16]
 8007130:	7823      	ldrb	r3, [r4, #0]
 8007132:	2b2e      	cmp	r3, #46	@ 0x2e
 8007134:	d10a      	bne.n	800714c <_svfiprintf_r+0x130>
 8007136:	7863      	ldrb	r3, [r4, #1]
 8007138:	2b2a      	cmp	r3, #42	@ 0x2a
 800713a:	d132      	bne.n	80071a2 <_svfiprintf_r+0x186>
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	3402      	adds	r4, #2
 8007140:	1d1a      	adds	r2, r3, #4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	9203      	str	r2, [sp, #12]
 8007146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800714a:	9305      	str	r3, [sp, #20]
 800714c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007204 <_svfiprintf_r+0x1e8>
 8007150:	2203      	movs	r2, #3
 8007152:	4650      	mov	r0, sl
 8007154:	7821      	ldrb	r1, [r4, #0]
 8007156:	f7fd fc7e 	bl	8004a56 <memchr>
 800715a:	b138      	cbz	r0, 800716c <_svfiprintf_r+0x150>
 800715c:	2240      	movs	r2, #64	@ 0x40
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	eba0 000a 	sub.w	r0, r0, sl
 8007164:	4082      	lsls	r2, r0
 8007166:	4313      	orrs	r3, r2
 8007168:	3401      	adds	r4, #1
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007170:	2206      	movs	r2, #6
 8007172:	4825      	ldr	r0, [pc, #148]	@ (8007208 <_svfiprintf_r+0x1ec>)
 8007174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007178:	f7fd fc6d 	bl	8004a56 <memchr>
 800717c:	2800      	cmp	r0, #0
 800717e:	d036      	beq.n	80071ee <_svfiprintf_r+0x1d2>
 8007180:	4b22      	ldr	r3, [pc, #136]	@ (800720c <_svfiprintf_r+0x1f0>)
 8007182:	bb1b      	cbnz	r3, 80071cc <_svfiprintf_r+0x1b0>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	3307      	adds	r3, #7
 8007188:	f023 0307 	bic.w	r3, r3, #7
 800718c:	3308      	adds	r3, #8
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007192:	4433      	add	r3, r6
 8007194:	9309      	str	r3, [sp, #36]	@ 0x24
 8007196:	e76a      	b.n	800706e <_svfiprintf_r+0x52>
 8007198:	460c      	mov	r4, r1
 800719a:	2001      	movs	r0, #1
 800719c:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a0:	e7a8      	b.n	80070f4 <_svfiprintf_r+0xd8>
 80071a2:	2300      	movs	r3, #0
 80071a4:	f04f 0c0a 	mov.w	ip, #10
 80071a8:	4619      	mov	r1, r3
 80071aa:	3401      	adds	r4, #1
 80071ac:	9305      	str	r3, [sp, #20]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071b4:	3a30      	subs	r2, #48	@ 0x30
 80071b6:	2a09      	cmp	r2, #9
 80071b8:	d903      	bls.n	80071c2 <_svfiprintf_r+0x1a6>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0c6      	beq.n	800714c <_svfiprintf_r+0x130>
 80071be:	9105      	str	r1, [sp, #20]
 80071c0:	e7c4      	b.n	800714c <_svfiprintf_r+0x130>
 80071c2:	4604      	mov	r4, r0
 80071c4:	2301      	movs	r3, #1
 80071c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ca:	e7f0      	b.n	80071ae <_svfiprintf_r+0x192>
 80071cc:	ab03      	add	r3, sp, #12
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	462a      	mov	r2, r5
 80071d2:	4638      	mov	r0, r7
 80071d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007210 <_svfiprintf_r+0x1f4>)
 80071d6:	a904      	add	r1, sp, #16
 80071d8:	f7fc fc96 	bl	8003b08 <_printf_float>
 80071dc:	1c42      	adds	r2, r0, #1
 80071de:	4606      	mov	r6, r0
 80071e0:	d1d6      	bne.n	8007190 <_svfiprintf_r+0x174>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	065b      	lsls	r3, r3, #25
 80071e6:	f53f af2d 	bmi.w	8007044 <_svfiprintf_r+0x28>
 80071ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071ec:	e72c      	b.n	8007048 <_svfiprintf_r+0x2c>
 80071ee:	ab03      	add	r3, sp, #12
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	462a      	mov	r2, r5
 80071f4:	4638      	mov	r0, r7
 80071f6:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <_svfiprintf_r+0x1f4>)
 80071f8:	a904      	add	r1, sp, #16
 80071fa:	f7fc ff23 	bl	8004044 <_printf_i>
 80071fe:	e7ed      	b.n	80071dc <_svfiprintf_r+0x1c0>
 8007200:	080084d1 	.word	0x080084d1
 8007204:	080084d7 	.word	0x080084d7
 8007208:	080084db 	.word	0x080084db
 800720c:	08003b09 	.word	0x08003b09
 8007210:	08006f65 	.word	0x08006f65

08007214 <__sflush_r>:
 8007214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	0716      	lsls	r6, r2, #28
 800721c:	4605      	mov	r5, r0
 800721e:	460c      	mov	r4, r1
 8007220:	d454      	bmi.n	80072cc <__sflush_r+0xb8>
 8007222:	684b      	ldr	r3, [r1, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dc02      	bgt.n	800722e <__sflush_r+0x1a>
 8007228:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	dd48      	ble.n	80072c0 <__sflush_r+0xac>
 800722e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007230:	2e00      	cmp	r6, #0
 8007232:	d045      	beq.n	80072c0 <__sflush_r+0xac>
 8007234:	2300      	movs	r3, #0
 8007236:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800723a:	682f      	ldr	r7, [r5, #0]
 800723c:	6a21      	ldr	r1, [r4, #32]
 800723e:	602b      	str	r3, [r5, #0]
 8007240:	d030      	beq.n	80072a4 <__sflush_r+0x90>
 8007242:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	0759      	lsls	r1, r3, #29
 8007248:	d505      	bpl.n	8007256 <__sflush_r+0x42>
 800724a:	6863      	ldr	r3, [r4, #4]
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007250:	b10b      	cbz	r3, 8007256 <__sflush_r+0x42>
 8007252:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007254:	1ad2      	subs	r2, r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	4628      	mov	r0, r5
 800725a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800725c:	6a21      	ldr	r1, [r4, #32]
 800725e:	47b0      	blx	r6
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	d106      	bne.n	8007274 <__sflush_r+0x60>
 8007266:	6829      	ldr	r1, [r5, #0]
 8007268:	291d      	cmp	r1, #29
 800726a:	d82b      	bhi.n	80072c4 <__sflush_r+0xb0>
 800726c:	4a28      	ldr	r2, [pc, #160]	@ (8007310 <__sflush_r+0xfc>)
 800726e:	410a      	asrs	r2, r1
 8007270:	07d6      	lsls	r6, r2, #31
 8007272:	d427      	bmi.n	80072c4 <__sflush_r+0xb0>
 8007274:	2200      	movs	r2, #0
 8007276:	6062      	str	r2, [r4, #4]
 8007278:	6922      	ldr	r2, [r4, #16]
 800727a:	04d9      	lsls	r1, r3, #19
 800727c:	6022      	str	r2, [r4, #0]
 800727e:	d504      	bpl.n	800728a <__sflush_r+0x76>
 8007280:	1c42      	adds	r2, r0, #1
 8007282:	d101      	bne.n	8007288 <__sflush_r+0x74>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b903      	cbnz	r3, 800728a <__sflush_r+0x76>
 8007288:	6560      	str	r0, [r4, #84]	@ 0x54
 800728a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800728c:	602f      	str	r7, [r5, #0]
 800728e:	b1b9      	cbz	r1, 80072c0 <__sflush_r+0xac>
 8007290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007294:	4299      	cmp	r1, r3
 8007296:	d002      	beq.n	800729e <__sflush_r+0x8a>
 8007298:	4628      	mov	r0, r5
 800729a:	f7fe fa41 	bl	8005720 <_free_r>
 800729e:	2300      	movs	r3, #0
 80072a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80072a2:	e00d      	b.n	80072c0 <__sflush_r+0xac>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b0      	blx	r6
 80072aa:	4602      	mov	r2, r0
 80072ac:	1c50      	adds	r0, r2, #1
 80072ae:	d1c9      	bne.n	8007244 <__sflush_r+0x30>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0c6      	beq.n	8007244 <__sflush_r+0x30>
 80072b6:	2b1d      	cmp	r3, #29
 80072b8:	d001      	beq.n	80072be <__sflush_r+0xaa>
 80072ba:	2b16      	cmp	r3, #22
 80072bc:	d11d      	bne.n	80072fa <__sflush_r+0xe6>
 80072be:	602f      	str	r7, [r5, #0]
 80072c0:	2000      	movs	r0, #0
 80072c2:	e021      	b.n	8007308 <__sflush_r+0xf4>
 80072c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	e01a      	b.n	8007302 <__sflush_r+0xee>
 80072cc:	690f      	ldr	r7, [r1, #16]
 80072ce:	2f00      	cmp	r7, #0
 80072d0:	d0f6      	beq.n	80072c0 <__sflush_r+0xac>
 80072d2:	0793      	lsls	r3, r2, #30
 80072d4:	bf18      	it	ne
 80072d6:	2300      	movne	r3, #0
 80072d8:	680e      	ldr	r6, [r1, #0]
 80072da:	bf08      	it	eq
 80072dc:	694b      	ldreq	r3, [r1, #20]
 80072de:	1bf6      	subs	r6, r6, r7
 80072e0:	600f      	str	r7, [r1, #0]
 80072e2:	608b      	str	r3, [r1, #8]
 80072e4:	2e00      	cmp	r6, #0
 80072e6:	ddeb      	ble.n	80072c0 <__sflush_r+0xac>
 80072e8:	4633      	mov	r3, r6
 80072ea:	463a      	mov	r2, r7
 80072ec:	4628      	mov	r0, r5
 80072ee:	6a21      	ldr	r1, [r4, #32]
 80072f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80072f4:	47e0      	blx	ip
 80072f6:	2800      	cmp	r0, #0
 80072f8:	dc07      	bgt.n	800730a <__sflush_r+0xf6>
 80072fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007302:	f04f 30ff 	mov.w	r0, #4294967295
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800730a:	4407      	add	r7, r0
 800730c:	1a36      	subs	r6, r6, r0
 800730e:	e7e9      	b.n	80072e4 <__sflush_r+0xd0>
 8007310:	dfbffffe 	.word	0xdfbffffe

08007314 <_fflush_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	690b      	ldr	r3, [r1, #16]
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	b913      	cbnz	r3, 8007324 <_fflush_r+0x10>
 800731e:	2500      	movs	r5, #0
 8007320:	4628      	mov	r0, r5
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	b118      	cbz	r0, 800732e <_fflush_r+0x1a>
 8007326:	6a03      	ldr	r3, [r0, #32]
 8007328:	b90b      	cbnz	r3, 800732e <_fflush_r+0x1a>
 800732a:	f7fd fa47 	bl	80047bc <__sinit>
 800732e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0f3      	beq.n	800731e <_fflush_r+0xa>
 8007336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007338:	07d0      	lsls	r0, r2, #31
 800733a:	d404      	bmi.n	8007346 <_fflush_r+0x32>
 800733c:	0599      	lsls	r1, r3, #22
 800733e:	d402      	bmi.n	8007346 <_fflush_r+0x32>
 8007340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007342:	f7fd fb86 	bl	8004a52 <__retarget_lock_acquire_recursive>
 8007346:	4628      	mov	r0, r5
 8007348:	4621      	mov	r1, r4
 800734a:	f7ff ff63 	bl	8007214 <__sflush_r>
 800734e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007350:	4605      	mov	r5, r0
 8007352:	07da      	lsls	r2, r3, #31
 8007354:	d4e4      	bmi.n	8007320 <_fflush_r+0xc>
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	059b      	lsls	r3, r3, #22
 800735a:	d4e1      	bmi.n	8007320 <_fflush_r+0xc>
 800735c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800735e:	f7fd fb79 	bl	8004a54 <__retarget_lock_release_recursive>
 8007362:	e7dd      	b.n	8007320 <_fflush_r+0xc>

08007364 <memmove>:
 8007364:	4288      	cmp	r0, r1
 8007366:	b510      	push	{r4, lr}
 8007368:	eb01 0402 	add.w	r4, r1, r2
 800736c:	d902      	bls.n	8007374 <memmove+0x10>
 800736e:	4284      	cmp	r4, r0
 8007370:	4623      	mov	r3, r4
 8007372:	d807      	bhi.n	8007384 <memmove+0x20>
 8007374:	1e43      	subs	r3, r0, #1
 8007376:	42a1      	cmp	r1, r4
 8007378:	d008      	beq.n	800738c <memmove+0x28>
 800737a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007382:	e7f8      	b.n	8007376 <memmove+0x12>
 8007384:	4601      	mov	r1, r0
 8007386:	4402      	add	r2, r0
 8007388:	428a      	cmp	r2, r1
 800738a:	d100      	bne.n	800738e <memmove+0x2a>
 800738c:	bd10      	pop	{r4, pc}
 800738e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007396:	e7f7      	b.n	8007388 <memmove+0x24>

08007398 <strncmp>:
 8007398:	b510      	push	{r4, lr}
 800739a:	b16a      	cbz	r2, 80073b8 <strncmp+0x20>
 800739c:	3901      	subs	r1, #1
 800739e:	1884      	adds	r4, r0, r2
 80073a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d103      	bne.n	80073b4 <strncmp+0x1c>
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d001      	beq.n	80073b4 <strncmp+0x1c>
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	d1f5      	bne.n	80073a0 <strncmp+0x8>
 80073b4:	1ad0      	subs	r0, r2, r3
 80073b6:	bd10      	pop	{r4, pc}
 80073b8:	4610      	mov	r0, r2
 80073ba:	e7fc      	b.n	80073b6 <strncmp+0x1e>

080073bc <_sbrk_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	2300      	movs	r3, #0
 80073c0:	4d05      	ldr	r5, [pc, #20]	@ (80073d8 <_sbrk_r+0x1c>)
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa f940 	bl	800164c <_sbrk>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_sbrk_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_sbrk_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	200003c8 	.word	0x200003c8

080073dc <memcpy>:
 80073dc:	440a      	add	r2, r1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e4:	d100      	bne.n	80073e8 <memcpy+0xc>
 80073e6:	4770      	bx	lr
 80073e8:	b510      	push	{r4, lr}
 80073ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ee:	4291      	cmp	r1, r2
 80073f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f4:	d1f9      	bne.n	80073ea <memcpy+0xe>
 80073f6:	bd10      	pop	{r4, pc}

080073f8 <nan>:
 80073f8:	2000      	movs	r0, #0
 80073fa:	4901      	ldr	r1, [pc, #4]	@ (8007400 <nan+0x8>)
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	7ff80000 	.word	0x7ff80000

08007404 <__assert_func>:
 8007404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007406:	4614      	mov	r4, r2
 8007408:	461a      	mov	r2, r3
 800740a:	4b09      	ldr	r3, [pc, #36]	@ (8007430 <__assert_func+0x2c>)
 800740c:	4605      	mov	r5, r0
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68d8      	ldr	r0, [r3, #12]
 8007412:	b954      	cbnz	r4, 800742a <__assert_func+0x26>
 8007414:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <__assert_func+0x30>)
 8007416:	461c      	mov	r4, r3
 8007418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800741c:	9100      	str	r1, [sp, #0]
 800741e:	462b      	mov	r3, r5
 8007420:	4905      	ldr	r1, [pc, #20]	@ (8007438 <__assert_func+0x34>)
 8007422:	f000 fba7 	bl	8007b74 <fiprintf>
 8007426:	f000 fbb7 	bl	8007b98 <abort>
 800742a:	4b04      	ldr	r3, [pc, #16]	@ (800743c <__assert_func+0x38>)
 800742c:	e7f4      	b.n	8007418 <__assert_func+0x14>
 800742e:	bf00      	nop
 8007430:	20000018 	.word	0x20000018
 8007434:	08008525 	.word	0x08008525
 8007438:	080084f7 	.word	0x080084f7
 800743c:	080084ea 	.word	0x080084ea

08007440 <_calloc_r>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	fba1 5402 	umull	r5, r4, r1, r2
 8007446:	b93c      	cbnz	r4, 8007458 <_calloc_r+0x18>
 8007448:	4629      	mov	r1, r5
 800744a:	f7fe f9db 	bl	8005804 <_malloc_r>
 800744e:	4606      	mov	r6, r0
 8007450:	b928      	cbnz	r0, 800745e <_calloc_r+0x1e>
 8007452:	2600      	movs	r6, #0
 8007454:	4630      	mov	r0, r6
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	220c      	movs	r2, #12
 800745a:	6002      	str	r2, [r0, #0]
 800745c:	e7f9      	b.n	8007452 <_calloc_r+0x12>
 800745e:	462a      	mov	r2, r5
 8007460:	4621      	mov	r1, r4
 8007462:	f7fd fa78 	bl	8004956 <memset>
 8007466:	e7f5      	b.n	8007454 <_calloc_r+0x14>

08007468 <rshift>:
 8007468:	6903      	ldr	r3, [r0, #16]
 800746a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800746e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007472:	f100 0414 	add.w	r4, r0, #20
 8007476:	ea4f 1261 	mov.w	r2, r1, asr #5
 800747a:	dd46      	ble.n	800750a <rshift+0xa2>
 800747c:	f011 011f 	ands.w	r1, r1, #31
 8007480:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007484:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007488:	d10c      	bne.n	80074a4 <rshift+0x3c>
 800748a:	4629      	mov	r1, r5
 800748c:	f100 0710 	add.w	r7, r0, #16
 8007490:	42b1      	cmp	r1, r6
 8007492:	d335      	bcc.n	8007500 <rshift+0x98>
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	1eea      	subs	r2, r5, #3
 800749a:	4296      	cmp	r6, r2
 800749c:	bf38      	it	cc
 800749e:	2300      	movcc	r3, #0
 80074a0:	4423      	add	r3, r4
 80074a2:	e015      	b.n	80074d0 <rshift+0x68>
 80074a4:	46a1      	mov	r9, r4
 80074a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074aa:	f1c1 0820 	rsb	r8, r1, #32
 80074ae:	40cf      	lsrs	r7, r1
 80074b0:	f105 0e04 	add.w	lr, r5, #4
 80074b4:	4576      	cmp	r6, lr
 80074b6:	46f4      	mov	ip, lr
 80074b8:	d816      	bhi.n	80074e8 <rshift+0x80>
 80074ba:	1a9a      	subs	r2, r3, r2
 80074bc:	0092      	lsls	r2, r2, #2
 80074be:	3a04      	subs	r2, #4
 80074c0:	3501      	adds	r5, #1
 80074c2:	42ae      	cmp	r6, r5
 80074c4:	bf38      	it	cc
 80074c6:	2200      	movcc	r2, #0
 80074c8:	18a3      	adds	r3, r4, r2
 80074ca:	50a7      	str	r7, [r4, r2]
 80074cc:	b107      	cbz	r7, 80074d0 <rshift+0x68>
 80074ce:	3304      	adds	r3, #4
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	eba3 0204 	sub.w	r2, r3, r4
 80074d6:	bf08      	it	eq
 80074d8:	2300      	moveq	r3, #0
 80074da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074de:	6102      	str	r2, [r0, #16]
 80074e0:	bf08      	it	eq
 80074e2:	6143      	streq	r3, [r0, #20]
 80074e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e8:	f8dc c000 	ldr.w	ip, [ip]
 80074ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80074f0:	ea4c 0707 	orr.w	r7, ip, r7
 80074f4:	f849 7b04 	str.w	r7, [r9], #4
 80074f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074fc:	40cf      	lsrs	r7, r1
 80074fe:	e7d9      	b.n	80074b4 <rshift+0x4c>
 8007500:	f851 cb04 	ldr.w	ip, [r1], #4
 8007504:	f847 cf04 	str.w	ip, [r7, #4]!
 8007508:	e7c2      	b.n	8007490 <rshift+0x28>
 800750a:	4623      	mov	r3, r4
 800750c:	e7e0      	b.n	80074d0 <rshift+0x68>

0800750e <__hexdig_fun>:
 800750e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007512:	2b09      	cmp	r3, #9
 8007514:	d802      	bhi.n	800751c <__hexdig_fun+0xe>
 8007516:	3820      	subs	r0, #32
 8007518:	b2c0      	uxtb	r0, r0
 800751a:	4770      	bx	lr
 800751c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007520:	2b05      	cmp	r3, #5
 8007522:	d801      	bhi.n	8007528 <__hexdig_fun+0x1a>
 8007524:	3847      	subs	r0, #71	@ 0x47
 8007526:	e7f7      	b.n	8007518 <__hexdig_fun+0xa>
 8007528:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800752c:	2b05      	cmp	r3, #5
 800752e:	d801      	bhi.n	8007534 <__hexdig_fun+0x26>
 8007530:	3827      	subs	r0, #39	@ 0x27
 8007532:	e7f1      	b.n	8007518 <__hexdig_fun+0xa>
 8007534:	2000      	movs	r0, #0
 8007536:	4770      	bx	lr

08007538 <__gethex>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	468a      	mov	sl, r1
 800753e:	4690      	mov	r8, r2
 8007540:	b085      	sub	sp, #20
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	680b      	ldr	r3, [r1, #0]
 8007546:	9001      	str	r0, [sp, #4]
 8007548:	1c9c      	adds	r4, r3, #2
 800754a:	46a1      	mov	r9, r4
 800754c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007550:	2830      	cmp	r0, #48	@ 0x30
 8007552:	d0fa      	beq.n	800754a <__gethex+0x12>
 8007554:	eba9 0303 	sub.w	r3, r9, r3
 8007558:	f1a3 0b02 	sub.w	fp, r3, #2
 800755c:	f7ff ffd7 	bl	800750e <__hexdig_fun>
 8007560:	4605      	mov	r5, r0
 8007562:	2800      	cmp	r0, #0
 8007564:	d168      	bne.n	8007638 <__gethex+0x100>
 8007566:	2201      	movs	r2, #1
 8007568:	4648      	mov	r0, r9
 800756a:	499f      	ldr	r1, [pc, #636]	@ (80077e8 <__gethex+0x2b0>)
 800756c:	f7ff ff14 	bl	8007398 <strncmp>
 8007570:	4607      	mov	r7, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	d167      	bne.n	8007646 <__gethex+0x10e>
 8007576:	f899 0001 	ldrb.w	r0, [r9, #1]
 800757a:	4626      	mov	r6, r4
 800757c:	f7ff ffc7 	bl	800750e <__hexdig_fun>
 8007580:	2800      	cmp	r0, #0
 8007582:	d062      	beq.n	800764a <__gethex+0x112>
 8007584:	4623      	mov	r3, r4
 8007586:	7818      	ldrb	r0, [r3, #0]
 8007588:	4699      	mov	r9, r3
 800758a:	2830      	cmp	r0, #48	@ 0x30
 800758c:	f103 0301 	add.w	r3, r3, #1
 8007590:	d0f9      	beq.n	8007586 <__gethex+0x4e>
 8007592:	f7ff ffbc 	bl	800750e <__hexdig_fun>
 8007596:	fab0 f580 	clz	r5, r0
 800759a:	f04f 0b01 	mov.w	fp, #1
 800759e:	096d      	lsrs	r5, r5, #5
 80075a0:	464a      	mov	r2, r9
 80075a2:	4616      	mov	r6, r2
 80075a4:	7830      	ldrb	r0, [r6, #0]
 80075a6:	3201      	adds	r2, #1
 80075a8:	f7ff ffb1 	bl	800750e <__hexdig_fun>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d1f8      	bne.n	80075a2 <__gethex+0x6a>
 80075b0:	2201      	movs	r2, #1
 80075b2:	4630      	mov	r0, r6
 80075b4:	498c      	ldr	r1, [pc, #560]	@ (80077e8 <__gethex+0x2b0>)
 80075b6:	f7ff feef 	bl	8007398 <strncmp>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d13f      	bne.n	800763e <__gethex+0x106>
 80075be:	b944      	cbnz	r4, 80075d2 <__gethex+0x9a>
 80075c0:	1c74      	adds	r4, r6, #1
 80075c2:	4622      	mov	r2, r4
 80075c4:	4616      	mov	r6, r2
 80075c6:	7830      	ldrb	r0, [r6, #0]
 80075c8:	3201      	adds	r2, #1
 80075ca:	f7ff ffa0 	bl	800750e <__hexdig_fun>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d1f8      	bne.n	80075c4 <__gethex+0x8c>
 80075d2:	1ba4      	subs	r4, r4, r6
 80075d4:	00a7      	lsls	r7, r4, #2
 80075d6:	7833      	ldrb	r3, [r6, #0]
 80075d8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80075dc:	2b50      	cmp	r3, #80	@ 0x50
 80075de:	d13e      	bne.n	800765e <__gethex+0x126>
 80075e0:	7873      	ldrb	r3, [r6, #1]
 80075e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80075e4:	d033      	beq.n	800764e <__gethex+0x116>
 80075e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80075e8:	d034      	beq.n	8007654 <__gethex+0x11c>
 80075ea:	2400      	movs	r4, #0
 80075ec:	1c71      	adds	r1, r6, #1
 80075ee:	7808      	ldrb	r0, [r1, #0]
 80075f0:	f7ff ff8d 	bl	800750e <__hexdig_fun>
 80075f4:	1e43      	subs	r3, r0, #1
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b18      	cmp	r3, #24
 80075fa:	d830      	bhi.n	800765e <__gethex+0x126>
 80075fc:	f1a0 0210 	sub.w	r2, r0, #16
 8007600:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007604:	f7ff ff83 	bl	800750e <__hexdig_fun>
 8007608:	f100 3cff 	add.w	ip, r0, #4294967295
 800760c:	fa5f fc8c 	uxtb.w	ip, ip
 8007610:	f1bc 0f18 	cmp.w	ip, #24
 8007614:	f04f 030a 	mov.w	r3, #10
 8007618:	d91e      	bls.n	8007658 <__gethex+0x120>
 800761a:	b104      	cbz	r4, 800761e <__gethex+0xe6>
 800761c:	4252      	negs	r2, r2
 800761e:	4417      	add	r7, r2
 8007620:	f8ca 1000 	str.w	r1, [sl]
 8007624:	b1ed      	cbz	r5, 8007662 <__gethex+0x12a>
 8007626:	f1bb 0f00 	cmp.w	fp, #0
 800762a:	bf0c      	ite	eq
 800762c:	2506      	moveq	r5, #6
 800762e:	2500      	movne	r5, #0
 8007630:	4628      	mov	r0, r5
 8007632:	b005      	add	sp, #20
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	2500      	movs	r5, #0
 800763a:	462c      	mov	r4, r5
 800763c:	e7b0      	b.n	80075a0 <__gethex+0x68>
 800763e:	2c00      	cmp	r4, #0
 8007640:	d1c7      	bne.n	80075d2 <__gethex+0x9a>
 8007642:	4627      	mov	r7, r4
 8007644:	e7c7      	b.n	80075d6 <__gethex+0x9e>
 8007646:	464e      	mov	r6, r9
 8007648:	462f      	mov	r7, r5
 800764a:	2501      	movs	r5, #1
 800764c:	e7c3      	b.n	80075d6 <__gethex+0x9e>
 800764e:	2400      	movs	r4, #0
 8007650:	1cb1      	adds	r1, r6, #2
 8007652:	e7cc      	b.n	80075ee <__gethex+0xb6>
 8007654:	2401      	movs	r4, #1
 8007656:	e7fb      	b.n	8007650 <__gethex+0x118>
 8007658:	fb03 0002 	mla	r0, r3, r2, r0
 800765c:	e7ce      	b.n	80075fc <__gethex+0xc4>
 800765e:	4631      	mov	r1, r6
 8007660:	e7de      	b.n	8007620 <__gethex+0xe8>
 8007662:	4629      	mov	r1, r5
 8007664:	eba6 0309 	sub.w	r3, r6, r9
 8007668:	3b01      	subs	r3, #1
 800766a:	2b07      	cmp	r3, #7
 800766c:	dc0a      	bgt.n	8007684 <__gethex+0x14c>
 800766e:	9801      	ldr	r0, [sp, #4]
 8007670:	f7fe f954 	bl	800591c <_Balloc>
 8007674:	4604      	mov	r4, r0
 8007676:	b940      	cbnz	r0, 800768a <__gethex+0x152>
 8007678:	4602      	mov	r2, r0
 800767a:	21e4      	movs	r1, #228	@ 0xe4
 800767c:	4b5b      	ldr	r3, [pc, #364]	@ (80077ec <__gethex+0x2b4>)
 800767e:	485c      	ldr	r0, [pc, #368]	@ (80077f0 <__gethex+0x2b8>)
 8007680:	f7ff fec0 	bl	8007404 <__assert_func>
 8007684:	3101      	adds	r1, #1
 8007686:	105b      	asrs	r3, r3, #1
 8007688:	e7ef      	b.n	800766a <__gethex+0x132>
 800768a:	2300      	movs	r3, #0
 800768c:	f100 0a14 	add.w	sl, r0, #20
 8007690:	4655      	mov	r5, sl
 8007692:	469b      	mov	fp, r3
 8007694:	45b1      	cmp	r9, r6
 8007696:	d337      	bcc.n	8007708 <__gethex+0x1d0>
 8007698:	f845 bb04 	str.w	fp, [r5], #4
 800769c:	eba5 050a 	sub.w	r5, r5, sl
 80076a0:	10ad      	asrs	r5, r5, #2
 80076a2:	6125      	str	r5, [r4, #16]
 80076a4:	4658      	mov	r0, fp
 80076a6:	f7fe fa2b 	bl	8005b00 <__hi0bits>
 80076aa:	016d      	lsls	r5, r5, #5
 80076ac:	f8d8 6000 	ldr.w	r6, [r8]
 80076b0:	1a2d      	subs	r5, r5, r0
 80076b2:	42b5      	cmp	r5, r6
 80076b4:	dd54      	ble.n	8007760 <__gethex+0x228>
 80076b6:	1bad      	subs	r5, r5, r6
 80076b8:	4629      	mov	r1, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7fe fdb3 	bl	8006226 <__any_on>
 80076c0:	4681      	mov	r9, r0
 80076c2:	b178      	cbz	r0, 80076e4 <__gethex+0x1ac>
 80076c4:	f04f 0901 	mov.w	r9, #1
 80076c8:	1e6b      	subs	r3, r5, #1
 80076ca:	1159      	asrs	r1, r3, #5
 80076cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80076d0:	f003 021f 	and.w	r2, r3, #31
 80076d4:	fa09 f202 	lsl.w	r2, r9, r2
 80076d8:	420a      	tst	r2, r1
 80076da:	d003      	beq.n	80076e4 <__gethex+0x1ac>
 80076dc:	454b      	cmp	r3, r9
 80076de:	dc36      	bgt.n	800774e <__gethex+0x216>
 80076e0:	f04f 0902 	mov.w	r9, #2
 80076e4:	4629      	mov	r1, r5
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff febe 	bl	8007468 <rshift>
 80076ec:	442f      	add	r7, r5
 80076ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076f2:	42bb      	cmp	r3, r7
 80076f4:	da42      	bge.n	800777c <__gethex+0x244>
 80076f6:	4621      	mov	r1, r4
 80076f8:	9801      	ldr	r0, [sp, #4]
 80076fa:	f7fe f94f 	bl	800599c <_Bfree>
 80076fe:	2300      	movs	r3, #0
 8007700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007702:	25a3      	movs	r5, #163	@ 0xa3
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e793      	b.n	8007630 <__gethex+0xf8>
 8007708:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800770c:	2a2e      	cmp	r2, #46	@ 0x2e
 800770e:	d012      	beq.n	8007736 <__gethex+0x1fe>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d104      	bne.n	800771e <__gethex+0x1e6>
 8007714:	f845 bb04 	str.w	fp, [r5], #4
 8007718:	f04f 0b00 	mov.w	fp, #0
 800771c:	465b      	mov	r3, fp
 800771e:	7830      	ldrb	r0, [r6, #0]
 8007720:	9303      	str	r3, [sp, #12]
 8007722:	f7ff fef4 	bl	800750e <__hexdig_fun>
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	f000 000f 	and.w	r0, r0, #15
 800772c:	4098      	lsls	r0, r3
 800772e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007732:	3304      	adds	r3, #4
 8007734:	e7ae      	b.n	8007694 <__gethex+0x15c>
 8007736:	45b1      	cmp	r9, r6
 8007738:	d8ea      	bhi.n	8007710 <__gethex+0x1d8>
 800773a:	2201      	movs	r2, #1
 800773c:	4630      	mov	r0, r6
 800773e:	492a      	ldr	r1, [pc, #168]	@ (80077e8 <__gethex+0x2b0>)
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	f7ff fe29 	bl	8007398 <strncmp>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	2800      	cmp	r0, #0
 800774a:	d1e1      	bne.n	8007710 <__gethex+0x1d8>
 800774c:	e7a2      	b.n	8007694 <__gethex+0x15c>
 800774e:	4620      	mov	r0, r4
 8007750:	1ea9      	subs	r1, r5, #2
 8007752:	f7fe fd68 	bl	8006226 <__any_on>
 8007756:	2800      	cmp	r0, #0
 8007758:	d0c2      	beq.n	80076e0 <__gethex+0x1a8>
 800775a:	f04f 0903 	mov.w	r9, #3
 800775e:	e7c1      	b.n	80076e4 <__gethex+0x1ac>
 8007760:	da09      	bge.n	8007776 <__gethex+0x23e>
 8007762:	1b75      	subs	r5, r6, r5
 8007764:	4621      	mov	r1, r4
 8007766:	462a      	mov	r2, r5
 8007768:	9801      	ldr	r0, [sp, #4]
 800776a:	f7fe fb2d 	bl	8005dc8 <__lshift>
 800776e:	4604      	mov	r4, r0
 8007770:	1b7f      	subs	r7, r7, r5
 8007772:	f100 0a14 	add.w	sl, r0, #20
 8007776:	f04f 0900 	mov.w	r9, #0
 800777a:	e7b8      	b.n	80076ee <__gethex+0x1b6>
 800777c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007780:	42bd      	cmp	r5, r7
 8007782:	dd6f      	ble.n	8007864 <__gethex+0x32c>
 8007784:	1bed      	subs	r5, r5, r7
 8007786:	42ae      	cmp	r6, r5
 8007788:	dc34      	bgt.n	80077f4 <__gethex+0x2bc>
 800778a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d022      	beq.n	80077d8 <__gethex+0x2a0>
 8007792:	2b03      	cmp	r3, #3
 8007794:	d024      	beq.n	80077e0 <__gethex+0x2a8>
 8007796:	2b01      	cmp	r3, #1
 8007798:	d115      	bne.n	80077c6 <__gethex+0x28e>
 800779a:	42ae      	cmp	r6, r5
 800779c:	d113      	bne.n	80077c6 <__gethex+0x28e>
 800779e:	2e01      	cmp	r6, #1
 80077a0:	d10b      	bne.n	80077ba <__gethex+0x282>
 80077a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077a6:	9a02      	ldr	r2, [sp, #8]
 80077a8:	2562      	movs	r5, #98	@ 0x62
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	2301      	movs	r3, #1
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	f8ca 3000 	str.w	r3, [sl]
 80077b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b6:	601c      	str	r4, [r3, #0]
 80077b8:	e73a      	b.n	8007630 <__gethex+0xf8>
 80077ba:	4620      	mov	r0, r4
 80077bc:	1e71      	subs	r1, r6, #1
 80077be:	f7fe fd32 	bl	8006226 <__any_on>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1ed      	bne.n	80077a2 <__gethex+0x26a>
 80077c6:	4621      	mov	r1, r4
 80077c8:	9801      	ldr	r0, [sp, #4]
 80077ca:	f7fe f8e7 	bl	800599c <_Bfree>
 80077ce:	2300      	movs	r3, #0
 80077d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077d2:	2550      	movs	r5, #80	@ 0x50
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e72b      	b.n	8007630 <__gethex+0xf8>
 80077d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f3      	bne.n	80077c6 <__gethex+0x28e>
 80077de:	e7e0      	b.n	80077a2 <__gethex+0x26a>
 80077e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1dd      	bne.n	80077a2 <__gethex+0x26a>
 80077e6:	e7ee      	b.n	80077c6 <__gethex+0x28e>
 80077e8:	08008378 	.word	0x08008378
 80077ec:	0800820b 	.word	0x0800820b
 80077f0:	08008526 	.word	0x08008526
 80077f4:	1e6f      	subs	r7, r5, #1
 80077f6:	f1b9 0f00 	cmp.w	r9, #0
 80077fa:	d130      	bne.n	800785e <__gethex+0x326>
 80077fc:	b127      	cbz	r7, 8007808 <__gethex+0x2d0>
 80077fe:	4639      	mov	r1, r7
 8007800:	4620      	mov	r0, r4
 8007802:	f7fe fd10 	bl	8006226 <__any_on>
 8007806:	4681      	mov	r9, r0
 8007808:	2301      	movs	r3, #1
 800780a:	4629      	mov	r1, r5
 800780c:	1b76      	subs	r6, r6, r5
 800780e:	2502      	movs	r5, #2
 8007810:	117a      	asrs	r2, r7, #5
 8007812:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007816:	f007 071f 	and.w	r7, r7, #31
 800781a:	40bb      	lsls	r3, r7
 800781c:	4213      	tst	r3, r2
 800781e:	4620      	mov	r0, r4
 8007820:	bf18      	it	ne
 8007822:	f049 0902 	orrne.w	r9, r9, #2
 8007826:	f7ff fe1f 	bl	8007468 <rshift>
 800782a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800782e:	f1b9 0f00 	cmp.w	r9, #0
 8007832:	d047      	beq.n	80078c4 <__gethex+0x38c>
 8007834:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d015      	beq.n	8007868 <__gethex+0x330>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d017      	beq.n	8007870 <__gethex+0x338>
 8007840:	2b01      	cmp	r3, #1
 8007842:	d109      	bne.n	8007858 <__gethex+0x320>
 8007844:	f019 0f02 	tst.w	r9, #2
 8007848:	d006      	beq.n	8007858 <__gethex+0x320>
 800784a:	f8da 3000 	ldr.w	r3, [sl]
 800784e:	ea49 0903 	orr.w	r9, r9, r3
 8007852:	f019 0f01 	tst.w	r9, #1
 8007856:	d10e      	bne.n	8007876 <__gethex+0x33e>
 8007858:	f045 0510 	orr.w	r5, r5, #16
 800785c:	e032      	b.n	80078c4 <__gethex+0x38c>
 800785e:	f04f 0901 	mov.w	r9, #1
 8007862:	e7d1      	b.n	8007808 <__gethex+0x2d0>
 8007864:	2501      	movs	r5, #1
 8007866:	e7e2      	b.n	800782e <__gethex+0x2f6>
 8007868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786a:	f1c3 0301 	rsb	r3, r3, #1
 800786e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <__gethex+0x320>
 8007876:	f04f 0c00 	mov.w	ip, #0
 800787a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800787e:	f104 0314 	add.w	r3, r4, #20
 8007882:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007886:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800788a:	4618      	mov	r0, r3
 800788c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007890:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007894:	d01b      	beq.n	80078ce <__gethex+0x396>
 8007896:	3201      	adds	r2, #1
 8007898:	6002      	str	r2, [r0, #0]
 800789a:	2d02      	cmp	r5, #2
 800789c:	f104 0314 	add.w	r3, r4, #20
 80078a0:	d13c      	bne.n	800791c <__gethex+0x3e4>
 80078a2:	f8d8 2000 	ldr.w	r2, [r8]
 80078a6:	3a01      	subs	r2, #1
 80078a8:	42b2      	cmp	r2, r6
 80078aa:	d109      	bne.n	80078c0 <__gethex+0x388>
 80078ac:	2201      	movs	r2, #1
 80078ae:	1171      	asrs	r1, r6, #5
 80078b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078b4:	f006 061f 	and.w	r6, r6, #31
 80078b8:	fa02 f606 	lsl.w	r6, r2, r6
 80078bc:	421e      	tst	r6, r3
 80078be:	d13a      	bne.n	8007936 <__gethex+0x3fe>
 80078c0:	f045 0520 	orr.w	r5, r5, #32
 80078c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c6:	601c      	str	r4, [r3, #0]
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	601f      	str	r7, [r3, #0]
 80078cc:	e6b0      	b.n	8007630 <__gethex+0xf8>
 80078ce:	4299      	cmp	r1, r3
 80078d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80078d4:	d8d9      	bhi.n	800788a <__gethex+0x352>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	459b      	cmp	fp, r3
 80078da:	db17      	blt.n	800790c <__gethex+0x3d4>
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	9801      	ldr	r0, [sp, #4]
 80078e0:	3101      	adds	r1, #1
 80078e2:	f7fe f81b 	bl	800591c <_Balloc>
 80078e6:	4681      	mov	r9, r0
 80078e8:	b918      	cbnz	r0, 80078f2 <__gethex+0x3ba>
 80078ea:	4602      	mov	r2, r0
 80078ec:	2184      	movs	r1, #132	@ 0x84
 80078ee:	4b19      	ldr	r3, [pc, #100]	@ (8007954 <__gethex+0x41c>)
 80078f0:	e6c5      	b.n	800767e <__gethex+0x146>
 80078f2:	6922      	ldr	r2, [r4, #16]
 80078f4:	f104 010c 	add.w	r1, r4, #12
 80078f8:	3202      	adds	r2, #2
 80078fa:	0092      	lsls	r2, r2, #2
 80078fc:	300c      	adds	r0, #12
 80078fe:	f7ff fd6d 	bl	80073dc <memcpy>
 8007902:	4621      	mov	r1, r4
 8007904:	9801      	ldr	r0, [sp, #4]
 8007906:	f7fe f849 	bl	800599c <_Bfree>
 800790a:	464c      	mov	r4, r9
 800790c:	6923      	ldr	r3, [r4, #16]
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	6122      	str	r2, [r4, #16]
 8007912:	2201      	movs	r2, #1
 8007914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007918:	615a      	str	r2, [r3, #20]
 800791a:	e7be      	b.n	800789a <__gethex+0x362>
 800791c:	6922      	ldr	r2, [r4, #16]
 800791e:	455a      	cmp	r2, fp
 8007920:	dd0b      	ble.n	800793a <__gethex+0x402>
 8007922:	2101      	movs	r1, #1
 8007924:	4620      	mov	r0, r4
 8007926:	f7ff fd9f 	bl	8007468 <rshift>
 800792a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800792e:	3701      	adds	r7, #1
 8007930:	42bb      	cmp	r3, r7
 8007932:	f6ff aee0 	blt.w	80076f6 <__gethex+0x1be>
 8007936:	2501      	movs	r5, #1
 8007938:	e7c2      	b.n	80078c0 <__gethex+0x388>
 800793a:	f016 061f 	ands.w	r6, r6, #31
 800793e:	d0fa      	beq.n	8007936 <__gethex+0x3fe>
 8007940:	4453      	add	r3, sl
 8007942:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007946:	f7fe f8db 	bl	8005b00 <__hi0bits>
 800794a:	f1c6 0620 	rsb	r6, r6, #32
 800794e:	42b0      	cmp	r0, r6
 8007950:	dbe7      	blt.n	8007922 <__gethex+0x3ea>
 8007952:	e7f0      	b.n	8007936 <__gethex+0x3fe>
 8007954:	0800820b 	.word	0x0800820b

08007958 <L_shift>:
 8007958:	f1c2 0208 	rsb	r2, r2, #8
 800795c:	0092      	lsls	r2, r2, #2
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	f1c2 0620 	rsb	r6, r2, #32
 8007964:	6843      	ldr	r3, [r0, #4]
 8007966:	6804      	ldr	r4, [r0, #0]
 8007968:	fa03 f506 	lsl.w	r5, r3, r6
 800796c:	432c      	orrs	r4, r5
 800796e:	40d3      	lsrs	r3, r2
 8007970:	6004      	str	r4, [r0, #0]
 8007972:	f840 3f04 	str.w	r3, [r0, #4]!
 8007976:	4288      	cmp	r0, r1
 8007978:	d3f4      	bcc.n	8007964 <L_shift+0xc>
 800797a:	bd70      	pop	{r4, r5, r6, pc}

0800797c <__match>:
 800797c:	b530      	push	{r4, r5, lr}
 800797e:	6803      	ldr	r3, [r0, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007986:	b914      	cbnz	r4, 800798e <__match+0x12>
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	2001      	movs	r0, #1
 800798c:	bd30      	pop	{r4, r5, pc}
 800798e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007992:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007996:	2d19      	cmp	r5, #25
 8007998:	bf98      	it	ls
 800799a:	3220      	addls	r2, #32
 800799c:	42a2      	cmp	r2, r4
 800799e:	d0f0      	beq.n	8007982 <__match+0x6>
 80079a0:	2000      	movs	r0, #0
 80079a2:	e7f3      	b.n	800798c <__match+0x10>

080079a4 <__hexnan>:
 80079a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	2500      	movs	r5, #0
 80079aa:	680b      	ldr	r3, [r1, #0]
 80079ac:	4682      	mov	sl, r0
 80079ae:	115e      	asrs	r6, r3, #5
 80079b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079b4:	f013 031f 	ands.w	r3, r3, #31
 80079b8:	bf18      	it	ne
 80079ba:	3604      	addne	r6, #4
 80079bc:	1f37      	subs	r7, r6, #4
 80079be:	4690      	mov	r8, r2
 80079c0:	46b9      	mov	r9, r7
 80079c2:	463c      	mov	r4, r7
 80079c4:	46ab      	mov	fp, r5
 80079c6:	b087      	sub	sp, #28
 80079c8:	6801      	ldr	r1, [r0, #0]
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80079d0:	9502      	str	r5, [sp, #8]
 80079d2:	784a      	ldrb	r2, [r1, #1]
 80079d4:	1c4b      	adds	r3, r1, #1
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	b342      	cbz	r2, 8007a2c <__hexnan+0x88>
 80079da:	4610      	mov	r0, r2
 80079dc:	9105      	str	r1, [sp, #20]
 80079de:	9204      	str	r2, [sp, #16]
 80079e0:	f7ff fd95 	bl	800750e <__hexdig_fun>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d151      	bne.n	8007a8c <__hexnan+0xe8>
 80079e8:	9a04      	ldr	r2, [sp, #16]
 80079ea:	9905      	ldr	r1, [sp, #20]
 80079ec:	2a20      	cmp	r2, #32
 80079ee:	d818      	bhi.n	8007a22 <__hexnan+0x7e>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	459b      	cmp	fp, r3
 80079f4:	dd13      	ble.n	8007a1e <__hexnan+0x7a>
 80079f6:	454c      	cmp	r4, r9
 80079f8:	d206      	bcs.n	8007a08 <__hexnan+0x64>
 80079fa:	2d07      	cmp	r5, #7
 80079fc:	dc04      	bgt.n	8007a08 <__hexnan+0x64>
 80079fe:	462a      	mov	r2, r5
 8007a00:	4649      	mov	r1, r9
 8007a02:	4620      	mov	r0, r4
 8007a04:	f7ff ffa8 	bl	8007958 <L_shift>
 8007a08:	4544      	cmp	r4, r8
 8007a0a:	d952      	bls.n	8007ab2 <__hexnan+0x10e>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f1a4 0904 	sub.w	r9, r4, #4
 8007a12:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a16:	461d      	mov	r5, r3
 8007a18:	464c      	mov	r4, r9
 8007a1a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a1e:	9903      	ldr	r1, [sp, #12]
 8007a20:	e7d7      	b.n	80079d2 <__hexnan+0x2e>
 8007a22:	2a29      	cmp	r2, #41	@ 0x29
 8007a24:	d157      	bne.n	8007ad6 <__hexnan+0x132>
 8007a26:	3102      	adds	r1, #2
 8007a28:	f8ca 1000 	str.w	r1, [sl]
 8007a2c:	f1bb 0f00 	cmp.w	fp, #0
 8007a30:	d051      	beq.n	8007ad6 <__hexnan+0x132>
 8007a32:	454c      	cmp	r4, r9
 8007a34:	d206      	bcs.n	8007a44 <__hexnan+0xa0>
 8007a36:	2d07      	cmp	r5, #7
 8007a38:	dc04      	bgt.n	8007a44 <__hexnan+0xa0>
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7ff ff8a 	bl	8007958 <L_shift>
 8007a44:	4544      	cmp	r4, r8
 8007a46:	d936      	bls.n	8007ab6 <__hexnan+0x112>
 8007a48:	4623      	mov	r3, r4
 8007a4a:	f1a8 0204 	sub.w	r2, r8, #4
 8007a4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a52:	429f      	cmp	r7, r3
 8007a54:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a58:	d2f9      	bcs.n	8007a4e <__hexnan+0xaa>
 8007a5a:	1b3b      	subs	r3, r7, r4
 8007a5c:	f023 0303 	bic.w	r3, r3, #3
 8007a60:	3304      	adds	r3, #4
 8007a62:	3401      	adds	r4, #1
 8007a64:	3e03      	subs	r6, #3
 8007a66:	42b4      	cmp	r4, r6
 8007a68:	bf88      	it	hi
 8007a6a:	2304      	movhi	r3, #4
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4443      	add	r3, r8
 8007a70:	f843 2b04 	str.w	r2, [r3], #4
 8007a74:	429f      	cmp	r7, r3
 8007a76:	d2fb      	bcs.n	8007a70 <__hexnan+0xcc>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	b91b      	cbnz	r3, 8007a84 <__hexnan+0xe0>
 8007a7c:	4547      	cmp	r7, r8
 8007a7e:	d128      	bne.n	8007ad2 <__hexnan+0x12e>
 8007a80:	2301      	movs	r3, #1
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	2005      	movs	r0, #5
 8007a86:	b007      	add	sp, #28
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	2d08      	cmp	r5, #8
 8007a90:	f10b 0b01 	add.w	fp, fp, #1
 8007a94:	dd06      	ble.n	8007aa4 <__hexnan+0x100>
 8007a96:	4544      	cmp	r4, r8
 8007a98:	d9c1      	bls.n	8007a1e <__hexnan+0x7a>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2501      	movs	r5, #1
 8007a9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007aa2:	3c04      	subs	r4, #4
 8007aa4:	6822      	ldr	r2, [r4, #0]
 8007aa6:	f000 000f 	and.w	r0, r0, #15
 8007aaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007aae:	6020      	str	r0, [r4, #0]
 8007ab0:	e7b5      	b.n	8007a1e <__hexnan+0x7a>
 8007ab2:	2508      	movs	r5, #8
 8007ab4:	e7b3      	b.n	8007a1e <__hexnan+0x7a>
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0dd      	beq.n	8007a78 <__hexnan+0xd4>
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	f1c3 0320 	rsb	r3, r3, #32
 8007ac4:	40da      	lsrs	r2, r3
 8007ac6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007aca:	4013      	ands	r3, r2
 8007acc:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ad0:	e7d2      	b.n	8007a78 <__hexnan+0xd4>
 8007ad2:	3f04      	subs	r7, #4
 8007ad4:	e7d0      	b.n	8007a78 <__hexnan+0xd4>
 8007ad6:	2004      	movs	r0, #4
 8007ad8:	e7d5      	b.n	8007a86 <__hexnan+0xe2>

08007ada <__ascii_mbtowc>:
 8007ada:	b082      	sub	sp, #8
 8007adc:	b901      	cbnz	r1, 8007ae0 <__ascii_mbtowc+0x6>
 8007ade:	a901      	add	r1, sp, #4
 8007ae0:	b142      	cbz	r2, 8007af4 <__ascii_mbtowc+0x1a>
 8007ae2:	b14b      	cbz	r3, 8007af8 <__ascii_mbtowc+0x1e>
 8007ae4:	7813      	ldrb	r3, [r2, #0]
 8007ae6:	600b      	str	r3, [r1, #0]
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	1e10      	subs	r0, r2, #0
 8007aec:	bf18      	it	ne
 8007aee:	2001      	movne	r0, #1
 8007af0:	b002      	add	sp, #8
 8007af2:	4770      	bx	lr
 8007af4:	4610      	mov	r0, r2
 8007af6:	e7fb      	b.n	8007af0 <__ascii_mbtowc+0x16>
 8007af8:	f06f 0001 	mvn.w	r0, #1
 8007afc:	e7f8      	b.n	8007af0 <__ascii_mbtowc+0x16>

08007afe <_realloc_r>:
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	4680      	mov	r8, r0
 8007b04:	4615      	mov	r5, r2
 8007b06:	460c      	mov	r4, r1
 8007b08:	b921      	cbnz	r1, 8007b14 <_realloc_r+0x16>
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	f7fd be78 	b.w	8005804 <_malloc_r>
 8007b14:	b92a      	cbnz	r2, 8007b22 <_realloc_r+0x24>
 8007b16:	f7fd fe03 	bl	8005720 <_free_r>
 8007b1a:	2400      	movs	r4, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b22:	f000 f840 	bl	8007ba6 <_malloc_usable_size_r>
 8007b26:	4285      	cmp	r5, r0
 8007b28:	4606      	mov	r6, r0
 8007b2a:	d802      	bhi.n	8007b32 <_realloc_r+0x34>
 8007b2c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b30:	d8f4      	bhi.n	8007b1c <_realloc_r+0x1e>
 8007b32:	4629      	mov	r1, r5
 8007b34:	4640      	mov	r0, r8
 8007b36:	f7fd fe65 	bl	8005804 <_malloc_r>
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d0ec      	beq.n	8007b1a <_realloc_r+0x1c>
 8007b40:	42b5      	cmp	r5, r6
 8007b42:	462a      	mov	r2, r5
 8007b44:	4621      	mov	r1, r4
 8007b46:	bf28      	it	cs
 8007b48:	4632      	movcs	r2, r6
 8007b4a:	f7ff fc47 	bl	80073dc <memcpy>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4640      	mov	r0, r8
 8007b52:	f7fd fde5 	bl	8005720 <_free_r>
 8007b56:	463c      	mov	r4, r7
 8007b58:	e7e0      	b.n	8007b1c <_realloc_r+0x1e>

08007b5a <__ascii_wctomb>:
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	b141      	cbz	r1, 8007b72 <__ascii_wctomb+0x18>
 8007b60:	2aff      	cmp	r2, #255	@ 0xff
 8007b62:	d904      	bls.n	8007b6e <__ascii_wctomb+0x14>
 8007b64:	228a      	movs	r2, #138	@ 0x8a
 8007b66:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	4770      	bx	lr
 8007b6e:	2001      	movs	r0, #1
 8007b70:	700a      	strb	r2, [r1, #0]
 8007b72:	4770      	bx	lr

08007b74 <fiprintf>:
 8007b74:	b40e      	push	{r1, r2, r3}
 8007b76:	b503      	push	{r0, r1, lr}
 8007b78:	4601      	mov	r1, r0
 8007b7a:	ab03      	add	r3, sp, #12
 8007b7c:	4805      	ldr	r0, [pc, #20]	@ (8007b94 <fiprintf+0x20>)
 8007b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b82:	6800      	ldr	r0, [r0, #0]
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	f000 f83d 	bl	8007c04 <_vfiprintf_r>
 8007b8a:	b002      	add	sp, #8
 8007b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b90:	b003      	add	sp, #12
 8007b92:	4770      	bx	lr
 8007b94:	20000018 	.word	0x20000018

08007b98 <abort>:
 8007b98:	2006      	movs	r0, #6
 8007b9a:	b508      	push	{r3, lr}
 8007b9c:	f000 fa06 	bl	8007fac <raise>
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	f7f9 fcde 	bl	8001562 <_exit>

08007ba6 <_malloc_usable_size_r>:
 8007ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007baa:	1f18      	subs	r0, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bfbc      	itt	lt
 8007bb0:	580b      	ldrlt	r3, [r1, r0]
 8007bb2:	18c0      	addlt	r0, r0, r3
 8007bb4:	4770      	bx	lr

08007bb6 <__sfputc_r>:
 8007bb6:	6893      	ldr	r3, [r2, #8]
 8007bb8:	b410      	push	{r4}
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	6093      	str	r3, [r2, #8]
 8007bc0:	da07      	bge.n	8007bd2 <__sfputc_r+0x1c>
 8007bc2:	6994      	ldr	r4, [r2, #24]
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	db01      	blt.n	8007bcc <__sfputc_r+0x16>
 8007bc8:	290a      	cmp	r1, #10
 8007bca:	d102      	bne.n	8007bd2 <__sfputc_r+0x1c>
 8007bcc:	bc10      	pop	{r4}
 8007bce:	f000 b931 	b.w	8007e34 <__swbuf_r>
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	1c58      	adds	r0, r3, #1
 8007bd6:	6010      	str	r0, [r2, #0]
 8007bd8:	7019      	strb	r1, [r3, #0]
 8007bda:	4608      	mov	r0, r1
 8007bdc:	bc10      	pop	{r4}
 8007bde:	4770      	bx	lr

08007be0 <__sfputs_r>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	4614      	mov	r4, r2
 8007be8:	18d5      	adds	r5, r2, r3
 8007bea:	42ac      	cmp	r4, r5
 8007bec:	d101      	bne.n	8007bf2 <__sfputs_r+0x12>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e007      	b.n	8007c02 <__sfputs_r+0x22>
 8007bf2:	463a      	mov	r2, r7
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfa:	f7ff ffdc 	bl	8007bb6 <__sfputc_r>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d1f3      	bne.n	8007bea <__sfputs_r+0xa>
 8007c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c04 <_vfiprintf_r>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	460d      	mov	r5, r1
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	4698      	mov	r8, r3
 8007c0e:	4606      	mov	r6, r0
 8007c10:	b09d      	sub	sp, #116	@ 0x74
 8007c12:	b118      	cbz	r0, 8007c1c <_vfiprintf_r+0x18>
 8007c14:	6a03      	ldr	r3, [r0, #32]
 8007c16:	b90b      	cbnz	r3, 8007c1c <_vfiprintf_r+0x18>
 8007c18:	f7fc fdd0 	bl	80047bc <__sinit>
 8007c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c1e:	07d9      	lsls	r1, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_vfiprintf_r+0x2a>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	059a      	lsls	r2, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_vfiprintf_r+0x2a>
 8007c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c2a:	f7fc ff12 	bl	8004a52 <__retarget_lock_acquire_recursive>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	071b      	lsls	r3, r3, #28
 8007c32:	d501      	bpl.n	8007c38 <_vfiprintf_r+0x34>
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	b99b      	cbnz	r3, 8007c60 <_vfiprintf_r+0x5c>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f000 f938 	bl	8007eb0 <__swsetup_r>
 8007c40:	b170      	cbz	r0, 8007c60 <_vfiprintf_r+0x5c>
 8007c42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c44:	07dc      	lsls	r4, r3, #31
 8007c46:	d504      	bpl.n	8007c52 <_vfiprintf_r+0x4e>
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	b01d      	add	sp, #116	@ 0x74
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	0598      	lsls	r0, r3, #22
 8007c56:	d4f7      	bmi.n	8007c48 <_vfiprintf_r+0x44>
 8007c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c5a:	f7fc fefb 	bl	8004a54 <__retarget_lock_release_recursive>
 8007c5e:	e7f3      	b.n	8007c48 <_vfiprintf_r+0x44>
 8007c60:	2300      	movs	r3, #0
 8007c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c64:	2320      	movs	r3, #32
 8007c66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c6a:	2330      	movs	r3, #48	@ 0x30
 8007c6c:	f04f 0901 	mov.w	r9, #1
 8007c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e20 <_vfiprintf_r+0x21c>
 8007c78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	469a      	mov	sl, r3
 8007c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c84:	b10a      	cbz	r2, 8007c8a <_vfiprintf_r+0x86>
 8007c86:	2a25      	cmp	r2, #37	@ 0x25
 8007c88:	d1f9      	bne.n	8007c7e <_vfiprintf_r+0x7a>
 8007c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8e:	d00b      	beq.n	8007ca8 <_vfiprintf_r+0xa4>
 8007c90:	465b      	mov	r3, fp
 8007c92:	4622      	mov	r2, r4
 8007c94:	4629      	mov	r1, r5
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7ff ffa2 	bl	8007be0 <__sfputs_r>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	f000 80a7 	beq.w	8007df0 <_vfiprintf_r+0x1ec>
 8007ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ca4:	445a      	add	r2, fp
 8007ca6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 809f 	beq.w	8007df0 <_vfiprintf_r+0x1ec>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cbc:	f10a 0a01 	add.w	sl, sl, #1
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cca:	4654      	mov	r4, sl
 8007ccc:	2205      	movs	r2, #5
 8007cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd2:	4853      	ldr	r0, [pc, #332]	@ (8007e20 <_vfiprintf_r+0x21c>)
 8007cd4:	f7fc febf 	bl	8004a56 <memchr>
 8007cd8:	9a04      	ldr	r2, [sp, #16]
 8007cda:	b9d8      	cbnz	r0, 8007d14 <_vfiprintf_r+0x110>
 8007cdc:	06d1      	lsls	r1, r2, #27
 8007cde:	bf44      	itt	mi
 8007ce0:	2320      	movmi	r3, #32
 8007ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ce6:	0713      	lsls	r3, r2, #28
 8007ce8:	bf44      	itt	mi
 8007cea:	232b      	movmi	r3, #43	@ 0x2b
 8007cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf6:	d015      	beq.n	8007d24 <_vfiprintf_r+0x120>
 8007cf8:	4654      	mov	r4, sl
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f04f 0c0a 	mov.w	ip, #10
 8007d00:	9a07      	ldr	r2, [sp, #28]
 8007d02:	4621      	mov	r1, r4
 8007d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d08:	3b30      	subs	r3, #48	@ 0x30
 8007d0a:	2b09      	cmp	r3, #9
 8007d0c:	d94b      	bls.n	8007da6 <_vfiprintf_r+0x1a2>
 8007d0e:	b1b0      	cbz	r0, 8007d3e <_vfiprintf_r+0x13a>
 8007d10:	9207      	str	r2, [sp, #28]
 8007d12:	e014      	b.n	8007d3e <_vfiprintf_r+0x13a>
 8007d14:	eba0 0308 	sub.w	r3, r0, r8
 8007d18:	fa09 f303 	lsl.w	r3, r9, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	46a2      	mov	sl, r4
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	e7d2      	b.n	8007cca <_vfiprintf_r+0xc6>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	1d19      	adds	r1, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	9103      	str	r1, [sp, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bfbb      	ittet	lt
 8007d30:	425b      	neglt	r3, r3
 8007d32:	f042 0202 	orrlt.w	r2, r2, #2
 8007d36:	9307      	strge	r3, [sp, #28]
 8007d38:	9307      	strlt	r3, [sp, #28]
 8007d3a:	bfb8      	it	lt
 8007d3c:	9204      	strlt	r2, [sp, #16]
 8007d3e:	7823      	ldrb	r3, [r4, #0]
 8007d40:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d42:	d10a      	bne.n	8007d5a <_vfiprintf_r+0x156>
 8007d44:	7863      	ldrb	r3, [r4, #1]
 8007d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d48:	d132      	bne.n	8007db0 <_vfiprintf_r+0x1ac>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	3402      	adds	r4, #2
 8007d4e:	1d1a      	adds	r2, r3, #4
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	9203      	str	r2, [sp, #12]
 8007d54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e24 <_vfiprintf_r+0x220>
 8007d5e:	2203      	movs	r2, #3
 8007d60:	4650      	mov	r0, sl
 8007d62:	7821      	ldrb	r1, [r4, #0]
 8007d64:	f7fc fe77 	bl	8004a56 <memchr>
 8007d68:	b138      	cbz	r0, 8007d7a <_vfiprintf_r+0x176>
 8007d6a:	2240      	movs	r2, #64	@ 0x40
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	eba0 000a 	sub.w	r0, r0, sl
 8007d72:	4082      	lsls	r2, r0
 8007d74:	4313      	orrs	r3, r2
 8007d76:	3401      	adds	r4, #1
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7e:	2206      	movs	r2, #6
 8007d80:	4829      	ldr	r0, [pc, #164]	@ (8007e28 <_vfiprintf_r+0x224>)
 8007d82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d86:	f7fc fe66 	bl	8004a56 <memchr>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d03f      	beq.n	8007e0e <_vfiprintf_r+0x20a>
 8007d8e:	4b27      	ldr	r3, [pc, #156]	@ (8007e2c <_vfiprintf_r+0x228>)
 8007d90:	bb1b      	cbnz	r3, 8007dda <_vfiprintf_r+0x1d6>
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	3307      	adds	r3, #7
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da0:	443b      	add	r3, r7
 8007da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da4:	e76a      	b.n	8007c7c <_vfiprintf_r+0x78>
 8007da6:	460c      	mov	r4, r1
 8007da8:	2001      	movs	r0, #1
 8007daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dae:	e7a8      	b.n	8007d02 <_vfiprintf_r+0xfe>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f04f 0c0a 	mov.w	ip, #10
 8007db6:	4619      	mov	r1, r3
 8007db8:	3401      	adds	r4, #1
 8007dba:	9305      	str	r3, [sp, #20]
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc2:	3a30      	subs	r2, #48	@ 0x30
 8007dc4:	2a09      	cmp	r2, #9
 8007dc6:	d903      	bls.n	8007dd0 <_vfiprintf_r+0x1cc>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0c6      	beq.n	8007d5a <_vfiprintf_r+0x156>
 8007dcc:	9105      	str	r1, [sp, #20]
 8007dce:	e7c4      	b.n	8007d5a <_vfiprintf_r+0x156>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd8:	e7f0      	b.n	8007dbc <_vfiprintf_r+0x1b8>
 8007dda:	ab03      	add	r3, sp, #12
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	462a      	mov	r2, r5
 8007de0:	4630      	mov	r0, r6
 8007de2:	4b13      	ldr	r3, [pc, #76]	@ (8007e30 <_vfiprintf_r+0x22c>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	f7fb fe8f 	bl	8003b08 <_printf_float>
 8007dea:	4607      	mov	r7, r0
 8007dec:	1c78      	adds	r0, r7, #1
 8007dee:	d1d6      	bne.n	8007d9e <_vfiprintf_r+0x19a>
 8007df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007df2:	07d9      	lsls	r1, r3, #31
 8007df4:	d405      	bmi.n	8007e02 <_vfiprintf_r+0x1fe>
 8007df6:	89ab      	ldrh	r3, [r5, #12]
 8007df8:	059a      	lsls	r2, r3, #22
 8007dfa:	d402      	bmi.n	8007e02 <_vfiprintf_r+0x1fe>
 8007dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dfe:	f7fc fe29 	bl	8004a54 <__retarget_lock_release_recursive>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	065b      	lsls	r3, r3, #25
 8007e06:	f53f af1f 	bmi.w	8007c48 <_vfiprintf_r+0x44>
 8007e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e0c:	e71e      	b.n	8007c4c <_vfiprintf_r+0x48>
 8007e0e:	ab03      	add	r3, sp, #12
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	462a      	mov	r2, r5
 8007e14:	4630      	mov	r0, r6
 8007e16:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <_vfiprintf_r+0x22c>)
 8007e18:	a904      	add	r1, sp, #16
 8007e1a:	f7fc f913 	bl	8004044 <_printf_i>
 8007e1e:	e7e4      	b.n	8007dea <_vfiprintf_r+0x1e6>
 8007e20:	080084d1 	.word	0x080084d1
 8007e24:	080084d7 	.word	0x080084d7
 8007e28:	080084db 	.word	0x080084db
 8007e2c:	08003b09 	.word	0x08003b09
 8007e30:	08007be1 	.word	0x08007be1

08007e34 <__swbuf_r>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	460e      	mov	r6, r1
 8007e38:	4614      	mov	r4, r2
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	b118      	cbz	r0, 8007e46 <__swbuf_r+0x12>
 8007e3e:	6a03      	ldr	r3, [r0, #32]
 8007e40:	b90b      	cbnz	r3, 8007e46 <__swbuf_r+0x12>
 8007e42:	f7fc fcbb 	bl	80047bc <__sinit>
 8007e46:	69a3      	ldr	r3, [r4, #24]
 8007e48:	60a3      	str	r3, [r4, #8]
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	071a      	lsls	r2, r3, #28
 8007e4e:	d501      	bpl.n	8007e54 <__swbuf_r+0x20>
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	b943      	cbnz	r3, 8007e66 <__swbuf_r+0x32>
 8007e54:	4621      	mov	r1, r4
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 f82a 	bl	8007eb0 <__swsetup_r>
 8007e5c:	b118      	cbz	r0, 8007e66 <__swbuf_r+0x32>
 8007e5e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e62:	4638      	mov	r0, r7
 8007e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	6922      	ldr	r2, [r4, #16]
 8007e6a:	b2f6      	uxtb	r6, r6
 8007e6c:	1a98      	subs	r0, r3, r2
 8007e6e:	6963      	ldr	r3, [r4, #20]
 8007e70:	4637      	mov	r7, r6
 8007e72:	4283      	cmp	r3, r0
 8007e74:	dc05      	bgt.n	8007e82 <__swbuf_r+0x4e>
 8007e76:	4621      	mov	r1, r4
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f7ff fa4b 	bl	8007314 <_fflush_r>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d1ed      	bne.n	8007e5e <__swbuf_r+0x2a>
 8007e82:	68a3      	ldr	r3, [r4, #8]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	6022      	str	r2, [r4, #0]
 8007e8e:	701e      	strb	r6, [r3, #0]
 8007e90:	6962      	ldr	r2, [r4, #20]
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d004      	beq.n	8007ea2 <__swbuf_r+0x6e>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	07db      	lsls	r3, r3, #31
 8007e9c:	d5e1      	bpl.n	8007e62 <__swbuf_r+0x2e>
 8007e9e:	2e0a      	cmp	r6, #10
 8007ea0:	d1df      	bne.n	8007e62 <__swbuf_r+0x2e>
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f7ff fa35 	bl	8007314 <_fflush_r>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d0d9      	beq.n	8007e62 <__swbuf_r+0x2e>
 8007eae:	e7d6      	b.n	8007e5e <__swbuf_r+0x2a>

08007eb0 <__swsetup_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4b29      	ldr	r3, [pc, #164]	@ (8007f58 <__swsetup_r+0xa8>)
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	460c      	mov	r4, r1
 8007eba:	b118      	cbz	r0, 8007ec4 <__swsetup_r+0x14>
 8007ebc:	6a03      	ldr	r3, [r0, #32]
 8007ebe:	b90b      	cbnz	r3, 8007ec4 <__swsetup_r+0x14>
 8007ec0:	f7fc fc7c 	bl	80047bc <__sinit>
 8007ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec8:	0719      	lsls	r1, r3, #28
 8007eca:	d422      	bmi.n	8007f12 <__swsetup_r+0x62>
 8007ecc:	06da      	lsls	r2, r3, #27
 8007ece:	d407      	bmi.n	8007ee0 <__swsetup_r+0x30>
 8007ed0:	2209      	movs	r2, #9
 8007ed2:	602a      	str	r2, [r5, #0]
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	e033      	b.n	8007f48 <__swsetup_r+0x98>
 8007ee0:	0758      	lsls	r0, r3, #29
 8007ee2:	d512      	bpl.n	8007f0a <__swsetup_r+0x5a>
 8007ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ee6:	b141      	cbz	r1, 8007efa <__swsetup_r+0x4a>
 8007ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007eec:	4299      	cmp	r1, r3
 8007eee:	d002      	beq.n	8007ef6 <__swsetup_r+0x46>
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f7fd fc15 	bl	8005720 <_free_r>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	2300      	movs	r3, #0
 8007f04:	6063      	str	r3, [r4, #4]
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	f043 0308 	orr.w	r3, r3, #8
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	b94b      	cbnz	r3, 8007f2a <__swsetup_r+0x7a>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f20:	d003      	beq.n	8007f2a <__swsetup_r+0x7a>
 8007f22:	4621      	mov	r1, r4
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 f882 	bl	800802e <__smakebuf_r>
 8007f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2e:	f013 0201 	ands.w	r2, r3, #1
 8007f32:	d00a      	beq.n	8007f4a <__swsetup_r+0x9a>
 8007f34:	2200      	movs	r2, #0
 8007f36:	60a2      	str	r2, [r4, #8]
 8007f38:	6962      	ldr	r2, [r4, #20]
 8007f3a:	4252      	negs	r2, r2
 8007f3c:	61a2      	str	r2, [r4, #24]
 8007f3e:	6922      	ldr	r2, [r4, #16]
 8007f40:	b942      	cbnz	r2, 8007f54 <__swsetup_r+0xa4>
 8007f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f46:	d1c5      	bne.n	8007ed4 <__swsetup_r+0x24>
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	0799      	lsls	r1, r3, #30
 8007f4c:	bf58      	it	pl
 8007f4e:	6962      	ldrpl	r2, [r4, #20]
 8007f50:	60a2      	str	r2, [r4, #8]
 8007f52:	e7f4      	b.n	8007f3e <__swsetup_r+0x8e>
 8007f54:	2000      	movs	r0, #0
 8007f56:	e7f7      	b.n	8007f48 <__swsetup_r+0x98>
 8007f58:	20000018 	.word	0x20000018

08007f5c <_raise_r>:
 8007f5c:	291f      	cmp	r1, #31
 8007f5e:	b538      	push	{r3, r4, r5, lr}
 8007f60:	4605      	mov	r5, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	d904      	bls.n	8007f70 <_raise_r+0x14>
 8007f66:	2316      	movs	r3, #22
 8007f68:	6003      	str	r3, [r0, #0]
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f72:	b112      	cbz	r2, 8007f7a <_raise_r+0x1e>
 8007f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f78:	b94b      	cbnz	r3, 8007f8e <_raise_r+0x32>
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 f830 	bl	8007fe0 <_getpid_r>
 8007f80:	4622      	mov	r2, r4
 8007f82:	4601      	mov	r1, r0
 8007f84:	4628      	mov	r0, r5
 8007f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8a:	f000 b817 	b.w	8007fbc <_kill_r>
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d00a      	beq.n	8007fa8 <_raise_r+0x4c>
 8007f92:	1c59      	adds	r1, r3, #1
 8007f94:	d103      	bne.n	8007f9e <_raise_r+0x42>
 8007f96:	2316      	movs	r3, #22
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	e7e7      	b.n	8007f6e <_raise_r+0x12>
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007fa6:	4798      	blx	r3
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e7e0      	b.n	8007f6e <_raise_r+0x12>

08007fac <raise>:
 8007fac:	4b02      	ldr	r3, [pc, #8]	@ (8007fb8 <raise+0xc>)
 8007fae:	4601      	mov	r1, r0
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f7ff bfd3 	b.w	8007f5c <_raise_r>
 8007fb6:	bf00      	nop
 8007fb8:	20000018 	.word	0x20000018

08007fbc <_kill_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4d06      	ldr	r5, [pc, #24]	@ (8007fdc <_kill_r+0x20>)
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f7f9 faba 	bl	8001542 <_kill>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d102      	bne.n	8007fd8 <_kill_r+0x1c>
 8007fd2:	682b      	ldr	r3, [r5, #0]
 8007fd4:	b103      	cbz	r3, 8007fd8 <_kill_r+0x1c>
 8007fd6:	6023      	str	r3, [r4, #0]
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	200003c8 	.word	0x200003c8

08007fe0 <_getpid_r>:
 8007fe0:	f7f9 baa8 	b.w	8001534 <_getpid>

08007fe4 <__swhatbuf_r>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fec:	4615      	mov	r5, r2
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	461e      	mov	r6, r3
 8007ff2:	b096      	sub	sp, #88	@ 0x58
 8007ff4:	da0c      	bge.n	8008010 <__swhatbuf_r+0x2c>
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ffe:	bf14      	ite	ne
 8008000:	2340      	movne	r3, #64	@ 0x40
 8008002:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008006:	2000      	movs	r0, #0
 8008008:	6031      	str	r1, [r6, #0]
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	b016      	add	sp, #88	@ 0x58
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	466a      	mov	r2, sp
 8008012:	f000 f849 	bl	80080a8 <_fstat_r>
 8008016:	2800      	cmp	r0, #0
 8008018:	dbed      	blt.n	8007ff6 <__swhatbuf_r+0x12>
 800801a:	9901      	ldr	r1, [sp, #4]
 800801c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008020:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008024:	4259      	negs	r1, r3
 8008026:	4159      	adcs	r1, r3
 8008028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800802c:	e7eb      	b.n	8008006 <__swhatbuf_r+0x22>

0800802e <__smakebuf_r>:
 800802e:	898b      	ldrh	r3, [r1, #12]
 8008030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008032:	079d      	lsls	r5, r3, #30
 8008034:	4606      	mov	r6, r0
 8008036:	460c      	mov	r4, r1
 8008038:	d507      	bpl.n	800804a <__smakebuf_r+0x1c>
 800803a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	2301      	movs	r3, #1
 8008044:	6163      	str	r3, [r4, #20]
 8008046:	b003      	add	sp, #12
 8008048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800804a:	466a      	mov	r2, sp
 800804c:	ab01      	add	r3, sp, #4
 800804e:	f7ff ffc9 	bl	8007fe4 <__swhatbuf_r>
 8008052:	9f00      	ldr	r7, [sp, #0]
 8008054:	4605      	mov	r5, r0
 8008056:	4639      	mov	r1, r7
 8008058:	4630      	mov	r0, r6
 800805a:	f7fd fbd3 	bl	8005804 <_malloc_r>
 800805e:	b948      	cbnz	r0, 8008074 <__smakebuf_r+0x46>
 8008060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008064:	059a      	lsls	r2, r3, #22
 8008066:	d4ee      	bmi.n	8008046 <__smakebuf_r+0x18>
 8008068:	f023 0303 	bic.w	r3, r3, #3
 800806c:	f043 0302 	orr.w	r3, r3, #2
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	e7e2      	b.n	800803a <__smakebuf_r+0xc>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800807a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807e:	81a3      	strh	r3, [r4, #12]
 8008080:	9b01      	ldr	r3, [sp, #4]
 8008082:	6020      	str	r0, [r4, #0]
 8008084:	b15b      	cbz	r3, 800809e <__smakebuf_r+0x70>
 8008086:	4630      	mov	r0, r6
 8008088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808c:	f000 f81e 	bl	80080cc <_isatty_r>
 8008090:	b128      	cbz	r0, 800809e <__smakebuf_r+0x70>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f023 0303 	bic.w	r3, r3, #3
 8008098:	f043 0301 	orr.w	r3, r3, #1
 800809c:	81a3      	strh	r3, [r4, #12]
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	431d      	orrs	r5, r3
 80080a2:	81a5      	strh	r5, [r4, #12]
 80080a4:	e7cf      	b.n	8008046 <__smakebuf_r+0x18>
	...

080080a8 <_fstat_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	2300      	movs	r3, #0
 80080ac:	4d06      	ldr	r5, [pc, #24]	@ (80080c8 <_fstat_r+0x20>)
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	4611      	mov	r1, r2
 80080b4:	602b      	str	r3, [r5, #0]
 80080b6:	f7f9 faa3 	bl	8001600 <_fstat>
 80080ba:	1c43      	adds	r3, r0, #1
 80080bc:	d102      	bne.n	80080c4 <_fstat_r+0x1c>
 80080be:	682b      	ldr	r3, [r5, #0]
 80080c0:	b103      	cbz	r3, 80080c4 <_fstat_r+0x1c>
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	200003c8 	.word	0x200003c8

080080cc <_isatty_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	2300      	movs	r3, #0
 80080d0:	4d05      	ldr	r5, [pc, #20]	@ (80080e8 <_isatty_r+0x1c>)
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7f9 faa1 	bl	800161e <_isatty>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_isatty_r+0x1a>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_isatty_r+0x1a>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	200003c8 	.word	0x200003c8

080080ec <_init>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr

080080f8 <_fini>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr
