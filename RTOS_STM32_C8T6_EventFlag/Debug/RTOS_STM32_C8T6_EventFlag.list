
RTOS_STM32_C8T6_EventFlag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007ac8  08007ac8  00008ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d38  08007d38  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  08007d38  08007d38  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d38  08007d38  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d38  08007d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d3c  08007d3c  00008d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007d40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  2000006c  08007dac  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cdc  08007dac  00009cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001858b  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b0  00000000  00000000  00021620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00024ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a0  00000000  00000000  00026440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047b1  00000000  00000000  000274e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b4b  00000000  00000000  0002bc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e32  00000000  00000000  000447dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db60e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006190  00000000  00000000  000db654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000e17e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ab0 	.word	0x08007ab0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08007ab0 	.word	0x08007ab0

08000150 <_write>:
void S_Task2_LedBlue(void *argument);
void S_Task1_PrintNotify(void *argument);
void S_Task4_CountUp(void *argument);

/* USER CODE BEGIN PFP */
int _write(int fd, char * ptr, int len) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	b29a      	uxth	r2, r3
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	68b9      	ldr	r1, [r7, #8]
 8000166:	4804      	ldr	r0, [pc, #16]	@ (8000178 <_write+0x28>)
 8000168:	f001 fed4 	bl	8001f14 <HAL_UART_Transmit>
  return len;
 800016c:	687b      	ldr	r3, [r7, #4]
}
 800016e:	4618      	mov	r0, r3
 8000170:	3710      	adds	r7, #16
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000088 	.word	0x20000088

0800017c <HAL_UART_RxCpltCallback>:

uint8_t data_rx;
char uart_buff[100];
uint8_t uart_index = 0;
uint8_t uart_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]

	if (data_rx == '\n'){
 8000184:	4b18      	ldr	r3, [pc, #96]	@ (80001e8 <HAL_UART_RxCpltCallback+0x6c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b0a      	cmp	r3, #10
 800018a:	d109      	bne.n	80001a0 <HAL_UART_RxCpltCallback+0x24>
		uart_buff[uart_index] = '\0';
 800018c:	4b17      	ldr	r3, [pc, #92]	@ (80001ec <HAL_UART_RxCpltCallback+0x70>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	461a      	mov	r2, r3
 8000192:	4b17      	ldr	r3, [pc, #92]	@ (80001f0 <HAL_UART_RxCpltCallback+0x74>)
 8000194:	2100      	movs	r1, #0
 8000196:	5499      	strb	r1, [r3, r2]
		uart_flag = 1;
 8000198:	4b16      	ldr	r3, [pc, #88]	@ (80001f4 <HAL_UART_RxCpltCallback+0x78>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
 800019e:	e00a      	b.n	80001b6 <HAL_UART_RxCpltCallback+0x3a>
	}else{
		uart_buff[uart_index++] = data_rx;
 80001a0:	4b12      	ldr	r3, [pc, #72]	@ (80001ec <HAL_UART_RxCpltCallback+0x70>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	1c5a      	adds	r2, r3, #1
 80001a6:	b2d1      	uxtb	r1, r2
 80001a8:	4a10      	ldr	r2, [pc, #64]	@ (80001ec <HAL_UART_RxCpltCallback+0x70>)
 80001aa:	7011      	strb	r1, [r2, #0]
 80001ac:	461a      	mov	r2, r3
 80001ae:	4b0e      	ldr	r3, [pc, #56]	@ (80001e8 <HAL_UART_RxCpltCallback+0x6c>)
 80001b0:	7819      	ldrb	r1, [r3, #0]
 80001b2:	4b0f      	ldr	r3, [pc, #60]	@ (80001f0 <HAL_UART_RxCpltCallback+0x74>)
 80001b4:	5499      	strb	r1, [r3, r2]
	}

	if (uart_flag == 1){
 80001b6:	4b0f      	ldr	r3, [pc, #60]	@ (80001f4 <HAL_UART_RxCpltCallback+0x78>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d10b      	bne.n	80001d6 <HAL_UART_RxCpltCallback+0x5a>
	  uart_flag = 0;
 80001be:	4b0d      	ldr	r3, [pc, #52]	@ (80001f4 <HAL_UART_RxCpltCallback+0x78>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
	  uart_index = 0;
 80001c4:	4b09      	ldr	r3, [pc, #36]	@ (80001ec <HAL_UART_RxCpltCallback+0x70>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
	  osEventFlagsSet(uartEventFlagHandle, TASK0_BIT);
 80001ca:	4b0b      	ldr	r3, [pc, #44]	@ (80001f8 <HAL_UART_RxCpltCallback+0x7c>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2101      	movs	r1, #1
 80001d0:	4618      	mov	r0, r3
 80001d2:	f002 fe59 	bl	8002e88 <osEventFlagsSet>
	}
	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 80001d6:	2201      	movs	r2, #1
 80001d8:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <HAL_UART_RxCpltCallback+0x6c>)
 80001da:	4808      	ldr	r0, [pc, #32]	@ (80001fc <HAL_UART_RxCpltCallback+0x80>)
 80001dc:	f001 ff25 	bl	800202a <HAL_UART_Receive_IT>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	20000154 	.word	0x20000154
 80001f0:	200000f0 	.word	0x200000f0
 80001f4:	20000155 	.word	0x20000155
 80001f8:	200000e8 	.word	0x200000e8
 80001fc:	20000088 	.word	0x20000088

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 fc3e 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f86c 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f8d6 	bl	80003bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000210:	f000 f8aa 	bl	8000368 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8000214:	2201      	movs	r2, #1
 8000216:	491f      	ldr	r1, [pc, #124]	@ (8000294 <main+0x94>)
 8000218:	481f      	ldr	r0, [pc, #124]	@ (8000298 <main+0x98>)
 800021a:	f001 ff06 	bl	800202a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800021e:	f002 fcd7 	bl	8002bd0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUart */
  semUartHandle = osSemaphoreNew(1, 1, &semUart_attributes);
 8000222:	4a1e      	ldr	r2, [pc, #120]	@ (800029c <main+0x9c>)
 8000224:	2101      	movs	r1, #1
 8000226:	2001      	movs	r0, #1
 8000228:	f002 ff06 	bl	8003038 <osSemaphoreNew>
 800022c:	4603      	mov	r3, r0
 800022e:	4a1c      	ldr	r2, [pc, #112]	@ (80002a0 <main+0xa0>)
 8000230:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_LedBoard */
  Task1_LedBoardHandle = osThreadNew(S_Task1_LedBoard, NULL, &Task1_LedBoard_attributes);
 8000232:	4a1c      	ldr	r2, [pc, #112]	@ (80002a4 <main+0xa4>)
 8000234:	2100      	movs	r1, #0
 8000236:	481c      	ldr	r0, [pc, #112]	@ (80002a8 <main+0xa8>)
 8000238:	f002 fd27 	bl	8002c8a <osThreadNew>
 800023c:	4603      	mov	r3, r0
 800023e:	4a1b      	ldr	r2, [pc, #108]	@ (80002ac <main+0xac>)
 8000240:	6013      	str	r3, [r2, #0]

  /* creation of Task2_LedBlue */
  Task2_LedBlueHandle = osThreadNew(S_Task2_LedBlue, NULL, &Task2_LedBlue_attributes);
 8000242:	4a1b      	ldr	r2, [pc, #108]	@ (80002b0 <main+0xb0>)
 8000244:	2100      	movs	r1, #0
 8000246:	481b      	ldr	r0, [pc, #108]	@ (80002b4 <main+0xb4>)
 8000248:	f002 fd1f 	bl	8002c8a <osThreadNew>
 800024c:	4603      	mov	r3, r0
 800024e:	4a1a      	ldr	r2, [pc, #104]	@ (80002b8 <main+0xb8>)
 8000250:	6013      	str	r3, [r2, #0]

  /* creation of Task1_PrintNoti */
  Task1_PrintNotiHandle = osThreadNew(S_Task1_PrintNotify, NULL, &Task1_PrintNoti_attributes);
 8000252:	4a1a      	ldr	r2, [pc, #104]	@ (80002bc <main+0xbc>)
 8000254:	2100      	movs	r1, #0
 8000256:	481a      	ldr	r0, [pc, #104]	@ (80002c0 <main+0xc0>)
 8000258:	f002 fd17 	bl	8002c8a <osThreadNew>
 800025c:	4603      	mov	r3, r0
 800025e:	4a19      	ldr	r2, [pc, #100]	@ (80002c4 <main+0xc4>)
 8000260:	6013      	str	r3, [r2, #0]

  /* creation of Task4_CountUp */
  Task4_CountUpHandle = osThreadNew(S_Task4_CountUp, NULL, &Task4_CountUp_attributes);
 8000262:	4a19      	ldr	r2, [pc, #100]	@ (80002c8 <main+0xc8>)
 8000264:	2100      	movs	r1, #0
 8000266:	4819      	ldr	r0, [pc, #100]	@ (80002cc <main+0xcc>)
 8000268:	f002 fd0f 	bl	8002c8a <osThreadNew>
 800026c:	4603      	mov	r3, r0
 800026e:	4a18      	ldr	r2, [pc, #96]	@ (80002d0 <main+0xd0>)
 8000270:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of notifyEvent */
  notifyEventHandle = osEventFlagsNew(&notifyEvent_attributes);
 8000272:	4818      	ldr	r0, [pc, #96]	@ (80002d4 <main+0xd4>)
 8000274:	f002 fdc8 	bl	8002e08 <osEventFlagsNew>
 8000278:	4603      	mov	r3, r0
 800027a:	4a17      	ldr	r2, [pc, #92]	@ (80002d8 <main+0xd8>)
 800027c:	6013      	str	r3, [r2, #0]

  /* creation of uartEventFlag */
  uartEventFlagHandle = osEventFlagsNew(&uartEventFlag_attributes);
 800027e:	4817      	ldr	r0, [pc, #92]	@ (80002dc <main+0xdc>)
 8000280:	f002 fdc2 	bl	8002e08 <osEventFlagsNew>
 8000284:	4603      	mov	r3, r0
 8000286:	4a16      	ldr	r2, [pc, #88]	@ (80002e0 <main+0xe0>)
 8000288:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800028a:	f002 fcc3 	bl	8002c14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028e:	bf00      	nop
 8000290:	e7fd      	b.n	800028e <main+0x8e>
 8000292:	bf00      	nop
 8000294:	200000ec 	.word	0x200000ec
 8000298:	20000088 	.word	0x20000088
 800029c:	08007ca8 	.word	0x08007ca8
 80002a0:	200000e0 	.word	0x200000e0
 80002a4:	08007c18 	.word	0x08007c18
 80002a8:	08000481 	.word	0x08000481
 80002ac:	200000d0 	.word	0x200000d0
 80002b0:	08007c3c 	.word	0x08007c3c
 80002b4:	0800053d 	.word	0x0800053d
 80002b8:	200000d4 	.word	0x200000d4
 80002bc:	08007c60 	.word	0x08007c60
 80002c0:	080005e9 	.word	0x080005e9
 80002c4:	200000d8 	.word	0x200000d8
 80002c8:	08007c84 	.word	0x08007c84
 80002cc:	08000659 	.word	0x08000659
 80002d0:	200000dc 	.word	0x200000dc
 80002d4:	08007cb8 	.word	0x08007cb8
 80002d8:	200000e4 	.word	0x200000e4
 80002dc:	08007cc8 	.word	0x08007cc8
 80002e0:	200000e8 	.word	0x200000e8

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	@ 0x40
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2228      	movs	r2, #40	@ 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f006 fdea 	bl	8006ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000316:	2300      	movs	r3, #0
 8000318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800031a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800031e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f000 ff27 	bl	8001178 <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000330:	f000 f9c6 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f994 	bl	800167c <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800035a:	f000 f9b1 	bl	80006c0 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	@ 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800036e:	4a12      	ldr	r2, [pc, #72]	@ (80003b8 <MX_USART1_UART_Init+0x50>)
 8000370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000372:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800038e:	220c      	movs	r2, #12
 8000390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f001 fd68 	bl	8001e74 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003aa:	f000 f989 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000088 	.word	0x20000088
 80003b8:	40013800 	.word	0x40013800

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <MX_GPIO_Init+0xb8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a27      	ldr	r2, [pc, #156]	@ (8000474 <MX_GPIO_Init+0xb8>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b25      	ldr	r3, [pc, #148]	@ (8000474 <MX_GPIO_Init+0xb8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e8:	4b22      	ldr	r3, [pc, #136]	@ (8000474 <MX_GPIO_Init+0xb8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a21      	ldr	r2, [pc, #132]	@ (8000474 <MX_GPIO_Init+0xb8>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000474 <MX_GPIO_Init+0xb8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0320 	and.w	r3, r3, #32
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b1c      	ldr	r3, [pc, #112]	@ (8000474 <MX_GPIO_Init+0xb8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a1b      	ldr	r2, [pc, #108]	@ (8000474 <MX_GPIO_Init+0xb8>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b19      	ldr	r3, [pc, #100]	@ (8000474 <MX_GPIO_Init+0xb8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800041e:	4816      	ldr	r0, [pc, #88]	@ (8000478 <MX_GPIO_Init+0xbc>)
 8000420:	f000 fe78 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800042a:	4814      	ldr	r0, [pc, #80]	@ (800047c <MX_GPIO_Init+0xc0>)
 800042c:	f000 fe72 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2302      	movs	r3, #2
 8000440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	480b      	ldr	r0, [pc, #44]	@ (8000478 <MX_GPIO_Init+0xbc>)
 800044a:	f000 fcdf 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800044e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_GPIO_Init+0xc0>)
 8000468:	f000 fcd0 	bl	8000e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	40011000 	.word	0x40011000
 800047c:	40010800 	.word	0x40010800

08000480 <S_Task1_LedBoard>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task1_LedBoard */
void S_Task1_LedBoard(void *argument)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t next_wake_time = osKernelGetTickCount();
 8000488:	f002 fbea 	bl	8002c60 <osKernelGetTickCount>
 800048c:	60f8      	str	r0, [r7, #12]
	uint8_t count = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000492:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <S_Task1_LedBoard+0xa4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f04f 31ff 	mov.w	r1, #4294967295
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fe56 	bl	800314c <osSemaphoreAcquire>
#endif
	printf("Task 1 in: %ld\n", osKernelGetTickCount());
 80004a0:	f002 fbde 	bl	8002c60 <osKernelGetTickCount>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4619      	mov	r1, r3
 80004a8:	481f      	ldr	r0, [pc, #124]	@ (8000528 <S_Task1_LedBoard+0xa8>)
 80004aa:	f006 fbc7 	bl	8006c3c <iprintf>

#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
 80004ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000524 <S_Task1_LedBoard+0xa4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fe9c 	bl	80031f0 <osSemaphoreRelease>
#endif

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004bc:	481b      	ldr	r0, [pc, #108]	@ (800052c <S_Task1_LedBoard+0xac>)
 80004be:	f000 fe41 	bl	8001144 <HAL_GPIO_TogglePin>

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 80004c2:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <S_Task1_LedBoard+0xa4>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f04f 31ff 	mov.w	r1, #4294967295
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 fe3e 	bl	800314c <osSemaphoreAcquire>
#endif
	printf("Task 1 out: %ld\n\n", osKernelGetTickCount());
 80004d0:	f002 fbc6 	bl	8002c60 <osKernelGetTickCount>
 80004d4:	4603      	mov	r3, r0
 80004d6:	4619      	mov	r1, r3
 80004d8:	4815      	ldr	r0, [pc, #84]	@ (8000530 <S_Task1_LedBoard+0xb0>)
 80004da:	f006 fbaf 	bl	8006c3c <iprintf>

#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <S_Task1_LedBoard+0xa4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fe84 	bl	80031f0 <osSemaphoreRelease>
#endif

	count++;
 80004e8:	7afb      	ldrb	r3, [r7, #11]
 80004ea:	3301      	adds	r3, #1
 80004ec:	72fb      	strb	r3, [r7, #11]

	if (count % 5 == 0){
 80004ee:	7afa      	ldrb	r2, [r7, #11]
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <S_Task1_LedBoard+0xb4>)
 80004f2:	fba3 1302 	umull	r1, r3, r3, r2
 80004f6:	0899      	lsrs	r1, r3, #2
 80004f8:	460b      	mov	r3, r1
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	440b      	add	r3, r1
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d105      	bne.n	8000512 <S_Task1_LedBoard+0x92>
		osEventFlagsSet(notifyEventHandle, TASK1_BIT);
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <S_Task1_LedBoard+0xb8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f002 fcbb 	bl	8002e88 <osEventFlagsSet>
	}

	next_wake_time += 1000;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000518:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f002 fc47 	bl	8002dae <osDelayUntil>
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000520:	e7b7      	b.n	8000492 <S_Task1_LedBoard+0x12>
 8000522:	bf00      	nop
 8000524:	200000e0 	.word	0x200000e0
 8000528:	08007b2c 	.word	0x08007b2c
 800052c:	40011000 	.word	0x40011000
 8000530:	08007b3c 	.word	0x08007b3c
 8000534:	cccccccd 	.word	0xcccccccd
 8000538:	200000e4 	.word	0x200000e4

0800053c <S_Task2_LedBlue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task2_LedBlue */
void S_Task2_LedBlue(void *argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task2_LedBlue */
	uint32_t next_wake_time = osKernelGetTickCount();
 8000544:	f002 fb8c 	bl	8002c60 <osKernelGetTickCount>
 8000548:	60f8      	str	r0, [r7, #12]
	uint8_t count = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <S_Task2_LedBlue+0x98>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f04f 31ff 	mov.w	r1, #4294967295
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fdf8 	bl	800314c <osSemaphoreAcquire>
#endif
	printf("Task 2 in: %ld\n", osKernelGetTickCount());
 800055c:	f002 fb80 	bl	8002c60 <osKernelGetTickCount>
 8000560:	4603      	mov	r3, r0
 8000562:	4619      	mov	r1, r3
 8000564:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <S_Task2_LedBlue+0x9c>)
 8000566:	f006 fb69 	bl	8006c3c <iprintf>
#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
 800056a:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <S_Task2_LedBlue+0x98>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fe3e 	bl	80031f0 <osSemaphoreRelease>
#endif

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000578:	4818      	ldr	r0, [pc, #96]	@ (80005dc <S_Task2_LedBlue+0xa0>)
 800057a:	f000 fde3 	bl	8001144 <HAL_GPIO_TogglePin>

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <S_Task2_LedBlue+0x98>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f04f 31ff 	mov.w	r1, #4294967295
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fde0 	bl	800314c <osSemaphoreAcquire>
#endif
	printf("Task 2 out: %ld\n\n", osKernelGetTickCount());
 800058c:	f002 fb68 	bl	8002c60 <osKernelGetTickCount>
 8000590:	4603      	mov	r3, r0
 8000592:	4619      	mov	r1, r3
 8000594:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <S_Task2_LedBlue+0xa4>)
 8000596:	f006 fb51 	bl	8006c3c <iprintf>
#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <S_Task2_LedBlue+0x98>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fe26 	bl	80031f0 <osSemaphoreRelease>
#endif

	count++;
 80005a4:	7afb      	ldrb	r3, [r7, #11]
 80005a6:	3301      	adds	r3, #1
 80005a8:	72fb      	strb	r3, [r7, #11]

	if (count % 4 == 0){
 80005aa:	7afb      	ldrb	r3, [r7, #11]
 80005ac:	f003 0303 	and.w	r3, r3, #3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d105      	bne.n	80005c2 <S_Task2_LedBlue+0x86>
		osEventFlagsSet(notifyEventHandle, TASK2_BIT);
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <S_Task2_LedBlue+0xa8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2102      	movs	r1, #2
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fc63 	bl	8002e88 <osEventFlagsSet>
	}

	next_wake_time += 1500;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80005c8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_wake_time);
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f002 fbef 	bl	8002dae <osDelayUntil>
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 80005d0:	e7bd      	b.n	800054e <S_Task2_LedBlue+0x12>
 80005d2:	bf00      	nop
 80005d4:	200000e0 	.word	0x200000e0
 80005d8:	08007b50 	.word	0x08007b50
 80005dc:	40010800 	.word	0x40010800
 80005e0:	08007b60 	.word	0x08007b60
 80005e4:	200000e4 	.word	0x200000e4

080005e8 <S_Task1_PrintNotify>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task1_PrintNotify */
void S_Task1_PrintNotify(void *argument)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task1_PrintNotify */
  /* Infinite loop */
  for(;;)
  {
	uint32_t flags = osEventFlagsWait(notifyEventHandle, TASK1_BIT | TASK2_BIT, osFlagsWaitAll, osWaitForever);
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <S_Task1_PrintNotify+0x5c>)
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	2103      	movs	r1, #3
 80005fc:	f002 fcb7 	bl	8002f6e <osEventFlagsWait>
 8000600:	60f8      	str	r0, [r7, #12]

#if SEM_UART_USE
	osSemaphoreAcquire(semUartHandle, osWaitForever);
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <S_Task1_PrintNotify+0x60>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f04f 31ff 	mov.w	r1, #4294967295
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fd9e 	bl	800314c <osSemaphoreAcquire>
#endif
	  printf("=================================================\n");
 8000610:	480e      	ldr	r0, [pc, #56]	@ (800064c <S_Task1_PrintNotify+0x64>)
 8000612:	f006 fb7b 	bl	8006d0c <puts>
	  printf("Task 1 da nhay 5 lan va Task 2 da nhay 4 lan.\nSo lan Event: %d", countUp);
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <S_Task1_PrintNotify+0x68>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <S_Task1_PrintNotify+0x6c>)
 800061e:	f006 fb0d 	bl	8006c3c <iprintf>
	  printf("=================================================\n");
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <S_Task1_PrintNotify+0x64>)
 8000624:	f006 fb72 	bl	8006d0c <puts>
#if SEM_UART_USE
	osSemaphoreRelease(semUartHandle);
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <S_Task1_PrintNotify+0x60>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fddf 	bl	80031f0 <osSemaphoreRelease>
#endif

	  osEventFlagsClear(notifyEventHandle, TASK1_BIT | TASK2_BIT);
 8000632:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <S_Task1_PrintNotify+0x5c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2103      	movs	r1, #3
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fc67 	bl	8002f0c <osEventFlagsClear>
  {
 800063e:	bf00      	nop
 8000640:	e7d6      	b.n	80005f0 <S_Task1_PrintNotify+0x8>
 8000642:	bf00      	nop
 8000644:	200000e4 	.word	0x200000e4
 8000648:	200000e0 	.word	0x200000e0
 800064c:	08007b74 	.word	0x08007b74
 8000650:	20000156 	.word	0x20000156
 8000654:	08007ba8 	.word	0x08007ba8

08000658 <S_Task4_CountUp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task4_CountUp */
void S_Task4_CountUp(void *argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

	countUp++;

	  osEventFlagsClear(notifyEventHandle, TASK1_BIT | TASK2_BIT);
#else
	uint32_t flags = osEventFlagsWait(uartEventFlagHandle, TASK0_BIT, osFlagsWaitAll, osWaitForever);
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <S_Task4_CountUp+0x34>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	2201      	movs	r2, #1
 800066a:	2101      	movs	r1, #1
 800066c:	f002 fc7f 	bl	8002f6e <osEventFlagsWait>
 8000670:	60f8      	str	r0, [r7, #12]

	printf("Command receive: %s\n", uart_buff);
 8000672:	4907      	ldr	r1, [pc, #28]	@ (8000690 <S_Task4_CountUp+0x38>)
 8000674:	4807      	ldr	r0, [pc, #28]	@ (8000694 <S_Task4_CountUp+0x3c>)
 8000676:	f006 fae1 	bl	8006c3c <iprintf>

	  osEventFlagsClear(notifyEventHandle, TASK0_BIT);
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <S_Task4_CountUp+0x40>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fc43 	bl	8002f0c <osEventFlagsClear>
  {
 8000686:	bf00      	nop
 8000688:	e7ea      	b.n	8000660 <S_Task4_CountUp+0x8>
 800068a:	bf00      	nop
 800068c:	200000e8 	.word	0x200000e8
 8000690:	200000f0 	.word	0x200000f0
 8000694:	08007be8 	.word	0x08007be8
 8000698:	200000e4 	.word	0x200000e4

0800069c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ae:	f000 f9ff 	bl	8000ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40012c00 	.word	0x40012c00

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <Error_Handler+0x8>

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_MspInit+0x68>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <HAL_MspInit+0x68>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_MspInit+0x68>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_MspInit+0x68>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <HAL_MspInit+0x68>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <HAL_MspInit+0x68>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	210f      	movs	r1, #15
 8000706:	f06f 0001 	mvn.w	r0, #1
 800070a:	f000 faa2 	bl	8000c52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_MspInit+0x6c>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	4a04      	ldr	r2, [pc, #16]	@ (8000738 <HAL_MspInit+0x6c>)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	40010000 	.word	0x40010000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <HAL_UART_MspInit+0x9c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d139      	bne.n	80007d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <HAL_UART_MspInit+0xa0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a1e      	ldr	r2, [pc, #120]	@ (80007dc <HAL_UART_MspInit+0xa0>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <HAL_UART_MspInit+0xa0>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <HAL_UART_MspInit+0xa0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <HAL_UART_MspInit+0xa0>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_UART_MspInit+0xa0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800078c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	480f      	ldr	r0, [pc, #60]	@ (80007e0 <HAL_UART_MspInit+0xa4>)
 80007a2:	f000 fb33 	bl	8000e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <HAL_UART_MspInit+0xa4>)
 80007bc:	f000 fb26 	bl	8000e0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2105      	movs	r1, #5
 80007c4:	2025      	movs	r0, #37	@ 0x25
 80007c6:	f000 fa44 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ca:	2025      	movs	r0, #37	@ 0x25
 80007cc:	f000 fa5d 	bl	8000c8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800

080007e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007fa:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <HAL_InitTick+0xd0>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a2d      	ldr	r2, [pc, #180]	@ (80008b4 <HAL_InitTick+0xd0>)
 8000800:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <HAL_InitTick+0xd0>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f89d 	bl	800195c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000822:	f001 f887 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8000826:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800082a:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <HAL_InitTick+0xd4>)
 800082c:	fba2 2303 	umull	r2, r3, r2, r3
 8000830:	0c9b      	lsrs	r3, r3, #18
 8000832:	3b01      	subs	r3, #1
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <HAL_InitTick+0xd8>)
 8000838:	4a21      	ldr	r2, [pc, #132]	@ (80008c0 <HAL_InitTick+0xdc>)
 800083a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <HAL_InitTick+0xd8>)
 800083e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000842:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000844:	4a1d      	ldr	r2, [pc, #116]	@ (80008bc <HAL_InitTick+0xd8>)
 8000846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000848:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <HAL_InitTick+0xd8>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_InitTick+0xd8>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <HAL_InitTick+0xd8>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800085c:	4817      	ldr	r0, [pc, #92]	@ (80008bc <HAL_InitTick+0xd8>)
 800085e:	f001 f8cb 	bl	80019f8 <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000868:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800086c:	2b00      	cmp	r3, #0
 800086e:	d11b      	bne.n	80008a8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000870:	4812      	ldr	r0, [pc, #72]	@ (80008bc <HAL_InitTick+0xd8>)
 8000872:	f001 f919 	bl	8001aa8 <HAL_TIM_Base_Start_IT>
 8000876:	4603      	mov	r3, r0
 8000878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800087c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000880:	2b00      	cmp	r3, #0
 8000882:	d111      	bne.n	80008a8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000884:	2019      	movs	r0, #25
 8000886:	f000 fa00 	bl	8000c8a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d808      	bhi.n	80008a2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	2019      	movs	r0, #25
 8000896:	f000 f9dc 	bl	8000c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_InitTick+0xe0>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e002      	b.n	80008a8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3730      	adds	r7, #48	@ 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	431bde83 	.word	0x431bde83
 80008bc:	20000158 	.word	0x20000158
 80008c0:	40012c00 	.word	0x40012c00
 80008c4:	20000004 	.word	0x20000004

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <TIM1_UP_IRQHandler+0x10>)
 8000902:	f001 f923 	bl	8001b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000158 	.word	0x20000158

08000910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <USART1_IRQHandler+0x10>)
 8000916:	f001 fbad 	bl	8002074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000088 	.word	0x20000088

08000924 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e00a      	b.n	800094c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000936:	f3af 8000 	nop.w
 800093a:	4601      	mov	r1, r0
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf0      	blt.n	8000936 <_read+0x12>
  }

  return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_close>:
  }
  return len;
}

int _close(int file)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000984:	605a      	str	r2, [r3, #4]
  return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <_isatty>:

int _isatty(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
	...

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f006 fb10 	bl	8007014 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20005000 	.word	0x20005000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	200001a0 	.word	0x200001a0
 8000a28:	20001ce0 	.word	0x20001ce0

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff fff8 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a3e:	490c      	ldr	r1, [pc, #48]	@ (8000a70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a54:	4c09      	ldr	r4, [pc, #36]	@ (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f006 fadd 	bl	8007020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fbcb 	bl	8000200 <main>
  bx lr
 8000a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a74:	08007d40 	.word	0x08007d40
  ldr r2, =_sbss
 8000a78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a7c:	20001cdc 	.word	0x20001cdc

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8d1 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff fea2 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fe14 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200001a4 	.word	0x200001a4

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	200001a4 	.word	0x200001a4

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4906      	ldr	r1, [pc, #24]	@ (8000b80 <__NVIC_EnableIRQ+0x34>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	@ (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	@ (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	@ 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff4f 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff64 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ffb2 	bl	8000bd8 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff81 	bl	8000b84 <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff57 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d008      	beq.n	8000cd0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e020      	b.n	8000d12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 020e 	bic.w	r2, r2, #14
 8000cde:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d005      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2204      	movs	r2, #4
 8000d38:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e051      	b.n	8000de4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 020e 	bic.w	r2, r2, #14
 8000d4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 0201 	bic.w	r2, r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a22      	ldr	r2, [pc, #136]	@ (8000df0 <HAL_DMA_Abort_IT+0xd4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d029      	beq.n	8000dbe <HAL_DMA_Abort_IT+0xa2>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <HAL_DMA_Abort_IT+0xd8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d022      	beq.n	8000dba <HAL_DMA_Abort_IT+0x9e>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1f      	ldr	r2, [pc, #124]	@ (8000df8 <HAL_DMA_Abort_IT+0xdc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d01a      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x98>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1e      	ldr	r2, [pc, #120]	@ (8000dfc <HAL_DMA_Abort_IT+0xe0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d012      	beq.n	8000dae <HAL_DMA_Abort_IT+0x92>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <HAL_DMA_Abort_IT+0xe4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00a      	beq.n	8000da8 <HAL_DMA_Abort_IT+0x8c>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1b      	ldr	r2, [pc, #108]	@ (8000e04 <HAL_DMA_Abort_IT+0xe8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d102      	bne.n	8000da2 <HAL_DMA_Abort_IT+0x86>
 8000d9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000da0:	e00e      	b.n	8000dc0 <HAL_DMA_Abort_IT+0xa4>
 8000da2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000da6:	e00b      	b.n	8000dc0 <HAL_DMA_Abort_IT+0xa4>
 8000da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dac:	e008      	b.n	8000dc0 <HAL_DMA_Abort_IT+0xa4>
 8000dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db2:	e005      	b.n	8000dc0 <HAL_DMA_Abort_IT+0xa4>
 8000db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000db8:	e002      	b.n	8000dc0 <HAL_DMA_Abort_IT+0xa4>
 8000dba:	2310      	movs	r3, #16
 8000dbc:	e000      	b.n	8000dc0 <HAL_DMA_Abort_IT+0xa4>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	4a11      	ldr	r2, [pc, #68]	@ (8000e08 <HAL_DMA_Abort_IT+0xec>)
 8000dc2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	4798      	blx	r3
    } 
  }
  return status;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40020008 	.word	0x40020008
 8000df4:	4002001c 	.word	0x4002001c
 8000df8:	40020030 	.word	0x40020030
 8000dfc:	40020044 	.word	0x40020044
 8000e00:	40020058 	.word	0x40020058
 8000e04:	4002006c 	.word	0x4002006c
 8000e08:	40020000 	.word	0x40020000

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b08b      	sub	sp, #44	@ 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e169      	b.n	80010f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e20:	2201      	movs	r2, #1
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8158 	bne.w	80010ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a9a      	ldr	r2, [pc, #616]	@ (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d05e      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e48:	4a98      	ldr	r2, [pc, #608]	@ (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d875      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e4e:	4a98      	ldr	r2, [pc, #608]	@ (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d058      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e54:	4a96      	ldr	r2, [pc, #600]	@ (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d86f      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e5a:	4a96      	ldr	r2, [pc, #600]	@ (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d052      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e60:	4a94      	ldr	r2, [pc, #592]	@ (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d869      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e66:	4a94      	ldr	r2, [pc, #592]	@ (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d04c      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e6c:	4a92      	ldr	r2, [pc, #584]	@ (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d863      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e72:	4a92      	ldr	r2, [pc, #584]	@ (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d046      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e78:	4a90      	ldr	r2, [pc, #576]	@ (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d85d      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d82a      	bhi.n	8000ed8 <HAL_GPIO_Init+0xcc>
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d859      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e86:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <HAL_GPIO_Init+0x80>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ef3 	.word	0x08000ef3
 8000e98:	08000f35 	.word	0x08000f35
 8000e9c:	08000f3b 	.word	0x08000f3b
 8000ea0:	08000f3b 	.word	0x08000f3b
 8000ea4:	08000f3b 	.word	0x08000f3b
 8000ea8:	08000f3b 	.word	0x08000f3b
 8000eac:	08000f3b 	.word	0x08000f3b
 8000eb0:	08000f3b 	.word	0x08000f3b
 8000eb4:	08000f3b 	.word	0x08000f3b
 8000eb8:	08000f3b 	.word	0x08000f3b
 8000ebc:	08000f3b 	.word	0x08000f3b
 8000ec0:	08000f3b 	.word	0x08000f3b
 8000ec4:	08000f3b 	.word	0x08000f3b
 8000ec8:	08000f3b 	.word	0x08000f3b
 8000ecc:	08000f3b 	.word	0x08000f3b
 8000ed0:	08000ee9 	.word	0x08000ee9
 8000ed4:	08000efd 	.word	0x08000efd
 8000ed8:	4a79      	ldr	r2, [pc, #484]	@ (80010c0 <HAL_GPIO_Init+0x2b4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ede:	e02c      	b.n	8000f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e029      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	3304      	adds	r3, #4
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e024      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e01f      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	330c      	adds	r3, #12
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e01a      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e013      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d105      	bne.n	8000f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	611a      	str	r2, [r3, #16]
          break;
 8000f26:	e009      	b.n	8000f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	615a      	str	r2, [r3, #20]
          break;
 8000f32:	e003      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          break;
 8000f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2bff      	cmp	r3, #255	@ 0xff
 8000f40:	d801      	bhi.n	8000f46 <HAL_GPIO_Init+0x13a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_Init+0x13e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2bff      	cmp	r3, #255	@ 0xff
 8000f50:	d802      	bhi.n	8000f58 <HAL_GPIO_Init+0x14c>
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x152>
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	3b08      	subs	r3, #8
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	210f      	movs	r1, #15
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	6a39      	ldr	r1, [r7, #32]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80b1 	beq.w	80010ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a4c      	ldr	r2, [pc, #304]	@ (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b4a      	ldr	r3, [pc, #296]	@ (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa4:	4a48      	ldr	r2, [pc, #288]	@ (80010c8 <HAL_GPIO_Init+0x2bc>)
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a40      	ldr	r2, [pc, #256]	@ (80010cc <HAL_GPIO_Init+0x2c0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d013      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80010d0 <HAL_GPIO_Init+0x2c4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3e      	ldr	r2, [pc, #248]	@ (80010d4 <HAL_GPIO_Init+0x2c8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80010d8 <HAL_GPIO_Init+0x2cc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1e0>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100a:	492f      	ldr	r1, [pc, #188]	@ (80010c8 <HAL_GPIO_Init+0x2bc>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	492c      	ldr	r1, [pc, #176]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4928      	ldr	r1, [pc, #160]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	4922      	ldr	r1, [pc, #136]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	491e      	ldr	r1, [pc, #120]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4918      	ldr	r1, [pc, #96]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4914      	ldr	r1, [pc, #80]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d021      	beq.n	80010e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	490e      	ldr	r1, [pc, #56]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	e021      	b.n	80010ee <HAL_GPIO_Init+0x2e2>
 80010aa:	bf00      	nop
 80010ac:	10320000 	.word	0x10320000
 80010b0:	10310000 	.word	0x10310000
 80010b4:	10220000 	.word	0x10220000
 80010b8:	10210000 	.word	0x10210000
 80010bc:	10120000 	.word	0x10120000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40011400 	.word	0x40011400
 80010dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4909      	ldr	r1, [pc, #36]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae8e 	bne.w	8000e20 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	372c      	adds	r7, #44	@ 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	611a      	str	r2, [r3, #16]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43d9      	mvns	r1, r3
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	400b      	ands	r3, r1
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	611a      	str	r2, [r3, #16]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e272      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8087 	beq.w	80012a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001198:	4b92      	ldr	r3, [pc, #584]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d00c      	beq.n	80011be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a4:	4b8f      	ldr	r3, [pc, #572]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d112      	bne.n	80011d6 <HAL_RCC_OscConfig+0x5e>
 80011b0:	4b8c      	ldr	r3, [pc, #560]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011bc:	d10b      	bne.n	80011d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011be:	4b89      	ldr	r3, [pc, #548]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d06c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x12c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d168      	bne.n	80012a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e24c      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011de:	d106      	bne.n	80011ee <HAL_RCC_OscConfig+0x76>
 80011e0:	4b80      	ldr	r3, [pc, #512]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a7f      	ldr	r2, [pc, #508]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e02e      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x98>
 80011f6:	4b7b      	ldr	r3, [pc, #492]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a7a      	ldr	r2, [pc, #488]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b78      	ldr	r3, [pc, #480]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a77      	ldr	r2, [pc, #476]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e01d      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0xbc>
 800121a:	4b72      	ldr	r3, [pc, #456]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a71      	ldr	r2, [pc, #452]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b6f      	ldr	r3, [pc, #444]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6e      	ldr	r2, [pc, #440]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 8001234:	4b6b      	ldr	r3, [pc, #428]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a6a      	ldr	r2, [pc, #424]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800123a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b68      	ldr	r3, [pc, #416]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a67      	ldr	r2, [pc, #412]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d013      	beq.n	800127c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fc3e 	bl	8000ad4 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fc3a 	bl	8000ad4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	@ 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e200      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b5d      	ldr	r3, [pc, #372]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0xe4>
 800127a:	e014      	b.n	80012a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fc2a 	bl	8000ad4 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fc26 	bl	8000ad4 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	@ 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1ec      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	4b53      	ldr	r3, [pc, #332]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x10c>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d063      	beq.n	800137a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b2:	4b4c      	ldr	r3, [pc, #304]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012be:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d11c      	bne.n	8001304 <HAL_RCC_OscConfig+0x18c>
 80012ca:	4b46      	ldr	r3, [pc, #280]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d116      	bne.n	8001304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	4b43      	ldr	r3, [pc, #268]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x176>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e1c0      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b3d      	ldr	r3, [pc, #244]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4939      	ldr	r1, [pc, #228]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	e03a      	b.n	800137a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fbdf 	bl	8000ad4 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fbdb 	bl	8000ad4 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e1a1      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4927      	ldr	r1, [pc, #156]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fbbe 	bl	8000ad4 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fbba 	bl	8000ad4 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e180      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d03a      	beq.n	80013fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d019      	beq.n	80013c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <HAL_RCC_OscConfig+0x274>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff fb9e 	bl	8000ad4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fb9a 	bl	8000ad4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e160      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f000 fafe 	bl	80019bc <RCC_Delay>
 80013c0:	e01c      	b.n	80013fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_RCC_OscConfig+0x274>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fb84 	bl	8000ad4 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ce:	e00f      	b.n	80013f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fb80 	bl	8000ad4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d908      	bls.n	80013f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e146      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	42420000 	.word	0x42420000
 80013ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	4b92      	ldr	r3, [pc, #584]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e9      	bne.n	80013d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a6 	beq.w	8001556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140e:	4b8b      	ldr	r3, [pc, #556]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b88      	ldr	r3, [pc, #544]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a87      	ldr	r2, [pc, #540]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b85      	ldr	r3, [pc, #532]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b82      	ldr	r3, [pc, #520]	@ (8001640 <HAL_RCC_OscConfig+0x4c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001442:	4b7f      	ldr	r3, [pc, #508]	@ (8001640 <HAL_RCC_OscConfig+0x4c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7e      	ldr	r2, [pc, #504]	@ (8001640 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb41 	bl	8000ad4 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff fb3d 	bl	8000ad4 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	@ 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e103      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	4b75      	ldr	r3, [pc, #468]	@ (8001640 <HAL_RCC_OscConfig+0x4c8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x312>
 800147c:	4b6f      	ldr	r3, [pc, #444]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a6e      	ldr	r2, [pc, #440]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	e02d      	b.n	80014e6 <HAL_RCC_OscConfig+0x36e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x334>
 8001492:	4b6a      	ldr	r3, [pc, #424]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a69      	ldr	r2, [pc, #420]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	4b67      	ldr	r3, [pc, #412]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4a66      	ldr	r2, [pc, #408]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	6213      	str	r3, [r2, #32]
 80014aa:	e01c      	b.n	80014e6 <HAL_RCC_OscConfig+0x36e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x356>
 80014b4:	4b61      	ldr	r3, [pc, #388]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a60      	ldr	r2, [pc, #384]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	4b5e      	ldr	r3, [pc, #376]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a5d      	ldr	r2, [pc, #372]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e00b      	b.n	80014e6 <HAL_RCC_OscConfig+0x36e>
 80014ce:	4b5b      	ldr	r3, [pc, #364]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a5a      	ldr	r2, [pc, #360]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	4b58      	ldr	r3, [pc, #352]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a57      	ldr	r2, [pc, #348]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d015      	beq.n	800151a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff faf1 	bl	8000ad4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff faed 	bl	8000ad4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e0b1      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ee      	beq.n	80014f6 <HAL_RCC_OscConfig+0x37e>
 8001518:	e014      	b.n	8001544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fadb 	bl	8000ad4 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fad7 	bl	8000ad4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e09b      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	4b40      	ldr	r3, [pc, #256]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ee      	bne.n	8001522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d105      	bne.n	8001556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154a:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a3b      	ldr	r2, [pc, #236]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001560:	4b36      	ldr	r3, [pc, #216]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d061      	beq.n	8001630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d146      	bne.n	8001602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <HAL_RCC_OscConfig+0x4cc>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff faab 	bl	8000ad4 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff faa7 	bl	8000ad4 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e06d      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001594:	4b29      	ldr	r3, [pc, #164]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a8:	d108      	bne.n	80015bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4921      	ldr	r1, [pc, #132]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015bc:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a19      	ldr	r1, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	430b      	orrs	r3, r1
 80015ce:	491b      	ldr	r1, [pc, #108]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fa7b 	bl	8000ad4 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff fa77 	bl	8000ad4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x46a>
 8001600:	e035      	b.n	800166e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_RCC_OscConfig+0x4cc>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fa64 	bl	8000ad4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fa60 	bl	8000ad4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e026      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x498>
 800162e:	e01e      	b.n	800166e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e019      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
 800163c:	40021000 	.word	0x40021000
 8001640:	40007000 	.word	0x40007000
 8001644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_RCC_OscConfig+0x500>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	429a      	cmp	r2, r3
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0d0      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b6a      	ldr	r3, [pc, #424]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d910      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b67      	ldr	r3, [pc, #412]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 0207 	bic.w	r2, r3, #7
 80016a6:	4965      	ldr	r1, [pc, #404]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b63      	ldr	r3, [pc, #396]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a58      	ldr	r2, [pc, #352]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f0:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4a52      	ldr	r2, [pc, #328]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	494d      	ldr	r1, [pc, #308]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d040      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b47      	ldr	r3, [pc, #284]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d115      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e073      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e06b      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4936      	ldr	r1, [pc, #216]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff f9b2 	bl	8000ad4 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff f9ae 	bl	8000ad4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e053      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d210      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b24      	ldr	r3, [pc, #144]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0207 	bic.w	r2, r3, #7
 80017b2:	4922      	ldr	r1, [pc, #136]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e032      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4916      	ldr	r1, [pc, #88]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	490e      	ldr	r1, [pc, #56]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180a:	f000 f821 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 800180e:	4602      	mov	r2, r0
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	490a      	ldr	r1, [pc, #40]	@ (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	5ccb      	ldrb	r3, [r1, r3]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1cc>)
 8001824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_ClockConfig+0x1d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe ffda 	bl	80007e4 <HAL_InitTick>

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40022000 	.word	0x40022000
 8001840:	40021000 	.word	0x40021000
 8001844:	08007cd8 	.word	0x08007cd8
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x30>
 800187a:	2b08      	cmp	r3, #8
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x36>
 800187e:	e027      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001882:	613b      	str	r3, [r7, #16]
      break;
 8001884:	e027      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	0c9b      	lsrs	r3, r3, #18
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	0c5b      	lsrs	r3, r3, #17
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018b2:	fb03 f202 	mul.w	r2, r3, r2
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e004      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	613b      	str	r3, [r7, #16]
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018d2:	613b      	str	r3, [r7, #16]
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	693b      	ldr	r3, [r7, #16]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	007a1200 	.word	0x007a1200
 80018ec:	08007cf0 	.word	0x08007cf0
 80018f0:	08007d00 	.word	0x08007d00
 80018f4:	003d0900 	.word	0x003d0900

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b02      	ldr	r3, [pc, #8]	@ (8001908 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001910:	f7ff fff2 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4903      	ldr	r1, [pc, #12]	@ (8001930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	08007ce8 	.word	0x08007ce8

08001934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001938:	f7ff ffde 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	0adb      	lsrs	r3, r3, #11
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	@ (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	08007ce8 	.word	0x08007ce8

0800195c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	220f      	movs	r2, #15
 800196a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_RCC_GetClockConfig+0x58>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_RCC_GetClockConfig+0x58>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_RCC_GetClockConfig+0x58>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_RCC_GetClockConfig+0x58>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0207 	and.w	r2, r3, #7
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40022000 	.word	0x40022000

080019bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <RCC_Delay+0x34>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <RCC_Delay+0x38>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0a5b      	lsrs	r3, r3, #9
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d8:	bf00      	nop
  }
  while (Delay --);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1e5a      	subs	r2, r3, #1
 80019de:	60fa      	str	r2, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f9      	bne.n	80019d8 <RCC_Delay+0x1c>
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000000 	.word	0x20000000
 80019f4:	10624dd3 	.word	0x10624dd3

080019f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e041      	b.n	8001a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f839 	bl	8001a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3304      	adds	r3, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f000 f99c 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d001      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e03a      	b.n	8001b36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a18      	ldr	r2, [pc, #96]	@ (8001b40 <HAL_TIM_Base_Start_IT+0x98>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x58>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aea:	d009      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x58>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <HAL_TIM_Base_Start_IT+0x9c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x58>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a13      	ldr	r2, [pc, #76]	@ (8001b48 <HAL_TIM_Base_Start_IT+0xa0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d111      	bne.n	8001b24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d010      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b22:	e007      	b.n	8001b34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40012c00 	.word	0x40012c00
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40000800 	.word	0x40000800

08001b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d020      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01b      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0202 	mvn.w	r2, #2
 8001b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f8d1 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8c4 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8d3 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d020      	beq.n	8001bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0204 	mvn.w	r2, #4
 8001bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8ab 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f89e 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8ad 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d020      	beq.n	8001c48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0208 	mvn.w	r2, #8
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f885 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f878 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f887 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d020      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0210 	mvn.w	r2, #16
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f85f 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f852 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f861 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00c      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0201 	mvn.w	r2, #1
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fcf2 	bl	800069c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8c3 	bl	8001e62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00c      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f831 	bl	8001d62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0220 	mvn.w	r2, #32
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f896 	bl	8001e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a2f      	ldr	r2, [pc, #188]	@ (8001e44 <TIM_Base_SetConfig+0xd0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00b      	beq.n	8001da4 <TIM_Base_SetConfig+0x30>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d92:	d007      	beq.n	8001da4 <TIM_Base_SetConfig+0x30>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a2c      	ldr	r2, [pc, #176]	@ (8001e48 <TIM_Base_SetConfig+0xd4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d003      	beq.n	8001da4 <TIM_Base_SetConfig+0x30>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e4c <TIM_Base_SetConfig+0xd8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a22      	ldr	r2, [pc, #136]	@ (8001e44 <TIM_Base_SetConfig+0xd0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00b      	beq.n	8001dd6 <TIM_Base_SetConfig+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc4:	d007      	beq.n	8001dd6 <TIM_Base_SetConfig+0x62>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <TIM_Base_SetConfig+0xd4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d003      	beq.n	8001dd6 <TIM_Base_SetConfig+0x62>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <TIM_Base_SetConfig+0xd8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d108      	bne.n	8001de8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <TIM_Base_SetConfig+0xd0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d103      	bne.n	8001e1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f023 0201 	bic.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800

08001e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e042      	b.n	8001f0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fc4e 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2224      	movs	r2, #36	@ 0x24
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fdb7 	bl	8002a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d175      	bne.n	8002020 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_UART_Transmit+0x2c>
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e06e      	b.n	8002022 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2221      	movs	r2, #33	@ 0x21
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f52:	f7fe fdbf 	bl	8000ad4 <HAL_GetTick>
 8001f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f6c:	d108      	bne.n	8001f80 <HAL_UART_Transmit+0x6c>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d104      	bne.n	8001f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	e003      	b.n	8001f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f88:	e02e      	b.n	8001fe8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2200      	movs	r2, #0
 8001f92:	2180      	movs	r1, #128	@ 0x80
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fb1c 	bl	80025d2 <UART_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e03a      	b.n	8002022 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10b      	bne.n	8001fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e007      	b.n	8001fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1cb      	bne.n	8001f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2140      	movs	r1, #64	@ 0x40
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fae8 	bl	80025d2 <UART_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e006      	b.n	8002022 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	4613      	mov	r3, r2
 8002036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b20      	cmp	r3, #32
 8002042:	d112      	bne.n	800206a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_UART_Receive_IT+0x26>
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e00b      	b.n	800206c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	461a      	mov	r2, r3
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fb0f 	bl	8002684 <UART_Start_Receive_IT>
 8002066:	4603      	mov	r3, r0
 8002068:	e000      	b.n	800206c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
  }
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b0ba      	sub	sp, #232	@ 0xe8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_UART_IRQHandler+0x66>
 80020c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fbec 	bl	80028b0 <UART_Receive_IT>
      return;
 80020d8:	e25b      	b.n	8002592 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80de 	beq.w	80022a0 <HAL_UART_IRQHandler+0x22c>
 80020e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80d1 	beq.w	80022a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_UART_IRQHandler+0xae>
 800210a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800210e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_UART_IRQHandler+0xd2>
 800212e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_UART_IRQHandler+0xf6>
 8002152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800216a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d011      	beq.n	800219a <HAL_UART_IRQHandler+0x126>
 8002176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f043 0208 	orr.w	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 81f2 	beq.w	8002588 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_UART_IRQHandler+0x14e>
 80021b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fb77 	bl	80028b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_UART_IRQHandler+0x17a>
 80021e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d04f      	beq.n	800228e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa81 	bl	80026f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d041      	beq.n	8002286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3314      	adds	r3, #20
 8002208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002210:	e853 3f00 	ldrex	r3, [r3]
 8002214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800221c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3314      	adds	r3, #20
 800222a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800222e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800223a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1d9      	bne.n	8002202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d013      	beq.n	800227e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	4a7e      	ldr	r2, [pc, #504]	@ (8002454 <HAL_UART_IRQHandler+0x3e0>)
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fd5a 	bl	8000d1c <HAL_DMA_Abort_IT>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002278:	4610      	mov	r0, r2
 800227a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227c:	e00e      	b.n	800229c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f993 	bl	80025aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002284:	e00a      	b.n	800229c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f98f 	bl	80025aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800228c:	e006      	b.n	800229c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f98b 	bl	80025aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800229a:	e175      	b.n	8002588 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	bf00      	nop
    return;
 800229e:	e173      	b.n	8002588 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	f040 814f 	bne.w	8002548 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8148 	beq.w	8002548 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8141 	beq.w	8002548 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80b6 	beq.w	8002458 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8145 	beq.w	800258c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800230a:	429a      	cmp	r2, r3
 800230c:	f080 813e 	bcs.w	800258c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002316:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b20      	cmp	r3, #32
 8002320:	f000 8088 	beq.w	8002434 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	330c      	adds	r3, #12
 800232a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800233a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800233e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002342:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002350:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002358:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800235c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002360:	e841 2300 	strex	r3, r2, [r1]
 8002364:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1d9      	bne.n	8002324 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002394:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002398:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800239c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023a0:	e841 2300 	strex	r3, r2, [r1]
 80023a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80023a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e1      	bne.n	8002370 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3314      	adds	r3, #20
 80023cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023d8:	e841 2300 	strex	r3, r2, [r1]
 80023dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e3      	bne.n	80023ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002404:	f023 0310 	bic.w	r3, r3, #16
 8002408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002416:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002418:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800241c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e3      	bne.n	80023f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fc39 	bl	8000ca6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002442:	b29b      	uxth	r3, r3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	b29b      	uxth	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8b6 	bl	80025bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002450:	e09c      	b.n	800258c <HAL_UART_IRQHandler+0x518>
 8002452:	bf00      	nop
 8002454:	080027bb 	.word	0x080027bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002460:	b29b      	uxth	r3, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 808e 	beq.w	8002590 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8089 	beq.w	8002590 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002488:	e853 3f00 	ldrex	r3, [r3]
 800248c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800248e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80024a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80024a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024aa:	e841 2300 	strex	r3, r2, [r1]
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e3      	bne.n	800247e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3314      	adds	r3, #20
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	623b      	str	r3, [r7, #32]
   return(result);
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3314      	adds	r3, #20
 80024d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024da:	633a      	str	r2, [r7, #48]	@ 0x30
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e3      	bne.n	80024b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	60fb      	str	r3, [r7, #12]
   return(result);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0310 	bic.w	r3, r3, #16
 8002512:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002520:	61fa      	str	r2, [r7, #28]
 8002522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	69b9      	ldr	r1, [r7, #24]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	e841 2300 	strex	r3, r2, [r1]
 800252c:	617b      	str	r3, [r7, #20]
   return(result);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e3      	bne.n	80024fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800253a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f83b 	bl	80025bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002546:	e023      	b.n	8002590 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_UART_IRQHandler+0x4f4>
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f93e 	bl	80027e2 <UART_Transmit_IT>
    return;
 8002566:	e014      	b.n	8002592 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <HAL_UART_IRQHandler+0x51e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f97d 	bl	8002880 <UART_EndTransmit_IT>
    return;
 8002586:	e004      	b.n	8002592 <HAL_UART_IRQHandler+0x51e>
    return;
 8002588:	bf00      	nop
 800258a:	e002      	b.n	8002592 <HAL_UART_IRQHandler+0x51e>
      return;
 800258c:	bf00      	nop
 800258e:	e000      	b.n	8002592 <HAL_UART_IRQHandler+0x51e>
      return;
 8002590:	bf00      	nop
  }
}
 8002592:	37e8      	adds	r7, #232	@ 0xe8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e2:	e03b      	b.n	800265c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d037      	beq.n	800265c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ec:	f7fe fa72 	bl	8000ad4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d302      	bcc.n	8002602 <UART_WaitOnFlagUntilTimeout+0x30>
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e03a      	b.n	800267c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b80      	cmp	r3, #128	@ 0x80
 8002618:	d020      	beq.n	800265c <UART_WaitOnFlagUntilTimeout+0x8a>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b40      	cmp	r3, #64	@ 0x40
 800261e:	d01d      	beq.n	800265c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b08      	cmp	r3, #8
 800262c:	d116      	bne.n	800265c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f856 	bl	80026f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2208      	movs	r2, #8
 800264e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e00f      	b.n	800267c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	429a      	cmp	r2, r3
 8002678:	d0b4      	beq.n	80025e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2222      	movs	r2, #34	@ 0x22
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0220 	orr.w	r2, r2, #32
 80026e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b095      	sub	sp, #84	@ 0x54
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800271e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800272c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e5      	bne.n	80026fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3314      	adds	r3, #20
 8002738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	61fb      	str	r3, [r7, #28]
   return(result);
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3314      	adds	r3, #20
 8002750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e5      	bne.n	8002732 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	2b01      	cmp	r3, #1
 800276c:	d119      	bne.n	80027a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	60bb      	str	r3, [r7, #8]
   return(result);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f023 0310 	bic.w	r3, r3, #16
 8002784:	647b      	str	r3, [r7, #68]	@ 0x44
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800278e:	61ba      	str	r2, [r7, #24]
 8002790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6979      	ldr	r1, [r7, #20]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	613b      	str	r3, [r7, #16]
   return(result);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027b0:	bf00      	nop
 80027b2:	3754      	adds	r7, #84	@ 0x54
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fee8 	bl	80025aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b21      	cmp	r3, #33	@ 0x21
 80027f4:	d13e      	bne.n	8002874 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fe:	d114      	bne.n	800282a <UART_Transmit_IT+0x48>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d110      	bne.n	800282a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	1c9a      	adds	r2, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	621a      	str	r2, [r3, #32]
 8002828:	e008      	b.n	800283c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6211      	str	r1, [r2, #32]
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29b      	uxth	r3, r3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4619      	mov	r1, r3
 800284a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800285e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800286e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002896:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fe79 	bl	8002598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	@ 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b22      	cmp	r3, #34	@ 0x22
 80028c2:	f040 80ae 	bne.w	8002a22 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ce:	d117      	bne.n	8002900 <UART_Receive_IT+0x50>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d113      	bne.n	8002900 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80028fe:	e026      	b.n	800294e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002912:	d007      	beq.n	8002924 <UART_Receive_IT+0x74>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <UART_Receive_IT+0x82>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e008      	b.n	8002944 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800293e:	b2da      	uxtb	r2, r3
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002942:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29b      	uxth	r3, r3
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4619      	mov	r1, r3
 800295c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800295e:	2b00      	cmp	r3, #0
 8002960:	d15d      	bne.n	8002a1e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0220 	bic.w	r2, r2, #32
 8002970:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002980:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d135      	bne.n	8002a14 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	613b      	str	r3, [r7, #16]
   return(result);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f023 0310 	bic.w	r3, r3, #16
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ce:	623a      	str	r2, [r7, #32]
 80029d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	69f9      	ldr	r1, [r7, #28]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	61bb      	str	r3, [r7, #24]
   return(result);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e5      	bne.n	80029ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d10a      	bne.n	8002a06 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fdd5 	bl	80025bc <HAL_UARTEx_RxEventCallback>
 8002a12:	e002      	b.n	8002a1a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7fd fbb1 	bl	800017c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e002      	b.n	8002a24 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3730      	adds	r7, #48	@ 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a66:	f023 030c 	bic.w	r3, r3, #12
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b40 <UART_SetConfig+0x114>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7fe ff4e 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	e002      	b.n	8002aa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f7fe ff36 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8002aa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	0119      	lsls	r1, r3, #4
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <UART_SetConfig+0x118>)
 8002ada:	fba3 0302 	umull	r0, r3, r3, r2
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2064      	movs	r0, #100	@ 0x64
 8002ae2:	fb00 f303 	mul.w	r3, r0, r3
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	3332      	adds	r3, #50	@ 0x32
 8002aec:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <UART_SetConfig+0x118>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af8:	4419      	add	r1, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <UART_SetConfig+0x118>)
 8002b12:	fba3 0302 	umull	r0, r3, r3, r2
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2064      	movs	r0, #100	@ 0x64
 8002b1a:	fb00 f303 	mul.w	r3, r0, r3
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	3332      	adds	r3, #50	@ 0x32
 8002b24:	4a07      	ldr	r2, [pc, #28]	@ (8002b44 <UART_SetConfig+0x118>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	440a      	add	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40013800 	.word	0x40013800
 8002b44:	51eb851f 	.word	0x51eb851f

08002b48 <__NVIC_SetPriority>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	@ (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	@ (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <SysTick_Handler+0x1c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ba4:	f002 fe38 	bl	8005818 <xTaskGetSchedulerState>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002bae:	f003 fd13 	bl	80065d8 <xPortSysTickHandler>
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f06f 0004 	mvn.w	r0, #4
 8002bc6:	f7ff ffbf 	bl	8002b48 <__NVIC_SetPriority>
#endif
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bd6:	f3ef 8305 	mrs	r3, IPSR
 8002bda:	603b      	str	r3, [r7, #0]
  return(result);
 8002bdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002be2:	f06f 0305 	mvn.w	r3, #5
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	e00c      	b.n	8002c04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bea:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <osKernelInitialize+0x40>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <osKernelInitialize+0x40>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	e002      	b.n	8002c04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	200001a8 	.word	0x200001a8

08002c14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c1a:	f3ef 8305 	mrs	r3, IPSR
 8002c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c26:	f06f 0305 	mvn.w	r3, #5
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	e010      	b.n	8002c50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <osKernelStart+0x48>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d109      	bne.n	8002c4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c36:	f7ff ffc1 	bl	8002bbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <osKernelStart+0x48>)
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c40:	f002 f8d6 	bl	8004df0 <vTaskStartScheduler>
      stat = osOK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	e002      	b.n	8002c50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c50:	687b      	ldr	r3, [r7, #4]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200001a8 	.word	0x200001a8

08002c60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c66:	f3ef 8305 	mrs	r3, IPSR
 8002c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c6c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002c72:	f002 f9e7 	bl	8005044 <xTaskGetTickCountFromISR>
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	e002      	b.n	8002c80 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8002c7a:	f002 f9d5 	bl	8005028 <xTaskGetTickCount>
 8002c7e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002c80:	687b      	ldr	r3, [r7, #4]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b08e      	sub	sp, #56	@ 0x38
 8002c8e:	af04      	add	r7, sp, #16
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c9a:	f3ef 8305 	mrs	r3, IPSR
 8002c9e:	617b      	str	r3, [r7, #20]
  return(result);
 8002ca0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d17e      	bne.n	8002da4 <osThreadNew+0x11a>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d07b      	beq.n	8002da4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002cb0:	2318      	movs	r3, #24
 8002cb2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d045      	beq.n	8002d50 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <osThreadNew+0x48>
        name = attr->name;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <osThreadNew+0x6e>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b38      	cmp	r3, #56	@ 0x38
 8002cea:	d805      	bhi.n	8002cf8 <osThreadNew+0x6e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <osThreadNew+0x72>
        return (NULL);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e054      	b.n	8002da6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <osThreadNew+0xa8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2ba7      	cmp	r3, #167	@ 0xa7
 8002d1a:	d90a      	bls.n	8002d32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <osThreadNew+0xa8>
        mem = 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e010      	b.n	8002d54 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <osThreadNew+0xca>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <osThreadNew+0xca>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <osThreadNew+0xca>
          mem = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e001      	b.n	8002d54 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d110      	bne.n	8002d7c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d62:	9202      	str	r2, [sp, #8]
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f001 fdff 	bl	8004974 <xTaskCreateStatic>
 8002d76:	4603      	mov	r3, r0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e013      	b.n	8002da4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d110      	bne.n	8002da4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f001 fe4d 	bl	8004a34 <xTaskCreate>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d001      	beq.n	8002da4 <osThreadNew+0x11a>
            hTask = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002da4:	693b      	ldr	r3, [r7, #16]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3728      	adds	r7, #40	@ 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db6:	f3ef 8305 	mrs	r3, IPSR
 8002dba:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <osDelayUntil+0x1c>
    stat = osErrorISR;
 8002dc2:	f06f 0305 	mvn.w	r3, #5
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e019      	b.n	8002dfe <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8002dce:	f002 f92b 	bl	8005028 <xTaskGetTickCount>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <osDelayUntil+0x4a>
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db06      	blt.n	8002df8 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	6939      	ldr	r1, [r7, #16]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 ff7d 	bl	8004cf0 <vTaskDelayUntil>
 8002df6:	e002      	b.n	8002dfe <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8002df8:	f06f 0303 	mvn.w	r3, #3
 8002dfc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002dfe:	697b      	ldr	r3, [r7, #20]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e14:	f3ef 8305 	mrs	r3, IPSR
 8002e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e1a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d12d      	bne.n	8002e7c <osEventFlagsNew+0x74>
    mem = -1;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d015      	beq.n	8002e58 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <osEventFlagsNew+0x3a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b1f      	cmp	r3, #31
 8002e3a:	d902      	bls.n	8002e42 <osEventFlagsNew+0x3a>
        mem = 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e00c      	b.n	8002e5c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <osEventFlagsNew+0x54>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <osEventFlagsNew+0x54>
          mem = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	e001      	b.n	8002e5c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d106      	bne.n	8002e70 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fa38 	bl	80032dc <xEventGroupCreateStatic>
 8002e6c:	6178      	str	r0, [r7, #20]
 8002e6e:	e005      	b.n	8002e7c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002e76:	f000 fa6a 	bl	800334e <xEventGroupCreate>
 8002e7a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002e7c:	697b      	ldr	r3, [r7, #20]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <osEventFlagsSet+0x1c>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ea2:	d303      	bcc.n	8002eac <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8002ea4:	f06f 0303 	mvn.w	r3, #3
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e028      	b.n	8002efe <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eac:	f3ef 8305 	mrs	r3, IPSR
 8002eb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01d      	beq.n	8002ef4 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6839      	ldr	r1, [r7, #0]
 8002ec4:	6938      	ldr	r0, [r7, #16]
 8002ec6:	f000 fc67 	bl	8003798 <xEventGroupSetBitsFromISR>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8002ed0:	f06f 0302 	mvn.w	r3, #2
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e012      	b.n	8002efe <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <osEventFlagsSet+0x76>
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <osEventFlagsSet+0x80>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	e004      	b.n	8002efe <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	6938      	ldr	r0, [r7, #16]
 8002ef8:	f000 fb87 	bl	800360a <xEventGroupSetBits>
 8002efc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <osEventFlagsClear+0x1c>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f26:	d303      	bcc.n	8002f30 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8002f28:	f06f 0303 	mvn.w	r3, #3
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	e019      	b.n	8002f64 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f30:	f3ef 8305 	mrs	r3, IPSR
 8002f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f36:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00e      	beq.n	8002f5a <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002f3c:	6938      	ldr	r0, [r7, #16]
 8002f3e:	f000 fb41 	bl	80035c4 <xEventGroupGetBitsFromISR>
 8002f42:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	6938      	ldr	r0, [r7, #16]
 8002f48:	f000 fb28 	bl	800359c <xEventGroupClearBitsFromISR>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 8002f52:	f06f 0302 	mvn.w	r3, #2
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e004      	b.n	8002f64 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	6938      	ldr	r0, [r7, #16]
 8002f5e:	f000 fae3 	bl	8003528 <xEventGroupClearBits>
 8002f62:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002f64:	697b      	ldr	r3, [r7, #20]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b08c      	sub	sp, #48	@ 0x30
 8002f72:	af02      	add	r7, sp, #8
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <osEventFlagsWait+0x20>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f8c:	d303      	bcc.n	8002f96 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8002f8e:	f06f 0303 	mvn.w	r3, #3
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	e04b      	b.n	800302e <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f96:	f3ef 8305 	mrs	r3, IPSR
 8002f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8002f9c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8002fa2:	f06f 0305 	mvn.w	r3, #5
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	e041      	b.n	800302e <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb8:	e001      	b.n	8002fbe <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	e001      	b.n	8002fd2 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	69b8      	ldr	r0, [r7, #24]
 8002fde:	f000 f9d1 	bl	8003384 <xEventGroupWaitBits>
 8002fe2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d019      	beq.n	800302e <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8003000:	f06f 0301 	mvn.w	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e012      	b.n	800302e <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003008:	f06f 0302 	mvn.w	r3, #2
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e00e      	b.n	800302e <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8003020:	f06f 0301 	mvn.w	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e002      	b.n	800302e <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003028:	f06f 0302 	mvn.w	r3, #2
 800302c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800302e:	69fb      	ldr	r3, [r7, #28]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3728      	adds	r7, #40	@ 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	@ 0x28
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003048:	f3ef 8305 	mrs	r3, IPSR
 800304c:	613b      	str	r3, [r7, #16]
  return(result);
 800304e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003050:	2b00      	cmp	r3, #0
 8003052:	d175      	bne.n	8003140 <osSemaphoreNew+0x108>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d072      	beq.n	8003140 <osSemaphoreNew+0x108>
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	429a      	cmp	r2, r3
 8003060:	d86e      	bhi.n	8003140 <osSemaphoreNew+0x108>
    mem = -1;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d015      	beq.n	800309a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <osSemaphoreNew+0x4c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b4f      	cmp	r3, #79	@ 0x4f
 800307c:	d902      	bls.n	8003084 <osSemaphoreNew+0x4c>
        mem = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	e00c      	b.n	800309e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d108      	bne.n	800309e <osSemaphoreNew+0x66>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <osSemaphoreNew+0x66>
          mem = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e001      	b.n	800309e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d04c      	beq.n	8003140 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d128      	bne.n	80030fe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10a      	bne.n	80030c8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2203      	movs	r2, #3
 80030b8:	9200      	str	r2, [sp, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2100      	movs	r1, #0
 80030be:	2001      	movs	r0, #1
 80030c0:	f000 fc98 	bl	80039f4 <xQueueGenericCreateStatic>
 80030c4:	61f8      	str	r0, [r7, #28]
 80030c6:	e005      	b.n	80030d4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80030c8:	2203      	movs	r2, #3
 80030ca:	2100      	movs	r1, #0
 80030cc:	2001      	movs	r0, #1
 80030ce:	f000 fd0e 	bl	8003aee <xQueueGenericCreate>
 80030d2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d022      	beq.n	8003120 <osSemaphoreNew+0xe8>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01f      	beq.n	8003120 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80030e0:	2300      	movs	r3, #0
 80030e2:	2200      	movs	r2, #0
 80030e4:	2100      	movs	r1, #0
 80030e6:	69f8      	ldr	r0, [r7, #28]
 80030e8:	f000 fdce 	bl	8003c88 <xQueueGenericSend>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d016      	beq.n	8003120 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80030f2:	69f8      	ldr	r0, [r7, #28]
 80030f4:	f001 fa6c 	bl	80045d0 <vQueueDelete>
            hSemaphore = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	e010      	b.n	8003120 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d108      	bne.n	8003116 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	461a      	mov	r2, r3
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fd4c 	bl	8003baa <xQueueCreateCountingSemaphoreStatic>
 8003112:	61f8      	str	r0, [r7, #28]
 8003114:	e004      	b.n	8003120 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fd7f 	bl	8003c1c <xQueueCreateCountingSemaphore>
 800311e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <osSemaphoreNew+0xfc>
          name = attr->name;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e001      	b.n	8003138 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	69f8      	ldr	r0, [r7, #28]
 800313c:	f001 fb94 	bl	8004868 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003140:	69fb      	ldr	r3, [r7, #28]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003164:	f06f 0303 	mvn.w	r3, #3
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e039      	b.n	80031e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800316c:	f3ef 8305 	mrs	r3, IPSR
 8003170:	60fb      	str	r3, [r7, #12]
  return(result);
 8003172:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003174:	2b00      	cmp	r3, #0
 8003176:	d022      	beq.n	80031be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800317e:	f06f 0303 	mvn.w	r3, #3
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e02c      	b.n	80031e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	461a      	mov	r2, r3
 8003190:	2100      	movs	r1, #0
 8003192:	6938      	ldr	r0, [r7, #16]
 8003194:	f001 f99a 	bl	80044cc <xQueueReceiveFromISR>
 8003198:	4603      	mov	r3, r0
 800319a:	2b01      	cmp	r3, #1
 800319c:	d003      	beq.n	80031a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800319e:	f06f 0302 	mvn.w	r3, #2
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e01c      	b.n	80031e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d019      	beq.n	80031e0 <osSemaphoreAcquire+0x94>
 80031ac:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <osSemaphoreAcquire+0xa0>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	e010      	b.n	80031e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80031be:	6839      	ldr	r1, [r7, #0]
 80031c0:	6938      	ldr	r0, [r7, #16]
 80031c2:	f001 f873 	bl	80042ac <xQueueSemaphoreTake>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d009      	beq.n	80031e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80031d2:	f06f 0301 	mvn.w	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e002      	b.n	80031e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80031da:	f06f 0302 	mvn.w	r3, #2
 80031de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80031e0:	697b      	ldr	r3, [r7, #20]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003206:	f06f 0303 	mvn.w	r3, #3
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e02c      	b.n	8003268 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320e:	f3ef 8305 	mrs	r3, IPSR
 8003212:	60fb      	str	r3, [r7, #12]
  return(result);
 8003214:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01a      	beq.n	8003250 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	4619      	mov	r1, r3
 8003224:	6938      	ldr	r0, [r7, #16]
 8003226:	f000 fecf 	bl	8003fc8 <xQueueGiveFromISR>
 800322a:	4603      	mov	r3, r0
 800322c:	2b01      	cmp	r3, #1
 800322e:	d003      	beq.n	8003238 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003230:	f06f 0302 	mvn.w	r3, #2
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e017      	b.n	8003268 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d014      	beq.n	8003268 <osSemaphoreRelease+0x78>
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <osSemaphoreRelease+0x84>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	e00b      	b.n	8003268 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003250:	2300      	movs	r3, #0
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	6938      	ldr	r0, [r7, #16]
 8003258:	f000 fd16 	bl	8003c88 <xQueueGenericSend>
 800325c:	4603      	mov	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d002      	beq.n	8003268 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003262:	f06f 0302 	mvn.w	r3, #2
 8003266:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003268:	697b      	ldr	r3, [r7, #20]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a06      	ldr	r2, [pc, #24]	@ (80032a0 <vApplicationGetIdleTaskMemory+0x28>)
 8003288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800328e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	601a      	str	r2, [r3, #0]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	200001ac 	.word	0x200001ac
 80032a4:	20000254 	.word	0x20000254

080032a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80032b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4a06      	ldr	r2, [pc, #24]	@ (80032d8 <vApplicationGetTimerTaskMemory+0x30>)
 80032be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000454 	.word	0x20000454
 80032d8:	200004fc 	.word	0x200004fc

080032dc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	e7fd      	b.n	80032fe <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003302:	2320      	movs	r3, #32
 8003304:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b20      	cmp	r3, #32
 800330a:	d00b      	beq.n	8003324 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60fb      	str	r3, [r7, #12]
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3304      	adds	r3, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa41 	bl	80037c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2201      	movs	r2, #1
 8003342:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003344:	697b      	ldr	r3, [r7, #20]
	}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003354:	2020      	movs	r0, #32
 8003356:	f003 f9c3 	bl	80066e0 <pvPortMalloc>
 800335a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fa27 	bl	80037c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003378:	687b      	ldr	r3, [r7, #4]
	}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b090      	sub	sp, #64	@ 0x40
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800339a:	2300      	movs	r3, #0
 800339c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <xEventGroupWaitBits+0x38>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	623b      	str	r3, [r7, #32]
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c2:	d30b      	bcc.n	80033dc <xEventGroupWaitBits+0x58>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	61fb      	str	r3, [r7, #28]
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <xEventGroupWaitBits+0x76>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	61bb      	str	r3, [r7, #24]
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033fa:	f002 fa0d 	bl	8005818 <xTaskGetSchedulerState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <xEventGroupWaitBits+0x86>
 8003404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <xEventGroupWaitBits+0x8a>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <xEventGroupWaitBits+0x8c>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	617b      	str	r3, [r7, #20]
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800342c:	f001 fd50 	bl	8004ed0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800343c:	f000 f98b 	bl	8003756 <prvTestWaitCondition>
 8003440:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00e      	beq.n	8003466 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800344c:	2300      	movs	r3, #0
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d028      	beq.n	80034a8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e020      	b.n	80034a8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800346c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	633b      	str	r3, [r7, #48]	@ 0x30
 8003474:	e018      	b.n	80034a8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800347c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003482:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003490:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003494:	1d18      	adds	r0, r3, #4
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349a:	4313      	orrs	r3, r2
 800349c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800349e:	4619      	mov	r1, r3
 80034a0:	f001 ff26 	bl	80052f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80034a8:	f001 fd20 	bl	8004eec <xTaskResumeAll>
 80034ac:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80034ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d031      	beq.n	8003518 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d107      	bne.n	80034ca <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80034ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003524 <xEventGroupWaitBits+0x1a0>)
 80034bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80034ca:	f002 fb1f 	bl	8005b0c <uxTaskResetEventItemValue>
 80034ce:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80034d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11a      	bne.n	8003510 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80034da:	f002 ffff 	bl	80064dc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80034de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034ea:	f000 f934 	bl	8003756 <prvTestWaitCondition>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d006      	beq.n	8003508 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80034fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	43db      	mvns	r3, r3
 8003502:	401a      	ands	r2, r3
 8003504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003506:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800350c:	f003 f816 	bl	800653c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003512:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800351a:	4618      	mov	r0, r3
 800351c:	3740      	adds	r7, #64	@ 0x40
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <xEventGroupClearBits+0x2c>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	60fb      	str	r3, [r7, #12]
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800355a:	d30b      	bcc.n	8003574 <xEventGroupClearBits+0x4c>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	60bb      	str	r3, [r7, #8]
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8003574:	f002 ffb2 	bl	80064dc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	43db      	mvns	r3, r3
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800358c:	f002 ffd6 	bl	800653c <vPortExitCritical>

	return uxReturn;
 8003590:	693b      	ldr	r3, [r7, #16]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80035a6:	2300      	movs	r3, #0
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4804      	ldr	r0, [pc, #16]	@ (80035c0 <xEventGroupClearBitsFromISR+0x24>)
 80035ae:	f002 fe85 	bl	80062bc <xTimerPendFunctionCallFromISR>
 80035b2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80035b4:	68fb      	ldr	r3, [r7, #12]
	}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	0800373d 	.word	0x0800373d

080035c4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035d0:	f3ef 8211 	mrs	r2, BASEPRI
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	60fa      	str	r2, [r7, #12]
 80035e6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035e8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ea:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035fc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80035fe:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8003600:	4618      	mov	r0, r3
 8003602:	3724      	adds	r7, #36	@ 0x24
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b08e      	sub	sp, #56	@ 0x38
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003614:	2300      	movs	r3, #0
 8003616:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <xEventGroupSetBits+0x34>
	__asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	613b      	str	r3, [r7, #16]
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003644:	d30b      	bcc.n	800365e <xEventGroupSetBits+0x54>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60fb      	str	r3, [r7, #12]
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	e7fd      	b.n	800365a <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	3304      	adds	r3, #4
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	3308      	adds	r3, #8
 8003668:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800366a:	f001 fc31 	bl	8004ed0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	431a      	orrs	r2, r3
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003680:	e03c      	b.n	80036fc <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800368e:	2300      	movs	r3, #0
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003698:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036a0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80036ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036bc:	e008      	b.n	80036d0 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d101      	bne.n	80036d0 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80036d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80036e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036f0:	4619      	mov	r1, r3
 80036f2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036f4:	f001 feca 	bl	800548c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80036fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	429a      	cmp	r2, r3
 8003702:	d1be      	bne.n	8003682 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	43db      	mvns	r3, r3
 800370c:	401a      	ands	r2, r3
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003712:	f001 fbeb 	bl	8004eec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	681b      	ldr	r3, [r3, #0]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3738      	adds	r7, #56	@ 0x38
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ff6b 	bl	800360a <xEventGroupSetBits>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff feed 	bl	8003528 <xEventGroupClearBits>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003756:	b480      	push	{r7}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003776:	2301      	movs	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e007      	b.n	800378c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4013      	ands	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d101      	bne.n	800378c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800378c:	697b      	ldr	r3, [r7, #20]
}
 800378e:	4618      	mov	r0, r3
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	68f9      	ldr	r1, [r7, #12]
 80037aa:	4804      	ldr	r0, [pc, #16]	@ (80037bc <xEventGroupSetBitsFromISR+0x24>)
 80037ac:	f002 fd86 	bl	80062bc <xTimerPendFunctionCallFromISR>
 80037b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80037b2:	697b      	ldr	r3, [r7, #20]
	}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	08003723 	.word	0x08003723

080037c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 0208 	add.w	r2, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f103 0208 	add.w	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0208 	add.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d103      	bne.n	800387c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e00c      	b.n	8003896 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3308      	adds	r3, #8
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e002      	b.n	800388a <vListInsert+0x2e>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d2f6      	bcs.n	8003884 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6852      	ldr	r2, [r2, #4]
 80038ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d103      	bne.n	8003900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
	...

08003920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <xQueueGenericReset+0x2c>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	60bb      	str	r3, [r7, #8]
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800394c:	f002 fdc6 	bl	80064dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	3b01      	subs	r3, #1
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	441a      	add	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	22ff      	movs	r2, #255	@ 0xff
 8003990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	22ff      	movs	r2, #255	@ 0xff
 8003998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d114      	bne.n	80039cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01a      	beq.n	80039e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3310      	adds	r3, #16
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fd08 	bl	80053c4 <xTaskRemoveFromEventList>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d012      	beq.n	80039e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <xQueueGenericReset+0xd0>)
 80039bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	e009      	b.n	80039e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3310      	adds	r3, #16
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fef5 	bl	80037c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3324      	adds	r3, #36	@ 0x24
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fef0 	bl	80037c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039e0:	f002 fdac 	bl	800653c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	@ 0x38
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	e7fd      	b.n	8003a3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <xQueueGenericCreateStatic+0x56>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <xQueueGenericCreateStatic+0x5a>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericCreateStatic+0x5c>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <xQueueGenericCreateStatic+0x84>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <xQueueGenericCreateStatic+0x88>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <xQueueGenericCreateStatic+0x8a>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	61fb      	str	r3, [r7, #28]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a9a:	2350      	movs	r3, #80	@ 0x50
 8003a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b50      	cmp	r3, #80	@ 0x50
 8003aa2:	d00b      	beq.n	8003abc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	61bb      	str	r3, [r7, #24]
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003abc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ad0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f840 	bl	8003b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3730      	adds	r7, #48	@ 0x30
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08a      	sub	sp, #40	@ 0x28
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	4613      	mov	r3, r2
 8003afa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	613b      	str	r3, [r7, #16]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	3350      	adds	r3, #80	@ 0x50
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 fdd9 	bl	80066e0 <pvPortMalloc>
 8003b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d011      	beq.n	8003b5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	3350      	adds	r3, #80	@ 0x50
 8003b3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b48:	79fa      	ldrb	r2, [r7, #7]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f805 	bl	8003b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e002      	b.n	8003b86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b92:	2101      	movs	r1, #1
 8003b94:	69b8      	ldr	r0, [r7, #24]
 8003b96:	f7ff fec3 	bl	8003920 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b08a      	sub	sp, #40	@ 0x28
 8003bae:	af02      	add	r7, sp, #8
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	61bb      	str	r3, [r7, #24]
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d90b      	bls.n	8003bf4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	617b      	str	r3, [r7, #20]
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff fef8 	bl	80039f4 <xQueueGenericCreateStatic>
 8003c04:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c12:	69fb      	ldr	r3, [r7, #28]
	}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d90b      	bls.n	8003c64 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	60fb      	str	r3, [r7, #12]
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003c64:	2202      	movs	r2, #2
 8003c66:	2100      	movs	r1, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff40 	bl	8003aee <xQueueGenericCreate>
 8003c6e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c7c:	697b      	ldr	r3, [r7, #20]
	}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	@ 0x38
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <xQueueGenericSend+0x34>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <xQueueGenericSend+0x42>
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <xQueueGenericSend+0x46>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <xQueueGenericSend+0x48>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <xQueueGenericSend+0x64>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <xQueueGenericSend+0x72>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <xQueueGenericSend+0x76>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <xQueueGenericSend+0x78>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10b      	bne.n	8003d1c <xQueueGenericSend+0x94>
	__asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	623b      	str	r3, [r7, #32]
}
 8003d16:	bf00      	nop
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d1c:	f001 fd7c 	bl	8005818 <xTaskGetSchedulerState>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <xQueueGenericSend+0xa4>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <xQueueGenericSend+0xa8>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <xQueueGenericSend+0xaa>
 8003d30:	2300      	movs	r3, #0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <xQueueGenericSend+0xc6>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	61fb      	str	r3, [r7, #28]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d4e:	f002 fbc5 	bl	80064dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <xQueueGenericSend+0xdc>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d129      	bne.n	8003db8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d6a:	f000 fc6c 	bl	8004646 <prvCopyDataToQueue>
 8003d6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	3324      	adds	r3, #36	@ 0x24
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fb21 	bl	80053c4 <xTaskRemoveFromEventList>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d88:	4b3f      	ldr	r3, [pc, #252]	@ (8003e88 <xQueueGenericSend+0x200>)
 8003d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	e00a      	b.n	8003db0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003da0:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <xQueueGenericSend+0x200>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003db0:	f002 fbc4 	bl	800653c <vPortExitCritical>
				return pdPASS;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e063      	b.n	8003e80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dbe:	f002 fbbd 	bl	800653c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e05c      	b.n	8003e80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fbbf 	bl	8005554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dda:	f002 fbaf 	bl	800653c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dde:	f001 f877 	bl	8004ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003de2:	f002 fb7b 	bl	80064dc <vPortEnterCritical>
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <xQueueGenericSend+0x174>
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d103      	bne.n	8003e12 <xQueueGenericSend+0x18a>
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e12:	f002 fb93 	bl	800653c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e16:	1d3a      	adds	r2, r7, #4
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 fbae 	bl	8005580 <xTaskCheckForTimeOut>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d124      	bne.n	8003e74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e2c:	f000 fd03 	bl	8004836 <prvIsQueueFull>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d018      	beq.n	8003e68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e38:	3310      	adds	r3, #16
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fa30 	bl	80052a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e46:	f000 fc8e 	bl	8004766 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e4a:	f001 f84f 	bl	8004eec <xTaskResumeAll>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f af7c 	bne.w	8003d4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e56:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <xQueueGenericSend+0x200>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	e772      	b.n	8003d4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e6a:	f000 fc7c 	bl	8004766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e6e:	f001 f83d 	bl	8004eec <xTaskResumeAll>
 8003e72:	e76c      	b.n	8003d4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e76:	f000 fc76 	bl	8004766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e7a:	f001 f837 	bl	8004eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3738      	adds	r7, #56	@ 0x38
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b090      	sub	sp, #64	@ 0x40
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <xQueueGenericSendFromISR+0x3e>
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <xQueueGenericSendFromISR+0x42>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <xQueueGenericSendFromISR+0x44>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d103      	bne.n	8003efa <xQueueGenericSendFromISR+0x6e>
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <xQueueGenericSendFromISR+0x72>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <xQueueGenericSendFromISR+0x74>
 8003efe:	2300      	movs	r3, #0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	623b      	str	r3, [r7, #32]
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f1c:	f002 fba0 	bl	8006660 <vPortValidateInterruptPriority>
	__asm volatile
 8003f20:	f3ef 8211 	mrs	r2, BASEPRI
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	61fa      	str	r2, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003f38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <xQueueGenericSendFromISR+0xc2>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d12f      	bne.n	8003fae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f64:	f000 fb6f 	bl	8004646 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d112      	bne.n	8003f98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	3324      	adds	r3, #36	@ 0x24
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fa20 	bl	80053c4 <xTaskRemoveFromEventList>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00e      	beq.n	8003fa8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	e007      	b.n	8003fa8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	b25a      	sxtb	r2, r3
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003fac:	e001      	b.n	8003fb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f383 8811 	msr	BASEPRI, r3
}
 8003fbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3740      	adds	r7, #64	@ 0x40
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08e      	sub	sp, #56	@ 0x38
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	623b      	str	r3, [r7, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	bf00      	nop
 8003ff2:	e7fd      	b.n	8003ff0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	61fb      	str	r3, [r7, #28]
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <xQueueGiveFromISR+0x5c>
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <xQueueGiveFromISR+0x60>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <xQueueGiveFromISR+0x62>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	61bb      	str	r3, [r7, #24]
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	e7fd      	b.n	8004042 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004046:	f002 fb0b 	bl	8006660 <vPortValidateInterruptPriority>
	__asm volatile
 800404a:	f3ef 8211 	mrs	r2, BASEPRI
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	617a      	str	r2, [r7, #20]
 8004060:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004062:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004064:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004072:	429a      	cmp	r2, r3
 8004074:	d22b      	bcs.n	80040ce <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800407c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004088:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d112      	bne.n	80040b8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	3324      	adds	r3, #36	@ 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 f990 	bl	80053c4 <xTaskRemoveFromEventList>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e007      	b.n	80040c8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040bc:	3301      	adds	r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	b25a      	sxtb	r2, r3
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80040c8:	2301      	movs	r3, #1
 80040ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80040cc:	e001      	b.n	80040d2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f383 8811 	msr	BASEPRI, r3
}
 80040dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3738      	adds	r7, #56	@ 0x38
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	@ 0x30
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <xQueueReceive+0x32>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	623b      	str	r3, [r7, #32]
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <xQueueReceive+0x40>
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <xQueueReceive+0x44>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <xQueueReceive+0x46>
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <xQueueReceive+0x62>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	61fb      	str	r3, [r7, #28]
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800414a:	f001 fb65 	bl	8005818 <xTaskGetSchedulerState>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <xQueueReceive+0x72>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <xQueueReceive+0x76>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueReceive+0x78>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <xQueueReceive+0x94>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	61bb      	str	r3, [r7, #24]
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800417c:	f002 f9ae 	bl	80064dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01f      	beq.n	80041cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004190:	f000 fac3 	bl	800471a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00f      	beq.n	80041c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	3310      	adds	r3, #16
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f90b 	bl	80053c4 <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041b4:	4b3c      	ldr	r3, [pc, #240]	@ (80042a8 <xQueueReceive+0x1c0>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041c4:	f002 f9ba 	bl	800653c <vPortExitCritical>
				return pdPASS;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e069      	b.n	80042a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041d2:	f002 f9b3 	bl	800653c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e062      	b.n	80042a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041e0:	f107 0310 	add.w	r3, r7, #16
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 f9b5 	bl	8005554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041ea:	2301      	movs	r3, #1
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ee:	f002 f9a5 	bl	800653c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041f2:	f000 fe6d 	bl	8004ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041f6:	f002 f971 	bl	80064dc <vPortEnterCritical>
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004200:	b25b      	sxtb	r3, r3
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d103      	bne.n	8004210 <xQueueReceive+0x128>
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004216:	b25b      	sxtb	r3, r3
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d103      	bne.n	8004226 <xQueueReceive+0x13e>
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004226:	f002 f989 	bl	800653c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800422a:	1d3a      	adds	r2, r7, #4
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f001 f9a4 	bl	8005580 <xTaskCheckForTimeOut>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d123      	bne.n	8004286 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800423e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004240:	f000 fae3 	bl	800480a <prvIsQueueEmpty>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d017      	beq.n	800427a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	3324      	adds	r3, #36	@ 0x24
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f826 	bl	80052a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800425a:	f000 fa84 	bl	8004766 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800425e:	f000 fe45 	bl	8004eec <xTaskResumeAll>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d189      	bne.n	800417c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <xQueueReceive+0x1c0>)
 800426a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	e780      	b.n	800417c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800427a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800427c:	f000 fa73 	bl	8004766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004280:	f000 fe34 	bl	8004eec <xTaskResumeAll>
 8004284:	e77a      	b.n	800417c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004288:	f000 fa6d 	bl	8004766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800428c:	f000 fe2e 	bl	8004eec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004292:	f000 faba 	bl	800480a <prvIsQueueEmpty>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	f43f af6f 	beq.w	800417c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800429e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3730      	adds	r7, #48	@ 0x30
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08e      	sub	sp, #56	@ 0x38
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	623b      	str	r3, [r7, #32]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61fb      	str	r3, [r7, #28]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004300:	f001 fa8a 	bl	8005818 <xTaskGetSchedulerState>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <xQueueSemaphoreTake+0x64>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <xQueueSemaphoreTake+0x68>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <xQueueSemaphoreTake+0x6a>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	61bb      	str	r3, [r7, #24]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004332:	f002 f8d3 	bl	80064dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d024      	beq.n	800438c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004348:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004352:	f001 fbf3 	bl	8005b3c <pvTaskIncrementMutexHeldCount>
 8004356:	4602      	mov	r2, r0
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00f      	beq.n	8004384 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004366:	3310      	adds	r3, #16
 8004368:	4618      	mov	r0, r3
 800436a:	f001 f82b 	bl	80053c4 <xTaskRemoveFromEventList>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004374:	4b54      	ldr	r3, [pc, #336]	@ (80044c8 <xQueueSemaphoreTake+0x21c>)
 8004376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004384:	f002 f8da 	bl	800653c <vPortExitCritical>
				return pdPASS;
 8004388:	2301      	movs	r3, #1
 800438a:	e098      	b.n	80044be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d112      	bne.n	80043b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	617b      	str	r3, [r7, #20]
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043b0:	f002 f8c4 	bl	800653c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e082      	b.n	80044be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043be:	f107 030c 	add.w	r3, r7, #12
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f8c6 	bl	8005554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043cc:	f002 f8b6 	bl	800653c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043d0:	f000 fd7e 	bl	8004ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043d4:	f002 f882 	bl	80064dc <vPortEnterCritical>
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d103      	bne.n	80043ee <xQueueSemaphoreTake+0x142>
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d103      	bne.n	8004404 <xQueueSemaphoreTake+0x158>
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004404:	f002 f89a 	bl	800653c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004408:	463a      	mov	r2, r7
 800440a:	f107 030c 	add.w	r3, r7, #12
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f001 f8b5 	bl	8005580 <xTaskCheckForTimeOut>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d132      	bne.n	8004482 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800441c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800441e:	f000 f9f4 	bl	800480a <prvIsQueueEmpty>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d026      	beq.n	8004476 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004430:	f002 f854 	bl	80064dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fa0b 	bl	8005854 <xTaskPriorityInherit>
 800443e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004440:	f002 f87c 	bl	800653c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	3324      	adds	r3, #36	@ 0x24
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f000 ff29 	bl	80052a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004452:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004454:	f000 f987 	bl	8004766 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004458:	f000 fd48 	bl	8004eec <xTaskResumeAll>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	f47f af67 	bne.w	8004332 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004464:	4b18      	ldr	r3, [pc, #96]	@ (80044c8 <xQueueSemaphoreTake+0x21c>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	e75d      	b.n	8004332 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004476:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004478:	f000 f975 	bl	8004766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800447c:	f000 fd36 	bl	8004eec <xTaskResumeAll>
 8004480:	e757      	b.n	8004332 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004484:	f000 f96f 	bl	8004766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004488:	f000 fd30 	bl	8004eec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800448c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800448e:	f000 f9bc 	bl	800480a <prvIsQueueEmpty>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	f43f af4c 	beq.w	8004332 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00d      	beq.n	80044bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80044a0:	f002 f81c 	bl	80064dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044a6:	f000 f8b7 	bl	8004618 <prvGetDisinheritPriorityAfterTimeout>
 80044aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 faa6 	bl	8005a04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044b8:	f002 f840 	bl	800653c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3738      	adds	r7, #56	@ 0x38
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08e      	sub	sp, #56	@ 0x38
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	623b      	str	r3, [r7, #32]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <xQueueReceiveFromISR+0x3c>
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <xQueueReceiveFromISR+0x40>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <xQueueReceiveFromISR+0x42>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61fb      	str	r3, [r7, #28]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800452a:	f002 f899 	bl	8006660 <vPortValidateInterruptPriority>
	__asm volatile
 800452e:	f3ef 8211 	mrs	r2, BASEPRI
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	61ba      	str	r2, [r7, #24]
 8004544:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004546:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d02f      	beq.n	80045b6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800455c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004564:	f000 f8d9 	bl	800471a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	1e5a      	subs	r2, r3, #1
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004570:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d112      	bne.n	80045a0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	3310      	adds	r3, #16
 8004586:	4618      	mov	r0, r3
 8004588:	f000 ff1c 	bl	80053c4 <xTaskRemoveFromEventList>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e007      	b.n	80045b0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80045a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045a4:	3301      	adds	r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	b25a      	sxtb	r2, r3
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80045b0:	2301      	movs	r3, #1
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b4:	e001      	b.n	80045ba <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f383 8811 	msr	BASEPRI, r3
}
 80045c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3738      	adds	r7, #56	@ 0x38
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <vQueueDelete+0x2a>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60bb      	str	r3, [r7, #8]
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f95c 	bl	80048b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f002 f936 	bl	800687c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e001      	b.n	800463a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800463a:	68fb      	ldr	r3, [r7, #12]
	}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d14d      	bne.n	8004708 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f957 	bl	8005924 <xTaskPriorityDisinherit>
 8004676:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	e043      	b.n	8004708 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d119      	bne.n	80046ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6858      	ldr	r0, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	461a      	mov	r2, r3
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	f002 fcec 	bl	800706e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	441a      	add	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d32b      	bcc.n	8004708 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	e026      	b.n	8004708 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68d8      	ldr	r0, [r3, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	461a      	mov	r2, r3
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	f002 fcd2 	bl	800706e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	425b      	negs	r3, r3
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d207      	bcs.n	80046f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	425b      	negs	r3, r3
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d105      	bne.n	8004708 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3b01      	subs	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004710:	697b      	ldr	r3, [r7, #20]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	d303      	bcc.n	800474e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68d9      	ldr	r1, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	461a      	mov	r2, r3
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f002 fc88 	bl	800706e <memcpy>
	}
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800476e:	f001 feb5 	bl	80064dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004778:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800477a:	e011      	b.n	80047a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d012      	beq.n	80047aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3324      	adds	r3, #36	@ 0x24
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fe1b 	bl	80053c4 <xTaskRemoveFromEventList>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004794:	f000 ff58 	bl	8005648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	3b01      	subs	r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dce9      	bgt.n	800477c <prvUnlockQueue+0x16>
 80047a8:	e000      	b.n	80047ac <prvUnlockQueue+0x46>
					break;
 80047aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	22ff      	movs	r2, #255	@ 0xff
 80047b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047b4:	f001 fec2 	bl	800653c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047b8:	f001 fe90 	bl	80064dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047c4:	e011      	b.n	80047ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d012      	beq.n	80047f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3310      	adds	r3, #16
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fdf6 	bl	80053c4 <xTaskRemoveFromEventList>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047de:	f000 ff33 	bl	8005648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dce9      	bgt.n	80047c6 <prvUnlockQueue+0x60>
 80047f2:	e000      	b.n	80047f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	22ff      	movs	r2, #255	@ 0xff
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80047fe:	f001 fe9d 	bl	800653c <vPortExitCritical>
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004812:	f001 fe63 	bl	80064dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e001      	b.n	8004828 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004828:	f001 fe88 	bl	800653c <vPortExitCritical>

	return xReturn;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800483e:	f001 fe4d 	bl	80064dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484a:	429a      	cmp	r2, r3
 800484c:	d102      	bne.n	8004854 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800484e:	2301      	movs	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e001      	b.n	8004858 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004858:	f001 fe70 	bl	800653c <vPortExitCritical>

	return xReturn;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e014      	b.n	80048a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004878:	4a0e      	ldr	r2, [pc, #56]	@ (80048b4 <vQueueAddToRegistry+0x4c>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004884:	490b      	ldr	r1, [pc, #44]	@ (80048b4 <vQueueAddToRegistry+0x4c>)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800488e:	4a09      	ldr	r2, [pc, #36]	@ (80048b4 <vQueueAddToRegistry+0x4c>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800489a:	e006      	b.n	80048aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b07      	cmp	r3, #7
 80048a6:	d9e7      	bls.n	8004878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	200008fc 	.word	0x200008fc

080048b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e016      	b.n	80048f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80048c6:	4a10      	ldr	r2, [pc, #64]	@ (8004908 <vQueueUnregisterQueue+0x50>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d10b      	bne.n	80048ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80048d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004908 <vQueueUnregisterQueue+0x50>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2100      	movs	r1, #0
 80048dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80048e0:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <vQueueUnregisterQueue+0x50>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
				break;
 80048ec:	e006      	b.n	80048fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b07      	cmp	r3, #7
 80048f8:	d9e5      	bls.n	80048c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	200008fc 	.word	0x200008fc

0800490c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800491c:	f001 fdde 	bl	80064dc <vPortEnterCritical>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004926:	b25b      	sxtb	r3, r3
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d103      	bne.n	8004936 <vQueueWaitForMessageRestricted+0x2a>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800493c:	b25b      	sxtb	r3, r3
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d103      	bne.n	800494c <vQueueWaitForMessageRestricted+0x40>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494c:	f001 fdf6 	bl	800653c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	3324      	adds	r3, #36	@ 0x24
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fd03 	bl	800536c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004966:	6978      	ldr	r0, [r7, #20]
 8004968:	f7ff fefd 	bl	8004766 <prvUnlockQueue>
	}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08e      	sub	sp, #56	@ 0x38
 8004978:	af04      	add	r7, sp, #16
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	623b      	str	r3, [r7, #32]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <xTaskCreateStatic+0x4a>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	61fb      	str	r3, [r7, #28]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049be:	23a8      	movs	r3, #168	@ 0xa8
 80049c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2ba8      	cmp	r3, #168	@ 0xa8
 80049c6:	d00b      	beq.n	80049e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	61bb      	str	r3, [r7, #24]
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01e      	beq.n	8004a26 <xTaskCreateStatic+0xb2>
 80049e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01b      	beq.n	8004a26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a00:	2300      	movs	r3, #0
 8004a02:	9303      	str	r3, [sp, #12]
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f851 	bl	8004ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a20:	f000 f8f6 	bl	8004c10 <prvAddNewTaskToReadyList>
 8004a24:	e001      	b.n	8004a2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a2a:	697b      	ldr	r3, [r7, #20]
	}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	@ 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	@ 0x30
 8004a38:	af04      	add	r7, sp, #16
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fe49 	bl	80066e0 <pvPortMalloc>
 8004a4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a56:	20a8      	movs	r0, #168	@ 0xa8
 8004a58:	f001 fe42 	bl	80066e0 <pvPortMalloc>
 8004a5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a6a:	e005      	b.n	8004a78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a6c:	6978      	ldr	r0, [r7, #20]
 8004a6e:	f001 ff05 	bl	800687c <vPortFree>
 8004a72:	e001      	b.n	8004a78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d017      	beq.n	8004aae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9303      	str	r3, [sp, #12]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f80f 	bl	8004ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aa2:	69f8      	ldr	r0, [r7, #28]
 8004aa4:	f000 f8b4 	bl	8004c10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	e002      	b.n	8004ab4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
	}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	21a5      	movs	r1, #165	@ 0xa5
 8004ada:	f002 f9f7 	bl	8006ecc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f023 0307 	bic.w	r3, r3, #7
 8004af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	617b      	str	r3, [r7, #20]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01f      	beq.n	8004b60 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	e012      	b.n	8004b4c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	3334      	adds	r3, #52	@ 0x34
 8004b36:	460a      	mov	r2, r1
 8004b38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d006      	beq.n	8004b54 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	d9e9      	bls.n	8004b26 <prvInitialiseNewTask+0x66>
 8004b52:	e000      	b.n	8004b56 <prvInitialiseNewTask+0x96>
			{
				break;
 8004b54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b5e:	e003      	b.n	8004b68 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	2b37      	cmp	r3, #55	@ 0x37
 8004b6c:	d901      	bls.n	8004b72 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b6e:	2337      	movs	r3, #55	@ 0x37
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2200      	movs	r2, #0
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	3304      	adds	r3, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe fe38 	bl	80037fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	3318      	adds	r3, #24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe fe33 	bl	80037fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	3354      	adds	r3, #84	@ 0x54
 8004bc2:	224c      	movs	r2, #76	@ 0x4c
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 f980 	bl	8006ecc <memset>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <prvInitialiseNewTask+0x144>)
 8004bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004c08 <prvInitialiseNewTask+0x148>)
 8004bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <prvInitialiseNewTask+0x14c>)
 8004bdc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	69b8      	ldr	r0, [r7, #24]
 8004be4:	f001 fb8a 	bl	80062fc <pxPortInitialiseStack>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20001b90 	.word	0x20001b90
 8004c08:	20001bf8 	.word	0x20001bf8
 8004c0c:	20001c60 	.word	0x20001c60

08004c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c18:	f001 fc60 	bl	80064dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c26:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c34:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d110      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c3c:	f000 fd28 	bl	8005690 <prvInitialiseTaskLists>
 8004c40:	e00d      	b.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c42:	4b26      	ldr	r3, [pc, #152]	@ (8004cdc <prvAddNewTaskToReadyList+0xcc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c4a:	4b23      	ldr	r3, [pc, #140]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d802      	bhi.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c58:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce4 <prvAddNewTaskToReadyList+0xd4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <prvAddNewTaskToReadyList+0x74>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <prvAddNewTaskToReadyList+0xd4>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <prvAddNewTaskToReadyList+0xd8>)
 8004c92:	441a      	add	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fe fdbb 	bl	8003816 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ca0:	f001 fc4c 	bl	800653c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <prvAddNewTaskToReadyList+0xcc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d207      	bcs.n	8004cca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <prvAddNewTaskToReadyList+0xdc>)
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000e10 	.word	0x20000e10
 8004cd8:	2000093c 	.word	0x2000093c
 8004cdc:	20000e1c 	.word	0x20000e1c
 8004ce0:	20000e2c 	.word	0x20000e2c
 8004ce4:	20000e18 	.word	0x20000e18
 8004ce8:	20000940 	.word	0x20000940
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	@ 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <vTaskDelayUntil+0x2c>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	617b      	str	r3, [r7, #20]
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <vTaskDelayUntil+0x4a>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	613b      	str	r3, [r7, #16]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004de4 <vTaskDelayUntil+0xf4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <vTaskDelayUntil+0x6a>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60fb      	str	r3, [r7, #12]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8004d5a:	f000 f8b9 	bl	8004ed0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004d5e:	4b22      	ldr	r3, [pc, #136]	@ (8004de8 <vTaskDelayUntil+0xf8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d20b      	bcs.n	8004d90 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d211      	bcs.n	8004da6 <vTaskDelayUntil+0xb6>
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d90d      	bls.n	8004da6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8e:	e00a      	b.n	8004da6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d303      	bcc.n	8004da2 <vTaskDelayUntil+0xb2>
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d901      	bls.n	8004da6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004da2:	2301      	movs	r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fed2 	bl	8005b64 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004dc0:	f000 f894 	bl	8004eec <xTaskResumeAll>
 8004dc4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d107      	bne.n	8004ddc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004dcc:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <vTaskDelayUntil+0xfc>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ddc:	bf00      	nop
 8004dde:	3728      	adds	r7, #40	@ 0x28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000e38 	.word	0x20000e38
 8004de8:	20000e14 	.word	0x20000e14
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	@ 0x28
 8004df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dfe:	463a      	mov	r2, r7
 8004e00:	1d39      	adds	r1, r7, #4
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fa36 	bl	8003278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	9202      	str	r2, [sp, #8]
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	4924      	ldr	r1, [pc, #144]	@ (8004eb0 <vTaskStartScheduler+0xc0>)
 8004e20:	4824      	ldr	r0, [pc, #144]	@ (8004eb4 <vTaskStartScheduler+0xc4>)
 8004e22:	f7ff fda7 	bl	8004974 <xTaskCreateStatic>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4a23      	ldr	r2, [pc, #140]	@ (8004eb8 <vTaskStartScheduler+0xc8>)
 8004e2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e2c:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <vTaskStartScheduler+0xc8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e34:	2301      	movs	r3, #1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e001      	b.n	8004e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d102      	bne.n	8004e4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e44:	f000 fee2 	bl	8005c0c <xTimerCreateTimerTask>
 8004e48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d11b      	bne.n	8004e88 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
}
 8004e62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e64:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <vTaskStartScheduler+0xcc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3354      	adds	r3, #84	@ 0x54
 8004e6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <vTaskStartScheduler+0xd0>)
 8004e6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <vTaskStartScheduler+0xd4>)
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e76:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <vTaskStartScheduler+0xd8>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e7c:	4b13      	ldr	r3, [pc, #76]	@ (8004ecc <vTaskStartScheduler+0xdc>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e82:	f001 fab9 	bl	80063f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e86:	e00f      	b.n	8004ea8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d10b      	bne.n	8004ea8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <vTaskStartScheduler+0xb4>
}
 8004ea8:	bf00      	nop
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	08007c00 	.word	0x08007c00
 8004eb4:	08005661 	.word	0x08005661
 8004eb8:	20000e34 	.word	0x20000e34
 8004ebc:	2000093c 	.word	0x2000093c
 8004ec0:	2000001c 	.word	0x2000001c
 8004ec4:	20000e30 	.word	0x20000e30
 8004ec8:	20000e1c 	.word	0x20000e1c
 8004ecc:	20000e14 	.word	0x20000e14

08004ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ed4:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <vTaskSuspendAll+0x18>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	4a03      	ldr	r2, [pc, #12]	@ (8004ee8 <vTaskSuspendAll+0x18>)
 8004edc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000e38 	.word	0x20000e38

08004eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004efa:	4b42      	ldr	r3, [pc, #264]	@ (8005004 <xTaskResumeAll+0x118>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <xTaskResumeAll+0x2e>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	603b      	str	r3, [r7, #0]
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f1a:	f001 fadf 	bl	80064dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f1e:	4b39      	ldr	r3, [pc, #228]	@ (8005004 <xTaskResumeAll+0x118>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	4a37      	ldr	r2, [pc, #220]	@ (8005004 <xTaskResumeAll+0x118>)
 8004f26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f28:	4b36      	ldr	r3, [pc, #216]	@ (8005004 <xTaskResumeAll+0x118>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d162      	bne.n	8004ff6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f30:	4b35      	ldr	r3, [pc, #212]	@ (8005008 <xTaskResumeAll+0x11c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d05e      	beq.n	8004ff6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f38:	e02f      	b.n	8004f9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3a:	4b34      	ldr	r3, [pc, #208]	@ (800500c <xTaskResumeAll+0x120>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3318      	adds	r3, #24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fcc0 	bl	80038cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe fcbb 	bl	80038cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005010 <xTaskResumeAll+0x124>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d903      	bls.n	8004f6a <xTaskResumeAll+0x7e>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <xTaskResumeAll+0x124>)
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4a27      	ldr	r2, [pc, #156]	@ (8005014 <xTaskResumeAll+0x128>)
 8004f78:	441a      	add	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7fe fc48 	bl	8003816 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8a:	4b23      	ldr	r3, [pc, #140]	@ (8005018 <xTaskResumeAll+0x12c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d302      	bcc.n	8004f9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f94:	4b21      	ldr	r3, [pc, #132]	@ (800501c <xTaskResumeAll+0x130>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800500c <xTaskResumeAll+0x120>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1cb      	bne.n	8004f3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fa8:	f000 fc16 	bl	80057d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fac:	4b1c      	ldr	r3, [pc, #112]	@ (8005020 <xTaskResumeAll+0x134>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fb8:	f000 f856 	bl	8005068 <xTaskIncrementTick>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004fc2:	4b16      	ldr	r3, [pc, #88]	@ (800501c <xTaskResumeAll+0x130>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f1      	bne.n	8004fb8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004fd4:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <xTaskResumeAll+0x134>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fda:	4b10      	ldr	r3, [pc, #64]	@ (800501c <xTaskResumeAll+0x130>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8005024 <xTaskResumeAll+0x138>)
 8004fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ff6:	f001 faa1 	bl	800653c <vPortExitCritical>

	return xAlreadyYielded;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000e38 	.word	0x20000e38
 8005008:	20000e10 	.word	0x20000e10
 800500c:	20000dd0 	.word	0x20000dd0
 8005010:	20000e18 	.word	0x20000e18
 8005014:	20000940 	.word	0x20000940
 8005018:	2000093c 	.word	0x2000093c
 800501c:	20000e24 	.word	0x20000e24
 8005020:	20000e20 	.word	0x20000e20
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800502e:	4b04      	ldr	r3, [pc, #16]	@ (8005040 <xTaskGetTickCount+0x18>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005034:	687b      	ldr	r3, [r7, #4]
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	20000e14 	.word	0x20000e14

08005044 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800504a:	f001 fb09 	bl	8006660 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005052:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <xTaskGetTickCountFromISR+0x20>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005058:	683b      	ldr	r3, [r7, #0]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000e14 	.word	0x20000e14

08005068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005072:	4b4f      	ldr	r3, [pc, #316]	@ (80051b0 <xTaskIncrementTick+0x148>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f040 8090 	bne.w	800519c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800507c:	4b4d      	ldr	r3, [pc, #308]	@ (80051b4 <xTaskIncrementTick+0x14c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005084:	4a4b      	ldr	r2, [pc, #300]	@ (80051b4 <xTaskIncrementTick+0x14c>)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d121      	bne.n	80050d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005090:	4b49      	ldr	r3, [pc, #292]	@ (80051b8 <xTaskIncrementTick+0x150>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	603b      	str	r3, [r7, #0]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <xTaskIncrementTick+0x46>
 80050b2:	4b41      	ldr	r3, [pc, #260]	@ (80051b8 <xTaskIncrementTick+0x150>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	4b40      	ldr	r3, [pc, #256]	@ (80051bc <xTaskIncrementTick+0x154>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3e      	ldr	r2, [pc, #248]	@ (80051b8 <xTaskIncrementTick+0x150>)
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4a3e      	ldr	r2, [pc, #248]	@ (80051bc <xTaskIncrementTick+0x154>)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b3e      	ldr	r3, [pc, #248]	@ (80051c0 <xTaskIncrementTick+0x158>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	4a3c      	ldr	r2, [pc, #240]	@ (80051c0 <xTaskIncrementTick+0x158>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	f000 fb82 	bl	80057d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050d4:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <xTaskIncrementTick+0x15c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d349      	bcc.n	8005172 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050de:	4b36      	ldr	r3, [pc, #216]	@ (80051b8 <xTaskIncrementTick+0x150>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e8:	4b36      	ldr	r3, [pc, #216]	@ (80051c4 <xTaskIncrementTick+0x15c>)
 80050ea:	f04f 32ff 	mov.w	r2, #4294967295
 80050ee:	601a      	str	r2, [r3, #0]
					break;
 80050f0:	e03f      	b.n	8005172 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f2:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <xTaskIncrementTick+0x150>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d203      	bcs.n	8005112 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800510a:	4a2e      	ldr	r2, [pc, #184]	@ (80051c4 <xTaskIncrementTick+0x15c>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005110:	e02f      	b.n	8005172 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3304      	adds	r3, #4
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fbd8 	bl	80038cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3318      	adds	r3, #24
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fbcf 	bl	80038cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005132:	4b25      	ldr	r3, [pc, #148]	@ (80051c8 <xTaskIncrementTick+0x160>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d903      	bls.n	8005142 <xTaskIncrementTick+0xda>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	4a22      	ldr	r2, [pc, #136]	@ (80051c8 <xTaskIncrementTick+0x160>)
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4a1f      	ldr	r2, [pc, #124]	@ (80051cc <xTaskIncrementTick+0x164>)
 8005150:	441a      	add	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7fe fb5c 	bl	8003816 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005162:	4b1b      	ldr	r3, [pc, #108]	@ (80051d0 <xTaskIncrementTick+0x168>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	429a      	cmp	r2, r3
 800516a:	d3b8      	bcc.n	80050de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800516c:	2301      	movs	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005170:	e7b5      	b.n	80050de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005172:	4b17      	ldr	r3, [pc, #92]	@ (80051d0 <xTaskIncrementTick+0x168>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005178:	4914      	ldr	r1, [pc, #80]	@ (80051cc <xTaskIncrementTick+0x164>)
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d901      	bls.n	800518e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800518a:	2301      	movs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800518e:	4b11      	ldr	r3, [pc, #68]	@ (80051d4 <xTaskIncrementTick+0x16c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005196:	2301      	movs	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e004      	b.n	80051a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800519c:	4b0e      	ldr	r3, [pc, #56]	@ (80051d8 <xTaskIncrementTick+0x170>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a0d      	ldr	r2, [pc, #52]	@ (80051d8 <xTaskIncrementTick+0x170>)
 80051a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051a6:	697b      	ldr	r3, [r7, #20]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000e38 	.word	0x20000e38
 80051b4:	20000e14 	.word	0x20000e14
 80051b8:	20000dc8 	.word	0x20000dc8
 80051bc:	20000dcc 	.word	0x20000dcc
 80051c0:	20000e28 	.word	0x20000e28
 80051c4:	20000e30 	.word	0x20000e30
 80051c8:	20000e18 	.word	0x20000e18
 80051cc:	20000940 	.word	0x20000940
 80051d0:	2000093c 	.word	0x2000093c
 80051d4:	20000e24 	.word	0x20000e24
 80051d8:	20000e20 	.word	0x20000e20

080051dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051e2:	4b2a      	ldr	r3, [pc, #168]	@ (800528c <vTaskSwitchContext+0xb0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051ea:	4b29      	ldr	r3, [pc, #164]	@ (8005290 <vTaskSwitchContext+0xb4>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051f0:	e047      	b.n	8005282 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80051f2:	4b27      	ldr	r3, [pc, #156]	@ (8005290 <vTaskSwitchContext+0xb4>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f8:	4b26      	ldr	r3, [pc, #152]	@ (8005294 <vTaskSwitchContext+0xb8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e011      	b.n	8005224 <vTaskSwitchContext+0x48>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <vTaskSwitchContext+0x42>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	607b      	str	r3, [r7, #4]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <vTaskSwitchContext+0x3e>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3b01      	subs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	491c      	ldr	r1, [pc, #112]	@ (8005298 <vTaskSwitchContext+0xbc>)
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0e3      	beq.n	8005200 <vTaskSwitchContext+0x24>
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4a15      	ldr	r2, [pc, #84]	@ (8005298 <vTaskSwitchContext+0xbc>)
 8005244:	4413      	add	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	3308      	adds	r3, #8
 800525a:	429a      	cmp	r2, r3
 800525c:	d104      	bne.n	8005268 <vTaskSwitchContext+0x8c>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4a0b      	ldr	r2, [pc, #44]	@ (800529c <vTaskSwitchContext+0xc0>)
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4a08      	ldr	r2, [pc, #32]	@ (8005294 <vTaskSwitchContext+0xb8>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005278:	4b08      	ldr	r3, [pc, #32]	@ (800529c <vTaskSwitchContext+0xc0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3354      	adds	r3, #84	@ 0x54
 800527e:	4a08      	ldr	r2, [pc, #32]	@ (80052a0 <vTaskSwitchContext+0xc4>)
 8005280:	6013      	str	r3, [r2, #0]
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr
 800528c:	20000e38 	.word	0x20000e38
 8005290:	20000e24 	.word	0x20000e24
 8005294:	20000e18 	.word	0x20000e18
 8005298:	20000940 	.word	0x20000940
 800529c:	2000093c 	.word	0x2000093c
 80052a0:	2000001c 	.word	0x2000001c

080052a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	60fb      	str	r3, [r7, #12]
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052cc:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <vTaskPlaceOnEventList+0x48>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3318      	adds	r3, #24
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fe fac1 	bl	800385c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052da:	2101      	movs	r1, #1
 80052dc:	6838      	ldr	r0, [r7, #0]
 80052de:	f000 fc41 	bl	8005b64 <prvAddCurrentTaskToDelayedList>
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	2000093c 	.word	0x2000093c

080052f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	617b      	str	r3, [r7, #20]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800531a:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <vTaskPlaceOnUnorderedEventList+0x74>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	613b      	str	r3, [r7, #16]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800533a:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <vTaskPlaceOnUnorderedEventList+0x78>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005344:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005346:	4b08      	ldr	r3, [pc, #32]	@ (8005368 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3318      	adds	r3, #24
 800534c:	4619      	mov	r1, r3
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7fe fa61 	bl	8003816 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005354:	2101      	movs	r1, #1
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fc04 	bl	8005b64 <prvAddCurrentTaskToDelayedList>
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000e38 	.word	0x20000e38
 8005368:	2000093c 	.word	0x2000093c

0800536c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	617b      	str	r3, [r7, #20]
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005396:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3318      	adds	r3, #24
 800539c:	4619      	mov	r1, r3
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7fe fa39 	bl	8003816 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80053aa:	f04f 33ff 	mov.w	r3, #4294967295
 80053ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	68b8      	ldr	r0, [r7, #8]
 80053b4:	f000 fbd6 	bl	8005b64 <prvAddCurrentTaskToDelayedList>
	}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	2000093c 	.word	0x2000093c

080053c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	60fb      	str	r3, [r7, #12]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3318      	adds	r3, #24
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe fa68 	bl	80038cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <xTaskRemoveFromEventList+0xb0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11d      	bne.n	8005440 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	3304      	adds	r3, #4
 8005408:	4618      	mov	r0, r3
 800540a:	f7fe fa5f 	bl	80038cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005412:	4b19      	ldr	r3, [pc, #100]	@ (8005478 <xTaskRemoveFromEventList+0xb4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d903      	bls.n	8005422 <xTaskRemoveFromEventList+0x5e>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	4a16      	ldr	r2, [pc, #88]	@ (8005478 <xTaskRemoveFromEventList+0xb4>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a13      	ldr	r2, [pc, #76]	@ (800547c <xTaskRemoveFromEventList+0xb8>)
 8005430:	441a      	add	r2, r3
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7fe f9ec 	bl	8003816 <vListInsertEnd>
 800543e:	e005      	b.n	800544c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	3318      	adds	r3, #24
 8005444:	4619      	mov	r1, r3
 8005446:	480e      	ldr	r0, [pc, #56]	@ (8005480 <xTaskRemoveFromEventList+0xbc>)
 8005448:	f7fe f9e5 	bl	8003816 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005450:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <xTaskRemoveFromEventList+0xc0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	429a      	cmp	r2, r3
 8005458:	d905      	bls.n	8005466 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800545a:	2301      	movs	r3, #1
 800545c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800545e:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <xTaskRemoveFromEventList+0xc4>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e001      	b.n	800546a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800546a:	697b      	ldr	r3, [r7, #20]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000e38 	.word	0x20000e38
 8005478:	20000e18 	.word	0x20000e18
 800547c:	20000940 	.word	0x20000940
 8005480:	20000dd0 	.word	0x20000dd0
 8005484:	2000093c 	.word	0x2000093c
 8005488:	20000e24 	.word	0x20000e24

0800548c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005496:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	613b      	str	r3, [r7, #16]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60fb      	str	r3, [r7, #12]
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fe f9f1 	bl	80038cc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe f9ec 	bl	80038cc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f8:	4b12      	ldr	r3, [pc, #72]	@ (8005544 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d903      	bls.n	8005508 <vTaskRemoveFromUnorderedEventList+0x7c>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a0f      	ldr	r2, [pc, #60]	@ (8005544 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4a0c      	ldr	r2, [pc, #48]	@ (8005548 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005516:	441a      	add	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f7fe f979 	bl	8003816 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005528:	4b08      	ldr	r3, [pc, #32]	@ (800554c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	429a      	cmp	r2, r3
 8005530:	d902      	bls.n	8005538 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]
	}
}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000e38 	.word	0x20000e38
 8005544:	20000e18 	.word	0x20000e18
 8005548:	20000940 	.word	0x20000940
 800554c:	2000093c 	.word	0x2000093c
 8005550:	20000e24 	.word	0x20000e24

08005554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <vTaskInternalSetTimeOutState+0x24>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <vTaskInternalSetTimeOutState+0x28>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	605a      	str	r2, [r3, #4]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000e28 	.word	0x20000e28
 800557c:	20000e14 	.word	0x20000e14

08005580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60fb      	str	r3, [r7, #12]
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80055c6:	f000 ff89 	bl	80064dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <xTaskCheckForTimeOut+0xc0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d102      	bne.n	80055ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e023      	b.n	8005632 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b15      	ldr	r3, [pc, #84]	@ (8005644 <xTaskCheckForTimeOut+0xc4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d007      	beq.n	8005606 <xTaskCheckForTimeOut+0x86>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d302      	bcc.n	8005606 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e015      	b.n	8005632 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	429a      	cmp	r2, r3
 800560e:	d20b      	bcs.n	8005628 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad2      	subs	r2, r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff99 	bl	8005554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	e004      	b.n	8005632 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005632:	f000 ff83 	bl	800653c <vPortExitCritical>

	return xReturn;
 8005636:	69fb      	ldr	r3, [r7, #28]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000e14 	.word	0x20000e14
 8005644:	20000e28 	.word	0x20000e28

08005648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800564c:	4b03      	ldr	r3, [pc, #12]	@ (800565c <vTaskMissedYield+0x14>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
}
 8005652:	bf00      	nop
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000e24 	.word	0x20000e24

08005660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005668:	f000 f852 	bl	8005710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800566c:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <prvIdleTask+0x28>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d9f9      	bls.n	8005668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005674:	4b05      	ldr	r3, [pc, #20]	@ (800568c <prvIdleTask+0x2c>)
 8005676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005684:	e7f0      	b.n	8005668 <prvIdleTask+0x8>
 8005686:	bf00      	nop
 8005688:	20000940 	.word	0x20000940
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	e00c      	b.n	80056b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <prvInitialiseTaskLists+0x60>)
 80056a8:	4413      	add	r3, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe f888 	bl	80037c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3301      	adds	r3, #1
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b37      	cmp	r3, #55	@ 0x37
 80056ba:	d9ef      	bls.n	800569c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056bc:	480d      	ldr	r0, [pc, #52]	@ (80056f4 <prvInitialiseTaskLists+0x64>)
 80056be:	f7fe f87f 	bl	80037c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056c2:	480d      	ldr	r0, [pc, #52]	@ (80056f8 <prvInitialiseTaskLists+0x68>)
 80056c4:	f7fe f87c 	bl	80037c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056c8:	480c      	ldr	r0, [pc, #48]	@ (80056fc <prvInitialiseTaskLists+0x6c>)
 80056ca:	f7fe f879 	bl	80037c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056ce:	480c      	ldr	r0, [pc, #48]	@ (8005700 <prvInitialiseTaskLists+0x70>)
 80056d0:	f7fe f876 	bl	80037c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056d4:	480b      	ldr	r0, [pc, #44]	@ (8005704 <prvInitialiseTaskLists+0x74>)
 80056d6:	f7fe f873 	bl	80037c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056da:	4b0b      	ldr	r3, [pc, #44]	@ (8005708 <prvInitialiseTaskLists+0x78>)
 80056dc:	4a05      	ldr	r2, [pc, #20]	@ (80056f4 <prvInitialiseTaskLists+0x64>)
 80056de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056e0:	4b0a      	ldr	r3, [pc, #40]	@ (800570c <prvInitialiseTaskLists+0x7c>)
 80056e2:	4a05      	ldr	r2, [pc, #20]	@ (80056f8 <prvInitialiseTaskLists+0x68>)
 80056e4:	601a      	str	r2, [r3, #0]
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000940 	.word	0x20000940
 80056f4:	20000da0 	.word	0x20000da0
 80056f8:	20000db4 	.word	0x20000db4
 80056fc:	20000dd0 	.word	0x20000dd0
 8005700:	20000de4 	.word	0x20000de4
 8005704:	20000dfc 	.word	0x20000dfc
 8005708:	20000dc8 	.word	0x20000dc8
 800570c:	20000dcc 	.word	0x20000dcc

08005710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005716:	e019      	b.n	800574c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005718:	f000 fee0 	bl	80064dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571c:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <prvCheckTasksWaitingTermination+0x50>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3304      	adds	r3, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe f8cf 	bl	80038cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800572e:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <prvCheckTasksWaitingTermination+0x54>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3b01      	subs	r3, #1
 8005734:	4a0b      	ldr	r2, [pc, #44]	@ (8005764 <prvCheckTasksWaitingTermination+0x54>)
 8005736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005738:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <prvCheckTasksWaitingTermination+0x58>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3b01      	subs	r3, #1
 800573e:	4a0a      	ldr	r2, [pc, #40]	@ (8005768 <prvCheckTasksWaitingTermination+0x58>)
 8005740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005742:	f000 fefb 	bl	800653c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f810 	bl	800576c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800574c:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <prvCheckTasksWaitingTermination+0x58>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e1      	bne.n	8005718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000de4 	.word	0x20000de4
 8005764:	20000e10 	.word	0x20000e10
 8005768:	20000df8 	.word	0x20000df8

0800576c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3354      	adds	r3, #84	@ 0x54
 8005778:	4618      	mov	r0, r3
 800577a:	f001 fbbf 	bl	8006efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578c:	4618      	mov	r0, r3
 800578e:	f001 f875 	bl	800687c <vPortFree>
				vPortFree( pxTCB );
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f001 f872 	bl	800687c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005798:	e019      	b.n	80057ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d103      	bne.n	80057ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 f869 	bl	800687c <vPortFree>
	}
 80057aa:	e010      	b.n	80057ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d00b      	beq.n	80057ce <prvDeleteTCB+0x62>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60fb      	str	r3, [r7, #12]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <prvDeleteTCB+0x5e>
	}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057de:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <prvResetNextTaskUnblockTime+0x38>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <prvResetNextTaskUnblockTime+0x3c>)
 80057ea:	f04f 32ff 	mov.w	r2, #4294967295
 80057ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057f0:	e008      	b.n	8005804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f2:	4b07      	ldr	r3, [pc, #28]	@ (8005810 <prvResetNextTaskUnblockTime+0x38>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4a04      	ldr	r2, [pc, #16]	@ (8005814 <prvResetNextTaskUnblockTime+0x3c>)
 8005802:	6013      	str	r3, [r2, #0]
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000dc8 	.word	0x20000dc8
 8005814:	20000e30 	.word	0x20000e30

08005818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <xTaskGetSchedulerState+0x34>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005826:	2301      	movs	r3, #1
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	e008      	b.n	800583e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582c:	4b08      	ldr	r3, [pc, #32]	@ (8005850 <xTaskGetSchedulerState+0x38>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005834:	2302      	movs	r3, #2
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e001      	b.n	800583e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800583e:	687b      	ldr	r3, [r7, #4]
	}
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000e1c 	.word	0x20000e1c
 8005850:	20000e38 	.word	0x20000e38

08005854 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d051      	beq.n	800590e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586e:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <xTaskPriorityInherit+0xc4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d241      	bcs.n	80058fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	db06      	blt.n	800588e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005880:	4b25      	ldr	r3, [pc, #148]	@ (8005918 <xTaskPriorityInherit+0xc4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005886:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6959      	ldr	r1, [r3, #20]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4a1f      	ldr	r2, [pc, #124]	@ (800591c <xTaskPriorityInherit+0xc8>)
 80058a0:	4413      	add	r3, r2
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d122      	bne.n	80058ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe f80e 	bl	80038cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058b0:	4b19      	ldr	r3, [pc, #100]	@ (8005918 <xTaskPriorityInherit+0xc4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058be:	4b18      	ldr	r3, [pc, #96]	@ (8005920 <xTaskPriorityInherit+0xcc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d903      	bls.n	80058ce <xTaskPriorityInherit+0x7a>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	4a15      	ldr	r2, [pc, #84]	@ (8005920 <xTaskPriorityInherit+0xcc>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4a10      	ldr	r2, [pc, #64]	@ (800591c <xTaskPriorityInherit+0xc8>)
 80058dc:	441a      	add	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fd ff96 	bl	8003816 <vListInsertEnd>
 80058ea:	e004      	b.n	80058f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <xTaskPriorityInherit+0xc4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80058f6:	2301      	movs	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e008      	b.n	800590e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <xTaskPriorityInherit+0xc4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	429a      	cmp	r2, r3
 8005908:	d201      	bcs.n	800590e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800590a:	2301      	movs	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800590e:	68fb      	ldr	r3, [r7, #12]
	}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	2000093c 	.word	0x2000093c
 800591c:	20000940 	.word	0x20000940
 8005920:	20000e18 	.word	0x20000e18

08005924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d058      	beq.n	80059ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800593a:	4b2f      	ldr	r3, [pc, #188]	@ (80059f8 <xTaskPriorityDisinherit+0xd4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	429a      	cmp	r2, r3
 8005942:	d00b      	beq.n	800595c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	60fb      	str	r3, [r7, #12]
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	60bb      	str	r3, [r7, #8]
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005980:	1e5a      	subs	r2, r3, #1
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598e:	429a      	cmp	r2, r3
 8005990:	d02c      	beq.n	80059ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005996:	2b00      	cmp	r3, #0
 8005998:	d128      	bne.n	80059ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fd ff94 	bl	80038cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059bc:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <xTaskPriorityDisinherit+0xd8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d903      	bls.n	80059cc <xTaskPriorityDisinherit+0xa8>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4a0c      	ldr	r2, [pc, #48]	@ (80059fc <xTaskPriorityDisinherit+0xd8>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <xTaskPriorityDisinherit+0xdc>)
 80059da:	441a      	add	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fd ff17 	bl	8003816 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059ec:	697b      	ldr	r3, [r7, #20]
	}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	2000093c 	.word	0x2000093c
 80059fc:	20000e18 	.word	0x20000e18
 8005a00:	20000940 	.word	0x20000940

08005a04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d06c      	beq.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	60fb      	str	r3, [r7, #12]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d902      	bls.n	8005a4c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	e002      	b.n	8005a52 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d04c      	beq.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d147      	bne.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a66:	4b26      	ldr	r3, [pc, #152]	@ (8005b00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d10b      	bne.n	8005a88 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	60bb      	str	r3, [r7, #8]
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	e7fd      	b.n	8005a84 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	db04      	blt.n	8005aa6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	6959      	ldr	r1, [r3, #20]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4a13      	ldr	r2, [pc, #76]	@ (8005b04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ab6:	4413      	add	r3, r2
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d11c      	bne.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fd ff03 	bl	80038cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d903      	bls.n	8005ada <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8005b08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4a07      	ldr	r2, [pc, #28]	@ (8005b04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ae8:	441a      	add	r2, r3
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fd fe90 	bl	8003816 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005af6:	bf00      	nop
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2000093c 	.word	0x2000093c
 8005b04:	20000940 	.word	0x20000940
 8005b08:	20000e18 	.word	0x20000e18

08005b0c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005b12:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <uxTaskResetEventItemValue+0x2c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1a:	4b07      	ldr	r3, [pc, #28]	@ (8005b38 <uxTaskResetEventItemValue+0x2c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b20:	4b05      	ldr	r3, [pc, #20]	@ (8005b38 <uxTaskResetEventItemValue+0x2c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005b28:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005b2a:	687b      	ldr	r3, [r7, #4]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	2000093c 	.word	0x2000093c

08005b3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b40:	4b07      	ldr	r3, [pc, #28]	@ (8005b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b48:	4b05      	ldr	r3, [pc, #20]	@ (8005b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b4e:	3201      	adds	r2, #1
 8005b50:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005b52:	4b03      	ldr	r3, [pc, #12]	@ (8005b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b54:	681b      	ldr	r3, [r3, #0]
	}
 8005b56:	4618      	mov	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	2000093c 	.word	0x2000093c

08005b64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b6e:	4b21      	ldr	r3, [pc, #132]	@ (8005bf4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b74:	4b20      	ldr	r3, [pc, #128]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd fea6 	bl	80038cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d10a      	bne.n	8005b9e <prvAddCurrentTaskToDelayedList+0x3a>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4819      	ldr	r0, [pc, #100]	@ (8005bfc <prvAddCurrentTaskToDelayedList+0x98>)
 8005b98:	f7fd fe3d 	bl	8003816 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b9c:	e026      	b.n	8005bec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ba6:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d209      	bcs.n	8005bca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb6:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f7fd fe4a 	bl	800385c <vListInsert>
}
 8005bc8:	e010      	b.n	8005bec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bca:	4b0e      	ldr	r3, [pc, #56]	@ (8005c04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f7fd fe40 	bl	800385c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d202      	bcs.n	8005bec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005be6:	4a08      	ldr	r2, [pc, #32]	@ (8005c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000e14 	.word	0x20000e14
 8005bf8:	2000093c 	.word	0x2000093c
 8005bfc:	20000dfc 	.word	0x20000dfc
 8005c00:	20000dcc 	.word	0x20000dcc
 8005c04:	20000dc8 	.word	0x20000dc8
 8005c08:	20000e30 	.word	0x20000e30

08005c0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	@ 0x28
 8005c10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c16:	f000 fb11 	bl	800623c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <xTimerCreateTimerTask+0x84>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d021      	beq.n	8005c66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c2a:	1d3a      	adds	r2, r7, #4
 8005c2c:	f107 0108 	add.w	r1, r7, #8
 8005c30:	f107 030c 	add.w	r3, r7, #12
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fd fb37 	bl	80032a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	9202      	str	r2, [sp, #8]
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	2302      	movs	r3, #2
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	4911      	ldr	r1, [pc, #68]	@ (8005c94 <xTimerCreateTimerTask+0x88>)
 8005c4e:	4812      	ldr	r0, [pc, #72]	@ (8005c98 <xTimerCreateTimerTask+0x8c>)
 8005c50:	f7fe fe90 	bl	8004974 <xTaskCreateStatic>
 8005c54:	4603      	mov	r3, r0
 8005c56:	4a11      	ldr	r2, [pc, #68]	@ (8005c9c <xTimerCreateTimerTask+0x90>)
 8005c58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c5a:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <xTimerCreateTimerTask+0x90>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c62:	2301      	movs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	613b      	str	r3, [r7, #16]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c84:	697b      	ldr	r3, [r7, #20]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000e6c 	.word	0x20000e6c
 8005c94:	08007c08 	.word	0x08007c08
 8005c98:	08005dd9 	.word	0x08005dd9
 8005c9c:	20000e70 	.word	0x20000e70

08005ca0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	@ 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10b      	bne.n	8005cd0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	623b      	str	r3, [r7, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cd0:	4b19      	ldr	r3, [pc, #100]	@ (8005d38 <xTimerGenericCommand+0x98>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d02a      	beq.n	8005d2e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	dc18      	bgt.n	8005d1c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cea:	f7ff fd95 	bl	8005818 <xTaskGetSchedulerState>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d109      	bne.n	8005d08 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cf4:	4b10      	ldr	r3, [pc, #64]	@ (8005d38 <xTimerGenericCommand+0x98>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	f107 0110 	add.w	r1, r7, #16
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d00:	f7fd ffc2 	bl	8003c88 <xQueueGenericSend>
 8005d04:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d06:	e012      	b.n	8005d2e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <xTimerGenericCommand+0x98>)
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	f107 0110 	add.w	r1, r7, #16
 8005d10:	2300      	movs	r3, #0
 8005d12:	2200      	movs	r2, #0
 8005d14:	f7fd ffb8 	bl	8003c88 <xQueueGenericSend>
 8005d18:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d1a:	e008      	b.n	8005d2e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d1c:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <xTimerGenericCommand+0x98>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	f107 0110 	add.w	r1, r7, #16
 8005d24:	2300      	movs	r3, #0
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	f7fe f8b0 	bl	8003e8c <xQueueGenericSendFromISR>
 8005d2c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3728      	adds	r7, #40	@ 0x28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000e6c 	.word	0x20000e6c

08005d3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d46:	4b23      	ldr	r3, [pc, #140]	@ (8005dd4 <prvProcessExpiredTimer+0x98>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fd fdb9 	bl	80038cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d023      	beq.n	8005db0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	18d1      	adds	r1, r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	f000 f8d3 	bl	8005f20 <prvInsertTimerInActiveList>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d80:	2300      	movs	r3, #0
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2300      	movs	r3, #0
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	6978      	ldr	r0, [r7, #20]
 8005d8c:	f7ff ff88 	bl	8005ca0 <xTimerGenericCommand>
 8005d90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d114      	bne.n	8005dc2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60fb      	str	r3, [r7, #12]
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	4798      	blx	r3
}
 8005dca:	bf00      	nop
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000e64 	.word	0x20000e64

08005dd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005de0:	f107 0308 	add.w	r3, r7, #8
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f859 	bl	8005e9c <prvGetNextExpireTime>
 8005dea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4619      	mov	r1, r3
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f805 	bl	8005e00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005df6:	f000 f8d5 	bl	8005fa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dfa:	bf00      	nop
 8005dfc:	e7f0      	b.n	8005de0 <prvTimerTask+0x8>
	...

08005e00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e0a:	f7ff f861 	bl	8004ed0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e0e:	f107 0308 	add.w	r3, r7, #8
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 f864 	bl	8005ee0 <prvSampleTimeNow>
 8005e18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d130      	bne.n	8005e82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <prvProcessTimerOrBlockTask+0x3c>
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d806      	bhi.n	8005e3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e2e:	f7ff f85d 	bl	8004eec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff81 	bl	8005d3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e3a:	e024      	b.n	8005e86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e42:	4b13      	ldr	r3, [pc, #76]	@ (8005e90 <prvProcessTimerOrBlockTask+0x90>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <prvProcessTimerOrBlockTask+0x50>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <prvProcessTimerOrBlockTask+0x52>
 8005e50:	2300      	movs	r3, #0
 8005e52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e54:	4b0f      	ldr	r3, [pc, #60]	@ (8005e94 <prvProcessTimerOrBlockTask+0x94>)
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4619      	mov	r1, r3
 8005e62:	f7fe fd53 	bl	800490c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e66:	f7ff f841 	bl	8004eec <xTaskResumeAll>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e70:	4b09      	ldr	r3, [pc, #36]	@ (8005e98 <prvProcessTimerOrBlockTask+0x98>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
}
 8005e80:	e001      	b.n	8005e86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e82:	f7ff f833 	bl	8004eec <xTaskResumeAll>
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000e68 	.word	0x20000e68
 8005e94:	20000e6c 	.word	0x20000e6c
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <prvGetNextExpireTime+0x40>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <prvGetNextExpireTime+0x16>
 8005eae:	2201      	movs	r2, #1
 8005eb0:	e000      	b.n	8005eb4 <prvGetNextExpireTime+0x18>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d105      	bne.n	8005ecc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <prvGetNextExpireTime+0x40>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e001      	b.n	8005ed0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	20000e64 	.word	0x20000e64

08005ee0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ee8:	f7ff f89e 	bl	8005028 <xTaskGetTickCount>
 8005eec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eee:	4b0b      	ldr	r3, [pc, #44]	@ (8005f1c <prvSampleTimeNow+0x3c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d205      	bcs.n	8005f04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ef8:	f000 f93a 	bl	8006170 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e002      	b.n	8005f0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f0a:	4a04      	ldr	r2, [pc, #16]	@ (8005f1c <prvSampleTimeNow+0x3c>)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f10:	68fb      	ldr	r3, [r7, #12]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000e74 	.word	0x20000e74

08005f20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d812      	bhi.n	8005f6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d302      	bcc.n	8005f5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e01b      	b.n	8005f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f5a:	4b10      	ldr	r3, [pc, #64]	@ (8005f9c <prvInsertTimerInActiveList+0x7c>)
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f7fd fc79 	bl	800385c <vListInsert>
 8005f6a:	e012      	b.n	8005f92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d206      	bcs.n	8005f82 <prvInsertTimerInActiveList+0x62>
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d302      	bcc.n	8005f82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e007      	b.n	8005f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f82:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <prvInsertTimerInActiveList+0x80>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fd fc65 	bl	800385c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f92:	697b      	ldr	r3, [r7, #20]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000e68 	.word	0x20000e68
 8005fa0:	20000e64 	.word	0x20000e64

08005fa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08e      	sub	sp, #56	@ 0x38
 8005fa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005faa:	e0ce      	b.n	800614a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da19      	bge.n	8005fe6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	61fb      	str	r3, [r7, #28]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fdc:	6850      	ldr	r0, [r2, #4]
 8005fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe0:	6892      	ldr	r2, [r2, #8]
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f2c0 80ae 	blt.w	800614a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd fc64 	bl	80038cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006004:	463b      	mov	r3, r7
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff ff6a 	bl	8005ee0 <prvSampleTimeNow>
 800600c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b09      	cmp	r3, #9
 8006012:	f200 8097 	bhi.w	8006144 <prvProcessReceivedCommands+0x1a0>
 8006016:	a201      	add	r2, pc, #4	@ (adr r2, 800601c <prvProcessReceivedCommands+0x78>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006045 	.word	0x08006045
 8006020:	08006045 	.word	0x08006045
 8006024:	08006045 	.word	0x08006045
 8006028:	080060bb 	.word	0x080060bb
 800602c:	080060cf 	.word	0x080060cf
 8006030:	0800611b 	.word	0x0800611b
 8006034:	08006045 	.word	0x08006045
 8006038:	08006045 	.word	0x08006045
 800603c:	080060bb 	.word	0x080060bb
 8006040:	080060cf 	.word	0x080060cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	b2da      	uxtb	r2, r3
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	18d1      	adds	r1, r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006064:	f7ff ff5c 	bl	8005f20 <prvInsertTimerInActiveList>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d06c      	beq.n	8006148 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006074:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d061      	beq.n	8006148 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	441a      	add	r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	2300      	movs	r3, #0
 8006092:	2100      	movs	r1, #0
 8006094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006096:	f7ff fe03 	bl	8005ca0 <xTimerGenericCommand>
 800609a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d152      	bne.n	8006148 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	61bb      	str	r3, [r7, #24]
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	e7fd      	b.n	80060b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060cc:	e03d      	b.n	800614a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	617b      	str	r3, [r7, #20]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	18d1      	adds	r1, r2, r3
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006114:	f7ff ff04 	bl	8005f20 <prvInsertTimerInActiveList>
					break;
 8006118:	e017      	b.n	800614a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800612a:	f000 fba7 	bl	800687c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800612e:	e00c      	b.n	800614a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006142:	e002      	b.n	800614a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006144:	bf00      	nop
 8006146:	e000      	b.n	800614a <prvProcessReceivedCommands+0x1a6>
					break;
 8006148:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800614a:	4b08      	ldr	r3, [pc, #32]	@ (800616c <prvProcessReceivedCommands+0x1c8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1d39      	adds	r1, r7, #4
 8006150:	2200      	movs	r2, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd ffc8 	bl	80040e8 <xQueueReceive>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	f47f af26 	bne.w	8005fac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3730      	adds	r7, #48	@ 0x30
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000e6c 	.word	0x20000e6c

08006170 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006176:	e049      	b.n	800620c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006178:	4b2e      	ldr	r3, [pc, #184]	@ (8006234 <prvSwitchTimerLists+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006182:	4b2c      	ldr	r3, [pc, #176]	@ (8006234 <prvSwitchTimerLists+0xc4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3304      	adds	r3, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f7fd fb9b 	bl	80038cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02f      	beq.n	800620c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4413      	add	r3, r2
 80061b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d90e      	bls.n	80061dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006234 <prvSwitchTimerLists+0xc4>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7fd fb41 	bl	800385c <vListInsert>
 80061da:	e017      	b.n	800620c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061dc:	2300      	movs	r3, #0
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	2300      	movs	r3, #0
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	2100      	movs	r1, #0
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff fd5a 	bl	8005ca0 <xTimerGenericCommand>
 80061ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	603b      	str	r3, [r7, #0]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800620c:	4b09      	ldr	r3, [pc, #36]	@ (8006234 <prvSwitchTimerLists+0xc4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1b0      	bne.n	8006178 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006216:	4b07      	ldr	r3, [pc, #28]	@ (8006234 <prvSwitchTimerLists+0xc4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800621c:	4b06      	ldr	r3, [pc, #24]	@ (8006238 <prvSwitchTimerLists+0xc8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a04      	ldr	r2, [pc, #16]	@ (8006234 <prvSwitchTimerLists+0xc4>)
 8006222:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006224:	4a04      	ldr	r2, [pc, #16]	@ (8006238 <prvSwitchTimerLists+0xc8>)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	6013      	str	r3, [r2, #0]
}
 800622a:	bf00      	nop
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000e64 	.word	0x20000e64
 8006238:	20000e68 	.word	0x20000e68

0800623c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006242:	f000 f94b 	bl	80064dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006246:	4b15      	ldr	r3, [pc, #84]	@ (800629c <prvCheckForValidListAndQueue+0x60>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d120      	bne.n	8006290 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800624e:	4814      	ldr	r0, [pc, #80]	@ (80062a0 <prvCheckForValidListAndQueue+0x64>)
 8006250:	f7fd fab6 	bl	80037c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006254:	4813      	ldr	r0, [pc, #76]	@ (80062a4 <prvCheckForValidListAndQueue+0x68>)
 8006256:	f7fd fab3 	bl	80037c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800625a:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <prvCheckForValidListAndQueue+0x6c>)
 800625c:	4a10      	ldr	r2, [pc, #64]	@ (80062a0 <prvCheckForValidListAndQueue+0x64>)
 800625e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006260:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <prvCheckForValidListAndQueue+0x70>)
 8006262:	4a10      	ldr	r2, [pc, #64]	@ (80062a4 <prvCheckForValidListAndQueue+0x68>)
 8006264:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <prvCheckForValidListAndQueue+0x74>)
 800626c:	4a11      	ldr	r2, [pc, #68]	@ (80062b4 <prvCheckForValidListAndQueue+0x78>)
 800626e:	2110      	movs	r1, #16
 8006270:	200a      	movs	r0, #10
 8006272:	f7fd fbbf 	bl	80039f4 <xQueueGenericCreateStatic>
 8006276:	4603      	mov	r3, r0
 8006278:	4a08      	ldr	r2, [pc, #32]	@ (800629c <prvCheckForValidListAndQueue+0x60>)
 800627a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800627c:	4b07      	ldr	r3, [pc, #28]	@ (800629c <prvCheckForValidListAndQueue+0x60>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006284:	4b05      	ldr	r3, [pc, #20]	@ (800629c <prvCheckForValidListAndQueue+0x60>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	490b      	ldr	r1, [pc, #44]	@ (80062b8 <prvCheckForValidListAndQueue+0x7c>)
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe faec 	bl	8004868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006290:	f000 f954 	bl	800653c <vPortExitCritical>
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000e6c 	.word	0x20000e6c
 80062a0:	20000e3c 	.word	0x20000e3c
 80062a4:	20000e50 	.word	0x20000e50
 80062a8:	20000e64 	.word	0x20000e64
 80062ac:	20000e68 	.word	0x20000e68
 80062b0:	20000f18 	.word	0x20000f18
 80062b4:	20000e78 	.word	0x20000e78
 80062b8:	08007c10 	.word	0x08007c10

080062bc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	@ 0x28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80062ca:	f06f 0301 	mvn.w	r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062dc:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <xTimerPendFunctionCallFromISR+0x3c>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	f107 0114 	add.w	r1, r7, #20
 80062e4:	2300      	movs	r3, #0
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	f7fd fdd0 	bl	8003e8c <xQueueGenericSendFromISR>
 80062ec:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3728      	adds	r7, #40	@ 0x28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000e6c 	.word	0x20000e6c

080062fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3b04      	subs	r3, #4
 800630c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3b04      	subs	r3, #4
 800631a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3b04      	subs	r3, #4
 800632a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800632c:	4a08      	ldr	r2, [pc, #32]	@ (8006350 <pxPortInitialiseStack+0x54>)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3b14      	subs	r3, #20
 8006336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3b20      	subs	r3, #32
 8006342:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr
 8006350:	08006355 	.word	0x08006355

08006354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800635e:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <prvTaskExitError+0x54>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d00b      	beq.n	8006380 <prvTaskExitError+0x2c>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	60fb      	str	r3, [r7, #12]
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <prvTaskExitError+0x28>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60bb      	str	r3, [r7, #8]
}
 8006392:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006394:	bf00      	nop
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0fc      	beq.n	8006396 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr
 80063a8:	2000000c 	.word	0x2000000c
 80063ac:	00000000 	.word	0x00000000

080063b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063b0:	4b07      	ldr	r3, [pc, #28]	@ (80063d0 <pxCurrentTCBConst2>)
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063ba:	f380 8809 	msr	PSP, r0
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8811 	msr	BASEPRI, r0
 80063ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80063ce:	4770      	bx	lr

080063d0 <pxCurrentTCBConst2>:
 80063d0:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80063d8:	4806      	ldr	r0, [pc, #24]	@ (80063f4 <prvPortStartFirstTask+0x1c>)
 80063da:	6800      	ldr	r0, [r0, #0]
 80063dc:	6800      	ldr	r0, [r0, #0]
 80063de:	f380 8808 	msr	MSP, r0
 80063e2:	b662      	cpsie	i
 80063e4:	b661      	cpsie	f
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	df00      	svc	0
 80063f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063f2:	bf00      	nop
 80063f4:	e000ed08 	.word	0xe000ed08

080063f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063fe:	4b32      	ldr	r3, [pc, #200]	@ (80064c8 <xPortStartScheduler+0xd0>)
 8006400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	@ 0xff
 800640e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006420:	b2da      	uxtb	r2, r3
 8006422:	4b2a      	ldr	r3, [pc, #168]	@ (80064cc <xPortStartScheduler+0xd4>)
 8006424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006426:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <xPortStartScheduler+0xd8>)
 8006428:	2207      	movs	r2, #7
 800642a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800642c:	e009      	b.n	8006442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800642e:	4b28      	ldr	r3, [pc, #160]	@ (80064d0 <xPortStartScheduler+0xd8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3b01      	subs	r3, #1
 8006434:	4a26      	ldr	r2, [pc, #152]	@ (80064d0 <xPortStartScheduler+0xd8>)
 8006436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644a:	2b80      	cmp	r3, #128	@ 0x80
 800644c:	d0ef      	beq.n	800642e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800644e:	4b20      	ldr	r3, [pc, #128]	@ (80064d0 <xPortStartScheduler+0xd8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1c3 0307 	rsb	r3, r3, #7
 8006456:	2b04      	cmp	r3, #4
 8006458:	d00b      	beq.n	8006472 <xPortStartScheduler+0x7a>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006472:	4b17      	ldr	r3, [pc, #92]	@ (80064d0 <xPortStartScheduler+0xd8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	4a15      	ldr	r2, [pc, #84]	@ (80064d0 <xPortStartScheduler+0xd8>)
 800647a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800647c:	4b14      	ldr	r3, [pc, #80]	@ (80064d0 <xPortStartScheduler+0xd8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006484:	4a12      	ldr	r2, [pc, #72]	@ (80064d0 <xPortStartScheduler+0xd8>)
 8006486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006490:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <xPortStartScheduler+0xdc>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0f      	ldr	r2, [pc, #60]	@ (80064d4 <xPortStartScheduler+0xdc>)
 8006496:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800649a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800649c:	4b0d      	ldr	r3, [pc, #52]	@ (80064d4 <xPortStartScheduler+0xdc>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0c      	ldr	r2, [pc, #48]	@ (80064d4 <xPortStartScheduler+0xdc>)
 80064a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064a8:	f000 f8b8 	bl	800661c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	@ (80064d8 <xPortStartScheduler+0xe0>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064b2:	f7ff ff91 	bl	80063d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064b6:	f7fe fe91 	bl	80051dc <vTaskSwitchContext>
	prvTaskExitError();
 80064ba:	f7ff ff4b 	bl	8006354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	e000e400 	.word	0xe000e400
 80064cc:	20000f68 	.word	0x20000f68
 80064d0:	20000f6c 	.word	0x20000f6c
 80064d4:	e000ed20 	.word	0xe000ed20
 80064d8:	2000000c 	.word	0x2000000c

080064dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	607b      	str	r3, [r7, #4]
}
 80064f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006534 <vPortEnterCritical+0x58>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3301      	adds	r3, #1
 80064fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006534 <vPortEnterCritical+0x58>)
 80064fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006500:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <vPortEnterCritical+0x58>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d110      	bne.n	800652a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006508:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <vPortEnterCritical+0x5c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <vPortEnterCritical+0x4e>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	603b      	str	r3, [r7, #0]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <vPortEnterCritical+0x4a>
	}
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	2000000c 	.word	0x2000000c
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006542:	4b12      	ldr	r3, [pc, #72]	@ (800658c <vPortExitCritical+0x50>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <vPortExitCritical+0x26>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	607b      	str	r3, [r7, #4]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006562:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <vPortExitCritical+0x50>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3b01      	subs	r3, #1
 8006568:	4a08      	ldr	r2, [pc, #32]	@ (800658c <vPortExitCritical+0x50>)
 800656a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800656c:	4b07      	ldr	r3, [pc, #28]	@ (800658c <vPortExitCritical+0x50>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <vPortExitCritical+0x44>
 8006574:	2300      	movs	r3, #0
 8006576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f383 8811 	msr	BASEPRI, r3
}
 800657e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	2000000c 	.word	0x2000000c

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065a0:	6010      	str	r0, [r2, #0]
 80065a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80065a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065aa:	f380 8811 	msr	BASEPRI, r0
 80065ae:	f7fe fe15 	bl	80051dc <vTaskSwitchContext>
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8811 	msr	BASEPRI, r0
 80065ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	6808      	ldr	r0, [r1, #0]
 80065c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065c6:	f380 8809 	msr	PSP, r0
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	4770      	bx	lr

080065d0 <pxCurrentTCBConst>:
 80065d0:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	607b      	str	r3, [r7, #4]
}
 80065f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065f2:	f7fe fd39 	bl	8005068 <xTaskIncrementTick>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065fc:	4b06      	ldr	r3, [pc, #24]	@ (8006618 <xPortSysTickHandler+0x40>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	f383 8811 	msr	BASEPRI, r3
}
 800660e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006620:	4b0a      	ldr	r3, [pc, #40]	@ (800664c <vPortSetupTimerInterrupt+0x30>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006626:	4b0a      	ldr	r3, [pc, #40]	@ (8006650 <vPortSetupTimerInterrupt+0x34>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800662c:	4b09      	ldr	r3, [pc, #36]	@ (8006654 <vPortSetupTimerInterrupt+0x38>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a09      	ldr	r2, [pc, #36]	@ (8006658 <vPortSetupTimerInterrupt+0x3c>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	099b      	lsrs	r3, r3, #6
 8006638:	4a08      	ldr	r2, [pc, #32]	@ (800665c <vPortSetupTimerInterrupt+0x40>)
 800663a:	3b01      	subs	r3, #1
 800663c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800663e:	4b03      	ldr	r3, [pc, #12]	@ (800664c <vPortSetupTimerInterrupt+0x30>)
 8006640:	2207      	movs	r2, #7
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	e000e010 	.word	0xe000e010
 8006650:	e000e018 	.word	0xe000e018
 8006654:	20000000 	.word	0x20000000
 8006658:	10624dd3 	.word	0x10624dd3
 800665c:	e000e014 	.word	0xe000e014

08006660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006666:	f3ef 8305 	mrs	r3, IPSR
 800666a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b0f      	cmp	r3, #15
 8006670:	d915      	bls.n	800669e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006672:	4a17      	ldr	r2, [pc, #92]	@ (80066d0 <vPortValidateInterruptPriority+0x70>)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800667c:	4b15      	ldr	r3, [pc, #84]	@ (80066d4 <vPortValidateInterruptPriority+0x74>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	7afa      	ldrb	r2, [r7, #11]
 8006682:	429a      	cmp	r2, r3
 8006684:	d20b      	bcs.n	800669e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	607b      	str	r3, [r7, #4]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800669e:	4b0e      	ldr	r3, [pc, #56]	@ (80066d8 <vPortValidateInterruptPriority+0x78>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066a6:	4b0d      	ldr	r3, [pc, #52]	@ (80066dc <vPortValidateInterruptPriority+0x7c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d90b      	bls.n	80066c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	603b      	str	r3, [r7, #0]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <vPortValidateInterruptPriority+0x62>
	}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr
 80066d0:	e000e3f0 	.word	0xe000e3f0
 80066d4:	20000f68 	.word	0x20000f68
 80066d8:	e000ed0c 	.word	0xe000ed0c
 80066dc:	20000f6c 	.word	0x20000f6c

080066e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	@ 0x28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066ec:	f7fe fbf0 	bl	8004ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066f0:	4b5c      	ldr	r3, [pc, #368]	@ (8006864 <pvPortMalloc+0x184>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f8:	f000 f924 	bl	8006944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006868 <pvPortMalloc+0x188>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4013      	ands	r3, r2
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8095 	bne.w	8006834 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006710:	2208      	movs	r2, #8
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4413      	add	r3, r2
 8006716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b00      	cmp	r3, #0
 8006720:	d015      	beq.n	800674e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f023 0307 	bic.w	r3, r3, #7
 8006728:	3308      	adds	r3, #8
 800672a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <pvPortMalloc+0x6e>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	617b      	str	r3, [r7, #20]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d06f      	beq.n	8006834 <pvPortMalloc+0x154>
 8006754:	4b45      	ldr	r3, [pc, #276]	@ (800686c <pvPortMalloc+0x18c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	429a      	cmp	r2, r3
 800675c:	d86a      	bhi.n	8006834 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800675e:	4b44      	ldr	r3, [pc, #272]	@ (8006870 <pvPortMalloc+0x190>)
 8006760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006762:	4b43      	ldr	r3, [pc, #268]	@ (8006870 <pvPortMalloc+0x190>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006768:	e004      	b.n	8006774 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d903      	bls.n	8006786 <pvPortMalloc+0xa6>
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f1      	bne.n	800676a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006786:	4b37      	ldr	r3, [pc, #220]	@ (8006864 <pvPortMalloc+0x184>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678c:	429a      	cmp	r2, r3
 800678e:	d051      	beq.n	8006834 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2208      	movs	r2, #8
 8006796:	4413      	add	r3, r2
 8006798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	1ad2      	subs	r2, r2, r3
 80067aa:	2308      	movs	r3, #8
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d920      	bls.n	80067f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4413      	add	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <pvPortMalloc+0xfc>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	613b      	str	r3, [r7, #16]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067ee:	69b8      	ldr	r0, [r7, #24]
 80067f0:	f000 f90a 	bl	8006a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067f4:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <pvPortMalloc+0x18c>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	4a1b      	ldr	r2, [pc, #108]	@ (800686c <pvPortMalloc+0x18c>)
 8006800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006802:	4b1a      	ldr	r3, [pc, #104]	@ (800686c <pvPortMalloc+0x18c>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b1b      	ldr	r3, [pc, #108]	@ (8006874 <pvPortMalloc+0x194>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d203      	bcs.n	8006816 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800680e:	4b17      	ldr	r3, [pc, #92]	@ (800686c <pvPortMalloc+0x18c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a18      	ldr	r2, [pc, #96]	@ (8006874 <pvPortMalloc+0x194>)
 8006814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <pvPortMalloc+0x188>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	431a      	orrs	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800682a:	4b13      	ldr	r3, [pc, #76]	@ (8006878 <pvPortMalloc+0x198>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3301      	adds	r3, #1
 8006830:	4a11      	ldr	r2, [pc, #68]	@ (8006878 <pvPortMalloc+0x198>)
 8006832:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006834:	f7fe fb5a 	bl	8004eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00b      	beq.n	800685a <pvPortMalloc+0x17a>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60fb      	str	r3, [r7, #12]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <pvPortMalloc+0x176>
	return pvReturn;
 800685a:	69fb      	ldr	r3, [r7, #28]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3728      	adds	r7, #40	@ 0x28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20001b78 	.word	0x20001b78
 8006868:	20001b8c 	.word	0x20001b8c
 800686c:	20001b7c 	.word	0x20001b7c
 8006870:	20001b70 	.word	0x20001b70
 8006874:	20001b80 	.word	0x20001b80
 8006878:	20001b84 	.word	0x20001b84

0800687c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d04f      	beq.n	800692e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800688e:	2308      	movs	r3, #8
 8006890:	425b      	negs	r3, r3
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4413      	add	r3, r2
 8006896:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	4b25      	ldr	r3, [pc, #148]	@ (8006938 <vPortFree+0xbc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4013      	ands	r3, r2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10b      	bne.n	80068c2 <vPortFree+0x46>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	60fb      	str	r3, [r7, #12]
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	e7fd      	b.n	80068be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <vPortFree+0x66>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	60bb      	str	r3, [r7, #8]
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	e7fd      	b.n	80068de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4b14      	ldr	r3, [pc, #80]	@ (8006938 <vPortFree+0xbc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01e      	beq.n	800692e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d11a      	bne.n	800692e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006938 <vPortFree+0xbc>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006908:	f7fe fae2 	bl	8004ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <vPortFree+0xc0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4413      	add	r3, r2
 8006916:	4a09      	ldr	r2, [pc, #36]	@ (800693c <vPortFree+0xc0>)
 8006918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800691a:	6938      	ldr	r0, [r7, #16]
 800691c:	f000 f874 	bl	8006a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006920:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <vPortFree+0xc4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	4a06      	ldr	r2, [pc, #24]	@ (8006940 <vPortFree+0xc4>)
 8006928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800692a:	f7fe fadf 	bl	8004eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800692e:	bf00      	nop
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20001b8c 	.word	0x20001b8c
 800693c:	20001b7c 	.word	0x20001b7c
 8006940:	20001b88 	.word	0x20001b88

08006944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800694a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800694e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006950:	4b27      	ldr	r3, [pc, #156]	@ (80069f0 <prvHeapInit+0xac>)
 8006952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3307      	adds	r3, #7
 8006962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0307 	bic.w	r3, r3, #7
 800696a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	4a1f      	ldr	r2, [pc, #124]	@ (80069f0 <prvHeapInit+0xac>)
 8006974:	4413      	add	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800697c:	4a1d      	ldr	r2, [pc, #116]	@ (80069f4 <prvHeapInit+0xb0>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006982:	4b1c      	ldr	r3, [pc, #112]	@ (80069f4 <prvHeapInit+0xb0>)
 8006984:	2200      	movs	r2, #0
 8006986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4413      	add	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006990:	2208      	movs	r2, #8
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0307 	bic.w	r3, r3, #7
 800699e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4a15      	ldr	r2, [pc, #84]	@ (80069f8 <prvHeapInit+0xb4>)
 80069a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069a6:	4b14      	ldr	r3, [pc, #80]	@ (80069f8 <prvHeapInit+0xb4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ae:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <prvHeapInit+0xb4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069c4:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <prvHeapInit+0xb4>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a0a      	ldr	r2, [pc, #40]	@ (80069fc <prvHeapInit+0xb8>)
 80069d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4a09      	ldr	r2, [pc, #36]	@ (8006a00 <prvHeapInit+0xbc>)
 80069da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069dc:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <prvHeapInit+0xc0>)
 80069de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069e2:	601a      	str	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000f70 	.word	0x20000f70
 80069f4:	20001b70 	.word	0x20001b70
 80069f8:	20001b78 	.word	0x20001b78
 80069fc:	20001b80 	.word	0x20001b80
 8006a00:	20001b7c 	.word	0x20001b7c
 8006a04:	20001b8c 	.word	0x20001b8c

08006a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a10:	4b27      	ldr	r3, [pc, #156]	@ (8006ab0 <prvInsertBlockIntoFreeList+0xa8>)
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e002      	b.n	8006a1c <prvInsertBlockIntoFreeList+0x14>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d8f7      	bhi.n	8006a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	4413      	add	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d108      	bne.n	8006a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	441a      	add	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	441a      	add	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d118      	bne.n	8006a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b14      	ldr	r3, [pc, #80]	@ (8006ab4 <prvInsertBlockIntoFreeList+0xac>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d00d      	beq.n	8006a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e008      	b.n	8006a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a86:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <prvInsertBlockIntoFreeList+0xac>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e003      	b.n	8006a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d002      	beq.n	8006aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr
 8006ab0:	20001b70 	.word	0x20001b70
 8006ab4:	20001b78 	.word	0x20001b78

08006ab8 <std>:
 8006ab8:	2300      	movs	r3, #0
 8006aba:	b510      	push	{r4, lr}
 8006abc:	4604      	mov	r4, r0
 8006abe:	e9c0 3300 	strd	r3, r3, [r0]
 8006ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ac6:	6083      	str	r3, [r0, #8]
 8006ac8:	8181      	strh	r1, [r0, #12]
 8006aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006acc:	81c2      	strh	r2, [r0, #14]
 8006ace:	6183      	str	r3, [r0, #24]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	305c      	adds	r0, #92	@ 0x5c
 8006ad6:	f000 f9f9 	bl	8006ecc <memset>
 8006ada:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <std+0x58>)
 8006adc:	6224      	str	r4, [r4, #32]
 8006ade:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8006b14 <std+0x5c>)
 8006ae2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <std+0x60>)
 8006ae6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <std+0x64>)
 8006aea:	6323      	str	r3, [r4, #48]	@ 0x30
 8006aec:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <std+0x68>)
 8006aee:	429c      	cmp	r4, r3
 8006af0:	d006      	beq.n	8006b00 <std+0x48>
 8006af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006af6:	4294      	cmp	r4, r2
 8006af8:	d002      	beq.n	8006b00 <std+0x48>
 8006afa:	33d0      	adds	r3, #208	@ 0xd0
 8006afc:	429c      	cmp	r4, r3
 8006afe:	d105      	bne.n	8006b0c <std+0x54>
 8006b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b08:	f000 baae 	b.w	8007068 <__retarget_lock_init_recursive>
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	bf00      	nop
 8006b10:	08006d1d 	.word	0x08006d1d
 8006b14:	08006d3f 	.word	0x08006d3f
 8006b18:	08006d77 	.word	0x08006d77
 8006b1c:	08006d9b 	.word	0x08006d9b
 8006b20:	20001b90 	.word	0x20001b90

08006b24 <stdio_exit_handler>:
 8006b24:	4a02      	ldr	r2, [pc, #8]	@ (8006b30 <stdio_exit_handler+0xc>)
 8006b26:	4903      	ldr	r1, [pc, #12]	@ (8006b34 <stdio_exit_handler+0x10>)
 8006b28:	4803      	ldr	r0, [pc, #12]	@ (8006b38 <stdio_exit_handler+0x14>)
 8006b2a:	f000 b869 	b.w	8006c00 <_fwalk_sglue>
 8006b2e:	bf00      	nop
 8006b30:	20000010 	.word	0x20000010
 8006b34:	0800791d 	.word	0x0800791d
 8006b38:	20000020 	.word	0x20000020

08006b3c <cleanup_stdio>:
 8006b3c:	6841      	ldr	r1, [r0, #4]
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <cleanup_stdio+0x34>)
 8006b40:	b510      	push	{r4, lr}
 8006b42:	4299      	cmp	r1, r3
 8006b44:	4604      	mov	r4, r0
 8006b46:	d001      	beq.n	8006b4c <cleanup_stdio+0x10>
 8006b48:	f000 fee8 	bl	800791c <_fflush_r>
 8006b4c:	68a1      	ldr	r1, [r4, #8]
 8006b4e:	4b09      	ldr	r3, [pc, #36]	@ (8006b74 <cleanup_stdio+0x38>)
 8006b50:	4299      	cmp	r1, r3
 8006b52:	d002      	beq.n	8006b5a <cleanup_stdio+0x1e>
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fee1 	bl	800791c <_fflush_r>
 8006b5a:	68e1      	ldr	r1, [r4, #12]
 8006b5c:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <cleanup_stdio+0x3c>)
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	d004      	beq.n	8006b6c <cleanup_stdio+0x30>
 8006b62:	4620      	mov	r0, r4
 8006b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b68:	f000 bed8 	b.w	800791c <_fflush_r>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	bf00      	nop
 8006b70:	20001b90 	.word	0x20001b90
 8006b74:	20001bf8 	.word	0x20001bf8
 8006b78:	20001c60 	.word	0x20001c60

08006b7c <global_stdio_init.part.0>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <global_stdio_init.part.0+0x30>)
 8006b80:	4c0b      	ldr	r4, [pc, #44]	@ (8006bb0 <global_stdio_init.part.0+0x34>)
 8006b82:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb4 <global_stdio_init.part.0+0x38>)
 8006b84:	4620      	mov	r0, r4
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	2104      	movs	r1, #4
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f7ff ff94 	bl	8006ab8 <std>
 8006b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b94:	2201      	movs	r2, #1
 8006b96:	2109      	movs	r1, #9
 8006b98:	f7ff ff8e 	bl	8006ab8 <std>
 8006b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba6:	2112      	movs	r1, #18
 8006ba8:	f7ff bf86 	b.w	8006ab8 <std>
 8006bac:	20001cc8 	.word	0x20001cc8
 8006bb0:	20001b90 	.word	0x20001b90
 8006bb4:	08006b25 	.word	0x08006b25

08006bb8 <__sfp_lock_acquire>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	@ (8006bc0 <__sfp_lock_acquire+0x8>)
 8006bba:	f000 ba56 	b.w	800706a <__retarget_lock_acquire_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20001cd1 	.word	0x20001cd1

08006bc4 <__sfp_lock_release>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	@ (8006bcc <__sfp_lock_release+0x8>)
 8006bc6:	f000 ba51 	b.w	800706c <__retarget_lock_release_recursive>
 8006bca:	bf00      	nop
 8006bcc:	20001cd1 	.word	0x20001cd1

08006bd0 <__sinit>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	f7ff fff0 	bl	8006bb8 <__sfp_lock_acquire>
 8006bd8:	6a23      	ldr	r3, [r4, #32]
 8006bda:	b11b      	cbz	r3, 8006be4 <__sinit+0x14>
 8006bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be0:	f7ff bff0 	b.w	8006bc4 <__sfp_lock_release>
 8006be4:	4b04      	ldr	r3, [pc, #16]	@ (8006bf8 <__sinit+0x28>)
 8006be6:	6223      	str	r3, [r4, #32]
 8006be8:	4b04      	ldr	r3, [pc, #16]	@ (8006bfc <__sinit+0x2c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1f5      	bne.n	8006bdc <__sinit+0xc>
 8006bf0:	f7ff ffc4 	bl	8006b7c <global_stdio_init.part.0>
 8006bf4:	e7f2      	b.n	8006bdc <__sinit+0xc>
 8006bf6:	bf00      	nop
 8006bf8:	08006b3d 	.word	0x08006b3d
 8006bfc:	20001cc8 	.word	0x20001cc8

08006c00 <_fwalk_sglue>:
 8006c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c04:	4607      	mov	r7, r0
 8006c06:	4688      	mov	r8, r1
 8006c08:	4614      	mov	r4, r2
 8006c0a:	2600      	movs	r6, #0
 8006c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c10:	f1b9 0901 	subs.w	r9, r9, #1
 8006c14:	d505      	bpl.n	8006c22 <_fwalk_sglue+0x22>
 8006c16:	6824      	ldr	r4, [r4, #0]
 8006c18:	2c00      	cmp	r4, #0
 8006c1a:	d1f7      	bne.n	8006c0c <_fwalk_sglue+0xc>
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d907      	bls.n	8006c38 <_fwalk_sglue+0x38>
 8006c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	d003      	beq.n	8006c38 <_fwalk_sglue+0x38>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c0      	blx	r8
 8006c36:	4306      	orrs	r6, r0
 8006c38:	3568      	adds	r5, #104	@ 0x68
 8006c3a:	e7e9      	b.n	8006c10 <_fwalk_sglue+0x10>

08006c3c <iprintf>:
 8006c3c:	b40f      	push	{r0, r1, r2, r3}
 8006c3e:	b507      	push	{r0, r1, r2, lr}
 8006c40:	4906      	ldr	r1, [pc, #24]	@ (8006c5c <iprintf+0x20>)
 8006c42:	ab04      	add	r3, sp, #16
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c4a:	6881      	ldr	r1, [r0, #8]
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	f000 fb3b 	bl	80072c8 <_vfiprintf_r>
 8006c52:	b003      	add	sp, #12
 8006c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c58:	b004      	add	sp, #16
 8006c5a:	4770      	bx	lr
 8006c5c:	2000001c 	.word	0x2000001c

08006c60 <_puts_r>:
 8006c60:	6a03      	ldr	r3, [r0, #32]
 8006c62:	b570      	push	{r4, r5, r6, lr}
 8006c64:	4605      	mov	r5, r0
 8006c66:	460e      	mov	r6, r1
 8006c68:	6884      	ldr	r4, [r0, #8]
 8006c6a:	b90b      	cbnz	r3, 8006c70 <_puts_r+0x10>
 8006c6c:	f7ff ffb0 	bl	8006bd0 <__sinit>
 8006c70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c72:	07db      	lsls	r3, r3, #31
 8006c74:	d405      	bmi.n	8006c82 <_puts_r+0x22>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	0598      	lsls	r0, r3, #22
 8006c7a:	d402      	bmi.n	8006c82 <_puts_r+0x22>
 8006c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c7e:	f000 f9f4 	bl	800706a <__retarget_lock_acquire_recursive>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	0719      	lsls	r1, r3, #28
 8006c86:	d502      	bpl.n	8006c8e <_puts_r+0x2e>
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d135      	bne.n	8006cfa <_puts_r+0x9a>
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 f8c5 	bl	8006e20 <__swsetup_r>
 8006c96:	b380      	cbz	r0, 8006cfa <_puts_r+0x9a>
 8006c98:	f04f 35ff 	mov.w	r5, #4294967295
 8006c9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c9e:	07da      	lsls	r2, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_puts_r+0x4e>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	059b      	lsls	r3, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_puts_r+0x4e>
 8006ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006caa:	f000 f9df 	bl	800706c <__retarget_lock_release_recursive>
 8006cae:	4628      	mov	r0, r5
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da04      	bge.n	8006cc0 <_puts_r+0x60>
 8006cb6:	69a2      	ldr	r2, [r4, #24]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	dc17      	bgt.n	8006cec <_puts_r+0x8c>
 8006cbc:	290a      	cmp	r1, #10
 8006cbe:	d015      	beq.n	8006cec <_puts_r+0x8c>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	7019      	strb	r1, [r3, #0]
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	d1ed      	bne.n	8006cb2 <_puts_r+0x52>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	da11      	bge.n	8006cfe <_puts_r+0x9e>
 8006cda:	4622      	mov	r2, r4
 8006cdc:	210a      	movs	r1, #10
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 f85f 	bl	8006da2 <__swbuf_r>
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d0d7      	beq.n	8006c98 <_puts_r+0x38>
 8006ce8:	250a      	movs	r5, #10
 8006cea:	e7d7      	b.n	8006c9c <_puts_r+0x3c>
 8006cec:	4622      	mov	r2, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 f857 	bl	8006da2 <__swbuf_r>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d1e7      	bne.n	8006cc8 <_puts_r+0x68>
 8006cf8:	e7ce      	b.n	8006c98 <_puts_r+0x38>
 8006cfa:	3e01      	subs	r6, #1
 8006cfc:	e7e4      	b.n	8006cc8 <_puts_r+0x68>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	6022      	str	r2, [r4, #0]
 8006d04:	220a      	movs	r2, #10
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e7ee      	b.n	8006ce8 <_puts_r+0x88>
	...

08006d0c <puts>:
 8006d0c:	4b02      	ldr	r3, [pc, #8]	@ (8006d18 <puts+0xc>)
 8006d0e:	4601      	mov	r1, r0
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	f7ff bfa5 	b.w	8006c60 <_puts_r>
 8006d16:	bf00      	nop
 8006d18:	2000001c 	.word	0x2000001c

08006d1c <__sread>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	f000 f952 	bl	8006fcc <_read_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	bfab      	itete	ge
 8006d2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d30:	181b      	addge	r3, r3, r0
 8006d32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d36:	bfac      	ite	ge
 8006d38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d3a:	81a3      	strhlt	r3, [r4, #12]
 8006d3c:	bd10      	pop	{r4, pc}

08006d3e <__swrite>:
 8006d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d42:	461f      	mov	r7, r3
 8006d44:	898b      	ldrh	r3, [r1, #12]
 8006d46:	4605      	mov	r5, r0
 8006d48:	05db      	lsls	r3, r3, #23
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	d505      	bpl.n	8006d5c <__swrite+0x1e>
 8006d50:	2302      	movs	r3, #2
 8006d52:	2200      	movs	r2, #0
 8006d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d58:	f000 f926 	bl	8006fa8 <_lseek_r>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	4632      	mov	r2, r6
 8006d60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	4628      	mov	r0, r5
 8006d68:	463b      	mov	r3, r7
 8006d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d72:	f000 b93d 	b.w	8006ff0 <_write_r>

08006d76 <__sseek>:
 8006d76:	b510      	push	{r4, lr}
 8006d78:	460c      	mov	r4, r1
 8006d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7e:	f000 f913 	bl	8006fa8 <_lseek_r>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	bf15      	itete	ne
 8006d88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d92:	81a3      	strheq	r3, [r4, #12]
 8006d94:	bf18      	it	ne
 8006d96:	81a3      	strhne	r3, [r4, #12]
 8006d98:	bd10      	pop	{r4, pc}

08006d9a <__sclose>:
 8006d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9e:	f000 b89d 	b.w	8006edc <_close_r>

08006da2 <__swbuf_r>:
 8006da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da4:	460e      	mov	r6, r1
 8006da6:	4614      	mov	r4, r2
 8006da8:	4605      	mov	r5, r0
 8006daa:	b118      	cbz	r0, 8006db4 <__swbuf_r+0x12>
 8006dac:	6a03      	ldr	r3, [r0, #32]
 8006dae:	b90b      	cbnz	r3, 8006db4 <__swbuf_r+0x12>
 8006db0:	f7ff ff0e 	bl	8006bd0 <__sinit>
 8006db4:	69a3      	ldr	r3, [r4, #24]
 8006db6:	60a3      	str	r3, [r4, #8]
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	071a      	lsls	r2, r3, #28
 8006dbc:	d501      	bpl.n	8006dc2 <__swbuf_r+0x20>
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	b943      	cbnz	r3, 8006dd4 <__swbuf_r+0x32>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f82b 	bl	8006e20 <__swsetup_r>
 8006dca:	b118      	cbz	r0, 8006dd4 <__swbuf_r+0x32>
 8006dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	b2f6      	uxtb	r6, r6
 8006dda:	1a98      	subs	r0, r3, r2
 8006ddc:	6963      	ldr	r3, [r4, #20]
 8006dde:	4637      	mov	r7, r6
 8006de0:	4283      	cmp	r3, r0
 8006de2:	dc05      	bgt.n	8006df0 <__swbuf_r+0x4e>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fd98 	bl	800791c <_fflush_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d1ed      	bne.n	8006dcc <__swbuf_r+0x2a>
 8006df0:	68a3      	ldr	r3, [r4, #8]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60a3      	str	r3, [r4, #8]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	6022      	str	r2, [r4, #0]
 8006dfc:	701e      	strb	r6, [r3, #0]
 8006dfe:	6962      	ldr	r2, [r4, #20]
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d004      	beq.n	8006e10 <__swbuf_r+0x6e>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	07db      	lsls	r3, r3, #31
 8006e0a:	d5e1      	bpl.n	8006dd0 <__swbuf_r+0x2e>
 8006e0c:	2e0a      	cmp	r6, #10
 8006e0e:	d1df      	bne.n	8006dd0 <__swbuf_r+0x2e>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 fd82 	bl	800791c <_fflush_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d0d9      	beq.n	8006dd0 <__swbuf_r+0x2e>
 8006e1c:	e7d6      	b.n	8006dcc <__swbuf_r+0x2a>
	...

08006e20 <__swsetup_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4b29      	ldr	r3, [pc, #164]	@ (8006ec8 <__swsetup_r+0xa8>)
 8006e24:	4605      	mov	r5, r0
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	460c      	mov	r4, r1
 8006e2a:	b118      	cbz	r0, 8006e34 <__swsetup_r+0x14>
 8006e2c:	6a03      	ldr	r3, [r0, #32]
 8006e2e:	b90b      	cbnz	r3, 8006e34 <__swsetup_r+0x14>
 8006e30:	f7ff fece 	bl	8006bd0 <__sinit>
 8006e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e38:	0719      	lsls	r1, r3, #28
 8006e3a:	d422      	bmi.n	8006e82 <__swsetup_r+0x62>
 8006e3c:	06da      	lsls	r2, r3, #27
 8006e3e:	d407      	bmi.n	8006e50 <__swsetup_r+0x30>
 8006e40:	2209      	movs	r2, #9
 8006e42:	602a      	str	r2, [r5, #0]
 8006e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	e033      	b.n	8006eb8 <__swsetup_r+0x98>
 8006e50:	0758      	lsls	r0, r3, #29
 8006e52:	d512      	bpl.n	8006e7a <__swsetup_r+0x5a>
 8006e54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e56:	b141      	cbz	r1, 8006e6a <__swsetup_r+0x4a>
 8006e58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d002      	beq.n	8006e66 <__swsetup_r+0x46>
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 f913 	bl	800708c <_free_r>
 8006e66:	2300      	movs	r3, #0
 8006e68:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	2300      	movs	r3, #0
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b94b      	cbnz	r3, 8006e9a <__swsetup_r+0x7a>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e90:	d003      	beq.n	8006e9a <__swsetup_r+0x7a>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 fd8e 	bl	80079b6 <__smakebuf_r>
 8006e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9e:	f013 0201 	ands.w	r2, r3, #1
 8006ea2:	d00a      	beq.n	8006eba <__swsetup_r+0x9a>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	60a2      	str	r2, [r4, #8]
 8006ea8:	6962      	ldr	r2, [r4, #20]
 8006eaa:	4252      	negs	r2, r2
 8006eac:	61a2      	str	r2, [r4, #24]
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	b942      	cbnz	r2, 8006ec4 <__swsetup_r+0xa4>
 8006eb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eb6:	d1c5      	bne.n	8006e44 <__swsetup_r+0x24>
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	0799      	lsls	r1, r3, #30
 8006ebc:	bf58      	it	pl
 8006ebe:	6962      	ldrpl	r2, [r4, #20]
 8006ec0:	60a2      	str	r2, [r4, #8]
 8006ec2:	e7f4      	b.n	8006eae <__swsetup_r+0x8e>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e7f7      	b.n	8006eb8 <__swsetup_r+0x98>
 8006ec8:	2000001c 	.word	0x2000001c

08006ecc <memset>:
 8006ecc:	4603      	mov	r3, r0
 8006ece:	4402      	add	r2, r0
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d100      	bne.n	8006ed6 <memset+0xa>
 8006ed4:	4770      	bx	lr
 8006ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eda:	e7f9      	b.n	8006ed0 <memset+0x4>

08006edc <_close_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4d05      	ldr	r5, [pc, #20]	@ (8006ef8 <_close_r+0x1c>)
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7f9 fd39 	bl	800095e <_close>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_close_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_close_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20001ccc 	.word	0x20001ccc

08006efc <_reclaim_reent>:
 8006efc:	4b29      	ldr	r3, [pc, #164]	@ (8006fa4 <_reclaim_reent+0xa8>)
 8006efe:	b570      	push	{r4, r5, r6, lr}
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4604      	mov	r4, r0
 8006f04:	4283      	cmp	r3, r0
 8006f06:	d04b      	beq.n	8006fa0 <_reclaim_reent+0xa4>
 8006f08:	69c3      	ldr	r3, [r0, #28]
 8006f0a:	b1ab      	cbz	r3, 8006f38 <_reclaim_reent+0x3c>
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	b16b      	cbz	r3, 8006f2c <_reclaim_reent+0x30>
 8006f10:	2500      	movs	r5, #0
 8006f12:	69e3      	ldr	r3, [r4, #28]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	5959      	ldr	r1, [r3, r5]
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	d13b      	bne.n	8006f94 <_reclaim_reent+0x98>
 8006f1c:	3504      	adds	r5, #4
 8006f1e:	2d80      	cmp	r5, #128	@ 0x80
 8006f20:	d1f7      	bne.n	8006f12 <_reclaim_reent+0x16>
 8006f22:	69e3      	ldr	r3, [r4, #28]
 8006f24:	4620      	mov	r0, r4
 8006f26:	68d9      	ldr	r1, [r3, #12]
 8006f28:	f000 f8b0 	bl	800708c <_free_r>
 8006f2c:	69e3      	ldr	r3, [r4, #28]
 8006f2e:	6819      	ldr	r1, [r3, #0]
 8006f30:	b111      	cbz	r1, 8006f38 <_reclaim_reent+0x3c>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f8aa 	bl	800708c <_free_r>
 8006f38:	6961      	ldr	r1, [r4, #20]
 8006f3a:	b111      	cbz	r1, 8006f42 <_reclaim_reent+0x46>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 f8a5 	bl	800708c <_free_r>
 8006f42:	69e1      	ldr	r1, [r4, #28]
 8006f44:	b111      	cbz	r1, 8006f4c <_reclaim_reent+0x50>
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 f8a0 	bl	800708c <_free_r>
 8006f4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f4e:	b111      	cbz	r1, 8006f56 <_reclaim_reent+0x5a>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 f89b 	bl	800708c <_free_r>
 8006f56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f58:	b111      	cbz	r1, 8006f60 <_reclaim_reent+0x64>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 f896 	bl	800708c <_free_r>
 8006f60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f62:	b111      	cbz	r1, 8006f6a <_reclaim_reent+0x6e>
 8006f64:	4620      	mov	r0, r4
 8006f66:	f000 f891 	bl	800708c <_free_r>
 8006f6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f6c:	b111      	cbz	r1, 8006f74 <_reclaim_reent+0x78>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f88c 	bl	800708c <_free_r>
 8006f74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006f76:	b111      	cbz	r1, 8006f7e <_reclaim_reent+0x82>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f887 	bl	800708c <_free_r>
 8006f7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006f80:	b111      	cbz	r1, 8006f88 <_reclaim_reent+0x8c>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f882 	bl	800708c <_free_r>
 8006f88:	6a23      	ldr	r3, [r4, #32]
 8006f8a:	b14b      	cbz	r3, 8006fa0 <_reclaim_reent+0xa4>
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f92:	4718      	bx	r3
 8006f94:	680e      	ldr	r6, [r1, #0]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 f878 	bl	800708c <_free_r>
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	e7bb      	b.n	8006f18 <_reclaim_reent+0x1c>
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	bf00      	nop
 8006fa4:	2000001c 	.word	0x2000001c

08006fa8 <_lseek_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4d05      	ldr	r5, [pc, #20]	@ (8006fc8 <_lseek_r+0x20>)
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7f9 fcf5 	bl	80009a6 <_lseek>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_lseek_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_lseek_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	20001ccc 	.word	0x20001ccc

08006fcc <_read_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4d05      	ldr	r5, [pc, #20]	@ (8006fec <_read_r+0x20>)
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7f9 fca2 	bl	8000924 <_read>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_read_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_read_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20001ccc 	.word	0x20001ccc

08006ff0 <_write_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4d05      	ldr	r5, [pc, #20]	@ (8007010 <_write_r+0x20>)
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7f9 f8a6 	bl	8000150 <_write>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_write_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_write_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20001ccc 	.word	0x20001ccc

08007014 <__errno>:
 8007014:	4b01      	ldr	r3, [pc, #4]	@ (800701c <__errno+0x8>)
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	2000001c 	.word	0x2000001c

08007020 <__libc_init_array>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	2600      	movs	r6, #0
 8007024:	4d0c      	ldr	r5, [pc, #48]	@ (8007058 <__libc_init_array+0x38>)
 8007026:	4c0d      	ldr	r4, [pc, #52]	@ (800705c <__libc_init_array+0x3c>)
 8007028:	1b64      	subs	r4, r4, r5
 800702a:	10a4      	asrs	r4, r4, #2
 800702c:	42a6      	cmp	r6, r4
 800702e:	d109      	bne.n	8007044 <__libc_init_array+0x24>
 8007030:	f000 fd3e 	bl	8007ab0 <_init>
 8007034:	2600      	movs	r6, #0
 8007036:	4d0a      	ldr	r5, [pc, #40]	@ (8007060 <__libc_init_array+0x40>)
 8007038:	4c0a      	ldr	r4, [pc, #40]	@ (8007064 <__libc_init_array+0x44>)
 800703a:	1b64      	subs	r4, r4, r5
 800703c:	10a4      	asrs	r4, r4, #2
 800703e:	42a6      	cmp	r6, r4
 8007040:	d105      	bne.n	800704e <__libc_init_array+0x2e>
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	f855 3b04 	ldr.w	r3, [r5], #4
 8007048:	4798      	blx	r3
 800704a:	3601      	adds	r6, #1
 800704c:	e7ee      	b.n	800702c <__libc_init_array+0xc>
 800704e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007052:	4798      	blx	r3
 8007054:	3601      	adds	r6, #1
 8007056:	e7f2      	b.n	800703e <__libc_init_array+0x1e>
 8007058:	08007d38 	.word	0x08007d38
 800705c:	08007d38 	.word	0x08007d38
 8007060:	08007d38 	.word	0x08007d38
 8007064:	08007d3c 	.word	0x08007d3c

08007068 <__retarget_lock_init_recursive>:
 8007068:	4770      	bx	lr

0800706a <__retarget_lock_acquire_recursive>:
 800706a:	4770      	bx	lr

0800706c <__retarget_lock_release_recursive>:
 800706c:	4770      	bx	lr

0800706e <memcpy>:
 800706e:	440a      	add	r2, r1
 8007070:	4291      	cmp	r1, r2
 8007072:	f100 33ff 	add.w	r3, r0, #4294967295
 8007076:	d100      	bne.n	800707a <memcpy+0xc>
 8007078:	4770      	bx	lr
 800707a:	b510      	push	{r4, lr}
 800707c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007080:	4291      	cmp	r1, r2
 8007082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007086:	d1f9      	bne.n	800707c <memcpy+0xe>
 8007088:	bd10      	pop	{r4, pc}
	...

0800708c <_free_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4605      	mov	r5, r0
 8007090:	2900      	cmp	r1, #0
 8007092:	d040      	beq.n	8007116 <_free_r+0x8a>
 8007094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007098:	1f0c      	subs	r4, r1, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	bfb8      	it	lt
 800709e:	18e4      	addlt	r4, r4, r3
 80070a0:	f000 f8de 	bl	8007260 <__malloc_lock>
 80070a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007118 <_free_r+0x8c>)
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	b933      	cbnz	r3, 80070b8 <_free_r+0x2c>
 80070aa:	6063      	str	r3, [r4, #4]
 80070ac:	6014      	str	r4, [r2, #0]
 80070ae:	4628      	mov	r0, r5
 80070b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b4:	f000 b8da 	b.w	800726c <__malloc_unlock>
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	d908      	bls.n	80070ce <_free_r+0x42>
 80070bc:	6820      	ldr	r0, [r4, #0]
 80070be:	1821      	adds	r1, r4, r0
 80070c0:	428b      	cmp	r3, r1
 80070c2:	bf01      	itttt	eq
 80070c4:	6819      	ldreq	r1, [r3, #0]
 80070c6:	685b      	ldreq	r3, [r3, #4]
 80070c8:	1809      	addeq	r1, r1, r0
 80070ca:	6021      	streq	r1, [r4, #0]
 80070cc:	e7ed      	b.n	80070aa <_free_r+0x1e>
 80070ce:	461a      	mov	r2, r3
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	b10b      	cbz	r3, 80070d8 <_free_r+0x4c>
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d9fa      	bls.n	80070ce <_free_r+0x42>
 80070d8:	6811      	ldr	r1, [r2, #0]
 80070da:	1850      	adds	r0, r2, r1
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d10b      	bne.n	80070f8 <_free_r+0x6c>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	4401      	add	r1, r0
 80070e4:	1850      	adds	r0, r2, r1
 80070e6:	4283      	cmp	r3, r0
 80070e8:	6011      	str	r1, [r2, #0]
 80070ea:	d1e0      	bne.n	80070ae <_free_r+0x22>
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4408      	add	r0, r1
 80070f2:	6010      	str	r0, [r2, #0]
 80070f4:	6053      	str	r3, [r2, #4]
 80070f6:	e7da      	b.n	80070ae <_free_r+0x22>
 80070f8:	d902      	bls.n	8007100 <_free_r+0x74>
 80070fa:	230c      	movs	r3, #12
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	e7d6      	b.n	80070ae <_free_r+0x22>
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	1821      	adds	r1, r4, r0
 8007104:	428b      	cmp	r3, r1
 8007106:	bf01      	itttt	eq
 8007108:	6819      	ldreq	r1, [r3, #0]
 800710a:	685b      	ldreq	r3, [r3, #4]
 800710c:	1809      	addeq	r1, r1, r0
 800710e:	6021      	streq	r1, [r4, #0]
 8007110:	6063      	str	r3, [r4, #4]
 8007112:	6054      	str	r4, [r2, #4]
 8007114:	e7cb      	b.n	80070ae <_free_r+0x22>
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20001cd8 	.word	0x20001cd8

0800711c <sbrk_aligned>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4e0f      	ldr	r6, [pc, #60]	@ (800715c <sbrk_aligned+0x40>)
 8007120:	460c      	mov	r4, r1
 8007122:	6831      	ldr	r1, [r6, #0]
 8007124:	4605      	mov	r5, r0
 8007126:	b911      	cbnz	r1, 800712e <sbrk_aligned+0x12>
 8007128:	f000 fca4 	bl	8007a74 <_sbrk_r>
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f000 fc9f 	bl	8007a74 <_sbrk_r>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	d103      	bne.n	8007142 <sbrk_aligned+0x26>
 800713a:	f04f 34ff 	mov.w	r4, #4294967295
 800713e:	4620      	mov	r0, r4
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d0f8      	beq.n	800713e <sbrk_aligned+0x22>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fc90 	bl	8007a74 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d1f2      	bne.n	800713e <sbrk_aligned+0x22>
 8007158:	e7ef      	b.n	800713a <sbrk_aligned+0x1e>
 800715a:	bf00      	nop
 800715c:	20001cd4 	.word	0x20001cd4

08007160 <_malloc_r>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	1ccd      	adds	r5, r1, #3
 8007166:	f025 0503 	bic.w	r5, r5, #3
 800716a:	3508      	adds	r5, #8
 800716c:	2d0c      	cmp	r5, #12
 800716e:	bf38      	it	cc
 8007170:	250c      	movcc	r5, #12
 8007172:	2d00      	cmp	r5, #0
 8007174:	4606      	mov	r6, r0
 8007176:	db01      	blt.n	800717c <_malloc_r+0x1c>
 8007178:	42a9      	cmp	r1, r5
 800717a:	d904      	bls.n	8007186 <_malloc_r+0x26>
 800717c:	230c      	movs	r3, #12
 800717e:	6033      	str	r3, [r6, #0]
 8007180:	2000      	movs	r0, #0
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800725c <_malloc_r+0xfc>
 800718a:	f000 f869 	bl	8007260 <__malloc_lock>
 800718e:	f8d8 3000 	ldr.w	r3, [r8]
 8007192:	461c      	mov	r4, r3
 8007194:	bb44      	cbnz	r4, 80071e8 <_malloc_r+0x88>
 8007196:	4629      	mov	r1, r5
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ffbf 	bl	800711c <sbrk_aligned>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	4604      	mov	r4, r0
 80071a2:	d158      	bne.n	8007256 <_malloc_r+0xf6>
 80071a4:	f8d8 4000 	ldr.w	r4, [r8]
 80071a8:	4627      	mov	r7, r4
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d143      	bne.n	8007236 <_malloc_r+0xd6>
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d04b      	beq.n	800724a <_malloc_r+0xea>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	4639      	mov	r1, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	eb04 0903 	add.w	r9, r4, r3
 80071bc:	f000 fc5a 	bl	8007a74 <_sbrk_r>
 80071c0:	4581      	cmp	r9, r0
 80071c2:	d142      	bne.n	800724a <_malloc_r+0xea>
 80071c4:	6821      	ldr	r1, [r4, #0]
 80071c6:	4630      	mov	r0, r6
 80071c8:	1a6d      	subs	r5, r5, r1
 80071ca:	4629      	mov	r1, r5
 80071cc:	f7ff ffa6 	bl	800711c <sbrk_aligned>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d03a      	beq.n	800724a <_malloc_r+0xea>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	442b      	add	r3, r5
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	f8d8 3000 	ldr.w	r3, [r8]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	bb62      	cbnz	r2, 800723c <_malloc_r+0xdc>
 80071e2:	f8c8 7000 	str.w	r7, [r8]
 80071e6:	e00f      	b.n	8007208 <_malloc_r+0xa8>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	1b52      	subs	r2, r2, r5
 80071ec:	d420      	bmi.n	8007230 <_malloc_r+0xd0>
 80071ee:	2a0b      	cmp	r2, #11
 80071f0:	d917      	bls.n	8007222 <_malloc_r+0xc2>
 80071f2:	1961      	adds	r1, r4, r5
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	bf18      	it	ne
 80071fa:	6059      	strne	r1, [r3, #4]
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	bf08      	it	eq
 8007200:	f8c8 1000 	streq.w	r1, [r8]
 8007204:	5162      	str	r2, [r4, r5]
 8007206:	604b      	str	r3, [r1, #4]
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f82f 	bl	800726c <__malloc_unlock>
 800720e:	f104 000b 	add.w	r0, r4, #11
 8007212:	1d23      	adds	r3, r4, #4
 8007214:	f020 0007 	bic.w	r0, r0, #7
 8007218:	1ac2      	subs	r2, r0, r3
 800721a:	bf1c      	itt	ne
 800721c:	1a1b      	subne	r3, r3, r0
 800721e:	50a3      	strne	r3, [r4, r2]
 8007220:	e7af      	b.n	8007182 <_malloc_r+0x22>
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	42a3      	cmp	r3, r4
 8007226:	bf0c      	ite	eq
 8007228:	f8c8 2000 	streq.w	r2, [r8]
 800722c:	605a      	strne	r2, [r3, #4]
 800722e:	e7eb      	b.n	8007208 <_malloc_r+0xa8>
 8007230:	4623      	mov	r3, r4
 8007232:	6864      	ldr	r4, [r4, #4]
 8007234:	e7ae      	b.n	8007194 <_malloc_r+0x34>
 8007236:	463c      	mov	r4, r7
 8007238:	687f      	ldr	r7, [r7, #4]
 800723a:	e7b6      	b.n	80071aa <_malloc_r+0x4a>
 800723c:	461a      	mov	r2, r3
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	42a3      	cmp	r3, r4
 8007242:	d1fb      	bne.n	800723c <_malloc_r+0xdc>
 8007244:	2300      	movs	r3, #0
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e7de      	b.n	8007208 <_malloc_r+0xa8>
 800724a:	230c      	movs	r3, #12
 800724c:	4630      	mov	r0, r6
 800724e:	6033      	str	r3, [r6, #0]
 8007250:	f000 f80c 	bl	800726c <__malloc_unlock>
 8007254:	e794      	b.n	8007180 <_malloc_r+0x20>
 8007256:	6005      	str	r5, [r0, #0]
 8007258:	e7d6      	b.n	8007208 <_malloc_r+0xa8>
 800725a:	bf00      	nop
 800725c:	20001cd8 	.word	0x20001cd8

08007260 <__malloc_lock>:
 8007260:	4801      	ldr	r0, [pc, #4]	@ (8007268 <__malloc_lock+0x8>)
 8007262:	f7ff bf02 	b.w	800706a <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	20001cd0 	.word	0x20001cd0

0800726c <__malloc_unlock>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__malloc_unlock+0x8>)
 800726e:	f7ff befd 	b.w	800706c <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	20001cd0 	.word	0x20001cd0

08007278 <__sfputc_r>:
 8007278:	6893      	ldr	r3, [r2, #8]
 800727a:	b410      	push	{r4}
 800727c:	3b01      	subs	r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	6093      	str	r3, [r2, #8]
 8007282:	da07      	bge.n	8007294 <__sfputc_r+0x1c>
 8007284:	6994      	ldr	r4, [r2, #24]
 8007286:	42a3      	cmp	r3, r4
 8007288:	db01      	blt.n	800728e <__sfputc_r+0x16>
 800728a:	290a      	cmp	r1, #10
 800728c:	d102      	bne.n	8007294 <__sfputc_r+0x1c>
 800728e:	bc10      	pop	{r4}
 8007290:	f7ff bd87 	b.w	8006da2 <__swbuf_r>
 8007294:	6813      	ldr	r3, [r2, #0]
 8007296:	1c58      	adds	r0, r3, #1
 8007298:	6010      	str	r0, [r2, #0]
 800729a:	7019      	strb	r1, [r3, #0]
 800729c:	4608      	mov	r0, r1
 800729e:	bc10      	pop	{r4}
 80072a0:	4770      	bx	lr

080072a2 <__sfputs_r>:
 80072a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	4614      	mov	r4, r2
 80072aa:	18d5      	adds	r5, r2, r3
 80072ac:	42ac      	cmp	r4, r5
 80072ae:	d101      	bne.n	80072b4 <__sfputs_r+0x12>
 80072b0:	2000      	movs	r0, #0
 80072b2:	e007      	b.n	80072c4 <__sfputs_r+0x22>
 80072b4:	463a      	mov	r2, r7
 80072b6:	4630      	mov	r0, r6
 80072b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072bc:	f7ff ffdc 	bl	8007278 <__sfputc_r>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d1f3      	bne.n	80072ac <__sfputs_r+0xa>
 80072c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072c8 <_vfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	460d      	mov	r5, r1
 80072ce:	4614      	mov	r4, r2
 80072d0:	4698      	mov	r8, r3
 80072d2:	4606      	mov	r6, r0
 80072d4:	b09d      	sub	sp, #116	@ 0x74
 80072d6:	b118      	cbz	r0, 80072e0 <_vfiprintf_r+0x18>
 80072d8:	6a03      	ldr	r3, [r0, #32]
 80072da:	b90b      	cbnz	r3, 80072e0 <_vfiprintf_r+0x18>
 80072dc:	f7ff fc78 	bl	8006bd0 <__sinit>
 80072e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072e2:	07d9      	lsls	r1, r3, #31
 80072e4:	d405      	bmi.n	80072f2 <_vfiprintf_r+0x2a>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	059a      	lsls	r2, r3, #22
 80072ea:	d402      	bmi.n	80072f2 <_vfiprintf_r+0x2a>
 80072ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ee:	f7ff febc 	bl	800706a <__retarget_lock_acquire_recursive>
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	071b      	lsls	r3, r3, #28
 80072f6:	d501      	bpl.n	80072fc <_vfiprintf_r+0x34>
 80072f8:	692b      	ldr	r3, [r5, #16]
 80072fa:	b99b      	cbnz	r3, 8007324 <_vfiprintf_r+0x5c>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff fd8e 	bl	8006e20 <__swsetup_r>
 8007304:	b170      	cbz	r0, 8007324 <_vfiprintf_r+0x5c>
 8007306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007308:	07dc      	lsls	r4, r3, #31
 800730a:	d504      	bpl.n	8007316 <_vfiprintf_r+0x4e>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	b01d      	add	sp, #116	@ 0x74
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	0598      	lsls	r0, r3, #22
 800731a:	d4f7      	bmi.n	800730c <_vfiprintf_r+0x44>
 800731c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800731e:	f7ff fea5 	bl	800706c <__retarget_lock_release_recursive>
 8007322:	e7f3      	b.n	800730c <_vfiprintf_r+0x44>
 8007324:	2300      	movs	r3, #0
 8007326:	9309      	str	r3, [sp, #36]	@ 0x24
 8007328:	2320      	movs	r3, #32
 800732a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800732e:	2330      	movs	r3, #48	@ 0x30
 8007330:	f04f 0901 	mov.w	r9, #1
 8007334:	f8cd 800c 	str.w	r8, [sp, #12]
 8007338:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80074e4 <_vfiprintf_r+0x21c>
 800733c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007340:	4623      	mov	r3, r4
 8007342:	469a      	mov	sl, r3
 8007344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007348:	b10a      	cbz	r2, 800734e <_vfiprintf_r+0x86>
 800734a:	2a25      	cmp	r2, #37	@ 0x25
 800734c:	d1f9      	bne.n	8007342 <_vfiprintf_r+0x7a>
 800734e:	ebba 0b04 	subs.w	fp, sl, r4
 8007352:	d00b      	beq.n	800736c <_vfiprintf_r+0xa4>
 8007354:	465b      	mov	r3, fp
 8007356:	4622      	mov	r2, r4
 8007358:	4629      	mov	r1, r5
 800735a:	4630      	mov	r0, r6
 800735c:	f7ff ffa1 	bl	80072a2 <__sfputs_r>
 8007360:	3001      	adds	r0, #1
 8007362:	f000 80a7 	beq.w	80074b4 <_vfiprintf_r+0x1ec>
 8007366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007368:	445a      	add	r2, fp
 800736a:	9209      	str	r2, [sp, #36]	@ 0x24
 800736c:	f89a 3000 	ldrb.w	r3, [sl]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 809f 	beq.w	80074b4 <_vfiprintf_r+0x1ec>
 8007376:	2300      	movs	r3, #0
 8007378:	f04f 32ff 	mov.w	r2, #4294967295
 800737c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	9307      	str	r3, [sp, #28]
 8007388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800738c:	931a      	str	r3, [sp, #104]	@ 0x68
 800738e:	4654      	mov	r4, sl
 8007390:	2205      	movs	r2, #5
 8007392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007396:	4853      	ldr	r0, [pc, #332]	@ (80074e4 <_vfiprintf_r+0x21c>)
 8007398:	f000 fb7c 	bl	8007a94 <memchr>
 800739c:	9a04      	ldr	r2, [sp, #16]
 800739e:	b9d8      	cbnz	r0, 80073d8 <_vfiprintf_r+0x110>
 80073a0:	06d1      	lsls	r1, r2, #27
 80073a2:	bf44      	itt	mi
 80073a4:	2320      	movmi	r3, #32
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073aa:	0713      	lsls	r3, r2, #28
 80073ac:	bf44      	itt	mi
 80073ae:	232b      	movmi	r3, #43	@ 0x2b
 80073b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073b4:	f89a 3000 	ldrb.w	r3, [sl]
 80073b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ba:	d015      	beq.n	80073e8 <_vfiprintf_r+0x120>
 80073bc:	4654      	mov	r4, sl
 80073be:	2000      	movs	r0, #0
 80073c0:	f04f 0c0a 	mov.w	ip, #10
 80073c4:	9a07      	ldr	r2, [sp, #28]
 80073c6:	4621      	mov	r1, r4
 80073c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073cc:	3b30      	subs	r3, #48	@ 0x30
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d94b      	bls.n	800746a <_vfiprintf_r+0x1a2>
 80073d2:	b1b0      	cbz	r0, 8007402 <_vfiprintf_r+0x13a>
 80073d4:	9207      	str	r2, [sp, #28]
 80073d6:	e014      	b.n	8007402 <_vfiprintf_r+0x13a>
 80073d8:	eba0 0308 	sub.w	r3, r0, r8
 80073dc:	fa09 f303 	lsl.w	r3, r9, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	46a2      	mov	sl, r4
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	e7d2      	b.n	800738e <_vfiprintf_r+0xc6>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d19      	adds	r1, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9103      	str	r1, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfbb      	ittet	lt
 80073f4:	425b      	neglt	r3, r3
 80073f6:	f042 0202 	orrlt.w	r2, r2, #2
 80073fa:	9307      	strge	r3, [sp, #28]
 80073fc:	9307      	strlt	r3, [sp, #28]
 80073fe:	bfb8      	it	lt
 8007400:	9204      	strlt	r2, [sp, #16]
 8007402:	7823      	ldrb	r3, [r4, #0]
 8007404:	2b2e      	cmp	r3, #46	@ 0x2e
 8007406:	d10a      	bne.n	800741e <_vfiprintf_r+0x156>
 8007408:	7863      	ldrb	r3, [r4, #1]
 800740a:	2b2a      	cmp	r3, #42	@ 0x2a
 800740c:	d132      	bne.n	8007474 <_vfiprintf_r+0x1ac>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	3402      	adds	r4, #2
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	9203      	str	r2, [sp, #12]
 8007418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800741c:	9305      	str	r3, [sp, #20]
 800741e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80074e8 <_vfiprintf_r+0x220>
 8007422:	2203      	movs	r2, #3
 8007424:	4650      	mov	r0, sl
 8007426:	7821      	ldrb	r1, [r4, #0]
 8007428:	f000 fb34 	bl	8007a94 <memchr>
 800742c:	b138      	cbz	r0, 800743e <_vfiprintf_r+0x176>
 800742e:	2240      	movs	r2, #64	@ 0x40
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	eba0 000a 	sub.w	r0, r0, sl
 8007436:	4082      	lsls	r2, r0
 8007438:	4313      	orrs	r3, r2
 800743a:	3401      	adds	r4, #1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007442:	2206      	movs	r2, #6
 8007444:	4829      	ldr	r0, [pc, #164]	@ (80074ec <_vfiprintf_r+0x224>)
 8007446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800744a:	f000 fb23 	bl	8007a94 <memchr>
 800744e:	2800      	cmp	r0, #0
 8007450:	d03f      	beq.n	80074d2 <_vfiprintf_r+0x20a>
 8007452:	4b27      	ldr	r3, [pc, #156]	@ (80074f0 <_vfiprintf_r+0x228>)
 8007454:	bb1b      	cbnz	r3, 800749e <_vfiprintf_r+0x1d6>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	3307      	adds	r3, #7
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	3308      	adds	r3, #8
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007464:	443b      	add	r3, r7
 8007466:	9309      	str	r3, [sp, #36]	@ 0x24
 8007468:	e76a      	b.n	8007340 <_vfiprintf_r+0x78>
 800746a:	460c      	mov	r4, r1
 800746c:	2001      	movs	r0, #1
 800746e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007472:	e7a8      	b.n	80073c6 <_vfiprintf_r+0xfe>
 8007474:	2300      	movs	r3, #0
 8007476:	f04f 0c0a 	mov.w	ip, #10
 800747a:	4619      	mov	r1, r3
 800747c:	3401      	adds	r4, #1
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	4620      	mov	r0, r4
 8007482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007486:	3a30      	subs	r2, #48	@ 0x30
 8007488:	2a09      	cmp	r2, #9
 800748a:	d903      	bls.n	8007494 <_vfiprintf_r+0x1cc>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0c6      	beq.n	800741e <_vfiprintf_r+0x156>
 8007490:	9105      	str	r1, [sp, #20]
 8007492:	e7c4      	b.n	800741e <_vfiprintf_r+0x156>
 8007494:	4604      	mov	r4, r0
 8007496:	2301      	movs	r3, #1
 8007498:	fb0c 2101 	mla	r1, ip, r1, r2
 800749c:	e7f0      	b.n	8007480 <_vfiprintf_r+0x1b8>
 800749e:	ab03      	add	r3, sp, #12
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	462a      	mov	r2, r5
 80074a4:	4630      	mov	r0, r6
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <_vfiprintf_r+0x22c>)
 80074a8:	a904      	add	r1, sp, #16
 80074aa:	f3af 8000 	nop.w
 80074ae:	4607      	mov	r7, r0
 80074b0:	1c78      	adds	r0, r7, #1
 80074b2:	d1d6      	bne.n	8007462 <_vfiprintf_r+0x19a>
 80074b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074b6:	07d9      	lsls	r1, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_vfiprintf_r+0x1fe>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	059a      	lsls	r2, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_vfiprintf_r+0x1fe>
 80074c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074c2:	f7ff fdd3 	bl	800706c <__retarget_lock_release_recursive>
 80074c6:	89ab      	ldrh	r3, [r5, #12]
 80074c8:	065b      	lsls	r3, r3, #25
 80074ca:	f53f af1f 	bmi.w	800730c <_vfiprintf_r+0x44>
 80074ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074d0:	e71e      	b.n	8007310 <_vfiprintf_r+0x48>
 80074d2:	ab03      	add	r3, sp, #12
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	462a      	mov	r2, r5
 80074d8:	4630      	mov	r0, r6
 80074da:	4b06      	ldr	r3, [pc, #24]	@ (80074f4 <_vfiprintf_r+0x22c>)
 80074dc:	a904      	add	r1, sp, #16
 80074de:	f000 f87d 	bl	80075dc <_printf_i>
 80074e2:	e7e4      	b.n	80074ae <_vfiprintf_r+0x1e6>
 80074e4:	08007d02 	.word	0x08007d02
 80074e8:	08007d08 	.word	0x08007d08
 80074ec:	08007d0c 	.word	0x08007d0c
 80074f0:	00000000 	.word	0x00000000
 80074f4:	080072a3 	.word	0x080072a3

080074f8 <_printf_common>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	4698      	mov	r8, r3
 8007500:	688a      	ldr	r2, [r1, #8]
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	4607      	mov	r7, r0
 8007506:	4293      	cmp	r3, r2
 8007508:	bfb8      	it	lt
 800750a:	4613      	movlt	r3, r2
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007512:	460c      	mov	r4, r1
 8007514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007518:	b10a      	cbz	r2, 800751e <_printf_common+0x26>
 800751a:	3301      	adds	r3, #1
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	0699      	lsls	r1, r3, #26
 8007522:	bf42      	ittt	mi
 8007524:	6833      	ldrmi	r3, [r6, #0]
 8007526:	3302      	addmi	r3, #2
 8007528:	6033      	strmi	r3, [r6, #0]
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	f015 0506 	ands.w	r5, r5, #6
 8007530:	d106      	bne.n	8007540 <_printf_common+0x48>
 8007532:	f104 0a19 	add.w	sl, r4, #25
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	6832      	ldr	r2, [r6, #0]
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc2b      	bgt.n	8007598 <_printf_common+0xa0>
 8007540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	3b00      	subs	r3, #0
 8007548:	bf18      	it	ne
 800754a:	2301      	movne	r3, #1
 800754c:	0692      	lsls	r2, r2, #26
 800754e:	d430      	bmi.n	80075b2 <_printf_common+0xba>
 8007550:	4641      	mov	r1, r8
 8007552:	4638      	mov	r0, r7
 8007554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007558:	47c8      	blx	r9
 800755a:	3001      	adds	r0, #1
 800755c:	d023      	beq.n	80075a6 <_printf_common+0xae>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	6922      	ldr	r2, [r4, #16]
 8007562:	f003 0306 	and.w	r3, r3, #6
 8007566:	2b04      	cmp	r3, #4
 8007568:	bf14      	ite	ne
 800756a:	2500      	movne	r5, #0
 800756c:	6833      	ldreq	r3, [r6, #0]
 800756e:	f04f 0600 	mov.w	r6, #0
 8007572:	bf08      	it	eq
 8007574:	68e5      	ldreq	r5, [r4, #12]
 8007576:	f104 041a 	add.w	r4, r4, #26
 800757a:	bf08      	it	eq
 800757c:	1aed      	subeq	r5, r5, r3
 800757e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007582:	bf08      	it	eq
 8007584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007588:	4293      	cmp	r3, r2
 800758a:	bfc4      	itt	gt
 800758c:	1a9b      	subgt	r3, r3, r2
 800758e:	18ed      	addgt	r5, r5, r3
 8007590:	42b5      	cmp	r5, r6
 8007592:	d11a      	bne.n	80075ca <_printf_common+0xd2>
 8007594:	2000      	movs	r0, #0
 8007596:	e008      	b.n	80075aa <_printf_common+0xb2>
 8007598:	2301      	movs	r3, #1
 800759a:	4652      	mov	r2, sl
 800759c:	4641      	mov	r1, r8
 800759e:	4638      	mov	r0, r7
 80075a0:	47c8      	blx	r9
 80075a2:	3001      	adds	r0, #1
 80075a4:	d103      	bne.n	80075ae <_printf_common+0xb6>
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ae:	3501      	adds	r5, #1
 80075b0:	e7c1      	b.n	8007536 <_printf_common+0x3e>
 80075b2:	2030      	movs	r0, #48	@ 0x30
 80075b4:	18e1      	adds	r1, r4, r3
 80075b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075c0:	4422      	add	r2, r4
 80075c2:	3302      	adds	r3, #2
 80075c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075c8:	e7c2      	b.n	8007550 <_printf_common+0x58>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4622      	mov	r2, r4
 80075ce:	4641      	mov	r1, r8
 80075d0:	4638      	mov	r0, r7
 80075d2:	47c8      	blx	r9
 80075d4:	3001      	adds	r0, #1
 80075d6:	d0e6      	beq.n	80075a6 <_printf_common+0xae>
 80075d8:	3601      	adds	r6, #1
 80075da:	e7d9      	b.n	8007590 <_printf_common+0x98>

080075dc <_printf_i>:
 80075dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	7e0f      	ldrb	r7, [r1, #24]
 80075e2:	4691      	mov	r9, r2
 80075e4:	2f78      	cmp	r7, #120	@ 0x78
 80075e6:	4680      	mov	r8, r0
 80075e8:	460c      	mov	r4, r1
 80075ea:	469a      	mov	sl, r3
 80075ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075f2:	d807      	bhi.n	8007604 <_printf_i+0x28>
 80075f4:	2f62      	cmp	r7, #98	@ 0x62
 80075f6:	d80a      	bhi.n	800760e <_printf_i+0x32>
 80075f8:	2f00      	cmp	r7, #0
 80075fa:	f000 80d3 	beq.w	80077a4 <_printf_i+0x1c8>
 80075fe:	2f58      	cmp	r7, #88	@ 0x58
 8007600:	f000 80ba 	beq.w	8007778 <_printf_i+0x19c>
 8007604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800760c:	e03a      	b.n	8007684 <_printf_i+0xa8>
 800760e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007612:	2b15      	cmp	r3, #21
 8007614:	d8f6      	bhi.n	8007604 <_printf_i+0x28>
 8007616:	a101      	add	r1, pc, #4	@ (adr r1, 800761c <_printf_i+0x40>)
 8007618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800761c:	08007675 	.word	0x08007675
 8007620:	08007689 	.word	0x08007689
 8007624:	08007605 	.word	0x08007605
 8007628:	08007605 	.word	0x08007605
 800762c:	08007605 	.word	0x08007605
 8007630:	08007605 	.word	0x08007605
 8007634:	08007689 	.word	0x08007689
 8007638:	08007605 	.word	0x08007605
 800763c:	08007605 	.word	0x08007605
 8007640:	08007605 	.word	0x08007605
 8007644:	08007605 	.word	0x08007605
 8007648:	0800778b 	.word	0x0800778b
 800764c:	080076b3 	.word	0x080076b3
 8007650:	08007745 	.word	0x08007745
 8007654:	08007605 	.word	0x08007605
 8007658:	08007605 	.word	0x08007605
 800765c:	080077ad 	.word	0x080077ad
 8007660:	08007605 	.word	0x08007605
 8007664:	080076b3 	.word	0x080076b3
 8007668:	08007605 	.word	0x08007605
 800766c:	08007605 	.word	0x08007605
 8007670:	0800774d 	.word	0x0800774d
 8007674:	6833      	ldr	r3, [r6, #0]
 8007676:	1d1a      	adds	r2, r3, #4
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6032      	str	r2, [r6, #0]
 800767c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007684:	2301      	movs	r3, #1
 8007686:	e09e      	b.n	80077c6 <_printf_i+0x1ea>
 8007688:	6833      	ldr	r3, [r6, #0]
 800768a:	6820      	ldr	r0, [r4, #0]
 800768c:	1d19      	adds	r1, r3, #4
 800768e:	6031      	str	r1, [r6, #0]
 8007690:	0606      	lsls	r6, r0, #24
 8007692:	d501      	bpl.n	8007698 <_printf_i+0xbc>
 8007694:	681d      	ldr	r5, [r3, #0]
 8007696:	e003      	b.n	80076a0 <_printf_i+0xc4>
 8007698:	0645      	lsls	r5, r0, #25
 800769a:	d5fb      	bpl.n	8007694 <_printf_i+0xb8>
 800769c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	da03      	bge.n	80076ac <_printf_i+0xd0>
 80076a4:	232d      	movs	r3, #45	@ 0x2d
 80076a6:	426d      	negs	r5, r5
 80076a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076ac:	230a      	movs	r3, #10
 80076ae:	4859      	ldr	r0, [pc, #356]	@ (8007814 <_printf_i+0x238>)
 80076b0:	e011      	b.n	80076d6 <_printf_i+0xfa>
 80076b2:	6821      	ldr	r1, [r4, #0]
 80076b4:	6833      	ldr	r3, [r6, #0]
 80076b6:	0608      	lsls	r0, r1, #24
 80076b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076bc:	d402      	bmi.n	80076c4 <_printf_i+0xe8>
 80076be:	0649      	lsls	r1, r1, #25
 80076c0:	bf48      	it	mi
 80076c2:	b2ad      	uxthmi	r5, r5
 80076c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076c6:	6033      	str	r3, [r6, #0]
 80076c8:	bf14      	ite	ne
 80076ca:	230a      	movne	r3, #10
 80076cc:	2308      	moveq	r3, #8
 80076ce:	4851      	ldr	r0, [pc, #324]	@ (8007814 <_printf_i+0x238>)
 80076d0:	2100      	movs	r1, #0
 80076d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076d6:	6866      	ldr	r6, [r4, #4]
 80076d8:	2e00      	cmp	r6, #0
 80076da:	bfa8      	it	ge
 80076dc:	6821      	ldrge	r1, [r4, #0]
 80076de:	60a6      	str	r6, [r4, #8]
 80076e0:	bfa4      	itt	ge
 80076e2:	f021 0104 	bicge.w	r1, r1, #4
 80076e6:	6021      	strge	r1, [r4, #0]
 80076e8:	b90d      	cbnz	r5, 80076ee <_printf_i+0x112>
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	d04b      	beq.n	8007786 <_printf_i+0x1aa>
 80076ee:	4616      	mov	r6, r2
 80076f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80076f4:	fb03 5711 	mls	r7, r3, r1, r5
 80076f8:	5dc7      	ldrb	r7, [r0, r7]
 80076fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076fe:	462f      	mov	r7, r5
 8007700:	42bb      	cmp	r3, r7
 8007702:	460d      	mov	r5, r1
 8007704:	d9f4      	bls.n	80076f0 <_printf_i+0x114>
 8007706:	2b08      	cmp	r3, #8
 8007708:	d10b      	bne.n	8007722 <_printf_i+0x146>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	07df      	lsls	r7, r3, #31
 800770e:	d508      	bpl.n	8007722 <_printf_i+0x146>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	6861      	ldr	r1, [r4, #4]
 8007714:	4299      	cmp	r1, r3
 8007716:	bfde      	ittt	le
 8007718:	2330      	movle	r3, #48	@ 0x30
 800771a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800771e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007722:	1b92      	subs	r2, r2, r6
 8007724:	6122      	str	r2, [r4, #16]
 8007726:	464b      	mov	r3, r9
 8007728:	4621      	mov	r1, r4
 800772a:	4640      	mov	r0, r8
 800772c:	f8cd a000 	str.w	sl, [sp]
 8007730:	aa03      	add	r2, sp, #12
 8007732:	f7ff fee1 	bl	80074f8 <_printf_common>
 8007736:	3001      	adds	r0, #1
 8007738:	d14a      	bne.n	80077d0 <_printf_i+0x1f4>
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	b004      	add	sp, #16
 8007740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	f043 0320 	orr.w	r3, r3, #32
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	2778      	movs	r7, #120	@ 0x78
 800774e:	4832      	ldr	r0, [pc, #200]	@ (8007818 <_printf_i+0x23c>)
 8007750:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	6831      	ldr	r1, [r6, #0]
 8007758:	061f      	lsls	r7, r3, #24
 800775a:	f851 5b04 	ldr.w	r5, [r1], #4
 800775e:	d402      	bmi.n	8007766 <_printf_i+0x18a>
 8007760:	065f      	lsls	r7, r3, #25
 8007762:	bf48      	it	mi
 8007764:	b2ad      	uxthmi	r5, r5
 8007766:	6031      	str	r1, [r6, #0]
 8007768:	07d9      	lsls	r1, r3, #31
 800776a:	bf44      	itt	mi
 800776c:	f043 0320 	orrmi.w	r3, r3, #32
 8007770:	6023      	strmi	r3, [r4, #0]
 8007772:	b11d      	cbz	r5, 800777c <_printf_i+0x1a0>
 8007774:	2310      	movs	r3, #16
 8007776:	e7ab      	b.n	80076d0 <_printf_i+0xf4>
 8007778:	4826      	ldr	r0, [pc, #152]	@ (8007814 <_printf_i+0x238>)
 800777a:	e7e9      	b.n	8007750 <_printf_i+0x174>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	f023 0320 	bic.w	r3, r3, #32
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	e7f6      	b.n	8007774 <_printf_i+0x198>
 8007786:	4616      	mov	r6, r2
 8007788:	e7bd      	b.n	8007706 <_printf_i+0x12a>
 800778a:	6833      	ldr	r3, [r6, #0]
 800778c:	6825      	ldr	r5, [r4, #0]
 800778e:	1d18      	adds	r0, r3, #4
 8007790:	6961      	ldr	r1, [r4, #20]
 8007792:	6030      	str	r0, [r6, #0]
 8007794:	062e      	lsls	r6, r5, #24
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	d501      	bpl.n	800779e <_printf_i+0x1c2>
 800779a:	6019      	str	r1, [r3, #0]
 800779c:	e002      	b.n	80077a4 <_printf_i+0x1c8>
 800779e:	0668      	lsls	r0, r5, #25
 80077a0:	d5fb      	bpl.n	800779a <_printf_i+0x1be>
 80077a2:	8019      	strh	r1, [r3, #0]
 80077a4:	2300      	movs	r3, #0
 80077a6:	4616      	mov	r6, r2
 80077a8:	6123      	str	r3, [r4, #16]
 80077aa:	e7bc      	b.n	8007726 <_printf_i+0x14a>
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	2100      	movs	r1, #0
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	6032      	str	r2, [r6, #0]
 80077b4:	681e      	ldr	r6, [r3, #0]
 80077b6:	6862      	ldr	r2, [r4, #4]
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 f96b 	bl	8007a94 <memchr>
 80077be:	b108      	cbz	r0, 80077c4 <_printf_i+0x1e8>
 80077c0:	1b80      	subs	r0, r0, r6
 80077c2:	6060      	str	r0, [r4, #4]
 80077c4:	6863      	ldr	r3, [r4, #4]
 80077c6:	6123      	str	r3, [r4, #16]
 80077c8:	2300      	movs	r3, #0
 80077ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ce:	e7aa      	b.n	8007726 <_printf_i+0x14a>
 80077d0:	4632      	mov	r2, r6
 80077d2:	4649      	mov	r1, r9
 80077d4:	4640      	mov	r0, r8
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	47d0      	blx	sl
 80077da:	3001      	adds	r0, #1
 80077dc:	d0ad      	beq.n	800773a <_printf_i+0x15e>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	079b      	lsls	r3, r3, #30
 80077e2:	d413      	bmi.n	800780c <_printf_i+0x230>
 80077e4:	68e0      	ldr	r0, [r4, #12]
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	4298      	cmp	r0, r3
 80077ea:	bfb8      	it	lt
 80077ec:	4618      	movlt	r0, r3
 80077ee:	e7a6      	b.n	800773e <_printf_i+0x162>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4632      	mov	r2, r6
 80077f4:	4649      	mov	r1, r9
 80077f6:	4640      	mov	r0, r8
 80077f8:	47d0      	blx	sl
 80077fa:	3001      	adds	r0, #1
 80077fc:	d09d      	beq.n	800773a <_printf_i+0x15e>
 80077fe:	3501      	adds	r5, #1
 8007800:	68e3      	ldr	r3, [r4, #12]
 8007802:	9903      	ldr	r1, [sp, #12]
 8007804:	1a5b      	subs	r3, r3, r1
 8007806:	42ab      	cmp	r3, r5
 8007808:	dcf2      	bgt.n	80077f0 <_printf_i+0x214>
 800780a:	e7eb      	b.n	80077e4 <_printf_i+0x208>
 800780c:	2500      	movs	r5, #0
 800780e:	f104 0619 	add.w	r6, r4, #25
 8007812:	e7f5      	b.n	8007800 <_printf_i+0x224>
 8007814:	08007d13 	.word	0x08007d13
 8007818:	08007d24 	.word	0x08007d24

0800781c <__sflush_r>:
 800781c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	0716      	lsls	r6, r2, #28
 8007824:	4605      	mov	r5, r0
 8007826:	460c      	mov	r4, r1
 8007828:	d454      	bmi.n	80078d4 <__sflush_r+0xb8>
 800782a:	684b      	ldr	r3, [r1, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	dc02      	bgt.n	8007836 <__sflush_r+0x1a>
 8007830:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	dd48      	ble.n	80078c8 <__sflush_r+0xac>
 8007836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007838:	2e00      	cmp	r6, #0
 800783a:	d045      	beq.n	80078c8 <__sflush_r+0xac>
 800783c:	2300      	movs	r3, #0
 800783e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007842:	682f      	ldr	r7, [r5, #0]
 8007844:	6a21      	ldr	r1, [r4, #32]
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	d030      	beq.n	80078ac <__sflush_r+0x90>
 800784a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	0759      	lsls	r1, r3, #29
 8007850:	d505      	bpl.n	800785e <__sflush_r+0x42>
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	1ad2      	subs	r2, r2, r3
 8007856:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007858:	b10b      	cbz	r3, 800785e <__sflush_r+0x42>
 800785a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800785c:	1ad2      	subs	r2, r2, r3
 800785e:	2300      	movs	r3, #0
 8007860:	4628      	mov	r0, r5
 8007862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007864:	6a21      	ldr	r1, [r4, #32]
 8007866:	47b0      	blx	r6
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	89a3      	ldrh	r3, [r4, #12]
 800786c:	d106      	bne.n	800787c <__sflush_r+0x60>
 800786e:	6829      	ldr	r1, [r5, #0]
 8007870:	291d      	cmp	r1, #29
 8007872:	d82b      	bhi.n	80078cc <__sflush_r+0xb0>
 8007874:	4a28      	ldr	r2, [pc, #160]	@ (8007918 <__sflush_r+0xfc>)
 8007876:	410a      	asrs	r2, r1
 8007878:	07d6      	lsls	r6, r2, #31
 800787a:	d427      	bmi.n	80078cc <__sflush_r+0xb0>
 800787c:	2200      	movs	r2, #0
 800787e:	6062      	str	r2, [r4, #4]
 8007880:	6922      	ldr	r2, [r4, #16]
 8007882:	04d9      	lsls	r1, r3, #19
 8007884:	6022      	str	r2, [r4, #0]
 8007886:	d504      	bpl.n	8007892 <__sflush_r+0x76>
 8007888:	1c42      	adds	r2, r0, #1
 800788a:	d101      	bne.n	8007890 <__sflush_r+0x74>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b903      	cbnz	r3, 8007892 <__sflush_r+0x76>
 8007890:	6560      	str	r0, [r4, #84]	@ 0x54
 8007892:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007894:	602f      	str	r7, [r5, #0]
 8007896:	b1b9      	cbz	r1, 80078c8 <__sflush_r+0xac>
 8007898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800789c:	4299      	cmp	r1, r3
 800789e:	d002      	beq.n	80078a6 <__sflush_r+0x8a>
 80078a0:	4628      	mov	r0, r5
 80078a2:	f7ff fbf3 	bl	800708c <_free_r>
 80078a6:	2300      	movs	r3, #0
 80078a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078aa:	e00d      	b.n	80078c8 <__sflush_r+0xac>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b0      	blx	r6
 80078b2:	4602      	mov	r2, r0
 80078b4:	1c50      	adds	r0, r2, #1
 80078b6:	d1c9      	bne.n	800784c <__sflush_r+0x30>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0c6      	beq.n	800784c <__sflush_r+0x30>
 80078be:	2b1d      	cmp	r3, #29
 80078c0:	d001      	beq.n	80078c6 <__sflush_r+0xaa>
 80078c2:	2b16      	cmp	r3, #22
 80078c4:	d11d      	bne.n	8007902 <__sflush_r+0xe6>
 80078c6:	602f      	str	r7, [r5, #0]
 80078c8:	2000      	movs	r0, #0
 80078ca:	e021      	b.n	8007910 <__sflush_r+0xf4>
 80078cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d0:	b21b      	sxth	r3, r3
 80078d2:	e01a      	b.n	800790a <__sflush_r+0xee>
 80078d4:	690f      	ldr	r7, [r1, #16]
 80078d6:	2f00      	cmp	r7, #0
 80078d8:	d0f6      	beq.n	80078c8 <__sflush_r+0xac>
 80078da:	0793      	lsls	r3, r2, #30
 80078dc:	bf18      	it	ne
 80078de:	2300      	movne	r3, #0
 80078e0:	680e      	ldr	r6, [r1, #0]
 80078e2:	bf08      	it	eq
 80078e4:	694b      	ldreq	r3, [r1, #20]
 80078e6:	1bf6      	subs	r6, r6, r7
 80078e8:	600f      	str	r7, [r1, #0]
 80078ea:	608b      	str	r3, [r1, #8]
 80078ec:	2e00      	cmp	r6, #0
 80078ee:	ddeb      	ble.n	80078c8 <__sflush_r+0xac>
 80078f0:	4633      	mov	r3, r6
 80078f2:	463a      	mov	r2, r7
 80078f4:	4628      	mov	r0, r5
 80078f6:	6a21      	ldr	r1, [r4, #32]
 80078f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80078fc:	47e0      	blx	ip
 80078fe:	2800      	cmp	r0, #0
 8007900:	dc07      	bgt.n	8007912 <__sflush_r+0xf6>
 8007902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790a:	f04f 30ff 	mov.w	r0, #4294967295
 800790e:	81a3      	strh	r3, [r4, #12]
 8007910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007912:	4407      	add	r7, r0
 8007914:	1a36      	subs	r6, r6, r0
 8007916:	e7e9      	b.n	80078ec <__sflush_r+0xd0>
 8007918:	dfbffffe 	.word	0xdfbffffe

0800791c <_fflush_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	690b      	ldr	r3, [r1, #16]
 8007920:	4605      	mov	r5, r0
 8007922:	460c      	mov	r4, r1
 8007924:	b913      	cbnz	r3, 800792c <_fflush_r+0x10>
 8007926:	2500      	movs	r5, #0
 8007928:	4628      	mov	r0, r5
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	b118      	cbz	r0, 8007936 <_fflush_r+0x1a>
 800792e:	6a03      	ldr	r3, [r0, #32]
 8007930:	b90b      	cbnz	r3, 8007936 <_fflush_r+0x1a>
 8007932:	f7ff f94d 	bl	8006bd0 <__sinit>
 8007936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f3      	beq.n	8007926 <_fflush_r+0xa>
 800793e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007940:	07d0      	lsls	r0, r2, #31
 8007942:	d404      	bmi.n	800794e <_fflush_r+0x32>
 8007944:	0599      	lsls	r1, r3, #22
 8007946:	d402      	bmi.n	800794e <_fflush_r+0x32>
 8007948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800794a:	f7ff fb8e 	bl	800706a <__retarget_lock_acquire_recursive>
 800794e:	4628      	mov	r0, r5
 8007950:	4621      	mov	r1, r4
 8007952:	f7ff ff63 	bl	800781c <__sflush_r>
 8007956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007958:	4605      	mov	r5, r0
 800795a:	07da      	lsls	r2, r3, #31
 800795c:	d4e4      	bmi.n	8007928 <_fflush_r+0xc>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	059b      	lsls	r3, r3, #22
 8007962:	d4e1      	bmi.n	8007928 <_fflush_r+0xc>
 8007964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007966:	f7ff fb81 	bl	800706c <__retarget_lock_release_recursive>
 800796a:	e7dd      	b.n	8007928 <_fflush_r+0xc>

0800796c <__swhatbuf_r>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	4615      	mov	r5, r2
 8007976:	2900      	cmp	r1, #0
 8007978:	461e      	mov	r6, r3
 800797a:	b096      	sub	sp, #88	@ 0x58
 800797c:	da0c      	bge.n	8007998 <__swhatbuf_r+0x2c>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	2100      	movs	r1, #0
 8007982:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007986:	bf14      	ite	ne
 8007988:	2340      	movne	r3, #64	@ 0x40
 800798a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800798e:	2000      	movs	r0, #0
 8007990:	6031      	str	r1, [r6, #0]
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	b016      	add	sp, #88	@ 0x58
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	466a      	mov	r2, sp
 800799a:	f000 f849 	bl	8007a30 <_fstat_r>
 800799e:	2800      	cmp	r0, #0
 80079a0:	dbed      	blt.n	800797e <__swhatbuf_r+0x12>
 80079a2:	9901      	ldr	r1, [sp, #4]
 80079a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079ac:	4259      	negs	r1, r3
 80079ae:	4159      	adcs	r1, r3
 80079b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079b4:	e7eb      	b.n	800798e <__swhatbuf_r+0x22>

080079b6 <__smakebuf_r>:
 80079b6:	898b      	ldrh	r3, [r1, #12]
 80079b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ba:	079d      	lsls	r5, r3, #30
 80079bc:	4606      	mov	r6, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	d507      	bpl.n	80079d2 <__smakebuf_r+0x1c>
 80079c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	2301      	movs	r3, #1
 80079cc:	6163      	str	r3, [r4, #20]
 80079ce:	b003      	add	sp, #12
 80079d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d2:	466a      	mov	r2, sp
 80079d4:	ab01      	add	r3, sp, #4
 80079d6:	f7ff ffc9 	bl	800796c <__swhatbuf_r>
 80079da:	9f00      	ldr	r7, [sp, #0]
 80079dc:	4605      	mov	r5, r0
 80079de:	4639      	mov	r1, r7
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7ff fbbd 	bl	8007160 <_malloc_r>
 80079e6:	b948      	cbnz	r0, 80079fc <__smakebuf_r+0x46>
 80079e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ec:	059a      	lsls	r2, r3, #22
 80079ee:	d4ee      	bmi.n	80079ce <__smakebuf_r+0x18>
 80079f0:	f023 0303 	bic.w	r3, r3, #3
 80079f4:	f043 0302 	orr.w	r3, r3, #2
 80079f8:	81a3      	strh	r3, [r4, #12]
 80079fa:	e7e2      	b.n	80079c2 <__smakebuf_r+0xc>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	6020      	str	r0, [r4, #0]
 8007a0c:	b15b      	cbz	r3, 8007a26 <__smakebuf_r+0x70>
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a14:	f000 f81e 	bl	8007a54 <_isatty_r>
 8007a18:	b128      	cbz	r0, 8007a26 <__smakebuf_r+0x70>
 8007a1a:	89a3      	ldrh	r3, [r4, #12]
 8007a1c:	f023 0303 	bic.w	r3, r3, #3
 8007a20:	f043 0301 	orr.w	r3, r3, #1
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	431d      	orrs	r5, r3
 8007a2a:	81a5      	strh	r5, [r4, #12]
 8007a2c:	e7cf      	b.n	80079ce <__smakebuf_r+0x18>
	...

08007a30 <_fstat_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	2300      	movs	r3, #0
 8007a34:	4d06      	ldr	r5, [pc, #24]	@ (8007a50 <_fstat_r+0x20>)
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	f7f8 ff99 	bl	8000974 <_fstat>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d102      	bne.n	8007a4c <_fstat_r+0x1c>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b103      	cbz	r3, 8007a4c <_fstat_r+0x1c>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	20001ccc 	.word	0x20001ccc

08007a54 <_isatty_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	2300      	movs	r3, #0
 8007a58:	4d05      	ldr	r5, [pc, #20]	@ (8007a70 <_isatty_r+0x1c>)
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7f8 ff97 	bl	8000992 <_isatty>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_isatty_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_isatty_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20001ccc 	.word	0x20001ccc

08007a74 <_sbrk_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	2300      	movs	r3, #0
 8007a78:	4d05      	ldr	r5, [pc, #20]	@ (8007a90 <_sbrk_r+0x1c>)
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7f8 ff9e 	bl	80009c0 <_sbrk>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_sbrk_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_sbrk_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20001ccc 	.word	0x20001ccc

08007a94 <memchr>:
 8007a94:	4603      	mov	r3, r0
 8007a96:	b510      	push	{r4, lr}
 8007a98:	b2c9      	uxtb	r1, r1
 8007a9a:	4402      	add	r2, r0
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	d101      	bne.n	8007aa6 <memchr+0x12>
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e003      	b.n	8007aae <memchr+0x1a>
 8007aa6:	7804      	ldrb	r4, [r0, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	428c      	cmp	r4, r1
 8007aac:	d1f6      	bne.n	8007a9c <memchr+0x8>
 8007aae:	bd10      	pop	{r4, pc}

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
